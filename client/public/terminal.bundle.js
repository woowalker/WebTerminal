!function(e){var t={};function i(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=t,i.d=function(e,t,r){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(r,n,function(t){return e[t]}.bind(null,n));return r},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=21)}([function(e,t,i){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(e,t)},function(e,t){function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)});Object.defineProperty(t,"__esModule",{value:!0});var s=i(24),o=i(2),a=i(25),l=i(1);t.DEFAULT_ATTR=256|l.DEFAULT_COLOR<<9,t.CHAR_DATA_ATTR_INDEX=0,t.CHAR_DATA_CHAR_INDEX=1,t.CHAR_DATA_WIDTH_INDEX=2,t.CHAR_DATA_CODE_INDEX=3,t.MAX_BUFFER_SIZE=4294967295,t.NULL_CELL_CHAR=" ",t.NULL_CELL_WIDTH=1,t.NULL_CELL_CODE=32;var h=function(){function e(e,t){this._terminal=e,this._hasScrollback=t,this.markers=[],this.clear()}return e.prototype.setBufferLineFactory=function(e){"JsArray"===e?this._bufferLineConstructor!==a.BufferLineJSArray&&(this._bufferLineConstructor=a.BufferLineJSArray,this._recreateLines()):this._bufferLineConstructor!==a.BufferLine&&(this._bufferLineConstructor=a.BufferLine,this._recreateLines())},e.prototype._recreateLines=function(){if(this.lines)for(var e=0;e<this.lines.length;++e){for(var t=this.lines.get(e),i=new this._bufferLineConstructor(t.length),r=0;r<t.length;++r)i.set(r,t.get(r));this.lines.set(e,i)}},e.prototype.getBlankLine=function(e,i){var r=[e,t.NULL_CELL_CHAR,t.NULL_CELL_WIDTH,t.NULL_CELL_CODE];return new this._bufferLineConstructor(this._terminal.cols,r,i)},Object.defineProperty(e.prototype,"hasScrollback",{get:function(){return this._hasScrollback&&this.lines.maxLength>this._terminal.rows},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isCursorInViewport",{get:function(){var e=this.ybase+this.y-this.ydisp;return e>=0&&e<this._terminal.rows},enumerable:!0,configurable:!0}),e.prototype._getCorrectBufferLength=function(e){if(!this._hasScrollback)return e;var i=e+this._terminal.options.scrollback;return i>t.MAX_BUFFER_SIZE?t.MAX_BUFFER_SIZE:i},e.prototype.fillViewportRows=function(e){if(0===this.lines.length){void 0===e&&(e=t.DEFAULT_ATTR);for(var i=this._terminal.rows;i--;)this.lines.push(this.getBlankLine(e))}},e.prototype.clear=function(){this.setBufferLineFactory(this._terminal.options.experimentalBufferLineImpl),this.ydisp=0,this.ybase=0,this.y=0,this.x=0,this.lines=new s.CircularList(this._getCorrectBufferLength(this._terminal.rows)),this.scrollTop=0,this.scrollBottom=this._terminal.rows-1,this.setupTabStops()},e.prototype.resize=function(e,i){var r=this._getCorrectBufferLength(i);if(r>this.lines.maxLength&&(this.lines.maxLength=r),this.lines.length>0){if(this._terminal.cols<e)for(var n=[t.DEFAULT_ATTR,t.NULL_CELL_CHAR,t.NULL_CELL_WIDTH,t.NULL_CELL_CODE],s=0;s<this.lines.length;s++)this.lines.get(s).resize(e,n);var o=0;if(this._terminal.rows<i){for(var a=this._terminal.rows;a<i;a++)if(this.lines.length<i+this.ybase)if(this.ybase>0&&this.lines.length<=this.ybase+this.y+o+1)this.ybase--,o++,this.ydisp>0&&this.ydisp--;else{var l=[t.DEFAULT_ATTR,t.NULL_CELL_CHAR,t.NULL_CELL_WIDTH,t.NULL_CELL_CODE];this.lines.push(new this._bufferLineConstructor(e,l))}}else for(a=this._terminal.rows;a>i;a--)this.lines.length>i+this.ybase&&(this.lines.length>this.ybase+this.y+1?this.lines.pop():(this.ybase++,this.ydisp++));if(r<this.lines.maxLength){var h=this.lines.length-r;h>0&&(this.lines.trimStart(h),this.ybase=Math.max(this.ybase-h,0),this.ydisp=Math.max(this.ydisp-h,0)),this.lines.maxLength=r}this.x=Math.min(this.x,e-1),this.y=Math.min(this.y,i-1),o&&(this.y+=o),this.savedY=Math.min(this.savedY,i-1),this.savedX=Math.min(this.savedX,e-1),this.scrollTop=0}this.scrollBottom=i-1},e.prototype.stringIndexToBufferIndex=function(e,i){for(;i;){for(var r=this.lines.get(e),n=0;n<r.length;++n)if((i-=r.get(n)[t.CHAR_DATA_CHAR_INDEX].length)<0)return[e,n];e++}return[e,0]},e.prototype.translateBufferLineToString=function(e,i,r,n){void 0===r&&(r=0),void 0===n&&(n=null);var s="",o=this.lines.get(e);if(!o)return"";var a=r;null===n&&(n=o.length);for(var l=n,h=0;h<o.length;h++){var c=o.get(h);s+=c[t.CHAR_DATA_CHAR_INDEX],0===c[t.CHAR_DATA_WIDTH_INDEX]?(r>=h&&a--,n>h&&l--):c[t.CHAR_DATA_CHAR_INDEX].length>1&&(r>h&&(a+=c[t.CHAR_DATA_CHAR_INDEX].length-1),n>h&&(l+=c[t.CHAR_DATA_CHAR_INDEX].length-1))}if(i){var u=s.search(/\s+$/);if(-1!==u&&(l=Math.min(l,u)),l<=a)return""}return s.substring(a,l)},e.prototype.getWrappedRangeForLine=function(e){for(var t=e,i=e;t>0&&this.lines.get(t).isWrapped;)t--;for(;i+1<this.lines.length&&this.lines.get(i+1).isWrapped;)i++;return{first:t,last:i}},e.prototype.setupTabStops=function(e){for(null!=e?this.tabs[e]||(e=this.prevStop(e)):(this.tabs={},e=0);e<this._terminal.cols;e+=this._terminal.options.tabStopWidth)this.tabs[e]=!0},e.prototype.prevStop=function(e){for(null==e&&(e=this.x);!this.tabs[--e]&&e>0;);return e>=this._terminal.cols?this._terminal.cols-1:e<0?0:e},e.prototype.nextStop=function(e){for(null==e&&(e=this.x);!this.tabs[++e]&&e<this._terminal.cols;);return e>=this._terminal.cols?this._terminal.cols-1:e<0?0:e},e.prototype.addMarker=function(e){var t=this,i=new c(e);return this.markers.push(i),i.register(this.lines.addDisposableListener("trim",function(e){i.line-=e,i.line<0&&i.dispose()})),i.register(i.addDisposableListener("dispose",function(){return t._removeMarker(i)})),i},e.prototype._removeMarker=function(e){this.markers.splice(this.markers.indexOf(e),1)},e.prototype.iterator=function(e,t,i,r,n){return new u(this,e,t,i,r,n)},e}();t.Buffer=h;var c=function(e){function t(i){var r=e.call(this)||this;return r.line=i,r._id=t._nextId++,r.isDisposed=!1,r}return n(t,e),Object.defineProperty(t.prototype,"id",{get:function(){return this._id},enumerable:!0,configurable:!0}),t.prototype.dispose=function(){this.isDisposed||(this.isDisposed=!0,this.emit("dispose"),e.prototype.dispose.call(this))},t._nextId=1,t}(o.EventEmitter);t.Marker=c;var u=function(){function e(e,t,i,r,n,s){void 0===i&&(i=0),void 0===r&&(r=e.lines.length),void 0===n&&(n=0),void 0===s&&(s=0),this._buffer=e,this._trimRight=t,this._startIndex=i,this._endIndex=r,this._startOverscan=n,this._endOverscan=s,this._startIndex<0&&(this._startIndex=0),this._endIndex>this._buffer.lines.length&&(this._endIndex=this._buffer.lines.length),this._current=this._startIndex}return e.prototype.hasNext=function(){return this._current<this._endIndex},e.prototype.next=function(){var e=this._buffer.getWrappedRangeForLine(this._current);e.first<this._startIndex-this._startOverscan&&(e.first=this._startIndex-this._startOverscan),e.last>this._endIndex+this._endOverscan&&(e.last=this._endIndex+this._endOverscan),e.first=Math.max(e.first,0),e.last=Math.min(e.last,this._buffer.lines.length);for(var t="",i=e.first;i<=e.last;++i)t+=this._buffer.translateBufferLineToString(i,!!this._trimRight&&i===e.last);return this._current=e.last+1,{range:e,content:t}},e}();t.BufferStringIterator=u},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_COLOR=256,t.INVERTED_DEFAULT_COLOR=257,t.DIM_OPACITY=.5,t.CHAR_ATLAS_CELL_SPACING=1},function(e,t,i){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(e,t)},function(e,t){function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)});Object.defineProperty(t,"__esModule",{value:!0});var s=function(e){function t(){var t=e.call(this)||this;return t._events=t._events||{},t}return n(t,e),t.prototype.on=function(e,t){this._events[e]=this._events[e]||[],this._events[e].push(t)},t.prototype.addDisposableListener=function(e,t){var i=this;this.on(e,t);var r=!1;return{dispose:function(){r||(i.off(e,t),r=!0)}}},t.prototype.off=function(e,t){if(this._events[e])for(var i=this._events[e],r=i.length;r--;)if(i[r]===t)return void i.splice(r,1)},t.prototype.removeAllListeners=function(e){this._events[e]&&delete this._events[e]},t.prototype.emit=function(e){for(var t=[],i=1;i<arguments.length;i++)t[i-1]=arguments[i];if(this._events[e])for(var r=this._events[e],n=0;n<r.length;n++)r[n].apply(this,t)},t.prototype.listeners=function(e){return this._events[e]||[]},t.prototype.dispose=function(){e.prototype.dispose.call(this),this._events={}},t}(i(3).Disposable);t.EventEmitter=s},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this._disposables=[],this._isDisposed=!1}return e.prototype.dispose=function(){this._isDisposed=!0,this._disposables.forEach(function(e){return e.dispose()}),this._disposables.length=0},e.prototype.register=function(e){this._disposables.push(e)},e.prototype.unregister=function(e){var t=this._disposables.indexOf(e);-1!==t&&this._disposables.splice(t,1)},e}();t.Disposable=r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(1);t.generateConfig=function(e,t,i,r){var n={foreground:r.foreground,background:r.background,cursor:null,cursorAccent:null,selection:null,ansi:r.ansi.slice(0,16)};return{type:i.options.experimentalCharAtlas,devicePixelRatio:window.devicePixelRatio,scaledCharWidth:e,scaledCharHeight:t,fontFamily:i.options.fontFamily,fontSize:i.options.fontSize,fontWeight:i.options.fontWeight,fontWeightBold:i.options.fontWeightBold,allowTransparency:i.options.allowTransparency,colors:n}},t.configEquals=function(e,t){for(var i=0;i<e.colors.ansi.length;i++)if(e.colors.ansi[i].rgba!==t.colors.ansi[i].rgba)return!1;return e.type===t.type&&e.devicePixelRatio===t.devicePixelRatio&&e.fontFamily===t.fontFamily&&e.fontSize===t.fontSize&&e.fontWeight===t.fontWeight&&e.fontWeightBold===t.fontWeightBold&&e.allowTransparency===t.allowTransparency&&e.scaledCharWidth===t.scaledCharWidth&&e.scaledCharHeight===t.scaledCharHeight&&e.colors.foreground===t.colors.foreground&&e.colors.background===t.colors.background},t.is256Color=function(e){return e<r.DEFAULT_COLOR}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="undefined"==typeof navigator,n=r?"node":navigator.userAgent,s=r?"node":navigator.platform;function o(e,t){return e.indexOf(t)>=0}t.isFirefox=!!~n.indexOf("Firefox"),t.isSafari=/^((?!chrome|android).)*safari/i.test(n),t.isMSIE=!!~n.indexOf("MSIE")||!!~n.indexOf("Trident"),t.isMac=o(["Macintosh","MacIntel","MacPPC","Mac68K"],s),t.isIpad="iPad"===s,t.isIphone="iPhone"===s,t.isMSWindows=o(["Windows","Win16","Win32","WinCE"],s),t.isLinux=s.indexOf("Linux")>=0},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.addDisposableDomListener=function(e,t,i,r){return e.addEventListener(t,i,r),{dispose:function(){i&&(e.removeEventListener(t,i,r),e=null,i=null)}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.NUL="\0",e.SOH="",e.STX="",e.ETX="",e.EOT="",e.ENQ="",e.ACK="",e.BEL="",e.BS="\b",e.HT="\t",e.LF="\n",e.VT="\v",e.FF="\f",e.CR="\r",e.SO="",e.SI="",e.DLE="",e.DC1="",e.DC2="",e.DC3="",e.DC4="",e.NAK="",e.SYN="",e.ETB="",e.CAN="",e.EM="",e.SUB="",e.ESC="",e.FS="",e.GS="",e.RS="",e.US="",e.SP=" ",e.DEL=""}(t.C0||(t.C0={})),function(e){e.PAD="",e.HOP="",e.BPH="",e.NBH="",e.IND="",e.NEL="",e.SSA="",e.ESA="",e.HTS="",e.HTJ="",e.VTS="",e.PLD="",e.PLU="",e.RI="",e.SS2="",e.SS3="",e.DCS="",e.PU1="",e.PU2="",e.STS="",e.CCH="",e.MW="",e.SPA="",e.EPA="",e.SOS="",e.SGCI="",e.SCI="",e.CSI="",e.ST="",e.OSC="",e.PM="",e.APC=""}(t.C1||(t.C1={}))},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(1),n=i(15),s=i(0),o=i(4),a=function(){function e(e,t,i,r,n){this._container=e,this._alpha=r,this._colors=n,this._scaledCharWidth=0,this._scaledCharHeight=0,this._scaledCellWidth=0,this._scaledCellHeight=0,this._scaledCharLeft=0,this._scaledCharTop=0,this._currentGlyphIdentifier={chars:"",code:0,bg:0,fg:0,bold:!1,dim:!1,italic:!1},this._canvas=document.createElement("canvas"),this._canvas.classList.add("xterm-"+t+"-layer"),this._canvas.style.zIndex=i.toString(),this._initCanvas(),this._container.appendChild(this._canvas)}return e.prototype.dispose=function(){this._container.removeChild(this._canvas),this._charAtlas&&this._charAtlas.dispose()},e.prototype._initCanvas=function(){this._ctx=this._canvas.getContext("2d",{alpha:this._alpha}),this._alpha||this.clearAll()},e.prototype.onOptionsChanged=function(e){},e.prototype.onBlur=function(e){},e.prototype.onFocus=function(e){},e.prototype.onCursorMove=function(e){},e.prototype.onGridChanged=function(e,t,i){},e.prototype.onSelectionChanged=function(e,t,i,r){void 0===r&&(r=!1)},e.prototype.onThemeChanged=function(e,t){this._refreshCharAtlas(e,t)},e.prototype.setTransparency=function(e,t){if(t!==this._alpha){var i=this._canvas;this._alpha=t,this._canvas=this._canvas.cloneNode(),this._initCanvas(),this._container.replaceChild(this._canvas,i),this._refreshCharAtlas(e,this._colors),this.onGridChanged(e,0,e.rows-1)}},e.prototype._refreshCharAtlas=function(e,t){this._scaledCharWidth<=0&&this._scaledCharHeight<=0||(this._charAtlas=n.acquireCharAtlas(e,t,this._scaledCharWidth,this._scaledCharHeight),this._charAtlas.warmUp())},e.prototype.resize=function(e,t){this._scaledCellWidth=t.scaledCellWidth,this._scaledCellHeight=t.scaledCellHeight,this._scaledCharWidth=t.scaledCharWidth,this._scaledCharHeight=t.scaledCharHeight,this._scaledCharLeft=t.scaledCharLeft,this._scaledCharTop=t.scaledCharTop,this._canvas.width=t.scaledCanvasWidth,this._canvas.height=t.scaledCanvasHeight,this._canvas.style.width=t.canvasWidth+"px",this._canvas.style.height=t.canvasHeight+"px",this._alpha||this.clearAll(),this._refreshCharAtlas(e,this._colors)},e.prototype.fillCells=function(e,t,i,r){this._ctx.fillRect(e*this._scaledCellWidth,t*this._scaledCellHeight,i*this._scaledCellWidth,r*this._scaledCellHeight)},e.prototype.fillBottomLineAtCells=function(e,t,i){void 0===i&&(i=1),this._ctx.fillRect(e*this._scaledCellWidth,(t+1)*this._scaledCellHeight-window.devicePixelRatio-1,i*this._scaledCellWidth,window.devicePixelRatio)},e.prototype.fillLeftLineAtCell=function(e,t){this._ctx.fillRect(e*this._scaledCellWidth,t*this._scaledCellHeight,window.devicePixelRatio,this._scaledCellHeight)},e.prototype.strokeRectAtCell=function(e,t,i,r){this._ctx.lineWidth=window.devicePixelRatio,this._ctx.strokeRect(e*this._scaledCellWidth+window.devicePixelRatio/2,t*this._scaledCellHeight+window.devicePixelRatio/2,i*this._scaledCellWidth-window.devicePixelRatio,r*this._scaledCellHeight-window.devicePixelRatio)},e.prototype.clearAll=function(){this._alpha?this._ctx.clearRect(0,0,this._canvas.width,this._canvas.height):(this._ctx.fillStyle=this._colors.background.css,this._ctx.fillRect(0,0,this._canvas.width,this._canvas.height))},e.prototype.clearCells=function(e,t,i,r){this._alpha?this._ctx.clearRect(e*this._scaledCellWidth,t*this._scaledCellHeight,i*this._scaledCellWidth,r*this._scaledCellHeight):(this._ctx.fillStyle=this._colors.background.css,this._ctx.fillRect(e*this._scaledCellWidth,t*this._scaledCellHeight,i*this._scaledCellWidth,r*this._scaledCellHeight))},e.prototype.fillCharTrueColor=function(e,t,i,r){this._ctx.font=this._getFont(e,!1,!1),this._ctx.textBaseline="top",this._clipRow(e,r),this._ctx.fillText(t[s.CHAR_DATA_CHAR_INDEX],i*this._scaledCellWidth+this._scaledCharLeft,r*this._scaledCellHeight+this._scaledCharTop)},e.prototype.drawChars=function(e,t,i,n,s,o,a,l,h,c,u){a+=e.options.drawBoldTextInBrightColors&&h&&a<8&&a!==r.INVERTED_DEFAULT_COLOR?8:0,this._currentGlyphIdentifier.chars=t,this._currentGlyphIdentifier.code=i,this._currentGlyphIdentifier.bg=l,this._currentGlyphIdentifier.fg=a,this._currentGlyphIdentifier.bold=h&&e.options.enableBold,this._currentGlyphIdentifier.dim=c,this._currentGlyphIdentifier.italic=u,this._charAtlas&&this._charAtlas.draw(this._ctx,this._currentGlyphIdentifier,s*this._scaledCellWidth+this._scaledCharLeft,o*this._scaledCellHeight+this._scaledCharTop)||this._drawUncachedChars(e,t,n,a,s,o,h&&e.options.enableBold,c,u)},e.prototype._drawUncachedChars=function(e,t,i,n,s,a,l,h,c){this._ctx.save(),this._ctx.font=this._getFont(e,l,c),this._ctx.textBaseline="top",n===r.INVERTED_DEFAULT_COLOR?this._ctx.fillStyle=this._colors.background.css:o.is256Color(n)?this._ctx.fillStyle=this._colors.ansi[n].css:this._ctx.fillStyle=this._colors.foreground.css,this._clipRow(e,a),h&&(this._ctx.globalAlpha=r.DIM_OPACITY),this._ctx.fillText(t,s*this._scaledCellWidth+this._scaledCharLeft,a*this._scaledCellHeight+this._scaledCharTop),this._ctx.restore()},e.prototype._clipRow=function(e,t){this._ctx.beginPath(),this._ctx.rect(0,t*this._scaledCellHeight,e.cols*this._scaledCellWidth,this._scaledCellHeight),this._ctx.clip()},e.prototype._getFont=function(e,t,i){return(i?"italic":"")+" "+(t?e.options.fontWeightBold:e.options.fontWeight)+" "+e.options.fontSize*window.devicePixelRatio+"px "+e.options.fontFamily},e}();t.BaseRenderLayer=a},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=l("#ffffff"),n=l("#000000"),s=l("#ffffff"),o=l("#000000"),a={css:"rgba(255, 255, 255, 0.3)",rgba:4294967159};function l(e){return{css:e,rgba:parseInt(e.slice(1),16)<<8|255}}function h(e){var t=e.toString(16);return t.length<2?"0"+t:t}t.DEFAULT_ANSI_COLORS=function(){for(var e=[l("#2e3436"),l("#cc0000"),l("#4e9a06"),l("#c4a000"),l("#3465a4"),l("#75507b"),l("#06989a"),l("#d3d7cf"),l("#555753"),l("#ef2929"),l("#8ae234"),l("#fce94f"),l("#729fcf"),l("#ad7fa8"),l("#34e2e2"),l("#eeeeec")],t=[0,95,135,175,215,255],i=0;i<216;i++){var r=t[i/36%6|0],n=t[i/6%6|0],s=t[i%6];e.push({css:"#"+h(r)+h(n)+h(s),rgba:(r<<24|n<<16|s<<8|255)>>>0})}for(i=0;i<24;i++){var o=8+10*i,a=h(o);e.push({css:"#"+a+a+a,rgba:(o<<24|o<<16|o<<8|255)>>>0})}return e}();var c=function(){function e(e,i){this.allowTransparency=i;var l=e.createElement("canvas");l.width=1,l.height=1,this._ctx=l.getContext("2d"),this._ctx.globalCompositeOperation="copy",this._litmusColor=this._ctx.createLinearGradient(0,0,1,1),this.colors={foreground:r,background:n,cursor:s,cursorAccent:o,selection:a,ansi:t.DEFAULT_ANSI_COLORS.slice()}}return e.prototype.setTheme=function(e){this.colors.foreground=this._parseColor(e.foreground,r),this.colors.background=this._parseColor(e.background,n),this.colors.cursor=this._parseColor(e.cursor,s,!0),this.colors.cursorAccent=this._parseColor(e.cursorAccent,o,!0),this.colors.selection=this._parseColor(e.selection,a,!0),this.colors.ansi[0]=this._parseColor(e.black,t.DEFAULT_ANSI_COLORS[0]),this.colors.ansi[1]=this._parseColor(e.red,t.DEFAULT_ANSI_COLORS[1]),this.colors.ansi[2]=this._parseColor(e.green,t.DEFAULT_ANSI_COLORS[2]),this.colors.ansi[3]=this._parseColor(e.yellow,t.DEFAULT_ANSI_COLORS[3]),this.colors.ansi[4]=this._parseColor(e.blue,t.DEFAULT_ANSI_COLORS[4]),this.colors.ansi[5]=this._parseColor(e.magenta,t.DEFAULT_ANSI_COLORS[5]),this.colors.ansi[6]=this._parseColor(e.cyan,t.DEFAULT_ANSI_COLORS[6]),this.colors.ansi[7]=this._parseColor(e.white,t.DEFAULT_ANSI_COLORS[7]),this.colors.ansi[8]=this._parseColor(e.brightBlack,t.DEFAULT_ANSI_COLORS[8]),this.colors.ansi[9]=this._parseColor(e.brightRed,t.DEFAULT_ANSI_COLORS[9]),this.colors.ansi[10]=this._parseColor(e.brightGreen,t.DEFAULT_ANSI_COLORS[10]),this.colors.ansi[11]=this._parseColor(e.brightYellow,t.DEFAULT_ANSI_COLORS[11]),this.colors.ansi[12]=this._parseColor(e.brightBlue,t.DEFAULT_ANSI_COLORS[12]),this.colors.ansi[13]=this._parseColor(e.brightMagenta,t.DEFAULT_ANSI_COLORS[13]),this.colors.ansi[14]=this._parseColor(e.brightCyan,t.DEFAULT_ANSI_COLORS[14]),this.colors.ansi[15]=this._parseColor(e.brightWhite,t.DEFAULT_ANSI_COLORS[15])},e.prototype._parseColor=function(e,t,i){if(void 0===i&&(i=this.allowTransparency),!e)return t;if(this._ctx.fillStyle=this._litmusColor,this._ctx.fillStyle=e,"string"!=typeof this._ctx.fillStyle)return console.warn("Color: "+e+" is invalid using fallback "+t.css),t;this._ctx.fillRect(0,0,1,1);var r=this._ctx.getImageData(0,0,1,1).data;return i||255===r[3]?{css:e,rgba:(r[0]<<24|r[1]<<16|r[2]<<8|r[3])>>>0}:(console.warn("Color: "+e+" is using transparency, but allowTransparency is false. Using fallback "+t.css+"."),t)},e}();t.ColorManager=c},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this._didWarmUp=!1}return e.prototype.dispose=function(){},e.prototype.warmUp=function(){this._didWarmUp||(this._doWarmUp(),this._didWarmUp=!0)},e.prototype._doWarmUp=function(){},e.prototype.beginFrame=function(){},e}();t.default=r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){this._terminal=e,this._callback=t,this._animationFrame=null}return e.prototype.dispose=function(){this._animationFrame&&(window.cancelAnimationFrame(this._animationFrame),this._animationFrame=null)},e.prototype.refresh=function(e,t){var i=this;e=null!=e?e:0,t=null!=t?t:this._terminal.rows-1;var r=void 0!==this._rowStart&&null!==this._rowStart,n=void 0!==this._rowEnd&&null!==this._rowEnd;this._rowStart=r?Math.min(this._rowStart,e):e,this._rowEnd=n?Math.max(this._rowEnd,t):t,this._animationFrame||(this._animationFrame=window.requestAnimationFrame(function(){return i._innerRefresh()}))},e.prototype._innerRefresh=function(){this._rowStart=Math.max(this._rowStart,0),this._rowEnd=Math.min(this._rowEnd,this._terminal.rows-1),this._callback(this._rowStart,this._rowEnd),this._rowStart=null,this._rowEnd=null,this._animationFrame=null},e}();t.RenderDebouncer=r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.blankLine="Blank line",t.promptLabel="Terminal input",t.tooMuchOutput="Too much output to announce, navigate to rows manually to read"},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(22),n=i(12),s=function(){function e(e){this._core=new r.Terminal(e)}return Object.defineProperty(e.prototype,"element",{get:function(){return this._core.element},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"textarea",{get:function(){return this._core.textarea},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"rows",{get:function(){return this._core.rows},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"cols",{get:function(){return this._core.cols},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"markers",{get:function(){return this._core.markers},enumerable:!0,configurable:!0}),e.prototype.blur=function(){this._core.blur()},e.prototype.focus=function(){this._core.focus()},e.prototype.on=function(e,t){this._core.on(e,t)},e.prototype.off=function(e,t){this._core.off(e,t)},e.prototype.emit=function(e,t){this._core.emit(e,t)},e.prototype.addDisposableListener=function(e,t){return this._core.addDisposableListener(e,t)},e.prototype.resize=function(e,t){this._core.resize(e,t)},e.prototype.writeln=function(e){this._core.writeln(e)},e.prototype.open=function(e){this._core.open(e)},e.prototype.attachCustomKeyEventHandler=function(e){this._core.attachCustomKeyEventHandler(e)},e.prototype.registerLinkMatcher=function(e,t,i){return this._core.registerLinkMatcher(e,t,i)},e.prototype.deregisterLinkMatcher=function(e){this._core.deregisterLinkMatcher(e)},e.prototype.registerCharacterJoiner=function(e){return this._core.registerCharacterJoiner(e)},e.prototype.deregisterCharacterJoiner=function(e){this._core.deregisterCharacterJoiner(e)},e.prototype.addMarker=function(e){return this._core.addMarker(e)},e.prototype.hasSelection=function(){return this._core.hasSelection()},e.prototype.getSelection=function(){return this._core.getSelection()},e.prototype.clearSelection=function(){this._core.clearSelection()},e.prototype.selectAll=function(){this._core.selectAll()},e.prototype.selectLines=function(e,t){this._core.selectLines(e,t)},e.prototype.dispose=function(){this._core.dispose()},e.prototype.destroy=function(){this._core.destroy()},e.prototype.scrollLines=function(e){this._core.scrollLines(e)},e.prototype.scrollPages=function(e){this._core.scrollPages(e)},e.prototype.scrollToTop=function(){this._core.scrollToTop()},e.prototype.scrollToBottom=function(){this._core.scrollToBottom()},e.prototype.scrollToLine=function(e){this._core.scrollToLine(e)},e.prototype.clear=function(){this._core.clear()},e.prototype.write=function(e){this._core.write(e)},e.prototype.getOption=function(e){return this._core.getOption(e)},e.prototype.setOption=function(e,t){this._core.setOption(e,t)},e.prototype.refresh=function(e,t){this._core.refresh(e,t)},e.prototype.reset=function(){this._core.reset()},e.applyAddon=function(t){t.apply(e)},Object.defineProperty(e,"strings",{get:function(){return n},enumerable:!0,configurable:!0}),e}();t.Terminal=s},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(31);t.wcwidth=function(e){var t=[[768,879],[1155,1158],[1160,1161],[1425,1469],[1471,1471],[1473,1474],[1476,1477],[1479,1479],[1536,1539],[1552,1557],[1611,1630],[1648,1648],[1750,1764],[1767,1768],[1770,1773],[1807,1807],[1809,1809],[1840,1866],[1958,1968],[2027,2035],[2305,2306],[2364,2364],[2369,2376],[2381,2381],[2385,2388],[2402,2403],[2433,2433],[2492,2492],[2497,2500],[2509,2509],[2530,2531],[2561,2562],[2620,2620],[2625,2626],[2631,2632],[2635,2637],[2672,2673],[2689,2690],[2748,2748],[2753,2757],[2759,2760],[2765,2765],[2786,2787],[2817,2817],[2876,2876],[2879,2879],[2881,2883],[2893,2893],[2902,2902],[2946,2946],[3008,3008],[3021,3021],[3134,3136],[3142,3144],[3146,3149],[3157,3158],[3260,3260],[3263,3263],[3270,3270],[3276,3277],[3298,3299],[3393,3395],[3405,3405],[3530,3530],[3538,3540],[3542,3542],[3633,3633],[3636,3642],[3655,3662],[3761,3761],[3764,3769],[3771,3772],[3784,3789],[3864,3865],[3893,3893],[3895,3895],[3897,3897],[3953,3966],[3968,3972],[3974,3975],[3984,3991],[3993,4028],[4038,4038],[4141,4144],[4146,4146],[4150,4151],[4153,4153],[4184,4185],[4448,4607],[4959,4959],[5906,5908],[5938,5940],[5970,5971],[6002,6003],[6068,6069],[6071,6077],[6086,6086],[6089,6099],[6109,6109],[6155,6157],[6313,6313],[6432,6434],[6439,6440],[6450,6450],[6457,6459],[6679,6680],[6912,6915],[6964,6964],[6966,6970],[6972,6972],[6978,6978],[7019,7027],[7616,7626],[7678,7679],[8203,8207],[8234,8238],[8288,8291],[8298,8303],[8400,8431],[12330,12335],[12441,12442],[43014,43014],[43019,43019],[43045,43046],[64286,64286],[65024,65039],[65056,65059],[65279,65279],[65529,65531]],i=[[68097,68099],[68101,68102],[68108,68111],[68152,68154],[68159,68159],[119143,119145],[119155,119170],[119173,119179],[119210,119213],[119362,119364],[917505,917505],[917536,917631],[917760,917999]];var n=0|e.control,s=new Uint8Array(65536);r.fill(s,1),s[0]=e.nul,r.fill(s,e.control,1,32),r.fill(s,e.control,127,160),r.fill(s,2,4352,4448),s[9001]=2,s[9002]=2,r.fill(s,2,11904,42192),s[12351]=1,r.fill(s,2,44032,55204),r.fill(s,2,63744,64256),r.fill(s,2,65040,65050),r.fill(s,2,65072,65136),r.fill(s,2,65280,65377),r.fill(s,2,65504,65511);for(var o=0;o<t.length;++o)r.fill(s,0,t[o][0],t[o][1]+1);return function(e){return e<32?0|n:e<127?1:e<65536?s[e]:function(e,t){var i,r=0,n=t.length-1;if(e<t[0][0]||e>t[n][1])return!1;for(;n>=r;)if(e>t[i=r+n>>1][1])r=i+1;else{if(!(e<t[i][0]))return!0;n=i-1}return!1}(t=e,i)?0:t>=131072&&t<=196605||t>=196608&&t<=262141?2:1;var t}}({nul:0,control:0}),t.getStringCellWidth=function(e){for(var i=0,r=e.length,n=0;n<r;++n){var s=e.charCodeAt(n);if(55296<=s&&s<=56319){if(++n>=r)return i+t.wcwidth(s);var o=e.charCodeAt(n);56320<=o&&o<=57343?s=1024*(s-55296)+o-56320+65536:i+=t.wcwidth(o)}i+=t.wcwidth(s)}return i}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(4),n=i(36),s=i(38),o=i(39),a={none:s.default,static:o.default,dynamic:n.default},l=[];t.acquireCharAtlas=function(e,t,i,n){for(var s=r.generateConfig(i,n,e,t),o=0;o<l.length;o++){var h=(c=l[o]).ownedBy.indexOf(e);if(h>=0){if(r.configEquals(c.config,s))return c.atlas;1===c.ownedBy.length?l.splice(o,1):c.ownedBy.splice(h,1);break}}for(o=0;o<l.length;o++){var c=l[o];if(r.configEquals(c.config,s))return c.ownedBy.push(e),c.atlas}var u={atlas:new a[e.options.experimentalCharAtlas](document,s),config:s,ownedBy:[e]};return l.push(u),u.atlas},t.removeTerminalFromCache=function(e){for(var t=0;t<l.length;t++){var i=l[t].ownedBy.indexOf(e);if(-1!==i){1===l[t].ownedBy.length?l.splice(t,1):l[t].ownedBy.splice(i,1);break}}}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(5),n=i(1);function s(e,t){for(var i=!0,r=t.rgba>>>24,n=t.rgba>>>16&255,s=t.rgba>>>8&255,o=0;o<e.data.length;o+=4)e.data[o]===r&&e.data[o+1]===n&&e.data[o+2]===s?e.data[o+3]=0:i=!1;return i}function o(e,t){return e+" "+t.fontSize*t.devicePixelRatio+"px "+t.fontFamily}t.generateStaticCharAtlasTexture=function(e,t,i){var a=i.scaledCharWidth+n.CHAR_ATLAS_CELL_SPACING,l=i.scaledCharHeight+n.CHAR_ATLAS_CELL_SPACING,h=t(255*a,34*l),c=h.getContext("2d",{alpha:i.allowTransparency});c.fillStyle=i.colors.background.css,c.fillRect(0,0,h.width,h.height),c.save(),c.fillStyle=i.colors.foreground.css,c.font=o(i.fontWeight,i),c.textBaseline="top";for(var u=0;u<256;u++)c.save(),c.beginPath(),c.rect(u*a,0,a,l),c.clip(),c.fillText(String.fromCharCode(u),u*a,0),c.restore();for(c.save(),c.font=o(i.fontWeightBold,i),u=0;u<256;u++)c.save(),c.beginPath(),c.rect(u*a,l,a,l),c.clip(),c.fillText(String.fromCharCode(u),u*a,l),c.restore();c.restore(),c.font=o(i.fontWeight,i);for(var _=0;_<16;_++){var f=(_+2)*l;for(u=0;u<256;u++)c.save(),c.beginPath(),c.rect(u*a,f,a,l),c.clip(),c.fillStyle=i.colors.ansi[_].css,c.fillText(String.fromCharCode(u),u*a,f),c.restore()}for(c.font=o(i.fontWeightBold,i),_=0;_<16;_++)for(f=(_+2+16)*l,u=0;u<256;u++)c.save(),c.beginPath(),c.rect(u*a,f,a,l),c.clip(),c.fillStyle=i.colors.ansi[_].css,c.fillText(String.fromCharCode(u),u*a,f),c.restore();if(c.restore(),!("createImageBitmap"in e)||r.isFirefox||r.isSafari)return h;var d=c.getImageData(0,0,h.width,h.height);return s(d,i.colors.background),e.createImageBitmap(d)},t.clearColor=s},function(e,t,i){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(e,t)},function(e,t){function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)});Object.defineProperty(t,"__esModule",{value:!0});var s=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return n(t,e),t.prototype.setListener=function(e){var t=this;this._listener&&this.clearListener(),this._listener=e,this._outerListener=function(){t._listener(window.devicePixelRatio,t._currentDevicePixelRatio),t._updateDpr()},this._updateDpr()},t.prototype.dispose=function(){e.prototype.dispose.call(this),this.clearListener()},t.prototype._updateDpr=function(){this._resolutionMediaMatchList&&this._resolutionMediaMatchList.removeListener(this._outerListener),this._currentDevicePixelRatio=window.devicePixelRatio,this._resolutionMediaMatchList=window.matchMedia("screen and (resolution: "+window.devicePixelRatio+"dppx)"),this._resolutionMediaMatchList.addListener(this._outerListener)},t.prototype.clearListener=function(){this._listener&&(this._resolutionMediaMatchList.removeListener(this._outerListener),this._listener=null,this._outerListener=null)},t}(i(3).Disposable);t.ScreenDprMonitor=s},function(e,t,i){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(e,t)},function(e,t){function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)});Object.defineProperty(t,"__esModule",{value:!0});var s=i(3),o=i(6),a=function(e){function t(t){var i=e.call(this)||this;return i._terminal=t,i._zones=[],i._areZonesActive=!1,i._tooltipTimeout=null,i._currentZone=null,i._lastHoverCoords=[null,null],i.register(o.addDisposableDomListener(i._terminal.element,"mousedown",function(e){return i._onMouseDown(e)})),i._mouseMoveListener=function(e){return i._onMouseMove(e)},i._clickListener=function(e){return i._onClick(e)},i}return n(t,e),t.prototype.dispose=function(){e.prototype.dispose.call(this),this._deactivate()},t.prototype.add=function(e){this._zones.push(e),1===this._zones.length&&this._activate()},t.prototype.clearAll=function(e,t){if(0!==this._zones.length){t||(e=0,t=this._terminal.rows-1);for(var i=0;i<this._zones.length;i++){var r=this._zones[i];(r.y1>e&&r.y1<=t+1||r.y2>e&&r.y2<=t+1||r.y1<e&&r.y2>t+1)&&(this._currentZone&&this._currentZone===r&&(this._currentZone.leaveCallback(),this._currentZone=null),this._zones.splice(i--,1))}0===this._zones.length&&this._deactivate()}},t.prototype._activate=function(){this._areZonesActive||(this._areZonesActive=!0,this._terminal.element.addEventListener("mousemove",this._mouseMoveListener),this._terminal.element.addEventListener("click",this._clickListener))},t.prototype._deactivate=function(){this._areZonesActive&&(this._areZonesActive=!1,this._terminal.element.removeEventListener("mousemove",this._mouseMoveListener),this._terminal.element.removeEventListener("click",this._clickListener))},t.prototype._onMouseMove=function(e){this._lastHoverCoords[0]===e.pageX&&this._lastHoverCoords[1]===e.pageY||(this._onHover(e),this._lastHoverCoords=[e.pageX,e.pageY])},t.prototype._onHover=function(e){var t=this,i=this._findZoneEventAt(e);i!==this._currentZone&&(this._currentZone&&(this._currentZone.leaveCallback(),this._currentZone=null,this._tooltipTimeout&&clearTimeout(this._tooltipTimeout)),i&&(this._currentZone=i,i.hoverCallback&&i.hoverCallback(e),this._tooltipTimeout=setTimeout(function(){return t._onTooltip(e)},500)))},t.prototype._onTooltip=function(e){this._tooltipTimeout=null;var t=this._findZoneEventAt(e);t&&t.tooltipCallback&&t.tooltipCallback(e)},t.prototype._onMouseDown=function(e){if(this._areZonesActive){var t=this._findZoneEventAt(e);t&&t.willLinkActivate(e)&&(e.preventDefault(),e.stopImmediatePropagation())}},t.prototype._onClick=function(e){var t=this._findZoneEventAt(e);t&&(t.clickCallback(e),e.preventDefault(),e.stopImmediatePropagation())},t.prototype._findZoneEventAt=function(e){var t=this._terminal.mouseHelper.getCoords(e,this._terminal.screenElement,this._terminal.charMeasure,this._terminal.cols,this._terminal.rows);if(!t)return null;for(var i=t[0],r=t[1],n=0;n<this._zones.length;n++){var s=this._zones[n];if(s.y1===s.y2){if(r===s.y1&&i>=s.x1&&i<s.x2)return s}else if(r===s.y1&&i>=s.x1||r===s.y2&&i<s.x2||r>s.y1&&r<s.y2)return s}return null},t}(s.Disposable);t.MouseZoneManager=a;var l=function(){return function(e,t,i,r,n,s,o,a,l){this.x1=e,this.y1=t,this.x2=i,this.y2=r,this.clickCallback=n,this.hoverCallback=s,this.tooltipCallback=o,this.leaveCallback=a,this.willLinkActivate=l}}();t.MouseZone=l},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){this._renderer=e}return e.prototype.setRenderer=function(e){this._renderer=e},e.getCoordsRelativeToElement=function(e,t){if(null===e.pageX||void 0===e.pageX)return null;for(var i=t,r=e.pageX,n=e.pageY;t;)r-=t.offsetLeft,n-=t.offsetTop,t=t.offsetParent;for(t=i;t&&t!==t.ownerDocument.body;)r+=t.scrollLeft,n+=t.scrollTop,t=t.parentElement;return[r,n]},e.prototype.getCoords=function(t,i,r,n,s,o){if(!r.width||!r.height)return null;var a=e.getCoordsRelativeToElement(t,i);return a?(a[0]=Math.ceil((a[0]+(o?this._renderer.dimensions.actualCellWidth/2:0))/this._renderer.dimensions.actualCellWidth),a[1]=Math.ceil(a[1]/this._renderer.dimensions.actualCellHeight),a[0]=Math.min(Math.max(a[0],1),n+(o?1:0)),a[1]=Math.min(Math.max(a[1],1),s),a):null},e.prototype.getRawByteCoords=function(e,t,i,r,n){var s=this.getCoords(e,t,i,r,n),o=s[0],a=s[1];return{x:o+=32,y:a+=32}},e}();t.MouseHelper=r},function(e,t,i){"use strict";function r(e){if(!e.element.parentElement)return null;var t=window.getComputedStyle(e.element.parentElement),i=parseInt(t.getPropertyValue("height")),r=Math.max(0,parseInt(t.getPropertyValue("width"))),n=window.getComputedStyle(e.element),s=i-(parseInt(n.getPropertyValue("padding-top"))+parseInt(n.getPropertyValue("padding-bottom"))),o=r-(parseInt(n.getPropertyValue("padding-right"))+parseInt(n.getPropertyValue("padding-left")))-e._core.viewport.scrollBarWidth;return{cols:Math.floor(o/e._core.renderer.dimensions.actualCellWidth),rows:Math.floor(s/e._core.renderer.dimensions.actualCellHeight)}}function n(e){var t=r(e);t&&(e.rows===t.rows&&e.cols===t.cols||(e._core.renderer.clear(),e.resize(t.cols,t.rows)))}Object.defineProperty(t,"__esModule",{value:!0}),t.proposeGeometry=r,t.fit=n,t.apply=function(e){e.prototype.proposeGeometry=function(){return r(this)},e.prototype.fit=function(){n(this)}}},function(e,t,i){"use strict";i.r(t);var r=i(13),n=i(20);i(56),i(55),i(61);const s=document.getElementById("terminal"),o=new r.Terminal;o.setOption("cursorBlink",!0),o.open(s),o.focus(),Object(n.fit)(o)},function(e,t,i){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(e,t)},function(e,t){function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)});Object.defineProperty(t,"__esModule",{value:!0});var s=i(23),o=i(0),a=i(26),l=i(2),h=i(27),c=i(28),u=i(7),_=i(29),f=i(33),d=i(44),p=i(45),m=i(48),y=i(5),C=i(6),g=i(12),v=i(19),b=i(49),w=i(50),L=i(9),E=i(18),S=i(51),A=i(17),x=i(15),T=i(52),R=i(54),M="undefined"!=typeof window?window.document:null,k=["cols","rows"],D={cols:80,rows:24,convertEol:!1,termName:"xterm",cursorBlink:!1,cursorStyle:"block",bellSound:w.DEFAULT_BELL_SOUND,bellStyle:"none",drawBoldTextInBrightColors:!0,enableBold:!0,experimentalCharAtlas:"static",fontFamily:"courier-new, courier, monospace",fontSize:15,fontWeight:"normal",fontWeightBold:"bold",lineHeight:1,letterSpacing:0,scrollback:1e3,screenKeys:!1,screenReaderMode:!1,debug:!1,macOptionIsMeta:!1,macOptionClickForcesSelection:!1,cancelEvents:!1,disableStdin:!1,useFlowControl:!1,allowTransparency:!1,tabStopWidth:8,theme:null,rightClickSelectsWord:y.isMac,rendererType:"canvas",experimentalBufferLineImpl:"TypedArray"},H=function(e){function t(t){void 0===t&&(t={});var i=e.call(this)||this;return i.browser=y,i._blankLine=null,i.options=b.clone(t),i._setup(),i}return n(t,e),t.prototype.dispose=function(){e.prototype.dispose.call(this),this._customKeyEventHandler=null,x.removeTerminalFromCache(this),this.handler=function(){},this.write=function(){},this.element&&this.element.parentNode&&this.element.parentNode.removeChild(this.element)},t.prototype.destroy=function(){this.dispose()},t.prototype._setup=function(){var e=this;Object.keys(D).forEach(function(t){null!==e.options[t]&&void 0!==e.options[t]||(e.options[t]=D[t])}),this._parent=M?M.body:null,this.cols=this.options.cols,this.rows=this.options.rows,this.options.handler&&this.on("data",this.options.handler),this.cursorState=0,this.cursorHidden=!1,this._customKeyEventHandler=null,this.applicationKeypad=!1,this.applicationCursor=!1,this.originMode=!1,this.insertMode=!1,this.wraparoundMode=!0,this.bracketedPasteMode=!1,this.charset=null,this.gcharset=null,this.glevel=0,this.charsets=[null],this.curAttr=o.DEFAULT_ATTR,this.params=[],this.currentParam=0,this.writeBuffer=[],this._writeInProgress=!1,this._xoffSentToCatchUp=!1,this._userScrolling=!1,this._inputHandler=new _.InputHandler(this),this.register(this._inputHandler),this.renderer=this.renderer||null,this.selectionManager=this.selectionManager||null,this.linkifier=this.linkifier||new d.Linkifier(this),this._mouseZoneManager=this._mouseZoneManager||null,this.soundManager=this.soundManager||new w.SoundManager(this),this.buffers=new s.BufferSet(this),this.selectionManager&&(this.selectionManager.clearSelection(),this.selectionManager.initBuffersListeners())},Object.defineProperty(t.prototype,"buffer",{get:function(){return this.buffers.active},enumerable:!0,configurable:!0}),t.prototype.eraseAttr=function(){return-512&o.DEFAULT_ATTR|511&this.curAttr},t.prototype.focus=function(){this.textarea&&this.textarea.focus()},Object.defineProperty(t.prototype,"isFocused",{get:function(){return M.activeElement===this.textarea&&M.hasFocus()},enumerable:!0,configurable:!0}),t.prototype.getOption=function(e){if(!(e in D))throw new Error('No option with key "'+e+'"');return this.options[e]},t.prototype.setOption=function(e,t){if(!(e in D))throw new Error('No option with key "'+e+'"');if(-1!==k.indexOf(e)&&console.error('Option "'+e+'" can only be set in the constructor'),this.options[e]!==t){switch(e){case"bellStyle":t||(t="none");break;case"cursorStyle":t||(t="block");break;case"fontWeight":t||(t="normal");break;case"fontWeightBold":t||(t="bold");break;case"lineHeight":if(t<1)return void console.warn(e+" cannot be less than 1, value: "+t);case"rendererType":t||(t="canvas");break;case"tabStopWidth":if(t<1)return void console.warn(e+" cannot be less than 1, value: "+t);break;case"theme":if(this.renderer)return void this._setTheme(t);break;case"scrollback":if((t=Math.min(t,o.MAX_BUFFER_SIZE))<0)return void console.warn(e+" cannot be less than 0, value: "+t);if(this.options[e]!==t){var i=this.rows+t;if(this.buffer.lines.length>i){var r=this.buffer.lines.length-i,n=this.buffer.ydisp-r<0;this.buffer.lines.trimStart(r),this.buffer.ybase=Math.max(this.buffer.ybase-r,0),this.buffer.ydisp=Math.max(this.buffer.ydisp-r,0),n&&this.refresh(0,this.rows-1)}}}switch(this.options[e]=t,e){case"fontFamily":case"fontSize":this.renderer&&(this.renderer.clear(),this.charMeasure.measure(this.options));break;case"drawBoldTextInBrightColors":case"experimentalCharAtlas":case"enableBold":case"letterSpacing":case"lineHeight":case"fontWeight":case"fontWeightBold":this.renderer&&(this.renderer.clear(),this.renderer.onResize(this.cols,this.rows),this.refresh(0,this.rows-1));case"rendererType":this.renderer&&(this.unregister(this.renderer),this.renderer.dispose(),this.renderer=null),this._setupRenderer(),this.renderer.onCharSizeChanged(),this._theme&&this.renderer.setTheme(this._theme),this.mouseHelper.setRenderer(this.renderer);break;case"scrollback":this.buffers.resize(this.cols,this.rows),this.viewport&&this.viewport.syncScrollArea();break;case"screenReaderMode":t?this._accessibilityManager||(this._accessibilityManager=new S.AccessibilityManager(this)):this._accessibilityManager&&(this._accessibilityManager.dispose(),this._accessibilityManager=null);break;case"tabStopWidth":this.buffers.setupTabStops();break;case"experimentalBufferLineImpl":this.buffers.normal.setBufferLineFactory(t),this.buffers.alt.setBufferLineFactory(t),this._blankLine=null}this.renderer&&this.renderer.onOptionsChanged()}},t.prototype._onTextAreaFocus=function(e){this.sendFocus&&this.handler(u.C0.ESC+"[I"),this.updateCursorStyle(e),this.element.classList.add("focus"),this.showCursor(),this.emit("focus")},t.prototype.blur=function(){return this.textarea.blur()},t.prototype._onTextAreaBlur=function(){this.textarea.value="",this.refresh(this.buffer.y,this.buffer.y),this.sendFocus&&this.handler(u.C0.ESC+"[O"),this.element.classList.remove("focus"),this.emit("blur")},t.prototype._initGlobal=function(){var e=this;this._bindKeys(),this.register(C.addDisposableDomListener(this.element,"copy",function(t){e.hasSelection()&&c.copyHandler(t,e,e.selectionManager)}));var t=function(t){return c.pasteHandler(t,e)};this.register(C.addDisposableDomListener(this.textarea,"paste",t)),this.register(C.addDisposableDomListener(this.element,"paste",t)),y.isFirefox?this.register(C.addDisposableDomListener(this.element,"mousedown",function(t){2===t.button&&c.rightClickHandler(t,e.textarea,e.selectionManager,e.options.rightClickSelectsWord)})):this.register(C.addDisposableDomListener(this.element,"contextmenu",function(t){c.rightClickHandler(t,e.textarea,e.selectionManager,e.options.rightClickSelectsWord)})),y.isLinux&&this.register(C.addDisposableDomListener(this.element,"auxclick",function(t){1===t.button&&c.moveTextAreaUnderMouseCursor(t,e.textarea)}))},t.prototype._bindKeys=function(){var e=this,t=this;this.register(C.addDisposableDomListener(this.element,"keydown",function(e){M.activeElement===this&&t._keyDown(e)},!0)),this.register(C.addDisposableDomListener(this.element,"keypress",function(e){M.activeElement===this&&t._keyPress(e)},!0)),this.register(C.addDisposableDomListener(this.element,"keyup",function(i){(function(e){return 16===e.keyCode||17===e.keyCode||18===e.keyCode})(i)||e.focus(),t._keyUp(i)},!0)),this.register(C.addDisposableDomListener(this.textarea,"keydown",function(t){return e._keyDown(t)},!0)),this.register(C.addDisposableDomListener(this.textarea,"keypress",function(t){return e._keyPress(t)},!0)),this.register(C.addDisposableDomListener(this.textarea,"compositionstart",function(){return e._compositionHelper.compositionstart()})),this.register(C.addDisposableDomListener(this.textarea,"compositionupdate",function(t){return e._compositionHelper.compositionupdate(t)})),this.register(C.addDisposableDomListener(this.textarea,"compositionend",function(){return e._compositionHelper.compositionend()})),this.register(this.addDisposableListener("refresh",function(){return e._compositionHelper.updateCompositionElements()})),this.register(this.addDisposableListener("refresh",function(t){return e._queueLinkification(t.start,t.end)}))},t.prototype.open=function(e){var t=this;if(this._parent=e||this._parent,!this._parent)throw new Error("Terminal requires a parent element.");this._context=this._parent.ownerDocument.defaultView,this._document=this._parent.ownerDocument,this._screenDprMonitor=new A.ScreenDprMonitor,this._screenDprMonitor.setListener(function(){return t.emit("dprchange",window.devicePixelRatio)}),this.register(this._screenDprMonitor),this.element=this._document.createElement("div"),this.element.dir="ltr",this.element.classList.add("terminal"),this.element.classList.add("xterm"),this.element.setAttribute("tabindex","0"),this._parent.appendChild(this.element);var i=M.createDocumentFragment();this._viewportElement=M.createElement("div"),this._viewportElement.classList.add("xterm-viewport"),i.appendChild(this._viewportElement),this._viewportScrollArea=M.createElement("div"),this._viewportScrollArea.classList.add("xterm-scroll-area"),this._viewportElement.appendChild(this._viewportScrollArea),this.screenElement=M.createElement("div"),this.screenElement.classList.add("xterm-screen"),this._helperContainer=M.createElement("div"),this._helperContainer.classList.add("xterm-helpers"),this.screenElement.appendChild(this._helperContainer),i.appendChild(this.screenElement),this._mouseZoneManager=new E.MouseZoneManager(this),this.register(this._mouseZoneManager),this.register(this.addDisposableListener("scroll",function(){return t._mouseZoneManager.clearAll()})),this.linkifier.attachToDom(this._mouseZoneManager),this.textarea=M.createElement("textarea"),this.textarea.classList.add("xterm-helper-textarea"),this.textarea.setAttribute("aria-label",g.promptLabel),this.textarea.setAttribute("aria-multiline","false"),this.textarea.setAttribute("autocorrect","off"),this.textarea.setAttribute("autocapitalize","off"),this.textarea.setAttribute("spellcheck","false"),this.textarea.tabIndex=0,this.register(C.addDisposableDomListener(this.textarea,"focus",function(e){return t._onTextAreaFocus(e)})),this.register(C.addDisposableDomListener(this.textarea,"blur",function(){return t._onTextAreaBlur()})),this._helperContainer.appendChild(this.textarea),this._compositionView=M.createElement("div"),this._compositionView.classList.add("composition-view"),this._compositionHelper=new a.CompositionHelper(this.textarea,this._compositionView,this),this._helperContainer.appendChild(this._compositionView),this.charMeasure=new m.CharMeasure(M,this._helperContainer),this.element.appendChild(i),this._setupRenderer(),this._theme=this.options.theme,this.options.theme=null,this.viewport=new h.Viewport(this,this._viewportElement,this._viewportScrollArea,this.charMeasure),this.viewport.onThemeChanged(this.renderer.colorManager.colors),this.register(this.viewport),this.register(this.addDisposableListener("cursormove",function(){return t.renderer.onCursorMove()})),this.register(this.addDisposableListener("resize",function(){return t.renderer.onResize(t.cols,t.rows)})),this.register(this.addDisposableListener("blur",function(){return t.renderer.onBlur()})),this.register(this.addDisposableListener("focus",function(){return t.renderer.onFocus()})),this.register(this.addDisposableListener("dprchange",function(){return t.renderer.onWindowResize(window.devicePixelRatio)})),this.register(C.addDisposableDomListener(window,"resize",function(){return t.renderer.onWindowResize(window.devicePixelRatio)})),this.register(this.charMeasure.addDisposableListener("charsizechanged",function(){return t.renderer.onCharSizeChanged()})),this.register(this.renderer.addDisposableListener("resize",function(e){return t.viewport.syncScrollArea()})),this.selectionManager=new p.SelectionManager(this,this.charMeasure),this.register(C.addDisposableDomListener(this.element,"mousedown",function(e){return t.selectionManager.onMouseDown(e)})),this.register(this.selectionManager.addDisposableListener("refresh",function(e){return t.renderer.onSelectionChanged(e.start,e.end,e.columnSelectMode)})),this.register(this.selectionManager.addDisposableListener("newselection",function(e){t.textarea.value=e,t.textarea.focus(),t.textarea.select()})),this.register(this.addDisposableListener("scroll",function(){t.viewport.syncScrollArea(),t.selectionManager.refresh()})),this.register(C.addDisposableDomListener(this._viewportElement,"scroll",function(){return t.selectionManager.refresh()})),this.mouseHelper=new v.MouseHelper(this.renderer),this.options.screenReaderMode&&(this._accessibilityManager=new S.AccessibilityManager(this)),this.charMeasure.measure(this.options),this.refresh(0,this.rows-1),this._initGlobal(),this.bindMouse()},t.prototype._setupRenderer=function(){switch(this.options.rendererType){case"canvas":this.renderer=new f.Renderer(this,this.options.theme);break;case"dom":this.renderer=new T.DomRenderer(this,this.options.theme);break;default:throw new Error('Unrecognized rendererType "'+this.options.rendererType+'"')}this.register(this.renderer)},t.prototype._setTheme=function(e){this._theme=e;var t=this.renderer.setTheme(e);this.viewport&&this.viewport.onThemeChanged(t)},t.prototype.bindMouse=function(){var e=this,t=this.element,i=this,r=32;function n(e){var t,n;if(t=function(e){var t,r,n,s,o;switch(e.overrideType||e.type){case"mousedown":t=null!==e.button&&void 0!==e.button?+e.button:null!==e.which&&void 0!==e.which?e.which-1:null,y.isMSIE&&(t=1===t?0:4===t?1:t);break;case"mouseup":t=3;break;case"DOMMouseScroll":t=e.detail<0?64:65;break;case"wheel":t=e.deltaY<0?64:65}r=e.shiftKey?4:0,n=e.metaKey?8:0,s=e.ctrlKey?16:0,o=r|n|s,i.vt200Mouse?o&=s:i.normalMouse||(o=0);return t=32+(o<<2)+t}(e),n=i.mouseHelper.getRawByteCoords(e,i.screenElement,i.charMeasure,i.cols,i.rows))switch(o(t,n),e.overrideType||e.type){case"mousedown":r=t;break;case"mouseup":r=32}}function s(e,t){if(i.utfMouse){if(2047===t)return void e.push(0);t<127?e.push(t):(t>2047&&(t=2047),e.push(192|t>>6),e.push(128|63&t))}else{if(255===t)return void e.push(0);t>127&&(t=127),e.push(t)}}function o(e,t){if(i._vt300Mouse){e&=3,t.x-=32,t.y-=32;var r=u.C0.ESC+"[24";if(0===e)r+="1";else if(1===e)r+="3";else if(2===e)r+="5";else{if(3===e)return;r+="0"}return r+="~["+t.x+","+t.y+"]\r",void i.handler(r)}if(i._decLocator)return e&=3,t.x-=32,t.y-=32,0===e?e=2:1===e?e=4:2===e?e=6:3===e&&(e=3),void i.handler(u.C0.ESC+"["+e+";"+(3===e?4:0)+";"+t.y+";"+t.x+";"+t.page||"0&w");if(i.urxvtMouse)return t.x-=32,t.y-=32,t.x++,t.y++,void i.handler(u.C0.ESC+"["+e+";"+t.x+";"+t.y+"M");if(i.sgrMouse)return t.x-=32,t.y-=32,void i.handler(u.C0.ESC+"[<"+((3==(3&e)?-4&e:e)-32)+";"+t.x+";"+t.y+(3==(3&e)?"m":"M"));var n=[];s(n,e),s(n,t.x),s(n,t.y),i.handler(u.C0.ESC+"[M"+String.fromCharCode.apply(String,n))}this.register(C.addDisposableDomListener(t,"mousedown",function(t){if(t.preventDefault(),e.focus(),e.mouseEvents&&!e.selectionManager.shouldForceSelection(t)){if(n(t),e.vt200Mouse)return t.overrideType="mouseup",n(t),e.cancel(t);var s;e.normalMouse&&(s=function(t){var n,s,a;e.normalMouse&&(n=t,s=r,(a=i.mouseHelper.getRawByteCoords(n,i.screenElement,i.charMeasure,i.cols,i.rows))&&o(s+=32,a))},e._document.addEventListener("mousemove",s));var a=function(t){return e.normalMouse&&!e.x10Mouse&&n(t),s&&(e._document.removeEventListener("mousemove",s),s=null),e._document.removeEventListener("mouseup",a),e.cancel(t)};return e._document.addEventListener("mouseup",a),e.cancel(t)}})),this.register(C.addDisposableDomListener(t,"wheel",function(t){if(e.mouseEvents)e.x10Mouse||e._vt300Mouse||e._decLocator||(n(t),t.preventDefault());else if(!e.buffer.hasScrollback){var i=e.viewport.getLinesScrolled(t);if(0===i)return;for(var r=u.C0.ESC+(e.applicationCursor?"O":"[")+(t.deltaY<0?"A":"B"),s="",o=0;o<Math.abs(i);o++)s+=r;e.handler(s)}})),this.register(C.addDisposableDomListener(t,"wheel",function(t){if(!e.mouseEvents)return e.viewport.onWheel(t),e.cancel(t)})),this.register(C.addDisposableDomListener(t,"touchstart",function(t){if(!e.mouseEvents)return e.viewport.onTouchStart(t),e.cancel(t)})),this.register(C.addDisposableDomListener(t,"touchmove",function(t){if(!e.mouseEvents)return e.viewport.onTouchMove(t),e.cancel(t)}))},t.prototype.refresh=function(e,t){this.renderer&&this.renderer.refreshRows(e,t)},t.prototype._queueLinkification=function(e,t){this.linkifier&&this.linkifier.linkifyRows(e,t)},t.prototype.updateCursorStyle=function(e){this.selectionManager&&this.selectionManager.shouldColumnSelect(e)?this.element.classList.add("column-select"):this.element.classList.remove("column-select")},t.prototype.showCursor=function(){this.cursorState||(this.cursorState=1,this.refresh(this.buffer.y,this.buffer.y))},t.prototype.scroll=function(e){var t;void 0===e&&(e=!1);var i="JsArray"!==this.options.experimentalBufferLineImpl;i?((t=this._blankLine)&&t.length===this.cols&&t.get(0)[o.CHAR_DATA_ATTR_INDEX]===this.eraseAttr()||(t=this.buffer.getBlankLine(this.eraseAttr(),e),this._blankLine=t),t.isWrapped=e):t=this.buffer.getBlankLine(this.eraseAttr(),e);var r=this.buffer.ybase+this.buffer.scrollTop,n=this.buffer.ybase+this.buffer.scrollBottom;if(0===this.buffer.scrollTop){var s=this.buffer.lines.isFull;n===this.buffer.lines.length-1?i?s?this.buffer.lines.recycle().copyFrom(t):this.buffer.lines.push(t.clone()):this.buffer.lines.push(t):this.buffer.lines.splice(n+1,0,i?t.clone():t),s?this._userScrolling&&(this.buffer.ydisp=Math.max(this.buffer.ydisp-1,0)):(this.buffer.ybase++,this._userScrolling||this.buffer.ydisp++)}else{var a=n-r+1;this.buffer.lines.shiftElements(r+1,a-1,-1),this.buffer.lines.set(n,i?t.clone():t)}this._userScrolling||(this.buffer.ydisp=this.buffer.ybase),this.updateRange(this.buffer.scrollTop),this.updateRange(this.buffer.scrollBottom),this.emit("scroll",this.buffer.ydisp)},t.prototype.scrollLines=function(e,t){if(e<0){if(0===this.buffer.ydisp)return;this._userScrolling=!0}else e+this.buffer.ydisp>=this.buffer.ybase&&(this._userScrolling=!1);var i=this.buffer.ydisp;this.buffer.ydisp=Math.max(Math.min(this.buffer.ydisp+e,this.buffer.ybase),0),i!==this.buffer.ydisp&&(t||this.emit("scroll",this.buffer.ydisp),this.refresh(0,this.rows-1))},t.prototype.scrollPages=function(e){this.scrollLines(e*(this.rows-1))},t.prototype.scrollToTop=function(){this.scrollLines(-this.buffer.ydisp)},t.prototype.scrollToBottom=function(){this.scrollLines(this.buffer.ybase-this.buffer.ydisp)},t.prototype.scrollToLine=function(e){var t=e-this.buffer.ydisp;0!==t&&this.scrollLines(t)},t.prototype.write=function(e){var t=this;this._isDisposed||e&&(this.writeBuffer.push(e),this.options.useFlowControl&&!this._xoffSentToCatchUp&&this.writeBuffer.length>=5&&(this.handler(u.C0.DC3),this._xoffSentToCatchUp=!0),!this._writeInProgress&&this.writeBuffer.length>0&&(this._writeInProgress=!0,setTimeout(function(){t._innerWrite()})))},t.prototype._innerWrite=function(){var e=this;this._isDisposed&&(this.writeBuffer=[]);for(var t=this.writeBuffer.splice(0,300);t.length>0;){var i=t.shift();this._xoffSentToCatchUp&&0===t.length&&0===this.writeBuffer.length&&(this.handler(u.C0.DC1),this._xoffSentToCatchUp=!1),this._refreshStart=this.buffer.y,this._refreshEnd=this.buffer.y,this._inputHandler.parse(i),this.updateRange(this.buffer.y),this.refresh(this._refreshStart,this._refreshEnd)}this.writeBuffer.length>0?setTimeout(function(){return e._innerWrite()},0):this._writeInProgress=!1},t.prototype.writeln=function(e){this.write(e+"\r\n")},t.prototype.attachCustomKeyEventHandler=function(e){this._customKeyEventHandler=e},t.prototype.registerLinkMatcher=function(e,t,i){var r=this.linkifier.registerLinkMatcher(e,t,i);return this.refresh(0,this.rows-1),r},t.prototype.deregisterLinkMatcher=function(e){this.linkifier.deregisterLinkMatcher(e)&&this.refresh(0,this.rows-1)},t.prototype.registerCharacterJoiner=function(e){var t=this.renderer.registerCharacterJoiner(e);return this.refresh(0,this.rows-1),t},t.prototype.deregisterCharacterJoiner=function(e){this.renderer.deregisterCharacterJoiner(e)&&this.refresh(0,this.rows-1)},Object.defineProperty(t.prototype,"markers",{get:function(){return this.buffer.markers},enumerable:!0,configurable:!0}),t.prototype.addMarker=function(e){if(this.buffer===this.buffers.normal)return this.buffer.addMarker(this.buffer.ybase+this.buffer.y+e)},t.prototype.hasSelection=function(){return!!this.selectionManager&&this.selectionManager.hasSelection},t.prototype.getSelection=function(){return this.selectionManager?this.selectionManager.selectionText:""},t.prototype.clearSelection=function(){this.selectionManager&&this.selectionManager.clearSelection()},t.prototype.selectAll=function(){this.selectionManager&&this.selectionManager.selectAll()},t.prototype.selectLines=function(e,t){this.selectionManager&&this.selectionManager.selectLines(e,t)},t.prototype._keyDown=function(e){if(this._customKeyEventHandler&&!1===this._customKeyEventHandler(e))return!1;if(!this._compositionHelper.keydown(e))return this.buffer.ybase!==this.buffer.ydisp&&this.scrollToBottom(),!1;var t=R.evaluateKeyboardEvent(e,this.applicationCursor,this.browser.isMac,this.options.macOptionIsMeta);if(this.updateCursorStyle(e),3===t.type||2===t.type){var i=this.rows-1;return this.scrollLines(2===t.type?-i:i),this.cancel(e,!0)}return 1===t.type&&this.selectAll(),!!this._isThirdLevelShift(this.browser,e)||(t.cancel&&this.cancel(e,!0),!t.key||(this.emit("keydown",e),this.emit("key",t.key,e),this.showCursor(),this.handler(t.key),this.cancel(e,!0)))},t.prototype._isThirdLevelShift=function(e,t){var i=e.isMac&&!this.options.macOptionIsMeta&&t.altKey&&!t.ctrlKey&&!t.metaKey||e.isMSWindows&&t.altKey&&t.ctrlKey&&!t.metaKey;return"keypress"===t.type?i:i&&(!t.keyCode||t.keyCode>47)},t.prototype.setgLevel=function(e){this.glevel=e,this.charset=this.charsets[e]},t.prototype.setgCharset=function(e,t){this.charsets[e]=t,this.glevel===e&&(this.charset=t)},t.prototype._keyUp=function(e){this.updateCursorStyle(e)},t.prototype._keyPress=function(e){var t;if(this._customKeyEventHandler&&!1===this._customKeyEventHandler(e))return!1;if(this.cancel(e),e.charCode)t=e.charCode;else if(null===e.which||void 0===e.which)t=e.keyCode;else{if(0===e.which||0===e.charCode)return!1;t=e.which}return!(!t||(e.altKey||e.ctrlKey||e.metaKey)&&!this._isThirdLevelShift(this.browser,e))&&(t=String.fromCharCode(t),this.emit("keypress",t,e),this.emit("key",t,e),this.showCursor(),this.handler(t),!0)},t.prototype.bell=function(){var e=this;this.emit("bell"),this._soundBell()&&this.soundManager.playBellSound(),this._visualBell()&&(this.element.classList.add("visual-bell-active"),clearTimeout(this._visualBellTimer),this._visualBellTimer=window.setTimeout(function(){e.element.classList.remove("visual-bell-active")},200))},t.prototype.log=function(e,t){this.options.debug&&this._context.console&&this._context.console.log&&this._context.console.log(e,t)},t.prototype.error=function(e,t){this.options.debug&&this._context.console&&this._context.console.error&&this._context.console.error(e,t)},t.prototype.resize=function(e,t){isNaN(e)||isNaN(t)||(e!==this.cols||t!==this.rows?(e<1&&(e=1),t<1&&(t=1),this.buffers.resize(e,t),this.cols=e,this.rows=t,this.buffers.setupTabStops(this.cols),this.charMeasure&&this.charMeasure.measure(this.options),this.refresh(0,this.rows-1),this.emit("resize",{cols:e,rows:t})):!this.charMeasure||this.charMeasure.width&&this.charMeasure.height||this.charMeasure.measure(this.options))},t.prototype.updateRange=function(e){e<this._refreshStart&&(this._refreshStart=e),e>this._refreshEnd&&(this._refreshEnd=e)},t.prototype.maxRange=function(){this._refreshStart=0,this._refreshEnd=this.rows-1},t.prototype.clear=function(){if(0!==this.buffer.ybase||0!==this.buffer.y){this.buffer.lines.set(0,this.buffer.lines.get(this.buffer.ybase+this.buffer.y)),this.buffer.lines.length=1,this.buffer.ydisp=0,this.buffer.ybase=0,this.buffer.y=0;for(var e=1;e<this.rows;e++)this.buffer.lines.push(this.buffer.getBlankLine(o.DEFAULT_ATTR));this.refresh(0,this.rows-1),this.emit("scroll",this.buffer.ydisp)}},t.prototype.ch=function(e){return e?[this.eraseAttr(),o.NULL_CELL_CHAR,o.NULL_CELL_WIDTH,o.NULL_CELL_CODE]:[o.DEFAULT_ATTR,o.NULL_CELL_CHAR,o.NULL_CELL_WIDTH,o.NULL_CELL_CODE]},t.prototype.is=function(e){return 0===(this.options.termName+"").indexOf(e)},t.prototype.handler=function(e){this.options.disableStdin||(this.selectionManager&&this.selectionManager.hasSelection&&this.selectionManager.clearSelection(),this.buffer.ybase!==this.buffer.ydisp&&this.scrollToBottom(),this.emit("data",e))},t.prototype.handleTitle=function(e){this.emit("title",e)},t.prototype.index=function(){this.buffer.y++,this.buffer.y>this.buffer.scrollBottom&&(this.buffer.y--,this.scroll()),this.buffer.x>=this.cols&&this.buffer.x--},t.prototype.reverseIndex=function(){if(this.buffer.y===this.buffer.scrollTop){var e=this.buffer.scrollBottom-this.buffer.scrollTop;this.buffer.lines.shiftElements(this.buffer.y+this.buffer.ybase,e,1),this.buffer.lines.set(this.buffer.y+this.buffer.ybase,this.buffer.getBlankLine(this.eraseAttr())),this.updateRange(this.buffer.scrollTop),this.updateRange(this.buffer.scrollBottom)}else this.buffer.y--},t.prototype.reset=function(){this.options.rows=this.rows,this.options.cols=this.cols;var e=this._customKeyEventHandler,t=this._inputHandler,i=this.cursorState;this._setup(),this._customKeyEventHandler=e,this._inputHandler=t,this.cursorState=i,this.refresh(0,this.rows-1),this.viewport&&this.viewport.syncScrollArea()},t.prototype.tabSet=function(){this.buffer.tabs[this.buffer.x]=!0},t.prototype.cancel=function(e,t){if(this.options.cancelEvents||t)return e.preventDefault(),e.stopPropagation(),!1},t.prototype.matchColor=function(e,t,i){var r=e<<16|t<<8|i;if(null!==O[r]&&void 0!==O[r])return O[r];for(var n,s,o=1/0,a=-1,l=0;l<L.DEFAULT_ANSI_COLORS.length;l++){if(0===(s=I(e,t,i,(n=L.DEFAULT_ANSI_COLORS[l].rgba)>>>24,n>>>16&255,n>>>8&255))){a=l;break}s<o&&(o=s,a=l)}return O[r]=a},t.prototype._visualBell=function(){return!1},t.prototype._soundBell=function(){return"sound"===this.options.bellStyle},t}(l.EventEmitter);t.Terminal=H;var O={};function I(e,t,i,r,n,s){return Math.pow(30*(e-r),2)+Math.pow(59*(t-n),2)+Math.pow(11*(i-s),2)}},function(e,t,i){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(e,t)},function(e,t){function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)});Object.defineProperty(t,"__esModule",{value:!0});var s=i(0),o=function(e){function t(t){var i=e.call(this)||this;return i._terminal=t,i._normal=new s.Buffer(i._terminal,!0),i._normal.fillViewportRows(),i._alt=new s.Buffer(i._terminal,!1),i._activeBuffer=i._normal,i.setupTabStops(),i}return n(t,e),Object.defineProperty(t.prototype,"alt",{get:function(){return this._alt},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"active",{get:function(){return this._activeBuffer},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"normal",{get:function(){return this._normal},enumerable:!0,configurable:!0}),t.prototype.activateNormalBuffer=function(){this._activeBuffer!==this._normal&&(this._normal.x=this._alt.x,this._normal.y=this._alt.y,this._alt.clear(),this._activeBuffer=this._normal,this.emit("activate",{activeBuffer:this._normal,inactiveBuffer:this._alt}))},t.prototype.activateAltBuffer=function(e){this._activeBuffer!==this._alt&&(this._alt.fillViewportRows(e),this._alt.x=this._normal.x,this._alt.y=this._normal.y,this._activeBuffer=this._alt,this.emit("activate",{activeBuffer:this._alt,inactiveBuffer:this._normal}))},t.prototype.resize=function(e,t){this._normal.resize(e,t),this._alt.resize(e,t)},t.prototype.setupTabStops=function(e){this._normal.setupTabStops(e),this._alt.setupTabStops(e)},t}(i(2).EventEmitter);t.BufferSet=o},function(e,t,i){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(e,t)},function(e,t){function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)});Object.defineProperty(t,"__esModule",{value:!0});var s=function(e){function t(t){var i=e.call(this)||this;return i._maxLength=t,i._array=new Array(i._maxLength),i._startIndex=0,i._length=0,i}return n(t,e),Object.defineProperty(t.prototype,"maxLength",{get:function(){return this._maxLength},set:function(e){if(this._maxLength!==e){for(var t=new Array(e),i=0;i<Math.min(e,this.length);i++)t[i]=this._array[this._getCyclicIndex(i)];this._array=t,this._maxLength=e,this._startIndex=0}},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"length",{get:function(){return this._length},set:function(e){if(e>this._length)for(var t=this._length;t<e;t++)this._array[t]=void 0;this._length=e},enumerable:!0,configurable:!0}),t.prototype.get=function(e){return this._array[this._getCyclicIndex(e)]},t.prototype.set=function(e,t){this._array[this._getCyclicIndex(e)]=t},t.prototype.push=function(e){this._array[this._getCyclicIndex(this._length)]=e,this._length===this._maxLength?(this._startIndex=++this._startIndex%this._maxLength,this.emit("trim",1)):this._length++},t.prototype.recycle=function(){if(this._length!==this._maxLength)throw new Error("Can only recycle when the buffer is full");return this._startIndex=++this._startIndex%this._maxLength,this.emit("trim",1),this._array[this._getCyclicIndex(this._length-1)]},Object.defineProperty(t.prototype,"isFull",{get:function(){return this._length===this._maxLength},enumerable:!0,configurable:!0}),t.prototype.pop=function(){return this._array[this._getCyclicIndex(this._length---1)]},t.prototype.splice=function(e,t){for(var i=[],r=2;r<arguments.length;r++)i[r-2]=arguments[r];if(t){for(var n=e;n<this._length-t;n++)this._array[this._getCyclicIndex(n)]=this._array[this._getCyclicIndex(n+t)];this._length-=t}if(i&&i.length){for(n=this._length-1;n>=e;n--)this._array[this._getCyclicIndex(n+i.length)]=this._array[this._getCyclicIndex(n)];for(n=0;n<i.length;n++)this._array[this._getCyclicIndex(e+n)]=i[n];if(this._length+i.length>this._maxLength){var s=this._length+i.length-this._maxLength;this._startIndex+=s,this._length=this._maxLength,this.emit("trim",s)}else this._length+=i.length}},t.prototype.trimStart=function(e){e>this._length&&(e=this._length),this._startIndex+=e,this._length-=e,this.emit("trim",e)},t.prototype.shiftElements=function(e,t,i){if(!(t<=0)){if(e<0||e>=this._length)throw new Error("start argument out of range");if(e+i<0)throw new Error("Cannot shift elements in list beyond index 0");if(i>0){for(var r=t-1;r>=0;r--)this.set(e+r+i,this.get(e+r));var n=e+t+i-this._length;if(n>0)for(this._length+=n;this._length>this._maxLength;)this._length--,this._startIndex++,this.emit("trim",1)}else for(r=0;r<t;r++)this.set(e+r+i,this.get(e+r))}},t.prototype._getCyclicIndex=function(e){return(this._startIndex+e)%this._maxLength},t}(i(2).EventEmitter);t.CircularList=s},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(0),n=function(){function e(e,t,i){this.isWrapped=!1,this._data=[],t||(t=[0,r.NULL_CELL_CHAR,r.NULL_CELL_WIDTH,r.NULL_CELL_CODE]);for(var n=0;n<e;n++)this._push(t);i&&(this.isWrapped=!0),this.length=this._data.length}return e.prototype._pop=function(){var e=this._data.pop();return this.length=this._data.length,e},e.prototype._push=function(e){this._data.push(e),this.length=this._data.length},e.prototype._splice=function(e,t){for(var i,r=[],n=2;n<arguments.length;n++)r[n-2]=arguments[n];var s=(i=this._data).splice.apply(i,[e,t].concat(r));return this.length=this._data.length,s},e.prototype.get=function(e){return this._data[e]},e.prototype.set=function(e,t){this._data[e]=t},e.prototype.insertCells=function(e,t,i){for(;t--;)this._splice(e,0,i),this._pop()},e.prototype.deleteCells=function(e,t,i){for(;t--;)this._splice(e,1),this._push(i)},e.prototype.replaceCells=function(e,t,i){for(;e<t&&e<this.length;)this.set(e++,i)},e.prototype.resize=function(e,t,i){for(void 0===i&&(i=!1);this._data.length<e;)this._data.push(t);if(i)for(;this._data.length>e;)this._data.pop();this.length=this._data.length},e.prototype.fill=function(e){for(var t=0;t<this.length;++t)this.set(t,e)},e.prototype.copyFrom=function(e){this._data=e._data.slice(0),this.length=e.length,this.isWrapped=e.isWrapped},e.prototype.clone=function(){var t=new e(0);return t.copyFrom(this),t},e}();t.BufferLineJSArray=n;var s=3,o=function(){function e(e,t,i){if(void 0===i&&(i=!1),this.isWrapped=i,this._data=null,this._combined={},t||(t=[0,r.NULL_CELL_CHAR,r.NULL_CELL_WIDTH,r.NULL_CELL_CODE]),e){this._data=new Uint32Array(e*s);for(var n=0;n<e;++n)this.set(n,t)}this.length=e}return e.prototype.get=function(e){var t=this._data[e*s+1];return[this._data[e*s+0],2147483648&t?this._combined[e]:t?String.fromCharCode(t):"",this._data[e*s+2],2147483648&t?this._combined[e].charCodeAt(this._combined[e].length-1):t]},e.prototype.set=function(e,t){this._data[e*s+0]=t[0],t[1].length>1?(this._combined[e]=t[1],this._data[e*s+1]=2147483648|e):this._data[e*s+1]=t[1].charCodeAt(0),this._data[e*s+2]=t[2]},e.prototype.insertCells=function(e,t,i){if(e%=this.length,t<this.length-e){for(var r=this.length-e-t-1;r>=0;--r)this.set(e+t+r,this.get(e+r));for(r=0;r<t;++r)this.set(e+r,i)}else for(r=e;r<this.length;++r)this.set(r,i)},e.prototype.deleteCells=function(e,t,i){if(e%=this.length,t<this.length-e){for(var r=0;r<this.length-e-t;++r)this.set(e+r,this.get(e+t+r));for(r=this.length-t;r<this.length;++r)this.set(r,i)}else for(r=e;r<this.length;++r)this.set(r,i)},e.prototype.replaceCells=function(e,t,i){for(;e<t&&e<this.length;)this.set(e++,i)},e.prototype.resize=function(e,t,i){if(void 0===i&&(i=!1),!(e===this.length||!i&&e<this.length)){if(e>this.length){var r=new Uint32Array(e*s);this.length&&(e*s<this._data.length?r.set(this._data.subarray(0,e*s)):r.set(this._data)),this._data=r;for(var n=this.length;n<e;++n)this.set(n,t)}else if(i){if(e)(r=new Uint32Array(e*s)).set(this._data.subarray(0,e*s)),this._data=r;else this._data=null}this.length=e}},e.prototype.fill=function(e){this._combined={};for(var t=0;t<this.length;++t)this.set(t,e)},e.prototype.copyFrom=function(e){for(var t in this.length!==e.length?this._data=new Uint32Array(e._data):this._data.set(e._data),this.length=e.length,this._combined={},e._combined)this._combined[t]=e._combined[t];this.isWrapped=e.isWrapped},e.prototype.clone=function(){var t=new e(0);for(var i in t._data=new Uint32Array(this._data),t.length=this.length,this._combined)t._combined[i]=this._combined[i];return t.isWrapped=this.isWrapped,t},e}();t.BufferLine=o},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t,i){this._textarea=e,this._compositionView=t,this._terminal=i,this._isComposing=!1,this._isSendingComposition=!1,this._compositionPosition={start:null,end:null}}return e.prototype.compositionstart=function(){this._isComposing=!0,this._compositionPosition.start=this._textarea.value.length,this._compositionView.textContent="",this._compositionView.classList.add("active")},e.prototype.compositionupdate=function(e){var t=this;this._compositionView.textContent=e.data,this.updateCompositionElements(),setTimeout(function(){t._compositionPosition.end=t._textarea.value.length},0)},e.prototype.compositionend=function(){this._finalizeComposition(!0)},e.prototype.keydown=function(e){if(this._isComposing||this._isSendingComposition){if(229===e.keyCode)return!1;if(16===e.keyCode||17===e.keyCode||18===e.keyCode)return!1;this._finalizeComposition(!1)}return 229!==e.keyCode||(this._handleAnyTextareaChanges(),!1)},e.prototype._finalizeComposition=function(e){var t=this;if(this._compositionView.classList.remove("active"),this._isComposing=!1,this._clearTextareaPosition(),e){var i={start:this._compositionPosition.start,end:this._compositionPosition.end};this._isSendingComposition=!0,setTimeout(function(){if(t._isSendingComposition){t._isSendingComposition=!1;var e=void 0;e=t._isComposing?t._textarea.value.substring(i.start,i.end):t._textarea.value.substring(i.start),t._terminal.handler(e)}},0)}else{this._isSendingComposition=!1;var r=this._textarea.value.substring(this._compositionPosition.start,this._compositionPosition.end);this._terminal.handler(r)}},e.prototype._handleAnyTextareaChanges=function(){var e=this,t=this._textarea.value;setTimeout(function(){if(!e._isComposing){var i=e._textarea.value.replace(t,"");i.length>0&&e._terminal.handler(i)}},0)},e.prototype.updateCompositionElements=function(e){var t=this;if(this._isComposing){if(this._terminal.buffer.isCursorInViewport){var i=Math.ceil(this._terminal.charMeasure.height*this._terminal.options.lineHeight),r=this._terminal.buffer.y*i,n=this._terminal.buffer.x*this._terminal.charMeasure.width;this._compositionView.style.left=n+"px",this._compositionView.style.top=r+"px",this._compositionView.style.height=i+"px",this._compositionView.style.lineHeight=i+"px";var s=this._compositionView.getBoundingClientRect();this._textarea.style.left=n+"px",this._textarea.style.top=r+"px",this._textarea.style.width=s.width+"px",this._textarea.style.height=s.height+"px",this._textarea.style.lineHeight=s.height+"px"}e||setTimeout(function(){return t.updateCompositionElements(!0)},0)}},e.prototype._clearTextareaPosition=function(){this._textarea.style.left="",this._textarea.style.top=""},e}();t.CompositionHelper=r},function(e,t,i){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(e,t)},function(e,t){function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)});Object.defineProperty(t,"__esModule",{value:!0});var s=i(3),o=i(6),a=15,l=function(e){function t(t,i,r,n){var s=e.call(this)||this;return s._terminal=t,s._viewportElement=i,s._scrollArea=r,s._charMeasure=n,s.scrollBarWidth=0,s._currentRowHeight=0,s._lastRecordedBufferLength=0,s._lastRecordedViewportHeight=0,s._lastRecordedBufferHeight=0,s._lastScrollTop=0,s._wheelPartialScroll=0,s._refreshAnimationFrame=null,s._ignoreNextScrollEvent=!1,s.scrollBarWidth=s._viewportElement.offsetWidth-s._scrollArea.offsetWidth||a,s.register(o.addDisposableDomListener(s._viewportElement,"scroll",s._onScroll.bind(s))),setTimeout(function(){return s.syncScrollArea()},0),s}return n(t,e),t.prototype.onThemeChanged=function(e){this._viewportElement.style.backgroundColor=e.background.css},t.prototype._refresh=function(){var e=this;null===this._refreshAnimationFrame&&(this._refreshAnimationFrame=requestAnimationFrame(function(){return e._innerRefresh()}))},t.prototype._innerRefresh=function(){if(this._charMeasure.height>0){this._currentRowHeight=this._terminal.renderer.dimensions.scaledCellHeight/window.devicePixelRatio,this._lastRecordedViewportHeight=this._viewportElement.offsetHeight;var e=Math.round(this._currentRowHeight*this._lastRecordedBufferLength)+(this._lastRecordedViewportHeight-this._terminal.renderer.dimensions.canvasHeight);this._lastRecordedBufferHeight!==e&&(this._lastRecordedBufferHeight=e,this._scrollArea.style.height=this._lastRecordedBufferHeight+"px")}var t=this._terminal.buffer.ydisp*this._currentRowHeight;this._viewportElement.scrollTop!==t&&(this._ignoreNextScrollEvent=!0,this._viewportElement.scrollTop=t),this._refreshAnimationFrame=null},t.prototype.syncScrollArea=function(){if(this._lastRecordedBufferLength!==this._terminal.buffer.lines.length)return this._lastRecordedBufferLength=this._terminal.buffer.lines.length,void this._refresh();if(this._lastRecordedViewportHeight===this._terminal.renderer.dimensions.canvasHeight){var e=this._terminal.buffer.ydisp*this._currentRowHeight;this._lastScrollTop===e&&this._lastScrollTop===this._viewportElement.scrollTop&&this._terminal.renderer.dimensions.scaledCellHeight/window.devicePixelRatio===this._currentRowHeight||this._refresh()}else this._refresh()},t.prototype._onScroll=function(e){if(this._lastScrollTop=this._viewportElement.scrollTop,this._viewportElement.offsetParent)if(this._ignoreNextScrollEvent)this._ignoreNextScrollEvent=!1;else{var t=Math.round(this._lastScrollTop/this._currentRowHeight)-this._terminal.buffer.ydisp;this._terminal.scrollLines(t,!0)}},t.prototype.onWheel=function(e){var t=this._getPixelsScrolled(e);0!==t&&(this._viewportElement.scrollTop+=t,e.preventDefault())},t.prototype._getPixelsScrolled=function(e){if(0===e.deltaY)return 0;var t=e.deltaY;return e.deltaMode===WheelEvent.DOM_DELTA_LINE?t*=this._currentRowHeight:e.deltaMode===WheelEvent.DOM_DELTA_PAGE&&(t*=this._currentRowHeight*this._terminal.rows),t},t.prototype.getLinesScrolled=function(e){if(0===e.deltaY)return 0;var t=e.deltaY;return e.deltaMode===WheelEvent.DOM_DELTA_PIXEL?(t/=this._currentRowHeight+0,this._wheelPartialScroll+=t,t=Math.floor(Math.abs(this._wheelPartialScroll))*(this._wheelPartialScroll>0?1:-1),this._wheelPartialScroll%=1):e.deltaMode===WheelEvent.DOM_DELTA_PAGE&&(t*=this._terminal.rows),t},t.prototype.onTouchStart=function(e){this._lastTouchY=e.touches[0].pageY},t.prototype.onTouchMove=function(e){var t=this._lastTouchY-e.touches[0].pageY;this._lastTouchY=e.touches[0].pageY,0!==t&&(this._viewportElement.scrollTop+=t,e.preventDefault())},t}(s.Disposable);t.Viewport=l},function(e,t,i){"use strict";function r(e){return e.replace(/\r?\n/g,"\r")}function n(e,t){return t?"[200~"+e+"[201~":e}function s(e,t){t.style.position="fixed",t.style.width="20px",t.style.height="20px",t.style.left=e.clientX-10+"px",t.style.top=e.clientY-10+"px",t.style.zIndex="1000",t.focus(),setTimeout(function(){t.style.position=null,t.style.width=null,t.style.height=null,t.style.left=null,t.style.top=null,t.style.zIndex=null},200)}Object.defineProperty(t,"__esModule",{value:!0}),t.prepareTextForTerminal=r,t.bracketTextForPaste=n,t.copyHandler=function(e,t,i){t.browser.isMSIE?window.clipboardData.setData("Text",i.selectionText):e.clipboardData.setData("text/plain",i.selectionText),e.preventDefault()},t.pasteHandler=function(e,t){e.stopPropagation();var i=function(i){i=n(i=r(i),t.bracketedPasteMode),t.handler(i),t.textarea.value="",t.emit("paste",i),t.cancel(e)};t.browser.isMSIE?window.clipboardData&&i(window.clipboardData.getData("Text")):e.clipboardData&&i(e.clipboardData.getData("text/plain"))},t.moveTextAreaUnderMouseCursor=s,t.rightClickHandler=function(e,t,i,r){s(e,t),r&&!i.isClickInSelection(e)&&i.selectWordAtCursor(e),t.value=i.selectionText,t.select()}},function(e,t,i){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(e,t)},function(e,t){function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)});Object.defineProperty(t,"__esModule",{value:!0});var s=i(7),o=i(30),a=i(0),l=i(14),h=i(32),c=i(3),u={"(":0,")":1,"*":2,"+":3,"-":1,".":2},_=function(){function e(e){this._terminal=e}return e.prototype.hook=function(e,t,i){this._data=""},e.prototype.put=function(e,t,i){this._data+=e.substring(t,i)},e.prototype.unhook=function(){this._terminal.handler(s.C0.ESC+"P0+r"+this._data+s.C0.ESC+"\\")},e}(),f=function(){function e(e){this._terminal=e}return e.prototype.hook=function(e,t,i){this._data=""},e.prototype.put=function(e,t,i){this._data+=e.substring(t,i)},e.prototype.unhook=function(){switch(this._data){case'"q':return this._terminal.handler(s.C0.ESC+'P1$r0"q'+s.C0.ESC+"\\");case'"p':return this._terminal.handler(s.C0.ESC+'P1$r61"p'+s.C0.ESC+"\\");case"r":var e=this._terminal.buffer.scrollTop+1+";"+(this._terminal.buffer.scrollBottom+1)+"r";return this._terminal.handler(s.C0.ESC+"P1$r"+e+s.C0.ESC+"\\");case"m":return this._terminal.handler(s.C0.ESC+"P1$r0m"+s.C0.ESC+"\\");case" q":var t={block:2,underline:4,bar:6}[this._terminal.getOption("cursorStyle")];return t-=this._terminal.getOption("cursorBlink"),this._terminal.handler(s.C0.ESC+"P1$r"+t+" q"+s.C0.ESC+"\\");default:this._terminal.error("Unknown DCS $q %s",this._data),this._terminal.handler(s.C0.ESC+"P0$r"+this._data+s.C0.ESC+"\\")}},e}(),d=function(e){function t(t,i){void 0===i&&(i=new h.EscapeSequenceParser);var r=e.call(this)||this;r._terminal=t,r._parser=i,r.register(r._parser),r._surrogateFirst="",r._parser.setCsiHandlerFallback(function(e,t,i){r._terminal.error("Unknown CSI code: ",{collect:e,params:t,flag:String.fromCharCode(i)})}),r._parser.setEscHandlerFallback(function(e,t){r._terminal.error("Unknown ESC code: ",{collect:e,flag:String.fromCharCode(t)})}),r._parser.setExecuteHandlerFallback(function(e){r._terminal.error("Unknown EXECUTE code: ",{code:e})}),r._parser.setOscHandlerFallback(function(e,t){r._terminal.error("Unknown OSC code: ",{identifier:e,data:t})}),r._parser.setPrintHandler(function(e,t,i){return r.print(e,t,i)}),r._parser.setCsiHandler("@",function(e,t){return r.insertChars(e)}),r._parser.setCsiHandler("A",function(e,t){return r.cursorUp(e)}),r._parser.setCsiHandler("B",function(e,t){return r.cursorDown(e)}),r._parser.setCsiHandler("C",function(e,t){return r.cursorForward(e)}),r._parser.setCsiHandler("D",function(e,t){return r.cursorBackward(e)}),r._parser.setCsiHandler("E",function(e,t){return r.cursorNextLine(e)}),r._parser.setCsiHandler("F",function(e,t){return r.cursorPrecedingLine(e)}),r._parser.setCsiHandler("G",function(e,t){return r.cursorCharAbsolute(e)}),r._parser.setCsiHandler("H",function(e,t){return r.cursorPosition(e)}),r._parser.setCsiHandler("I",function(e,t){return r.cursorForwardTab(e)}),r._parser.setCsiHandler("J",function(e,t){return r.eraseInDisplay(e)}),r._parser.setCsiHandler("K",function(e,t){return r.eraseInLine(e)}),r._parser.setCsiHandler("L",function(e,t){return r.insertLines(e)}),r._parser.setCsiHandler("M",function(e,t){return r.deleteLines(e)}),r._parser.setCsiHandler("P",function(e,t){return r.deleteChars(e)}),r._parser.setCsiHandler("S",function(e,t){return r.scrollUp(e)}),r._parser.setCsiHandler("T",function(e,t){return r.scrollDown(e,t)}),r._parser.setCsiHandler("X",function(e,t){return r.eraseChars(e)}),r._parser.setCsiHandler("Z",function(e,t){return r.cursorBackwardTab(e)}),r._parser.setCsiHandler("`",function(e,t){return r.charPosAbsolute(e)}),r._parser.setCsiHandler("a",function(e,t){return r.hPositionRelative(e)}),r._parser.setCsiHandler("b",function(e,t){return r.repeatPrecedingCharacter(e)}),r._parser.setCsiHandler("c",function(e,t){return r.sendDeviceAttributes(e,t)}),r._parser.setCsiHandler("d",function(e,t){return r.linePosAbsolute(e)}),r._parser.setCsiHandler("e",function(e,t){return r.vPositionRelative(e)}),r._parser.setCsiHandler("f",function(e,t){return r.hVPosition(e)}),r._parser.setCsiHandler("g",function(e,t){return r.tabClear(e)}),r._parser.setCsiHandler("h",function(e,t){return r.setMode(e,t)}),r._parser.setCsiHandler("l",function(e,t){return r.resetMode(e,t)}),r._parser.setCsiHandler("m",function(e,t){return r.charAttributes(e)}),r._parser.setCsiHandler("n",function(e,t){return r.deviceStatus(e,t)}),r._parser.setCsiHandler("p",function(e,t){return r.softReset(e,t)}),r._parser.setCsiHandler("q",function(e,t){return r.setCursorStyle(e,t)}),r._parser.setCsiHandler("r",function(e,t){return r.setScrollRegion(e,t)}),r._parser.setCsiHandler("s",function(e,t){return r.saveCursor(e)}),r._parser.setCsiHandler("u",function(e,t){return r.restoreCursor(e)}),r._parser.setExecuteHandler(s.C0.BEL,function(){return r.bell()}),r._parser.setExecuteHandler(s.C0.LF,function(){return r.lineFeed()}),r._parser.setExecuteHandler(s.C0.VT,function(){return r.lineFeed()}),r._parser.setExecuteHandler(s.C0.FF,function(){return r.lineFeed()}),r._parser.setExecuteHandler(s.C0.CR,function(){return r.carriageReturn()}),r._parser.setExecuteHandler(s.C0.BS,function(){return r.backspace()}),r._parser.setExecuteHandler(s.C0.HT,function(){return r.tab()}),r._parser.setExecuteHandler(s.C0.SO,function(){return r.shiftOut()}),r._parser.setExecuteHandler(s.C0.SI,function(){return r.shiftIn()}),r._parser.setExecuteHandler(s.C1.IND,function(){return r.index()}),r._parser.setExecuteHandler(s.C1.NEL,function(){return r.nextLine()}),r._parser.setExecuteHandler(s.C1.HTS,function(){return r.tabSet()}),r._parser.setOscHandler(0,function(e){return r.setTitle(e)}),r._parser.setOscHandler(2,function(e){return r.setTitle(e)}),r._parser.setEscHandler("7",function(){return r.saveCursor([])}),r._parser.setEscHandler("8",function(){return r.restoreCursor([])}),r._parser.setEscHandler("D",function(){return r.index()}),r._parser.setEscHandler("E",function(){return r.nextLine()}),r._parser.setEscHandler("H",function(){return r.tabSet()}),r._parser.setEscHandler("M",function(){return r.reverseIndex()}),r._parser.setEscHandler("=",function(){return r.keypadApplicationMode()}),r._parser.setEscHandler(">",function(){return r.keypadNumericMode()}),r._parser.setEscHandler("c",function(){return r.reset()}),r._parser.setEscHandler("n",function(){return r.setgLevel(2)}),r._parser.setEscHandler("o",function(){return r.setgLevel(3)}),r._parser.setEscHandler("|",function(){return r.setgLevel(3)}),r._parser.setEscHandler("}",function(){return r.setgLevel(2)}),r._parser.setEscHandler("~",function(){return r.setgLevel(1)}),r._parser.setEscHandler("%@",function(){return r.selectDefaultCharset()}),r._parser.setEscHandler("%G",function(){return r.selectDefaultCharset()});var n=function(e){a._parser.setEscHandler("("+e,function(){return r.selectCharset("("+e)}),a._parser.setEscHandler(")"+e,function(){return r.selectCharset(")"+e)}),a._parser.setEscHandler("*"+e,function(){return r.selectCharset("*"+e)}),a._parser.setEscHandler("+"+e,function(){return r.selectCharset("+"+e)}),a._parser.setEscHandler("-"+e,function(){return r.selectCharset("-"+e)}),a._parser.setEscHandler("."+e,function(){return r.selectCharset("."+e)}),a._parser.setEscHandler("/"+e,function(){return r.selectCharset("/"+e)})},a=this;for(var l in o.CHARSETS)n(l);return r._parser.setErrorHandler(function(e){return r._terminal.error("Parsing error: ",e),e}),r._parser.setDcsHandler("$q",new f(r._terminal)),r._parser.setDcsHandler("+q",new _(r._terminal)),r}return n(t,e),t.prototype.dispose=function(){e.prototype.dispose.call(this),this._terminal=null},t.prototype.parse=function(e){if(this._terminal){var t=this._terminal.buffer,i=t.x,r=t.y;this._terminal.debug&&this._terminal.log("data: "+e),this._surrogateFirst&&(e=this._surrogateFirst+e,this._surrogateFirst=""),this._parser.parse(e),(t=this._terminal.buffer).x===i&&t.y===r||this._terminal.emit("cursormove")}},t.prototype.print=function(e,t,i){var r,n,s,o=this._terminal.buffer,h=this._terminal.charset,c=this._terminal.options.screenReaderMode,u=this._terminal.cols,_=this._terminal.wraparoundMode,f=this._terminal.insertMode,d=this._terminal.curAttr,p=o.lines.get(o.y+o.ybase);this._terminal.updateRange(o.y);for(var m=t;m<i;++m){if(r=e.charAt(m),55296<=(n=e.charCodeAt(m))&&n<=56319){if(++m>=i){this._surrogateFirst=r;continue}var y=e.charCodeAt(m);56320<=y&&y<=57343?(n=1024*(n-55296)+y-56320+65536,r+=e.charAt(m)):m--}if(s=l.wcwidth(n),h&&(n=(r=h[r]||r).charCodeAt(0)),c&&this._terminal.emit("a11y.char",r),s||!o.x){if(o.x+s-1>=u)if(_)o.x=0,o.y++,o.y>o.scrollBottom?(o.y--,this._terminal.scroll(!0)):o.lines.get(o.y).isWrapped=!0,p=o.lines.get(o.y+o.ybase);else if(2===s)continue;if(f)p.insertCells(o.x,s,[d,a.NULL_CELL_CHAR,a.NULL_CELL_WIDTH,a.NULL_CELL_CODE]),2===p.get(u-1)[a.CHAR_DATA_WIDTH_INDEX]&&p.set(u-1,[d,a.NULL_CELL_CHAR,a.NULL_CELL_WIDTH,a.NULL_CELL_CODE]);if(p.set(o.x++,[d,r,s,n]),s>0)for(;--s;)p.set(o.x++,[d,"",0,void 0])}else{var C=p.get(o.x-1);if(C)if(C[a.CHAR_DATA_WIDTH_INDEX])C[a.CHAR_DATA_CHAR_INDEX]+=r,C[a.CHAR_DATA_CODE_INDEX]=n,p.set(o.x-1,C);else{var g=p.get(o.x-2);g&&(g[a.CHAR_DATA_CHAR_INDEX]+=r,g[a.CHAR_DATA_CODE_INDEX]=n,p.set(o.x-2,g))}}}this._terminal.updateRange(o.y)},t.prototype.bell=function(){this._terminal.bell()},t.prototype.lineFeed=function(){var e=this._terminal.buffer;this._terminal.options.convertEol&&(e.x=0),e.y++,e.y>e.scrollBottom&&(e.y--,this._terminal.scroll()),e.x>=this._terminal.cols&&e.x--,this._terminal.emit("linefeed")},t.prototype.carriageReturn=function(){this._terminal.buffer.x=0},t.prototype.backspace=function(){this._terminal.buffer.x>0&&this._terminal.buffer.x--},t.prototype.tab=function(){var e=this._terminal.buffer.x;this._terminal.buffer.x=this._terminal.buffer.nextStop(),this._terminal.options.screenReaderMode&&this._terminal.emit("a11y.tab",this._terminal.buffer.x-e)},t.prototype.shiftOut=function(){this._terminal.setgLevel(1)},t.prototype.shiftIn=function(){this._terminal.setgLevel(0)},t.prototype.insertChars=function(e){this._terminal.buffer.lines.get(this._terminal.buffer.y+this._terminal.buffer.ybase).insertCells(this._terminal.buffer.x,e[0]||1,[this._terminal.eraseAttr(),a.NULL_CELL_CHAR,a.NULL_CELL_WIDTH,a.NULL_CELL_CODE]),this._terminal.updateRange(this._terminal.buffer.y)},t.prototype.cursorUp=function(e){var t=e[0];t<1&&(t=1),this._terminal.buffer.y-=t,this._terminal.buffer.y<0&&(this._terminal.buffer.y=0)},t.prototype.cursorDown=function(e){var t=e[0];t<1&&(t=1),this._terminal.buffer.y+=t,this._terminal.buffer.y>=this._terminal.rows&&(this._terminal.buffer.y=this._terminal.rows-1),this._terminal.buffer.x>=this._terminal.cols&&this._terminal.buffer.x--},t.prototype.cursorForward=function(e){var t=e[0];t<1&&(t=1),this._terminal.buffer.x+=t,this._terminal.buffer.x>=this._terminal.cols&&(this._terminal.buffer.x=this._terminal.cols-1)},t.prototype.cursorBackward=function(e){var t=e[0];t<1&&(t=1),this._terminal.buffer.x>=this._terminal.cols&&this._terminal.buffer.x--,this._terminal.buffer.x-=t,this._terminal.buffer.x<0&&(this._terminal.buffer.x=0)},t.prototype.cursorNextLine=function(e){var t=e[0];t<1&&(t=1),this._terminal.buffer.y+=t,this._terminal.buffer.y>=this._terminal.rows&&(this._terminal.buffer.y=this._terminal.rows-1),this._terminal.buffer.x=0},t.prototype.cursorPrecedingLine=function(e){var t=e[0];t<1&&(t=1),this._terminal.buffer.y-=t,this._terminal.buffer.y<0&&(this._terminal.buffer.y=0),this._terminal.buffer.x=0},t.prototype.cursorCharAbsolute=function(e){var t=e[0];t<1&&(t=1),this._terminal.buffer.x=t-1},t.prototype.cursorPosition=function(e){var t,i=e[0]-1;t=e.length>=2?e[1]-1:0,i<0?i=0:i>=this._terminal.rows&&(i=this._terminal.rows-1),t<0?t=0:t>=this._terminal.cols&&(t=this._terminal.cols-1),this._terminal.buffer.x=t,this._terminal.buffer.y=i},t.prototype.cursorForwardTab=function(e){for(var t=e[0]||1;t--;)this._terminal.buffer.x=this._terminal.buffer.nextStop()},t.prototype._eraseInBufferLine=function(e,t,i,r){void 0===r&&(r=!1);var n=this._terminal.buffer.lines.get(this._terminal.buffer.ybase+e);n.replaceCells(t,i,[this._terminal.eraseAttr(),a.NULL_CELL_CHAR,a.NULL_CELL_WIDTH,a.NULL_CELL_CODE]),r&&(n.isWrapped=!1)},t.prototype._resetBufferLine=function(e){this._eraseInBufferLine(e,0,this._terminal.cols,!0)},t.prototype.eraseInDisplay=function(e){var t;switch(e[0]){case 0:for(t=this._terminal.buffer.y,this._terminal.updateRange(t),this._eraseInBufferLine(t++,this._terminal.buffer.x,this._terminal.cols,0===this._terminal.buffer.x);t<this._terminal.rows;t++)this._resetBufferLine(t);this._terminal.updateRange(t);break;case 1:for(t=this._terminal.buffer.y,this._terminal.updateRange(t),this._eraseInBufferLine(t,0,this._terminal.buffer.x+1,!0),this._terminal.buffer.x+1>=this._terminal.cols&&(this._terminal.buffer.lines.get(t+1).isWrapped=!1);t--;)this._resetBufferLine(t);this._terminal.updateRange(0);break;case 2:for(t=this._terminal.rows,this._terminal.updateRange(t-1);t--;)this._resetBufferLine(t);this._terminal.updateRange(0);break;case 3:var i=this._terminal.buffer.lines.length-this._terminal.rows;i>0&&(this._terminal.buffer.lines.trimStart(i),this._terminal.buffer.ybase=Math.max(this._terminal.buffer.ybase-i,0),this._terminal.buffer.ydisp=Math.max(this._terminal.buffer.ydisp-i,0),this._terminal.emit("scroll",0))}},t.prototype.eraseInLine=function(e){switch(e[0]){case 0:this._eraseInBufferLine(this._terminal.buffer.y,this._terminal.buffer.x,this._terminal.cols);break;case 1:this._eraseInBufferLine(this._terminal.buffer.y,0,this._terminal.buffer.x+1);break;case 2:this._eraseInBufferLine(this._terminal.buffer.y,0,this._terminal.cols)}this._terminal.updateRange(this._terminal.buffer.y)},t.prototype.insertLines=function(e){var t=e[0];t<1&&(t=1);for(var i=this._terminal.buffer,r=i.y+i.ybase,n=this._terminal.rows-1-i.scrollBottom,s=this._terminal.rows-1+i.ybase-n+1;t--;)i.lines.splice(s-1,1),i.lines.splice(r,0,i.getBlankLine(this._terminal.eraseAttr()));this._terminal.updateRange(i.y),this._terminal.updateRange(i.scrollBottom)},t.prototype.deleteLines=function(e){var t=e[0];t<1&&(t=1);var i,r=this._terminal.buffer,n=r.y+r.ybase;for(i=this._terminal.rows-1-r.scrollBottom,i=this._terminal.rows-1+r.ybase-i;t--;)r.lines.splice(n,1),r.lines.splice(i,0,r.getBlankLine(this._terminal.eraseAttr()));this._terminal.updateRange(r.y),this._terminal.updateRange(r.scrollBottom)},t.prototype.deleteChars=function(e){this._terminal.buffer.lines.get(this._terminal.buffer.y+this._terminal.buffer.ybase).deleteCells(this._terminal.buffer.x,e[0]||1,[this._terminal.eraseAttr(),a.NULL_CELL_CHAR,a.NULL_CELL_WIDTH,a.NULL_CELL_CODE]),this._terminal.updateRange(this._terminal.buffer.y)},t.prototype.scrollUp=function(e){for(var t=e[0]||1,i=this._terminal.buffer;t--;)i.lines.splice(i.ybase+i.scrollTop,1),i.lines.splice(i.ybase+i.scrollBottom,0,i.getBlankLine(a.DEFAULT_ATTR));this._terminal.updateRange(i.scrollTop),this._terminal.updateRange(i.scrollBottom)},t.prototype.scrollDown=function(e,t){if(e.length<2&&!t){for(var i=e[0]||1,r=this._terminal.buffer;i--;)r.lines.splice(r.ybase+r.scrollBottom,1),r.lines.splice(r.ybase+r.scrollBottom,0,r.getBlankLine(a.DEFAULT_ATTR));this._terminal.updateRange(r.scrollTop),this._terminal.updateRange(r.scrollBottom)}},t.prototype.eraseChars=function(e){this._terminal.buffer.lines.get(this._terminal.buffer.y+this._terminal.buffer.ybase).replaceCells(this._terminal.buffer.x,this._terminal.buffer.x+(e[0]||1),[this._terminal.eraseAttr(),a.NULL_CELL_CHAR,a.NULL_CELL_WIDTH,a.NULL_CELL_CODE])},t.prototype.cursorBackwardTab=function(e){for(var t=e[0]||1,i=this._terminal.buffer;t--;)i.x=i.prevStop()},t.prototype.charPosAbsolute=function(e){var t=e[0];t<1&&(t=1),this._terminal.buffer.x=t-1,this._terminal.buffer.x>=this._terminal.cols&&(this._terminal.buffer.x=this._terminal.cols-1)},t.prototype.hPositionRelative=function(e){var t=e[0];t<1&&(t=1),this._terminal.buffer.x+=t,this._terminal.buffer.x>=this._terminal.cols&&(this._terminal.buffer.x=this._terminal.cols-1)},t.prototype.repeatPrecedingCharacter=function(e){var t=this._terminal.buffer,i=t.lines.get(t.ybase+t.y);i.replaceCells(t.x,t.x+(e[0]||1),i.get(t.x-1)||[a.DEFAULT_ATTR,a.NULL_CELL_CHAR,a.NULL_CELL_WIDTH,a.NULL_CELL_CODE])},t.prototype.sendDeviceAttributes=function(e,t){e[0]>0||(t?">"===t&&(this._terminal.is("xterm")?this._terminal.handler(s.C0.ESC+"[>0;276;0c"):this._terminal.is("rxvt-unicode")?this._terminal.handler(s.C0.ESC+"[>85;95;0c"):this._terminal.is("linux")?this._terminal.handler(e[0]+"c"):this._terminal.is("screen")&&this._terminal.handler(s.C0.ESC+"[>83;40003;0c")):this._terminal.is("xterm")||this._terminal.is("rxvt-unicode")||this._terminal.is("screen")?this._terminal.handler(s.C0.ESC+"[?1;2c"):this._terminal.is("linux")&&this._terminal.handler(s.C0.ESC+"[?6c"))},t.prototype.linePosAbsolute=function(e){var t=e[0];t<1&&(t=1),this._terminal.buffer.y=t-1,this._terminal.buffer.y>=this._terminal.rows&&(this._terminal.buffer.y=this._terminal.rows-1)},t.prototype.vPositionRelative=function(e){var t=e[0];t<1&&(t=1),this._terminal.buffer.y+=t,this._terminal.buffer.y>=this._terminal.rows&&(this._terminal.buffer.y=this._terminal.rows-1),this._terminal.buffer.x>=this._terminal.cols&&this._terminal.buffer.x--},t.prototype.hVPosition=function(e){e[0]<1&&(e[0]=1),e[1]<1&&(e[1]=1),this._terminal.buffer.y=e[0]-1,this._terminal.buffer.y>=this._terminal.rows&&(this._terminal.buffer.y=this._terminal.rows-1),this._terminal.buffer.x=e[1]-1,this._terminal.buffer.x>=this._terminal.cols&&(this._terminal.buffer.x=this._terminal.cols-1)},t.prototype.tabClear=function(e){var t=e[0];t<=0?delete this._terminal.buffer.tabs[this._terminal.buffer.x]:3===t&&(this._terminal.buffer.tabs={})},t.prototype.setMode=function(e,t){if(e.length>1)for(var i=0;i<e.length;i++)this.setMode([e[i]]);else if(t){if("?"===t)switch(e[0]){case 1:this._terminal.applicationCursor=!0;break;case 2:this._terminal.setgCharset(0,o.DEFAULT_CHARSET),this._terminal.setgCharset(1,o.DEFAULT_CHARSET),this._terminal.setgCharset(2,o.DEFAULT_CHARSET),this._terminal.setgCharset(3,o.DEFAULT_CHARSET);break;case 3:this._terminal.savedCols=this._terminal.cols,this._terminal.resize(132,this._terminal.rows);break;case 6:this._terminal.originMode=!0;break;case 7:this._terminal.wraparoundMode=!0;break;case 12:break;case 66:this._terminal.log("Serial port requested application keypad."),this._terminal.applicationKeypad=!0,this._terminal.viewport&&this._terminal.viewport.syncScrollArea();break;case 9:case 1e3:case 1002:case 1003:this._terminal.x10Mouse=9===e[0],this._terminal.vt200Mouse=1e3===e[0],this._terminal.normalMouse=e[0]>1e3,this._terminal.mouseEvents=!0,this._terminal.element.classList.add("enable-mouse-events"),this._terminal.selectionManager.disable(),this._terminal.log("Binding to mouse events.");break;case 1004:this._terminal.sendFocus=!0;break;case 1005:this._terminal.utfMouse=!0;break;case 1006:this._terminal.sgrMouse=!0;break;case 1015:this._terminal.urxvtMouse=!0;break;case 25:this._terminal.cursorHidden=!1;break;case 1048:this.saveCursor(e);break;case 1049:this.saveCursor(e);case 47:case 1047:this._terminal.buffers.activateAltBuffer(this._terminal.eraseAttr()),this._terminal.refresh(0,this._terminal.rows-1),this._terminal.viewport&&this._terminal.viewport.syncScrollArea(),this._terminal.showCursor();break;case 2004:this._terminal.bracketedPasteMode=!0}}else switch(e[0]){case 4:this._terminal.insertMode=!0}},t.prototype.resetMode=function(e,t){if(e.length>1)for(var i=0;i<e.length;i++)this.resetMode([e[i]]);else if(t){if("?"===t)switch(e[0]){case 1:this._terminal.applicationCursor=!1;break;case 3:132===this._terminal.cols&&this._terminal.savedCols&&this._terminal.resize(this._terminal.savedCols,this._terminal.rows),delete this._terminal.savedCols;break;case 6:this._terminal.originMode=!1;break;case 7:this._terminal.wraparoundMode=!1;break;case 12:break;case 66:this._terminal.log("Switching back to normal keypad."),this._terminal.applicationKeypad=!1,this._terminal.viewport&&this._terminal.viewport.syncScrollArea();break;case 9:case 1e3:case 1002:case 1003:this._terminal.x10Mouse=!1,this._terminal.vt200Mouse=!1,this._terminal.normalMouse=!1,this._terminal.mouseEvents=!1,this._terminal.element.classList.remove("enable-mouse-events"),this._terminal.selectionManager.enable();break;case 1004:this._terminal.sendFocus=!1;break;case 1005:this._terminal.utfMouse=!1;break;case 1006:this._terminal.sgrMouse=!1;break;case 1015:this._terminal.urxvtMouse=!1;break;case 25:this._terminal.cursorHidden=!0;break;case 1048:this.restoreCursor(e);break;case 1049:case 47:case 1047:this._terminal.buffers.activateNormalBuffer(),1049===e[0]&&this.restoreCursor(e),this._terminal.refresh(0,this._terminal.rows-1),this._terminal.viewport&&this._terminal.viewport.syncScrollArea(),this._terminal.showCursor();break;case 2004:this._terminal.bracketedPasteMode=!1}}else switch(e[0]){case 4:this._terminal.insertMode=!1}},t.prototype.charAttributes=function(e){if(1!==e.length||0!==e[0]){for(var t,i=e.length,r=this._terminal.curAttr>>18,n=this._terminal.curAttr>>9&511,s=511&this._terminal.curAttr,o=0;o<i;o++)(t=e[o])>=30&&t<=37?n=t-30:t>=40&&t<=47?s=t-40:t>=90&&t<=97?n=(t+=8)-90:t>=100&&t<=107?s=(t+=8)-100:0===t?(r=a.DEFAULT_ATTR>>18,n=a.DEFAULT_ATTR>>9&511,s=511&a.DEFAULT_ATTR):1===t?r|=1:3===t?r|=64:4===t?r|=2:5===t?r|=4:7===t?r|=8:8===t?r|=16:2===t?r|=32:22===t?(r&=-2,r&=-33):23===t?r&=-65:24===t?r&=-3:25===t?r&=-5:27===t?r&=-9:28===t?r&=-17:39===t?n=a.DEFAULT_ATTR>>9&511:49===t?s=511&a.DEFAULT_ATTR:38===t?2===e[o+1]?(o+=2,-1===(n=this._terminal.matchColor(255&e[o],255&e[o+1],255&e[o+2]))&&(n=511),o+=2):5===e[o+1]&&(n=t=255&e[o+=2]):48===t?2===e[o+1]?(o+=2,-1===(s=this._terminal.matchColor(255&e[o],255&e[o+1],255&e[o+2]))&&(s=511),o+=2):5===e[o+1]&&(s=t=255&e[o+=2]):100===t?(n=a.DEFAULT_ATTR>>9&511,s=511&a.DEFAULT_ATTR):this._terminal.error("Unknown SGR attribute: %d.",t);this._terminal.curAttr=r<<18|n<<9|s}else this._terminal.curAttr=a.DEFAULT_ATTR},t.prototype.deviceStatus=function(e,t){if(t){if("?"===t)switch(e[0]){case 6:i=this._terminal.buffer.y+1,r=this._terminal.buffer.x+1;this._terminal.emit("data",s.C0.ESC+"[?"+i+";"+r+"R")}}else switch(e[0]){case 5:this._terminal.emit("data",s.C0.ESC+"[0n");break;case 6:var i=this._terminal.buffer.y+1,r=this._terminal.buffer.x+1;this._terminal.emit("data",s.C0.ESC+"["+i+";"+r+"R")}},t.prototype.softReset=function(e,t){"!"===t&&(this._terminal.cursorHidden=!1,this._terminal.insertMode=!1,this._terminal.originMode=!1,this._terminal.wraparoundMode=!0,this._terminal.applicationKeypad=!1,this._terminal.viewport&&this._terminal.viewport.syncScrollArea(),this._terminal.applicationCursor=!1,this._terminal.buffer.scrollTop=0,this._terminal.buffer.scrollBottom=this._terminal.rows-1,this._terminal.curAttr=a.DEFAULT_ATTR,this._terminal.buffer.x=this._terminal.buffer.y=0,this._terminal.charset=null,this._terminal.glevel=0,this._terminal.charsets=[null])},t.prototype.setCursorStyle=function(e,t){if(" "===t){var i=e[0]<1?1:e[0];switch(i){case 1:case 2:this._terminal.setOption("cursorStyle","block");break;case 3:case 4:this._terminal.setOption("cursorStyle","underline");break;case 5:case 6:this._terminal.setOption("cursorStyle","bar")}var r=i%2==1;this._terminal.setOption("cursorBlink",r)}},t.prototype.setScrollRegion=function(e,t){t||(this._terminal.buffer.scrollTop=(e[0]||1)-1,this._terminal.buffer.scrollBottom=(e[1]&&e[1]<=this._terminal.rows?e[1]:this._terminal.rows)-1,this._terminal.buffer.x=0,this._terminal.buffer.y=0)},t.prototype.saveCursor=function(e){this._terminal.buffer.savedX=this._terminal.buffer.x,this._terminal.buffer.savedY=this._terminal.buffer.y,this._terminal.buffer.savedCurAttr=this._terminal.curAttr},t.prototype.restoreCursor=function(e){this._terminal.buffer.x=this._terminal.buffer.savedX||0,this._terminal.buffer.y=this._terminal.buffer.savedY||0,this._terminal.curAttr=this._terminal.buffer.savedCurAttr||a.DEFAULT_ATTR},t.prototype.setTitle=function(e){this._terminal.handleTitle(e)},t.prototype.nextLine=function(){this._terminal.buffer.x=0,this.index()},t.prototype.keypadApplicationMode=function(){this._terminal.log("Serial port requested application keypad."),this._terminal.applicationKeypad=!0,this._terminal.viewport&&this._terminal.viewport.syncScrollArea()},t.prototype.keypadNumericMode=function(){this._terminal.log("Switching back to normal keypad."),this._terminal.applicationKeypad=!1,this._terminal.viewport&&this._terminal.viewport.syncScrollArea()},t.prototype.selectDefaultCharset=function(){this._terminal.setgLevel(0),this._terminal.setgCharset(0,o.DEFAULT_CHARSET)},t.prototype.selectCharset=function(e){if(2!==e.length)return this.selectDefaultCharset();"/"!==e[0]&&this._terminal.setgCharset(u[e[0]],o.CHARSETS[e[1]]||o.DEFAULT_CHARSET)},t.prototype.index=function(){this._terminal.index()},t.prototype.tabSet=function(){this._terminal.tabSet()},t.prototype.reverseIndex=function(){this._terminal.reverseIndex()},t.prototype.reset=function(){this._parser.reset(),this._terminal.reset()},t.prototype.setgLevel=function(e){this._terminal.setgLevel(e)},t}(c.Disposable);t.InputHandler=d},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CHARSETS={},t.DEFAULT_CHARSET=t.CHARSETS.B,t.CHARSETS[0]={"`":"◆",a:"▒",b:"\t",c:"\f",d:"\r",e:"\n",f:"°",g:"±",h:"␤",i:"\v",j:"┘",k:"┐",l:"┌",m:"└",n:"┼",o:"⎺",p:"⎻",q:"─",r:"⎼",s:"⎽",t:"├",u:"┤",v:"┴",w:"┬",x:"│",y:"≤",z:"≥","{":"π","|":"≠","}":"£","~":"·"},t.CHARSETS.A={"#":"£"},t.CHARSETS.B=null,t.CHARSETS[4]={"#":"£","@":"¾","[":"ij","\\":"½","]":"|","{":"¨","|":"f","}":"¼","~":"´"},t.CHARSETS.C=t.CHARSETS[5]={"[":"Ä","\\":"Ö","]":"Å","^":"Ü","`":"é","{":"ä","|":"ö","}":"å","~":"ü"},t.CHARSETS.R={"#":"£","@":"à","[":"°","\\":"ç","]":"§","{":"é","|":"ù","}":"è","~":"¨"},t.CHARSETS.Q={"@":"à","[":"â","\\":"ç","]":"ê","^":"î","`":"ô","{":"é","|":"ù","}":"è","~":"û"},t.CHARSETS.K={"@":"§","[":"Ä","\\":"Ö","]":"Ü","{":"ä","|":"ö","}":"ü","~":"ß"},t.CHARSETS.Y={"#":"£","@":"§","[":"°","\\":"ç","]":"é","`":"ù","{":"à","|":"ò","}":"è","~":"ì"},t.CHARSETS.E=t.CHARSETS[6]={"@":"Ä","[":"Æ","\\":"Ø","]":"Å","^":"Ü","`":"ä","{":"æ","|":"ø","}":"å","~":"ü"},t.CHARSETS.Z={"#":"£","@":"§","[":"¡","\\":"Ñ","]":"¿","{":"°","|":"ñ","}":"ç"},t.CHARSETS.H=t.CHARSETS[7]={"@":"É","[":"Ä","\\":"Ö","]":"Å","^":"Ü","`":"é","{":"ä","|":"ö","}":"å","~":"ü"},t.CHARSETS["="]={"#":"ù","@":"à","[":"é","\\":"ç","]":"ê","^":"î",_:"è","`":"ô","{":"ä","|":"ö","}":"ü","~":"û"}},function(e,t,i){"use strict";function r(e,t,i,r){if(void 0===i&&(i=0),void 0===r&&(r=e.length),i>=e.length)return e;i=(e.length+i)%e.length,r=r>=e.length?e.length:(e.length+r)%e.length;for(var n=i;n<r;++n)e[n]=t;return e}Object.defineProperty(t,"__esModule",{value:!0}),t.fill=function(e,t,i,n){return e.fill?e.fill(t,i,n):r(e,t,i,n)},t.fillFallback=r},function(e,t,i){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(e,t)},function(e,t){function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)});Object.defineProperty(t,"__esModule",{value:!0});var s=i(3);function o(e,t){for(var i=t-e,r=new Array(i);i--;)r[i]=--t;return r}var a=function(){function e(e){this.table="undefined"==typeof Uint8Array?new Array(e):new Uint8Array(e)}return e.prototype.add=function(e,t,i,r){this.table[t<<8|e]=(0|i)<<4|(void 0===r?t:r)},e.prototype.addMany=function(e,t,i,r){for(var n=0;n<e.length;n++)this.add(e[n],t,i,r)},e}();t.TransitionTable=a;var l=o(32,127),h=o(0,24);h.push(25),h.push.apply(h,o(28,32));t.VT500_TRANSITION_TABLE=function(){var e,t=new a(4095),i=o(0,14);for(e in i)for(var r=0;r<160;++r)t.add(r,e,1,0);for(e in t.addMany(l,0,2,0),i)t.addMany([24,26,153,154],e,3,0),t.addMany(o(128,144),e,3,0),t.addMany(o(144,152),e,3,0),t.add(156,e,0,0),t.add(27,e,11,1),t.add(157,e,4,8),t.addMany([152,158,159],e,0,7),t.add(155,e,11,3),t.add(144,e,11,9);return t.addMany(h,0,3,0),t.addMany(h,1,3,1),t.add(127,1,0,1),t.addMany(h,8,0,8),t.addMany(h,3,3,3),t.add(127,3,0,3),t.addMany(h,4,3,4),t.add(127,4,0,4),t.addMany(h,6,3,6),t.addMany(h,5,3,5),t.add(127,5,0,5),t.addMany(h,2,3,2),t.add(127,2,0,2),t.add(93,1,4,8),t.addMany(l,8,5,8),t.add(127,8,5,8),t.addMany([156,27,24,26,7],8,6,0),t.addMany(o(28,32),8,0,8),t.addMany([88,94,95],1,0,7),t.addMany(l,7,0,7),t.addMany(h,7,0,7),t.add(156,7,0,0),t.add(91,1,11,3),t.addMany(o(64,127),3,7,0),t.addMany(o(48,58),3,8,4),t.add(59,3,8,4),t.addMany([60,61,62,63],3,9,4),t.addMany(o(48,58),4,8,4),t.add(59,4,8,4),t.addMany(o(64,127),4,7,0),t.addMany([58,60,61,62,63],4,0,6),t.addMany(o(32,64),6,0,6),t.add(127,6,0,6),t.addMany(o(64,127),6,0,0),t.add(58,3,0,6),t.addMany(o(32,48),3,9,5),t.addMany(o(32,48),5,9,5),t.addMany(o(48,64),5,0,6),t.addMany(o(64,127),5,7,0),t.addMany(o(32,48),4,9,5),t.addMany(o(32,48),1,9,2),t.addMany(o(32,48),2,9,2),t.addMany(o(48,127),2,10,0),t.addMany(o(48,80),1,10,0),t.addMany(o(81,88),1,10,0),t.addMany([89,90,92],1,10,0),t.addMany(o(96,127),1,10,0),t.add(80,1,11,9),t.addMany(h,9,0,9),t.add(127,9,0,9),t.addMany(o(28,32),9,0,9),t.addMany(o(32,48),9,9,12),t.add(58,9,0,11),t.addMany(o(48,58),9,8,10),t.add(59,9,8,10),t.addMany([60,61,62,63],9,9,10),t.addMany(h,11,0,11),t.addMany(o(32,128),11,0,11),t.addMany(o(28,32),11,0,11),t.addMany(h,10,0,10),t.add(127,10,0,10),t.addMany(o(28,32),10,0,10),t.addMany(o(48,58),10,8,10),t.add(59,10,8,10),t.addMany([58,60,61,62,63],10,0,11),t.addMany(o(32,48),10,9,12),t.addMany(h,12,0,12),t.add(127,12,0,12),t.addMany(o(28,32),12,0,12),t.addMany(o(32,48),12,9,12),t.addMany(o(48,64),12,0,11),t.addMany(o(64,127),12,12,13),t.addMany(o(64,127),10,12,13),t.addMany(o(64,127),9,12,13),t.addMany(h,13,13,13),t.addMany(l,13,13,13),t.add(127,13,0,13),t.addMany([27,156],13,14,0),t}();var c=function(){function e(){}return e.prototype.hook=function(e,t,i){},e.prototype.put=function(e,t,i){},e.prototype.unhook=function(){},e}(),u=function(e){function i(i){void 0===i&&(i=t.VT500_TRANSITION_TABLE);var r=e.call(this)||this;return r.TRANSITIONS=i,r.initialState=0,r.currentState=r.initialState,r._osc="",r._params=[0],r._collect="",r._printHandlerFb=function(e,t,i){},r._executeHandlerFb=function(e){},r._csiHandlerFb=function(e,t,i){},r._escHandlerFb=function(e,t){},r._oscHandlerFb=function(e,t){},r._dcsHandlerFb=new c,r._errorHandlerFb=function(e){return e},r._printHandler=r._printHandlerFb,r._executeHandlers=Object.create(null),r._csiHandlers=Object.create(null),r._escHandlers=Object.create(null),r._oscHandlers=Object.create(null),r._dcsHandlers=Object.create(null),r._activeDcsHandler=null,r._errorHandler=r._errorHandlerFb,r.setEscHandler("\\",function(){}),r}return n(i,e),i.prototype.dispose=function(){this._printHandlerFb=null,this._executeHandlerFb=null,this._csiHandlerFb=null,this._escHandlerFb=null,this._oscHandlerFb=null,this._dcsHandlerFb=null,this._errorHandlerFb=null,this._printHandler=null,this._executeHandlers=null,this._csiHandlers=null,this._escHandlers=null,this._oscHandlers=null,this._dcsHandlers=null,this._activeDcsHandler=null,this._errorHandler=null},i.prototype.setPrintHandler=function(e){this._printHandler=e},i.prototype.clearPrintHandler=function(){this._printHandler=this._printHandlerFb},i.prototype.setExecuteHandler=function(e,t){this._executeHandlers[e.charCodeAt(0)]=t},i.prototype.clearExecuteHandler=function(e){this._executeHandlers[e.charCodeAt(0)]&&delete this._executeHandlers[e.charCodeAt(0)]},i.prototype.setExecuteHandlerFallback=function(e){this._executeHandlerFb=e},i.prototype.setCsiHandler=function(e,t){this._csiHandlers[e.charCodeAt(0)]=t},i.prototype.clearCsiHandler=function(e){this._csiHandlers[e.charCodeAt(0)]&&delete this._csiHandlers[e.charCodeAt(0)]},i.prototype.setCsiHandlerFallback=function(e){this._csiHandlerFb=e},i.prototype.setEscHandler=function(e,t){this._escHandlers[e]=t},i.prototype.clearEscHandler=function(e){this._escHandlers[e]&&delete this._escHandlers[e]},i.prototype.setEscHandlerFallback=function(e){this._escHandlerFb=e},i.prototype.setOscHandler=function(e,t){this._oscHandlers[e]=t},i.prototype.clearOscHandler=function(e){this._oscHandlers[e]&&delete this._oscHandlers[e]},i.prototype.setOscHandlerFallback=function(e){this._oscHandlerFb=e},i.prototype.setDcsHandler=function(e,t){this._dcsHandlers[e]=t},i.prototype.clearDcsHandler=function(e){this._dcsHandlers[e]&&delete this._dcsHandlers[e]},i.prototype.setDcsHandlerFallback=function(e){this._dcsHandlerFb=e},i.prototype.setErrorHandler=function(e){this._errorHandler=e},i.prototype.clearErrorHandler=function(){this._errorHandler=this._errorHandlerFb},i.prototype.reset=function(){this.currentState=this.initialState,this._osc="",this._params=[0],this._collect="",this._activeDcsHandler=null},i.prototype.parse=function(e){for(var t=0,i=0,r=!1,n=this.currentState,s=-1,o=-1,a=this._osc,l=this._collect,h=this._params,c=this.TRANSITIONS.table,u=this._activeDcsHandler,_=null,f=e.length,d=0;d<f;++d)if(t=e.charCodeAt(d),0===n&&t>31&&t<128){s=~s?s:d;do{d++}while(d<f&&e.charCodeAt(d)>31&&e.charCodeAt(d)<128);d--}else if(4===n&&t>47&&t<57)h[h.length-1]=10*h[h.length-1]+t-48;else{switch((i=t<160?c[n<<8|t]:16)>>4){case 2:s=~s?s:d;break;case 3:~s&&(this._printHandler(e,s,d),s=-1),(_=this._executeHandlers[t])?_():this._executeHandlerFb(t);break;case 0:~s?(this._printHandler(e,s,d),s=-1):~o&&(u.put(e,o,d),o=-1);break;case 1:if(t>159)switch(n){case 0:s=~s?s:d;break;case 8:a+=String.fromCharCode(t),i|=8;break;case 6:i|=6;break;case 11:i|=11;break;case 13:o=~o?o:d,i|=13;break;default:r=!0}else r=!0;if(r){if(this._errorHandler({position:d,code:t,currentState:n,print:s,dcs:o,osc:a,collect:l,params:h,abort:!1}).abort)return;r=!1}break;case 7:(_=this._csiHandlers[t])?_(h,l):this._csiHandlerFb(l,h,t);break;case 8:59===t?h.push(0):h[h.length-1]=10*h[h.length-1]+t-48;break;case 9:l+=String.fromCharCode(t);break;case 10:(_=this._escHandlers[l+String.fromCharCode(t)])?_(l,t):this._escHandlerFb(l,t);break;case 11:~s&&(this._printHandler(e,s,d),s=-1),a="",h=[0],l="",o=-1;break;case 12:(u=this._dcsHandlers[l+String.fromCharCode(t)])||(u=this._dcsHandlerFb),u.hook(l,h,t);break;case 13:o=~o?o:d;break;case 14:u&&(~o&&u.put(e,o,d),u.unhook(),u=null),27===t&&(i|=1),a="",h=[0],l="",o=-1;break;case 4:~s&&(this._printHandler(e,s,d),s=-1),a="";break;case 5:a+=e.charAt(d);break;case 6:if(a&&24!==t&&26!==t){var p=a.indexOf(";");if(-1===p)this._oscHandlerFb(-1,a);else{var m=parseInt(a.substring(0,p)),y=a.substring(p+1);(_=this._oscHandlers[m])?_(y):this._oscHandlerFb(m,y)}}27===t&&(i|=1),a="",h=[0],l="",o=-1}n=15&i}0===n&&~s?this._printHandler(e,s,e.length):13===n&&~o&&u&&u.put(e,o,e.length),this._osc=a,this._collect=l,this._params=h,this._activeDcsHandler=u,this.currentState=n},i}(s.Disposable);t.EscapeSequenceParser=u},function(e,t,i){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(e,t)},function(e,t){function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)});Object.defineProperty(t,"__esModule",{value:!0});var s=i(34),o=i(40),a=i(41),l=i(9),h=i(42),c=i(2),u=i(11),_=i(17),f=i(43),d=function(e){function t(t,i){var r=e.call(this)||this;r._terminal=t,r._isPaused=!1,r._needsFullRefresh=!1;var n=r._terminal.options.allowTransparency;if(r.colorManager=new l.ColorManager(document,n),r._characterJoinerRegistry=new f.CharacterJoinerRegistry(t),i&&r.colorManager.setTheme(i),r._renderLayers=[new s.TextRenderLayer(r._terminal.screenElement,0,r.colorManager.colors,r._characterJoinerRegistry,n),new o.SelectionRenderLayer(r._terminal.screenElement,1,r.colorManager.colors),new h.LinkRenderLayer(r._terminal.screenElement,2,r.colorManager.colors,r._terminal),new a.CursorRenderLayer(r._terminal.screenElement,3,r.colorManager.colors)],r.dimensions={scaledCharWidth:null,scaledCharHeight:null,scaledCellWidth:null,scaledCellHeight:null,scaledCharLeft:null,scaledCharTop:null,scaledCanvasWidth:null,scaledCanvasHeight:null,canvasWidth:null,canvasHeight:null,actualCellWidth:null,actualCellHeight:null},r._devicePixelRatio=window.devicePixelRatio,r._updateDimensions(),r.onOptionsChanged(),r._renderDebouncer=new u.RenderDebouncer(r._terminal,r._renderRows.bind(r)),r._screenDprMonitor=new _.ScreenDprMonitor,r._screenDprMonitor.setListener(function(){return r.onWindowResize(window.devicePixelRatio)}),r.register(r._screenDprMonitor),"IntersectionObserver"in window){var c=new IntersectionObserver(function(e){return r.onIntersectionChange(e[0])},{threshold:0});c.observe(r._terminal.element),r.register({dispose:function(){return c.disconnect()}})}return r}return n(t,e),t.prototype.dispose=function(){e.prototype.dispose.call(this),this._renderLayers.forEach(function(e){return e.dispose()})},t.prototype.onIntersectionChange=function(e){this._isPaused=0===e.intersectionRatio,!this._isPaused&&this._needsFullRefresh&&this._terminal.refresh(0,this._terminal.rows-1)},t.prototype.onWindowResize=function(e){this._devicePixelRatio!==e&&(this._devicePixelRatio=e,this.onResize(this._terminal.cols,this._terminal.rows))},t.prototype.setTheme=function(e){var t=this;return this.colorManager.setTheme(e),this._renderLayers.forEach(function(e){e.onThemeChanged(t._terminal,t.colorManager.colors),e.reset(t._terminal)}),this._isPaused?this._needsFullRefresh=!0:this._terminal.refresh(0,this._terminal.rows-1),this.colorManager.colors},t.prototype.onResize=function(e,t){var i=this;this._updateDimensions(),this._renderLayers.forEach(function(e){return e.resize(i._terminal,i.dimensions)}),this._isPaused?this._needsFullRefresh=!0:this._terminal.refresh(0,this._terminal.rows-1),this._terminal.screenElement.style.width=this.dimensions.canvasWidth+"px",this._terminal.screenElement.style.height=this.dimensions.canvasHeight+"px",this.emit("resize",{width:this.dimensions.canvasWidth,height:this.dimensions.canvasHeight})},t.prototype.onCharSizeChanged=function(){this.onResize(this._terminal.cols,this._terminal.rows)},t.prototype.onBlur=function(){var e=this;this._runOperation(function(t){return t.onBlur(e._terminal)})},t.prototype.onFocus=function(){var e=this;this._runOperation(function(t){return t.onFocus(e._terminal)})},t.prototype.onSelectionChanged=function(e,t,i){var r=this;void 0===i&&(i=!1),this._runOperation(function(n){return n.onSelectionChanged(r._terminal,e,t,i)})},t.prototype.onCursorMove=function(){var e=this;this._runOperation(function(t){return t.onCursorMove(e._terminal)})},t.prototype.onOptionsChanged=function(){var e=this;this.colorManager.allowTransparency=this._terminal.options.allowTransparency,this._runOperation(function(t){return t.onOptionsChanged(e._terminal)})},t.prototype.clear=function(){var e=this;this._runOperation(function(t){return t.reset(e._terminal)})},t.prototype._runOperation=function(e){this._isPaused?this._needsFullRefresh=!0:this._renderLayers.forEach(function(t){return e(t)})},t.prototype.refreshRows=function(e,t){this._isPaused?this._needsFullRefresh=!0:this._renderDebouncer.refresh(e,t)},t.prototype._renderRows=function(e,t){var i=this;this._renderLayers.forEach(function(r){return r.onGridChanged(i._terminal,e,t)}),this._terminal.emit("refresh",{start:e,end:t})},t.prototype._updateDimensions=function(){this._terminal.charMeasure.width&&this._terminal.charMeasure.height&&(this.dimensions.scaledCharWidth=Math.floor(this._terminal.charMeasure.width*window.devicePixelRatio),this.dimensions.scaledCharHeight=Math.ceil(this._terminal.charMeasure.height*window.devicePixelRatio),this.dimensions.scaledCellHeight=Math.floor(this.dimensions.scaledCharHeight*this._terminal.options.lineHeight),this.dimensions.scaledCharTop=1===this._terminal.options.lineHeight?0:Math.round((this.dimensions.scaledCellHeight-this.dimensions.scaledCharHeight)/2),this.dimensions.scaledCellWidth=this.dimensions.scaledCharWidth+Math.round(this._terminal.options.letterSpacing),this.dimensions.scaledCharLeft=Math.floor(this._terminal.options.letterSpacing/2),this.dimensions.scaledCanvasHeight=this._terminal.rows*this.dimensions.scaledCellHeight,this.dimensions.scaledCanvasWidth=this._terminal.cols*this.dimensions.scaledCellWidth,this.dimensions.canvasHeight=Math.round(this.dimensions.scaledCanvasHeight/window.devicePixelRatio),this.dimensions.canvasWidth=Math.round(this.dimensions.scaledCanvasWidth/window.devicePixelRatio),this.dimensions.actualCellHeight=this.dimensions.canvasHeight/this._terminal.rows,this.dimensions.actualCellWidth=this.dimensions.canvasWidth/this._terminal.cols)},t.prototype.registerCharacterJoiner=function(e){return this._characterJoinerRegistry.registerCharacterJoiner(e)},t.prototype.deregisterCharacterJoiner=function(e){return this._characterJoinerRegistry.deregisterCharacterJoiner(e)},t}(c.EventEmitter);t.Renderer=d},function(e,t,i){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(e,t)},function(e,t){function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)});Object.defineProperty(t,"__esModule",{value:!0});var s=i(0),o=i(1),a=i(35),l=i(8),h=i(4),c=function(e){function t(t,i,r,n,s){var o=e.call(this,t,"text",i,s,r)||this;return o._characterOverlapCache={},o._state=new a.GridCache,o._characterJoinerRegistry=n,o}return n(t,e),t.prototype.resize=function(t,i){e.prototype.resize.call(this,t,i);var r=this._getFont(t,!1,!1);this._characterWidth===i.scaledCharWidth&&this._characterFont===r||(this._characterWidth=i.scaledCharWidth,this._characterFont=r,this._characterOverlapCache={}),this._state.clear(),this._state.resize(t.cols,t.rows)},t.prototype.reset=function(e){this._state.clear(),this.clearAll()},t.prototype._forEachCell=function(e,t,i,r,n){for(var a=t;a<=i;a++)for(var l=a+e.buffer.ydisp,h=e.buffer.lines.get(l),c=r?r.getJoinedCharacters(l):[],u=0;u<e.cols;u++){var _=h.get(u),f=_[s.CHAR_DATA_CODE_INDEX],d=_[s.CHAR_DATA_CHAR_INDEX],p=_[s.CHAR_DATA_ATTR_INDEX],m=_[s.CHAR_DATA_WIDTH_INDEX],y=!1,C=u;if(0!==m){if(c.length>0&&u===c[0][0]){y=!0;var g=c.shift();d=e.buffer.translateBufferLineToString(l,!0,g[0],g[1]),m=g[1]-g[0],f=1/0,C=g[1]-1}!y&&this._isOverlapping(_)&&C<h.length-1&&h.get(C+1)[s.CHAR_DATA_CODE_INDEX]===s.NULL_CELL_CODE&&(m=2);var v=p>>18,b=511&p,w=p>>9&511;if(8&v){var L=b;b=w,(w=L)===o.DEFAULT_COLOR&&(w=o.INVERTED_DEFAULT_COLOR),b===o.DEFAULT_COLOR&&(b=o.INVERTED_DEFAULT_COLOR)}n(f,d,m,u,a,w,b,v),u=C}}},t.prototype._drawBackground=function(e,t,i){var r=this,n=this._ctx,s=e.cols,a=0,l=0,c=null;n.save(),this._forEachCell(e,t,i,null,function(e,t,i,u,_,f,d,p){var m=null;d===o.INVERTED_DEFAULT_COLOR?m=r._colors.foreground.css:h.is256Color(d)&&(m=r._colors.ansi[d].css),null===c&&(a=u,l=_),_!==l?(n.fillStyle=c,r.fillCells(a,l,s-a,1),a=u,l=_):c!==m&&(n.fillStyle=c,r.fillCells(a,l,u-a,1),a=u,l=_),c=m}),null!==c&&(n.fillStyle=c,this.fillCells(a,l,s-a,1)),n.restore()},t.prototype._drawForeground=function(e,t,i){var r=this;this._forEachCell(e,t,i,this._characterJoinerRegistry,function(t,i,n,s,a,l,c,u){16&u||(2&u&&(r._ctx.save(),l===o.INVERTED_DEFAULT_COLOR?r._ctx.fillStyle=r._colors.background.css:h.is256Color(l)?r._ctx.fillStyle=r._colors.ansi[l].css:r._ctx.fillStyle=r._colors.foreground.css,r.fillBottomLineAtCells(s,a,n),r._ctx.restore()),r.drawChars(e,i,t,n,s,a,l,c,!!(1&u),!!(32&u),!!(64&u)))})},t.prototype.onGridChanged=function(e,t,i){0!==this._state.cache.length&&(this._charAtlas&&this._charAtlas.beginFrame(),this.clearCells(0,t,e.cols,i-t+1),this._drawBackground(e,t,i),this._drawForeground(e,t,i))},t.prototype.onOptionsChanged=function(e){this.setTransparency(e,e.options.allowTransparency)},t.prototype._isOverlapping=function(e){if(1!==e[s.CHAR_DATA_WIDTH_INDEX])return!1;if(e[s.CHAR_DATA_CODE_INDEX]<256)return!1;var t=e[s.CHAR_DATA_CHAR_INDEX];if(this._characterOverlapCache.hasOwnProperty(t))return this._characterOverlapCache[t];this._ctx.save(),this._ctx.font=this._characterFont;var i=Math.floor(this._ctx.measureText(t).width)>this._characterWidth;return this._ctx.restore(),this._characterOverlapCache[t]=i,i},t}(l.BaseRenderLayer);t.TextRenderLayer=c},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){this.cache=[]}return e.prototype.resize=function(e,t){for(var i=0;i<e;i++){this.cache.length<=i&&this.cache.push([]);for(var r=this.cache[i].length;r<t;r++)this.cache[i].push(null);this.cache[i].length=t}this.cache.length=e},e.prototype.clear=function(){for(var e=0;e<this.cache.length;e++)for(var t=0;t<this.cache[e].length;t++)this.cache[e][t]=null},e}();t.GridCache=r},function(e,t,i){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(e,t)},function(e,t){function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)});Object.defineProperty(t,"__esModule",{value:!0});var s=i(1),o=i(10),a=i(9),l=i(16),h=i(37),c=i(5),u=1024,_=1024,f={css:"rgba(0, 0, 0, 0)",rgba:0};function d(e){return e.code<<21|e.bg<<12|e.fg<<3|(e.bold?0:4)+(e.dim?0:2)+(e.italic?0:1)}t.getGlyphCacheKey=d;var p=function(e){function t(t,i){var r=e.call(this)||this;r._config=i,r._drawToCacheCount=0,r._glyphsWaitingOnBitmap=[],r._bitmapCommitTimeout=null,r._bitmap=null,r._cacheCanvas=t.createElement("canvas"),r._cacheCanvas.width=u,r._cacheCanvas.height=_,r._cacheCtx=r._cacheCanvas.getContext("2d",{alpha:!0});var n=t.createElement("canvas");n.width=r._config.scaledCharWidth,n.height=r._config.scaledCharHeight,r._tmpCtx=n.getContext("2d",{alpha:r._config.allowTransparency}),r._width=Math.floor(u/r._config.scaledCharWidth),r._height=Math.floor(_/r._config.scaledCharHeight);var s=r._width*r._height;return r._cacheMap=new h.default(s),r._cacheMap.prealloc(s),r}return n(t,e),t.prototype.dispose=function(){null!==this._bitmapCommitTimeout&&(window.clearTimeout(this._bitmapCommitTimeout),this._bitmapCommitTimeout=null)},t.prototype.beginFrame=function(){this._drawToCacheCount=0},t.prototype.draw=function(e,t,i,r){if(32===t.code)return!0;if(!this._canCache(t))return!1;var n=d(t),s=this._cacheMap.get(n);if(null!=s)return this._drawFromCache(e,s,i,r),!0;if(this._drawToCacheCount<100){var o=void 0;o=this._cacheMap.size<this._cacheMap.capacity?this._cacheMap.size:this._cacheMap.peek().index;var a=this._drawToCache(t,o);return this._cacheMap.set(n,a),this._drawFromCache(e,a,i,r),!0}return!1},t.prototype._canCache=function(e){return e.code<256},t.prototype._toCoordinateX=function(e){return e%this._width*this._config.scaledCharWidth},t.prototype._toCoordinateY=function(e){return Math.floor(e/this._width)*this._config.scaledCharHeight},t.prototype._drawFromCache=function(e,t,i,r){if(!t.isEmpty){var n=this._toCoordinateX(t.index),s=this._toCoordinateY(t.index);e.drawImage(t.inBitmap?this._bitmap:this._cacheCanvas,n,s,this._config.scaledCharWidth,this._config.scaledCharHeight,i,r,this._config.scaledCharWidth,this._config.scaledCharHeight)}},t.prototype._getColorFromAnsiIndex=function(e){return e<this._config.colors.ansi.length?this._config.colors.ansi[e]:a.DEFAULT_ANSI_COLORS[e]},t.prototype._getBackgroundColor=function(e){return this._config.allowTransparency?f:e.bg===s.INVERTED_DEFAULT_COLOR?this._config.colors.foreground:e.bg<256?this._getColorFromAnsiIndex(e.bg):this._config.colors.background},t.prototype._getForegroundColor=function(e){return e.fg===s.INVERTED_DEFAULT_COLOR?this._config.colors.background:e.fg<256?this._getColorFromAnsiIndex(e.fg):this._config.colors.foreground},t.prototype._drawToCache=function(e,t){this._drawToCacheCount++,this._tmpCtx.save();var i=this._getBackgroundColor(e);this._tmpCtx.globalCompositeOperation="copy",this._tmpCtx.fillStyle=i.css,this._tmpCtx.fillRect(0,0,this._config.scaledCharWidth,this._config.scaledCharHeight),this._tmpCtx.globalCompositeOperation="source-over";var r=e.bold?this._config.fontWeightBold:this._config.fontWeight,n=e.italic?"italic":"";this._tmpCtx.font=n+" "+r+" "+this._config.fontSize*this._config.devicePixelRatio+"px "+this._config.fontFamily,this._tmpCtx.textBaseline="top",this._tmpCtx.fillStyle=this._getForegroundColor(e).css,e.dim&&(this._tmpCtx.globalAlpha=s.DIM_OPACITY),this._tmpCtx.fillText(e.chars,0,0),this._tmpCtx.restore();var o=this._tmpCtx.getImageData(0,0,this._config.scaledCharWidth,this._config.scaledCharHeight),a=!1;this._config.allowTransparency||(a=l.clearColor(o,i));var h=this._toCoordinateX(t),c=this._toCoordinateY(t);this._cacheCtx.putImageData(o,h,c);var u={index:t,isEmpty:a,inBitmap:!1};return this._addGlyphToBitmap(u),u},t.prototype._addGlyphToBitmap=function(e){var t=this;"createImageBitmap"in window&&!c.isFirefox&&!c.isSafari&&(this._glyphsWaitingOnBitmap.push(e),null===this._bitmapCommitTimeout&&(this._bitmapCommitTimeout=window.setTimeout(function(){return t._generateBitmap()},100)))},t.prototype._generateBitmap=function(){var e=this,t=this._glyphsWaitingOnBitmap;this._glyphsWaitingOnBitmap=[],window.createImageBitmap(this._cacheCanvas).then(function(i){e._bitmap=i;for(var r=0;r<t.length;r++){t[r].inBitmap=!0}}),this._bitmapCommitTimeout=null},t}(o.default);t.default=p},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){this.capacity=e,this._map={},this._head=null,this._tail=null,this._nodePool=[],this.size=0}return e.prototype._unlinkNode=function(e){var t=e.prev,i=e.next;e===this._head&&(this._head=i),e===this._tail&&(this._tail=t),null!==t&&(t.next=i),null!==i&&(i.prev=t)},e.prototype._appendNode=function(e){var t=this._tail;null!==t&&(t.next=e),e.prev=t,e.next=null,this._tail=e,null===this._head&&(this._head=e)},e.prototype.prealloc=function(e){for(var t=this._nodePool,i=0;i<e;i++)t.push({prev:null,next:null,key:null,value:null})},e.prototype.get=function(e){var t=this._map[e];return void 0!==t?(this._unlinkNode(t),this._appendNode(t),t.value):null},e.prototype.peekValue=function(e){var t=this._map[e];return void 0!==t?t.value:null},e.prototype.peek=function(){var e=this._head;return null===e?null:e.value},e.prototype.set=function(e,t){var i=this._map[e];if(void 0!==i)i=this._map[e],this._unlinkNode(i),i.value=t;else if(this.size>=this.capacity)i=this._head,this._unlinkNode(i),delete this._map[i.key],i.key=e,i.value=t,this._map[e]=i;else{var r=this._nodePool;r.length>0?((i=r.pop()).key=e,i.value=t):i={prev:null,next:null,key:e,value:t},this._map[e]=i,this.size++}this._appendNode(i)},e}();t.default=r},function(e,t,i){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(e,t)},function(e,t){function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)});Object.defineProperty(t,"__esModule",{value:!0});var s=function(e){function t(t,i){return e.call(this)||this}return n(t,e),t.prototype.draw=function(e,t,i,r){return!1},t}(i(10).default);t.default=s},function(e,t,i){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(e,t)},function(e,t){function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)});Object.defineProperty(t,"__esModule",{value:!0});var s=i(1),o=i(16),a=i(10),l=i(4),h=function(e){function t(t,i){var r=e.call(this)||this;return r._document=t,r._config=i,r._canvasFactory=function(e,t){var i=r._document.createElement("canvas");return i.width=e,i.height=t,i},r}return n(t,e),t.prototype._doWarmUp=function(){var e=this,t=o.generateStaticCharAtlasTexture(window,this._canvasFactory,this._config);t instanceof HTMLCanvasElement?this._texture=t:t.then(function(t){e._texture=t})},t.prototype._isCached=function(e,t){var i=e.code<256,r=e.fg<16,n=e.fg===s.DEFAULT_COLOR,o=e.bg===s.DEFAULT_COLOR;return i&&(r||n)&&o&&!e.italic},t.prototype.draw=function(e,t,i,r){if(null===this._texture||void 0===this._texture)return!1;var n=0;if(l.is256Color(t.fg)?n=2+t.fg+(t.bold?16:0):t.fg===s.DEFAULT_COLOR&&t.bold&&(n=1),!this._isCached(t,n))return!1;e.save();var o=this._config.scaledCharWidth+s.CHAR_ATLAS_CELL_SPACING,a=this._config.scaledCharHeight+s.CHAR_ATLAS_CELL_SPACING;return t.dim&&(e.globalAlpha=s.DIM_OPACITY),e.drawImage(this._texture,t.code*o,n*a,o,this._config.scaledCharHeight,i,r,o,this._config.scaledCharHeight),e.restore(),!0},t}(a.default);t.default=h},function(e,t,i){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(e,t)},function(e,t){function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)});Object.defineProperty(t,"__esModule",{value:!0});var s=function(e){function t(t,i,r){var n=e.call(this,t,"selection",i,!0,r)||this;return n._clearState(),n}return n(t,e),t.prototype._clearState=function(){this._state={start:null,end:null,columnSelectMode:null,ydisp:null}},t.prototype.resize=function(t,i){e.prototype.resize.call(this,t,i),this._clearState()},t.prototype.reset=function(e){this._state.start&&this._state.end&&(this._clearState(),this.clearAll())},t.prototype.onSelectionChanged=function(e,t,i,r){if(this._didStateChange(t,i,r,e.buffer.ydisp)&&(this.clearAll(),t&&i)){var n=t[1]-e.buffer.ydisp,s=i[1]-e.buffer.ydisp,o=Math.max(n,0),a=Math.min(s,e.rows-1);if(!(o>=e.rows||a<0)){if(this._ctx.fillStyle=this._colors.selection.css,r){var l=t[0],h=i[0]-l,c=a-o+1;this.fillCells(l,o,h,c)}else{l=n===o?t[0]:0;var u=o===a?i[0]:e.cols;this.fillCells(l,o,u-l,1);var _=Math.max(a-o-1,0);if(this.fillCells(0,o+1,e.cols,_),o!==a){var f=s===a?i[0]:e.cols;this.fillCells(0,a,f,1)}}this._state.start=[t[0],t[1]],this._state.end=[i[0],i[1]],this._state.columnSelectMode=r,this._state.ydisp=e.buffer.ydisp}}},t.prototype._didStateChange=function(e,t,i,r){return!this._areCoordinatesEqual(e,this._state.start)||!this._areCoordinatesEqual(t,this._state.end)||i!==this._state.columnSelectMode||r!==this._state.ydisp},t.prototype._areCoordinatesEqual=function(e,t){return!(!e||!t)&&(e[0]===t[0]&&e[1]===t[1])},t}(i(8).BaseRenderLayer);t.SelectionRenderLayer=s},function(e,t,i){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(e,t)},function(e,t){function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)});Object.defineProperty(t,"__esModule",{value:!0});var s=i(0),o=i(8),a=function(e){function t(t,i,r){var n=e.call(this,t,"cursor",i,!0,r)||this;return n._state={x:null,y:null,isFocused:null,style:null,width:null},n._cursorRenderers={bar:n._renderBarCursor.bind(n),block:n._renderBlockCursor.bind(n),underline:n._renderUnderlineCursor.bind(n)},n}return n(t,e),t.prototype.resize=function(t,i){e.prototype.resize.call(this,t,i),this._state={x:null,y:null,isFocused:null,style:null,width:null}},t.prototype.reset=function(e){this._clearCursor(),this._cursorBlinkStateManager&&(this._cursorBlinkStateManager.dispose(),this._cursorBlinkStateManager=null,this.onOptionsChanged(e))},t.prototype.onBlur=function(e){this._cursorBlinkStateManager&&this._cursorBlinkStateManager.pause(),e.refresh(e.buffer.y,e.buffer.y)},t.prototype.onFocus=function(e){this._cursorBlinkStateManager?this._cursorBlinkStateManager.resume(e):e.refresh(e.buffer.y,e.buffer.y)},t.prototype.onOptionsChanged=function(e){var t=this;e.options.cursorBlink?this._cursorBlinkStateManager||(this._cursorBlinkStateManager=new l(e,function(){t._render(e,!0)})):(this._cursorBlinkStateManager&&(this._cursorBlinkStateManager.dispose(),this._cursorBlinkStateManager=null),e.refresh(e.buffer.y,e.buffer.y))},t.prototype.onCursorMove=function(e){this._cursorBlinkStateManager&&this._cursorBlinkStateManager.restartBlinkAnimation(e)},t.prototype.onGridChanged=function(e,t,i){!this._cursorBlinkStateManager||this._cursorBlinkStateManager.isPaused?this._render(e,!1):this._cursorBlinkStateManager.restartBlinkAnimation(e)},t.prototype._render=function(e,t){if(e.cursorState&&!e.cursorHidden){var i=e.buffer.ybase+e.buffer.y,r=i-e.buffer.ydisp;if(r<0||r>=e.rows)this._clearCursor();else{var n=e.buffer.lines.get(i).get(e.buffer.x);if(n){if(!e.isFocused)return this._clearCursor(),this._ctx.save(),this._ctx.fillStyle=this._colors.cursor.css,this._renderBlurCursor(e,e.buffer.x,r,n),this._ctx.restore(),this._state.x=e.buffer.x,this._state.y=r,this._state.isFocused=!1,this._state.style=e.options.cursorStyle,void(this._state.width=n[s.CHAR_DATA_WIDTH_INDEX]);if(!this._cursorBlinkStateManager||this._cursorBlinkStateManager.isCursorVisible){if(this._state){if(this._state.x===e.buffer.x&&this._state.y===r&&this._state.isFocused===e.isFocused&&this._state.style===e.options.cursorStyle&&this._state.width===n[s.CHAR_DATA_WIDTH_INDEX])return;this._clearCursor()}this._ctx.save(),this._cursorRenderers[e.options.cursorStyle||"block"](e,e.buffer.x,r,n),this._ctx.restore(),this._state.x=e.buffer.x,this._state.y=r,this._state.isFocused=!1,this._state.style=e.options.cursorStyle,this._state.width=n[s.CHAR_DATA_WIDTH_INDEX]}else this._clearCursor()}}}else this._clearCursor()},t.prototype._clearCursor=function(){this._state&&(this.clearCells(this._state.x,this._state.y,this._state.width,1),this._state={x:null,y:null,isFocused:null,style:null,width:null})},t.prototype._renderBarCursor=function(e,t,i,r){this._ctx.save(),this._ctx.fillStyle=this._colors.cursor.css,this.fillLeftLineAtCell(t,i),this._ctx.restore()},t.prototype._renderBlockCursor=function(e,t,i,r){this._ctx.save(),this._ctx.fillStyle=this._colors.cursor.css,this.fillCells(t,i,r[s.CHAR_DATA_WIDTH_INDEX],1),this._ctx.fillStyle=this._colors.cursorAccent.css,this.fillCharTrueColor(e,r,t,i),this._ctx.restore()},t.prototype._renderUnderlineCursor=function(e,t,i,r){this._ctx.save(),this._ctx.fillStyle=this._colors.cursor.css,this.fillBottomLineAtCells(t,i),this._ctx.restore()},t.prototype._renderBlurCursor=function(e,t,i,r){this._ctx.save(),this._ctx.strokeStyle=this._colors.cursor.css,this.strokeRectAtCell(t,i,r[s.CHAR_DATA_WIDTH_INDEX],1),this._ctx.restore()},t}(o.BaseRenderLayer);t.CursorRenderLayer=a;var l=function(){function e(e,t){this._renderCallback=t,this.isCursorVisible=!0,e.isFocused&&this._restartInterval()}return Object.defineProperty(e.prototype,"isPaused",{get:function(){return!(this._blinkStartTimeout||this._blinkInterval)},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){this._blinkInterval&&(window.clearInterval(this._blinkInterval),this._blinkInterval=null),this._blinkStartTimeout&&(window.clearTimeout(this._blinkStartTimeout),this._blinkStartTimeout=null),this._animationFrame&&(window.cancelAnimationFrame(this._animationFrame),this._animationFrame=null)},e.prototype.restartBlinkAnimation=function(e){var t=this;this.isPaused||(this._animationTimeRestarted=Date.now(),this.isCursorVisible=!0,this._animationFrame||(this._animationFrame=window.requestAnimationFrame(function(){t._renderCallback(),t._animationFrame=null})))},e.prototype._restartInterval=function(e){var t=this;void 0===e&&(e=600),this._blinkInterval&&window.clearInterval(this._blinkInterval),this._blinkStartTimeout=setTimeout(function(){if(t._animationTimeRestarted){var e=600-(Date.now()-t._animationTimeRestarted);if(t._animationTimeRestarted=null,e>0)return void t._restartInterval(e)}t.isCursorVisible=!1,t._animationFrame=window.requestAnimationFrame(function(){t._renderCallback(),t._animationFrame=null}),t._blinkInterval=setInterval(function(){if(t._animationTimeRestarted){var e=600-(Date.now()-t._animationTimeRestarted);return t._animationTimeRestarted=null,void t._restartInterval(e)}t.isCursorVisible=!t.isCursorVisible,t._animationFrame=window.requestAnimationFrame(function(){t._renderCallback(),t._animationFrame=null})},600)},e)},e.prototype.pause=function(){this.isCursorVisible=!0,this._blinkInterval&&(window.clearInterval(this._blinkInterval),this._blinkInterval=null),this._blinkStartTimeout&&(window.clearTimeout(this._blinkStartTimeout),this._blinkStartTimeout=null),this._animationFrame&&(window.cancelAnimationFrame(this._animationFrame),this._animationFrame=null)},e.prototype.resume=function(e){this._animationTimeRestarted=null,this._restartInterval(),this.restartBlinkAnimation(e)},e}()},function(e,t,i){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(e,t)},function(e,t){function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)});Object.defineProperty(t,"__esModule",{value:!0});var s=i(8),o=i(1),a=i(4),l=function(e){function t(t,i,r,n){var s=e.call(this,t,"link",i,!0,r)||this;return s._state=null,n.linkifier.on("linkhover",function(e){return s._onLinkHover(e)}),n.linkifier.on("linkleave",function(e){return s._onLinkLeave(e)}),s}return n(t,e),t.prototype.resize=function(t,i){e.prototype.resize.call(this,t,i),this._state=null},t.prototype.reset=function(e){this._clearCurrentLink()},t.prototype._clearCurrentLink=function(){if(this._state){this.clearCells(this._state.x1,this._state.y1,this._state.cols-this._state.x1,1);var e=this._state.y2-this._state.y1-1;e>0&&this.clearCells(0,this._state.y1+1,this._state.cols,e),this.clearCells(0,this._state.y2,this._state.x2,1),this._state=null}},t.prototype._onLinkHover=function(e){if(e.fg===o.INVERTED_DEFAULT_COLOR?this._ctx.fillStyle=this._colors.background.css:a.is256Color(e.fg)?this._ctx.fillStyle=this._colors.ansi[e.fg].css:this._ctx.fillStyle=this._colors.foreground.css,e.y1===e.y2)this.fillBottomLineAtCells(e.x1,e.y1,e.x2-e.x1);else{this.fillBottomLineAtCells(e.x1,e.y1,e.cols-e.x1);for(var t=e.y1+1;t<e.y2;t++)this.fillBottomLineAtCells(0,t,e.cols);this.fillBottomLineAtCells(0,e.y2,e.x2)}this._state=e},t.prototype._onLinkLeave=function(e){this._clearCurrentLink()},t}(s.BaseRenderLayer);t.LinkRenderLayer=l},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(0),n=function(){function e(e){this._terminal=e,this._characterJoiners=[],this._nextCharacterJoinerId=0}return e.prototype.registerCharacterJoiner=function(e){var t={id:this._nextCharacterJoinerId++,handler:e};return this._characterJoiners.push(t),t.id},e.prototype.deregisterCharacterJoiner=function(e){for(var t=0;t<this._characterJoiners.length;t++)if(this._characterJoiners[t].id===e)return this._characterJoiners.splice(t,1),!0;return!1},e.prototype.getJoinedCharacters=function(e){if(0===this._characterJoiners.length)return[];var t=this._terminal.buffer.lines.get(e);if(0===t.length)return[];for(var i=[],n=this._terminal.buffer.translateBufferLineToString(e,!0),s=0,o=0,a=0,l=t.get(0)[r.CHAR_DATA_ATTR_INDEX]>>9,h=0;h<this._terminal.cols;h++){var c=t.get(h),u=c[r.CHAR_DATA_CHAR_INDEX],_=c[r.CHAR_DATA_WIDTH_INDEX],f=c[r.CHAR_DATA_ATTR_INDEX]>>9;if(0!==_){if(f!==l){if(h-s>1)for(var d=this._getJoinedRanges(n,a,o,t,s),p=0;p<d.length;p++)i.push(d[p]);s=h,a=o,l=f}o+=u.length}}if(this._terminal.cols-s>1)for(d=this._getJoinedRanges(n,a,o,t,s),p=0;p<d.length;p++)i.push(d[p]);return i},e.prototype._getJoinedRanges=function(t,i,r,n,s){for(var o=t.substring(i,r),a=this._characterJoiners[0].handler(o),l=1;l<this._characterJoiners.length;l++)for(var h=this._characterJoiners[l].handler(o),c=0;c<h.length;c++)e._mergeRanges(a,h[c]);return this._stringRangesToCellRanges(a,n,s),a},e.prototype._stringRangesToCellRanges=function(e,t,i){var n=0,s=!1,o=0,a=e[n];if(a){for(var l=i;l<this._terminal.cols;l++){var h=t.get(l),c=h[r.CHAR_DATA_WIDTH_INDEX],u=h[r.CHAR_DATA_CHAR_INDEX].length;if(0!==c){if(!s&&a[0]<=o&&(a[0]=l,s=!0),a[1]<=o){if(a[1]=l,!(a=e[++n]))break;a[0]<=o?(a[0]=l,s=!0):s=!1}o+=u}}a&&(a[1]=this._terminal.cols)}},e._mergeRanges=function(e,t){for(var i=!1,r=0;r<e.length;r++){var n=e[r];if(i){if(t[1]<=n[0])return e[r-1][1]=t[1],e;if(t[1]<=n[1])return e[r-1][1]=Math.max(t[1],n[1]),e.splice(r,1),i=!1,e;e.splice(r,1),r--}else{if(t[1]<=n[0])return e.splice(r,0,t),e;if(t[1]<=n[1])return n[0]=Math.min(t[0],n[0]),e;t[0]<n[1]&&(n[0]=Math.min(t[0],n[0]),i=!0)}}return i?e[e.length-1][1]=t[1]:e.push(t),e},e}();t.CharacterJoinerRegistry=n},function(e,t,i){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(e,t)},function(e,t){function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)});Object.defineProperty(t,"__esModule",{value:!0});var s=i(18),o=i(2),a=i(0),l=i(14),h=function(e){function t(t){var i=e.call(this)||this;return i._terminal=t,i._linkMatchers=[],i._nextLinkMatcherId=0,i._rowsToLinkify={start:null,end:null},i}return n(t,e),t.prototype.attachToDom=function(e){this._mouseZoneManager=e},t.prototype.linkifyRows=function(e,i){var r=this;this._mouseZoneManager&&(null===this._rowsToLinkify.start?(this._rowsToLinkify.start=e,this._rowsToLinkify.end=i):(this._rowsToLinkify.start=Math.min(this._rowsToLinkify.start,e),this._rowsToLinkify.end=Math.max(this._rowsToLinkify.end,i)),this._mouseZoneManager.clearAll(e,i),this._rowsTimeoutId&&clearTimeout(this._rowsTimeoutId),this._rowsTimeoutId=setTimeout(function(){return r._linkifyRows()},t.TIME_BEFORE_LINKIFY))},t.prototype._linkifyRows=function(){this._rowsTimeoutId=null;var e=this._terminal.buffer,i=e.ydisp+this._rowsToLinkify.start;if(!(i>=e.lines.length)){for(var r=e.ydisp+Math.min(this._rowsToLinkify.end,this._terminal.rows)+1,n=Math.ceil(t.OVERSCAN_CHAR_LIMIT/this._terminal.cols),s=this._terminal.buffer.iterator(!1,i,r,n,n);s.hasNext();)for(var o=s.next(),a=0;a<this._linkMatchers.length;a++)this._doLinkifyRow(o.range.first,o.content,this._linkMatchers[a]);this._rowsToLinkify.start=null,this._rowsToLinkify.end=null}},t.prototype.registerLinkMatcher=function(e,t,i){if(void 0===i&&(i={}),!t)throw new Error("handler must be defined");var r={id:this._nextLinkMatcherId++,regex:e,handler:t,matchIndex:i.matchIndex,validationCallback:i.validationCallback,hoverTooltipCallback:i.tooltipCallback,hoverLeaveCallback:i.leaveCallback,willLinkActivate:i.willLinkActivate,priority:i.priority||0};return this._addLinkMatcherToList(r),r.id},t.prototype._addLinkMatcherToList=function(e){if(0!==this._linkMatchers.length){for(var t=this._linkMatchers.length-1;t>=0;t--)if(e.priority<=this._linkMatchers[t].priority)return void this._linkMatchers.splice(t+1,0,e);this._linkMatchers.splice(0,0,e)}else this._linkMatchers.push(e)},t.prototype.deregisterLinkMatcher=function(e){for(var t=0;t<this._linkMatchers.length;t++)if(this._linkMatchers[t].id===e)return this._linkMatchers.splice(t,1),!0;return!1},t.prototype._doLinkifyRow=function(e,t,i){for(var r,n=this,s=new RegExp(i.regex.source,i.regex.flags+"g"),o=-1,l=function(){var l=r["number"!=typeof i.matchIndex?0:i.matchIndex];if(!l){if(h._terminal.debug)throw console.log({match:r,matcher:i}),new Error("match found without corresponding matchIndex");return"break"}o=t.indexOf(l,o+1),s.lastIndex=o+l.length;var c,u=h._terminal.buffer.stringIndexToBufferIndex(e,o),_=h._terminal.buffer.lines.get(u[0]).get(u[1]);if(_){var f=_[a.CHAR_DATA_ATTR_INDEX];c=f>>9&511}i.validationCallback?i.validationCallback(l,function(e){n._rowsTimeoutId||e&&n._addLink(u[1],u[0]-n._terminal.buffer.ydisp,l,i,c)}):h._addLink(u[1],u[0]-h._terminal.buffer.ydisp,l,i,c)},h=this;null!==(r=s.exec(t));){if("break"===l())break}},t.prototype._addLink=function(e,t,i,r,n){var o=this,a=l.getStringCellWidth(i),h=e%this._terminal.cols,c=t+Math.floor(e/this._terminal.cols),u=(h+a)%this._terminal.cols,_=c+Math.floor((h+a)/this._terminal.cols);0===u&&(u=this._terminal.cols,_--),this._mouseZoneManager.add(new s.MouseZone(h+1,c+1,u+1,_+1,function(e){if(r.handler)return r.handler(e,i);window.open(i,"_blank")},function(e){o.emit("linkhover",o._createLinkHoverEvent(h,c,u,_,n)),o._terminal.element.classList.add("xterm-cursor-pointer")},function(e){o.emit("linktooltip",o._createLinkHoverEvent(h,c,u,_,n)),r.hoverTooltipCallback&&r.hoverTooltipCallback(e,i)},function(){o.emit("linkleave",o._createLinkHoverEvent(h,c,u,_,n)),o._terminal.element.classList.remove("xterm-cursor-pointer"),r.hoverLeaveCallback&&r.hoverLeaveCallback()},function(e){return!r.willLinkActivate||r.willLinkActivate(e,i)}))},t.prototype._createLinkHoverEvent=function(e,t,i,r,n){return{x1:e,y1:t,x2:i,y2:r,cols:this._terminal.cols,fg:n}},t.TIME_BEFORE_LINKIFY=200,t.OVERSCAN_CHAR_LIMIT=2e3,t}(o.EventEmitter);t.Linkifier=h},function(e,t,i){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(e,t)},function(e,t){function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)});Object.defineProperty(t,"__esModule",{value:!0});var s=i(19),o=i(5),a=i(2),l=i(46),h=i(0),c=i(47),u=String.fromCharCode(160),_=new RegExp(u,"g"),f=function(e){function t(t,i){var r=e.call(this)||this;return r._terminal=t,r._charMeasure=i,r._enabled=!0,r._initListeners(),r.enable(),r._model=new l.SelectionModel(t),r._activeSelectionMode=0,r}return n(t,e),t.prototype.dispose=function(){e.prototype.dispose.call(this),this._removeMouseDownListeners()},Object.defineProperty(t.prototype,"_buffer",{get:function(){return this._terminal.buffers.active},enumerable:!0,configurable:!0}),t.prototype._initListeners=function(){var e=this;this._mouseMoveListener=function(t){return e._onMouseMove(t)},this._mouseUpListener=function(t){return e._onMouseUp(t)},this._trimListener=function(t){return e._onTrim(t)},this.initBuffersListeners()},t.prototype.initBuffersListeners=function(){var e=this;this._terminal.buffer.lines.on("trim",this._trimListener),this._terminal.buffers.on("activate",function(t){return e._onBufferActivate(t)})},t.prototype.disable=function(){this.clearSelection(),this._enabled=!1},t.prototype.enable=function(){this._enabled=!0},Object.defineProperty(t.prototype,"selectionStart",{get:function(){return this._model.finalSelectionStart},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"selectionEnd",{get:function(){return this._model.finalSelectionEnd},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"hasSelection",{get:function(){var e=this._model.finalSelectionStart,t=this._model.finalSelectionEnd;return!(!e||!t)&&(e[0]!==t[0]||e[1]!==t[1])},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"selectionText",{get:function(){var e=this._model.finalSelectionStart,t=this._model.finalSelectionEnd;if(!e||!t)return"";var i=[];if(3===this._activeSelectionMode){if(e[0]===t[0])return"";for(var r=e[1];r<=t[1];r++){var n=this._buffer.translateBufferLineToString(r,!0,e[0],t[0]);i.push(n)}}else{var s=e[1]===t[1]?t[0]:null;i.push(this._buffer.translateBufferLineToString(e[1],!0,e[0],s));for(r=e[1]+1;r<=t[1]-1;r++){var a=this._buffer.lines.get(r);n=this._buffer.translateBufferLineToString(r,!0);a.isWrapped?i[i.length-1]+=n:i.push(n)}if(e[1]!==t[1]){a=this._buffer.lines.get(t[1]),n=this._buffer.translateBufferLineToString(t[1],!0,0,t[0]);a.isWrapped?i[i.length-1]+=n:i.push(n)}}return i.map(function(e){return e.replace(_," ")}).join(o.isMSWindows?"\r\n":"\n")},enumerable:!0,configurable:!0}),t.prototype.clearSelection=function(){this._model.clearSelection(),this._removeMouseDownListeners(),this.refresh()},t.prototype.refresh=function(e){var t=this;(this._refreshAnimationFrame||(this._refreshAnimationFrame=window.requestAnimationFrame(function(){return t._refresh()})),o.isLinux&&e)&&(this.selectionText.length&&this.emit("newselection",this.selectionText))},t.prototype._refresh=function(){this._refreshAnimationFrame=null,this.emit("refresh",{start:this._model.finalSelectionStart,end:this._model.finalSelectionEnd,columnSelectMode:3===this._activeSelectionMode})},t.prototype.isClickInSelection=function(e){var t=this._getMouseBufferCoords(e),i=this._model.finalSelectionStart,r=this._model.finalSelectionEnd;return!(!i||!r)&&this._areCoordsInSelection(t,i,r)},t.prototype._areCoordsInSelection=function(e,t,i){return e[1]>t[1]&&e[1]<i[1]||t[1]===i[1]&&e[1]===t[1]&&e[0]>=t[0]&&e[0]<i[0]||t[1]<i[1]&&e[1]===i[1]&&e[0]<i[0]||t[1]<i[1]&&e[1]===t[1]&&e[0]>=t[0]},t.prototype.selectWordAtCursor=function(e){var t=this._getMouseBufferCoords(e);t&&(this._selectWordAt(t,!1),this._model.selectionEnd=null,this.refresh(!0))},t.prototype.selectAll=function(){this._model.isSelectAllActive=!0,this.refresh(),this._terminal.emit("selection")},t.prototype.selectLines=function(e,t){this._model.clearSelection(),e=Math.max(e,0),t=Math.min(t,this._terminal.buffer.lines.length-1),this._model.selectionStart=[0,e],this._model.selectionEnd=[this._terminal.cols,t],this.refresh(),this._terminal.emit("selection")},t.prototype._onTrim=function(e){this._model.onTrim(e)&&this.refresh()},t.prototype._getMouseBufferCoords=function(e){var t=this._terminal.mouseHelper.getCoords(e,this._terminal.screenElement,this._charMeasure,this._terminal.cols,this._terminal.rows,!0);return t?(t[0]--,t[1]--,t[1]+=this._terminal.buffer.ydisp,t):null},t.prototype._getMouseEventScrollAmount=function(e){var t=s.MouseHelper.getCoordsRelativeToElement(e,this._terminal.screenElement)[1],i=this._terminal.rows*Math.ceil(this._charMeasure.height*this._terminal.options.lineHeight);return t>=0&&t<=i?0:(t>i&&(t-=i),t=Math.min(Math.max(t,-50),50),(t/=50)/Math.abs(t)+Math.round(14*t))},t.prototype.shouldForceSelection=function(e){return o.isMac?e.altKey&&this._terminal.options.macOptionClickForcesSelection:e.shiftKey},t.prototype.onMouseDown=function(e){if(this._mouseDownTimeStamp=e.timeStamp,(2!==e.button||!this.hasSelection)&&0===e.button){if(!this._enabled){if(!this.shouldForceSelection(e))return;e.stopPropagation()}e.preventDefault(),this._dragScrollAmount=0,this._enabled&&e.shiftKey?this._onIncrementalClick(e):1===e.detail?this._onSingleClick(e):2===e.detail?this._onDoubleClick(e):3===e.detail&&this._onTripleClick(e),this._addMouseDownListeners(),this.refresh(!0)}},t.prototype._addMouseDownListeners=function(){var e=this;this._terminal.element.ownerDocument.addEventListener("mousemove",this._mouseMoveListener),this._terminal.element.ownerDocument.addEventListener("mouseup",this._mouseUpListener),this._dragScrollIntervalTimer=setInterval(function(){return e._dragScroll()},50)},t.prototype._removeMouseDownListeners=function(){this._terminal.element.ownerDocument&&(this._terminal.element.ownerDocument.removeEventListener("mousemove",this._mouseMoveListener),this._terminal.element.ownerDocument.removeEventListener("mouseup",this._mouseUpListener)),clearInterval(this._dragScrollIntervalTimer),this._dragScrollIntervalTimer=null},t.prototype._onIncrementalClick=function(e){this._model.selectionStart&&(this._model.selectionEnd=this._getMouseBufferCoords(e))},t.prototype._onSingleClick=function(e){if(this._model.selectionStartLength=0,this._model.isSelectAllActive=!1,this._activeSelectionMode=this.shouldColumnSelect(e)?3:0,this._model.selectionStart=this._getMouseBufferCoords(e),this._model.selectionStart){this._model.selectionEnd=null;var t=this._buffer.lines.get(this._model.selectionStart[1]);if(t)if(!(t.length>=this._model.selectionStart[0]))0===t.get(this._model.selectionStart[0])[h.CHAR_DATA_WIDTH_INDEX]&&this._model.selectionStart[0]++}},t.prototype._onDoubleClick=function(e){var t=this._getMouseBufferCoords(e);t&&(this._activeSelectionMode=1,this._selectWordAt(t,!0))},t.prototype._onTripleClick=function(e){var t=this._getMouseBufferCoords(e);t&&(this._activeSelectionMode=2,this._selectLineAt(t[1]))},t.prototype.shouldColumnSelect=function(e){return e.altKey&&!(o.isMac&&this._terminal.options.macOptionClickForcesSelection)},t.prototype._onMouseMove=function(e){e.stopImmediatePropagation();var t=this._model.selectionEnd?[this._model.selectionEnd[0],this._model.selectionEnd[1]]:null;if(this._model.selectionEnd=this._getMouseBufferCoords(e),this._model.selectionEnd){if(2===this._activeSelectionMode?this._model.selectionEnd[1]<this._model.selectionStart[1]?this._model.selectionEnd[0]=0:this._model.selectionEnd[0]=this._terminal.cols:1===this._activeSelectionMode&&this._selectToWordAt(this._model.selectionEnd),this._dragScrollAmount=this._getMouseEventScrollAmount(e),3!==this._activeSelectionMode&&(this._dragScrollAmount>0?this._model.selectionEnd[0]=this._terminal.cols:this._dragScrollAmount<0&&(this._model.selectionEnd[0]=0)),this._model.selectionEnd[1]<this._buffer.lines.length){var i=this._buffer.lines.get(this._model.selectionEnd[1]).get(this._model.selectionEnd[0]);i&&0===i[h.CHAR_DATA_WIDTH_INDEX]&&this._model.selectionEnd[0]++}t&&t[0]===this._model.selectionEnd[0]&&t[1]===this._model.selectionEnd[1]||this.refresh(!0)}else this.refresh(!0)},t.prototype._dragScroll=function(){this._dragScrollAmount&&(this._terminal.scrollLines(this._dragScrollAmount,!1),this._dragScrollAmount>0?(3!==this._activeSelectionMode&&(this._model.selectionEnd[0]=this._terminal.cols),this._model.selectionEnd[1]=Math.min(this._terminal.buffer.ydisp+this._terminal.rows,this._terminal.buffer.lines.length-1)):(3!==this._activeSelectionMode&&(this._model.selectionEnd[0]=0),this._model.selectionEnd[1]=this._terminal.buffer.ydisp),this.refresh())},t.prototype._onMouseUp=function(e){var t=e.timeStamp-this._mouseDownTimeStamp;this._removeMouseDownListeners(),this.selectionText.length<=1&&t<500?new c.AltClickHandler(e,this._terminal).move():this.hasSelection&&this._terminal.emit("selection")},t.prototype._onBufferActivate=function(e){this.clearSelection(),e.inactiveBuffer.lines.off("trim",this._trimListener),e.activeBuffer.lines.on("trim",this._trimListener)},t.prototype._convertViewportColToCharacterIndex=function(e,t){for(var i=t[0],r=0;t[0]>=r;r++){var n=e.get(r);0===n[h.CHAR_DATA_WIDTH_INDEX]?i--:n[h.CHAR_DATA_CHAR_INDEX].length>1&&t[0]!==r&&(i+=n[h.CHAR_DATA_CHAR_INDEX].length-1)}return i},t.prototype.setSelection=function(e,t,i){this._model.clearSelection(),this._removeMouseDownListeners(),this._model.selectionStart=[e,t],this._model.selectionStartLength=i,this.refresh()},t.prototype._getWordAt=function(e,t,i,r){if(void 0===i&&(i=!0),void 0===r&&(r=!0),e[0]>=this._terminal.cols)return null;var n=this._buffer.lines.get(e[1]);if(!n)return null;var s=this._buffer.translateBufferLineToString(e[1],!1),o=this._convertViewportColToCharacterIndex(n,e),a=o,l=e[0]-o,c=0,u=0,_=0,f=0;if(" "===s.charAt(o)){for(;o>0&&" "===s.charAt(o-1);)o--;for(;a<s.length&&" "===s.charAt(a+1);)a++}else{var d=e[0],p=e[0];for(0===n.get(d)[h.CHAR_DATA_WIDTH_INDEX]&&(c++,d--),2===n.get(p)[h.CHAR_DATA_WIDTH_INDEX]&&(u++,p++),n.get(p)[h.CHAR_DATA_CHAR_INDEX].length>1&&(f+=n.get(p)[h.CHAR_DATA_CHAR_INDEX].length-1,a+=n.get(p)[h.CHAR_DATA_CHAR_INDEX].length-1);d>0&&o>0&&!this._isCharWordSeparator(n.get(d-1));){0===(m=n.get(d-1))[h.CHAR_DATA_WIDTH_INDEX]?(c++,d--):m[h.CHAR_DATA_CHAR_INDEX].length>1&&(_+=m[h.CHAR_DATA_CHAR_INDEX].length-1,o-=m[h.CHAR_DATA_CHAR_INDEX].length-1),o--,d--}for(;p<n.length&&a+1<s.length&&!this._isCharWordSeparator(n.get(p+1));){var m;2===(m=n.get(p+1))[h.CHAR_DATA_WIDTH_INDEX]?(u++,p++):m[h.CHAR_DATA_CHAR_INDEX].length>1&&(f+=m[h.CHAR_DATA_CHAR_INDEX].length-1,a+=m[h.CHAR_DATA_CHAR_INDEX].length-1),a++,p++}}a++;var y=o+l-c+_,C=Math.min(this._terminal.cols,a-o+c+u-_-f);if(!t&&""===s.slice(o,a).trim())return null;if(i&&0===y&&32!==n.get(0)[h.CHAR_DATA_CODE_INDEX]){var g=this._buffer.lines.get(e[1]-1);if(g&&n.isWrapped&&32!==g.get(this._terminal.cols-1)[h.CHAR_DATA_CODE_INDEX]){var v=this._getWordAt([this._terminal.cols-1,e[1]-1],!1,!0,!1);if(v){var b=this._terminal.cols-v.start;y-=b,C+=b}}}if(r&&y+C===this._terminal.cols&&32!==n.get(this._terminal.cols-1)[h.CHAR_DATA_CODE_INDEX]){var w=this._buffer.lines.get(e[1]+1);if(w&&w.isWrapped&&32!==w.get(0)[h.CHAR_DATA_CODE_INDEX]){var L=this._getWordAt([0,e[1]+1],!1,!1,!0);L&&(C+=L.length)}}return{start:y,length:C}},t.prototype._selectWordAt=function(e,t){var i=this._getWordAt(e,t);if(i){for(;i.start<0;)i.start+=this._terminal.cols,e[1]--;this._model.selectionStart=[i.start,e[1]],this._model.selectionStartLength=i.length}},t.prototype._selectToWordAt=function(e){var t=this._getWordAt(e,!0);if(t){for(var i=e[1];t.start<0;)t.start+=this._terminal.cols,i--;if(!this._model.areSelectionValuesReversed())for(;t.start+t.length>this._terminal.cols;)t.length-=this._terminal.cols,i++;this._model.selectionEnd=[this._model.areSelectionValuesReversed()?t.start:t.start+t.length,i]}},t.prototype._isCharWordSeparator=function(e){return 0!==e[h.CHAR_DATA_WIDTH_INDEX]&&" ()[]{}'\"".indexOf(e[h.CHAR_DATA_CHAR_INDEX])>=0},t.prototype._selectLineAt=function(e){var t=this._buffer.getWrappedRangeForLine(e);this._model.selectionStart=[0,t.first],this._model.selectionEnd=[this._terminal.cols,t.last],this._model.selectionStartLength=0},t}(a.EventEmitter);t.SelectionManager=f},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){this._terminal=e,this.clearSelection()}return e.prototype.clearSelection=function(){this.selectionStart=null,this.selectionEnd=null,this.isSelectAllActive=!1,this.selectionStartLength=0},Object.defineProperty(e.prototype,"finalSelectionStart",{get:function(){return this.isSelectAllActive?[0,0]:this.selectionEnd&&this.selectionStart&&this.areSelectionValuesReversed()?this.selectionEnd:this.selectionStart},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"finalSelectionEnd",{get:function(){if(this.isSelectAllActive)return[this._terminal.cols,this._terminal.buffer.ybase+this._terminal.rows-1];if(!this.selectionStart)return null;if(!this.selectionEnd||this.areSelectionValuesReversed()){var e=this.selectionStart[0]+this.selectionStartLength;return e>this._terminal.cols?[e%this._terminal.cols,this.selectionStart[1]+Math.floor(e/this._terminal.cols)]:[e,this.selectionStart[1]]}return this.selectionStartLength&&this.selectionEnd[1]===this.selectionStart[1]?[Math.max(this.selectionStart[0]+this.selectionStartLength,this.selectionEnd[0]),this.selectionEnd[1]]:this.selectionEnd},enumerable:!0,configurable:!0}),e.prototype.areSelectionValuesReversed=function(){var e=this.selectionStart,t=this.selectionEnd;return!(!e||!t)&&(e[1]>t[1]||e[1]===t[1]&&e[0]>t[0])},e.prototype.onTrim=function(e){return this.selectionStart&&(this.selectionStart[1]-=e),this.selectionEnd&&(this.selectionEnd[1]-=e),this.selectionEnd&&this.selectionEnd[1]<0?(this.clearSelection(),!0):(this.selectionStart&&this.selectionStart[1]<0&&(this.selectionStart[1]=0),!1)},e}();t.SelectionModel=r},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(7),n=function(){function e(e,t){var i;this._mouseEvent=e,this._terminal=t,this._lines=this._terminal.buffer.lines,this._startCol=this._terminal.buffer.x,this._startRow=this._terminal.buffer.y;var r=this._terminal.mouseHelper.getCoords(this._mouseEvent,this._terminal.element,this._terminal.charMeasure,this._terminal.cols,this._terminal.rows,!1);r&&(i=r.map(function(e){return e-1}),this._endCol=i[0],this._endRow=i[1])}return e.prototype.move=function(){this._mouseEvent.altKey&&void 0!==this._endCol&&void 0!==this._endRow&&this._terminal.handler(this._arrowSequences())},e.prototype._arrowSequences=function(){return this._terminal.buffer.hasScrollback?this._moveHorizontallyOnly():this._resetStartingRow()+this._moveToRequestedRow()+this._moveToRequestedCol()},e.prototype._resetStartingRow=function(){return 0===this._moveToRequestedRow().length?"":s(this._bufferLine(this._startCol,this._startRow,this._startCol,this._startRow-this._wrappedRowsForRow(this._startRow),!1).length,this._sequence("D"))},e.prototype._moveToRequestedRow=function(){var e=this._startRow-this._wrappedRowsForRow(this._startRow),t=this._endRow-this._wrappedRowsForRow(this._endRow);return s(Math.abs(e-t)-this._wrappedRowsCount(),this._sequence(this._verticalDirection()))},e.prototype._moveToRequestedCol=function(){var e;e=this._moveToRequestedRow().length>0?this._endRow-this._wrappedRowsForRow(this._endRow):this._startRow;var t=this._endRow,i=this._horizontalDirection();return s(this._bufferLine(this._startCol,e,this._endCol,t,"C"===i).length,this._sequence(i))},e.prototype._moveHorizontallyOnly=function(){var e=this._horizontalDirection();return s(Math.abs(this._startCol-this._endCol),this._sequence(e))},e.prototype._wrappedRowsCount=function(){for(var e=0,t=this._startRow-this._wrappedRowsForRow(this._startRow),i=this._endRow-this._wrappedRowsForRow(this._endRow),r=0;r<Math.abs(t-i);r++){var n="A"===this._verticalDirection()?-1:1;this._lines.get(t+n*r).isWrapped&&e++}return e},e.prototype._wrappedRowsForRow=function(e){for(var t=0,i=this._lines.get(e).isWrapped;i&&e>=0&&e<this._terminal.rows;)t++,e--,i=this._lines.get(e).isWrapped;return t},e.prototype._horizontalDirection=function(){var e;return e=this._moveToRequestedRow().length>0?this._endRow-this._wrappedRowsForRow(this._endRow):this._startRow,this._startCol<this._endCol&&e<=this._endRow||this._startCol>=this._endCol&&e<this._endRow?"C":"D"},e.prototype._verticalDirection=function(){return this._startRow>this._endRow?"A":"B"},e.prototype._bufferLine=function(e,t,i,r,n){for(var s=e,o=t,a="";s!==i||o!==r;)s+=n?1:-1,n&&s>this._terminal.cols-1?(a+=this._terminal.buffer.translateBufferLineToString(o,!1,e,s),s=0,e=0,o++):!n&&s<0&&(a+=this._terminal.buffer.translateBufferLineToString(o,!1,0,e+1),e=s=this._terminal.cols-1,o--);return a+this._terminal.buffer.translateBufferLineToString(o,!1,e,s)},e.prototype._sequence=function(e){var t=this._terminal.applicationCursor?"O":"[";return r.C0.ESC+t+e},e}();function s(e,t){e=Math.floor(e);for(var i="",r=0;r<e;r++)i+=t;return i}t.AltClickHandler=n},function(e,t,i){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(e,t)},function(e,t){function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)});Object.defineProperty(t,"__esModule",{value:!0});var s=function(e){function t(t,i){var r=e.call(this)||this;return r._document=t,r._parentElement=i,r._measureElement=r._document.createElement("span"),r._measureElement.classList.add("xterm-char-measure-element"),r._measureElement.textContent="W",r._measureElement.setAttribute("aria-hidden","true"),r._parentElement.appendChild(r._measureElement),r}return n(t,e),Object.defineProperty(t.prototype,"width",{get:function(){return this._width},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this._height},enumerable:!0,configurable:!0}),t.prototype.measure=function(e){this._measureElement.style.fontFamily=e.fontFamily,this._measureElement.style.fontSize=e.fontSize+"px";var t=this._measureElement.getBoundingClientRect();0!==t.width&&0!==t.height&&(this._width===t.width&&this._height===t.height||(this._width=t.width,this._height=Math.ceil(t.height),this.emit("charsizechanged")))},t}(i(2).EventEmitter);t.CharMeasure=s},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.clone=function(e,i){if(void 0===i&&(i=5),"object"!=typeof e)return e;if(null===e)return null;var r=Array.isArray(e)?[]:{};for(var n in e)r[n]=i<=1?e[n]:t.clone(e[n],i-1);return r}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_BELL_SOUND="data:audio/wav;base64,UklGRigBAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQQBAADpAFgCwAMlBZoG/wdmCcoKRAypDQ8PbRDBEQQTOxRtFYcWlBePGIUZXhoiG88bcBz7HHIdzh0WHlMeZx51HmkeUx4WHs8dah0AHXwc3hs9G4saxRnyGBIYGBcQFv8U4RPAEoYRQBACD70NWwwHC6gJOwjWBloF7gOBAhABkf8b/qv8R/ve+Xf4Ife79W/0JfPZ8Z/wde9N7ijtE+wU6xvqM+lb6H7nw+YX5mrlxuQz5Mzje+Ma49fioeKD4nXiYeJy4pHitOL04j/jn+MN5IPkFOWs5U3mDefM55/ogOl36m7rdOyE7abuyu8D8Unyj/Pg9D/2qfcb+Yn6/vuK/Qj/lAAlAg==";var r=function(){function e(e){this._terminal=e}return Object.defineProperty(e,"audioContext",{get:function(){if(!e._audioContext){var t=window.AudioContext||window.webkitAudioContext;if(!t)return console.warn("Web Audio API is not supported by this browser. Consider upgrading to the latest version"),null;e._audioContext=new t}return e._audioContext},enumerable:!0,configurable:!0}),e.prototype.playBellSound=function(){var t=e.audioContext;if(t){var i=t.createBufferSource();t.decodeAudioData(this._base64ToArrayBuffer(this._removeMimeType(this._terminal.options.bellSound)),function(e){i.buffer=e,i.connect(t.destination),i.start(0)})}},e.prototype._base64ToArrayBuffer=function(e){for(var t=window.atob(e),i=t.length,r=new Uint8Array(i),n=0;n<i;n++)r[n]=t.charCodeAt(n);return r.buffer},e.prototype._removeMimeType=function(e){return e.split(",")[1]},e}();t.SoundManager=r},function(e,t,i){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(e,t)},function(e,t){function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)});Object.defineProperty(t,"__esModule",{value:!0});var s=i(12),o=i(5),a=i(11),l=i(6),h=i(3),c=function(e){function t(t){var i=e.call(this)||this;i._terminal=t,i._liveRegionLineCount=0,i._charsToConsume=[],i._accessibilityTreeRoot=document.createElement("div"),i._accessibilityTreeRoot.classList.add("xterm-accessibility"),i._rowContainer=document.createElement("div"),i._rowContainer.classList.add("xterm-accessibility-tree"),i._rowElements=[];for(var r=0;r<i._terminal.rows;r++)i._rowElements[r]=i._createAccessibilityTreeNode(),i._rowContainer.appendChild(i._rowElements[r]);return i._topBoundaryFocusListener=function(e){return i._onBoundaryFocus(e,0)},i._bottomBoundaryFocusListener=function(e){return i._onBoundaryFocus(e,1)},i._rowElements[0].addEventListener("focus",i._topBoundaryFocusListener),i._rowElements[i._rowElements.length-1].addEventListener("focus",i._bottomBoundaryFocusListener),i._refreshRowsDimensions(),i._accessibilityTreeRoot.appendChild(i._rowContainer),i._renderRowsDebouncer=new a.RenderDebouncer(i._terminal,i._renderRows.bind(i)),i._refreshRows(),i._liveRegion=document.createElement("div"),i._liveRegion.classList.add("live-region"),i._liveRegion.setAttribute("aria-live","assertive"),i._accessibilityTreeRoot.appendChild(i._liveRegion),i._terminal.element.insertAdjacentElement("afterbegin",i._accessibilityTreeRoot),i.register(i._renderRowsDebouncer),i.register(i._terminal.addDisposableListener("resize",function(e){return i._onResize(e.rows)})),i.register(i._terminal.addDisposableListener("refresh",function(e){return i._refreshRows(e.start,e.end)})),i.register(i._terminal.addDisposableListener("scroll",function(e){return i._refreshRows()})),i.register(i._terminal.addDisposableListener("a11y.char",function(e){return i._onChar(e)})),i.register(i._terminal.addDisposableListener("linefeed",function(){return i._onChar("\n")})),i.register(i._terminal.addDisposableListener("a11y.tab",function(e){return i._onTab(e)})),i.register(i._terminal.addDisposableListener("key",function(e){return i._onKey(e)})),i.register(i._terminal.addDisposableListener("blur",function(){return i._clearLiveRegion()})),i.register(i._terminal.addDisposableListener("dprchange",function(){return i._refreshRowsDimensions()})),i.register(i._terminal.renderer.addDisposableListener("resize",function(){return i._refreshRowsDimensions()})),i.register(l.addDisposableDomListener(window,"resize",function(){return i._refreshRowsDimensions()})),i}return n(t,e),t.prototype.dispose=function(){e.prototype.dispose.call(this),this._terminal.element.removeChild(this._accessibilityTreeRoot),this._rowElements.length=0},t.prototype._onBoundaryFocus=function(e,t){var i=e.target,r=this._rowElements[0===t?1:this._rowElements.length-2];if(i.getAttribute("aria-posinset")!==(0===t?"1":""+this._terminal.buffer.lines.length)&&e.relatedTarget===r){var n,s;if(0===t?(n=i,s=this._rowElements.pop(),this._rowContainer.removeChild(s)):(n=this._rowElements.shift(),s=i,this._rowContainer.removeChild(n)),n.removeEventListener("focus",this._topBoundaryFocusListener),s.removeEventListener("focus",this._bottomBoundaryFocusListener),0===t){var o=this._createAccessibilityTreeNode();this._rowElements.unshift(o),this._rowContainer.insertAdjacentElement("afterbegin",o)}else{o=this._createAccessibilityTreeNode();this._rowElements.push(o),this._rowContainer.appendChild(o)}this._rowElements[0].addEventListener("focus",this._topBoundaryFocusListener),this._rowElements[this._rowElements.length-1].addEventListener("focus",this._bottomBoundaryFocusListener),this._terminal.scrollLines(0===t?-1:1),this._rowElements[0===t?1:this._rowElements.length-2].focus(),e.preventDefault(),e.stopImmediatePropagation()}},t.prototype._onResize=function(e){this._rowElements[this._rowElements.length-1].removeEventListener("focus",this._bottomBoundaryFocusListener);for(var t=this._rowContainer.children.length;t<this._terminal.rows;t++)this._rowElements[t]=this._createAccessibilityTreeNode(),this._rowContainer.appendChild(this._rowElements[t]);for(;this._rowElements.length>e;)this._rowContainer.removeChild(this._rowElements.pop());this._rowElements[this._rowElements.length-1].addEventListener("focus",this._bottomBoundaryFocusListener),this._refreshRowsDimensions()},t.prototype._createAccessibilityTreeNode=function(){var e=document.createElement("div");return e.setAttribute("role","listitem"),e.tabIndex=-1,this._refreshRowDimensions(e),e},t.prototype._onTab=function(e){for(var t=0;t<e;t++)this._onChar(" ")},t.prototype._onChar=function(e){var t=this;if(this._liveRegionLineCount<21){if(this._charsToConsume.length>0)this._charsToConsume.shift()!==e&&this._announceCharacter(e);else this._announceCharacter(e);"\n"===e&&(this._liveRegionLineCount++,21===this._liveRegionLineCount&&(this._liveRegion.textContent+=s.tooMuchOutput)),o.isMac&&this._liveRegion.textContent&&this._liveRegion.textContent.length>0&&!this._liveRegion.parentNode&&setTimeout(function(){t._accessibilityTreeRoot.appendChild(t._liveRegion)},0)}},t.prototype._clearLiveRegion=function(){this._liveRegion.textContent="",this._liveRegionLineCount=0,o.isMac&&this._liveRegion.parentNode&&this._accessibilityTreeRoot.removeChild(this._liveRegion)},t.prototype._onKey=function(e){this._clearLiveRegion(),this._charsToConsume.push(e)},t.prototype._refreshRows=function(e,t){this._renderRowsDebouncer.refresh(e,t)},t.prototype._renderRows=function(e,t){for(var i=this._terminal.buffer,r=i.lines.length.toString(),n=e;n<=t;n++){var o=i.translateBufferLineToString(i.ydisp+n,!0),a=(i.ydisp+n+1).toString(),l=this._rowElements[n];l.textContent=0===o.length?s.blankLine:o,l.setAttribute("aria-posinset",a),l.setAttribute("aria-setsize",r)}},t.prototype._refreshRowsDimensions=function(){if(this._terminal.renderer.dimensions.actualCellHeight){this._rowElements.length!==this._terminal.rows&&this._onResize(this._terminal.rows);for(var e=0;e<this._terminal.rows;e++)this._refreshRowDimensions(this._rowElements[e])}},t.prototype._refreshRowDimensions=function(e){e.style.height=this._terminal.renderer.dimensions.actualCellHeight+"px"},t.prototype._announceCharacter=function(e){" "===e?this._liveRegion.innerHTML+="&nbsp;":this._liveRegion.textContent+=e},t}(h.Disposable);t.AccessibilityManager=c},function(e,t,i){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var i in t)t.hasOwnProperty(i)&&(e[i]=t[i])})(e,t)},function(e,t){function i(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)});Object.defineProperty(t,"__esModule",{value:!0});var s=i(2),o=i(9),a=i(11),l=i(53),h=i(1),c="xterm-dom-renderer-owner-",u="xterm-rows",_="xterm-selection",f=1,d=function(e){function t(t,i){var r=e.call(this)||this;r._terminal=t,r._terminalClass=f++,r._rowElements=[];var n=r._terminal.options.allowTransparency;return r.colorManager=new o.ColorManager(document,n),r.setTheme(i),r._rowContainer=document.createElement("div"),r._rowContainer.classList.add(u),r._rowContainer.style.lineHeight="normal",r._rowContainer.setAttribute("aria-hidden","true"),r._refreshRowElements(r._terminal.cols,r._terminal.rows),r._selectionContainer=document.createElement("div"),r._selectionContainer.classList.add(_),r._selectionContainer.setAttribute("aria-hidden","true"),r.dimensions={scaledCharWidth:null,scaledCharHeight:null,scaledCellWidth:null,scaledCellHeight:null,scaledCharLeft:null,scaledCharTop:null,scaledCanvasWidth:null,scaledCanvasHeight:null,canvasWidth:null,canvasHeight:null,actualCellWidth:null,actualCellHeight:null},r._updateDimensions(),r._renderDebouncer=new a.RenderDebouncer(r._terminal,r._renderRows.bind(r)),r._rowFactory=new l.DomRendererRowFactory(document),r._terminal.element.classList.add(c+r._terminalClass),r._terminal.screenElement.appendChild(r._rowContainer),r._terminal.screenElement.appendChild(r._selectionContainer),r._terminal.linkifier.on("linkhover",function(e){return r._onLinkHover(e)}),r._terminal.linkifier.on("linkleave",function(e){return r._onLinkLeave(e)}),r}return n(t,e),t.prototype.dispose=function(){this._terminal.element.classList.remove(c+this._terminalClass),this._terminal.screenElement.removeChild(this._rowContainer),this._terminal.screenElement.removeChild(this._selectionContainer),this._terminal.screenElement.removeChild(this._themeStyleElement),this._terminal.screenElement.removeChild(this._dimensionsStyleElement),e.prototype.dispose.call(this)},t.prototype._updateDimensions=function(){var e=this;this.dimensions.scaledCharWidth=Math.floor(this._terminal.charMeasure.width*window.devicePixelRatio),this.dimensions.scaledCharHeight=Math.ceil(this._terminal.charMeasure.height*window.devicePixelRatio),this.dimensions.scaledCellWidth=this.dimensions.scaledCharWidth+Math.round(this._terminal.options.letterSpacing),this.dimensions.scaledCellHeight=Math.floor(this.dimensions.scaledCharHeight*this._terminal.options.lineHeight),this.dimensions.scaledCharLeft=0,this.dimensions.scaledCharTop=0,this.dimensions.scaledCanvasWidth=this.dimensions.scaledCellWidth*this._terminal.cols,this.dimensions.scaledCanvasHeight=this.dimensions.scaledCellHeight*this._terminal.rows,this.dimensions.canvasWidth=Math.round(this.dimensions.scaledCanvasWidth/window.devicePixelRatio),this.dimensions.canvasHeight=Math.round(this.dimensions.scaledCanvasHeight/window.devicePixelRatio),this.dimensions.actualCellWidth=this.dimensions.canvasWidth/this._terminal.cols,this.dimensions.actualCellHeight=this.dimensions.canvasHeight/this._terminal.rows,this._rowElements.forEach(function(t){t.style.width=e.dimensions.canvasWidth+"px",t.style.height=e.dimensions.actualCellHeight+"px",t.style.lineHeight=e.dimensions.actualCellHeight+"px",t.style.overflow="hidden"}),this._dimensionsStyleElement||(this._dimensionsStyleElement=document.createElement("style"),this._terminal.screenElement.appendChild(this._dimensionsStyleElement));var t=this._terminalSelector+" ."+u+" span { display: inline-block; height: 100%; vertical-align: top; width: "+this.dimensions.actualCellWidth+"px}";this._dimensionsStyleElement.innerHTML=t,this._selectionContainer.style.height=this._terminal._viewportElement.style.height,this._terminal.screenElement.style.width=this.dimensions.canvasWidth+"px",this._terminal.screenElement.style.height=this.dimensions.canvasHeight+"px"},t.prototype.setTheme=function(e){var t=this;e&&this.colorManager.setTheme(e),this._themeStyleElement||(this._themeStyleElement=document.createElement("style"),this._terminal.screenElement.appendChild(this._themeStyleElement));var i=this._terminalSelector+" ."+u+" { color: "+this.colorManager.colors.foreground.css+"; background-color: "+this.colorManager.colors.background.css+"; font-family: "+this._terminal.getOption("fontFamily")+"; font-size: "+this._terminal.getOption("fontSize")+"px;}";return i+=this._terminalSelector+" span:not(."+l.BOLD_CLASS+") { font-weight: "+this._terminal.options.fontWeight+";}"+this._terminalSelector+" span."+l.BOLD_CLASS+" { font-weight: "+this._terminal.options.fontWeightBold+";}"+this._terminalSelector+" span."+l.ITALIC_CLASS+" { font-style: italic;}",i+=this._terminalSelector+" ."+u+":not(.xterm-focus) ."+l.CURSOR_CLASS+" { outline: 1px solid "+this.colorManager.colors.cursor.css+"; outline-offset: -1px;}"+this._terminalSelector+" ."+u+".xterm-focus ."+l.CURSOR_CLASS+"."+l.CURSOR_STYLE_BLOCK_CLASS+" { background-color: "+this.colorManager.colors.cursor.css+"; color: "+this.colorManager.colors.cursorAccent.css+";}"+this._terminalSelector+" ."+u+".xterm-focus ."+l.CURSOR_CLASS+"."+l.CURSOR_STYLE_BAR_CLASS+" { box-shadow: 1px 0 0 "+this.colorManager.colors.cursor.css+" inset;}"+this._terminalSelector+" ."+u+".xterm-focus ."+l.CURSOR_CLASS+"."+l.CURSOR_STYLE_UNDERLINE_CLASS+" { box-shadow: 0 -1px 0 "+this.colorManager.colors.cursor.css+" inset;}",i+=this._terminalSelector+" ."+_+" { position: absolute; top: 0; left: 0; z-index: 1; pointer-events: none;}"+this._terminalSelector+" ."+_+" div { position: absolute; background-color: "+this.colorManager.colors.selection.css+";}",this.colorManager.colors.ansi.forEach(function(e,r){i+=t._terminalSelector+" .xterm-fg-"+r+" { color: "+e.css+"; }"+t._terminalSelector+" .xterm-bg-"+r+" { background-color: "+e.css+"; }"}),i+=this._terminalSelector+" .xterm-fg-"+h.INVERTED_DEFAULT_COLOR+" { color: "+this.colorManager.colors.background.css+"; }"+this._terminalSelector+" .xterm-bg-"+h.INVERTED_DEFAULT_COLOR+" { background-color: "+this.colorManager.colors.foreground.css+"; }",this._themeStyleElement.innerHTML=i,this.colorManager.colors},t.prototype.onWindowResize=function(e){this._updateDimensions()},t.prototype._refreshRowElements=function(e,t){for(var i=this._rowElements.length;i<=t;i++){var r=document.createElement("div");this._rowContainer.appendChild(r),this._rowElements.push(r)}for(;this._rowElements.length>t;)this._rowContainer.removeChild(this._rowElements.pop())},t.prototype.onResize=function(e,t){this._refreshRowElements(e,t),this._updateDimensions()},t.prototype.onCharSizeChanged=function(){this._updateDimensions()},t.prototype.onBlur=function(){this._rowContainer.classList.remove("xterm-focus")},t.prototype.onFocus=function(){this._rowContainer.classList.add("xterm-focus")},t.prototype.onSelectionChanged=function(e,t,i){for(;this._selectionContainer.children.length;)this._selectionContainer.removeChild(this._selectionContainer.children[0]);if(e&&t){var r=e[1]-this._terminal.buffer.ydisp,n=t[1]-this._terminal.buffer.ydisp,s=Math.max(r,0),o=Math.min(n,this._terminal.rows-1);if(!(s>=this._terminal.rows||o<0)){var a=document.createDocumentFragment();if(i)a.appendChild(this._createSelectionElement(s,e[0],t[0],o-s+1));else{var l=r===s?e[0]:0,h=s===o?t[0]:this._terminal.cols;a.appendChild(this._createSelectionElement(s,l,h));var c=o-s-1;if(a.appendChild(this._createSelectionElement(s+1,0,this._terminal.cols,c)),s!==o){var u=n===o?t[0]:this._terminal.cols;a.appendChild(this._createSelectionElement(o,0,u))}}this._selectionContainer.appendChild(a)}}},t.prototype._createSelectionElement=function(e,t,i,r){void 0===r&&(r=1);var n=document.createElement("div");return n.style.height=r*this.dimensions.actualCellHeight+"px",n.style.top=e*this.dimensions.actualCellHeight+"px",n.style.left=t*this.dimensions.actualCellWidth+"px",n.style.width=this.dimensions.actualCellWidth*(i-t)+"px",n},t.prototype.onCursorMove=function(){},t.prototype.onOptionsChanged=function(){this._updateDimensions(),this.setTheme(void 0),this._terminal.refresh(0,this._terminal.rows-1)},t.prototype.clear=function(){this._rowElements.forEach(function(e){return e.innerHTML=""})},t.prototype.refreshRows=function(e,t){this._renderDebouncer.refresh(e,t)},t.prototype._renderRows=function(e,t){for(var i=this._terminal,r=i.buffer.ybase+i.buffer.y,n=this._terminal.buffer.x,s=e;s<=t;s++){var o=this._rowElements[s];o.innerHTML="";var a=s+i.buffer.ydisp,l=i.buffer.lines.get(a),h=i.options.cursorStyle;o.appendChild(this._rowFactory.createRow(l,a===r,h,n,this.dimensions.actualCellWidth,i.cols))}this._terminal.emit("refresh",{start:e,end:t})},Object.defineProperty(t.prototype,"_terminalSelector",{get:function(){return"."+c+this._terminalClass},enumerable:!0,configurable:!0}),t.prototype.registerCharacterJoiner=function(e){return-1},t.prototype.deregisterCharacterJoiner=function(e){return!1},t.prototype._onLinkHover=function(e){this._setCellUnderline(e.x1,e.x2,e.y1,e.y2,e.cols,!0)},t.prototype._onLinkLeave=function(e){this._setCellUnderline(e.x1,e.x2,e.y1,e.y2,e.cols,!1)},t.prototype._setCellUnderline=function(e,t,i,r,n,s){for(;e!==t||i!==r;){var o=this._rowElements[i];if(!o)return;o.children[e].style.textDecoration=s?"underline":"none",0===(e=(e+1)%n)&&i++}},t}(s.EventEmitter);t.DomRenderer=d},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(0),n=i(1);t.BOLD_CLASS="xterm-bold",t.ITALIC_CLASS="xterm-italic",t.CURSOR_CLASS="xterm-cursor",t.CURSOR_STYLE_BLOCK_CLASS="xterm-cursor-block",t.CURSOR_STYLE_BAR_CLASS="xterm-cursor-bar",t.CURSOR_STYLE_UNDERLINE_CLASS="xterm-cursor-underline";var s=function(){function e(e){this._document=e}return e.prototype.createRow=function(e,i,s,o,a,l){for(var h=this._document.createDocumentFragment(),c=0,u=Math.min(e.length,l)-1;u>=0;u--){if((_=e.get(u))[r.CHAR_DATA_CODE_INDEX]!==r.NULL_CELL_CODE||i&&u===o){c=u+1;break}}for(u=0;u<c;u++){var _,f=(_=e.get(u))[r.CHAR_DATA_CHAR_INDEX],d=_[r.CHAR_DATA_ATTR_INDEX],p=_[r.CHAR_DATA_WIDTH_INDEX];if(0!==p){var m=this._document.createElement("span");p>1&&(m.style.width=a*p+"px");var y=d>>18,C=511&d,g=d>>9&511;if(i&&u===o)switch(m.classList.add(t.CURSOR_CLASS),s){case"bar":m.classList.add(t.CURSOR_STYLE_BAR_CLASS);break;case"underline":m.classList.add(t.CURSOR_STYLE_UNDERLINE_CLASS);break;default:m.classList.add(t.CURSOR_STYLE_BLOCK_CLASS)}if(8&y){var v=C;C=g,(g=v)===n.DEFAULT_COLOR&&(g=n.INVERTED_DEFAULT_COLOR),C===n.DEFAULT_COLOR&&(C=n.INVERTED_DEFAULT_COLOR)}1&y&&(g<8&&(g+=8),m.classList.add(t.BOLD_CLASS)),64&y&&m.classList.add(t.ITALIC_CLASS),m.textContent=f,g!==n.DEFAULT_COLOR&&m.classList.add("xterm-fg-"+g),C!==n.DEFAULT_COLOR&&m.classList.add("xterm-bg-"+C),h.appendChild(m)}}return h},e}();t.DomRendererRowFactory=s},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(7),n={48:["0",")"],49:["1","!"],50:["2","@"],51:["3","#"],52:["4","$"],53:["5","%"],54:["6","^"],55:["7","&"],56:["8","*"],57:["9","("],186:[";",":"],187:["=","+"],188:[",","<"],189:["-","_"],190:[".",">"],191:["/","?"],192:["`","~"],219:["[","{"],220:["\\","|"],221:["]","}"],222:["'",'"']};t.evaluateKeyboardEvent=function(e,t,i,s){var o={type:0,cancel:!1,key:void 0},a=(e.shiftKey?1:0)|(e.altKey?2:0)|(e.ctrlKey?4:0)|(e.metaKey?8:0);switch(e.keyCode){case 0:"UIKeyInputUpArrow"===e.key?o.key=t?r.C0.ESC+"OA":r.C0.ESC+"[A":"UIKeyInputLeftArrow"===e.key?o.key=t?r.C0.ESC+"OD":r.C0.ESC+"[D":"UIKeyInputRightArrow"===e.key?o.key=t?r.C0.ESC+"OC":r.C0.ESC+"[C":"UIKeyInputDownArrow"===e.key&&(o.key=t?r.C0.ESC+"OB":r.C0.ESC+"[B");break;case 8:if(e.shiftKey){o.key=r.C0.BS;break}if(e.altKey){o.key=r.C0.ESC+r.C0.DEL;break}o.key=r.C0.DEL;break;case 9:if(e.shiftKey){o.key=r.C0.ESC+"[Z";break}o.key=r.C0.HT,o.cancel=!0;break;case 13:o.key=r.C0.CR,o.cancel=!0;break;case 27:o.key=r.C0.ESC,o.cancel=!0;break;case 37:a?(o.key=r.C0.ESC+"[1;"+(a+1)+"D",o.key===r.C0.ESC+"[1;3D"&&(o.key=i?r.C0.ESC+"b":r.C0.ESC+"[1;5D")):o.key=t?r.C0.ESC+"OD":r.C0.ESC+"[D";break;case 39:a?(o.key=r.C0.ESC+"[1;"+(a+1)+"C",o.key===r.C0.ESC+"[1;3C"&&(o.key=i?r.C0.ESC+"f":r.C0.ESC+"[1;5C")):o.key=t?r.C0.ESC+"OC":r.C0.ESC+"[C";break;case 38:a?(o.key=r.C0.ESC+"[1;"+(a+1)+"A",o.key===r.C0.ESC+"[1;3A"&&(o.key=r.C0.ESC+"[1;5A")):o.key=t?r.C0.ESC+"OA":r.C0.ESC+"[A";break;case 40:a?(o.key=r.C0.ESC+"[1;"+(a+1)+"B",o.key===r.C0.ESC+"[1;3B"&&(o.key=r.C0.ESC+"[1;5B")):o.key=t?r.C0.ESC+"OB":r.C0.ESC+"[B";break;case 45:e.shiftKey||e.ctrlKey||(o.key=r.C0.ESC+"[2~");break;case 46:o.key=a?r.C0.ESC+"[3;"+(a+1)+"~":r.C0.ESC+"[3~";break;case 36:o.key=a?r.C0.ESC+"[1;"+(a+1)+"H":t?r.C0.ESC+"OH":r.C0.ESC+"[H";break;case 35:o.key=a?r.C0.ESC+"[1;"+(a+1)+"F":t?r.C0.ESC+"OF":r.C0.ESC+"[F";break;case 33:e.shiftKey?o.type=2:o.key=r.C0.ESC+"[5~";break;case 34:e.shiftKey?o.type=3:o.key=r.C0.ESC+"[6~";break;case 112:o.key=a?r.C0.ESC+"[1;"+(a+1)+"P":r.C0.ESC+"OP";break;case 113:o.key=a?r.C0.ESC+"[1;"+(a+1)+"Q":r.C0.ESC+"OQ";break;case 114:o.key=a?r.C0.ESC+"[1;"+(a+1)+"R":r.C0.ESC+"OR";break;case 115:o.key=a?r.C0.ESC+"[1;"+(a+1)+"S":r.C0.ESC+"OS";break;case 116:o.key=a?r.C0.ESC+"[15;"+(a+1)+"~":r.C0.ESC+"[15~";break;case 117:o.key=a?r.C0.ESC+"[17;"+(a+1)+"~":r.C0.ESC+"[17~";break;case 118:o.key=a?r.C0.ESC+"[18;"+(a+1)+"~":r.C0.ESC+"[18~";break;case 119:o.key=a?r.C0.ESC+"[19;"+(a+1)+"~":r.C0.ESC+"[19~";break;case 120:o.key=a?r.C0.ESC+"[20;"+(a+1)+"~":r.C0.ESC+"[20~";break;case 121:o.key=a?r.C0.ESC+"[21;"+(a+1)+"~":r.C0.ESC+"[21~";break;case 122:o.key=a?r.C0.ESC+"[23;"+(a+1)+"~":r.C0.ESC+"[23~";break;case 123:o.key=a?r.C0.ESC+"[24;"+(a+1)+"~":r.C0.ESC+"[24~";break;default:if(!e.ctrlKey||e.shiftKey||e.altKey||e.metaKey)if(i&&!s||!e.altKey||e.metaKey)i&&!e.altKey&&!e.ctrlKey&&e.metaKey&&65===e.keyCode&&(o.type=1);else{var l=n[e.keyCode],h=l&&l[e.shiftKey?1:0];if(h)o.key=r.C0.ESC+h;else if(e.keyCode>=65&&e.keyCode<=90){var c=e.ctrlKey?e.keyCode-64:e.keyCode+32;o.key=r.C0.ESC+String.fromCharCode(c)}}else e.keyCode>=65&&e.keyCode<=90?o.key=String.fromCharCode(e.keyCode-64):32===e.keyCode?o.key=String.fromCharCode(0):e.keyCode>=51&&e.keyCode<=55?o.key=String.fromCharCode(e.keyCode-51+27):56===e.keyCode?o.key=String.fromCharCode(127):219===e.keyCode?o.key=String.fromCharCode(27):220===e.keyCode?o.key=String.fromCharCode(28):221===e.keyCode&&(o.key=String.fromCharCode(29))}return o}},function(e,t,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(13);e.exports=r.Terminal},function(e,t){},,,,,function(e,t){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9CdWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9yZW5kZXJlci9hdGxhcy9UeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL2NvbW1vbi9FdmVudEVtaXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9jb21tb24vTGlmZWN5Y2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIvcmVuZGVyZXIvYXRsYXMvQ2hhckF0bGFzVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9jb3JlL1BsYXRmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIvdWkvTGlmZWN5Y2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIvY29tbW9uL2RhdGEvRXNjYXBlU2VxdWVuY2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIvcmVuZGVyZXIvQmFzZVJlbmRlckxheWVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIvcmVuZGVyZXIvQ29sb3JNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIvcmVuZGVyZXIvYXRsYXMvQmFzZUNoYXJBdGxhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3VpL1JlbmRlckRlYm91bmNlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL1N0cmluZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9wdWJsaWMvVGVybWluYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9DaGFyV2lkdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9yZW5kZXJlci9hdGxhcy9DaGFyQXRsYXNDYWNoZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3JlbmRlcmVyL2F0bGFzL0NoYXJBdGxhc0dlbmVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3VpL1NjcmVlbkRwck1vbml0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi91aS9Nb3VzZVpvbmVNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIvdXRpbHMvTW91c2VIZWxwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9hZGRvbnMvZml0L2ZpdC5qcyIsIndlYnBhY2s6Ly8vLi9jbGllbnQvc3JjL2NsaWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL1Rlcm1pbmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIvQnVmZmVyU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIvY29tbW9uL0NpcmN1bGFyTGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL0J1ZmZlckxpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9Db21wb3NpdGlvbkhlbHBlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL1ZpZXdwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIvdWkvQ2xpcGJvYXJkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIvSW5wdXRIYW5kbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIvY29yZS9kYXRhL0NoYXJzZXRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIvY29tbW9uL1R5cGVkQXJyYXlVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL0VzY2FwZVNlcXVlbmNlUGFyc2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIvcmVuZGVyZXIvUmVuZGVyZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9yZW5kZXJlci9UZXh0UmVuZGVyTGF5ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9yZW5kZXJlci9HcmlkQ2FjaGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9yZW5kZXJlci9hdGxhcy9EeW5hbWljQ2hhckF0bGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIvcmVuZGVyZXIvYXRsYXMvTFJVTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIvcmVuZGVyZXIvYXRsYXMvTm9uZUNoYXJBdGxhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3JlbmRlcmVyL2F0bGFzL1N0YXRpY0NoYXJBdGxhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3JlbmRlcmVyL1NlbGVjdGlvblJlbmRlckxheWVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIvcmVuZGVyZXIvQ3Vyc29yUmVuZGVyTGF5ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9yZW5kZXJlci9MaW5rUmVuZGVyTGF5ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9yZW5kZXJlci9DaGFyYWN0ZXJKb2luZXJSZWdpc3RyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL0xpbmtpZmllci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL1NlbGVjdGlvbk1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9TZWxlY3Rpb25Nb2RlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL2hhbmRsZXJzL0FsdENsaWNrSGFuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3VpL0NoYXJNZWFzdXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIvdXRpbHMvQ2xvbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9Tb3VuZE1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9BY2Nlc3NpYmlsaXR5TWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3JlbmRlcmVyL2RvbS9Eb21SZW5kZXJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3JlbmRlcmVyL2RvbS9Eb21SZW5kZXJlclJvd0ZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9jb3JlL2lucHV0L0tleWJvYXJkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIveHRlcm0uanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJleHRlbmRTdGF0aWNzIiwiX19leHRlbmRzIiwidGhpcyIsImIiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwiX18iLCJjb25zdHJ1Y3RvciIsIkNpcmN1bGFyTGlzdF8xIiwiRXZlbnRFbWl0dGVyXzEiLCJCdWZmZXJMaW5lXzEiLCJUeXBlc18xIiwiREVGQVVMVF9BVFRSIiwiREVGQVVMVF9DT0xPUiIsIkNIQVJfREFUQV9BVFRSX0lOREVYIiwiQ0hBUl9EQVRBX0NIQVJfSU5ERVgiLCJDSEFSX0RBVEFfV0lEVEhfSU5ERVgiLCJDSEFSX0RBVEFfQ09ERV9JTkRFWCIsIk1BWF9CVUZGRVJfU0laRSIsIk5VTExfQ0VMTF9DSEFSIiwiTlVMTF9DRUxMX1dJRFRIIiwiTlVMTF9DRUxMX0NPREUiLCJCdWZmZXIiLCJfdGVybWluYWwiLCJfaGFzU2Nyb2xsYmFjayIsIm1hcmtlcnMiLCJjbGVhciIsInNldEJ1ZmZlckxpbmVGYWN0b3J5IiwidHlwZSIsIl9idWZmZXJMaW5lQ29uc3RydWN0b3IiLCJCdWZmZXJMaW5lSlNBcnJheSIsIl9yZWNyZWF0ZUxpbmVzIiwiQnVmZmVyTGluZSIsImxpbmVzIiwibGVuZ3RoIiwib2xkTGluZSIsIm5ld0xpbmUiLCJqIiwic2V0IiwiZ2V0QmxhbmtMaW5lIiwiYXR0ciIsImlzV3JhcHBlZCIsImZpbGxDaGFyRGF0YSIsImNvbHMiLCJtYXhMZW5ndGgiLCJyb3dzIiwiY29uZmlndXJhYmxlIiwicmVsYXRpdmVZIiwieWJhc2UiLCJ5IiwieWRpc3AiLCJfZ2V0Q29ycmVjdEJ1ZmZlckxlbmd0aCIsImNvcnJlY3RCdWZmZXJMZW5ndGgiLCJvcHRpb25zIiwic2Nyb2xsYmFjayIsImZpbGxWaWV3cG9ydFJvd3MiLCJmaWxsQXR0ciIsInVuZGVmaW5lZCIsInB1c2giLCJleHBlcmltZW50YWxCdWZmZXJMaW5lSW1wbCIsIngiLCJDaXJjdWxhckxpc3QiLCJzY3JvbGxUb3AiLCJzY3JvbGxCb3R0b20iLCJzZXR1cFRhYlN0b3BzIiwicmVzaXplIiwibmV3Q29scyIsIm5ld1Jvd3MiLCJuZXdNYXhMZW5ndGgiLCJjaCIsImFkZFRvWSIsInBvcCIsImFtb3VudFRvVHJpbSIsInRyaW1TdGFydCIsIk1hdGgiLCJtYXgiLCJtaW4iLCJzYXZlZFkiLCJzYXZlZFgiLCJzdHJpbmdJbmRleFRvQnVmZmVySW5kZXgiLCJsaW5lSW5kZXgiLCJzdHJpbmdJbmRleCIsImxpbmUiLCJ0cmFuc2xhdGVCdWZmZXJMaW5lVG9TdHJpbmciLCJ0cmltUmlnaHQiLCJzdGFydENvbCIsImVuZENvbCIsImxpbmVTdHJpbmciLCJzdGFydEluZGV4IiwiZW5kSW5kZXgiLCJjaGFyIiwicmlnaHRXaGl0ZXNwYWNlSW5kZXgiLCJzZWFyY2giLCJzdWJzdHJpbmciLCJnZXRXcmFwcGVkUmFuZ2VGb3JMaW5lIiwiZmlyc3QiLCJsYXN0IiwidGFicyIsInByZXZTdG9wIiwidGFiU3RvcFdpZHRoIiwibmV4dFN0b3AiLCJhZGRNYXJrZXIiLCJfdGhpcyIsIm1hcmtlciIsIk1hcmtlciIsInJlZ2lzdGVyIiwiYWRkRGlzcG9zYWJsZUxpc3RlbmVyIiwiYW1vdW50IiwiZGlzcG9zZSIsIl9yZW1vdmVNYXJrZXIiLCJzcGxpY2UiLCJpbmRleE9mIiwiaXRlcmF0b3IiLCJzdGFydE92ZXJzY2FuIiwiZW5kT3ZlcnNjYW4iLCJCdWZmZXJTdHJpbmdJdGVyYXRvciIsIl9zdXBlciIsIl9pZCIsIl9uZXh0SWQiLCJpc0Rpc3Bvc2VkIiwiZW1pdCIsIkV2ZW50RW1pdHRlciIsIl9idWZmZXIiLCJfdHJpbVJpZ2h0IiwiX3N0YXJ0SW5kZXgiLCJfZW5kSW5kZXgiLCJfc3RhcnRPdmVyc2NhbiIsIl9lbmRPdmVyc2NhbiIsIl9jdXJyZW50IiwiaGFzTmV4dCIsIm5leHQiLCJyYW5nZSIsInJlc3VsdCIsImNvbnRlbnQiLCJJTlZFUlRFRF9ERUZBVUxUX0NPTE9SIiwiRElNX09QQUNJVFkiLCJDSEFSX0FUTEFTX0NFTExfU1BBQ0lORyIsIl9ldmVudHMiLCJvbiIsImxpc3RlbmVyIiwiaGFuZGxlciIsImRpc3Bvc2VkIiwib2ZmIiwib2JqIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiYXJncyIsIl9pIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJsaXN0ZW5lcnMiLCJEaXNwb3NhYmxlIiwiX2Rpc3Bvc2FibGVzIiwiX2lzRGlzcG9zZWQiLCJmb3JFYWNoIiwidW5yZWdpc3RlciIsImluZGV4IiwiZ2VuZXJhdGVDb25maWciLCJzY2FsZWRDaGFyV2lkdGgiLCJzY2FsZWRDaGFySGVpZ2h0IiwidGVybWluYWwiLCJjb2xvcnMiLCJjbG9uZWRDb2xvcnMiLCJmb3JlZ3JvdW5kIiwiYmFja2dyb3VuZCIsImN1cnNvciIsImN1cnNvckFjY2VudCIsInNlbGVjdGlvbiIsImFuc2kiLCJzbGljZSIsImV4cGVyaW1lbnRhbENoYXJBdGxhcyIsImRldmljZVBpeGVsUmF0aW8iLCJ3aW5kb3ciLCJmb250RmFtaWx5IiwiZm9udFNpemUiLCJmb250V2VpZ2h0IiwiZm9udFdlaWdodEJvbGQiLCJhbGxvd1RyYW5zcGFyZW5jeSIsImNvbmZpZ0VxdWFscyIsImEiLCJyZ2JhIiwiaXMyNTZDb2xvciIsImNvbG9yQ29kZSIsImlzTm9kZSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInBsYXRmb3JtIiwiY29udGFpbnMiLCJhcnIiLCJlbCIsImlzRmlyZWZveCIsImlzU2FmYXJpIiwidGVzdCIsImlzTVNJRSIsImlzTWFjIiwiaXNJcGFkIiwiaXNJcGhvbmUiLCJpc01TV2luZG93cyIsImlzTGludXgiLCJhZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIiLCJub2RlIiwidXNlQ2FwdHVyZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiQzAiLCJOVUwiLCJTT0giLCJTVFgiLCJFVFgiLCJFT1QiLCJFTlEiLCJBQ0siLCJCRUwiLCJCUyIsIkhUIiwiTEYiLCJWVCIsIkZGIiwiQ1IiLCJTTyIsIlNJIiwiRExFIiwiREMxIiwiREMyIiwiREMzIiwiREM0IiwiTkFLIiwiU1lOIiwiRVRCIiwiQ0FOIiwiRU0iLCJTVUIiLCJFU0MiLCJGUyIsIkdTIiwiUlMiLCJVUyIsIlNQIiwiREVMIiwiQzEiLCJQQUQiLCJIT1AiLCJCUEgiLCJOQkgiLCJJTkQiLCJORUwiLCJTU0EiLCJFU0EiLCJIVFMiLCJIVEoiLCJWVFMiLCJQTEQiLCJQTFUiLCJSSSIsIlNTMiIsIlNTMyIsIkRDUyIsIlBVMSIsIlBVMiIsIlNUUyIsIkNDSCIsIk1XIiwiU1BBIiwiRVBBIiwiU09TIiwiU0dDSSIsIlNDSSIsIkNTSSIsIlNUIiwiT1NDIiwiUE0iLCJBUEMiLCJDaGFyQXRsYXNDYWNoZV8xIiwiQnVmZmVyXzEiLCJDaGFyQXRsYXNVdGlsc18xIiwiQmFzZVJlbmRlckxheWVyIiwiX2NvbnRhaW5lciIsImlkIiwiekluZGV4IiwiX2FscGhhIiwiX2NvbG9ycyIsIl9zY2FsZWRDaGFyV2lkdGgiLCJfc2NhbGVkQ2hhckhlaWdodCIsIl9zY2FsZWRDZWxsV2lkdGgiLCJfc2NhbGVkQ2VsbEhlaWdodCIsIl9zY2FsZWRDaGFyTGVmdCIsIl9zY2FsZWRDaGFyVG9wIiwiX2N1cnJlbnRHbHlwaElkZW50aWZpZXIiLCJjaGFycyIsImNvZGUiLCJiZyIsImZnIiwiYm9sZCIsImRpbSIsIml0YWxpYyIsIl9jYW52YXMiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJzdHlsZSIsInRvU3RyaW5nIiwiX2luaXRDYW52YXMiLCJhcHBlbmRDaGlsZCIsInJlbW92ZUNoaWxkIiwiX2NoYXJBdGxhcyIsIl9jdHgiLCJnZXRDb250ZXh0IiwiYWxwaGEiLCJjbGVhckFsbCIsIm9uT3B0aW9uc0NoYW5nZWQiLCJvbkJsdXIiLCJvbkZvY3VzIiwib25DdXJzb3JNb3ZlIiwib25HcmlkQ2hhbmdlZCIsInN0YXJ0Um93IiwiZW5kUm93Iiwib25TZWxlY3Rpb25DaGFuZ2VkIiwic3RhcnQiLCJlbmQiLCJjb2x1bW5TZWxlY3RNb2RlIiwib25UaGVtZUNoYW5nZWQiLCJjb2xvclNldCIsIl9yZWZyZXNoQ2hhckF0bGFzIiwic2V0VHJhbnNwYXJlbmN5Iiwib2xkQ2FudmFzIiwiY2xvbmVOb2RlIiwicmVwbGFjZUNoaWxkIiwiYWNxdWlyZUNoYXJBdGxhcyIsIndhcm1VcCIsInNjYWxlZENlbGxXaWR0aCIsInNjYWxlZENlbGxIZWlnaHQiLCJzY2FsZWRDaGFyTGVmdCIsInNjYWxlZENoYXJUb3AiLCJ3aWR0aCIsInNjYWxlZENhbnZhc1dpZHRoIiwiaGVpZ2h0Iiwic2NhbGVkQ2FudmFzSGVpZ2h0IiwiY2FudmFzV2lkdGgiLCJjYW52YXNIZWlnaHQiLCJmaWxsQ2VsbHMiLCJmaWxsUmVjdCIsImZpbGxCb3R0b21MaW5lQXRDZWxscyIsImZpbGxMZWZ0TGluZUF0Q2VsbCIsInN0cm9rZVJlY3RBdENlbGwiLCJsaW5lV2lkdGgiLCJzdHJva2VSZWN0IiwiY2xlYXJSZWN0IiwiZmlsbFN0eWxlIiwiY3NzIiwiY2xlYXJDZWxscyIsImZpbGxDaGFyVHJ1ZUNvbG9yIiwiY2hhckRhdGEiLCJmb250IiwiX2dldEZvbnQiLCJ0ZXh0QmFzZWxpbmUiLCJfY2xpcFJvdyIsImZpbGxUZXh0IiwiZHJhd0NoYXJzIiwiZHJhd0JvbGRUZXh0SW5CcmlnaHRDb2xvcnMiLCJlbmFibGVCb2xkIiwiZHJhdyIsIl9kcmF3VW5jYWNoZWRDaGFycyIsInNhdmUiLCJnbG9iYWxBbHBoYSIsInJlc3RvcmUiLCJiZWdpblBhdGgiLCJyZWN0IiwiY2xpcCIsImlzQm9sZCIsImlzSXRhbGljIiwiREVGQVVMVF9GT1JFR1JPVU5EIiwiZnJvbUhleCIsIkRFRkFVTFRfQkFDS0dST1VORCIsIkRFRkFVTFRfQ1VSU09SIiwiREVGQVVMVF9DVVJTT1JfQUNDRU5UIiwiREVGQVVMVF9TRUxFQ1RJT04iLCJwYXJzZUludCIsInRvUGFkZGVkSGV4IiwiREVGQVVMVF9BTlNJX0NPTE9SUyIsInYiLCJnIiwiQ29sb3JNYW5hZ2VyIiwiY2FudmFzIiwiZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIiwiX2xpdG11c0NvbG9yIiwiY3JlYXRlTGluZWFyR3JhZGllbnQiLCJzZXRUaGVtZSIsInRoZW1lIiwiX3BhcnNlQ29sb3IiLCJibGFjayIsInJlZCIsImdyZWVuIiwieWVsbG93IiwiYmx1ZSIsIm1hZ2VudGEiLCJjeWFuIiwid2hpdGUiLCJicmlnaHRCbGFjayIsImJyaWdodFJlZCIsImJyaWdodEdyZWVuIiwiYnJpZ2h0WWVsbG93IiwiYnJpZ2h0Qmx1ZSIsImJyaWdodE1hZ2VudGEiLCJicmlnaHRDeWFuIiwiYnJpZ2h0V2hpdGUiLCJmYWxsYmFjayIsImNvbnNvbGUiLCJ3YXJuIiwiZGF0YSIsImdldEltYWdlRGF0YSIsIkJhc2VDaGFyQXRsYXMiLCJfZGlkV2FybVVwIiwiX2RvV2FybVVwIiwiYmVnaW5GcmFtZSIsImRlZmF1bHQiLCJSZW5kZXJEZWJvdW5jZXIiLCJfY2FsbGJhY2siLCJfYW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlZnJlc2giLCJyb3dTdGFydCIsInJvd0VuZCIsImlzUm93U3RhcnRTZXQiLCJfcm93U3RhcnQiLCJpc1Jvd0VuZFNldCIsIl9yb3dFbmQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJfaW5uZXJSZWZyZXNoIiwiYmxhbmtMaW5lIiwicHJvbXB0TGFiZWwiLCJ0b29NdWNoT3V0cHV0IiwiVGVybWluYWxfMSIsIlN0cmluZ3MiLCJUZXJtaW5hbCIsIl9jb3JlIiwiZWxlbWVudCIsInRleHRhcmVhIiwiYmx1ciIsImZvY3VzIiwiY29sdW1ucyIsIndyaXRlbG4iLCJvcGVuIiwicGFyZW50IiwiYXR0YWNoQ3VzdG9tS2V5RXZlbnRIYW5kbGVyIiwiY3VzdG9tS2V5RXZlbnRIYW5kbGVyIiwicmVnaXN0ZXJMaW5rTWF0Y2hlciIsInJlZ2V4IiwiZGVyZWdpc3RlckxpbmtNYXRjaGVyIiwibWF0Y2hlcklkIiwicmVnaXN0ZXJDaGFyYWN0ZXJKb2luZXIiLCJkZXJlZ2lzdGVyQ2hhcmFjdGVySm9pbmVyIiwiam9pbmVySWQiLCJjdXJzb3JZT2Zmc2V0IiwiaGFzU2VsZWN0aW9uIiwiZ2V0U2VsZWN0aW9uIiwiY2xlYXJTZWxlY3Rpb24iLCJzZWxlY3RBbGwiLCJzZWxlY3RMaW5lcyIsImRlc3Ryb3kiLCJzY3JvbGxMaW5lcyIsInNjcm9sbFBhZ2VzIiwicGFnZUNvdW50Iiwic2Nyb2xsVG9Ub3AiLCJzY3JvbGxUb0JvdHRvbSIsInNjcm9sbFRvTGluZSIsIndyaXRlIiwiZ2V0T3B0aW9uIiwic2V0T3B0aW9uIiwicmVzZXQiLCJhcHBseUFkZG9uIiwiYWRkb24iLCJUeXBlZEFycmF5VXRpbHNfMSIsIndjd2lkdGgiLCJvcHRzIiwiQ09NQklOSU5HX0JNUCIsIkNPTUJJTklOR19ISUdIIiwiY29udHJvbCIsInRhYmxlIiwiVWludDhBcnJheSIsImZpbGwiLCJudWwiLCJudW0iLCJ1Y3MiLCJtaWQiLCJiaXNlYXJjaCIsImdldFN0cmluZ0NlbGxXaWR0aCIsImNoYXJDb2RlQXQiLCJzZWNvbmQiLCJEeW5hbWljQ2hhckF0bGFzXzEiLCJOb25lQ2hhckF0bGFzXzEiLCJTdGF0aWNDaGFyQXRsYXNfMSIsImNoYXJBdGxhc0ltcGxlbWVudGF0aW9ucyIsIm5vbmUiLCJzdGF0aWMiLCJkeW5hbWljIiwiY2hhckF0bGFzQ2FjaGUiLCJuZXdDb25maWciLCJvd25lZEJ5SW5kZXgiLCJlbnRyeSIsIm93bmVkQnkiLCJjb25maWciLCJhdGxhcyIsIm5ld0VudHJ5IiwicmVtb3ZlVGVybWluYWxGcm9tQ2FjaGUiLCJQbGF0Zm9ybV8xIiwiY2xlYXJDb2xvciIsImltYWdlRGF0YSIsImNvbG9yIiwiaXNFbXB0eSIsIm9mZnNldCIsImdldEZvbnQiLCJnZW5lcmF0ZVN0YXRpY0NoYXJBdGxhc1RleHR1cmUiLCJjb250ZXh0IiwiY2FudmFzRmFjdG9yeSIsImNlbGxXaWR0aCIsImNlbGxIZWlnaHQiLCJjdHgiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJjb2xvckluZGV4IiwiY2hhckF0bGFzSW1hZ2VEYXRhIiwiY3JlYXRlSW1hZ2VCaXRtYXAiLCJTY3JlZW5EcHJNb25pdG9yIiwic2V0TGlzdGVuZXIiLCJfbGlzdGVuZXIiLCJjbGVhckxpc3RlbmVyIiwiX291dGVyTGlzdGVuZXIiLCJfY3VycmVudERldmljZVBpeGVsUmF0aW8iLCJfdXBkYXRlRHByIiwiX3Jlc29sdXRpb25NZWRpYU1hdGNoTGlzdCIsInJlbW92ZUxpc3RlbmVyIiwibWF0Y2hNZWRpYSIsImFkZExpc3RlbmVyIiwiTGlmZWN5Y2xlXzEiLCJMaWZlY3ljbGVfMiIsIk1vdXNlWm9uZU1hbmFnZXIiLCJfem9uZXMiLCJfYXJlWm9uZXNBY3RpdmUiLCJfdG9vbHRpcFRpbWVvdXQiLCJfY3VycmVudFpvbmUiLCJfbGFzdEhvdmVyQ29vcmRzIiwiZSIsIl9vbk1vdXNlRG93biIsIl9tb3VzZU1vdmVMaXN0ZW5lciIsIl9vbk1vdXNlTW92ZSIsIl9jbGlja0xpc3RlbmVyIiwiX29uQ2xpY2siLCJfZGVhY3RpdmF0ZSIsInpvbmUiLCJfYWN0aXZhdGUiLCJ5MSIsInkyIiwibGVhdmVDYWxsYmFjayIsInBhZ2VYIiwicGFnZVkiLCJfb25Ib3ZlciIsIl9maW5kWm9uZUV2ZW50QXQiLCJjbGVhclRpbWVvdXQiLCJob3ZlckNhbGxiYWNrIiwic2V0VGltZW91dCIsIl9vblRvb2x0aXAiLCJ0b29sdGlwQ2FsbGJhY2siLCJ3aWxsTGlua0FjdGl2YXRlIiwicHJldmVudERlZmF1bHQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJjbGlja0NhbGxiYWNrIiwiY29vcmRzIiwibW91c2VIZWxwZXIiLCJnZXRDb29yZHMiLCJzY3JlZW5FbGVtZW50IiwiY2hhck1lYXN1cmUiLCJ4MSIsIngyIiwiTW91c2Vab25lIiwiTW91c2VIZWxwZXIiLCJfcmVuZGVyZXIiLCJzZXRSZW5kZXJlciIsInJlbmRlcmVyIiwiZ2V0Q29vcmRzUmVsYXRpdmVUb0VsZW1lbnQiLCJldmVudCIsIm9yaWdpbmFsRWxlbWVudCIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJvZmZzZXRQYXJlbnQiLCJvd25lckRvY3VtZW50IiwiYm9keSIsInNjcm9sbExlZnQiLCJwYXJlbnRFbGVtZW50IiwiY29sQ291bnQiLCJyb3dDb3VudCIsImlzU2VsZWN0aW9uIiwiY2VpbCIsImRpbWVuc2lvbnMiLCJhY3R1YWxDZWxsV2lkdGgiLCJhY3R1YWxDZWxsSGVpZ2h0IiwiZ2V0UmF3Qnl0ZUNvb3JkcyIsInByb3Bvc2VHZW9tZXRyeSIsInRlcm0iLCJwYXJlbnRFbGVtZW50U3R5bGUiLCJnZXRDb21wdXRlZFN0eWxlIiwicGFyZW50RWxlbWVudEhlaWdodCIsImdldFByb3BlcnR5VmFsdWUiLCJwYXJlbnRFbGVtZW50V2lkdGgiLCJlbGVtZW50U3R5bGUiLCJhdmFpbGFibGVIZWlnaHQiLCJhdmFpbGFibGVXaWR0aCIsInZpZXdwb3J0Iiwic2Nyb2xsQmFyV2lkdGgiLCJmbG9vciIsImZpdCIsImdlb21ldHJ5IiwidGVybWluYWxDb25zdHJ1Y3RvciIsIl9fd2VicGFja19leHBvcnRzX18iLCJ4dGVybV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwieHRlcm1fbGliX2FkZG9uc19maXRfZml0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJ0ZXJtaW5hbF9kb20iLCJnZXRFbGVtZW50QnlJZCIsInh0ZXJtIiwiQnVmZmVyU2V0XzEiLCJDb21wb3NpdGlvbkhlbHBlcl8xIiwiVmlld3BvcnRfMSIsIkNsaXBib2FyZF8xIiwiRXNjYXBlU2VxdWVuY2VzXzEiLCJJbnB1dEhhbmRsZXJfMSIsIlJlbmRlcmVyXzEiLCJMaW5raWZpZXJfMSIsIlNlbGVjdGlvbk1hbmFnZXJfMSIsIkNoYXJNZWFzdXJlXzEiLCJCcm93c2VyIiwiTW91c2VIZWxwZXJfMSIsIkNsb25lXzEiLCJTb3VuZE1hbmFnZXJfMSIsIkNvbG9yTWFuYWdlcl8xIiwiTW91c2Vab25lTWFuYWdlcl8xIiwiQWNjZXNzaWJpbGl0eU1hbmFnZXJfMSIsIlNjcmVlbkRwck1vbml0b3JfMSIsIkRvbVJlbmRlcmVyXzEiLCJLZXlib2FyZF8xIiwiQ09OU1RSVUNUT1JfT05MWV9PUFRJT05TIiwiREVGQVVMVF9PUFRJT05TIiwiY29udmVydEVvbCIsInRlcm1OYW1lIiwiY3Vyc29yQmxpbmsiLCJjdXJzb3JTdHlsZSIsImJlbGxTb3VuZCIsIkRFRkFVTFRfQkVMTF9TT1VORCIsImJlbGxTdHlsZSIsImxpbmVIZWlnaHQiLCJsZXR0ZXJTcGFjaW5nIiwic2NyZWVuS2V5cyIsInNjcmVlblJlYWRlck1vZGUiLCJkZWJ1ZyIsIm1hY09wdGlvbklzTWV0YSIsIm1hY09wdGlvbkNsaWNrRm9yY2VzU2VsZWN0aW9uIiwiY2FuY2VsRXZlbnRzIiwiZGlzYWJsZVN0ZGluIiwidXNlRmxvd0NvbnRyb2wiLCJyaWdodENsaWNrU2VsZWN0c1dvcmQiLCJyZW5kZXJlclR5cGUiLCJicm93c2VyIiwiX2JsYW5rTGluZSIsImNsb25lIiwiX3NldHVwIiwiX2N1c3RvbUtleUV2ZW50SGFuZGxlciIsInBhcmVudE5vZGUiLCJrZXlzIiwiX3BhcmVudCIsImN1cnNvclN0YXRlIiwiY3Vyc29ySGlkZGVuIiwiYXBwbGljYXRpb25LZXlwYWQiLCJhcHBsaWNhdGlvbkN1cnNvciIsIm9yaWdpbk1vZGUiLCJpbnNlcnRNb2RlIiwid3JhcGFyb3VuZE1vZGUiLCJicmFja2V0ZWRQYXN0ZU1vZGUiLCJjaGFyc2V0IiwiZ2NoYXJzZXQiLCJnbGV2ZWwiLCJjaGFyc2V0cyIsImN1ckF0dHIiLCJwYXJhbXMiLCJjdXJyZW50UGFyYW0iLCJ3cml0ZUJ1ZmZlciIsIl93cml0ZUluUHJvZ3Jlc3MiLCJfeG9mZlNlbnRUb0NhdGNoVXAiLCJfdXNlclNjcm9sbGluZyIsIl9pbnB1dEhhbmRsZXIiLCJJbnB1dEhhbmRsZXIiLCJzZWxlY3Rpb25NYW5hZ2VyIiwibGlua2lmaWVyIiwiTGlua2lmaWVyIiwiX21vdXNlWm9uZU1hbmFnZXIiLCJzb3VuZE1hbmFnZXIiLCJTb3VuZE1hbmFnZXIiLCJidWZmZXJzIiwiQnVmZmVyU2V0IiwiaW5pdEJ1ZmZlcnNMaXN0ZW5lcnMiLCJhY3RpdmUiLCJlcmFzZUF0dHIiLCJhY3RpdmVFbGVtZW50IiwiaGFzRm9jdXMiLCJFcnJvciIsImVycm9yIiwiX3NldFRoZW1lIiwibmV3QnVmZmVyTGVuZ3RoIiwiYnVmZmVyIiwibmVlZHNSZWZyZXNoIiwibWVhc3VyZSIsIm9uUmVzaXplIiwiX3NldHVwUmVuZGVyZXIiLCJvbkNoYXJTaXplQ2hhbmdlZCIsIl90aGVtZSIsInN5bmNTY3JvbGxBcmVhIiwiX2FjY2Vzc2liaWxpdHlNYW5hZ2VyIiwiQWNjZXNzaWJpbGl0eU1hbmFnZXIiLCJub3JtYWwiLCJhbHQiLCJfb25UZXh0QXJlYUZvY3VzIiwiZXYiLCJzZW5kRm9jdXMiLCJ1cGRhdGVDdXJzb3JTdHlsZSIsInNob3dDdXJzb3IiLCJfb25UZXh0QXJlYUJsdXIiLCJyZW1vdmUiLCJfaW5pdEdsb2JhbCIsIl9iaW5kS2V5cyIsImNvcHlIYW5kbGVyIiwicGFzdGVIYW5kbGVyV3JhcHBlciIsInBhc3RlSGFuZGxlciIsImJ1dHRvbiIsInJpZ2h0Q2xpY2tIYW5kbGVyIiwibW92ZVRleHRBcmVhVW5kZXJNb3VzZUN1cnNvciIsInNlbGYiLCJfa2V5RG93biIsIl9rZXlQcmVzcyIsImtleUNvZGUiLCJ3YXNNb2RpZmllcktleU9ubHlFdmVudCIsIl9rZXlVcCIsIl9jb21wb3NpdGlvbkhlbHBlciIsImNvbXBvc2l0aW9uc3RhcnQiLCJjb21wb3NpdGlvbnVwZGF0ZSIsImNvbXBvc2l0aW9uZW5kIiwidXBkYXRlQ29tcG9zaXRpb25FbGVtZW50cyIsIl9xdWV1ZUxpbmtpZmljYXRpb24iLCJfY29udGV4dCIsImRlZmF1bHRWaWV3IiwiX2RvY3VtZW50IiwiX3NjcmVlbkRwck1vbml0b3IiLCJkaXIiLCJzZXRBdHRyaWJ1dGUiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJfdmlld3BvcnRFbGVtZW50IiwiX3ZpZXdwb3J0U2Nyb2xsQXJlYSIsIl9oZWxwZXJDb250YWluZXIiLCJhdHRhY2hUb0RvbSIsInRhYkluZGV4IiwiX2NvbXBvc2l0aW9uVmlldyIsIkNvbXBvc2l0aW9uSGVscGVyIiwiQ2hhck1lYXN1cmUiLCJWaWV3cG9ydCIsImNvbG9yTWFuYWdlciIsIm9uV2luZG93UmVzaXplIiwiU2VsZWN0aW9uTWFuYWdlciIsIm9uTW91c2VEb3duIiwidGV4dCIsInNlbGVjdCIsImJpbmRNb3VzZSIsIlJlbmRlcmVyIiwiRG9tUmVuZGVyZXIiLCJwcmVzc2VkIiwic2VuZEJ1dHRvbiIsInBvcyIsInNoaWZ0IiwibWV0YSIsImN0cmwiLCJtb2QiLCJvdmVycmlkZVR5cGUiLCJ3aGljaCIsImRldGFpbCIsImRlbHRhWSIsInNoaWZ0S2V5IiwibWV0YUtleSIsImN0cmxLZXkiLCJ2dDIwME1vdXNlIiwibm9ybWFsTW91c2UiLCJnZXRCdXR0b24iLCJzZW5kRXZlbnQiLCJlbmNvZGUiLCJ1dGZNb3VzZSIsIl92dDMwME1vdXNlIiwiZGF0YV8xIiwiX2RlY0xvY2F0b3IiLCJwYWdlIiwidXJ4dnRNb3VzZSIsInNnck1vdXNlIiwibW91c2VFdmVudHMiLCJzaG91bGRGb3JjZVNlbGVjdGlvbiIsImNhbmNlbCIsIm1vdmVIYW5kbGVyIiwieDEwTW91c2UiLCJoYXNTY3JvbGxiYWNrIiwiZ2V0TGluZXNTY3JvbGxlZCIsInNlcXVlbmNlIiwiYWJzIiwib25XaGVlbCIsIm9uVG91Y2hTdGFydCIsIm9uVG91Y2hNb3ZlIiwicmVmcmVzaFJvd3MiLCJsaW5raWZ5Um93cyIsInNob3VsZENvbHVtblNlbGVjdCIsInNjcm9sbCIsInVzZVJlY3ljbGluZyIsInRvcFJvdyIsImJvdHRvbVJvdyIsIndpbGxCdWZmZXJCZVRyaW1tZWQiLCJpc0Z1bGwiLCJyZWN5Y2xlIiwiY29weUZyb20iLCJzY3JvbGxSZWdpb25IZWlnaHQiLCJzaGlmdEVsZW1lbnRzIiwidXBkYXRlUmFuZ2UiLCJkaXNwIiwic3VwcHJlc3NTY3JvbGxFdmVudCIsIm9sZFlkaXNwIiwic2Nyb2xsQW1vdW50IiwiX2lubmVyV3JpdGUiLCJ3cml0ZUJhdGNoIiwiX3JlZnJlc2hTdGFydCIsIl9yZWZyZXNoRW5kIiwicGFyc2UiLCJzZWxlY3Rpb25UZXh0Iiwia2V5ZG93biIsImV2YWx1YXRlS2V5Ym9hcmRFdmVudCIsInNjcm9sbENvdW50IiwiX2lzVGhpcmRMZXZlbFNoaWZ0IiwidGhpcmRMZXZlbEtleSIsImFsdEtleSIsInNldGdMZXZlbCIsInNldGdDaGFyc2V0IiwiY2hhckNvZGUiLCJiZWxsIiwiX3NvdW5kQmVsbCIsInBsYXlCZWxsU291bmQiLCJfdmlzdWFsQmVsbCIsIl92aXN1YWxCZWxsVGltZXIiLCJsb2ciLCJpc05hTiIsIm1heFJhbmdlIiwiY3VyIiwiaXMiLCJoYW5kbGVUaXRsZSIsInRpdGxlIiwicmV2ZXJzZUluZGV4IiwiaW5wdXRIYW5kbGVyIiwidGFiU2V0IiwiZm9yY2UiLCJzdG9wUHJvcGFnYXRpb24iLCJtYXRjaENvbG9yIiwicjEiLCJnMSIsImIxIiwiaGFzaCIsIm1hdGNoQ29sb3JDYWNoZSIsImRpZmYiLCJsZGlmZiIsIkluZmluaXR5IiwibGkiLCJtYXRjaENvbG9yRGlzdGFuY2UiLCJyMiIsImcyIiwiYjIiLCJwb3ciLCJfbm9ybWFsIiwiX2FsdCIsIl9hY3RpdmVCdWZmZXIiLCJhY3RpdmF0ZU5vcm1hbEJ1ZmZlciIsImFjdGl2ZUJ1ZmZlciIsImluYWN0aXZlQnVmZmVyIiwiYWN0aXZhdGVBbHRCdWZmZXIiLCJfbWF4TGVuZ3RoIiwiX2FycmF5IiwiX2xlbmd0aCIsIm5ld0FycmF5IiwiX2dldEN5Y2xpY0luZGV4IiwibmV3TGVuZ3RoIiwiZGVsZXRlQ291bnQiLCJpdGVtcyIsImNvdW50VG9UcmltIiwiY291bnQiLCJleHBhbmRMaXN0QnkiLCJfZGF0YSIsIl9wdXNoIiwiX3BvcCIsIl9zcGxpY2UiLCJfYSIsInJlbW92ZWQiLCJjb25jYXQiLCJpbnNlcnRDZWxscyIsImRlbGV0ZUNlbGxzIiwicmVwbGFjZUNlbGxzIiwic2hyaW5rIiwiQ0VMTF9TSVpFIiwiX2NvbWJpbmVkIiwiVWludDMyQXJyYXkiLCJzdHJpbmdEYXRhIiwic3ViYXJyYXkiLCJfdGV4dGFyZWEiLCJfaXNDb21wb3NpbmciLCJfaXNTZW5kaW5nQ29tcG9zaXRpb24iLCJfY29tcG9zaXRpb25Qb3NpdGlvbiIsInRleHRDb250ZW50IiwiX2ZpbmFsaXplQ29tcG9zaXRpb24iLCJfaGFuZGxlQW55VGV4dGFyZWFDaGFuZ2VzIiwid2FpdEZvclByb3BvZ2F0aW9uIiwiX2NsZWFyVGV4dGFyZWFQb3NpdGlvbiIsImN1cnJlbnRDb21wb3NpdGlvblBvc2l0aW9uXzEiLCJpbnB1dCIsIm9sZFZhbHVlIiwicmVwbGFjZSIsImRvbnRSZWN1cnNlIiwiaXNDdXJzb3JJblZpZXdwb3J0IiwiY3Vyc29yVG9wIiwiY3Vyc29yTGVmdCIsImxlZnQiLCJ0b3AiLCJjb21wb3NpdGlvblZpZXdCb3VuZHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJGQUxMQkFDS19TQ1JPTExfQkFSX1dJRFRIIiwiX3Njcm9sbEFyZWEiLCJfY2hhck1lYXN1cmUiLCJfY3VycmVudFJvd0hlaWdodCIsIl9sYXN0UmVjb3JkZWRCdWZmZXJMZW5ndGgiLCJfbGFzdFJlY29yZGVkVmlld3BvcnRIZWlnaHQiLCJfbGFzdFJlY29yZGVkQnVmZmVySGVpZ2h0IiwiX2xhc3RTY3JvbGxUb3AiLCJfd2hlZWxQYXJ0aWFsU2Nyb2xsIiwiX3JlZnJlc2hBbmltYXRpb25GcmFtZSIsIl9pZ25vcmVOZXh0U2Nyb2xsRXZlbnQiLCJvZmZzZXRXaWR0aCIsIl9vblNjcm9sbCIsImJhY2tncm91bmRDb2xvciIsIl9yZWZyZXNoIiwib2Zmc2V0SGVpZ2h0IiwibmV3QnVmZmVySGVpZ2h0Iiwicm91bmQiLCJuZXdTY3JvbGxUb3AiLCJfZ2V0UGl4ZWxzU2Nyb2xsZWQiLCJkZWx0YU1vZGUiLCJXaGVlbEV2ZW50IiwiRE9NX0RFTFRBX0xJTkUiLCJET01fREVMVEFfUEFHRSIsIkRPTV9ERUxUQV9QSVhFTCIsIl9sYXN0VG91Y2hZIiwidG91Y2hlcyIsInByZXBhcmVUZXh0Rm9yVGVybWluYWwiLCJicmFja2V0VGV4dEZvclBhc3RlIiwicG9zaXRpb24iLCJjbGllbnRYIiwiY2xpZW50WSIsImNsaXBib2FyZERhdGEiLCJzZXREYXRhIiwiZGlzcGF0Y2hQYXN0ZSIsImdldERhdGEiLCJzaG91bGRTZWxlY3RXb3JkIiwiaXNDbGlja0luU2VsZWN0aW9uIiwic2VsZWN0V29yZEF0Q3Vyc29yIiwiQ2hhcnNldHNfMSIsIkNoYXJXaWR0aF8xIiwiRXNjYXBlU2VxdWVuY2VQYXJzZXJfMSIsIkdMRVZFTCIsIigiLCIpIiwiKiIsIisiLCItIiwiLiIsIlJlcXVlc3RUZXJtaW5mbyIsImhvb2siLCJjb2xsZWN0IiwiZmxhZyIsInB1dCIsInVuaG9vayIsIkRFQ1JRU1MiLCJwdCIsImJsb2NrIiwidW5kZXJsaW5lIiwiYmFyIiwiX3BhcnNlciIsIkVzY2FwZVNlcXVlbmNlUGFyc2VyIiwiX3N1cnJvZ2F0ZUZpcnN0Iiwic2V0Q3NpSGFuZGxlckZhbGxiYWNrIiwic2V0RXNjSGFuZGxlckZhbGxiYWNrIiwic2V0RXhlY3V0ZUhhbmRsZXJGYWxsYmFjayIsInNldE9zY0hhbmRsZXJGYWxsYmFjayIsImlkZW50aWZpZXIiLCJzZXRQcmludEhhbmRsZXIiLCJwcmludCIsInNldENzaUhhbmRsZXIiLCJpbnNlcnRDaGFycyIsImN1cnNvclVwIiwiY3Vyc29yRG93biIsImN1cnNvckZvcndhcmQiLCJjdXJzb3JCYWNrd2FyZCIsImN1cnNvck5leHRMaW5lIiwiY3Vyc29yUHJlY2VkaW5nTGluZSIsImN1cnNvckNoYXJBYnNvbHV0ZSIsImN1cnNvclBvc2l0aW9uIiwiY3Vyc29yRm9yd2FyZFRhYiIsImVyYXNlSW5EaXNwbGF5IiwiZXJhc2VJbkxpbmUiLCJpbnNlcnRMaW5lcyIsImRlbGV0ZUxpbmVzIiwiZGVsZXRlQ2hhcnMiLCJzY3JvbGxVcCIsInNjcm9sbERvd24iLCJlcmFzZUNoYXJzIiwiY3Vyc29yQmFja3dhcmRUYWIiLCJjaGFyUG9zQWJzb2x1dGUiLCJoUG9zaXRpb25SZWxhdGl2ZSIsInJlcGVhdFByZWNlZGluZ0NoYXJhY3RlciIsInNlbmREZXZpY2VBdHRyaWJ1dGVzIiwibGluZVBvc0Fic29sdXRlIiwidlBvc2l0aW9uUmVsYXRpdmUiLCJoVlBvc2l0aW9uIiwidGFiQ2xlYXIiLCJzZXRNb2RlIiwicmVzZXRNb2RlIiwiY2hhckF0dHJpYnV0ZXMiLCJkZXZpY2VTdGF0dXMiLCJzb2Z0UmVzZXQiLCJzZXRDdXJzb3JTdHlsZSIsInNldFNjcm9sbFJlZ2lvbiIsInNhdmVDdXJzb3IiLCJyZXN0b3JlQ3Vyc29yIiwic2V0RXhlY3V0ZUhhbmRsZXIiLCJsaW5lRmVlZCIsImNhcnJpYWdlUmV0dXJuIiwiYmFja3NwYWNlIiwidGFiIiwic2hpZnRPdXQiLCJzaGlmdEluIiwibmV4dExpbmUiLCJzZXRPc2NIYW5kbGVyIiwic2V0VGl0bGUiLCJzZXRFc2NIYW5kbGVyIiwia2V5cGFkQXBwbGljYXRpb25Nb2RlIiwia2V5cGFkTnVtZXJpY01vZGUiLCJzZWxlY3REZWZhdWx0Q2hhcnNldCIsIl9sb29wXzEiLCJ0aGlzXzEiLCJzZWxlY3RDaGFyc2V0IiwiQ0hBUlNFVFMiLCJzZXRFcnJvckhhbmRsZXIiLCJzdGF0ZSIsInNldERjc0hhbmRsZXIiLCJjdXJzb3JTdGFydFgiLCJjdXJzb3JTdGFydFkiLCJjaFdpZHRoIiwiYnVmZmVyUm93Iiwic3RyaW5nUG9zaXRpb24iLCJjaGFyQXQiLCJjaE1pbnVzT25lIiwiY2hNaW51c1R3byIsIm9yaWdpbmFsWCIsInBhcmFtIiwiY29sIiwicm93IiwiX2VyYXNlSW5CdWZmZXJMaW5lIiwiY2xlYXJXcmFwIiwiX3Jlc2V0QnVmZmVyTGluZSIsInNjcm9sbEJhY2tTaXplIiwic2Nyb2xsQm90dG9tUm93c09mZnNldCIsInNjcm9sbEJvdHRvbUFic29sdXRlIiwiREVGQVVMVF9DSEFSU0VUIiwic2F2ZWRDb2xzIiwiZGlzYWJsZSIsImVuYWJsZSIsImZsYWdzIiwiaXNCbGlua2luZyIsInNhdmVkQ3VyQXR0ciIsImNvbGxlY3RBbmRGbGFnIiwibGV2ZWwiLCJgIiwiZiIsImgiLCJrIiwicSIsInUiLCJ3IiwieiIsInsiLCJ8IiwifSIsIn4iLCIjIiwiQCIsIlsiLCJcXCIsIl0iLCJeIiwiXyIsImZpbGxGYWxsYmFjayIsImFycmF5IiwibG93IiwiaGlnaCIsIlRyYW5zaXRpb25UYWJsZSIsImFjdGlvbiIsImFkZE1hbnkiLCJjb2RlcyIsIlBSSU5UQUJMRVMiLCJFWEVDVVRBQkxFUyIsIlZUNTAwX1RSQU5TSVRJT05fVEFCTEUiLCJzdGF0ZXMiLCJEY3NEdW1teSIsIlRSQU5TSVRJT05TIiwiaW5pdGlhbFN0YXRlIiwiY3VycmVudFN0YXRlIiwiX29zYyIsIl9wYXJhbXMiLCJfY29sbGVjdCIsIl9wcmludEhhbmRsZXJGYiIsIl9leGVjdXRlSGFuZGxlckZiIiwiX2NzaUhhbmRsZXJGYiIsIl9lc2NIYW5kbGVyRmIiLCJfb3NjSGFuZGxlckZiIiwiX2Rjc0hhbmRsZXJGYiIsIl9lcnJvckhhbmRsZXJGYiIsIl9wcmludEhhbmRsZXIiLCJfZXhlY3V0ZUhhbmRsZXJzIiwiX2NzaUhhbmRsZXJzIiwiX2VzY0hhbmRsZXJzIiwiX29zY0hhbmRsZXJzIiwiX2Rjc0hhbmRsZXJzIiwiX2FjdGl2ZURjc0hhbmRsZXIiLCJfZXJyb3JIYW5kbGVyIiwiY2FsbGJhY2siLCJjbGVhclByaW50SGFuZGxlciIsImNsZWFyRXhlY3V0ZUhhbmRsZXIiLCJjbGVhckNzaUhhbmRsZXIiLCJjbGVhckVzY0hhbmRsZXIiLCJpZGVudCIsImNsZWFyT3NjSGFuZGxlciIsImNsZWFyRGNzSGFuZGxlciIsInNldERjc0hhbmRsZXJGYWxsYmFjayIsImNsZWFyRXJyb3JIYW5kbGVyIiwidHJhbnNpdGlvbiIsImRjcyIsIm9zYyIsImRjc0hhbmRsZXIiLCJhYm9ydCIsImlkeCIsIlRleHRSZW5kZXJMYXllcl8xIiwiU2VsZWN0aW9uUmVuZGVyTGF5ZXJfMSIsIkN1cnNvclJlbmRlckxheWVyXzEiLCJMaW5rUmVuZGVyTGF5ZXJfMSIsIlJlbmRlckRlYm91bmNlcl8xIiwiQ2hhcmFjdGVySm9pbmVyUmVnaXN0cnlfMSIsIl9pc1BhdXNlZCIsIl9uZWVkc0Z1bGxSZWZyZXNoIiwiX2NoYXJhY3RlckpvaW5lclJlZ2lzdHJ5IiwiQ2hhcmFjdGVySm9pbmVyUmVnaXN0cnkiLCJfcmVuZGVyTGF5ZXJzIiwiVGV4dFJlbmRlckxheWVyIiwiU2VsZWN0aW9uUmVuZGVyTGF5ZXIiLCJMaW5rUmVuZGVyTGF5ZXIiLCJDdXJzb3JSZW5kZXJMYXllciIsIl9kZXZpY2VQaXhlbFJhdGlvIiwiX3VwZGF0ZURpbWVuc2lvbnMiLCJfcmVuZGVyRGVib3VuY2VyIiwiX3JlbmRlclJvd3MiLCJvYnNlcnZlcl8xIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJvbkludGVyc2VjdGlvbkNoYW5nZSIsInRocmVzaG9sZCIsIm9ic2VydmUiLCJkaXNjb25uZWN0IiwiaW50ZXJzZWN0aW9uUmF0aW8iLCJfcnVuT3BlcmF0aW9uIiwib3BlcmF0aW9uIiwiR3JpZENhY2hlXzEiLCJCYXNlUmVuZGVyTGF5ZXJfMSIsImNvbnRhaW5lciIsImNoYXJhY3RlckpvaW5lclJlZ2lzdHJ5IiwiX2NoYXJhY3Rlck92ZXJsYXBDYWNoZSIsIl9zdGF0ZSIsIkdyaWRDYWNoZSIsInRlcm1pbmFsRm9udCIsIl9jaGFyYWN0ZXJXaWR0aCIsIl9jaGFyYWN0ZXJGb250IiwiX2ZvckVhY2hDZWxsIiwiZmlyc3RSb3ciLCJsYXN0Um93Iiwiam9pbmVyUmVnaXN0cnkiLCJqb2luZWRSYW5nZXMiLCJnZXRKb2luZWRDaGFyYWN0ZXJzIiwiaXNKb2luZWQiLCJsYXN0Q2hhclgiLCJfaXNPdmVybGFwcGluZyIsInRlbXAiLCJfZHJhd0JhY2tncm91bmQiLCJzdGFydFgiLCJzdGFydFkiLCJwcmV2RmlsbFN0eWxlIiwibmV4dEZpbGxTdHlsZSIsIl9kcmF3Rm9yZWdyb3VuZCIsImNhY2hlIiwib3ZlcmxhcHMiLCJtZWFzdXJlVGV4dCIsIkJhc2VDaGFyQXRsYXNfMSIsIkNoYXJBdGxhc0dlbmVyYXRvcl8xIiwiTFJVTWFwXzEiLCJURVhUVVJFX1dJRFRIIiwiVEVYVFVSRV9IRUlHSFQiLCJUUkFOU1BBUkVOVF9DT0xPUiIsImdldEdseXBoQ2FjaGVLZXkiLCJnbHlwaCIsIkR5bmFtaWNDaGFyQXRsYXMiLCJfY29uZmlnIiwiX2RyYXdUb0NhY2hlQ291bnQiLCJfZ2x5cGhzV2FpdGluZ09uQml0bWFwIiwiX2JpdG1hcENvbW1pdFRpbWVvdXQiLCJfYml0bWFwIiwiX2NhY2hlQ2FudmFzIiwiX2NhY2hlQ3R4IiwidG1wQ2FudmFzIiwiX3RtcEN0eCIsIl93aWR0aCIsIl9oZWlnaHQiLCJjYXBhY2l0eSIsIl9jYWNoZU1hcCIsInByZWFsbG9jIiwiX2NhbkNhY2hlIiwiZ2x5cGhLZXkiLCJjYWNoZVZhbHVlIiwiX2RyYXdGcm9tQ2FjaGUiLCJzaXplIiwicGVlayIsImNhY2hlVmFsdWVfMSIsIl9kcmF3VG9DYWNoZSIsIl90b0Nvb3JkaW5hdGVYIiwiX3RvQ29vcmRpbmF0ZVkiLCJjYWNoZVgiLCJjYWNoZVkiLCJkcmF3SW1hZ2UiLCJpbkJpdG1hcCIsIl9nZXRDb2xvckZyb21BbnNpSW5kZXgiLCJfZ2V0QmFja2dyb3VuZENvbG9yIiwiX2dldEZvcmVncm91bmRDb2xvciIsImZvbnRTdHlsZSIsInB1dEltYWdlRGF0YSIsIl9hZGRHbHlwaFRvQml0bWFwIiwiX2dlbmVyYXRlQml0bWFwIiwiZ2x5cGhzTW92aW5nVG9CaXRtYXAiLCJ0aGVuIiwiYml0bWFwIiwiTFJVTWFwIiwiX21hcCIsIl9oZWFkIiwiX3RhaWwiLCJfbm9kZVBvb2wiLCJfdW5saW5rTm9kZSIsInByZXYiLCJfYXBwZW5kTm9kZSIsInRhaWwiLCJub2RlUG9vbCIsInBlZWtWYWx1ZSIsImhlYWQiLCJOb25lQ2hhckF0bGFzIiwiU3RhdGljQ2hhckF0bGFzIiwiX2NhbnZhc0ZhY3RvcnkiLCJIVE1MQ2FudmFzRWxlbWVudCIsIl90ZXh0dXJlIiwidGV4dHVyZSIsIl9pc0NhY2hlZCIsImlzQXNjaWkiLCJpc0Jhc2ljQ29sb3IiLCJpc0RlZmF1bHRDb2xvciIsImlzRGVmYXVsdEJhY2tncm91bmQiLCJjaGFyQXRsYXNDZWxsV2lkdGgiLCJjaGFyQXRsYXNDZWxsSGVpZ2h0IiwiX2NsZWFyU3RhdGUiLCJfZGlkU3RhdGVDaGFuZ2UiLCJ2aWV3cG9ydFN0YXJ0Um93Iiwidmlld3BvcnRFbmRSb3ciLCJ2aWV3cG9ydENhcHBlZFN0YXJ0Um93Iiwidmlld3BvcnRDYXBwZWRFbmRSb3ciLCJzdGFydFJvd0VuZENvbCIsIm1pZGRsZVJvd3NDb3VudCIsIl9hcmVDb29yZGluYXRlc0VxdWFsIiwiY29vcmQxIiwiY29vcmQyIiwiaXNGb2N1c2VkIiwiX2N1cnNvclJlbmRlcmVycyIsIl9yZW5kZXJCYXJDdXJzb3IiLCJfcmVuZGVyQmxvY2tDdXJzb3IiLCJfcmVuZGVyVW5kZXJsaW5lQ3Vyc29yIiwiX2NsZWFyQ3Vyc29yIiwiX2N1cnNvckJsaW5rU3RhdGVNYW5hZ2VyIiwicGF1c2UiLCJyZXN1bWUiLCJDdXJzb3JCbGlua1N0YXRlTWFuYWdlciIsIl9yZW5kZXIiLCJyZXN0YXJ0QmxpbmtBbmltYXRpb24iLCJpc1BhdXNlZCIsInRyaWdnZXJlZEJ5QW5pbWF0aW9uRnJhbWUiLCJjdXJzb3JZIiwidmlld3BvcnRSZWxhdGl2ZUN1cnNvclkiLCJfcmVuZGVyQmx1ckN1cnNvciIsImlzQ3Vyc29yVmlzaWJsZSIsInN0cm9rZVN0eWxlIiwiX3JlbmRlckNhbGxiYWNrIiwiX3Jlc3RhcnRJbnRlcnZhbCIsIl9ibGlua1N0YXJ0VGltZW91dCIsIl9ibGlua0ludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsIl9hbmltYXRpb25UaW1lUmVzdGFydGVkIiwiRGF0ZSIsIm5vdyIsInRpbWVUb1N0YXJ0IiwidGltZSIsInNldEludGVydmFsIiwiX29uTGlua0hvdmVyIiwiX29uTGlua0xlYXZlIiwiX2NsZWFyQ3VycmVudExpbmsiLCJtaWRkbGVSb3dDb3VudCIsIl9jaGFyYWN0ZXJKb2luZXJzIiwiX25leHRDaGFyYWN0ZXJKb2luZXJJZCIsImpvaW5lciIsInJhbmdlcyIsImxpbmVTdHIiLCJyYW5nZVN0YXJ0Q29sdW1uIiwiY3VycmVudFN0cmluZ0luZGV4IiwicmFuZ2VTdGFydFN0cmluZ0luZGV4IiwicmFuZ2VBdHRyIiwiX2dldEpvaW5lZFJhbmdlcyIsImxpbmVEYXRhIiwiam9pbmVyUmFuZ2VzIiwiX21lcmdlUmFuZ2VzIiwiX3N0cmluZ1Jhbmdlc1RvQ2VsbFJhbmdlcyIsImN1cnJlbnRSYW5nZUluZGV4IiwiY3VycmVudFJhbmdlU3RhcnRlZCIsImN1cnJlbnRSYW5nZSIsImxlbmd0aF8xIiwibmV3UmFuZ2UiLCJpblJhbmdlIiwiX2xpbmtNYXRjaGVycyIsIl9uZXh0TGlua01hdGNoZXJJZCIsIl9yb3dzVG9MaW5raWZ5IiwibW91c2Vab25lTWFuYWdlciIsIl9yb3dzVGltZW91dElkIiwiX2xpbmtpZnlSb3dzIiwiVElNRV9CRUZPUkVfTElOS0lGWSIsImFic29sdXRlUm93SW5kZXhTdGFydCIsImFic29sdXRlUm93SW5kZXhFbmQiLCJvdmVyc2NhbkxpbmVMaW1pdCIsIk9WRVJTQ0FOX0NIQVJfTElNSVQiLCJfZG9MaW5raWZ5Um93IiwibWF0Y2hlciIsIm1hdGNoSW5kZXgiLCJ2YWxpZGF0aW9uQ2FsbGJhY2siLCJob3ZlclRvb2x0aXBDYWxsYmFjayIsImhvdmVyTGVhdmVDYWxsYmFjayIsInByaW9yaXR5IiwiX2FkZExpbmtNYXRjaGVyVG9MaXN0Iiwicm93SW5kZXgiLCJtYXRjaCIsInJleCIsIlJlZ0V4cCIsInNvdXJjZSIsInVyaSIsImxhc3RJbmRleCIsImJ1ZmZlckluZGV4IiwiaXNWYWxpZCIsIl9hZGRMaW5rIiwiZXhlYyIsIl9jcmVhdGVMaW5rSG92ZXJFdmVudCIsIlNlbGVjdGlvbk1vZGVsXzEiLCJBbHRDbGlja0hhbmRsZXJfMSIsIk5PTl9CUkVBS0lOR19TUEFDRV9DSEFSIiwiQUxMX05PTl9CUkVBS0lOR19TUEFDRV9SRUdFWCIsIl9lbmFibGVkIiwiX2luaXRMaXN0ZW5lcnMiLCJfbW9kZWwiLCJTZWxlY3Rpb25Nb2RlbCIsIl9hY3RpdmVTZWxlY3Rpb25Nb2RlIiwiX3JlbW92ZU1vdXNlRG93bkxpc3RlbmVycyIsIl9tb3VzZVVwTGlzdGVuZXIiLCJfb25Nb3VzZVVwIiwiX3RyaW1MaXN0ZW5lciIsIl9vblRyaW0iLCJfb25CdWZmZXJBY3RpdmF0ZSIsImZpbmFsU2VsZWN0aW9uU3RhcnQiLCJmaW5hbFNlbGVjdGlvbkVuZCIsImxpbmVUZXh0IiwiYnVmZmVyTGluZSIsIm1hcCIsImpvaW4iLCJpc05ld1NlbGVjdGlvbiIsIl9nZXRNb3VzZUJ1ZmZlckNvb3JkcyIsIl9hcmVDb29yZHNJblNlbGVjdGlvbiIsIl9zZWxlY3RXb3JkQXQiLCJzZWxlY3Rpb25FbmQiLCJpc1NlbGVjdEFsbEFjdGl2ZSIsInNlbGVjdGlvblN0YXJ0Iiwib25UcmltIiwiX2dldE1vdXNlRXZlbnRTY3JvbGxBbW91bnQiLCJ0ZXJtaW5hbEhlaWdodCIsIl9tb3VzZURvd25UaW1lU3RhbXAiLCJ0aW1lU3RhbXAiLCJfZHJhZ1Njcm9sbEFtb3VudCIsIl9vbkluY3JlbWVudGFsQ2xpY2siLCJfb25TaW5nbGVDbGljayIsIl9vbkRvdWJsZUNsaWNrIiwiX29uVHJpcGxlQ2xpY2siLCJfYWRkTW91c2VEb3duTGlzdGVuZXJzIiwiX2RyYWdTY3JvbGxJbnRlcnZhbFRpbWVyIiwiX2RyYWdTY3JvbGwiLCJzZWxlY3Rpb25TdGFydExlbmd0aCIsIl9zZWxlY3RMaW5lQXQiLCJwcmV2aW91c1NlbGVjdGlvbkVuZCIsIl9zZWxlY3RUb1dvcmRBdCIsInRpbWVFbGFwc2VkIiwiQWx0Q2xpY2tIYW5kbGVyIiwibW92ZSIsIl9jb252ZXJ0Vmlld3BvcnRDb2xUb0NoYXJhY3RlckluZGV4IiwiY2hhckluZGV4Iiwic2V0U2VsZWN0aW9uIiwiX2dldFdvcmRBdCIsImFsbG93V2hpdGVzcGFjZU9ubHlTZWxlY3Rpb24iLCJmb2xsb3dXcmFwcGVkTGluZXNBYm92ZSIsImZvbGxvd1dyYXBwZWRMaW5lc0JlbG93IiwiY2hhck9mZnNldCIsImxlZnRXaWRlQ2hhckNvdW50IiwicmlnaHRXaWRlQ2hhckNvdW50IiwibGVmdExvbmdDaGFyT2Zmc2V0IiwicmlnaHRMb25nQ2hhck9mZnNldCIsIl9pc0NoYXJXb3JkU2VwYXJhdG9yIiwidHJpbSIsInByZXZpb3VzQnVmZmVyTGluZSIsInByZXZpb3VzTGluZVdvcmRQb3NpdGlvbiIsIm5leHRCdWZmZXJMaW5lIiwibmV4dExpbmVXb3JkUG9zaXRpb24iLCJ3b3JkUG9zaXRpb24iLCJhcmVTZWxlY3Rpb25WYWx1ZXNSZXZlcnNlZCIsIndyYXBwZWRSYW5nZSIsInN0YXJ0UGx1c0xlbmd0aCIsIl9tb3VzZUV2ZW50IiwiX2xpbmVzIiwiX3N0YXJ0Q29sIiwiX3N0YXJ0Um93IiwiY29vcmRpbmF0ZXMiLCJjb29yZGluYXRlIiwiX2VuZENvbCIsIl9lbmRSb3ciLCJfYXJyb3dTZXF1ZW5jZXMiLCJfbW92ZUhvcml6b250YWxseU9ubHkiLCJfcmVzZXRTdGFydGluZ1JvdyIsIl9tb3ZlVG9SZXF1ZXN0ZWRSb3ciLCJfbW92ZVRvUmVxdWVzdGVkQ29sIiwicmVwZWF0IiwiX2J1ZmZlckxpbmUiLCJfd3JhcHBlZFJvd3NGb3JSb3ciLCJfc2VxdWVuY2UiLCJfd3JhcHBlZFJvd3NDb3VudCIsIl92ZXJ0aWNhbERpcmVjdGlvbiIsImRpcmVjdGlvbiIsIl9ob3Jpem9udGFsRGlyZWN0aW9uIiwid3JhcHBlZFJvd3MiLCJjdXJyZW50Um93IiwibGluZVdyYXBzIiwiZm9yd2FyZCIsImN1cnJlbnRDb2wiLCJidWZmZXJTdHIiLCJzdHIiLCJycHQiLCJfcGFyZW50RWxlbWVudCIsIl9tZWFzdXJlRWxlbWVudCIsInZhbCIsImRlcHRoIiwiY2xvbmVkT2JqZWN0IiwiaXNBcnJheSIsIl9hdWRpb0NvbnRleHQiLCJhdWRpb0NvbnRleHRDdG9yIiwiQXVkaW9Db250ZXh0Iiwid2Via2l0QXVkaW9Db250ZXh0IiwiYXVkaW9Db250ZXh0IiwiYmVsbEF1ZGlvU291cmNlIiwiY3JlYXRlQnVmZmVyU291cmNlIiwiZGVjb2RlQXVkaW9EYXRhIiwiX2Jhc2U2NFRvQXJyYXlCdWZmZXIiLCJfcmVtb3ZlTWltZVR5cGUiLCJjb25uZWN0IiwiZGVzdGluYXRpb24iLCJiYXNlNjQiLCJiaW5hcnlTdHJpbmciLCJhdG9iIiwibGVuIiwiYnl0ZXMiLCJkYXRhVVJJIiwic3BsaXQiLCJfbGl2ZVJlZ2lvbkxpbmVDb3VudCIsIl9jaGFyc1RvQ29uc3VtZSIsIl9hY2Nlc3NpYmlsaXR5VHJlZVJvb3QiLCJfcm93Q29udGFpbmVyIiwiX3Jvd0VsZW1lbnRzIiwiX2NyZWF0ZUFjY2Vzc2liaWxpdHlUcmVlTm9kZSIsIl90b3BCb3VuZGFyeUZvY3VzTGlzdGVuZXIiLCJfb25Cb3VuZGFyeUZvY3VzIiwiX2JvdHRvbUJvdW5kYXJ5Rm9jdXNMaXN0ZW5lciIsIl9yZWZyZXNoUm93c0RpbWVuc2lvbnMiLCJfcmVuZGVyUm93c0RlYm91bmNlciIsIl9yZWZyZXNoUm93cyIsIl9saXZlUmVnaW9uIiwiaW5zZXJ0QWRqYWNlbnRFbGVtZW50IiwiX29uUmVzaXplIiwiX29uQ2hhciIsInNwYWNlQ291bnQiLCJfb25UYWIiLCJrZXlDaGFyIiwiX29uS2V5IiwiX2NsZWFyTGl2ZVJlZ2lvbiIsImJvdW5kYXJ5RWxlbWVudCIsInRhcmdldCIsImJlZm9yZUJvdW5kYXJ5RWxlbWVudCIsImdldEF0dHJpYnV0ZSIsInJlbGF0ZWRUYXJnZXQiLCJ0b3BCb3VuZGFyeUVsZW1lbnQiLCJib3R0b21Cb3VuZGFyeUVsZW1lbnQiLCJuZXdFbGVtZW50IiwidW5zaGlmdCIsImNoaWxkcmVuIiwiX3JlZnJlc2hSb3dEaW1lbnNpb25zIiwiTUFYX1JPV1NfVE9fUkVBRCIsIl9hbm5vdW5jZUNoYXJhY3RlciIsInNldFNpemUiLCJwb3NJblNldCIsImlubmVySFRNTCIsIkRvbVJlbmRlcmVyUm93RmFjdG9yeV8xIiwiVEVSTUlOQUxfQ0xBU1NfUFJFRklYIiwiUk9XX0NPTlRBSU5FUl9DTEFTUyIsIlNFTEVDVElPTl9DTEFTUyIsIm5leHRUZXJtaW5hbElkIiwiX3Rlcm1pbmFsQ2xhc3MiLCJfcmVmcmVzaFJvd0VsZW1lbnRzIiwiX3NlbGVjdGlvbkNvbnRhaW5lciIsIl9yb3dGYWN0b3J5IiwiRG9tUmVuZGVyZXJSb3dGYWN0b3J5IiwiX3RoZW1lU3R5bGVFbGVtZW50IiwiX2RpbWVuc2lvbnNTdHlsZUVsZW1lbnQiLCJvdmVyZmxvdyIsInN0eWxlcyIsIl90ZXJtaW5hbFNlbGVjdG9yIiwiQk9MRF9DTEFTUyIsIklUQUxJQ19DTEFTUyIsIkNVUlNPUl9DTEFTUyIsIkNVUlNPUl9TVFlMRV9CTE9DS19DTEFTUyIsIkNVUlNPUl9TVFlMRV9CQVJfQ0xBU1MiLCJDVVJTT1JfU1RZTEVfVU5ERVJMSU5FX0NMQVNTIiwiZG9jdW1lbnRGcmFnbWVudCIsIl9jcmVhdGVTZWxlY3Rpb25FbGVtZW50IiwiZW5kQ29sXzEiLCJjb2xTdGFydCIsImNvbEVuZCIsImN1cnNvckFic29sdXRlWSIsImN1cnNvclgiLCJyb3dFbGVtZW50IiwiY3JlYXRlUm93IiwiX3NldENlbGxVbmRlcmxpbmUiLCJlbmFibGVkIiwidGV4dERlY29yYXRpb24iLCJpc0N1cnNvclJvdyIsImxpbmVMZW5ndGgiLCJjaGFyRWxlbWVudCIsIktFWUNPREVfS0VZX01BUFBJTkdTIiwiNDgiLCI0OSIsIjUwIiwiNTEiLCI1MiIsIjUzIiwiNTQiLCI1NSIsIjU2IiwiNTciLCIxODYiLCIxODciLCIxODgiLCIxODkiLCIxOTAiLCIxOTEiLCIxOTIiLCIyMTkiLCIyMjAiLCIyMjEiLCIyMjIiLCJhcHBsaWNhdGlvbkN1cnNvck1vZGUiLCJtb2RpZmllcnMiLCJrZXlNYXBwaW5nIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsR0FBQSxDQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFFBQUEsSUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsRUFBQSxDQUEwQ0ssWUFBQSxFQUFBQyxJQUFBTCxLQUsxQ1osRUFBQWtCLEVBQUEsU0FBQWhCLEdBQ0Esb0JBQUFpQixlQUFBQyxhQUNBTixPQUFBQyxlQUFBYixFQUFBaUIsT0FBQUMsWUFBQSxDQUF3REMsTUFBQSxXQUV4RFAsT0FBQUMsZUFBQWIsRUFBQSxjQUFpRG1CLE9BQUEsS0FRakRyQixFQUFBc0IsRUFBQSxTQUFBRCxFQUFBRSxHQUVBLEdBREEsRUFBQUEsSUFBQUYsRUFBQXJCLEVBQUFxQixJQUNBLEVBQUFFLEVBQUEsT0FBQUYsRUFDQSxLQUFBRSxHQUFBLGlCQUFBRixRQUFBRyxXQUFBLE9BQUFILEVBQ0EsSUFBQUksRUFBQVgsT0FBQVksT0FBQSxNQUdBLEdBRkExQixFQUFBa0IsRUFBQU8sR0FDQVgsT0FBQUMsZUFBQVUsRUFBQSxXQUF5Q1QsWUFBQSxFQUFBSyxVQUN6QyxFQUFBRSxHQUFBLGlCQUFBRixFQUFBLFFBQUFNLEtBQUFOLEVBQUFyQixFQUFBVSxFQUFBZSxFQUFBRSxFQUFBLFNBQUFBLEdBQWdILE9BQUFOLEVBQUFNLElBQXFCQyxLQUFBLEtBQUFELElBQ3JJLE9BQUFGLEdBSUF6QixFQUFBNkIsRUFBQSxTQUFBMUIsR0FDQSxJQUFBUyxFQUFBVCxLQUFBcUIsV0FDQSxXQUEyQixPQUFBckIsRUFBQSxTQUMzQixXQUFpQyxPQUFBQSxHQUVqQyxPQURBSCxFQUFBVSxFQUFBRSxFQUFBLElBQUFBLEdBQ0FBLEdBSUFaLEVBQUFhLEVBQUEsU0FBQWlCLEVBQUFDLEdBQXNELE9BQUFqQixPQUFBa0IsVUFBQUMsZUFBQTFCLEtBQUF1QixFQUFBQyxJQUd0RC9CLEVBQUFrQyxFQUFBLEdBSUFsQyxJQUFBbUMsRUFBQSxtQ0NqRkEsSUFDQUMsRUFEQUMsRUFBQUMsV0FBQUQsWUFDQUQsRUFBQSxTQUFBMUIsRUFBQTZCLEdBSUEsT0FIQUgsRUFBQXRCLE9BQUEwQixnQkFDQSxDQUFjQyxVQUFBLGNBQWdCQyxPQUFBLFNBQUFoQyxFQUFBNkIsR0FBc0M3QixFQUFBK0IsVUFBQUYsSUFDcEUsU0FBQTdCLEVBQUE2QixHQUE2QixRQUFBTCxLQUFBSyxJQUFBTixlQUFBQyxLQUFBeEIsRUFBQXdCLEdBQUFLLEVBQUFMLE1BQzdCeEIsRUFBQTZCLElBRUEsU0FBQTdCLEVBQUE2QixHQUVBLFNBQUFJLElBQXVCTCxLQUFBTSxZQUFBbEMsRUFEdkIwQixFQUFBMUIsRUFBQTZCLEdBRUE3QixFQUFBc0IsVUFBQSxPQUFBTyxFQUFBekIsT0FBQVksT0FBQWEsSUFBQUksRUFBQVgsVUFBQU8sRUFBQVAsVUFBQSxJQUFBVyxLQUdBN0IsT0FBQUMsZUFBQWIsRUFBQSxjQUE4Q21CLE9BQUEsSUFDOUMsSUFBQXdCLEVBQXFCN0MsRUFBUSxJQUM3QjhDLEVBQXFCOUMsRUFBUSxHQUM3QitDLEVBQW1CL0MsRUFBUSxJQUMzQmdELEVBQWNoRCxFQUFRLEdBQ3RCRSxFQUFBK0MsYUFBQSxJQUFBRCxFQUFBRSxlQUFBLEVBQ0FoRCxFQUFBaUQscUJBQUEsRUFDQWpELEVBQUFrRCxxQkFBQSxFQUNBbEQsRUFBQW1ELHNCQUFBLEVBQ0FuRCxFQUFBb0QscUJBQUEsRUFDQXBELEVBQUFxRCxnQkFBQSxXQUNBckQsRUFBQXNELGVBQUEsSUFDQXRELEVBQUF1RCxnQkFBQSxFQUNBdkQsRUFBQXdELGVBQUEsR0FDQSxJQUFBQyxFQUFBLFdBQ0EsU0FBQUEsRUFBQUMsRUFBQUMsR0FDQXZCLEtBQUFzQixZQUNBdEIsS0FBQXVCLGlCQUNBdkIsS0FBQXdCLFFBQUEsR0FDQXhCLEtBQUF5QixRQXNRQSxPQXBRQUosRUFBQTNCLFVBQUFnQyxxQkFBQSxTQUFBQyxHQUNBLFlBQUFBLEVBQ0EzQixLQUFBNEIseUJBQUFuQixFQUFBb0Isb0JBQ0E3QixLQUFBNEIsdUJBQUFuQixFQUFBb0Isa0JBQ0E3QixLQUFBOEIsa0JBSUE5QixLQUFBNEIseUJBQUFuQixFQUFBc0IsYUFDQS9CLEtBQUE0Qix1QkFBQW5CLEVBQUFzQixXQUNBL0IsS0FBQThCLG1CQUlBVCxFQUFBM0IsVUFBQW9DLGVBQUEsV0FDQSxHQUFBOUIsS0FBQWdDLE1BRUEsUUFBQWxFLEVBQUEsRUFBdUJBLEVBQUFrQyxLQUFBZ0MsTUFBQUMsU0FBdUJuRSxFQUFBLENBRzlDLElBRkEsSUFBQW9FLEVBQUFsQyxLQUFBZ0MsTUFBQXJELElBQUFiLEdBQ0FxRSxFQUFBLElBQUFuQyxLQUFBNEIsdUJBQUFNLEVBQUFELFFBQ0FHLEVBQUEsRUFBMkJBLEVBQUFGLEVBQUFELFNBQW9CRyxFQUMvQ0QsRUFBQUUsSUFBQUQsRUFBQUYsRUFBQXZELElBQUF5RCxJQUVBcEMsS0FBQWdDLE1BQUFLLElBQUF2RSxFQUFBcUUsS0FHQWQsRUFBQTNCLFVBQUE0QyxhQUFBLFNBQUFDLEVBQUFDLEdBQ0EsSUFBQUMsRUFBQSxDQUFBRixFQUFBM0UsRUFBQXNELGVBQUF0RCxFQUFBdUQsZ0JBQUF2RCxFQUFBd0QsZ0JBQ0EsV0FBQXBCLEtBQUE0Qix1QkFBQTVCLEtBQUFzQixVQUFBb0IsS0FBQUQsRUFBQUQsSUFFQWhFLE9BQUFDLGVBQUE0QyxFQUFBM0IsVUFBQSxpQkFDQWYsSUFBQSxXQUNBLE9BQUFxQixLQUFBdUIsZ0JBQUF2QixLQUFBZ0MsTUFBQVcsVUFBQTNDLEtBQUFzQixVQUFBc0IsTUFFQWxFLFlBQUEsRUFDQW1FLGNBQUEsSUFFQXJFLE9BQUFDLGVBQUE0QyxFQUFBM0IsVUFBQSxzQkFDQWYsSUFBQSxXQUNBLElBQ0FtRSxFQURBOUMsS0FBQStDLE1BQUEvQyxLQUFBZ0QsRUFDQWhELEtBQUFpRCxNQUNBLE9BQUFILEdBQUEsR0FBQUEsRUFBQTlDLEtBQUFzQixVQUFBc0IsTUFFQWxFLFlBQUEsRUFDQW1FLGNBQUEsSUFFQXhCLEVBQUEzQixVQUFBd0Qsd0JBQUEsU0FBQU4sR0FDQSxJQUFBNUMsS0FBQXVCLGVBQ0EsT0FBQXFCLEVBRUEsSUFBQU8sRUFBQVAsRUFBQTVDLEtBQUFzQixVQUFBOEIsUUFBQUMsV0FDQSxPQUFBRixFQUFBdkYsRUFBQXFELGdCQUFBckQsRUFBQXFELGdCQUFBa0MsR0FFQTlCLEVBQUEzQixVQUFBNEQsaUJBQUEsU0FBQUMsR0FDQSxPQUFBdkQsS0FBQWdDLE1BQUFDLE9BQUEsTUFDQXVCLElBQUFELElBQ0FBLEVBQUEzRixFQUFBK0MsY0FHQSxJQURBLElBQUE3QyxFQUFBa0MsS0FBQXNCLFVBQUFzQixLQUNBOUUsS0FDQWtDLEtBQUFnQyxNQUFBeUIsS0FBQXpELEtBQUFzQyxhQUFBaUIsTUFJQWxDLEVBQUEzQixVQUFBK0IsTUFBQSxXQUNBekIsS0FBQTBCLHFCQUFBMUIsS0FBQXNCLFVBQUE4QixRQUFBTSw0QkFDQTFELEtBQUFpRCxNQUFBLEVBQ0FqRCxLQUFBK0MsTUFBQSxFQUNBL0MsS0FBQWdELEVBQUEsRUFDQWhELEtBQUEyRCxFQUFBLEVBQ0EzRCxLQUFBZ0MsTUFBQSxJQUFBekIsRUFBQXFELGFBQUE1RCxLQUFBa0Qsd0JBQUFsRCxLQUFBc0IsVUFBQXNCLE9BQ0E1QyxLQUFBNkQsVUFBQSxFQUNBN0QsS0FBQThELGFBQUE5RCxLQUFBc0IsVUFBQXNCLEtBQUEsRUFDQTVDLEtBQUErRCxpQkFFQTFDLEVBQUEzQixVQUFBc0UsT0FBQSxTQUFBQyxFQUFBQyxHQUNBLElBQUFDLEVBQUFuRSxLQUFBa0Qsd0JBQUFnQixHQUlBLEdBSEFDLEVBQUFuRSxLQUFBZ0MsTUFBQVcsWUFDQTNDLEtBQUFnQyxNQUFBVyxVQUFBd0IsR0FFQW5FLEtBQUFnQyxNQUFBQyxPQUFBLEdBQ0EsR0FBQWpDLEtBQUFzQixVQUFBb0IsS0FBQXVCLEVBRUEsSUFEQSxJQUFBRyxFQUFBLENBQUF4RyxFQUFBK0MsYUFBQS9DLEVBQUFzRCxlQUFBdEQsRUFBQXVELGdCQUFBdkQsRUFBQXdELGdCQUNBdEQsRUFBQSxFQUErQkEsRUFBQWtDLEtBQUFnQyxNQUFBQyxPQUF1Qm5FLElBQ3REa0MsS0FBQWdDLE1BQUFyRCxJQUFBYixHQUFBa0csT0FBQUMsRUFBQUcsR0FHQSxJQUFBQyxFQUFBLEVBQ0EsR0FBQXJFLEtBQUFzQixVQUFBc0IsS0FBQXNCLEdBQ0EsUUFBQWxCLEVBQUFoRCxLQUFBc0IsVUFBQXNCLEtBQWlESSxFQUFBa0IsRUFBYWxCLElBQzlELEdBQUFoRCxLQUFBZ0MsTUFBQUMsT0FBQWlDLEVBQUFsRSxLQUFBK0MsTUFDQSxHQUFBL0MsS0FBQStDLE1BQUEsR0FBQS9DLEtBQUFnQyxNQUFBQyxRQUFBakMsS0FBQStDLE1BQUEvQyxLQUFBZ0QsRUFBQXFCLEVBQUEsRUFDQXJFLEtBQUErQyxRQUNBc0IsSUFDQXJFLEtBQUFpRCxNQUFBLEdBQ0FqRCxLQUFBaUQsWUFHQSxDQUNBLElBQUFSLEVBQUEsQ0FBQTdFLEVBQUErQyxhQUFBL0MsRUFBQXNELGVBQUF0RCxFQUFBdUQsZ0JBQUF2RCxFQUFBd0QsZ0JBQ0FwQixLQUFBZ0MsTUFBQXlCLEtBQUEsSUFBQXpELEtBQUE0Qix1QkFBQXFDLEVBQUF4QixVQU1BLElBQUFPLEVBQUFoRCxLQUFBc0IsVUFBQXNCLEtBQWlESSxFQUFBa0IsRUFBYWxCLElBQzlEaEQsS0FBQWdDLE1BQUFDLE9BQUFpQyxFQUFBbEUsS0FBQStDLFFBQ0EvQyxLQUFBZ0MsTUFBQUMsT0FBQWpDLEtBQUErQyxNQUFBL0MsS0FBQWdELEVBQUEsRUFDQWhELEtBQUFnQyxNQUFBc0MsT0FHQXRFLEtBQUErQyxRQUNBL0MsS0FBQWlELFVBS0EsR0FBQWtCLEVBQUFuRSxLQUFBZ0MsTUFBQVcsVUFBQSxDQUNBLElBQUE0QixFQUFBdkUsS0FBQWdDLE1BQUFDLE9BQUFrQyxFQUNBSSxFQUFBLElBQ0F2RSxLQUFBZ0MsTUFBQXdDLFVBQUFELEdBQ0F2RSxLQUFBK0MsTUFBQTBCLEtBQUFDLElBQUExRSxLQUFBK0MsTUFBQXdCLEVBQUEsR0FDQXZFLEtBQUFpRCxNQUFBd0IsS0FBQUMsSUFBQTFFLEtBQUFpRCxNQUFBc0IsRUFBQSxJQUVBdkUsS0FBQWdDLE1BQUFXLFVBQUF3QixFQUVBbkUsS0FBQTJELEVBQUFjLEtBQUFFLElBQUEzRSxLQUFBMkQsRUFBQU0sRUFBQSxHQUNBakUsS0FBQWdELEVBQUF5QixLQUFBRSxJQUFBM0UsS0FBQWdELEVBQUFrQixFQUFBLEdBQ0FHLElBQ0FyRSxLQUFBZ0QsR0FBQXFCLEdBRUFyRSxLQUFBNEUsT0FBQUgsS0FBQUUsSUFBQTNFLEtBQUE0RSxPQUFBVixFQUFBLEdBQ0FsRSxLQUFBNkUsT0FBQUosS0FBQUUsSUFBQTNFLEtBQUE2RSxPQUFBWixFQUFBLEdBQ0FqRSxLQUFBNkQsVUFBQSxFQUVBN0QsS0FBQThELGFBQUFJLEVBQUEsR0FFQTdDLEVBQUEzQixVQUFBb0YseUJBQUEsU0FBQUMsRUFBQUMsR0FDQSxLQUFBQSxHQUFBLENBS0EsSUFKQSxJQUFBQyxFQUFBakYsS0FBQWdDLE1BQUFyRCxJQUFBb0csR0FJQWpILEVBQUEsRUFBMkJBLEVBQUFtSCxFQUFBaEQsU0FBaUJuRSxFQUU1QyxJQURBa0gsR0FBQUMsRUFBQXRHLElBQUFiLEdBQUFGLEVBQUFrRCxzQkFBQW1CLFFBQ0EsRUFDQSxPQUFBOEMsRUFBQWpILEdBR0FpSCxJQUVBLE9BQUFBLEVBQUEsSUFFQTFELEVBQUEzQixVQUFBd0YsNEJBQUEsU0FBQUgsRUFBQUksRUFBQUMsRUFBQUMsUUFDQSxJQUFBRCxJQUFrQ0EsRUFBQSxRQUNsQyxJQUFBQyxJQUFnQ0EsRUFBQSxNQUNoQyxJQUFBQyxFQUFBLEdBQ0FMLEVBQUFqRixLQUFBZ0MsTUFBQXJELElBQUFvRyxHQUNBLElBQUFFLEVBQ0EsU0FFQSxJQUFBTSxFQUFBSCxFQUNBLE9BQUFDLElBQ0FBLEVBQUFKLEVBQUFoRCxRQUdBLElBREEsSUFBQXVELEVBQUFILEVBQ0F2SCxFQUFBLEVBQXVCQSxFQUFBbUgsRUFBQWhELE9BQWlCbkUsSUFBQSxDQUN4QyxJQUFBMkgsRUFBQVIsRUFBQXRHLElBQUFiLEdBQ0F3SCxHQUFBRyxFQUFBN0gsRUFBQWtELHNCQUNBLElBQUEyRSxFQUFBN0gsRUFBQW1ELHdCQUNBcUUsR0FBQXRILEdBQ0F5SCxJQUVBRixFQUFBdkgsR0FDQTBILEtBSUFDLEVBQUE3SCxFQUFBa0Qsc0JBQUFtQixPQUFBLElBQ0FtRCxFQUFBdEgsSUFDQXlILEdBQUFFLEVBQUE3SCxFQUFBa0Qsc0JBQUFtQixPQUFBLEdBRUFvRCxFQUFBdkgsSUFDQTBILEdBQUFDLEVBQUE3SCxFQUFBa0Qsc0JBQUFtQixPQUFBLElBS0EsR0FBQWtELEVBQUEsQ0FDQSxJQUFBTyxFQUFBSixFQUFBSyxPQUFBLFFBSUEsSUFIQSxJQUFBRCxJQUNBRixFQUFBZixLQUFBRSxJQUFBYSxFQUFBRSxJQUVBRixHQUFBRCxFQUNBLFNBR0EsT0FBQUQsRUFBQU0sVUFBQUwsRUFBQUMsSUFFQW5FLEVBQUEzQixVQUFBbUcsdUJBQUEsU0FBQTdDLEdBR0EsSUFGQSxJQUFBOEMsRUFBQTlDLEVBQ0ErQyxFQUFBL0MsRUFDQThDLEVBQUEsR0FBQTlGLEtBQUFnQyxNQUFBckQsSUFBQW1ILEdBQUF0RCxXQUNBc0QsSUFFQSxLQUFBQyxFQUFBLEVBQUEvRixLQUFBZ0MsTUFBQUMsUUFBQWpDLEtBQUFnQyxNQUFBckQsSUFBQW9ILEVBQUEsR0FBQXZELFdBQ0F1RCxJQUVBLE9BQWdCRCxRQUFBQyxTQUVoQjFFLEVBQUEzQixVQUFBcUUsY0FBQSxTQUFBakcsR0FVQSxJQVRBQSxRQUNBa0MsS0FBQWdHLEtBQUFsSSxLQUNBQSxFQUFBa0MsS0FBQWlHLFNBQUFuSSxLQUlBa0MsS0FBQWdHLEtBQUEsR0FDQWxJLEVBQUEsR0FFY0EsRUFBQWtDLEtBQUFzQixVQUFBb0IsS0FBeUI1RSxHQUFBa0MsS0FBQXNCLFVBQUE4QixRQUFBOEMsYUFDdkNsRyxLQUFBZ0csS0FBQWxJLElBQUEsR0FHQXVELEVBQUEzQixVQUFBdUcsU0FBQSxTQUFBdEMsR0FJQSxJQUhBQSxVQUNBQSxFQUFBM0QsS0FBQTJELElBRUEzRCxLQUFBZ0csT0FBQXJDLE1BQUEsSUFFQSxPQUFBQSxHQUFBM0QsS0FBQXNCLFVBQUFvQixLQUFBMUMsS0FBQXNCLFVBQUFvQixLQUFBLEVBQUFpQixFQUFBLElBQUFBLEdBRUF0QyxFQUFBM0IsVUFBQXlHLFNBQUEsU0FBQXhDLEdBSUEsSUFIQUEsVUFDQUEsRUFBQTNELEtBQUEyRCxJQUVBM0QsS0FBQWdHLE9BQUFyQyxNQUFBM0QsS0FBQXNCLFVBQUFvQixPQUVBLE9BQUFpQixHQUFBM0QsS0FBQXNCLFVBQUFvQixLQUFBMUMsS0FBQXNCLFVBQUFvQixLQUFBLEVBQUFpQixFQUFBLElBQUFBLEdBRUF0QyxFQUFBM0IsVUFBQTBHLFVBQUEsU0FBQXBELEdBQ0EsSUFBQXFELEVBQUFyRyxLQUNBc0csRUFBQSxJQUFBQyxFQUFBdkQsR0FTQSxPQVJBaEQsS0FBQXdCLFFBQUFpQyxLQUFBNkMsR0FDQUEsRUFBQUUsU0FBQXhHLEtBQUFnQyxNQUFBeUUsc0JBQUEsZ0JBQUFDLEdBQ0FKLEVBQUFyQixNQUFBeUIsRUFDQUosRUFBQXJCLEtBQUEsR0FDQXFCLEVBQUFLLGFBR0FMLEVBQUFFLFNBQUFGLEVBQUFHLHNCQUFBLHFCQUE2RSxPQUFBSixFQUFBTyxjQUFBTixNQUM3RUEsR0FFQWpGLEVBQUEzQixVQUFBa0gsY0FBQSxTQUFBTixHQUNBdEcsS0FBQXdCLFFBQUFxRixPQUFBN0csS0FBQXdCLFFBQUFzRixRQUFBUixHQUFBLElBRUFqRixFQUFBM0IsVUFBQXFILFNBQUEsU0FBQTVCLEVBQUFJLEVBQUFDLEVBQUF3QixFQUFBQyxHQUNBLFdBQUFDLEVBQUFsSCxLQUFBbUYsRUFBQUksRUFBQUMsRUFBQXdCLEVBQUFDLElBRUE1RixFQTNRQSxHQTZRQXpELEVBQUF5RCxTQUNBLElBQUFrRixFQUFBLFNBQUFZLEdBRUEsU0FBQVosRUFBQXRCLEdBQ0EsSUFBQW9CLEVBQUFjLEVBQUFsSixLQUFBK0IsWUFJQSxPQUhBcUcsRUFBQXBCLE9BQ0FvQixFQUFBZSxJQUFBYixFQUFBYyxVQUNBaEIsRUFBQWlCLFlBQUEsRUFDQWpCLEVBZ0JBLE9BdEJBdEcsRUFBQXdHLEVBQUFZLEdBUUEzSSxPQUFBQyxlQUFBOEgsRUFBQTdHLFVBQUEsTUFDQWYsSUFBQSxXQUEwQixPQUFBcUIsS0FBQW9ILEtBQzFCMUksWUFBQSxFQUNBbUUsY0FBQSxJQUVBMEQsRUFBQTdHLFVBQUFpSCxRQUFBLFdBQ0EzRyxLQUFBc0gsYUFHQXRILEtBQUFzSCxZQUFBLEVBQ0F0SCxLQUFBdUgsS0FBQSxXQUNBSixFQUFBekgsVUFBQWlILFFBQUExSSxLQUFBK0IsUUFFQXVHLEVBQUFjLFFBQUEsRUFDQWQsRUF2QkEsQ0F3QkMvRixFQUFBZ0gsY0FDRDVKLEVBQUEySSxTQUNBLElBQUFXLEVBQUEsV0FDQSxTQUFBQSxFQUFBTyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxRQUNBLElBQUFILElBQXFDQSxFQUFBLFFBQ3JDLElBQUFDLElBQW1DQSxFQUFBSCxFQUFBekYsTUFBQUMsYUFDbkMsSUFBQTRGLElBQXdDQSxFQUFBLFFBQ3hDLElBQUFDLElBQXNDQSxFQUFBLEdBQ3RDOUgsS0FBQXlILFVBQ0F6SCxLQUFBMEgsYUFDQTFILEtBQUEySCxjQUNBM0gsS0FBQTRILFlBQ0E1SCxLQUFBNkgsaUJBQ0E3SCxLQUFBOEgsZUFDQTlILEtBQUEySCxZQUFBLElBQ0EzSCxLQUFBMkgsWUFBQSxHQUVBM0gsS0FBQTRILFVBQUE1SCxLQUFBeUgsUUFBQXpGLE1BQUFDLFNBQ0FqQyxLQUFBNEgsVUFBQTVILEtBQUF5SCxRQUFBekYsTUFBQUMsUUFFQWpDLEtBQUErSCxTQUFBL0gsS0FBQTJILFlBc0JBLE9BcEJBVCxFQUFBeEgsVUFBQXNJLFFBQUEsV0FDQSxPQUFBaEksS0FBQStILFNBQUEvSCxLQUFBNEgsV0FFQVYsRUFBQXhILFVBQUF1SSxLQUFBLFdBQ0EsSUFBQUMsRUFBQWxJLEtBQUF5SCxRQUFBNUIsdUJBQUE3RixLQUFBK0gsVUFDQUcsRUFBQXBDLE1BQUE5RixLQUFBMkgsWUFBQTNILEtBQUE2SCxpQkFDQUssRUFBQXBDLE1BQUE5RixLQUFBMkgsWUFBQTNILEtBQUE2SCxnQkFFQUssRUFBQW5DLEtBQUEvRixLQUFBNEgsVUFBQTVILEtBQUE4SCxlQUNBSSxFQUFBbkMsS0FBQS9GLEtBQUE0SCxVQUFBNUgsS0FBQThILGNBRUFJLEVBQUFwQyxNQUFBckIsS0FBQUMsSUFBQXdELEVBQUFwQyxNQUFBLEdBQ0FvQyxFQUFBbkMsS0FBQXRCLEtBQUFFLElBQUF1RCxFQUFBbkMsS0FBQS9GLEtBQUF5SCxRQUFBekYsTUFBQUMsUUFFQSxJQURBLElBQUFrRyxFQUFBLEdBQ0FySyxFQUFBb0ssRUFBQXBDLE1BQWlDaEksR0FBQW9LLEVBQUFuQyxPQUFpQmpJLEVBQ2xEcUssR0FBQW5JLEtBQUF5SCxRQUFBdkMsNEJBQUFwSCxJQUFBa0MsS0FBQSxZQUFBbEMsSUFBQW9LLEVBQUFuQyxNQUdBLE9BREEvRixLQUFBK0gsU0FBQUcsRUFBQW5DLEtBQUEsRUFDQSxDQUFnQm1DLFFBQUFFLFFBQUFELElBRWhCakIsRUF4Q0EsR0EwQ0F0SixFQUFBc0oscURDN1dBMUksT0FBQUMsZUFBQWIsRUFBQSxjQUE4Q21CLE9BQUEsSUFDOUNuQixFQUFBZ0QsY0FBQSxJQUNBaEQsRUFBQXlLLHVCQUFBLElBQ0F6SyxFQUFBMEssWUFBQSxHQUNBMUssRUFBQTJLLHdCQUFBLGdDQ0pBLElBQ0F6SSxFQURBQyxFQUFBQyxXQUFBRCxZQUNBRCxFQUFBLFNBQUExQixFQUFBNkIsR0FJQSxPQUhBSCxFQUFBdEIsT0FBQTBCLGdCQUNBLENBQWNDLFVBQUEsY0FBZ0JDLE9BQUEsU0FBQWhDLEVBQUE2QixHQUFzQzdCLEVBQUErQixVQUFBRixJQUNwRSxTQUFBN0IsRUFBQTZCLEdBQTZCLFFBQUFMLEtBQUFLLElBQUFOLGVBQUFDLEtBQUF4QixFQUFBd0IsR0FBQUssRUFBQUwsTUFDN0J4QixFQUFBNkIsSUFFQSxTQUFBN0IsRUFBQTZCLEdBRUEsU0FBQUksSUFBdUJMLEtBQUFNLFlBQUFsQyxFQUR2QjBCLEVBQUExQixFQUFBNkIsR0FFQTdCLEVBQUFzQixVQUFBLE9BQUFPLEVBQUF6QixPQUFBWSxPQUFBYSxJQUFBSSxFQUFBWCxVQUFBTyxFQUFBUCxVQUFBLElBQUFXLEtBR0E3QixPQUFBQyxlQUFBYixFQUFBLGNBQThDbUIsT0FBQSxJQUM5QyxJQUNBeUksRUFBQSxTQUFBTCxHQUVBLFNBQUFLLElBQ0EsSUFBQW5CLEVBQUFjLEVBQUFsSixLQUFBK0IsWUFFQSxPQURBcUcsRUFBQW1DLFFBQUFuQyxFQUFBbUMsU0FBQSxHQUNBbkMsRUEwREEsT0E5REF0RyxFQUFBeUgsRUFBQUwsR0FNQUssRUFBQTlILFVBQUErSSxHQUFBLFNBQUE5RyxFQUFBK0csR0FDQTFJLEtBQUF3SSxRQUFBN0csR0FBQTNCLEtBQUF3SSxRQUFBN0csSUFBQSxHQUNBM0IsS0FBQXdJLFFBQUE3RyxHQUFBOEIsS0FBQWlGLElBRUFsQixFQUFBOUgsVUFBQStHLHNCQUFBLFNBQUE5RSxFQUFBZ0gsR0FDQSxJQUFBdEMsRUFBQXJHLEtBQ0FBLEtBQUF5SSxHQUFBOUcsRUFBQWdILEdBQ0EsSUFBQUMsR0FBQSxFQUNBLE9BQ0FqQyxRQUFBLFdBQ0FpQyxJQUdBdkMsRUFBQXdDLElBQUFsSCxFQUFBZ0gsR0FDQUMsR0FBQSxNQUlBcEIsRUFBQTlILFVBQUFtSixJQUFBLFNBQUFsSCxFQUFBK0csR0FDQSxHQUFBMUksS0FBQXdJLFFBQUE3RyxHQUtBLElBRkEsSUFBQW1ILEVBQUE5SSxLQUFBd0ksUUFBQTdHLEdBQ0E3RCxFQUFBZ0wsRUFBQTdHLE9BQ0FuRSxLQUNBLEdBQUFnTCxFQUFBaEwsS0FBQTRLLEVBRUEsWUFEQUksRUFBQWpDLE9BQUEvSSxFQUFBLElBS0EwSixFQUFBOUgsVUFBQXFKLG1CQUFBLFNBQUFwSCxHQUNBM0IsS0FBQXdJLFFBQUE3RyxXQUNBM0IsS0FBQXdJLFFBQUE3RyxJQUdBNkYsRUFBQTlILFVBQUE2SCxLQUFBLFNBQUE1RixHQUVBLElBREEsSUFBQXFILEVBQUEsR0FDQUMsRUFBQSxFQUF3QkEsRUFBQUMsVUFBQWpILE9BQXVCZ0gsSUFDL0NELEVBQUFDLEVBQUEsR0FBQUMsVUFBQUQsR0FFQSxHQUFBakosS0FBQXdJLFFBQUE3RyxHQUlBLElBREEsSUFBQW1ILEVBQUE5SSxLQUFBd0ksUUFBQTdHLEdBQ0E3RCxFQUFBLEVBQXVCQSxFQUFBZ0wsRUFBQTdHLE9BQWdCbkUsSUFDdkNnTCxFQUFBaEwsR0FBQXFMLE1BQUFuSixLQUFBZ0osSUFHQXhCLEVBQUE5SCxVQUFBMEosVUFBQSxTQUFBekgsR0FDQSxPQUFBM0IsS0FBQXdJLFFBQUE3RyxJQUFBLElBRUE2RixFQUFBOUgsVUFBQWlILFFBQUEsV0FDQVEsRUFBQXpILFVBQUFpSCxRQUFBMUksS0FBQStCLE1BQ0FBLEtBQUF3SSxRQUFBLElBRUFoQixFQS9EQSxDQURrQjlKLEVBQVEsR0FpRXpCMkwsWUFDRHpMLEVBQUE0Siw2Q0NoRkFoSixPQUFBQyxlQUFBYixFQUFBLGNBQThDbUIsT0FBQSxJQUM5QyxJQUFBc0ssRUFBQSxXQUNBLFNBQUFBLElBQ0FySixLQUFBc0osYUFBQSxHQUNBdEosS0FBQXVKLGFBQUEsRUFnQkEsT0FkQUYsRUFBQTNKLFVBQUFpSCxRQUFBLFdBQ0EzRyxLQUFBdUosYUFBQSxFQUNBdkosS0FBQXNKLGFBQUFFLFFBQUEsU0FBQXBMLEdBQWdELE9BQUFBLEVBQUF1SSxZQUNoRDNHLEtBQUFzSixhQUFBckgsT0FBQSxHQUVBb0gsRUFBQTNKLFVBQUE4RyxTQUFBLFNBQUFwSSxHQUNBNEIsS0FBQXNKLGFBQUE3RixLQUFBckYsSUFFQWlMLEVBQUEzSixVQUFBK0osV0FBQSxTQUFBckwsR0FDQSxJQUFBc0wsRUFBQTFKLEtBQUFzSixhQUFBeEMsUUFBQTFJLElBQ0EsSUFBQXNMLEdBQ0ExSixLQUFBc0osYUFBQXpDLE9BQUE2QyxFQUFBLElBR0FMLEVBbkJBLEdBcUJBekwsRUFBQXlMLDJDQ3RCQTdLLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBQzlDLElBQUEyQixFQUFjaEQsRUFBUSxHQXVCdEJFLEVBQUErTCxlQXRCQSxTQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBLElBQUFDLEVBQUEsQ0FDQUMsV0FBQUYsRUFBQUUsV0FDQUMsV0FBQUgsRUFBQUcsV0FDQUMsT0FBQSxLQUNBQyxhQUFBLEtBQ0FDLFVBQUEsS0FDQUMsS0FBQVAsRUFBQU8sS0FBQUMsTUFBQSxPQUVBLE9BQ0E1SSxLQUFBbUksRUFBQTFHLFFBQUFvSCxzQkFDQUMsaUJBQUFDLE9BQUFELGlCQUNBYixrQkFDQUMsbUJBQ0FjLFdBQUFiLEVBQUExRyxRQUFBdUgsV0FDQUMsU0FBQWQsRUFBQTFHLFFBQUF3SCxTQUNBQyxXQUFBZixFQUFBMUcsUUFBQXlILFdBQ0FDLGVBQUFoQixFQUFBMUcsUUFBQTBILGVBQ0FDLGtCQUFBakIsRUFBQTFHLFFBQUEySCxrQkFDQWhCLE9BQUFDLElBc0JBcE0sRUFBQW9OLGFBbEJBLFNBQUFDLEVBQUFoTCxHQUNBLFFBQUFuQyxFQUFBLEVBQW1CQSxFQUFBbU4sRUFBQWxCLE9BQUFPLEtBQUFySSxPQUEwQm5FLElBQzdDLEdBQUFtTixFQUFBbEIsT0FBQU8sS0FBQXhNLEdBQUFvTixPQUFBakwsRUFBQThKLE9BQUFPLEtBQUF4TSxHQUFBb04sS0FDQSxTQUdBLE9BQUFELEVBQUF0SixPQUFBMUIsRUFBQTBCLE1BQ0FzSixFQUFBUixtQkFBQXhLLEVBQUF3SyxrQkFDQVEsRUFBQU4sYUFBQTFLLEVBQUEwSyxZQUNBTSxFQUFBTCxXQUFBM0ssRUFBQTJLLFVBQ0FLLEVBQUFKLGFBQUE1SyxFQUFBNEssWUFDQUksRUFBQUgsaUJBQUE3SyxFQUFBNkssZ0JBQ0FHLEVBQUFGLG9CQUFBOUssRUFBQThLLG1CQUNBRSxFQUFBckIsa0JBQUEzSixFQUFBMkosaUJBQ0FxQixFQUFBcEIsbUJBQUE1SixFQUFBNEosa0JBQ0FvQixFQUFBbEIsT0FBQUUsYUFBQWhLLEVBQUE4SixPQUFBRSxZQUNBZ0IsRUFBQWxCLE9BQUFHLGFBQUFqSyxFQUFBOEosT0FBQUcsWUFNQXRNLEVBQUF1TixXQUhBLFNBQUFDLEdBQ0EsT0FBQUEsRUFBQTFLLEVBQUFFLDZDQzdDQXBDLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBQzlDLElBQUFzTSxFQUFBLG9CQUFBQyxVQUNBQyxFQUFBLFNBQUFELFVBQUFDLFVBQ0FDLEVBQUEsU0FBQUYsVUFBQUUsU0FTQSxTQUFBQyxFQUFBQyxFQUFBQyxHQUNBLE9BQUFELEVBQUE1RSxRQUFBNkUsSUFBQSxFQVRBL04sRUFBQWdPLGFBQUFMLEVBQUF6RSxRQUFBLFdBQ0FsSixFQUFBaU8sU0FBQSxpQ0FBQUMsS0FBQVAsR0FDQTNOLEVBQUFtTyxVQUFBUixFQUFBekUsUUFBQSxZQUFBeUUsRUFBQXpFLFFBQUEsV0FDQWxKLEVBQUFvTyxNQUFBUCxFQUFBLDJDQUFBRCxHQUNBNU4sRUFBQXFPLE9BQUEsU0FBQVQsRUFDQTVOLEVBQUFzTyxTQUFBLFdBQUFWLEVBQ0E1TixFQUFBdU8sWUFBQVYsRUFBQSxvQ0FBQUQsR0FDQTVOLEVBQUF3TyxRQUFBWixFQUFBMUUsUUFBQSwwQ0NYQXRJLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBYzlDbkIsRUFBQXlPLHlCQWJBLFNBQUFDLEVBQUEzSyxFQUFBZ0gsRUFBQTRELEdBRUEsT0FEQUQsRUFBQUUsaUJBQUE3SyxFQUFBZ0gsRUFBQTRELEdBQ0EsQ0FDQTVGLFFBQUEsV0FDQWdDLElBR0EyRCxFQUFBRyxvQkFBQTlLLEVBQUFnSCxFQUFBNEQsR0FDQUQsRUFBQSxLQUNBM0QsRUFBQSx1Q0NWQW5LLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBRTlDLFNBQUEyTixHQUNBQSxFQUFBQyxJQUFBLEtBQ0FELEVBQUFFLElBQUEsSUFDQUYsRUFBQUcsSUFBQSxJQUNBSCxFQUFBSSxJQUFBLElBQ0FKLEVBQUFLLElBQUEsSUFDQUwsRUFBQU0sSUFBQSxJQUNBTixFQUFBTyxJQUFBLElBQ0FQLEVBQUFRLElBQUEsSUFDQVIsRUFBQVMsR0FBQSxLQUNBVCxFQUFBVSxHQUFBLEtBQ0FWLEVBQUFXLEdBQUEsS0FDQVgsRUFBQVksR0FBQSxLQUNBWixFQUFBYSxHQUFBLEtBQ0FiLEVBQUFjLEdBQUEsS0FDQWQsRUFBQWUsR0FBQSxJQUNBZixFQUFBZ0IsR0FBQSxJQUNBaEIsRUFBQWlCLElBQUEsSUFDQWpCLEVBQUFrQixJQUFBLElBQ0FsQixFQUFBbUIsSUFBQSxJQUNBbkIsRUFBQW9CLElBQUEsSUFDQXBCLEVBQUFxQixJQUFBLElBQ0FyQixFQUFBc0IsSUFBQSxJQUNBdEIsRUFBQXVCLElBQUEsSUFDQXZCLEVBQUF3QixJQUFBLElBQ0F4QixFQUFBeUIsSUFBQSxJQUNBekIsRUFBQTBCLEdBQUEsSUFDQTFCLEVBQUEyQixJQUFBLElBQ0EzQixFQUFBNEIsSUFBQSxJQUNBNUIsRUFBQTZCLEdBQUEsSUFDQTdCLEVBQUE4QixHQUFBLElBQ0E5QixFQUFBK0IsR0FBQSxJQUNBL0IsRUFBQWdDLEdBQUEsSUFDQWhDLEVBQUFpQyxHQUFBLElBQ0FqQyxFQUFBa0MsSUFBQSxJQWxDQSxDQW1DQ2hSLEVBQUE4TyxLQUFBOU8sRUFBQThPLEdBQUEsS0FFRCxTQUFBbUMsR0FDQUEsRUFBQUMsSUFBQSxJQUNBRCxFQUFBRSxJQUFBLElBQ0FGLEVBQUFHLElBQUEsSUFDQUgsRUFBQUksSUFBQSxJQUNBSixFQUFBSyxJQUFBLElBQ0FMLEVBQUFNLElBQUEsSUFDQU4sRUFBQU8sSUFBQSxJQUNBUCxFQUFBUSxJQUFBLElBQ0FSLEVBQUFTLElBQUEsSUFDQVQsRUFBQVUsSUFBQSxJQUNBVixFQUFBVyxJQUFBLElBQ0FYLEVBQUFZLElBQUEsSUFDQVosRUFBQWEsSUFBQSxJQUNBYixFQUFBYyxHQUFBLElBQ0FkLEVBQUFlLElBQUEsSUFDQWYsRUFBQWdCLElBQUEsSUFDQWhCLEVBQUFpQixJQUFBLElBQ0FqQixFQUFBa0IsSUFBQSxJQUNBbEIsRUFBQW1CLElBQUEsSUFDQW5CLEVBQUFvQixJQUFBLElBQ0FwQixFQUFBcUIsSUFBQSxJQUNBckIsRUFBQXNCLEdBQUEsSUFDQXRCLEVBQUF1QixJQUFBLElBQ0F2QixFQUFBd0IsSUFBQSxJQUNBeEIsRUFBQXlCLElBQUEsSUFDQXpCLEVBQUEwQixLQUFBLElBQ0ExQixFQUFBMkIsSUFBQSxJQUNBM0IsRUFBQTRCLElBQUEsSUFDQTVCLEVBQUE2QixHQUFBLElBQ0E3QixFQUFBOEIsSUFBQSxJQUNBOUIsRUFBQStCLEdBQUEsSUFDQS9CLEVBQUFnQyxJQUFBLElBaENBLENBaUNDalQsRUFBQWlSLEtBQUFqUixFQUFBaVIsR0FBQSxtQ0N4RURyUSxPQUFBQyxlQUFBYixFQUFBLGNBQThDbUIsT0FBQSxJQUM5QyxJQUFBMkIsRUFBY2hELEVBQVEsR0FDdEJvVCxFQUF1QnBULEVBQVEsSUFDL0JxVCxFQUFlclQsRUFBUSxHQUN2QnNULEVBQXVCdFQsRUFBUSxHQUMvQnVULEVBQUEsV0FDQSxTQUFBQSxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBdFIsS0FBQWtSLGFBQ0FsUixLQUFBcVIsU0FDQXJSLEtBQUFzUixVQUNBdFIsS0FBQXVSLGlCQUFBLEVBQ0F2UixLQUFBd1Isa0JBQUEsRUFDQXhSLEtBQUF5UixpQkFBQSxFQUNBelIsS0FBQTBSLGtCQUFBLEVBQ0ExUixLQUFBMlIsZ0JBQUEsRUFDQTNSLEtBQUE0UixlQUFBLEVBQ0E1UixLQUFBNlIsd0JBQUEsQ0FDQUMsTUFBQSxHQUNBQyxLQUFBLEVBQ0FDLEdBQUEsRUFDQUMsR0FBQSxFQUNBQyxNQUFBLEVBQ0FDLEtBQUEsRUFDQUMsUUFBQSxHQUVBcFMsS0FBQXFTLFFBQUFDLFNBQUFDLGNBQUEsVUFDQXZTLEtBQUFxUyxRQUFBRyxVQUFBQyxJQUFBLFNBQUF0QixFQUFBLFVBQ0FuUixLQUFBcVMsUUFBQUssTUFBQXRCLFNBQUF1QixXQUNBM1MsS0FBQTRTLGNBQ0E1UyxLQUFBa1IsV0FBQTJCLFlBQUE3UyxLQUFBcVMsU0ErSUEsT0E3SUFwQixFQUFBdlIsVUFBQWlILFFBQUEsV0FDQTNHLEtBQUFrUixXQUFBNEIsWUFBQTlTLEtBQUFxUyxTQUNBclMsS0FBQStTLFlBQ0EvUyxLQUFBK1MsV0FBQXBNLFdBR0FzSyxFQUFBdlIsVUFBQWtULFlBQUEsV0FDQTVTLEtBQUFnVCxLQUFBaFQsS0FBQXFTLFFBQUFZLFdBQUEsTUFBbURDLE1BQUFsVCxLQUFBcVIsU0FDbkRyUixLQUFBcVIsUUFDQXJSLEtBQUFtVCxZQUdBbEMsRUFBQXZSLFVBQUEwVCxpQkFBQSxTQUFBdEosS0FDQW1ILEVBQUF2UixVQUFBMlQsT0FBQSxTQUFBdkosS0FDQW1ILEVBQUF2UixVQUFBNFQsUUFBQSxTQUFBeEosS0FDQW1ILEVBQUF2UixVQUFBNlQsYUFBQSxTQUFBekosS0FDQW1ILEVBQUF2UixVQUFBOFQsY0FBQSxTQUFBMUosRUFBQTJKLEVBQUFDLEtBQ0F6QyxFQUFBdlIsVUFBQWlVLG1CQUFBLFNBQUE3SixFQUFBOEosRUFBQUMsRUFBQUMsUUFDQSxJQUFBQSxJQUEwQ0EsR0FBQSxJQUUxQzdDLEVBQUF2UixVQUFBcVUsZUFBQSxTQUFBakssRUFBQWtLLEdBQ0FoVSxLQUFBaVUsa0JBQUFuSyxFQUFBa0ssSUFFQS9DLEVBQUF2UixVQUFBd1UsZ0JBQUEsU0FBQXBLLEVBQUFvSixHQUNBLEdBQUFBLElBQUFsVCxLQUFBcVIsT0FBQSxDQUdBLElBQUE4QyxFQUFBblUsS0FBQXFTLFFBQ0FyUyxLQUFBcVIsT0FBQTZCLEVBQ0FsVCxLQUFBcVMsUUFBQXJTLEtBQUFxUyxRQUFBK0IsWUFDQXBVLEtBQUE0UyxjQUNBNVMsS0FBQWtSLFdBQUFtRCxhQUFBclUsS0FBQXFTLFFBQUE4QixHQUNBblUsS0FBQWlVLGtCQUFBbkssRUFBQTlKLEtBQUFzUixTQUNBdFIsS0FBQXdULGNBQUExSixFQUFBLEVBQUFBLEVBQUFsSCxLQUFBLEtBRUFxTyxFQUFBdlIsVUFBQXVVLGtCQUFBLFNBQUFuSyxFQUFBa0ssR0FDQWhVLEtBQUF1UixrQkFBQSxHQUFBdlIsS0FBQXdSLG1CQUFBLElBR0F4UixLQUFBK1MsV0FBQWpDLEVBQUF3RCxpQkFBQXhLLEVBQUFrSyxFQUFBaFUsS0FBQXVSLGlCQUFBdlIsS0FBQXdSLG1CQUNBeFIsS0FBQStTLFdBQUF3QixXQUVBdEQsRUFBQXZSLFVBQUFzRSxPQUFBLFNBQUE4RixFQUFBcUksR0FDQW5TLEtBQUF5UixpQkFBQVUsRUFBQXFDLGdCQUNBeFUsS0FBQTBSLGtCQUFBUyxFQUFBc0MsaUJBQ0F6VSxLQUFBdVIsaUJBQUFZLEVBQUF2SSxnQkFDQTVKLEtBQUF3UixrQkFBQVcsRUFBQXRJLGlCQUNBN0osS0FBQTJSLGdCQUFBUSxFQUFBdUMsZUFDQTFVLEtBQUE0UixlQUFBTyxFQUFBd0MsY0FDQTNVLEtBQUFxUyxRQUFBdUMsTUFBQXpDLEVBQUEwQyxrQkFDQTdVLEtBQUFxUyxRQUFBeUMsT0FBQTNDLEVBQUE0QyxtQkFDQS9VLEtBQUFxUyxRQUFBSyxNQUFBa0MsTUFBQXpDLEVBQUE2QyxZQUFBLEtBQ0FoVixLQUFBcVMsUUFBQUssTUFBQW9DLE9BQUEzQyxFQUFBOEMsYUFBQSxLQUNBalYsS0FBQXFSLFFBQ0FyUixLQUFBbVQsV0FFQW5ULEtBQUFpVSxrQkFBQW5LLEVBQUE5SixLQUFBc1IsVUFFQUwsRUFBQXZSLFVBQUF3VixVQUFBLFNBQUF2UixFQUFBWCxFQUFBNFIsRUFBQUUsR0FDQTlVLEtBQUFnVCxLQUFBbUMsU0FBQXhSLEVBQUEzRCxLQUFBeVIsaUJBQUF6TyxFQUFBaEQsS0FBQTBSLGtCQUFBa0QsRUFBQTVVLEtBQUF5UixpQkFBQXFELEVBQUE5VSxLQUFBMFIsb0JBRUFULEVBQUF2UixVQUFBMFYsc0JBQUEsU0FBQXpSLEVBQUFYLEVBQUE0UixRQUNBLElBQUFBLElBQStCQSxFQUFBLEdBQy9CNVUsS0FBQWdULEtBQUFtQyxTQUFBeFIsRUFBQTNELEtBQUF5UixrQkFBQXpPLEVBQUEsR0FBQWhELEtBQUEwUixrQkFBQWhILE9BQUFELGlCQUFBLEVBQUFtSyxFQUFBNVUsS0FBQXlSLGlCQUFBL0csT0FBQUQsbUJBRUF3RyxFQUFBdlIsVUFBQTJWLG1CQUFBLFNBQUExUixFQUFBWCxHQUNBaEQsS0FBQWdULEtBQUFtQyxTQUFBeFIsRUFBQTNELEtBQUF5UixpQkFBQXpPLEVBQUFoRCxLQUFBMFIsa0JBQUFoSCxPQUFBRCxpQkFBQXpLLEtBQUEwUixvQkFFQVQsRUFBQXZSLFVBQUE0VixpQkFBQSxTQUFBM1IsRUFBQVgsRUFBQTRSLEVBQUFFLEdBQ0E5VSxLQUFBZ1QsS0FBQXVDLFVBQUE3SyxPQUFBRCxpQkFDQXpLLEtBQUFnVCxLQUFBd0MsV0FBQTdSLEVBQUEzRCxLQUFBeVIsaUJBQUEvRyxPQUFBRCxpQkFBQSxFQUFBekgsRUFBQWhELEtBQUEwUixrQkFBQWhILE9BQUFELGlCQUFBLEVBQUFtSyxFQUFBNVUsS0FBQXlSLGlCQUFBL0csT0FBQUQsaUJBQUFxSyxFQUFBOVUsS0FBQTBSLGtCQUFBaEgsT0FBQUQsbUJBRUF3RyxFQUFBdlIsVUFBQXlULFNBQUEsV0FDQW5ULEtBQUFxUixPQUNBclIsS0FBQWdULEtBQUF5QyxVQUFBLElBQUF6VixLQUFBcVMsUUFBQXVDLE1BQUE1VSxLQUFBcVMsUUFBQXlDLFNBR0E5VSxLQUFBZ1QsS0FBQTBDLFVBQUExVixLQUFBc1IsUUFBQXBILFdBQUF5TCxJQUNBM1YsS0FBQWdULEtBQUFtQyxTQUFBLElBQUFuVixLQUFBcVMsUUFBQXVDLE1BQUE1VSxLQUFBcVMsUUFBQXlDLFVBR0E3RCxFQUFBdlIsVUFBQWtXLFdBQUEsU0FBQWpTLEVBQUFYLEVBQUE0UixFQUFBRSxHQUNBOVUsS0FBQXFSLE9BQ0FyUixLQUFBZ1QsS0FBQXlDLFVBQUE5UixFQUFBM0QsS0FBQXlSLGlCQUFBek8sRUFBQWhELEtBQUEwUixrQkFBQWtELEVBQUE1VSxLQUFBeVIsaUJBQUFxRCxFQUFBOVUsS0FBQTBSLG9CQUdBMVIsS0FBQWdULEtBQUEwQyxVQUFBMVYsS0FBQXNSLFFBQUFwSCxXQUFBeUwsSUFDQTNWLEtBQUFnVCxLQUFBbUMsU0FBQXhSLEVBQUEzRCxLQUFBeVIsaUJBQUF6TyxFQUFBaEQsS0FBQTBSLGtCQUFBa0QsRUFBQTVVLEtBQUF5UixpQkFBQXFELEVBQUE5VSxLQUFBMFIscUJBR0FULEVBQUF2UixVQUFBbVcsa0JBQUEsU0FBQS9MLEVBQUFnTSxFQUFBblMsRUFBQVgsR0FDQWhELEtBQUFnVCxLQUFBK0MsS0FBQS9WLEtBQUFnVyxTQUFBbE0sR0FBQSxNQUNBOUosS0FBQWdULEtBQUFpRCxhQUFBLE1BQ0FqVyxLQUFBa1csU0FBQXBNLEVBQUE5RyxHQUNBaEQsS0FBQWdULEtBQUFtRCxTQUFBTCxFQUFBL0UsRUFBQWpRLHNCQUFBNkMsRUFBQTNELEtBQUF5UixpQkFBQXpSLEtBQUEyUixnQkFBQTNPLEVBQUFoRCxLQUFBMFIsa0JBQUExUixLQUFBNFIsaUJBRUFYLEVBQUF2UixVQUFBMFcsVUFBQSxTQUFBdE0sRUFBQWdJLEVBQUFDLEVBQUE2QyxFQUFBalIsRUFBQVgsRUFBQWlQLEVBQUFELEVBQUFFLEVBQUFDLEVBQUFDLEdBRUFILEdBREFuSSxFQUFBMUcsUUFBQWlULDRCQUFBbkUsR0FBQUQsRUFBQSxHQUFBQSxJQUFBdlIsRUFBQTJILHVCQUNBLElBQ0FySSxLQUFBNlIsd0JBQUFDLFFBQ0E5UixLQUFBNlIsd0JBQUFFLE9BQ0EvUixLQUFBNlIsd0JBQUFHLEtBQ0FoUyxLQUFBNlIsd0JBQUFJLEtBQ0FqUyxLQUFBNlIsd0JBQUFLLFFBQUFwSSxFQUFBMUcsUUFBQWtULFdBQ0F0VyxLQUFBNlIsd0JBQUFNLE1BQ0FuUyxLQUFBNlIsd0JBQUFPLFNBQ0FwUyxLQUFBK1MsWUFBQS9TLEtBQUErUyxXQUFBd0QsS0FBQXZXLEtBQUFnVCxLQUFBaFQsS0FBQTZSLHdCQUFBbE8sRUFBQTNELEtBQUF5UixpQkFBQXpSLEtBQUEyUixnQkFBQTNPLEVBQUFoRCxLQUFBMFIsa0JBQUExUixLQUFBNFIsaUJBRUE1UixLQUFBd1csbUJBQUExTSxFQUFBZ0ksRUFBQThDLEVBQUEzQyxFQUFBdE8sRUFBQVgsRUFBQWtQLEdBQUFwSSxFQUFBMUcsUUFBQWtULFdBQUFuRSxFQUFBQyxJQUdBbkIsRUFBQXZSLFVBQUE4VyxtQkFBQSxTQUFBMU0sRUFBQWdJLEVBQUE4QyxFQUFBM0MsRUFBQXRPLEVBQUFYLEVBQUFrUCxFQUFBQyxFQUFBQyxHQUNBcFMsS0FBQWdULEtBQUF5RCxPQUNBelcsS0FBQWdULEtBQUErQyxLQUFBL1YsS0FBQWdXLFNBQUFsTSxFQUFBb0ksRUFBQUUsR0FDQXBTLEtBQUFnVCxLQUFBaUQsYUFBQSxNQUNBaEUsSUFBQXZSLEVBQUEySCx1QkFDQXJJLEtBQUFnVCxLQUFBMEMsVUFBQTFWLEtBQUFzUixRQUFBcEgsV0FBQXlMLElBRUEzRSxFQUFBN0YsV0FBQThHLEdBQ0FqUyxLQUFBZ1QsS0FBQTBDLFVBQUExVixLQUFBc1IsUUFBQWhILEtBQUEySCxHQUFBMEQsSUFHQTNWLEtBQUFnVCxLQUFBMEMsVUFBQTFWLEtBQUFzUixRQUFBckgsV0FBQTBMLElBRUEzVixLQUFBa1csU0FBQXBNLEVBQUE5RyxHQUNBbVAsSUFDQW5TLEtBQUFnVCxLQUFBMEQsWUFBQWhXLEVBQUE0SCxhQUVBdEksS0FBQWdULEtBQUFtRCxTQUFBckUsRUFBQW5PLEVBQUEzRCxLQUFBeVIsaUJBQUF6UixLQUFBMlIsZ0JBQUEzTyxFQUFBaEQsS0FBQTBSLGtCQUFBMVIsS0FBQTRSLGdCQUNBNVIsS0FBQWdULEtBQUEyRCxXQUVBMUYsRUFBQXZSLFVBQUF3VyxTQUFBLFNBQUFwTSxFQUFBOUcsR0FDQWhELEtBQUFnVCxLQUFBNEQsWUFDQTVXLEtBQUFnVCxLQUFBNkQsS0FBQSxFQUFBN1QsRUFBQWhELEtBQUEwUixrQkFBQTVILEVBQUFwSCxLQUFBMUMsS0FBQXlSLGlCQUFBelIsS0FBQTBSLG1CQUNBMVIsS0FBQWdULEtBQUE4RCxRQUVBN0YsRUFBQXZSLFVBQUFzVyxTQUFBLFNBQUFsTSxFQUFBaU4sRUFBQUMsR0FHQSxPQURBQSxFQUFBLGFBQ0EsS0FGQUQsRUFBQWpOLEVBQUExRyxRQUFBMEgsZUFBQWhCLEVBQUExRyxRQUFBeUgsWUFFQSxJQUFBZixFQUFBMUcsUUFBQXdILFNBQUFGLE9BQUFELGlCQUFBLE1BQUFYLEVBQUExRyxRQUFBdUgsWUFFQXNHLEVBdktBLEdBeUtBclQsRUFBQXFULGdEQzlLQXpTLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBQzlDLElBQUFrWSxFQUFBQyxFQUFBLFdBQ0FDLEVBQUFELEVBQUEsV0FDQUUsRUFBQUYsRUFBQSxXQUNBRyxFQUFBSCxFQUFBLFdBQ0FJLEVBQUEsQ0FDQTNCLElBQUEsMkJBQ0F6SyxLQUFBLFlBeUNBLFNBQUFnTSxFQUFBdkIsR0FDQSxPQUNBQSxNQUNBekssS0FBQXFNLFNBQUE1QixFQUFBcEwsTUFBQSxlQUdBLFNBQUFpTixFQUFBclosR0FDQSxJQUFBMEIsRUFBQTFCLEVBQUF3VSxTQUFBLElBQ0EsT0FBQTlTLEVBQUFvQyxPQUFBLE1BQUFwQyxJQS9DQWpDLEVBQUE2WixvQkFBQSxXQW9CQSxJQW5CQSxJQUFBMU4sRUFBQSxDQUNBbU4sRUFBQSxXQUNBQSxFQUFBLFdBQ0FBLEVBQUEsV0FDQUEsRUFBQSxXQUNBQSxFQUFBLFdBQ0FBLEVBQUEsV0FDQUEsRUFBQSxXQUNBQSxFQUFBLFdBQ0FBLEVBQUEsV0FDQUEsRUFBQSxXQUNBQSxFQUFBLFdBQ0FBLEVBQUEsV0FDQUEsRUFBQSxXQUNBQSxFQUFBLFdBQ0FBLEVBQUEsV0FDQUEsRUFBQSxZQUVBUSxFQUFBLHVCQUNBNVosRUFBQSxFQUFtQkEsRUFBQSxJQUFTQSxJQUFBLENBQzVCLElBQUFjLEVBQUE4WSxFQUFBNVosRUFBQSxRQUNBNlosRUFBQUQsRUFBQTVaLEVBQUEsT0FDQW1DLEVBQUF5WCxFQUFBNVosRUFBQSxHQUNBaU0sRUFBQXRHLEtBQUEsQ0FDQWtTLElBQUEsSUFBQTZCLEVBQUE1WSxHQUFBNFksRUFBQUcsR0FBQUgsRUFBQXZYLEdBQ0FpTCxNQUFBdE0sR0FBQSxHQUFBK1ksR0FBQSxHQUFBMVgsR0FBQSxhQUdBLElBQUFuQyxFQUFBLEVBQW1CQSxFQUFBLEdBQVFBLElBQUEsQ0FDM0IsSUFBQUssRUFBQSxLQUFBTCxFQUNBc0csRUFBQW9ULEVBQUFyWixHQUNBNEwsRUFBQXRHLEtBQUEsQ0FDQWtTLElBQUEsSUFBQXZSLE1BQ0E4RyxNQUFBL00sR0FBQSxHQUFBQSxHQUFBLEdBQUFBLEdBQUEsYUFHQSxPQUFBNEwsRUFyQ0EsR0FpREEsSUFBQTZOLEVBQUEsV0FDQSxTQUFBQSxFQUFBdEYsRUFBQXZILEdBQ0EvSyxLQUFBK0ssb0JBQ0EsSUFBQThNLEVBQUF2RixFQUFBQyxjQUFBLFVBQ0FzRixFQUFBakQsTUFBQSxFQUNBaUQsRUFBQS9DLE9BQUEsRUFDQTlVLEtBQUFnVCxLQUFBNkUsRUFBQTVFLFdBQUEsTUFDQWpULEtBQUFnVCxLQUFBOEUseUJBQUEsT0FDQTlYLEtBQUErWCxhQUFBL1gsS0FBQWdULEtBQUFnRixxQkFBQSxTQUNBaFksS0FBQStKLE9BQUEsQ0FDQUUsV0FBQWdOLEVBQ0EvTSxXQUFBaU4sRUFDQWhOLE9BQUFpTixFQUNBaE4sYUFBQWlOLEVBQ0FoTixVQUFBaU4sRUFDQWhOLEtBQUExTSxFQUFBNlosb0JBQUFsTixTQWlEQSxPQTlDQXFOLEVBQUFsWSxVQUFBdVksU0FBQSxTQUFBQyxHQUNBbFksS0FBQStKLE9BQUFFLFdBQUFqSyxLQUFBbVksWUFBQUQsRUFBQWpPLFdBQUFnTixHQUNBalgsS0FBQStKLE9BQUFHLFdBQUFsSyxLQUFBbVksWUFBQUQsRUFBQWhPLFdBQUFpTixHQUNBblgsS0FBQStKLE9BQUFJLE9BQUFuSyxLQUFBbVksWUFBQUQsRUFBQS9OLE9BQUFpTixHQUFBLEdBQ0FwWCxLQUFBK0osT0FBQUssYUFBQXBLLEtBQUFtWSxZQUFBRCxFQUFBOU4sYUFBQWlOLEdBQUEsR0FDQXJYLEtBQUErSixPQUFBTSxVQUFBckssS0FBQW1ZLFlBQUFELEVBQUE3TixVQUFBaU4sR0FBQSxHQUNBdFgsS0FBQStKLE9BQUFPLEtBQUEsR0FBQXRLLEtBQUFtWSxZQUFBRCxFQUFBRSxNQUFBeGEsRUFBQTZaLG9CQUFBLElBQ0F6WCxLQUFBK0osT0FBQU8sS0FBQSxHQUFBdEssS0FBQW1ZLFlBQUFELEVBQUFHLElBQUF6YSxFQUFBNlosb0JBQUEsSUFDQXpYLEtBQUErSixPQUFBTyxLQUFBLEdBQUF0SyxLQUFBbVksWUFBQUQsRUFBQUksTUFBQTFhLEVBQUE2WixvQkFBQSxJQUNBelgsS0FBQStKLE9BQUFPLEtBQUEsR0FBQXRLLEtBQUFtWSxZQUFBRCxFQUFBSyxPQUFBM2EsRUFBQTZaLG9CQUFBLElBQ0F6WCxLQUFBK0osT0FBQU8sS0FBQSxHQUFBdEssS0FBQW1ZLFlBQUFELEVBQUFNLEtBQUE1YSxFQUFBNlosb0JBQUEsSUFDQXpYLEtBQUErSixPQUFBTyxLQUFBLEdBQUF0SyxLQUFBbVksWUFBQUQsRUFBQU8sUUFBQTdhLEVBQUE2WixvQkFBQSxJQUNBelgsS0FBQStKLE9BQUFPLEtBQUEsR0FBQXRLLEtBQUFtWSxZQUFBRCxFQUFBUSxLQUFBOWEsRUFBQTZaLG9CQUFBLElBQ0F6WCxLQUFBK0osT0FBQU8sS0FBQSxHQUFBdEssS0FBQW1ZLFlBQUFELEVBQUFTLE1BQUEvYSxFQUFBNlosb0JBQUEsSUFDQXpYLEtBQUErSixPQUFBTyxLQUFBLEdBQUF0SyxLQUFBbVksWUFBQUQsRUFBQVUsWUFBQWhiLEVBQUE2WixvQkFBQSxJQUNBelgsS0FBQStKLE9BQUFPLEtBQUEsR0FBQXRLLEtBQUFtWSxZQUFBRCxFQUFBVyxVQUFBamIsRUFBQTZaLG9CQUFBLElBQ0F6WCxLQUFBK0osT0FBQU8sS0FBQSxJQUFBdEssS0FBQW1ZLFlBQUFELEVBQUFZLFlBQUFsYixFQUFBNlosb0JBQUEsS0FDQXpYLEtBQUErSixPQUFBTyxLQUFBLElBQUF0SyxLQUFBbVksWUFBQUQsRUFBQWEsYUFBQW5iLEVBQUE2WixvQkFBQSxLQUNBelgsS0FBQStKLE9BQUFPLEtBQUEsSUFBQXRLLEtBQUFtWSxZQUFBRCxFQUFBYyxXQUFBcGIsRUFBQTZaLG9CQUFBLEtBQ0F6WCxLQUFBK0osT0FBQU8sS0FBQSxJQUFBdEssS0FBQW1ZLFlBQUFELEVBQUFlLGNBQUFyYixFQUFBNlosb0JBQUEsS0FDQXpYLEtBQUErSixPQUFBTyxLQUFBLElBQUF0SyxLQUFBbVksWUFBQUQsRUFBQWdCLFdBQUF0YixFQUFBNlosb0JBQUEsS0FDQXpYLEtBQUErSixPQUFBTyxLQUFBLElBQUF0SyxLQUFBbVksWUFBQUQsRUFBQWlCLFlBQUF2YixFQUFBNlosb0JBQUEsTUFFQUcsRUFBQWxZLFVBQUF5WSxZQUFBLFNBQUF4QyxFQUFBeUQsRUFBQXJPLEdBRUEsUUFEQSxJQUFBQSxJQUEyQ0EsRUFBQS9LLEtBQUErSyxvQkFDM0M0SyxFQUNBLE9BQUF5RCxFQUlBLEdBRkFwWixLQUFBZ1QsS0FBQTBDLFVBQUExVixLQUFBK1gsYUFDQS9YLEtBQUFnVCxLQUFBMEMsVUFBQUMsRUFDQSxpQkFBQTNWLEtBQUFnVCxLQUFBMEMsVUFFQSxPQURBMkQsUUFBQUMsS0FBQSxVQUFBM0QsRUFBQSw4QkFBQXlELEVBQUF6RCxLQUNBeUQsRUFFQXBaLEtBQUFnVCxLQUFBbUMsU0FBQSxTQUNBLElBQUFvRSxFQUFBdlosS0FBQWdULEtBQUF3RyxhQUFBLFNBQUFELEtBQ0EsT0FBQXhPLEdBQUEsTUFBQXdPLEVBQUEsR0FLQSxDQUNBNUQsTUFDQXpLLE1BQUFxTyxFQUFBLE9BQUFBLEVBQUEsT0FBQUEsRUFBQSxNQUFBQSxFQUFBLFVBTkFGLFFBQUFDLEtBQUEsVUFBQTNELEVBQUEsMEVBQ0F5RCxFQUFBekQsSUFBQSxLQUNBeUQsSUFPQXhCLEVBaEVBLEdBa0VBaGEsRUFBQWdhLDZDQzVIQXBaLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBQzlDLElBQUEwYSxFQUFBLFdBQ0EsU0FBQUEsSUFDQXpaLEtBQUEwWixZQUFBLEVBV0EsT0FUQUQsRUFBQS9aLFVBQUFpSCxRQUFBLGFBQ0E4UyxFQUFBL1osVUFBQTZVLE9BQUEsV0FDQXZVLEtBQUEwWixhQUNBMVosS0FBQTJaLFlBQ0EzWixLQUFBMFosWUFBQSxJQUdBRCxFQUFBL1osVUFBQWlhLFVBQUEsYUFDQUYsRUFBQS9aLFVBQUFrYSxXQUFBLGFBQ0FILEVBYkEsR0FlQTdiLEVBQUFpYyxRQUFBSixnQ0NoQkFqYixPQUFBQyxlQUFBYixFQUFBLGNBQThDbUIsT0FBQSxJQUM5QyxJQUFBK2EsRUFBQSxXQUNBLFNBQUFBLEVBQUF4WSxFQUFBeVksR0FDQS9aLEtBQUFzQixZQUNBdEIsS0FBQStaLFlBQ0EvWixLQUFBZ2EsZ0JBQUEsS0E2QkEsT0EzQkFGLEVBQUFwYSxVQUFBaUgsUUFBQSxXQUNBM0csS0FBQWdhLGtCQUNBdFAsT0FBQXVQLHFCQUFBamEsS0FBQWdhLGlCQUNBaGEsS0FBQWdhLGdCQUFBLE9BR0FGLEVBQUFwYSxVQUFBd2EsUUFBQSxTQUFBQyxFQUFBQyxHQUNBLElBQUEvVCxFQUFBckcsS0FDQW1hLFlBQUEsRUFDQUMsWUFBQXBhLEtBQUFzQixVQUFBc0IsS0FBQSxFQUNBLElBQUF5WCxPQUFBN1csSUFBQXhELEtBQUFzYSxXQUFBLE9BQUF0YSxLQUFBc2EsVUFDQUMsT0FBQS9XLElBQUF4RCxLQUFBd2EsU0FBQSxPQUFBeGEsS0FBQXdhLFFBQ0F4YSxLQUFBc2EsVUFBQUQsRUFBQTVWLEtBQUFFLElBQUEzRSxLQUFBc2EsVUFBQUgsS0FDQW5hLEtBQUF3YSxRQUFBRCxFQUFBOVYsS0FBQUMsSUFBQTFFLEtBQUF3YSxRQUFBSixLQUNBcGEsS0FBQWdhLGtCQUdBaGEsS0FBQWdhLGdCQUFBdFAsT0FBQStQLHNCQUFBLFdBQXlFLE9BQUFwVSxFQUFBcVUsb0JBRXpFWixFQUFBcGEsVUFBQWdiLGNBQUEsV0FDQTFhLEtBQUFzYSxVQUFBN1YsS0FBQUMsSUFBQTFFLEtBQUFzYSxVQUFBLEdBQ0F0YSxLQUFBd2EsUUFBQS9WLEtBQUFFLElBQUEzRSxLQUFBd2EsUUFBQXhhLEtBQUFzQixVQUFBc0IsS0FBQSxHQUNBNUMsS0FBQStaLFVBQUEvWixLQUFBc2EsVUFBQXRhLEtBQUF3YSxTQUNBeGEsS0FBQXNhLFVBQUEsS0FDQXRhLEtBQUF3YSxRQUFBLEtBQ0F4YSxLQUFBZ2EsZ0JBQUEsTUFFQUYsRUFqQ0EsR0FtQ0FsYyxFQUFBa2MsZ0RDcENBdGIsT0FBQUMsZUFBQWIsRUFBQSxjQUE4Q21CLE9BQUEsSUFDOUNuQixFQUFBK2MsVUFBQSxhQUNBL2MsRUFBQWdkLFlBQUEsaUJBQ0FoZCxFQUFBaWQsY0FBQSwrRkNIQXJjLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBQzlDLElBQUErYixFQUFpQnBkLEVBQVEsSUFDekJxZCxFQUFjcmQsRUFBUSxJQUN0QnNkLEVBQUEsV0FDQSxTQUFBQSxFQUFBNVgsR0FDQXBELEtBQUFpYixNQUFBLElBQUFILEVBQUFFLFNBQUE1WCxHQXdJQSxPQXRJQTVFLE9BQUFDLGVBQUF1YyxFQUFBdGIsVUFBQSxXQUNBZixJQUFBLFdBQTBCLE9BQUFxQixLQUFBaWIsTUFBQUMsU0FDMUJ4YyxZQUFBLEVBQ0FtRSxjQUFBLElBRUFyRSxPQUFBQyxlQUFBdWMsRUFBQXRiLFVBQUEsWUFDQWYsSUFBQSxXQUEwQixPQUFBcUIsS0FBQWliLE1BQUFFLFVBQzFCemMsWUFBQSxFQUNBbUUsY0FBQSxJQUVBckUsT0FBQUMsZUFBQXVjLEVBQUF0YixVQUFBLFFBQ0FmLElBQUEsV0FBMEIsT0FBQXFCLEtBQUFpYixNQUFBclksTUFDMUJsRSxZQUFBLEVBQ0FtRSxjQUFBLElBRUFyRSxPQUFBQyxlQUFBdWMsRUFBQXRiLFVBQUEsUUFDQWYsSUFBQSxXQUEwQixPQUFBcUIsS0FBQWliLE1BQUF2WSxNQUMxQmhFLFlBQUEsRUFDQW1FLGNBQUEsSUFFQXJFLE9BQUFDLGVBQUF1YyxFQUFBdGIsVUFBQSxXQUNBZixJQUFBLFdBQTBCLE9BQUFxQixLQUFBaWIsTUFBQXpaLFNBQzFCOUMsWUFBQSxFQUNBbUUsY0FBQSxJQUVBbVksRUFBQXRiLFVBQUEwYixLQUFBLFdBQ0FwYixLQUFBaWIsTUFBQUcsUUFFQUosRUFBQXRiLFVBQUEyYixNQUFBLFdBQ0FyYixLQUFBaWIsTUFBQUksU0FFQUwsRUFBQXRiLFVBQUErSSxHQUFBLFNBQUE5RyxFQUFBK0csR0FDQTFJLEtBQUFpYixNQUFBeFMsR0FBQTlHLEVBQUErRyxJQUVBc1MsRUFBQXRiLFVBQUFtSixJQUFBLFNBQUFsSCxFQUFBK0csR0FDQTFJLEtBQUFpYixNQUFBcFMsSUFBQWxILEVBQUErRyxJQUVBc1MsRUFBQXRiLFVBQUE2SCxLQUFBLFNBQUE1RixFQUFBNFgsR0FDQXZaLEtBQUFpYixNQUFBMVQsS0FBQTVGLEVBQUE0WCxJQUVBeUIsRUFBQXRiLFVBQUErRyxzQkFBQSxTQUFBOUUsRUFBQWdILEdBQ0EsT0FBQTNJLEtBQUFpYixNQUFBeFUsc0JBQUE5RSxFQUFBZ0gsSUFFQXFTLEVBQUF0YixVQUFBc0UsT0FBQSxTQUFBc1gsRUFBQTFZLEdBQ0E1QyxLQUFBaWIsTUFBQWpYLE9BQUFzWCxFQUFBMVksSUFFQW9ZLEVBQUF0YixVQUFBNmIsUUFBQSxTQUFBaEMsR0FDQXZaLEtBQUFpYixNQUFBTSxRQUFBaEMsSUFFQXlCLEVBQUF0YixVQUFBOGIsS0FBQSxTQUFBQyxHQUNBemIsS0FBQWliLE1BQUFPLEtBQUFDLElBRUFULEVBQUF0YixVQUFBZ2MsNEJBQUEsU0FBQUMsR0FDQTNiLEtBQUFpYixNQUFBUyw0QkFBQUMsSUFFQVgsRUFBQXRiLFVBQUFrYyxvQkFBQSxTQUFBQyxFQUFBbFQsRUFBQXZGLEdBQ0EsT0FBQXBELEtBQUFpYixNQUFBVyxvQkFBQUMsRUFBQWxULEVBQUF2RixJQUVBNFgsRUFBQXRiLFVBQUFvYyxzQkFBQSxTQUFBQyxHQUNBL2IsS0FBQWliLE1BQUFhLHNCQUFBQyxJQUVBZixFQUFBdGIsVUFBQXNjLHdCQUFBLFNBQUFyVCxHQUNBLE9BQUEzSSxLQUFBaWIsTUFBQWUsd0JBQUFyVCxJQUVBcVMsRUFBQXRiLFVBQUF1YywwQkFBQSxTQUFBQyxHQUNBbGMsS0FBQWliLE1BQUFnQiwwQkFBQUMsSUFFQWxCLEVBQUF0YixVQUFBMEcsVUFBQSxTQUFBK1YsR0FDQSxPQUFBbmMsS0FBQWliLE1BQUE3VSxVQUFBK1YsSUFFQW5CLEVBQUF0YixVQUFBMGMsYUFBQSxXQUNBLE9BQUFwYyxLQUFBaWIsTUFBQW1CLGdCQUVBcEIsRUFBQXRiLFVBQUEyYyxhQUFBLFdBQ0EsT0FBQXJjLEtBQUFpYixNQUFBb0IsZ0JBRUFyQixFQUFBdGIsVUFBQTRjLGVBQUEsV0FDQXRjLEtBQUFpYixNQUFBcUIsa0JBRUF0QixFQUFBdGIsVUFBQTZjLFVBQUEsV0FDQXZjLEtBQUFpYixNQUFBc0IsYUFFQXZCLEVBQUF0YixVQUFBOGMsWUFBQSxTQUFBNUksRUFBQUMsR0FDQTdULEtBQUFpYixNQUFBdUIsWUFBQTVJLEVBQUFDLElBRUFtSCxFQUFBdGIsVUFBQWlILFFBQUEsV0FDQTNHLEtBQUFpYixNQUFBdFUsV0FFQXFVLEVBQUF0YixVQUFBK2MsUUFBQSxXQUNBemMsS0FBQWliLE1BQUF3QixXQUVBekIsRUFBQXRiLFVBQUFnZCxZQUFBLFNBQUFoVyxHQUNBMUcsS0FBQWliLE1BQUF5QixZQUFBaFcsSUFFQXNVLEVBQUF0YixVQUFBaWQsWUFBQSxTQUFBQyxHQUNBNWMsS0FBQWliLE1BQUEwQixZQUFBQyxJQUVBNUIsRUFBQXRiLFVBQUFtZCxZQUFBLFdBQ0E3YyxLQUFBaWIsTUFBQTRCLGVBRUE3QixFQUFBdGIsVUFBQW9kLGVBQUEsV0FDQTljLEtBQUFpYixNQUFBNkIsa0JBRUE5QixFQUFBdGIsVUFBQXFkLGFBQUEsU0FBQTlYLEdBQ0FqRixLQUFBaWIsTUFBQThCLGFBQUE5WCxJQUVBK1YsRUFBQXRiLFVBQUErQixNQUFBLFdBQ0F6QixLQUFBaWIsTUFBQXhaLFNBRUF1WixFQUFBdGIsVUFBQXNkLE1BQUEsU0FBQXpELEdBQ0F2WixLQUFBaWIsTUFBQStCLE1BQUF6RCxJQUVBeUIsRUFBQXRiLFVBQUF1ZCxVQUFBLFNBQUE1ZCxHQUNBLE9BQUFXLEtBQUFpYixNQUFBZ0MsVUFBQTVkLElBRUEyYixFQUFBdGIsVUFBQXdkLFVBQUEsU0FBQTdkLEVBQUFOLEdBQ0FpQixLQUFBaWIsTUFBQWlDLFVBQUE3ZCxFQUFBTixJQUVBaWMsRUFBQXRiLFVBQUF3YSxRQUFBLFNBQUF0RyxFQUFBQyxHQUNBN1QsS0FBQWliLE1BQUFmLFFBQUF0RyxFQUFBQyxJQUVBbUgsRUFBQXRiLFVBQUF5ZCxNQUFBLFdBQ0FuZCxLQUFBaWIsTUFBQWtDLFNBRUFuQyxFQUFBb0MsV0FBQSxTQUFBQyxHQUNBQSxFQUFBbFUsTUFBQTZSLElBRUF4YyxPQUFBQyxlQUFBdWMsRUFBQSxXQUNBcmMsSUFBQSxXQUNBLE9BQUFvYyxHQUVBcmMsWUFBQSxFQUNBbUUsY0FBQSxJQUVBbVksRUExSUEsR0E0SUFwZCxFQUFBb2QseUNDL0lBeGMsT0FBQUMsZUFBQWIsRUFBQSxjQUE4Q21CLE9BQUEsSUFDOUMsSUFBQXVlLEVBQXdCNWYsRUFBUSxJQUNoQ0UsRUFBQTJmLFFBQUEsU0FBQUMsR0FDQSxJQUFBQyxFQUFBLENBQ0Esa0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esb0NBQ0Esc0NBQ0EsMENBQ0EsMENBQ0EsMkNBRUFDLEVBQUEsQ0FDQSwwQ0FDQSw0Q0FDQSxnREFDQSxnREFDQSxpQkFnQ0EsSUFBQUMsRUFBQSxFQUFBSCxFQUFBRyxRQUNBQyxFQUFBLElBQUFDLFdBQUEsT0FDQVAsRUFBQVEsS0FBQUYsRUFBQSxHQUNBQSxFQUFBLEdBQUFKLEVBQUFPLElBQ0FULEVBQUFRLEtBQUFGLEVBQUFKLEVBQUFHLFFBQUEsTUFDQUwsRUFBQVEsS0FBQUYsRUFBQUosRUFBQUcsUUFBQSxTQUNBTCxFQUFBUSxLQUFBRixFQUFBLGFBQ0FBLEVBQUEsUUFDQUEsRUFBQSxRQUNBTixFQUFBUSxLQUFBRixFQUFBLGVBQ0FBLEVBQUEsU0FDQU4sRUFBQVEsS0FBQUYsRUFBQSxlQUNBTixFQUFBUSxLQUFBRixFQUFBLGVBQ0FOLEVBQUFRLEtBQUFGLEVBQUEsZUFDQU4sRUFBQVEsS0FBQUYsRUFBQSxlQUNBTixFQUFBUSxLQUFBRixFQUFBLGVBQ0FOLEVBQUFRLEtBQUFGLEVBQUEsZUFDQSxRQUFBaGYsRUFBQSxFQUFtQkEsRUFBQTZlLEVBQUF4YixTQUEwQnJELEVBQzdDMGUsRUFBQVEsS0FBQUYsRUFBQSxFQUFBSCxFQUFBN2UsR0FBQSxHQUFBNmUsRUFBQTdlLEdBQUEsTUFFQSxnQkFBQW9mLEdBQ0EsT0FBQUEsRUFBQSxHQUNBLEVBQUFMLEVBRUFLLEVBQUEsSUFDQSxFQUVBQSxFQUFBLE1BQ0FKLEVBQUFJLEdBMURBLFNBQUFDLEVBQUExRSxHQUNBLElBRUEyRSxFQUZBdlosRUFBQSxFQUNBRCxFQUFBNlUsRUFBQXRYLE9BQUEsRUFFQSxHQUFBZ2MsRUFBQTFFLEVBQUEsT0FBQTBFLEVBQUExRSxFQUFBN1UsR0FBQSxHQUNBLFNBRUEsS0FBQUEsR0FBQUMsR0FFQSxHQUFBc1osRUFBQTFFLEVBREEyRSxFQUFBdlosRUFBQUQsR0FBQSxHQUNBLEdBQ0FDLEVBQUF1WixFQUFBLE1BRUEsTUFBQUQsRUFBQTFFLEVBQUEyRSxHQUFBLElBSUEsU0FIQXhaLEVBQUF3WixFQUFBLEVBTUEsU0FHQUMsQ0FEQUYsRUF1Q0FELEVBdENBTixHQUNBLEVBRUFPLEdBQUEsUUFBQUEsR0FBQSxRQUFBQSxHQUFBLFFBQUFBLEdBQUEsT0FDQSxFQUVBLEVBUEEsSUFBQUEsR0ExRUEsQ0FtSEMsQ0FBR0YsSUFBQSxFQUFBSixRQUFBLElBc0JKL2YsRUFBQXdnQixtQkFyQkEsU0FBQXZlLEdBR0EsSUFGQSxJQUFBc0ksRUFBQSxFQUNBbEcsRUFBQXBDLEVBQUFvQyxPQUNBbkUsRUFBQSxFQUFtQkEsRUFBQW1FLElBQVluRSxFQUFBLENBQy9CLElBQUFpVSxFQUFBbFMsRUFBQXdlLFdBQUF2Z0IsR0FDQSxVQUFBaVUsTUFBQSxPQUNBLEtBQUFqVSxHQUFBbUUsRUFDQSxPQUFBa0csRUFBQXZLLEVBQUEyZixRQUFBeEwsR0FFQSxJQUFBdU0sRUFBQXplLEVBQUF3ZSxXQUFBdmdCLEdBQ0EsT0FBQXdnQixNQUFBLE1BQ0F2TSxFQUFBLE1BQUFBLEVBQUEsT0FBQXVNLEVBQUEsWUFHQW5XLEdBQUF2SyxFQUFBMmYsUUFBQWUsR0FHQW5XLEdBQUF2SyxFQUFBMmYsUUFBQXhMLEdBRUEsT0FBQTVKLGlDQ3pJQTNKLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBQzlDLElBQUFpUyxFQUF1QnRULEVBQVEsR0FDL0I2Z0IsRUFBeUI3Z0IsRUFBUSxJQUNqQzhnQixFQUFzQjlnQixFQUFRLElBQzlCK2dCLEVBQXdCL2dCLEVBQVEsSUFDaENnaEIsRUFBQSxDQUNBQyxLQUFBSCxFQUFBM0UsUUFDQStFLE9BQUFILEVBQUE1RSxRQUNBZ0YsUUFBQU4sRUFBQTFFLFNBRUFpRixFQUFBLEdBa0NBbGhCLEVBQUEwVyxpQkFqQ0EsU0FBQXhLLEVBQUFDLEVBQUFILEVBQUFDLEdBRUEsSUFEQSxJQUFBa1YsRUFBQS9OLEVBQUFySCxlQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBak0sRUFBQSxFQUFtQkEsRUFBQWdoQixFQUFBN2MsT0FBMkJuRSxJQUFBLENBQzlDLElBQ0FraEIsR0FEQUMsRUFBQUgsRUFBQWhoQixJQUNBb2hCLFFBQUFwWSxRQUFBZ0QsR0FDQSxHQUFBa1YsR0FBQSxHQUNBLEdBQUFoTyxFQUFBaEcsYUFBQWlVLEVBQUFFLE9BQUFKLEdBQ0EsT0FBQUUsRUFBQUcsTUFFQSxJQUFBSCxFQUFBQyxRQUFBamQsT0FDQTZjLEVBQUFqWSxPQUFBL0ksRUFBQSxHQUdBbWhCLEVBQUFDLFFBQUFyWSxPQUFBbVksRUFBQSxHQUVBLE9BR0EsSUFBQWxoQixFQUFBLEVBQW1CQSxFQUFBZ2hCLEVBQUE3YyxPQUEyQm5FLElBQUEsQ0FDOUMsSUFBQW1oQixFQUFBSCxFQUFBaGhCLEdBQ0EsR0FBQWtULEVBQUFoRyxhQUFBaVUsRUFBQUUsT0FBQUosR0FFQSxPQURBRSxFQUFBQyxRQUFBemIsS0FBQXFHLEdBQ0FtVixFQUFBRyxNQUdBLElBQUFDLEVBQUEsQ0FDQUQsTUFBQSxJQUFBVixFQUFBNVUsRUFBQTFHLFFBQUFvSCx1QkFBQThILFNBQUF5TSxHQUNBSSxPQUFBSixFQUNBRyxRQUFBLENBQUFwVixJQUdBLE9BREFnVixFQUFBcmIsS0FBQTRiLEdBQ0FBLEVBQUFELE9BaUJBeGhCLEVBQUEwaEIsd0JBZEEsU0FBQXhWLEdBQ0EsUUFBQWhNLEVBQUEsRUFBbUJBLEVBQUFnaEIsRUFBQTdjLE9BQTJCbkUsSUFBQSxDQUM5QyxJQUFBNEwsRUFBQW9WLEVBQUFoaEIsR0FBQW9oQixRQUFBcFksUUFBQWdELEdBQ0EsUUFBQUosRUFBQSxDQUNBLElBQUFvVixFQUFBaGhCLEdBQUFvaEIsUUFBQWpkLE9BQ0E2YyxFQUFBalksT0FBQS9JLEVBQUEsR0FHQWdoQixFQUFBaGhCLEdBQUFvaEIsUUFBQXJZLE9BQUE2QyxFQUFBLEdBRUEsdUNDdkRBbEwsT0FBQUMsZUFBQWIsRUFBQSxjQUE4Q21CLE9BQUEsSUFDOUMsSUFBQXdnQixFQUFpQjdoQixFQUFRLEdBQ3pCZ0QsRUFBY2hELEVBQVEsR0FrRXRCLFNBQUE4aEIsRUFBQUMsRUFBQUMsR0FLQSxJQUpBLElBQUFDLEdBQUEsRUFDQS9nQixFQUFBOGdCLEVBQUF4VSxPQUFBLEdBQ0F5TSxFQUFBK0gsRUFBQXhVLE9BQUEsT0FDQWpMLEVBQUF5ZixFQUFBeFUsT0FBQSxNQUNBMFUsRUFBQSxFQUF3QkEsRUFBQUgsRUFBQWxHLEtBQUF0WCxPQUFnQzJkLEdBQUEsRUFDeERILEVBQUFsRyxLQUFBcUcsS0FBQWhoQixHQUNBNmdCLEVBQUFsRyxLQUFBcUcsRUFBQSxLQUFBakksR0FDQThILEVBQUFsRyxLQUFBcUcsRUFBQSxLQUFBM2YsRUFDQXdmLEVBQUFsRyxLQUFBcUcsRUFBQSxLQUdBRCxHQUFBLEVBR0EsT0FBQUEsRUFHQSxTQUFBRSxFQUFBaFYsRUFBQXNVLEdBQ0EsT0FBQXRVLEVBQUEsSUFBQXNVLEVBQUF2VSxTQUFBdVUsRUFBQTFVLGlCQUFBLE1BQUEwVSxFQUFBeFUsV0FwQkEvTSxFQUFBa2lCLCtCQWhFQSxTQUFBQyxFQUFBQyxFQUFBYixHQUNBLElBQUFjLEVBQUFkLEVBQUF2VixnQkFBQWxKLEVBQUE2SCx3QkFDQTJYLEVBQUFmLEVBQUF0VixpQkFBQW5KLEVBQUE2SCx3QkFDQXNQLEVBQUFtSSxFQUFBLElBQUFDLEVBQUEsR0FBQUMsR0FDQUMsRUFBQXRJLEVBQUE1RSxXQUFBLE1BQXVDQyxNQUFBaU0sRUFBQXBVLG9CQUN2Q29WLEVBQUF6SyxVQUFBeUosRUFBQXBWLE9BQUFHLFdBQUF5TCxJQUNBd0ssRUFBQWhMLFNBQUEsSUFBQTBDLEVBQUFqRCxNQUFBaUQsRUFBQS9DLFFBQ0FxTCxFQUFBMUosT0FDQTBKLEVBQUF6SyxVQUFBeUosRUFBQXBWLE9BQUFFLFdBQUEwTCxJQUNBd0ssRUFBQXBLLEtBQUE4SixFQUFBVixFQUFBdFUsV0FBQXNVLEdBQ0FnQixFQUFBbEssYUFBQSxNQUNBLFFBQUFuWSxFQUFBLEVBQW1CQSxFQUFBLElBQVNBLElBQzVCcWlCLEVBQUExSixPQUNBMEosRUFBQXZKLFlBQ0F1SixFQUFBdEosS0FBQS9ZLEVBQUFtaUIsRUFBQSxFQUFBQSxFQUFBQyxHQUNBQyxFQUFBckosT0FDQXFKLEVBQUFoSyxTQUFBaUssT0FBQUMsYUFBQXZpQixLQUFBbWlCLEVBQUEsR0FDQUUsRUFBQXhKLFVBSUEsSUFGQXdKLEVBQUExSixPQUNBMEosRUFBQXBLLEtBQUE4SixFQUFBVixFQUFBclUsZUFBQXFVLEdBQ0FyaEIsRUFBQSxFQUFtQkEsRUFBQSxJQUFTQSxJQUM1QnFpQixFQUFBMUosT0FDQTBKLEVBQUF2SixZQUNBdUosRUFBQXRKLEtBQUEvWSxFQUFBbWlCLEVBQUFDLEVBQUFELEVBQUFDLEdBQ0FDLEVBQUFySixPQUNBcUosRUFBQWhLLFNBQUFpSyxPQUFBQyxhQUFBdmlCLEtBQUFtaUIsRUFBQUMsR0FDQUMsRUFBQXhKLFVBRUF3SixFQUFBeEosVUFDQXdKLEVBQUFwSyxLQUFBOEosRUFBQVYsRUFBQXRVLFdBQUFzVSxHQUNBLFFBQUFtQixFQUFBLEVBQTRCQSxFQUFBLEdBQWlCQSxJQUM3QyxLQUFBdGQsR0FBQXNkLEVBQUEsR0FBQUosRUFDQSxJQUFBcGlCLEVBQUEsRUFBdUJBLEVBQUEsSUFBU0EsSUFDaENxaUIsRUFBQTFKLE9BQ0EwSixFQUFBdkosWUFDQXVKLEVBQUF0SixLQUFBL1ksRUFBQW1pQixFQUFBamQsRUFBQWlkLEVBQUFDLEdBQ0FDLEVBQUFySixPQUNBcUosRUFBQXpLLFVBQUF5SixFQUFBcFYsT0FBQU8sS0FBQWdXLEdBQUEzSyxJQUNBd0ssRUFBQWhLLFNBQUFpSyxPQUFBQyxhQUFBdmlCLEtBQUFtaUIsRUFBQWpkLEdBQ0FtZCxFQUFBeEosVUFJQSxJQURBd0osRUFBQXBLLEtBQUE4SixFQUFBVixFQUFBclUsZUFBQXFVLEdBQ0FtQixFQUFBLEVBQTRCQSxFQUFBLEdBQWlCQSxJQUU3QyxJQURBdGQsR0FBQXNkLEVBQUEsTUFBQUosRUFDQXBpQixFQUFBLEVBQXVCQSxFQUFBLElBQVNBLElBQ2hDcWlCLEVBQUExSixPQUNBMEosRUFBQXZKLFlBQ0F1SixFQUFBdEosS0FBQS9ZLEVBQUFtaUIsRUFBQWpkLEVBQUFpZCxFQUFBQyxHQUNBQyxFQUFBckosT0FDQXFKLEVBQUF6SyxVQUFBeUosRUFBQXBWLE9BQUFPLEtBQUFnVyxHQUFBM0ssSUFDQXdLLEVBQUFoSyxTQUFBaUssT0FBQUMsYUFBQXZpQixLQUFBbWlCLEVBQUFqZCxHQUNBbWQsRUFBQXhKLFVBSUEsR0FEQXdKLEVBQUF4SixZQUNBLHNCQUFBb0osSUFBQVIsRUFBQTNULFdBQUEyVCxFQUFBMVQsU0FDQSxPQUFBZ00sRUFFQSxJQUFBMEksRUFBQUosRUFBQTNHLGFBQUEsSUFBQTNCLEVBQUFqRCxNQUFBaUQsRUFBQS9DLFFBRUEsT0FEQTBLLEVBQUFlLEVBQUFwQixFQUFBcFYsT0FBQUcsWUFDQTZWLEVBQUFTLGtCQUFBRCxJQW9CQTNpQixFQUFBNGhCLDJDQ3JGQSxJQUNBMWYsRUFEQUMsRUFBQUMsV0FBQUQsWUFDQUQsRUFBQSxTQUFBMUIsRUFBQTZCLEdBSUEsT0FIQUgsRUFBQXRCLE9BQUEwQixnQkFDQSxDQUFjQyxVQUFBLGNBQWdCQyxPQUFBLFNBQUFoQyxFQUFBNkIsR0FBc0M3QixFQUFBK0IsVUFBQUYsSUFDcEUsU0FBQTdCLEVBQUE2QixHQUE2QixRQUFBTCxLQUFBSyxJQUFBTixlQUFBQyxLQUFBeEIsRUFBQXdCLEdBQUFLLEVBQUFMLE1BQzdCeEIsRUFBQTZCLElBRUEsU0FBQTdCLEVBQUE2QixHQUVBLFNBQUFJLElBQXVCTCxLQUFBTSxZQUFBbEMsRUFEdkIwQixFQUFBMUIsRUFBQTZCLEdBRUE3QixFQUFBc0IsVUFBQSxPQUFBTyxFQUFBekIsT0FBQVksT0FBQWEsSUFBQUksRUFBQVgsVUFBQU8sRUFBQVAsVUFBQSxJQUFBVyxLQUdBN0IsT0FBQUMsZUFBQWIsRUFBQSxjQUE4Q21CLE9BQUEsSUFDOUMsSUFDQTBoQixFQUFBLFNBQUF0WixHQUVBLFNBQUFzWixJQUNBLGNBQUF0WixLQUFBZ0MsTUFBQW5KLEtBQUFrSixZQUFBbEosS0FrQ0EsT0FwQ0FELEVBQUEwZ0IsRUFBQXRaLEdBSUFzWixFQUFBL2dCLFVBQUFnaEIsWUFBQSxTQUFBaFksR0FDQSxJQUFBckMsRUFBQXJHLEtBQ0FBLEtBQUEyZ0IsV0FDQTNnQixLQUFBNGdCLGdCQUVBNWdCLEtBQUEyZ0IsVUFBQWpZLEVBQ0ExSSxLQUFBNmdCLGVBQUEsV0FDQXhhLEVBQUFzYSxVQUFBalcsT0FBQUQsaUJBQUFwRSxFQUFBeWEsMEJBQ0F6YSxFQUFBMGEsY0FFQS9nQixLQUFBK2dCLGNBRUFOLEVBQUEvZ0IsVUFBQWlILFFBQUEsV0FDQVEsRUFBQXpILFVBQUFpSCxRQUFBMUksS0FBQStCLE1BQ0FBLEtBQUE0Z0IsaUJBRUFILEVBQUEvZ0IsVUFBQXFoQixXQUFBLFdBQ0EvZ0IsS0FBQWdoQiwyQkFDQWhoQixLQUFBZ2hCLDBCQUFBQyxlQUFBamhCLEtBQUE2Z0IsZ0JBRUE3Z0IsS0FBQThnQix5QkFBQXBXLE9BQUFELGlCQUNBekssS0FBQWdoQiwwQkFBQXRXLE9BQUF3VyxXQUFBLDJCQUFBeFcsT0FBQUQsaUJBQUEsU0FDQXpLLEtBQUFnaEIsMEJBQUFHLFlBQUFuaEIsS0FBQTZnQixpQkFFQUosRUFBQS9nQixVQUFBa2hCLGNBQUEsV0FDQTVnQixLQUFBMmdCLFlBR0EzZ0IsS0FBQWdoQiwwQkFBQUMsZUFBQWpoQixLQUFBNmdCLGdCQUNBN2dCLEtBQUEyZ0IsVUFBQSxLQUNBM2dCLEtBQUE2Z0IsZUFBQSxPQUVBSixFQXJDQSxDQURrQi9pQixFQUFRLEdBdUN6QjJMLFlBQ0R6TCxFQUFBNmlCLGlEQ3REQSxJQUNBM2dCLEVBREFDLEVBQUFDLFdBQUFELFlBQ0FELEVBQUEsU0FBQTFCLEVBQUE2QixHQUlBLE9BSEFILEVBQUF0QixPQUFBMEIsZ0JBQ0EsQ0FBY0MsVUFBQSxjQUFnQkMsT0FBQSxTQUFBaEMsRUFBQTZCLEdBQXNDN0IsRUFBQStCLFVBQUFGLElBQ3BFLFNBQUE3QixFQUFBNkIsR0FBNkIsUUFBQUwsS0FBQUssSUFBQU4sZUFBQUMsS0FBQXhCLEVBQUF3QixHQUFBSyxFQUFBTCxNQUM3QnhCLEVBQUE2QixJQUVBLFNBQUE3QixFQUFBNkIsR0FFQSxTQUFBSSxJQUF1QkwsS0FBQU0sWUFBQWxDLEVBRHZCMEIsRUFBQTFCLEVBQUE2QixHQUVBN0IsRUFBQXNCLFVBQUEsT0FBQU8sRUFBQXpCLE9BQUFZLE9BQUFhLElBQUFJLEVBQUFYLFVBQUFPLEVBQUFQLFVBQUEsSUFBQVcsS0FHQTdCLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBQzlDLElBQUFxaUIsRUFBa0IxakIsRUFBUSxHQUMxQjJqQixFQUFrQjNqQixFQUFRLEdBRTFCNGpCLEVBQUEsU0FBQW5hLEdBRUEsU0FBQW1hLEVBQUFoZ0IsR0FDQSxJQUFBK0UsRUFBQWMsRUFBQWxKLEtBQUErQixZQVVBLE9BVEFxRyxFQUFBL0UsWUFDQStFLEVBQUFrYixPQUFBLEdBQ0FsYixFQUFBbWIsaUJBQUEsRUFDQW5iLEVBQUFvYixnQkFBQSxLQUNBcGIsRUFBQXFiLGFBQUEsS0FDQXJiLEVBQUFzYixpQkFBQSxZQUNBdGIsRUFBQUcsU0FBQTZhLEVBQUFoVix5QkFBQWhHLEVBQUEvRSxVQUFBNFosUUFBQSxxQkFBQTBHLEdBQWdILE9BQUF2YixFQUFBd2IsYUFBQUQsTUFDaEh2YixFQUFBeWIsbUJBQUEsU0FBQUYsR0FBaUQsT0FBQXZiLEVBQUEwYixhQUFBSCxJQUNqRHZiLEVBQUEyYixlQUFBLFNBQUFKLEdBQTZDLE9BQUF2YixFQUFBNGIsU0FBQUwsSUFDN0N2YixFQWlJQSxPQTdJQXRHLEVBQUF1aEIsRUFBQW5hLEdBY0FtYSxFQUFBNWhCLFVBQUFpSCxRQUFBLFdBQ0FRLEVBQUF6SCxVQUFBaUgsUUFBQTFJLEtBQUErQixNQUNBQSxLQUFBa2lCLGVBRUFaLEVBQUE1aEIsVUFBQStTLElBQUEsU0FBQTBQLEdBQ0FuaUIsS0FBQXVoQixPQUFBOWQsS0FBQTBlLEdBQ0EsSUFBQW5pQixLQUFBdWhCLE9BQUF0ZixRQUNBakMsS0FBQW9pQixhQUdBZCxFQUFBNWhCLFVBQUF5VCxTQUFBLFNBQUFTLEVBQUFDLEdBQ0EsT0FBQTdULEtBQUF1aEIsT0FBQXRmLE9BQUEsQ0FHQTRSLElBQ0FELEVBQUEsRUFDQUMsRUFBQTdULEtBQUFzQixVQUFBc0IsS0FBQSxHQUVBLFFBQUE5RSxFQUFBLEVBQXVCQSxFQUFBa0MsS0FBQXVoQixPQUFBdGYsT0FBd0JuRSxJQUFBLENBQy9DLElBQUFxa0IsRUFBQW5pQixLQUFBdWhCLE9BQUF6akIsSUFDQXFrQixFQUFBRSxHQUFBek8sR0FBQXVPLEVBQUFFLElBQUF4TyxFQUFBLEdBQ0FzTyxFQUFBRyxHQUFBMU8sR0FBQXVPLEVBQUFHLElBQUF6TyxFQUFBLEdBQ0FzTyxFQUFBRSxHQUFBek8sR0FBQXVPLEVBQUFHLEdBQUF6TyxFQUFBLEtBQ0E3VCxLQUFBMGhCLGNBQUExaEIsS0FBQTBoQixlQUFBUyxJQUNBbmlCLEtBQUEwaEIsYUFBQWEsZ0JBQ0F2aUIsS0FBQTBoQixhQUFBLE1BRUExaEIsS0FBQXVoQixPQUFBMWEsT0FBQS9JLElBQUEsSUFHQSxJQUFBa0MsS0FBQXVoQixPQUFBdGYsUUFDQWpDLEtBQUFraUIsZ0JBR0FaLEVBQUE1aEIsVUFBQTBpQixVQUFBLFdBQ0FwaUIsS0FBQXdoQixrQkFDQXhoQixLQUFBd2hCLGlCQUFBLEVBQ0F4aEIsS0FBQXNCLFVBQUE0WixRQUFBMU8saUJBQUEsWUFBQXhNLEtBQUE4aEIsb0JBQ0E5aEIsS0FBQXNCLFVBQUE0WixRQUFBMU8saUJBQUEsUUFBQXhNLEtBQUFnaUIsa0JBR0FWLEVBQUE1aEIsVUFBQXdpQixZQUFBLFdBQ0FsaUIsS0FBQXdoQixrQkFDQXhoQixLQUFBd2hCLGlCQUFBLEVBQ0F4aEIsS0FBQXNCLFVBQUE0WixRQUFBek8sb0JBQUEsWUFBQXpNLEtBQUE4aEIsb0JBQ0E5aEIsS0FBQXNCLFVBQUE0WixRQUFBek8sb0JBQUEsUUFBQXpNLEtBQUFnaUIsa0JBR0FWLEVBQUE1aEIsVUFBQXFpQixhQUFBLFNBQUFILEdBQ0E1aEIsS0FBQTJoQixpQkFBQSxLQUFBQyxFQUFBWSxPQUFBeGlCLEtBQUEyaEIsaUJBQUEsS0FBQUMsRUFBQWEsUUFDQXppQixLQUFBMGlCLFNBQUFkLEdBQ0E1aEIsS0FBQTJoQixpQkFBQSxDQUFBQyxFQUFBWSxNQUFBWixFQUFBYSxTQUdBbkIsRUFBQTVoQixVQUFBZ2pCLFNBQUEsU0FBQWQsR0FDQSxJQUFBdmIsRUFBQXJHLEtBQ0FtaUIsRUFBQW5pQixLQUFBMmlCLGlCQUFBZixHQUNBTyxJQUFBbmlCLEtBQUEwaEIsZUFHQTFoQixLQUFBMGhCLGVBQ0ExaEIsS0FBQTBoQixhQUFBYSxnQkFDQXZpQixLQUFBMGhCLGFBQUEsS0FDQTFoQixLQUFBeWhCLGlCQUNBbUIsYUFBQTVpQixLQUFBeWhCLGtCQUdBVSxJQUdBbmlCLEtBQUEwaEIsYUFBQVMsRUFDQUEsRUFBQVUsZUFDQVYsRUFBQVUsY0FBQWpCLEdBRUE1aEIsS0FBQXloQixnQkFBQXFCLFdBQUEsV0FBdUQsT0FBQXpjLEVBQUEwYyxXQUFBbkIsSUExRnZELFFBNEZBTixFQUFBNWhCLFVBQUFxakIsV0FBQSxTQUFBbkIsR0FDQTVoQixLQUFBeWhCLGdCQUFBLEtBQ0EsSUFBQVUsRUFBQW5pQixLQUFBMmlCLGlCQUFBZixHQUNBTyxLQUFBYSxpQkFDQWIsRUFBQWEsZ0JBQUFwQixJQUdBTixFQUFBNWhCLFVBQUFtaUIsYUFBQSxTQUFBRCxHQUNBLEdBQUE1aEIsS0FBQXdoQixnQkFBQSxDQUdBLElBQUFXLEVBQUFuaUIsS0FBQTJpQixpQkFBQWYsR0FDQU8sR0FDQUEsRUFBQWMsaUJBQUFyQixLQUNBQSxFQUFBc0IsaUJBQ0F0QixFQUFBdUIsOEJBSUE3QixFQUFBNWhCLFVBQUF1aUIsU0FBQSxTQUFBTCxHQUNBLElBQUFPLEVBQUFuaUIsS0FBQTJpQixpQkFBQWYsR0FDQU8sSUFDQUEsRUFBQWlCLGNBQUF4QixHQUNBQSxFQUFBc0IsaUJBQ0F0QixFQUFBdUIsNkJBR0E3QixFQUFBNWhCLFVBQUFpakIsaUJBQUEsU0FBQWYsR0FDQSxJQUFBeUIsRUFBQXJqQixLQUFBc0IsVUFBQWdpQixZQUFBQyxVQUFBM0IsRUFBQTVoQixLQUFBc0IsVUFBQWtpQixjQUFBeGpCLEtBQUFzQixVQUFBbWlCLFlBQUF6akIsS0FBQXNCLFVBQUFvQixLQUFBMUMsS0FBQXNCLFVBQUFzQixNQUNBLElBQUF5Z0IsRUFDQSxZQUlBLElBRkEsSUFBQTFmLEVBQUEwZixFQUFBLEdBQ0FyZ0IsRUFBQXFnQixFQUFBLEdBQ0F2bEIsRUFBQSxFQUF1QkEsRUFBQWtDLEtBQUF1aEIsT0FBQXRmLE9BQXdCbkUsSUFBQSxDQUMvQyxJQUFBcWtCLEVBQUFuaUIsS0FBQXVoQixPQUFBempCLEdBQ0EsR0FBQXFrQixFQUFBRSxLQUFBRixFQUFBRyxJQUNBLEdBQUF0ZixJQUFBbWYsRUFBQUUsSUFBQTFlLEdBQUF3ZSxFQUFBdUIsSUFBQS9mLEVBQUF3ZSxFQUFBd0IsR0FDQSxPQUFBeEIsT0FJQSxHQUFBbmYsSUFBQW1mLEVBQUFFLElBQUExZSxHQUFBd2UsRUFBQXVCLElBQ0ExZ0IsSUFBQW1mLEVBQUFHLElBQUEzZSxFQUFBd2UsRUFBQXdCLElBQ0EzZ0IsRUFBQW1mLEVBQUFFLElBQUFyZixFQUFBbWYsRUFBQUcsR0FDQSxPQUFBSCxFQUlBLGFBRUFiLEVBOUlBLENBK0lDRixFQUFBL1gsWUFDRHpMLEVBQUEwakIsbUJBQ0EsSUFBQXNDLEVBQUEsV0FZQSxPQVhBLFNBQUFGLEVBQUFyQixFQUFBc0IsRUFBQXJCLEVBQUFjLEVBQUFQLEVBQUFHLEVBQUFULEVBQUFVLEdBQ0FqakIsS0FBQTBqQixLQUNBMWpCLEtBQUFxaUIsS0FDQXJpQixLQUFBMmpCLEtBQ0EzakIsS0FBQXNpQixLQUNBdGlCLEtBQUFvakIsZ0JBQ0FwakIsS0FBQTZpQixnQkFDQTdpQixLQUFBZ2pCLGtCQUNBaGpCLEtBQUF1aUIsZ0JBQ0F2aUIsS0FBQWlqQixvQkFWQSxHQWNBcmxCLEVBQUFnbUIsMENDaExBcGxCLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBQzlDLElBQUE4a0IsRUFBQSxXQUNBLFNBQUFBLEVBQUFDLEdBQ0E5akIsS0FBQThqQixZQStDQSxPQTdDQUQsRUFBQW5rQixVQUFBcWtCLFlBQUEsU0FBQUMsR0FDQWhrQixLQUFBOGpCLFVBQUFFLEdBRUFILEVBQUFJLDJCQUFBLFNBQUFDLEVBQUFoSixHQUNBLFVBQUFnSixFQUFBMUIsWUFBQWhmLElBQUEwZ0IsRUFBQTFCLE1BQ0EsWUFLQSxJQUhBLElBQUEyQixFQUFBakosRUFDQXZYLEVBQUF1Z0IsRUFBQTFCLE1BQ0F4ZixFQUFBa2hCLEVBQUF6QixNQUNBdkgsR0FDQXZYLEdBQUF1WCxFQUFBa0osV0FDQXBoQixHQUFBa1ksRUFBQW1KLFVBQ0FuSixJQUFBb0osYUFHQSxJQURBcEosRUFBQWlKLEVBQ0FqSixTQUFBcUosY0FBQUMsTUFDQTdnQixHQUFBdVgsRUFBQXVKLFdBQ0F6aEIsR0FBQWtZLEVBQUFyWCxVQUNBcVgsSUFBQXdKLGNBRUEsT0FBQS9nQixFQUFBWCxJQUVBNmdCLEVBQUFua0IsVUFBQTZqQixVQUFBLFNBQUFXLEVBQUFoSixFQUFBdUksRUFBQWtCLEVBQUFDLEVBQUFDLEdBQ0EsSUFBQXBCLEVBQUE3TyxRQUFBNk8sRUFBQTNPLE9BQ0EsWUFFQSxJQUFBdU8sRUFBQVEsRUFBQUksMkJBQUFDLEVBQUFoSixHQUNBLE9BQUFtSSxHQUdBQSxFQUFBLEdBQUE1ZSxLQUFBcWdCLE1BQUF6QixFQUFBLElBQUF3QixFQUFBN2tCLEtBQUE4akIsVUFBQWlCLFdBQUFDLGdCQUFBLE1BQUFobEIsS0FBQThqQixVQUFBaUIsV0FBQUMsaUJBQ0EzQixFQUFBLEdBQUE1ZSxLQUFBcWdCLEtBQUF6QixFQUFBLEdBQUFyakIsS0FBQThqQixVQUFBaUIsV0FBQUUsa0JBQ0E1QixFQUFBLEdBQUE1ZSxLQUFBRSxJQUFBRixLQUFBQyxJQUFBMmUsRUFBQSxNQUFBc0IsR0FBQUUsRUFBQSxNQUNBeEIsRUFBQSxHQUFBNWUsS0FBQUUsSUFBQUYsS0FBQUMsSUFBQTJlLEVBQUEsTUFBQXVCLEdBQ0F2QixHQU5BLE1BUUFRLEVBQUFua0IsVUFBQXdsQixpQkFBQSxTQUFBaEIsRUFBQWhKLEVBQUF1SSxFQUFBa0IsRUFBQUMsR0FDQSxJQUFBdkIsRUFBQXJqQixLQUFBdWpCLFVBQUFXLEVBQUFoSixFQUFBdUksRUFBQWtCLEVBQUFDLEdBQ0FqaEIsRUFBQTBmLEVBQUEsR0FDQXJnQixFQUFBcWdCLEVBQUEsR0FHQSxPQUFnQjFmLEVBRmhCQSxHQUFBLEdBRWdCWCxFQURoQkEsR0FBQSxLQUdBNmdCLEVBakRBLEdBbURBam1CLEVBQUFpbUIsNENDbkRBLFNBQUFzQixFQUFBQyxHQUNBLElBQUFBLEVBQUFsSyxRQUFBd0osY0FDQSxZQUVBLElBQUFXLEVBQUEzYSxPQUFBNGEsaUJBQUFGLEVBQUFsSyxRQUFBd0osZUFDQWEsRUFBQWhPLFNBQUE4TixFQUFBRyxpQkFBQSxXQUNBQyxFQUFBaGhCLEtBQUFDLElBQUEsRUFBQTZTLFNBQUE4TixFQUFBRyxpQkFBQSxXQUNBRSxFQUFBaGIsT0FBQTRhLGlCQUFBRixFQUFBbEssU0FTQXlLLEVBQUFKLEdBUEFoTyxTQUFBbU8sRUFBQUYsaUJBQUEsZ0JBQ0FqTyxTQUFBbU8sRUFBQUYsaUJBQUEsb0JBT0FJLEVBQUFILEdBTkFsTyxTQUFBbU8sRUFBQUYsaUJBQUEsa0JBQ0FqTyxTQUFBbU8sRUFBQUYsaUJBQUEsa0JBS0FKLEVBQUFuSyxNQUFBNEssU0FBQUMsZUFLQSxNQUpBLENBQ0FwakIsS0FBQStCLEtBQUFzaEIsTUFBQUgsRUFBQVIsRUFBQW5LLE1BQUErSSxTQUFBZSxXQUFBQyxpQkFDQXBpQixLQUFBNkIsS0FBQXNoQixNQUFBSixFQUFBUCxFQUFBbkssTUFBQStJLFNBQUFlLFdBQUFFLG1CQUtBLFNBQUFlLEVBQUFaLEdBQ0EsSUFBQWEsRUFBQWQsRUFBQUMsR0FDQWEsSUFDQWIsRUFBQXhpQixPQUFBcWpCLEVBQUFyakIsTUFBQXdpQixFQUFBMWlCLE9BQUF1akIsRUFBQXZqQixPQUNBMGlCLEVBQUFuSyxNQUFBK0ksU0FBQXZpQixRQUNBMmpCLEVBQUFwaEIsT0FBQWlpQixFQUFBdmpCLEtBQUF1akIsRUFBQXJqQixRQS9CQXBFLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBeUI5Q25CLEVBQUF1bkIsa0JBVUF2bkIsRUFBQW9vQixNQVNBcG9CLEVBQUF1TCxNQVJBLFNBQUErYyxHQUNBQSxFQUFBeG1CLFVBQUF5bEIsZ0JBQUEsV0FDQSxPQUFBQSxFQUFBbmxCLE9BRUFrbUIsRUFBQXhtQixVQUFBc21CLElBQUEsV0FDQUEsRUFBQWhtQixzQ0MxQ0F0QyxFQUFBa0IsRUFBQXVuQixHQUFBLElBQUFDLEVBQUExb0IsRUFBQSxJQUFBMm9CLEVBQUEzb0IsRUFBQSxJQUFBQSxFQUFBLElBQUFBLEVBQUEsSUFBQUEsRUFBQSxJQU9BLE1BQUE0b0IsRUFBQWhVLFNBQUFpVSxlQUFBLFlBQ0FDLEVBQUEsSUFBa0JKLEVBQUEsU0FDbEJJLEVBQUF0SixVQUFBLGtCQUNBc0osRUFBQWhMLEtBQUE4SyxHQUNBRSxFQUFBbkwsUUFDQTdjLE9BQUE2bkIsRUFBQSxJQUFBN25CLENBQUdnb0IsaUNDWEgsSUFDQTFtQixFQURBQyxFQUFBQyxXQUFBRCxZQUNBRCxFQUFBLFNBQUExQixFQUFBNkIsR0FJQSxPQUhBSCxFQUFBdEIsT0FBQTBCLGdCQUNBLENBQWNDLFVBQUEsY0FBZ0JDLE9BQUEsU0FBQWhDLEVBQUE2QixHQUFzQzdCLEVBQUErQixVQUFBRixJQUNwRSxTQUFBN0IsRUFBQTZCLEdBQTZCLFFBQUFMLEtBQUFLLElBQUFOLGVBQUFDLEtBQUF4QixFQUFBd0IsR0FBQUssRUFBQUwsTUFDN0J4QixFQUFBNkIsSUFFQSxTQUFBN0IsRUFBQTZCLEdBRUEsU0FBQUksSUFBdUJMLEtBQUFNLFlBQUFsQyxFQUR2QjBCLEVBQUExQixFQUFBNkIsR0FFQTdCLEVBQUFzQixVQUFBLE9BQUFPLEVBQUF6QixPQUFBWSxPQUFBYSxJQUFBSSxFQUFBWCxVQUFBTyxFQUFBUCxVQUFBLElBQUFXLEtBR0E3QixPQUFBQyxlQUFBYixFQUFBLGNBQThDbUIsT0FBQSxJQUM5QyxJQUFBMG5CLEVBQWtCL29CLEVBQVEsSUFDMUJxVCxFQUFlclQsRUFBUSxHQUN2QmdwQixFQUEwQmhwQixFQUFRLElBQ2xDOEMsRUFBcUI5QyxFQUFRLEdBQzdCaXBCLEVBQWlCanBCLEVBQVEsSUFDekJrcEIsRUFBa0JscEIsRUFBUSxJQUMxQm1wQixFQUF3Qm5wQixFQUFRLEdBQ2hDb3BCLEVBQXFCcHBCLEVBQVEsSUFDN0JxcEIsRUFBaUJycEIsRUFBUSxJQUN6QnNwQixFQUFrQnRwQixFQUFRLElBQzFCdXBCLEVBQXlCdnBCLEVBQVEsSUFDakN3cEIsRUFBb0J4cEIsRUFBUSxJQUM1QnlwQixFQUFjenBCLEVBQVEsR0FDdEIwakIsRUFBa0IxakIsRUFBUSxHQUMxQnFkLEVBQWNyZCxFQUFRLElBQ3RCMHBCLEVBQW9CMXBCLEVBQVEsSUFDNUIycEIsRUFBYzNwQixFQUFRLElBQ3RCNHBCLEVBQXFCNXBCLEVBQVEsSUFDN0I2cEIsRUFBcUI3cEIsRUFBUSxHQUM3QjhwQixFQUF5QjlwQixFQUFRLElBQ2pDK3BCLEVBQTZCL3BCLEVBQVEsSUFDckNncUIsRUFBeUJocUIsRUFBUSxJQUNqQ29ULEVBQXVCcFQsRUFBUSxJQUMvQmlxQixFQUFvQmpxQixFQUFRLElBQzVCa3FCLEVBQWlCbHFCLEVBQVEsSUFDekI0VSxFQUFBLG9CQUFBNUgsY0FBQTRILFNBQUEsS0FHQXVWLEVBQUEsZ0JBQ0FDLEVBQUEsQ0FDQXBsQixLQUFBLEdBQ0FFLEtBQUEsR0FDQW1sQixZQUFBLEVBQ0FDLFNBQUEsUUFDQUMsYUFBQSxFQUNBQyxZQUFBLFFBQ0FDLFVBQUFiLEVBQUFjLG1CQUNBQyxVQUFBLE9BQ0FoUyw0QkFBQSxFQUNBQyxZQUFBLEVBQ0E5TCxzQkFBQSxTQUNBRyxXQUFBLGtDQUNBQyxTQUFBLEdBQ0FDLFdBQUEsU0FDQUMsZUFBQSxPQUNBd2QsV0FBQSxFQUNBQyxjQUFBLEVBQ0FsbEIsV0FBQSxJQUNBbWxCLFlBQUEsRUFDQUMsa0JBQUEsRUFDQUMsT0FBQSxFQUNBQyxpQkFBQSxFQUNBQywrQkFBQSxFQUNBQyxjQUFBLEVBQ0FDLGNBQUEsRUFDQUMsZ0JBQUEsRUFDQWhlLG1CQUFBLEVBQ0E3RSxhQUFBLEVBQ0FnUyxNQUFBLEtBQ0E4USxzQkFBQTdCLEVBQUFuYixNQUNBaWQsYUFBQSxTQUNBdmxCLDJCQUFBLGNBRUFzWCxFQUFBLFNBQUE3VCxHQUVBLFNBQUE2VCxFQUFBNVgsUUFDQSxJQUFBQSxJQUFpQ0EsRUFBQSxJQUNqQyxJQUFBaUQsRUFBQWMsRUFBQWxKLEtBQUErQixZQUtBLE9BSkFxRyxFQUFBNmlCLFFBQUEvQixFQUNBOWdCLEVBQUE4aUIsV0FBQSxLQUNBOWlCLEVBQUFqRCxRQUFBaWtCLEVBQUErQixNQUFBaG1CLEdBQ0FpRCxFQUFBZ2pCLFNBQ0FoakIsRUFzb0NBLE9BOW9DQXRHLEVBQUFpYixFQUFBN1QsR0FVQTZULEVBQUF0YixVQUFBaUgsUUFBQSxXQUNBUSxFQUFBekgsVUFBQWlILFFBQUExSSxLQUFBK0IsTUFDQUEsS0FBQXNwQix1QkFBQSxLQUNBeFksRUFBQXdPLHdCQUFBdGYsTUFDQUEsS0FBQTJJLFFBQUEsYUFDQTNJLEtBQUFnZCxNQUFBLGFBQ0FoZCxLQUFBa2IsU0FBQWxiLEtBQUFrYixRQUFBcU8sWUFDQXZwQixLQUFBa2IsUUFBQXFPLFdBQUF6VyxZQUFBOVMsS0FBQWtiLFVBR0FGLEVBQUF0YixVQUFBK2MsUUFBQSxXQUNBemMsS0FBQTJHLFdBRUFxVSxFQUFBdGIsVUFBQTJwQixPQUFBLFdBQ0EsSUFBQWhqQixFQUFBckcsS0FDQXhCLE9BQUFnckIsS0FBQTFCLEdBQUF0ZSxRQUFBLFNBQUFuSyxHQUNBLE9BQUFnSCxFQUFBakQsUUFBQS9ELFNBQUFtRSxJQUFBNkMsRUFBQWpELFFBQUEvRCxLQUNBZ0gsRUFBQWpELFFBQUEvRCxHQUFBeW9CLEVBQUF6b0IsTUFHQVcsS0FBQXlwQixRQUFBblgsSUFBQWtTLEtBQUEsS0FDQXhrQixLQUFBMEMsS0FBQTFDLEtBQUFvRCxRQUFBVixLQUNBMUMsS0FBQTRDLEtBQUE1QyxLQUFBb0QsUUFBQVIsS0FDQTVDLEtBQUFvRCxRQUFBdUYsU0FDQTNJLEtBQUF5SSxHQUFBLE9BQUF6SSxLQUFBb0QsUUFBQXVGLFNBRUEzSSxLQUFBMHBCLFlBQUEsRUFDQTFwQixLQUFBMnBCLGNBQUEsRUFDQTNwQixLQUFBc3BCLHVCQUFBLEtBQ0F0cEIsS0FBQTRwQixtQkFBQSxFQUNBNXBCLEtBQUE2cEIsbUJBQUEsRUFDQTdwQixLQUFBOHBCLFlBQUEsRUFDQTlwQixLQUFBK3BCLFlBQUEsRUFDQS9wQixLQUFBZ3FCLGdCQUFBLEVBQ0FocUIsS0FBQWlxQixvQkFBQSxFQUNBanFCLEtBQUFrcUIsUUFBQSxLQUNBbHFCLEtBQUFtcUIsU0FBQSxLQUNBbnFCLEtBQUFvcUIsT0FBQSxFQUNBcHFCLEtBQUFxcUIsU0FBQSxPQUNBcnFCLEtBQUFzcUIsUUFBQXZaLEVBQUFwUSxhQUNBWCxLQUFBdXFCLE9BQUEsR0FDQXZxQixLQUFBd3FCLGFBQUEsRUFDQXhxQixLQUFBeXFCLFlBQUEsR0FDQXpxQixLQUFBMHFCLGtCQUFBLEVBQ0ExcUIsS0FBQTJxQixvQkFBQSxFQUNBM3FCLEtBQUE0cUIsZ0JBQUEsRUFDQTVxQixLQUFBNnFCLGNBQUEsSUFBQS9ELEVBQUFnRSxhQUFBOXFCLE1BQ0FBLEtBQUF3RyxTQUFBeEcsS0FBQTZxQixlQUNBN3FCLEtBQUFna0IsU0FBQWhrQixLQUFBZ2tCLFVBQUEsS0FDQWhrQixLQUFBK3FCLGlCQUFBL3FCLEtBQUErcUIsa0JBQUEsS0FDQS9xQixLQUFBZ3JCLFVBQUFockIsS0FBQWdyQixXQUFBLElBQUFoRSxFQUFBaUUsVUFBQWpyQixNQUNBQSxLQUFBa3JCLGtCQUFBbHJCLEtBQUFrckIsbUJBQUEsS0FDQWxyQixLQUFBbXJCLGFBQUFuckIsS0FBQW1yQixjQUFBLElBQUE3RCxFQUFBOEQsYUFBQXByQixNQUNBQSxLQUFBcXJCLFFBQUEsSUFBQTVFLEVBQUE2RSxVQUFBdHJCLE1BQ0FBLEtBQUErcUIsbUJBQ0EvcUIsS0FBQStxQixpQkFBQXpPLGlCQUNBdGMsS0FBQStxQixpQkFBQVEseUJBR0Evc0IsT0FBQUMsZUFBQXVjLEVBQUF0YixVQUFBLFVBQ0FmLElBQUEsV0FDQSxPQUFBcUIsS0FBQXFyQixRQUFBRyxRQUVBOXNCLFlBQUEsRUFDQW1FLGNBQUEsSUFFQW1ZLEVBQUF0YixVQUFBK3JCLFVBQUEsV0FDQSxXQUFBMWEsRUFBQXBRLGFBQUEsSUFBQVgsS0FBQXNxQixTQUVBdFAsRUFBQXRiLFVBQUEyYixNQUFBLFdBQ0FyYixLQUFBbWIsVUFDQW5iLEtBQUFtYixTQUFBRSxTQUdBN2MsT0FBQUMsZUFBQXVjLEVBQUF0YixVQUFBLGFBQ0FmLElBQUEsV0FDQSxPQUFBMlQsRUFBQW9aLGdCQUFBMXJCLEtBQUFtYixVQUFBN0ksRUFBQXFaLFlBRUFqdEIsWUFBQSxFQUNBbUUsY0FBQSxJQUVBbVksRUFBQXRiLFVBQUF1ZCxVQUFBLFNBQUE1ZCxHQUNBLEtBQUFBLEtBQUF5b0IsR0FDQSxVQUFBOEQsTUFBQSx1QkFBQXZzQixFQUFBLEtBRUEsT0FBQVcsS0FBQW9ELFFBQUEvRCxJQUVBMmIsRUFBQXRiLFVBQUF3ZCxVQUFBLFNBQUE3ZCxFQUFBTixHQUNBLEtBQUFNLEtBQUF5b0IsR0FDQSxVQUFBOEQsTUFBQSx1QkFBQXZzQixFQUFBLEtBS0EsSUFIQSxJQUFBd29CLEVBQUEvZ0IsUUFBQXpILElBQ0FnYSxRQUFBd1MsTUFBQSxXQUFBeHNCLEVBQUEsd0NBRUFXLEtBQUFvRCxRQUFBL0QsS0FBQU4sRUFBQSxDQUdBLE9BQUFNLEdBQ0EsZ0JBQ0FOLElBQ0FBLEVBQUEsUUFFQSxNQUNBLGtCQUNBQSxJQUNBQSxFQUFBLFNBRUEsTUFDQSxpQkFDQUEsSUFDQUEsRUFBQSxVQUVBLE1BQ0EscUJBQ0FBLElBQ0FBLEVBQUEsUUFFQSxNQUNBLGlCQUNBLEdBQUFBLEVBQUEsRUFFQSxZQURBc2EsUUFBQUMsS0FBQWphLEVBQUEsa0NBQUFOLEdBR0EsbUJBQ0FBLElBQ0FBLEVBQUEsVUFFQSxNQUNBLG1CQUNBLEdBQUFBLEVBQUEsRUFFQSxZQURBc2EsUUFBQUMsS0FBQWphLEVBQUEsa0NBQUFOLEdBR0EsTUFDQSxZQUNBLEdBQUFpQixLQUFBZ2tCLFNBRUEsWUFEQWhrQixLQUFBOHJCLFVBQUEvc0IsR0FHQSxNQUNBLGlCQUVBLElBREFBLEVBQUEwRixLQUFBRSxJQUFBNUYsRUFBQWdTLEVBQUE5UCxrQkFDQSxFQUVBLFlBREFvWSxRQUFBQyxLQUFBamEsRUFBQSxrQ0FBQU4sR0FHQSxHQUFBaUIsS0FBQW9ELFFBQUEvRCxLQUFBTixFQUFBLENBQ0EsSUFBQWd0QixFQUFBL3JCLEtBQUE0QyxLQUFBN0QsRUFDQSxHQUFBaUIsS0FBQWdzQixPQUFBaHFCLE1BQUFDLE9BQUE4cEIsRUFBQSxDQUNBLElBQUF4bkIsRUFBQXZFLEtBQUFnc0IsT0FBQWhxQixNQUFBQyxPQUFBOHBCLEVBQ0FFLEVBQUFqc0IsS0FBQWdzQixPQUFBL29CLE1BQUFzQixFQUFBLEVBQ0F2RSxLQUFBZ3NCLE9BQUFocUIsTUFBQXdDLFVBQUFELEdBQ0F2RSxLQUFBZ3NCLE9BQUFqcEIsTUFBQTBCLEtBQUFDLElBQUExRSxLQUFBZ3NCLE9BQUFqcEIsTUFBQXdCLEVBQUEsR0FDQXZFLEtBQUFnc0IsT0FBQS9vQixNQUFBd0IsS0FBQUMsSUFBQTFFLEtBQUFnc0IsT0FBQS9vQixNQUFBc0IsRUFBQSxHQUNBMG5CLEdBQ0Fqc0IsS0FBQWthLFFBQUEsRUFBQWxhLEtBQUE0QyxLQUFBLEtBT0EsT0FEQTVDLEtBQUFvRCxRQUFBL0QsR0FBQU4sRUFDQU0sR0FDQSxpQkFDQSxlQUNBVyxLQUFBZ2tCLFdBQ0Foa0IsS0FBQWdrQixTQUFBdmlCLFFBQ0F6QixLQUFBeWpCLFlBQUF5SSxRQUFBbHNCLEtBQUFvRCxVQUVBLE1BQ0EsaUNBQ0EsNEJBQ0EsaUJBQ0Esb0JBQ0EsaUJBQ0EsaUJBQ0EscUJBQ0FwRCxLQUFBZ2tCLFdBQ0Foa0IsS0FBQWdrQixTQUFBdmlCLFFBQ0F6QixLQUFBZ2tCLFNBQUFtSSxTQUFBbnNCLEtBQUEwQyxLQUFBMUMsS0FBQTRDLE1BQ0E1QyxLQUFBa2EsUUFBQSxFQUFBbGEsS0FBQTRDLEtBQUEsSUFFQSxtQkFDQTVDLEtBQUFna0IsV0FDQWhrQixLQUFBeUosV0FBQXpKLEtBQUFna0IsVUFDQWhrQixLQUFBZ2tCLFNBQUFyZCxVQUNBM0csS0FBQWdrQixTQUFBLE1BRUFoa0IsS0FBQW9zQixpQkFDQXBzQixLQUFBZ2tCLFNBQUFxSSxvQkFDQXJzQixLQUFBc3NCLFFBQ0F0c0IsS0FBQWdrQixTQUFBL0wsU0FBQWpZLEtBQUFzc0IsUUFFQXRzQixLQUFBc2pCLFlBQUFTLFlBQUEvakIsS0FBQWdrQixVQUNBLE1BQ0EsaUJBQ0Foa0IsS0FBQXFyQixRQUFBcm5CLE9BQUFoRSxLQUFBMEMsS0FBQTFDLEtBQUE0QyxNQUNBNUMsS0FBQTZsQixVQUNBN2xCLEtBQUE2bEIsU0FBQTBHLGlCQUVBLE1BQ0EsdUJBQ0F4dEIsRUFDQWlCLEtBQUF3c0Isd0JBQ0F4c0IsS0FBQXdzQixzQkFBQSxJQUFBL0UsRUFBQWdGLHFCQUFBenNCLE9BSUFBLEtBQUF3c0Isd0JBQ0F4c0IsS0FBQXdzQixzQkFBQTdsQixVQUNBM0csS0FBQXdzQixzQkFBQSxNQUdBLE1BQ0EsbUJBQ0F4c0IsS0FBQXFyQixRQUFBdG5CLGdCQUNBLE1BQ0EsaUNBQ0EvRCxLQUFBcXJCLFFBQUFxQixPQUFBaHJCLHFCQUFBM0MsR0FDQWlCLEtBQUFxckIsUUFBQXNCLElBQUFqckIscUJBQUEzQyxHQUNBaUIsS0FBQW1wQixXQUFBLEtBR0FucEIsS0FBQWdrQixVQUNBaGtCLEtBQUFna0IsU0FBQTVRLHFCQUdBNEgsRUFBQXRiLFVBQUFrdEIsaUJBQUEsU0FBQUMsR0FDQTdzQixLQUFBOHNCLFdBQ0E5c0IsS0FBQTJJLFFBQUFrZSxFQUFBbmEsR0FBQTRCLElBQUEsTUFFQXRPLEtBQUErc0Isa0JBQUFGLEdBQ0E3c0IsS0FBQWtiLFFBQUExSSxVQUFBQyxJQUFBLFNBQ0F6UyxLQUFBZ3RCLGFBQ0FodEIsS0FBQXVILEtBQUEsVUFFQXlULEVBQUF0YixVQUFBMGIsS0FBQSxXQUNBLE9BQUFwYixLQUFBbWIsU0FBQUMsUUFFQUosRUFBQXRiLFVBQUF1dEIsZ0JBQUEsV0FDQWp0QixLQUFBbWIsU0FBQXBjLE1BQUEsR0FDQWlCLEtBQUFrYSxRQUFBbGEsS0FBQWdzQixPQUFBaHBCLEVBQUFoRCxLQUFBZ3NCLE9BQUFocEIsR0FDQWhELEtBQUE4c0IsV0FDQTlzQixLQUFBMkksUUFBQWtlLEVBQUFuYSxHQUFBNEIsSUFBQSxNQUVBdE8sS0FBQWtiLFFBQUExSSxVQUFBMGEsT0FBQSxTQUNBbHRCLEtBQUF1SCxLQUFBLFNBRUF5VCxFQUFBdGIsVUFBQXl0QixZQUFBLFdBQ0EsSUFBQTltQixFQUFBckcsS0FDQUEsS0FBQW90QixZQUNBcHRCLEtBQUF3RyxTQUFBNGEsRUFBQS9VLHlCQUFBck0sS0FBQWtiLFFBQUEsZ0JBQUFnSixHQUNBN2QsRUFBQStWLGdCQUdBd0ssRUFBQXlHLFlBQUFuSixFQUFBN2QsSUFBQTBrQixxQkFFQSxJQUFBdUMsRUFBQSxTQUFBcEosR0FBb0QsT0FBQTBDLEVBQUEyRyxhQUFBckosRUFBQTdkLElBQ3BEckcsS0FBQXdHLFNBQUE0YSxFQUFBL1UseUJBQUFyTSxLQUFBbWIsU0FBQSxRQUFBbVMsSUFDQXR0QixLQUFBd0csU0FBQTRhLEVBQUEvVSx5QkFBQXJNLEtBQUFrYixRQUFBLFFBQUFvUyxJQUNBbkcsRUFBQXZiLFVBQ0E1TCxLQUFBd0csU0FBQTRhLEVBQUEvVSx5QkFBQXJNLEtBQUFrYixRQUFBLHFCQUFBZ0osR0FDQSxJQUFBQSxFQUFBc0osUUFDQTVHLEVBQUE2RyxrQkFBQXZKLEVBQUE3ZCxFQUFBOFUsU0FBQTlVLEVBQUEwa0IsaUJBQUExa0IsRUFBQWpELFFBQUE0bEIsMEJBS0FocEIsS0FBQXdHLFNBQUE0YSxFQUFBL1UseUJBQUFyTSxLQUFBa2IsUUFBQSx1QkFBQWdKLEdBQ0EwQyxFQUFBNkcsa0JBQUF2SixFQUFBN2QsRUFBQThVLFNBQUE5VSxFQUFBMGtCLGlCQUFBMWtCLEVBQUFqRCxRQUFBNGxCLDBCQUdBN0IsRUFBQS9hLFNBQ0FwTSxLQUFBd0csU0FBQTRhLEVBQUEvVSx5QkFBQXJNLEtBQUFrYixRQUFBLG9CQUFBZ0osR0FDQSxJQUFBQSxFQUFBc0osUUFDQTVHLEVBQUE4Ryw2QkFBQXhKLEVBQUE3ZCxFQUFBOFUsY0FLQUgsRUFBQXRiLFVBQUEwdEIsVUFBQSxXQUNBLElBQUEvbUIsRUFBQXJHLEtBQ0EydEIsRUFBQTN0QixLQUNBQSxLQUFBd0csU0FBQTRhLEVBQUEvVSx5QkFBQXJNLEtBQUFrYixRQUFBLG1CQUFBMlIsR0FDQXZhLEVBQUFvWixnQkFBQTFyQixNQUdBMnRCLEVBQUFDLFNBQUFmLEtBQ1MsSUFDVDdzQixLQUFBd0csU0FBQTRhLEVBQUEvVSx5QkFBQXJNLEtBQUFrYixRQUFBLG9CQUFBMlIsR0FDQXZhLEVBQUFvWixnQkFBQTFyQixNQUdBMnRCLEVBQUFFLFVBQUFoQixLQUNTLElBQ1Q3c0IsS0FBQXdHLFNBQUE0YSxFQUFBL1UseUJBQUFyTSxLQUFBa2IsUUFBQSxpQkFBQTJSLElBZzJCQSxTQUFBQSxHQUNBLFlBQUFBLEVBQUFpQixTQUNBLEtBQUFqQixFQUFBaUIsU0FDQSxLQUFBakIsRUFBQWlCLFNBbDJCQUMsQ0FBQWxCLElBQ0F4bUIsRUFBQWdWLFFBRUFzUyxFQUFBSyxPQUFBbkIsS0FDUyxJQUNUN3NCLEtBQUF3RyxTQUFBNGEsRUFBQS9VLHlCQUFBck0sS0FBQW1iLFNBQUEsbUJBQUEwUixHQUFvRyxPQUFBeG1CLEVBQUF1bkIsU0FBQWYsS0FBNkIsSUFDakk3c0IsS0FBQXdHLFNBQUE0YSxFQUFBL1UseUJBQUFyTSxLQUFBbWIsU0FBQSxvQkFBQTBSLEdBQXFHLE9BQUF4bUIsRUFBQXduQixVQUFBaEIsS0FBOEIsSUFDbkk3c0IsS0FBQXdHLFNBQUE0YSxFQUFBL1UseUJBQUFyTSxLQUFBbWIsU0FBQSw4QkFBMkcsT0FBQTlVLEVBQUE0bkIsbUJBQUFDLHNCQUMzR2x1QixLQUFBd0csU0FBQTRhLEVBQUEvVSx5QkFBQXJNLEtBQUFtYixTQUFBLDZCQUFBeUcsR0FBNkcsT0FBQXZiLEVBQUE0bkIsbUJBQUFFLGtCQUFBdk0sTUFDN0c1aEIsS0FBQXdHLFNBQUE0YSxFQUFBL1UseUJBQUFyTSxLQUFBbWIsU0FBQSw0QkFBeUcsT0FBQTlVLEVBQUE0bkIsbUJBQUFHLG9CQUN6R3B1QixLQUFBd0csU0FBQXhHLEtBQUF5RyxzQkFBQSxxQkFBeUUsT0FBQUosRUFBQTRuQixtQkFBQUksK0JBQ3pFcnVCLEtBQUF3RyxTQUFBeEcsS0FBQXlHLHNCQUFBLG1CQUFBOFMsR0FBNkUsT0FBQWxULEVBQUFpb0Isb0JBQUEvVSxFQUFBM0YsTUFBQTJGLEVBQUExRixTQUU3RW1ILEVBQUF0YixVQUFBOGIsS0FBQSxTQUFBQyxHQUNBLElBQUFwVixFQUFBckcsS0FFQSxHQURBQSxLQUFBeXBCLFFBQUFoTyxHQUFBemIsS0FBQXlwQixTQUNBenBCLEtBQUF5cEIsUUFDQSxVQUFBbUMsTUFBQSx1Q0FFQTVyQixLQUFBdXVCLFNBQUF2dUIsS0FBQXlwQixRQUFBbEYsY0FBQWlLLFlBQ0F4dUIsS0FBQXl1QixVQUFBenVCLEtBQUF5cEIsUUFBQWxGLGNBQ0F2a0IsS0FBQTB1QixrQkFBQSxJQUFBaEgsRUFBQWpILGlCQUNBemdCLEtBQUEwdUIsa0JBQUFoTyxZQUFBLFdBQXdELE9BQUFyYSxFQUFBa0IsS0FBQSxZQUFBbUQsT0FBQUQsb0JBQ3hEekssS0FBQXdHLFNBQUF4RyxLQUFBMHVCLG1CQUNBMXVCLEtBQUFrYixRQUFBbGIsS0FBQXl1QixVQUFBbGMsY0FBQSxPQUNBdlMsS0FBQWtiLFFBQUF5VCxJQUFBLE1BQ0EzdUIsS0FBQWtiLFFBQUExSSxVQUFBQyxJQUFBLFlBQ0F6UyxLQUFBa2IsUUFBQTFJLFVBQUFDLElBQUEsU0FDQXpTLEtBQUFrYixRQUFBMFQsYUFBQSxnQkFDQTV1QixLQUFBeXBCLFFBQUE1VyxZQUFBN1MsS0FBQWtiLFNBQ0EsSUFBQTJULEVBQUF2YyxFQUFBd2MseUJBQ0E5dUIsS0FBQSt1QixpQkFBQXpjLEVBQUFDLGNBQUEsT0FDQXZTLEtBQUErdUIsaUJBQUF2YyxVQUFBQyxJQUFBLGtCQUNBb2MsRUFBQWhjLFlBQUE3UyxLQUFBK3VCLGtCQUNBL3VCLEtBQUFndkIsb0JBQUExYyxFQUFBQyxjQUFBLE9BQ0F2UyxLQUFBZ3ZCLG9CQUFBeGMsVUFBQUMsSUFBQSxxQkFDQXpTLEtBQUErdUIsaUJBQUFsYyxZQUFBN1MsS0FBQWd2QixxQkFDQWh2QixLQUFBd2pCLGNBQUFsUixFQUFBQyxjQUFBLE9BQ0F2UyxLQUFBd2pCLGNBQUFoUixVQUFBQyxJQUFBLGdCQUNBelMsS0FBQWl2QixpQkFBQTNjLEVBQUFDLGNBQUEsT0FDQXZTLEtBQUFpdkIsaUJBQUF6YyxVQUFBQyxJQUFBLGlCQUNBelMsS0FBQXdqQixjQUFBM1EsWUFBQTdTLEtBQUFpdkIsa0JBQ0FKLEVBQUFoYyxZQUFBN1MsS0FBQXdqQixlQUNBeGpCLEtBQUFrckIsa0JBQUEsSUFBQTFELEVBQUFsRyxpQkFBQXRoQixNQUNBQSxLQUFBd0csU0FBQXhHLEtBQUFrckIsbUJBQ0FsckIsS0FBQXdHLFNBQUF4RyxLQUFBeUcsc0JBQUEsb0JBQXdFLE9BQUFKLEVBQUE2a0Isa0JBQUEvWCxjQUN4RW5ULEtBQUFnckIsVUFBQWtFLFlBQUFsdkIsS0FBQWtyQixtQkFDQWxyQixLQUFBbWIsU0FBQTdJLEVBQUFDLGNBQUEsWUFDQXZTLEtBQUFtYixTQUFBM0ksVUFBQUMsSUFBQSx5QkFDQXpTLEtBQUFtYixTQUFBeVQsYUFBQSxhQUFBN1QsRUFBQUgsYUFDQTVhLEtBQUFtYixTQUFBeVQsYUFBQSwwQkFDQTV1QixLQUFBbWIsU0FBQXlULGFBQUEscUJBQ0E1dUIsS0FBQW1iLFNBQUF5VCxhQUFBLHdCQUNBNXVCLEtBQUFtYixTQUFBeVQsYUFBQSxzQkFDQTV1QixLQUFBbWIsU0FBQWdVLFNBQUEsRUFDQW52QixLQUFBd0csU0FBQTRhLEVBQUEvVSx5QkFBQXJNLEtBQUFtYixTQUFBLGlCQUFBMFIsR0FBa0csT0FBQXhtQixFQUFBdW1CLGlCQUFBQyxNQUNsRzdzQixLQUFBd0csU0FBQTRhLEVBQUEvVSx5QkFBQXJNLEtBQUFtYixTQUFBLGtCQUErRixPQUFBOVUsRUFBQTRtQixxQkFDL0ZqdEIsS0FBQWl2QixpQkFBQXBjLFlBQUE3UyxLQUFBbWIsVUFDQW5iLEtBQUFvdkIsaUJBQUE5YyxFQUFBQyxjQUFBLE9BQ0F2UyxLQUFBb3ZCLGlCQUFBNWMsVUFBQUMsSUFBQSxvQkFDQXpTLEtBQUFpdUIsbUJBQUEsSUFBQXZILEVBQUEySSxrQkFBQXJ2QixLQUFBbWIsU0FBQW5iLEtBQUFvdkIsaUJBQUFwdkIsTUFDQUEsS0FBQWl2QixpQkFBQXBjLFlBQUE3UyxLQUFBb3ZCLGtCQUNBcHZCLEtBQUF5akIsWUFBQSxJQUFBeUQsRUFBQW9JLFlBQUFoZCxFQUFBdFMsS0FBQWl2QixrQkFDQWp2QixLQUFBa2IsUUFBQXJJLFlBQUFnYyxHQUNBN3VCLEtBQUFvc0IsaUJBQ0Fwc0IsS0FBQXNzQixPQUFBdHNCLEtBQUFvRCxRQUFBOFUsTUFDQWxZLEtBQUFvRCxRQUFBOFUsTUFBQSxLQUNBbFksS0FBQTZsQixTQUFBLElBQUFjLEVBQUE0SSxTQUFBdnZCLFVBQUErdUIsaUJBQUEvdUIsS0FBQWd2QixvQkFBQWh2QixLQUFBeWpCLGFBQ0F6akIsS0FBQTZsQixTQUFBOVIsZUFBQS9ULEtBQUFna0IsU0FBQXdMLGFBQUF6bEIsUUFDQS9KLEtBQUF3RyxTQUFBeEcsS0FBQTZsQixVQUNBN2xCLEtBQUF3RyxTQUFBeEcsS0FBQXlHLHNCQUFBLHdCQUE0RSxPQUFBSixFQUFBMmQsU0FBQXpRLGtCQUM1RXZULEtBQUF3RyxTQUFBeEcsS0FBQXlHLHNCQUFBLG9CQUF3RSxPQUFBSixFQUFBMmQsU0FBQW1JLFNBQUE5bEIsRUFBQTNELEtBQUEyRCxFQUFBekQsU0FDeEU1QyxLQUFBd0csU0FBQXhHLEtBQUF5RyxzQkFBQSxrQkFBc0UsT0FBQUosRUFBQTJkLFNBQUEzUSxZQUN0RXJULEtBQUF3RyxTQUFBeEcsS0FBQXlHLHNCQUFBLG1CQUF1RSxPQUFBSixFQUFBMmQsU0FBQTFRLGFBQ3ZFdFQsS0FBQXdHLFNBQUF4RyxLQUFBeUcsc0JBQUEsdUJBQTJFLE9BQUFKLEVBQUEyZCxTQUFBeUwsZUFBQS9rQixPQUFBRCxxQkFDM0V6SyxLQUFBd0csU0FBQTRhLEVBQUEvVSx5QkFBQTNCLE9BQUEsb0JBQTBGLE9BQUFyRSxFQUFBMmQsU0FBQXlMLGVBQUEva0IsT0FBQUQscUJBQzFGekssS0FBQXdHLFNBQUF4RyxLQUFBeWpCLFlBQUFoZCxzQkFBQSw2QkFBNkYsT0FBQUosRUFBQTJkLFNBQUFxSSx1QkFDN0Zyc0IsS0FBQXdHLFNBQUF4RyxLQUFBZ2tCLFNBQUF2ZCxzQkFBQSxrQkFBQXNlLEdBQTJGLE9BQUExZSxFQUFBd2YsU0FBQTBHLG9CQUMzRnZzQixLQUFBK3FCLGlCQUFBLElBQUE5RCxFQUFBeUksaUJBQUExdkIsVUFBQXlqQixhQUNBempCLEtBQUF3RyxTQUFBNGEsRUFBQS9VLHlCQUFBck0sS0FBQWtiLFFBQUEscUJBQUEwRyxHQUFvRyxPQUFBdmIsRUFBQTBrQixpQkFBQTRFLFlBQUEvTixNQUNwRzVoQixLQUFBd0csU0FBQXhHLEtBQUErcUIsaUJBQUF0a0Isc0JBQUEsbUJBQUE4UyxHQUE4RixPQUFBbFQsRUFBQTJkLFNBQUFyUSxtQkFBQTRGLEVBQUEzRixNQUFBMkYsRUFBQTFGLElBQUEwRixFQUFBekYscUJBQzlGOVQsS0FBQXdHLFNBQUF4RyxLQUFBK3FCLGlCQUFBdGtCLHNCQUFBLHdCQUFBbXBCLEdBQ0F2cEIsRUFBQThVLFNBQUFwYyxNQUFBNndCLEVBQ0F2cEIsRUFBQThVLFNBQUFFLFFBQ0FoVixFQUFBOFUsU0FBQTBVLFlBRUE3dkIsS0FBQXdHLFNBQUF4RyxLQUFBeUcsc0JBQUEsb0JBQ0FKLEVBQUF3ZixTQUFBMEcsaUJBQ0FsbUIsRUFBQTBrQixpQkFBQTdRLGFBRUFsYSxLQUFBd0csU0FBQTRhLEVBQUEvVSx5QkFBQXJNLEtBQUErdUIsaUJBQUEsb0JBQXlHLE9BQUExb0IsRUFBQTBrQixpQkFBQTdRLGFBQ3pHbGEsS0FBQXNqQixZQUFBLElBQUE4RCxFQUFBdkQsWUFBQTdqQixLQUFBZ2tCLFVBQ0Foa0IsS0FBQW9ELFFBQUFxbEIsbUJBQ0F6b0IsS0FBQXdzQixzQkFBQSxJQUFBL0UsRUFBQWdGLHFCQUFBenNCLE9BRUFBLEtBQUF5akIsWUFBQXlJLFFBQUFsc0IsS0FBQW9ELFNBQ0FwRCxLQUFBa2EsUUFBQSxFQUFBbGEsS0FBQTRDLEtBQUEsR0FDQTVDLEtBQUFtdEIsY0FDQW50QixLQUFBOHZCLGFBRUE5VSxFQUFBdGIsVUFBQTBzQixlQUFBLFdBQ0EsT0FBQXBzQixLQUFBb0QsUUFBQTZsQixjQUNBLGFBQ0FqcEIsS0FBQWdrQixTQUFBLElBQUErQyxFQUFBZ0osU0FBQS92QixVQUFBb0QsUUFBQThVLE9BQ0EsTUFDQSxVQUNBbFksS0FBQWdrQixTQUFBLElBQUEyRCxFQUFBcUksWUFBQWh3QixVQUFBb0QsUUFBQThVLE9BQ0EsTUFDQSxrQkFBQTBULE1BQUEsOEJBQUE1ckIsS0FBQW9ELFFBQUE2bEIsYUFBQSxLQUVBanBCLEtBQUF3RyxTQUFBeEcsS0FBQWdrQixXQUVBaEosRUFBQXRiLFVBQUFvc0IsVUFBQSxTQUFBNVQsR0FDQWxZLEtBQUFzc0IsT0FBQXBVLEVBQ0EsSUFBQW5PLEVBQUEvSixLQUFBZ2tCLFNBQUEvTCxTQUFBQyxHQUNBbFksS0FBQTZsQixVQUNBN2xCLEtBQUE2bEIsU0FBQTlSLGVBQUFoSyxJQUdBaVIsRUFBQXRiLFVBQUFvd0IsVUFBQSxXQUNBLElBQUF6cEIsRUFBQXJHLEtBQ0EyTCxFQUFBM0wsS0FBQWtiLFFBQ0F5UyxFQUFBM3RCLEtBQ0Fpd0IsRUFBQSxHQUNBLFNBQUFDLEVBQUFyRCxHQUNBLElBQUFXLEVBQ0EyQyxFQUdBLEdBRkEzQyxFQXlIQSxTQUFBWCxHQUNBLElBQUFXLEVBQ0E0QyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBLE9BQUExRCxFQUFBMkQsY0FBQTNELEVBQUFsckIsTUFDQSxnQkFDQTZyQixFQUFBLE9BQUFYLEVBQUFXLGFBQUFocUIsSUFBQXFwQixFQUFBVyxRQUNBWCxFQUFBVyxPQUNBLE9BQUFYLEVBQUE0RCxZQUFBanRCLElBQUFxcEIsRUFBQTRELE1BQ0E1RCxFQUFBNEQsTUFBQSxFQUNBLEtBQ0F0SixFQUFBcGIsU0FDQXloQixFQUFBLElBQUFBLEVBQUEsTUFBQUEsRUFBQSxFQUFBQSxHQUVBLE1BQ0EsY0FDQUEsRUFBQSxFQUNBLE1BQ0EscUJBQ0FBLEVBQUFYLEVBQUE2RCxPQUFBLEVBQ0EsR0FDQSxHQUNBLE1BQ0EsWUFDQWxELEVBQUFYLEVBQUE4RCxPQUFBLEVBQ0EsR0FDQSxHQUdBUCxFQUFBdkQsRUFBQStELFNBQUEsSUFDQVAsRUFBQXhELEVBQUFnRSxRQUFBLElBQ0FQLEVBQUF6RCxFQUFBaUUsUUFBQSxLQUNBUCxFQUFBSCxFQUFBQyxFQUFBQyxFQUNBM0MsRUFBQW9ELFdBQ0FSLEdBQUFELEVBRUEzQyxFQUFBcUQsY0FDQVQsRUFBQSxHQUdBLE9BREEvQyxFQUFBLElBQUErQyxHQUFBLEdBQUEvQyxFQWxLQXlELENBQUFwRSxHQUNBc0QsRUFBQXhDLEVBQUFySyxZQUFBNEIsaUJBQUEySCxFQUFBYyxFQUFBbkssY0FBQW1LLEVBQUFsSyxZQUFBa0ssRUFBQWpyQixLQUFBaXJCLEVBQUEvcUIsTUFJQSxPQURBc3VCLEVBQUExRCxFQUFBMkMsR0FDQXRELEVBQUEyRCxjQUFBM0QsRUFBQWxyQixNQUNBLGdCQUNBc3VCLEVBQUF6QyxFQUNBLE1BQ0EsY0FDQXlDLEVBQUEsSUFjQSxTQUFBa0IsRUFBQTVYLEVBQUFuVixHQUNBLEdBQUF1cEIsRUFBQXlELFNBU0EsQ0FDQSxVQUFBaHRCLEVBRUEsWUFEQW1WLEVBQUE5VixLQUFBLEdBR0FXLEVBQUEsSUFDQW1WLEVBQUE5VixLQUFBVyxJQUdBQSxFQUFBLE9BQ0FBLEVBQUEsTUFDQW1WLEVBQUE5VixLQUFBLElBQUFXLEdBQUEsR0FDQW1WLEVBQUE5VixLQUFBLE9BQUFXLFFBckJBLENBQ0EsU0FBQUEsRUFFQSxZQURBbVYsRUFBQTlWLEtBQUEsR0FHQVcsRUFBQSxNQUNBQSxFQUFBLEtBQ0FtVixFQUFBOVYsS0FBQVcsSUFrQkEsU0FBQThzQixFQUFBMUQsRUFBQTJDLEdBQ0EsR0FBQXhDLEVBQUEwRCxZQUFBLENBQ0E3RCxHQUFBLEVBQ0EyQyxFQUFBeHNCLEdBQUEsR0FDQXdzQixFQUFBbnRCLEdBQUEsR0FDQSxJQUFBc3VCLEVBQUF6SyxFQUFBbmEsR0FBQTRCLElBQUEsTUFDQSxPQUFBa2YsRUFDQThELEdBQUEsU0FDQSxPQUFBOUQsRUFDQThELEdBQUEsU0FDQSxPQUFBOUQsRUFDQThELEdBQUEsUUFDQSxRQUFBOUQsRUFDQSxPQUVBOEQsR0FBQSxJQUdBLE9BRkFBLEdBQUEsS0FBQW5CLEVBQUF4c0IsRUFBQSxJQUFBd3NCLEVBQUFudEIsRUFBQSxXQUNBMnFCLEVBQUFobEIsUUFBQTJvQixHQUdBLEdBQUEzRCxFQUFBNEQsWUF1QkEsT0F0QkEvRCxHQUFBLEVBQ0EyQyxFQUFBeHNCLEdBQUEsR0FDQXdzQixFQUFBbnRCLEdBQUEsR0FDQSxJQUFBd3FCLEVBQ0FBLEVBQUEsRUFDQSxJQUFBQSxFQUNBQSxFQUFBLEVBQ0EsSUFBQUEsRUFDQUEsRUFBQSxFQUNBLElBQUFBLElBQ0FBLEVBQUEsUUFDQUcsRUFBQWhsQixRQUFBa2UsRUFBQW5hLEdBQUE0QixJQUFBLElBQ0FrZixFQUNBLEtBQ0EsSUFBQUEsRUFBQSxLQUNBLElBQ0EyQyxFQUFBbnRCLEVBQ0EsSUFDQW10QixFQUFBeHNCLEVBQ0EsSUFDQXdzQixFQUFBcUIsTUFBQSxPQUlBLEdBQUE3RCxFQUFBOEQsV0FNQSxPQUxBdEIsRUFBQXhzQixHQUFBLEdBQ0F3c0IsRUFBQW50QixHQUFBLEdBQ0FtdEIsRUFBQXhzQixJQUNBd3NCLEVBQUFudEIsU0FDQTJxQixFQUFBaGxCLFFBQUFrZSxFQUFBbmEsR0FBQTRCLElBQUEsSUFBQWtmLEVBQUEsSUFBeUUyQyxFQUFBeHNCLEVBQUEsSUFBY3dzQixFQUFBbnRCLEVBQUEsS0FHdkYsR0FBQTJxQixFQUFBK0QsU0FVQSxPQVRBdkIsRUFBQXhzQixHQUFBLEdBQ0F3c0IsRUFBQW50QixHQUFBLFFBQ0EycUIsRUFBQWhsQixRQUFBa2UsRUFBQW5hLEdBQUE0QixJQUFBLE9BQ0EsTUFBQWtmLElBQUEsRUFBQUEsS0FBQSxJQUNBLElBQ0EyQyxFQUFBeHNCLEVBQ0EsSUFDQXdzQixFQUFBbnRCLEdBQ0EsTUFBQXdxQixHQUFBLFVBR0EsSUFBQWpVLEVBQUEsR0FDQTRYLEVBQUE1WCxFQUFBaVUsR0FDQTJELEVBQUE1WCxFQUFBNFcsRUFBQXhzQixHQUNBd3RCLEVBQUE1WCxFQUFBNFcsRUFBQW50QixHQUNBMnFCLEVBQUFobEIsUUFBQWtlLEVBQUFuYSxHQUFBNEIsSUFBQSxLQUFBOFIsT0FBQUMsYUFBQWxYLE1BQUFpWCxPQUFBN0csSUE4Q0F2WixLQUFBd0csU0FBQTRhLEVBQUEvVSx5QkFBQVYsRUFBQSxxQkFBQWtoQixHQUdBLEdBRkFBLEVBQUEzSixpQkFDQTdjLEVBQUFnVixRQUNBaFYsRUFBQXNyQixjQUFBdHJCLEVBQUEwa0IsaUJBQUE2RyxxQkFBQS9FLEdBQUEsQ0FJQSxHQURBcUQsRUFBQXJELEdBQ0F4bUIsRUFBQTBxQixXQUdBLE9BRkFsRSxFQUFBMkQsYUFBQSxVQUNBTixFQUFBckQsR0FDQXhtQixFQUFBd3JCLE9BQUFoRixHQUVBLElBQUFpRixFQUNBenJCLEVBQUEycUIsY0FDQWMsRUFBQSxTQUFBNU4sR0FuS0EsSUFBQTJJLEVBQ0FXLEVBQ0EyQyxFQWtLQTlwQixFQUFBMnFCLGNBcEtBbkUsRUF1S0EzSSxFQXRLQXNKLEVBQUF5QyxHQUNBRSxFQUFBeEMsRUFBQXJLLFlBQUE0QixpQkFBQTJILEVBQUFjLEVBQUFuSyxjQUFBbUssRUFBQWxLLFlBQUFrSyxFQUFBanJCLEtBQUFpckIsRUFBQS9xQixRQUlBc3VCLEVBREExRCxHQUFBLEdBQ0EyQyxLQW1LQTlwQixFQUFBb29CLFVBQUFqaUIsaUJBQUEsWUFBQXNsQixJQUVBLElBQUFucEIsRUFBQSxTQUFBa2tCLEdBU0EsT0FSQXhtQixFQUFBMnFCLGNBQUEzcUIsRUFBQTByQixVQUNBN0IsRUFBQXJELEdBRUFpRixJQUNBenJCLEVBQUFvb0IsVUFBQWhpQixvQkFBQSxZQUFBcWxCLEdBQ0FBLEVBQUEsTUFFQXpyQixFQUFBb29CLFVBQUFoaUIsb0JBQUEsVUFBQTlELEdBQ0F0QyxFQUFBd3JCLE9BQUFoRixJQUdBLE9BREF4bUIsRUFBQW9vQixVQUFBamlCLGlCQUFBLFVBQUE3RCxHQUNBdEMsRUFBQXdyQixPQUFBaEYsT0FFQTdzQixLQUFBd0csU0FBQTRhLEVBQUEvVSx5QkFBQVYsRUFBQSxpQkFBQWtoQixHQUNBLEdBQUF4bUIsRUFBQXNyQixZQWVBdHJCLEVBQUEwckIsVUFBQTFyQixFQUFBZ3JCLGFBQUFockIsRUFBQWtyQixjQUVBckIsRUFBQXJELEdBQ0FBLEVBQUEzSix1QkFqQkEsSUFBQTdjLEVBQUEybEIsT0FBQWdHLGNBQUEsQ0FDQSxJQUFBdHJCLEVBQUFMLEVBQUF3ZixTQUFBb00saUJBQUFwRixHQUNBLE9BQUFubUIsRUFDQSxPQUlBLElBRkEsSUFBQXdyQixFQUFBckwsRUFBQW5hLEdBQUE0QixLQUFBakksRUFBQXdqQixrQkFBQSxVQUFBZ0QsRUFBQThELE9BQUEsV0FDQXBYLEVBQUEsR0FDQXpiLEVBQUEsRUFBbUNBLEVBQUEyRyxLQUFBMHRCLElBQUF6ckIsR0FBc0I1SSxJQUN6RHliLEdBQUEyWSxFQUVBN3JCLEVBQUFzQyxRQUFBNFEsT0FTQXZaLEtBQUF3RyxTQUFBNGEsRUFBQS9VLHlCQUFBVixFQUFBLGlCQUFBa2hCLEdBQ0EsSUFBQXhtQixFQUFBc3JCLFlBR0EsT0FEQXRyQixFQUFBd2YsU0FBQXVNLFFBQUF2RixHQUNBeG1CLEVBQUF3ckIsT0FBQWhGLE1BRUE3c0IsS0FBQXdHLFNBQUE0YSxFQUFBL1UseUJBQUFWLEVBQUEsc0JBQUFraEIsR0FDQSxJQUFBeG1CLEVBQUFzckIsWUFHQSxPQURBdHJCLEVBQUF3ZixTQUFBd00sYUFBQXhGLEdBQ0F4bUIsRUFBQXdyQixPQUFBaEYsTUFFQTdzQixLQUFBd0csU0FBQTRhLEVBQUEvVSx5QkFBQVYsRUFBQSxxQkFBQWtoQixHQUNBLElBQUF4bUIsRUFBQXNyQixZQUdBLE9BREF0ckIsRUFBQXdmLFNBQUF5TSxZQUFBekYsR0FDQXhtQixFQUFBd3JCLE9BQUFoRixPQUdBN1IsRUFBQXRiLFVBQUF3YSxRQUFBLFNBQUF0RyxFQUFBQyxHQUNBN1QsS0FBQWdrQixVQUNBaGtCLEtBQUFna0IsU0FBQXVPLFlBQUEzZSxFQUFBQyxJQUdBbUgsRUFBQXRiLFVBQUE0dUIsb0JBQUEsU0FBQTFhLEVBQUFDLEdBQ0E3VCxLQUFBZ3JCLFdBQ0FockIsS0FBQWdyQixVQUFBd0gsWUFBQTVlLEVBQUFDLElBR0FtSCxFQUFBdGIsVUFBQXF0QixrQkFBQSxTQUFBRixHQUNBN3NCLEtBQUErcUIsa0JBQUEvcUIsS0FBQStxQixpQkFBQTBILG1CQUFBNUYsR0FDQTdzQixLQUFBa2IsUUFBQTFJLFVBQUFDLElBQUEsaUJBR0F6UyxLQUFBa2IsUUFBQTFJLFVBQUEwYSxPQUFBLGtCQUdBbFMsRUFBQXRiLFVBQUFzdEIsV0FBQSxXQUNBaHRCLEtBQUEwcEIsY0FDQTFwQixLQUFBMHBCLFlBQUEsRUFDQTFwQixLQUFBa2EsUUFBQWxhLEtBQUFnc0IsT0FBQWhwQixFQUFBaEQsS0FBQWdzQixPQUFBaHBCLEtBR0FnWSxFQUFBdGIsVUFBQWd6QixPQUFBLFNBQUFsd0IsR0FFQSxJQUFBTCxPQURBLElBQUFLLElBQW1DQSxHQUFBLEdBRW5DLElBQUFtd0IsRUFBQSxZQUFBM3lCLEtBQUFvRCxRQUFBTSwyQkFDQWl2QixJQUNBeHdCLEVBQUFuQyxLQUFBbXBCLGFBQ0FobkIsRUFBQUYsU0FBQWpDLEtBQUEwQyxNQUFBUCxFQUFBeEQsSUFBQSxHQUFBb1MsRUFBQWxRLHdCQUFBYixLQUFBeXJCLGNBQ0F0cEIsRUFBQW5DLEtBQUFnc0IsT0FBQTFwQixhQUFBdEMsS0FBQXlyQixZQUFBanBCLEdBQ0F4QyxLQUFBbXBCLFdBQUFobkIsR0FFQUEsRUFBQUssYUFHQUwsRUFBQW5DLEtBQUFnc0IsT0FBQTFwQixhQUFBdEMsS0FBQXlyQixZQUFBanBCLEdBRUEsSUFBQW93QixFQUFBNXlCLEtBQUFnc0IsT0FBQWpwQixNQUFBL0MsS0FBQWdzQixPQUFBbm9CLFVBQ0FndkIsRUFBQTd5QixLQUFBZ3NCLE9BQUFqcEIsTUFBQS9DLEtBQUFnc0IsT0FBQWxvQixhQUNBLE9BQUE5RCxLQUFBZ3NCLE9BQUFub0IsVUFBQSxDQUNBLElBQUFpdkIsRUFBQTl5QixLQUFBZ3NCLE9BQUFocUIsTUFBQSt3QixPQUNBRixJQUFBN3lCLEtBQUFnc0IsT0FBQWhxQixNQUFBQyxPQUFBLEVBQ0Ewd0IsRUFDQUcsRUFDQTl5QixLQUFBZ3NCLE9BQUFocUIsTUFBQWd4QixVQUFBQyxTQUFBOXdCLEdBR0FuQyxLQUFBZ3NCLE9BQUFocUIsTUFBQXlCLEtBQUF0QixFQUFBaW5CLFNBSUFwcEIsS0FBQWdzQixPQUFBaHFCLE1BQUF5QixLQUFBdEIsR0FJQW5DLEtBQUFnc0IsT0FBQWhxQixNQUFBNkUsT0FBQWdzQixFQUFBLE1BQUExd0IsRUFBQWluQixRQUFBam5CLEdBRUEyd0IsRUFPQTl5QixLQUFBNHFCLGlCQUNBNXFCLEtBQUFnc0IsT0FBQS9vQixNQUFBd0IsS0FBQUMsSUFBQTFFLEtBQUFnc0IsT0FBQS9vQixNQUFBLE9BUEFqRCxLQUFBZ3NCLE9BQUFqcEIsUUFDQS9DLEtBQUE0cUIsZ0JBQ0E1cUIsS0FBQWdzQixPQUFBL29CLGFBU0EsQ0FDQSxJQUFBaXdCLEVBQUFMLEVBQUFELEVBQUEsRUFDQTV5QixLQUFBZ3NCLE9BQUFocUIsTUFBQW14QixjQUFBUCxFQUFBLEVBQUFNLEVBQUEsTUFDQWx6QixLQUFBZ3NCLE9BQUFocUIsTUFBQUssSUFBQXd3QixFQUFBLEVBQUExd0IsRUFBQWluQixRQUFBam5CLEdBRUFuQyxLQUFBNHFCLGlCQUNBNXFCLEtBQUFnc0IsT0FBQS9vQixNQUFBakQsS0FBQWdzQixPQUFBanBCLE9BRUEvQyxLQUFBb3pCLFlBQUFwekIsS0FBQWdzQixPQUFBbm9CLFdBQ0E3RCxLQUFBb3pCLFlBQUFwekIsS0FBQWdzQixPQUFBbG9CLGNBQ0E5RCxLQUFBdUgsS0FBQSxTQUFBdkgsS0FBQWdzQixPQUFBL29CLFFBRUErWCxFQUFBdGIsVUFBQWdkLFlBQUEsU0FBQTJXLEVBQUFDLEdBQ0EsR0FBQUQsRUFBQSxHQUNBLE9BQUFyekIsS0FBQWdzQixPQUFBL29CLE1BQ0EsT0FFQWpELEtBQUE0cUIsZ0JBQUEsT0FFQXlJLEVBQUFyekIsS0FBQWdzQixPQUFBL29CLE9BQUFqRCxLQUFBZ3NCLE9BQUFqcEIsUUFDQS9DLEtBQUE0cUIsZ0JBQUEsR0FFQSxJQUFBMkksRUFBQXZ6QixLQUFBZ3NCLE9BQUEvb0IsTUFDQWpELEtBQUFnc0IsT0FBQS9vQixNQUFBd0IsS0FBQUMsSUFBQUQsS0FBQUUsSUFBQTNFLEtBQUFnc0IsT0FBQS9vQixNQUFBb3dCLEVBQUFyekIsS0FBQWdzQixPQUFBanBCLE9BQUEsR0FDQXd3QixJQUFBdnpCLEtBQUFnc0IsT0FBQS9vQixRQUdBcXdCLEdBQ0F0ekIsS0FBQXVILEtBQUEsU0FBQXZILEtBQUFnc0IsT0FBQS9vQixPQUVBakQsS0FBQWthLFFBQUEsRUFBQWxhLEtBQUE0QyxLQUFBLEtBRUFvWSxFQUFBdGIsVUFBQWlkLFlBQUEsU0FBQUMsR0FDQTVjLEtBQUEwYyxZQUFBRSxHQUFBNWMsS0FBQTRDLEtBQUEsS0FFQW9ZLEVBQUF0YixVQUFBbWQsWUFBQSxXQUNBN2MsS0FBQTBjLGFBQUExYyxLQUFBZ3NCLE9BQUEvb0IsUUFFQStYLEVBQUF0YixVQUFBb2QsZUFBQSxXQUNBOWMsS0FBQTBjLFlBQUExYyxLQUFBZ3NCLE9BQUFqcEIsTUFBQS9DLEtBQUFnc0IsT0FBQS9vQixRQUVBK1gsRUFBQXRiLFVBQUFxZCxhQUFBLFNBQUE5WCxHQUNBLElBQUF1dUIsRUFBQXZ1QixFQUFBakYsS0FBQWdzQixPQUFBL29CLE1BQ0EsSUFBQXV3QixHQUNBeHpCLEtBQUEwYyxZQUFBOFcsSUFHQXhZLEVBQUF0YixVQUFBc2QsTUFBQSxTQUFBekQsR0FDQSxJQUFBbFQsRUFBQXJHLEtBQ0FBLEtBQUF1SixhQUdBZ1EsSUFHQXZaLEtBQUF5cUIsWUFBQWhuQixLQUFBOFYsR0FDQXZaLEtBQUFvRCxRQUFBMmxCLGlCQUFBL29CLEtBQUEycUIsb0JBQUEzcUIsS0FBQXlxQixZQUFBeG9CLFFBdjBCQSxJQXcwQkFqQyxLQUFBMkksUUFBQWtlLEVBQUFuYSxHQUFBb0IsS0FDQTlOLEtBQUEycUIsb0JBQUEsSUFFQTNxQixLQUFBMHFCLGtCQUFBMXFCLEtBQUF5cUIsWUFBQXhvQixPQUFBLElBQ0FqQyxLQUFBMHFCLGtCQUFBLEVBQ0E1SCxXQUFBLFdBQ0F6YyxFQUFBb3RCLG1CQUlBelksRUFBQXRiLFVBQUErekIsWUFBQSxXQUNBLElBQUFwdEIsRUFBQXJHLEtBQ0FBLEtBQUF1SixjQUNBdkosS0FBQXlxQixZQUFBLElBR0EsSUFEQSxJQUFBaUosRUFBQTF6QixLQUFBeXFCLFlBQUE1akIsT0FBQSxFQXQxQkEsS0F1MUJBNnNCLEVBQUF6eEIsT0FBQSxJQUNBLElBQUFzWCxFQUFBbWEsRUFBQXRELFFBQ0Fwd0IsS0FBQTJxQixvQkFBQSxJQUFBK0ksRUFBQXp4QixRQUFBLElBQUFqQyxLQUFBeXFCLFlBQUF4b0IsU0FDQWpDLEtBQUEySSxRQUFBa2UsRUFBQW5hLEdBQUFrQixLQUNBNU4sS0FBQTJxQixvQkFBQSxHQUVBM3FCLEtBQUEyekIsY0FBQTN6QixLQUFBZ3NCLE9BQUFocEIsRUFDQWhELEtBQUE0ekIsWUFBQTV6QixLQUFBZ3NCLE9BQUFocEIsRUFDQWhELEtBQUE2cUIsY0FBQWdKLE1BQUF0YSxHQUNBdlosS0FBQW96QixZQUFBcHpCLEtBQUFnc0IsT0FBQWhwQixHQUNBaEQsS0FBQWthLFFBQUFsYSxLQUFBMnpCLGNBQUEzekIsS0FBQTR6QixhQUVBNXpCLEtBQUF5cUIsWUFBQXhvQixPQUFBLEVBQ0E2Z0IsV0FBQSxXQUFvQyxPQUFBemMsRUFBQW90QixlQUE4QixHQUdsRXp6QixLQUFBMHFCLGtCQUFBLEdBR0ExUCxFQUFBdGIsVUFBQTZiLFFBQUEsU0FBQWhDLEdBQ0F2WixLQUFBZ2QsTUFBQXpELEVBQUEsU0FFQXlCLEVBQUF0YixVQUFBZ2MsNEJBQUEsU0FBQUMsR0FDQTNiLEtBQUFzcEIsdUJBQUEzTixHQUVBWCxFQUFBdGIsVUFBQWtjLG9CQUFBLFNBQUFDLEVBQUFsVCxFQUFBdkYsR0FDQSxJQUFBMlksRUFBQS9iLEtBQUFnckIsVUFBQXBQLG9CQUFBQyxFQUFBbFQsRUFBQXZGLEdBRUEsT0FEQXBELEtBQUFrYSxRQUFBLEVBQUFsYSxLQUFBNEMsS0FBQSxHQUNBbVosR0FFQWYsRUFBQXRiLFVBQUFvYyxzQkFBQSxTQUFBQyxHQUNBL2IsS0FBQWdyQixVQUFBbFAsc0JBQUFDLElBQ0EvYixLQUFBa2EsUUFBQSxFQUFBbGEsS0FBQTRDLEtBQUEsSUFHQW9ZLEVBQUF0YixVQUFBc2Msd0JBQUEsU0FBQXJULEdBQ0EsSUFBQXVULEVBQUFsYyxLQUFBZ2tCLFNBQUFoSSx3QkFBQXJULEdBRUEsT0FEQTNJLEtBQUFrYSxRQUFBLEVBQUFsYSxLQUFBNEMsS0FBQSxHQUNBc1osR0FFQWxCLEVBQUF0YixVQUFBdWMsMEJBQUEsU0FBQUMsR0FDQWxjLEtBQUFna0IsU0FBQS9ILDBCQUFBQyxJQUNBbGMsS0FBQWthLFFBQUEsRUFBQWxhLEtBQUE0QyxLQUFBLElBR0FwRSxPQUFBQyxlQUFBdWMsRUFBQXRiLFVBQUEsV0FDQWYsSUFBQSxXQUNBLE9BQUFxQixLQUFBZ3NCLE9BQUF4cUIsU0FFQTlDLFlBQUEsRUFDQW1FLGNBQUEsSUFFQW1ZLEVBQUF0YixVQUFBMEcsVUFBQSxTQUFBK1YsR0FDQSxHQUFBbmMsS0FBQWdzQixTQUFBaHNCLEtBQUFxckIsUUFBQXFCLE9BR0EsT0FBQTFzQixLQUFBZ3NCLE9BQUE1bEIsVUFBQXBHLEtBQUFnc0IsT0FBQWpwQixNQUFBL0MsS0FBQWdzQixPQUFBaHBCLEVBQUFtWixJQUVBbkIsRUFBQXRiLFVBQUEwYyxhQUFBLFdBQ0EsUUFBQXBjLEtBQUErcUIsa0JBQUEvcUIsS0FBQStxQixpQkFBQTNPLGNBRUFwQixFQUFBdGIsVUFBQTJjLGFBQUEsV0FDQSxPQUFBcmMsS0FBQStxQixpQkFBQS9xQixLQUFBK3FCLGlCQUFBK0ksY0FBQSxJQUVBOVksRUFBQXRiLFVBQUE0YyxlQUFBLFdBQ0F0YyxLQUFBK3FCLGtCQUNBL3FCLEtBQUErcUIsaUJBQUF6TyxrQkFHQXRCLEVBQUF0YixVQUFBNmMsVUFBQSxXQUNBdmMsS0FBQStxQixrQkFDQS9xQixLQUFBK3FCLGlCQUFBeE8sYUFHQXZCLEVBQUF0YixVQUFBOGMsWUFBQSxTQUFBNUksRUFBQUMsR0FDQTdULEtBQUErcUIsa0JBQ0EvcUIsS0FBQStxQixpQkFBQXZPLFlBQUE1SSxFQUFBQyxJQUdBbUgsRUFBQXRiLFVBQUFrdUIsU0FBQSxTQUFBMUosR0FDQSxHQUFBbGtCLEtBQUFzcEIseUJBQUEsSUFBQXRwQixLQUFBc3BCLHVCQUFBcEYsR0FDQSxTQUVBLElBQUFsa0IsS0FBQWl1QixtQkFBQThGLFFBQUE3UCxHQUlBLE9BSEFsa0IsS0FBQWdzQixPQUFBanBCLFFBQUEvQyxLQUFBZ3NCLE9BQUEvb0IsT0FDQWpELEtBQUE4YyxrQkFFQSxFQUVBLElBQUEzVSxFQUFBeWYsRUFBQW9NLHNCQUFBOVAsRUFBQWxrQixLQUFBNnBCLGtCQUFBN3BCLEtBQUFrcEIsUUFBQWxkLE1BQUFoTSxLQUFBb0QsUUFBQXVsQixpQkFFQSxHQURBM29CLEtBQUErc0Isa0JBQUE3SSxHQUNBLElBQUEvYixFQUFBeEcsTUFBQSxJQUFBd0csRUFBQXhHLEtBQUEsQ0FDQSxJQUFBc3lCLEVBQUFqMEIsS0FBQTRDLEtBQUEsRUFFQSxPQURBNUMsS0FBQTBjLFlBQUEsSUFBQXZVLEVBQUF4RyxNQUFBc3lCLEtBQ0FqMEIsS0FBQTZ4QixPQUFBM04sR0FBQSxHQUtBLE9BSEEsSUFBQS9iLEVBQUF4RyxNQUNBM0IsS0FBQXVjLGNBRUF2YyxLQUFBazBCLG1CQUFBbDBCLEtBQUFrcEIsUUFBQWhGLEtBR0EvYixFQUFBMHBCLFFBQ0E3eEIsS0FBQTZ4QixPQUFBM04sR0FBQSxJQUVBL2IsRUFBQTlJLE1BR0FXLEtBQUF1SCxLQUFBLFVBQUEyYyxHQUNBbGtCLEtBQUF1SCxLQUFBLE1BQUFZLEVBQUE5SSxJQUFBNmtCLEdBQ0Fsa0IsS0FBQWd0QixhQUNBaHRCLEtBQUEySSxRQUFBUixFQUFBOUksS0FDQVcsS0FBQTZ4QixPQUFBM04sR0FBQSxNQUVBbEosRUFBQXRiLFVBQUF3MEIsbUJBQUEsU0FBQWhMLEVBQUEyRCxHQUNBLElBQUFzSCxFQUFBakwsRUFBQWxkLFFBQUFoTSxLQUFBb0QsUUFBQXVsQixpQkFBQWtFLEVBQUF1SCxTQUFBdkgsRUFBQWlFLFVBQUFqRSxFQUFBZ0UsU0FDQTNILEVBQUEvYyxhQUFBMGdCLEVBQUF1SCxRQUFBdkgsRUFBQWlFLFVBQUFqRSxFQUFBZ0UsUUFDQSxtQkFBQWhFLEVBQUFsckIsS0FDQXd5QixFQUVBQSxLQUFBdEgsRUFBQWlCLFNBQUFqQixFQUFBaUIsUUFBQSxLQUVBOVMsRUFBQXRiLFVBQUEyMEIsVUFBQSxTQUFBMWMsR0FDQTNYLEtBQUFvcUIsT0FBQXpTLEVBQ0EzWCxLQUFBa3FCLFFBQUFscUIsS0FBQXFxQixTQUFBMVMsSUFFQXFELEVBQUF0YixVQUFBNDBCLFlBQUEsU0FBQTNjLEVBQUF1UyxHQUNBbHFCLEtBQUFxcUIsU0FBQTFTLEdBQUF1UyxFQUNBbHFCLEtBQUFvcUIsU0FBQXpTLElBQ0EzWCxLQUFBa3FCLFlBR0FsUCxFQUFBdGIsVUFBQXN1QixPQUFBLFNBQUFuQixHQUNBN3NCLEtBQUErc0Isa0JBQUFGLElBRUE3UixFQUFBdGIsVUFBQW11QixVQUFBLFNBQUFoQixHQUNBLElBQUF4dEIsRUFDQSxHQUFBVyxLQUFBc3BCLHlCQUFBLElBQUF0cEIsS0FBQXNwQix1QkFBQXVELEdBQ0EsU0FHQSxHQURBN3NCLEtBQUE2eEIsT0FBQWhGLEdBQ0FBLEVBQUEwSCxTQUNBbDFCLEVBQUF3dEIsRUFBQTBILGNBRUEsVUFBQTFILEVBQUE0RCxZQUFBanRCLElBQUFxcEIsRUFBQTRELE1BQ0FweEIsRUFBQXd0QixFQUFBaUIsWUFFQSxRQUFBakIsRUFBQTRELE9BQUEsSUFBQTVELEVBQUEwSCxTQUlBLFNBSEFsMUIsRUFBQXd0QixFQUFBNEQsTUFLQSxTQUFBcHhCLElBQUF3dEIsRUFBQXVILFFBQUF2SCxFQUFBaUUsU0FBQWpFLEVBQUFnRSxXQUFBN3dCLEtBQUFrMEIsbUJBQUFsMEIsS0FBQWtwQixRQUFBMkQsTUFHQXh0QixFQUFBK2dCLE9BQUFDLGFBQUFoaEIsR0FDQVcsS0FBQXVILEtBQUEsV0FBQWxJLEVBQUF3dEIsR0FDQTdzQixLQUFBdUgsS0FBQSxNQUFBbEksRUFBQXd0QixHQUNBN3NCLEtBQUFndEIsYUFDQWh0QixLQUFBMkksUUFBQXRKLElBQ0EsSUFFQTJiLEVBQUF0YixVQUFBODBCLEtBQUEsV0FDQSxJQUFBbnVCLEVBQUFyRyxLQUNBQSxLQUFBdUgsS0FBQSxRQUNBdkgsS0FBQXkwQixjQUNBejBCLEtBQUFtckIsYUFBQXVKLGdCQUVBMTBCLEtBQUEyMEIsZ0JBQ0EzMEIsS0FBQWtiLFFBQUExSSxVQUFBQyxJQUFBLHNCQUNBbVEsYUFBQTVpQixLQUFBNDBCLGtCQUNBNTBCLEtBQUE0MEIsaUJBQUFscUIsT0FBQW9ZLFdBQUEsV0FDQXpjLEVBQUE2VSxRQUFBMUksVUFBQTBhLE9BQUEsdUJBQ2EsT0FHYmxTLEVBQUF0YixVQUFBbTFCLElBQUEsU0FBQWpGLEVBQUFyVyxHQUNBdlosS0FBQW9ELFFBQUFzbEIsT0FFQTFvQixLQUFBdXVCLFNBQUFsVixTQUFBclosS0FBQXV1QixTQUFBbFYsUUFBQXdiLEtBRUE3MEIsS0FBQXV1QixTQUFBbFYsUUFBQXdiLElBQUFqRixFQUFBclcsSUFFQXlCLEVBQUF0YixVQUFBbXNCLE1BQUEsU0FBQStELEVBQUFyVyxHQUNBdlosS0FBQW9ELFFBQUFzbEIsT0FFQTFvQixLQUFBdXVCLFNBQUFsVixTQUFBclosS0FBQXV1QixTQUFBbFYsUUFBQXdTLE9BRUE3ckIsS0FBQXV1QixTQUFBbFYsUUFBQXdTLE1BQUErRCxFQUFBclcsSUFFQXlCLEVBQUF0YixVQUFBc0UsT0FBQSxTQUFBTCxFQUFBWCxHQUNBOHhCLE1BQUFueEIsSUFBQW14QixNQUFBOXhCLEtBR0FXLElBQUEzRCxLQUFBMEMsTUFBQU0sSUFBQWhELEtBQUE0QyxNQU1BZSxFQUFBLElBQ0FBLEVBQUEsR0FDQVgsRUFBQSxJQUNBQSxFQUFBLEdBQ0FoRCxLQUFBcXJCLFFBQUFybkIsT0FBQUwsRUFBQVgsR0FDQWhELEtBQUEwQyxLQUFBaUIsRUFDQTNELEtBQUE0QyxLQUFBSSxFQUNBaEQsS0FBQXFyQixRQUFBdG5CLGNBQUEvRCxLQUFBMEMsTUFDQTFDLEtBQUF5akIsYUFDQXpqQixLQUFBeWpCLFlBQUF5SSxRQUFBbHNCLEtBQUFvRCxTQUVBcEQsS0FBQWthLFFBQUEsRUFBQWxhLEtBQUE0QyxLQUFBLEdBQ0E1QyxLQUFBdUgsS0FBQSxVQUE2QjdFLEtBQUFpQixFQUFBZixLQUFBSSxNQWpCN0JoRCxLQUFBeWpCLGFBQUF6akIsS0FBQXlqQixZQUFBN08sT0FBQTVVLEtBQUF5akIsWUFBQTNPLFFBQ0E5VSxLQUFBeWpCLFlBQUF5SSxRQUFBbHNCLEtBQUFvRCxXQWtCQTRYLEVBQUF0YixVQUFBMHpCLFlBQUEsU0FBQXB3QixHQUNBQSxFQUFBaEQsS0FBQTJ6QixnQkFDQTN6QixLQUFBMnpCLGNBQUEzd0IsR0FDQUEsRUFBQWhELEtBQUE0ekIsY0FDQTV6QixLQUFBNHpCLFlBQUE1d0IsSUFFQWdZLEVBQUF0YixVQUFBcTFCLFNBQUEsV0FDQS8wQixLQUFBMnpCLGNBQUEsRUFDQTN6QixLQUFBNHpCLFlBQUE1ekIsS0FBQTRDLEtBQUEsR0FFQW9ZLEVBQUF0YixVQUFBK0IsTUFBQSxXQUNBLE9BQUF6QixLQUFBZ3NCLE9BQUFqcEIsT0FBQSxJQUFBL0MsS0FBQWdzQixPQUFBaHBCLEVBQUEsQ0FHQWhELEtBQUFnc0IsT0FBQWhxQixNQUFBSyxJQUFBLEVBQUFyQyxLQUFBZ3NCLE9BQUFocUIsTUFBQXJELElBQUFxQixLQUFBZ3NCLE9BQUFqcEIsTUFBQS9DLEtBQUFnc0IsT0FBQWhwQixJQUNBaEQsS0FBQWdzQixPQUFBaHFCLE1BQUFDLE9BQUEsRUFDQWpDLEtBQUFnc0IsT0FBQS9vQixNQUFBLEVBQ0FqRCxLQUFBZ3NCLE9BQUFqcEIsTUFBQSxFQUNBL0MsS0FBQWdzQixPQUFBaHBCLEVBQUEsRUFDQSxRQUFBbEYsRUFBQSxFQUF1QkEsRUFBQWtDLEtBQUE0QyxLQUFlOUUsSUFDdENrQyxLQUFBZ3NCLE9BQUFocUIsTUFBQXlCLEtBQUF6RCxLQUFBZ3NCLE9BQUExcEIsYUFBQXlPLEVBQUFwUSxlQUVBWCxLQUFBa2EsUUFBQSxFQUFBbGEsS0FBQTRDLEtBQUEsR0FDQTVDLEtBQUF1SCxLQUFBLFNBQUF2SCxLQUFBZ3NCLE9BQUEvb0IsU0FFQStYLEVBQUF0YixVQUFBMEUsR0FBQSxTQUFBNHdCLEdBQ0EsT0FBQUEsRUFDQSxDQUFBaDFCLEtBQUF5ckIsWUFBQTFhLEVBQUE3UCxlQUFBNlAsRUFBQTVQLGdCQUFBNFAsRUFBQTNQLGdCQUVBLENBQUEyUCxFQUFBcFEsYUFBQW9RLEVBQUE3UCxlQUFBNlAsRUFBQTVQLGdCQUFBNFAsRUFBQTNQLGlCQUVBNFosRUFBQXRiLFVBQUF1MUIsR0FBQSxTQUFBN1AsR0FDQSxZQUFBcGxCLEtBQUFvRCxRQUFBNGtCLFNBQUEsSUFBQWxoQixRQUFBc2UsSUFFQXBLLEVBQUF0YixVQUFBaUosUUFBQSxTQUFBNFEsR0FDQXZaLEtBQUFvRCxRQUFBMGxCLGVBR0E5b0IsS0FBQStxQixrQkFBQS9xQixLQUFBK3FCLGlCQUFBM08sY0FDQXBjLEtBQUErcUIsaUJBQUF6TyxpQkFFQXRjLEtBQUFnc0IsT0FBQWpwQixRQUFBL0MsS0FBQWdzQixPQUFBL29CLE9BQ0FqRCxLQUFBOGMsaUJBRUE5YyxLQUFBdUgsS0FBQSxPQUFBZ1MsS0FFQXlCLEVBQUF0YixVQUFBdzFCLFlBQUEsU0FBQUMsR0FDQW4xQixLQUFBdUgsS0FBQSxRQUFBNHRCLElBRUFuYSxFQUFBdGIsVUFBQWdLLE1BQUEsV0FDQTFKLEtBQUFnc0IsT0FBQWhwQixJQUNBaEQsS0FBQWdzQixPQUFBaHBCLEVBQUFoRCxLQUFBZ3NCLE9BQUFsb0IsZUFDQTlELEtBQUFnc0IsT0FBQWhwQixJQUNBaEQsS0FBQTB5QixVQUVBMXlCLEtBQUFnc0IsT0FBQXJvQixHQUFBM0QsS0FBQTBDLE1BQ0ExQyxLQUFBZ3NCLE9BQUFyb0IsS0FHQXFYLEVBQUF0YixVQUFBMDFCLGFBQUEsV0FDQSxHQUFBcDFCLEtBQUFnc0IsT0FBQWhwQixJQUFBaEQsS0FBQWdzQixPQUFBbm9CLFVBQUEsQ0FDQSxJQUFBcXZCLEVBQUFsekIsS0FBQWdzQixPQUFBbG9CLGFBQUE5RCxLQUFBZ3NCLE9BQUFub0IsVUFDQTdELEtBQUFnc0IsT0FBQWhxQixNQUFBbXhCLGNBQUFuekIsS0FBQWdzQixPQUFBaHBCLEVBQUFoRCxLQUFBZ3NCLE9BQUFqcEIsTUFBQW13QixFQUFBLEdBQ0FsekIsS0FBQWdzQixPQUFBaHFCLE1BQUFLLElBQUFyQyxLQUFBZ3NCLE9BQUFocEIsRUFBQWhELEtBQUFnc0IsT0FBQWpwQixNQUFBL0MsS0FBQWdzQixPQUFBMXBCLGFBQUF0QyxLQUFBeXJCLGNBQ0F6ckIsS0FBQW96QixZQUFBcHpCLEtBQUFnc0IsT0FBQW5vQixXQUNBN0QsS0FBQW96QixZQUFBcHpCLEtBQUFnc0IsT0FBQWxvQixtQkFHQTlELEtBQUFnc0IsT0FBQWhwQixLQUdBZ1ksRUFBQXRiLFVBQUF5ZCxNQUFBLFdBQ0FuZCxLQUFBb0QsUUFBQVIsS0FBQTVDLEtBQUE0QyxLQUNBNUMsS0FBQW9ELFFBQUFWLEtBQUExQyxLQUFBMEMsS0FDQSxJQUFBaVosRUFBQTNiLEtBQUFzcEIsdUJBQ0ErTCxFQUFBcjFCLEtBQUE2cUIsY0FDQW5CLEVBQUExcEIsS0FBQTBwQixZQUNBMXBCLEtBQUFxcEIsU0FDQXJwQixLQUFBc3BCLHVCQUFBM04sRUFDQTNiLEtBQUE2cUIsY0FBQXdLLEVBQ0FyMUIsS0FBQTBwQixjQUNBMXBCLEtBQUFrYSxRQUFBLEVBQUFsYSxLQUFBNEMsS0FBQSxHQUNBNUMsS0FBQTZsQixVQUNBN2xCLEtBQUE2bEIsU0FBQTBHLGtCQUdBdlIsRUFBQXRiLFVBQUE0MUIsT0FBQSxXQUNBdDFCLEtBQUFnc0IsT0FBQWhtQixLQUFBaEcsS0FBQWdzQixPQUFBcm9CLElBQUEsR0FFQXFYLEVBQUF0YixVQUFBbXlCLE9BQUEsU0FBQWhGLEVBQUEwSSxHQUNBLEdBQUF2MUIsS0FBQW9ELFFBQUF5bEIsY0FBQTBNLEVBS0EsT0FGQTFJLEVBQUEzSixpQkFDQTJKLEVBQUEySSxtQkFDQSxHQUVBeGEsRUFBQXRiLFVBQUErMUIsV0FBQSxTQUFBQyxFQUFBQyxFQUFBQyxHQUNBLElBQUFDLEVBQUFILEdBQUEsR0FBQUMsR0FBQSxFQUFBQyxFQUNBLFVBQUFFLEVBQUFELFNBQUFyeUIsSUFBQXN5QixFQUFBRCxHQUNBLE9BQUFDLEVBQUFELEdBVUEsSUFSQSxJQUdBMTNCLEVBSUE0M0IsRUFQQUMsRUFBQUMsSUFDQUMsR0FBQSxFQUNBcDRCLEVBQUEsRUFNY0EsRUFBQXlwQixFQUFBOVAsb0JBQUF4VixPQUErQ25FLElBQUEsQ0FNN0QsUUFEQWk0QixFQUFBSSxFQUFBVCxFQUFBQyxFQUFBQyxHQUpBejNCLEVBQUFvcEIsRUFBQTlQLG9CQUFBM1osR0FBQW9OLFFBQ0EsR0FDQS9NLElBQUEsT0FDQUEsSUFBQSxRQUVBLENBQ0ErM0IsRUFBQXA0QixFQUNBLE1BRUFpNEIsRUFBQUMsSUFDQUEsRUFBQUQsRUFDQUcsRUFBQXA0QixHQUdBLE9BQUFnNEIsRUFBQUQsR0FBQUssR0FFQWxiLEVBQUF0YixVQUFBaTFCLFlBQUEsV0FDQSxVQUVBM1osRUFBQXRiLFVBQUErMEIsV0FBQSxXQUNBLGdCQUFBejBCLEtBQUFvRCxRQUFBaWxCLFdBRUFyTixFQS9vQ0EsQ0FncENDeGEsRUFBQWdILGNBQ0Q1SixFQUFBb2QsV0FNQSxJQUFBOGEsRUFBQSxHQUNBLFNBQUFLLEVBQUFULEVBQUFDLEVBQUFDLEVBQUFRLEVBQUFDLEVBQUFDLEdBQ0EsT0FBQTd4QixLQUFBOHhCLElBQUEsSUFBQWIsRUFBQVUsR0FBQSxHQUNBM3hCLEtBQUE4eEIsSUFBQSxJQUFBWixFQUFBVSxHQUFBLEdBQ0E1eEIsS0FBQTh4QixJQUFBLElBQUFYLEVBQUFVLEdBQUEsa0NDeHVDQSxJQUNBeDJCLEVBREFDLEVBQUFDLFdBQUFELFlBQ0FELEVBQUEsU0FBQTFCLEVBQUE2QixHQUlBLE9BSEFILEVBQUF0QixPQUFBMEIsZ0JBQ0EsQ0FBY0MsVUFBQSxjQUFnQkMsT0FBQSxTQUFBaEMsRUFBQTZCLEdBQXNDN0IsRUFBQStCLFVBQUFGLElBQ3BFLFNBQUE3QixFQUFBNkIsR0FBNkIsUUFBQUwsS0FBQUssSUFBQU4sZUFBQUMsS0FBQXhCLEVBQUF3QixHQUFBSyxFQUFBTCxNQUM3QnhCLEVBQUE2QixJQUVBLFNBQUE3QixFQUFBNkIsR0FFQSxTQUFBSSxJQUF1QkwsS0FBQU0sWUFBQWxDLEVBRHZCMEIsRUFBQTFCLEVBQUE2QixHQUVBN0IsRUFBQXNCLFVBQUEsT0FBQU8sRUFBQXpCLE9BQUFZLE9BQUFhLElBQUFJLEVBQUFYLFVBQUFPLEVBQUFQLFVBQUEsSUFBQVcsS0FHQTdCLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBQzlDLElBQUFnUyxFQUFlclQsRUFBUSxHQUV2QjR0QixFQUFBLFNBQUFua0IsR0FFQSxTQUFBbWtCLEVBQUFocUIsR0FDQSxJQUFBK0UsRUFBQWMsRUFBQWxKLEtBQUErQixZQU9BLE9BTkFxRyxFQUFBL0UsWUFDQStFLEVBQUFtd0IsUUFBQSxJQUFBemxCLEVBQUExUCxPQUFBZ0YsRUFBQS9FLFdBQUEsR0FDQStFLEVBQUFtd0IsUUFBQWx6QixtQkFDQStDLEVBQUFvd0IsS0FBQSxJQUFBMWxCLEVBQUExUCxPQUFBZ0YsRUFBQS9FLFdBQUEsR0FDQStFLEVBQUFxd0IsY0FBQXJ3QixFQUFBbXdCLFFBQ0Fud0IsRUFBQXRDLGdCQUNBc0MsRUF5REEsT0FsRUF0RyxFQUFBdXJCLEVBQUFua0IsR0FXQTNJLE9BQUFDLGVBQUE2c0IsRUFBQTVyQixVQUFBLE9BQ0FmLElBQUEsV0FDQSxPQUFBcUIsS0FBQXkyQixNQUVBLzNCLFlBQUEsRUFDQW1FLGNBQUEsSUFFQXJFLE9BQUFDLGVBQUE2c0IsRUFBQTVyQixVQUFBLFVBQ0FmLElBQUEsV0FDQSxPQUFBcUIsS0FBQTAyQixlQUVBaDRCLFlBQUEsRUFDQW1FLGNBQUEsSUFFQXJFLE9BQUFDLGVBQUE2c0IsRUFBQTVyQixVQUFBLFVBQ0FmLElBQUEsV0FDQSxPQUFBcUIsS0FBQXcyQixTQUVBOTNCLFlBQUEsRUFDQW1FLGNBQUEsSUFFQXlvQixFQUFBNXJCLFVBQUFpM0IscUJBQUEsV0FDQTMyQixLQUFBMDJCLGdCQUFBMTJCLEtBQUF3MkIsVUFHQXgyQixLQUFBdzJCLFFBQUE3eUIsRUFBQTNELEtBQUF5MkIsS0FBQTl5QixFQUNBM0QsS0FBQXcyQixRQUFBeHpCLEVBQUFoRCxLQUFBeTJCLEtBQUF6ekIsRUFDQWhELEtBQUF5MkIsS0FBQWgxQixRQUNBekIsS0FBQTAyQixjQUFBMTJCLEtBQUF3MkIsUUFDQXgyQixLQUFBdUgsS0FBQSxZQUNBcXZCLGFBQUE1MkIsS0FBQXcyQixRQUNBSyxlQUFBNzJCLEtBQUF5MkIsU0FHQW5MLEVBQUE1ckIsVUFBQW8zQixrQkFBQSxTQUFBdnpCLEdBQ0F2RCxLQUFBMDJCLGdCQUFBMTJCLEtBQUF5MkIsT0FHQXoyQixLQUFBeTJCLEtBQUFuekIsaUJBQUFDLEdBQ0F2RCxLQUFBeTJCLEtBQUE5eUIsRUFBQTNELEtBQUF3MkIsUUFBQTd5QixFQUNBM0QsS0FBQXkyQixLQUFBenpCLEVBQUFoRCxLQUFBdzJCLFFBQUF4ekIsRUFDQWhELEtBQUEwMkIsY0FBQTEyQixLQUFBeTJCLEtBQ0F6MkIsS0FBQXVILEtBQUEsWUFDQXF2QixhQUFBNTJCLEtBQUF5MkIsS0FDQUksZUFBQTcyQixLQUFBdzJCLFlBR0FsTCxFQUFBNXJCLFVBQUFzRSxPQUFBLFNBQUFDLEVBQUFDLEdBQ0FsRSxLQUFBdzJCLFFBQUF4eUIsT0FBQUMsRUFBQUMsR0FDQWxFLEtBQUF5MkIsS0FBQXp5QixPQUFBQyxFQUFBQyxJQUVBb25CLEVBQUE1ckIsVUFBQXFFLGNBQUEsU0FBQWpHLEdBQ0FrQyxLQUFBdzJCLFFBQUF6eUIsY0FBQWpHLEdBQ0FrQyxLQUFBeTJCLEtBQUExeUIsY0FBQWpHLElBRUF3dEIsRUFuRUEsQ0FEcUI1dEIsRUFBUSxHQXFFNUI4SixjQUNENUosRUFBQTB0QiwwQ0NyRkEsSUFDQXhyQixFQURBQyxFQUFBQyxXQUFBRCxZQUNBRCxFQUFBLFNBQUExQixFQUFBNkIsR0FJQSxPQUhBSCxFQUFBdEIsT0FBQTBCLGdCQUNBLENBQWNDLFVBQUEsY0FBZ0JDLE9BQUEsU0FBQWhDLEVBQUE2QixHQUFzQzdCLEVBQUErQixVQUFBRixJQUNwRSxTQUFBN0IsRUFBQTZCLEdBQTZCLFFBQUFMLEtBQUFLLElBQUFOLGVBQUFDLEtBQUF4QixFQUFBd0IsR0FBQUssRUFBQUwsTUFDN0J4QixFQUFBNkIsSUFFQSxTQUFBN0IsRUFBQTZCLEdBRUEsU0FBQUksSUFBdUJMLEtBQUFNLFlBQUFsQyxFQUR2QjBCLEVBQUExQixFQUFBNkIsR0FFQTdCLEVBQUFzQixVQUFBLE9BQUFPLEVBQUF6QixPQUFBWSxPQUFBYSxJQUFBSSxFQUFBWCxVQUFBTyxFQUFBUCxVQUFBLElBQUFXLEtBR0E3QixPQUFBQyxlQUFBYixFQUFBLGNBQThDbUIsT0FBQSxJQUM5QyxJQUNBNkUsRUFBQSxTQUFBdUQsR0FFQSxTQUFBdkQsRUFBQW16QixHQUNBLElBQUExd0IsRUFBQWMsRUFBQWxKLEtBQUErQixZQUtBLE9BSkFxRyxFQUFBMHdCLGFBQ0Exd0IsRUFBQTJ3QixPQUFBLElBQUE1MkIsTUFBQWlHLEVBQUEwd0IsWUFDQTF3QixFQUFBc0IsWUFBQSxFQUNBdEIsRUFBQTR3QixRQUFBLEVBQ0E1d0IsRUE0SUEsT0FuSkF0RyxFQUFBNkQsRUFBQXVELEdBU0EzSSxPQUFBQyxlQUFBbUYsRUFBQWxFLFVBQUEsYUFDQWYsSUFBQSxXQUNBLE9BQUFxQixLQUFBKzJCLFlBRUExMEIsSUFBQSxTQUFBOEIsR0FDQSxHQUFBbkUsS0FBQSsyQixhQUFBNXlCLEVBQUEsQ0FJQSxJQURBLElBQUEreUIsRUFBQSxJQUFBOTJCLE1BQUErRCxHQUNBckcsRUFBQSxFQUEyQkEsRUFBQTJHLEtBQUFFLElBQUFSLEVBQUFuRSxLQUFBaUMsUUFBeUNuRSxJQUNwRW81QixFQUFBcDVCLEdBQUFrQyxLQUFBZzNCLE9BQUFoM0IsS0FBQW0zQixnQkFBQXI1QixJQUVBa0MsS0FBQWczQixPQUFBRSxFQUNBbDNCLEtBQUErMkIsV0FBQTV5QixFQUNBbkUsS0FBQTJILFlBQUEsSUFFQWpKLFlBQUEsRUFDQW1FLGNBQUEsSUFFQXJFLE9BQUFDLGVBQUFtRixFQUFBbEUsVUFBQSxVQUNBZixJQUFBLFdBQ0EsT0FBQXFCLEtBQUFpM0IsU0FFQTUwQixJQUFBLFNBQUErMEIsR0FDQSxHQUFBQSxFQUFBcDNCLEtBQUFpM0IsUUFDQSxRQUFBbjVCLEVBQUFrQyxLQUFBaTNCLFFBQTBDbjVCLEVBQUFzNUIsRUFBZXQ1QixJQUN6RGtDLEtBQUFnM0IsT0FBQWw1QixRQUFBMEYsRUFHQXhELEtBQUFpM0IsUUFBQUcsR0FFQTE0QixZQUFBLEVBQ0FtRSxjQUFBLElBRUFlLEVBQUFsRSxVQUFBZixJQUFBLFNBQUErSyxHQUNBLE9BQUExSixLQUFBZzNCLE9BQUFoM0IsS0FBQW0zQixnQkFBQXp0QixLQUVBOUYsRUFBQWxFLFVBQUEyQyxJQUFBLFNBQUFxSCxFQUFBM0ssR0FDQWlCLEtBQUFnM0IsT0FBQWgzQixLQUFBbTNCLGdCQUFBenRCLElBQUEzSyxHQUVBNkUsRUFBQWxFLFVBQUErRCxLQUFBLFNBQUExRSxHQUNBaUIsS0FBQWczQixPQUFBaDNCLEtBQUFtM0IsZ0JBQUFuM0IsS0FBQWkzQixVQUFBbDRCLEVBQ0FpQixLQUFBaTNCLFVBQUFqM0IsS0FBQSsyQixZQUNBLzJCLEtBQUEySCxjQUFBM0gsS0FBQTJILFlBQUEzSCxLQUFBKzJCLFdBQ0EvMkIsS0FBQXVILEtBQUEsV0FHQXZILEtBQUFpM0IsV0FHQXJ6QixFQUFBbEUsVUFBQXN6QixRQUFBLFdBQ0EsR0FBQWh6QixLQUFBaTNCLFVBQUFqM0IsS0FBQSsyQixXQUNBLFVBQUFuTCxNQUFBLDRDQUlBLE9BRkE1ckIsS0FBQTJILGNBQUEzSCxLQUFBMkgsWUFBQTNILEtBQUErMkIsV0FDQS8yQixLQUFBdUgsS0FBQSxVQUNBdkgsS0FBQWczQixPQUFBaDNCLEtBQUFtM0IsZ0JBQUFuM0IsS0FBQWkzQixRQUFBLEtBRUF6NEIsT0FBQUMsZUFBQW1GLEVBQUFsRSxVQUFBLFVBQ0FmLElBQUEsV0FDQSxPQUFBcUIsS0FBQWkzQixVQUFBajNCLEtBQUErMkIsWUFFQXI0QixZQUFBLEVBQ0FtRSxjQUFBLElBRUFlLEVBQUFsRSxVQUFBNEUsSUFBQSxXQUNBLE9BQUF0RSxLQUFBZzNCLE9BQUFoM0IsS0FBQW0zQixnQkFBQW4zQixLQUFBaTNCLFVBQUEsS0FFQXJ6QixFQUFBbEUsVUFBQW1ILE9BQUEsU0FBQStNLEVBQUF5akIsR0FFQSxJQURBLElBQUFDLEVBQUEsR0FDQXJ1QixFQUFBLEVBQXdCQSxFQUFBQyxVQUFBakgsT0FBdUJnSCxJQUMvQ3F1QixFQUFBcnVCLEVBQUEsR0FBQUMsVUFBQUQsR0FFQSxHQUFBb3VCLEVBQUEsQ0FDQSxRQUFBdjVCLEVBQUE4VixFQUErQjlWLEVBQUFrQyxLQUFBaTNCLFFBQUFJLEVBQWdDdjVCLElBQy9Ea0MsS0FBQWczQixPQUFBaDNCLEtBQUFtM0IsZ0JBQUFyNUIsSUFBQWtDLEtBQUFnM0IsT0FBQWgzQixLQUFBbTNCLGdCQUFBcjVCLEVBQUF1NUIsSUFFQXIzQixLQUFBaTNCLFNBQUFJLEVBRUEsR0FBQUMsS0FBQXIxQixPQUFBLENBQ0EsSUFBQW5FLEVBQUFrQyxLQUFBaTNCLFFBQUEsRUFBMENuNUIsR0FBQThWLEVBQVk5VixJQUN0RGtDLEtBQUFnM0IsT0FBQWgzQixLQUFBbTNCLGdCQUFBcjVCLEVBQUF3NUIsRUFBQXIxQixTQUFBakMsS0FBQWczQixPQUFBaDNCLEtBQUFtM0IsZ0JBQUFyNUIsSUFFQSxJQUFBQSxFQUFBLEVBQTJCQSxFQUFBdzVCLEVBQUFyMUIsT0FBa0JuRSxJQUM3Q2tDLEtBQUFnM0IsT0FBQWgzQixLQUFBbTNCLGdCQUFBdmpCLEVBQUE5VixJQUFBdzVCLEVBQUF4NUIsR0FFQSxHQUFBa0MsS0FBQWkzQixRQUFBSyxFQUFBcjFCLE9BQUFqQyxLQUFBKzJCLFdBQUEsQ0FDQSxJQUFBUSxFQUFBdjNCLEtBQUFpM0IsUUFBQUssRUFBQXIxQixPQUFBakMsS0FBQSsyQixXQUNBLzJCLEtBQUEySCxhQUFBNHZCLEVBQ0F2M0IsS0FBQWkzQixRQUFBajNCLEtBQUErMkIsV0FDQS8yQixLQUFBdUgsS0FBQSxPQUFBZ3dCLFFBR0F2M0IsS0FBQWkzQixTQUFBSyxFQUFBcjFCLFNBSUEyQixFQUFBbEUsVUFBQThFLFVBQUEsU0FBQWd6QixHQUNBQSxFQUFBeDNCLEtBQUFpM0IsVUFDQU8sRUFBQXgzQixLQUFBaTNCLFNBRUFqM0IsS0FBQTJILGFBQUE2dkIsRUFDQXgzQixLQUFBaTNCLFNBQUFPLEVBQ0F4M0IsS0FBQXVILEtBQUEsT0FBQWl3QixJQUVBNXpCLEVBQUFsRSxVQUFBeXpCLGNBQUEsU0FBQXZmLEVBQUE0akIsRUFBQTVYLEdBQ0EsS0FBQTRYLEdBQUEsSUFHQSxHQUFBNWpCLEVBQUEsR0FBQUEsR0FBQTVULEtBQUFpM0IsUUFDQSxVQUFBckwsTUFBQSwrQkFFQSxHQUFBaFksRUFBQWdNLEVBQUEsRUFDQSxVQUFBZ00sTUFBQSxnREFFQSxHQUFBaE0sRUFBQSxHQUNBLFFBQUE5aEIsRUFBQTA1QixFQUFBLEVBQW1DMTVCLEdBQUEsRUFBUUEsSUFDM0NrQyxLQUFBcUMsSUFBQXVSLEVBQUE5VixFQUFBOGhCLEVBQUE1ZixLQUFBckIsSUFBQWlWLEVBQUE5VixJQUVBLElBQUEyNUIsRUFBQTdqQixFQUFBNGpCLEVBQUE1WCxFQUFBNWYsS0FBQWkzQixRQUNBLEdBQUFRLEVBQUEsRUFFQSxJQURBejNCLEtBQUFpM0IsU0FBQVEsRUFDQXozQixLQUFBaTNCLFFBQUFqM0IsS0FBQSsyQixZQUNBLzJCLEtBQUFpM0IsVUFDQWozQixLQUFBMkgsY0FDQTNILEtBQUF1SCxLQUFBLGVBS0EsSUFBQXpKLEVBQUEsRUFBMkJBLEVBQUEwNUIsRUFBVzE1QixJQUN0Q2tDLEtBQUFxQyxJQUFBdVIsRUFBQTlWLEVBQUE4aEIsRUFBQTVmLEtBQUFyQixJQUFBaVYsRUFBQTlWLE1BSUE4RixFQUFBbEUsVUFBQXkzQixnQkFBQSxTQUFBenRCLEdBQ0EsT0FBQTFKLEtBQUEySCxZQUFBK0IsR0FBQTFKLEtBQUErMkIsWUFFQW56QixFQXBKQSxDQURxQmxHLEVBQVEsR0FzSjVCOEosY0FDRDVKLEVBQUFnRyw2Q0NyS0FwRixPQUFBQyxlQUFBYixFQUFBLGNBQThDbUIsT0FBQSxJQUM5QyxJQUFBZ1MsRUFBZXJULEVBQVEsR0FDdkJtRSxFQUFBLFdBQ0EsU0FBQUEsRUFBQWEsRUFBQUQsRUFBQUQsR0FDQXhDLEtBQUF3QyxXQUFBLEVBQ0F4QyxLQUFBMDNCLE1BQUEsR0FDQWoxQixJQUNBQSxFQUFBLEdBQUFzTyxFQUFBN1AsZUFBQTZQLEVBQUE1UCxnQkFBQTRQLEVBQUEzUCxpQkFFQSxRQUFBdEQsRUFBQSxFQUF1QkEsRUFBQTRFLEVBQVU1RSxJQUNqQ2tDLEtBQUEyM0IsTUFBQWwxQixHQUVBRCxJQUNBeEMsS0FBQXdDLFdBQUEsR0FFQXhDLEtBQUFpQyxPQUFBakMsS0FBQTAzQixNQUFBejFCLE9BdUVBLE9BckVBSixFQUFBbkMsVUFBQWs0QixLQUFBLFdBQ0EsSUFBQXJlLEVBQUF2WixLQUFBMDNCLE1BQUFwekIsTUFFQSxPQURBdEUsS0FBQWlDLE9BQUFqQyxLQUFBMDNCLE1BQUF6MUIsT0FDQXNYLEdBRUExWCxFQUFBbkMsVUFBQWk0QixNQUFBLFNBQUFwZSxHQUNBdlosS0FBQTAzQixNQUFBajBCLEtBQUE4VixHQUNBdlosS0FBQWlDLE9BQUFqQyxLQUFBMDNCLE1BQUF6MUIsUUFFQUosRUFBQW5DLFVBQUFtNEIsUUFBQSxTQUFBamtCLEVBQUF5akIsR0FFQSxJQURBLElBSUFTLEVBSkFSLEVBQUEsR0FDQXJ1QixFQUFBLEVBQXdCQSxFQUFBQyxVQUFBakgsT0FBdUJnSCxJQUMvQ3F1QixFQUFBcnVCLEVBQUEsR0FBQUMsVUFBQUQsR0FHQSxJQUFBOHVCLEdBQUFELEVBQUE5M0IsS0FBQTAzQixPQUFBN3dCLE9BQUFzQyxNQUFBMnVCLEVBQUEsQ0FBQWxrQixFQUFBeWpCLEdBQUFXLE9BQUFWLElBRUEsT0FEQXQzQixLQUFBaUMsT0FBQWpDLEtBQUEwM0IsTUFBQXoxQixPQUNBODFCLEdBRUFsMkIsRUFBQW5DLFVBQUFmLElBQUEsU0FBQStLLEdBQ0EsT0FBQTFKLEtBQUEwM0IsTUFBQWh1QixJQUVBN0gsRUFBQW5DLFVBQUEyQyxJQUFBLFNBQUFxSCxFQUFBNlAsR0FDQXZaLEtBQUEwM0IsTUFBQWh1QixHQUFBNlAsR0FFQTFYLEVBQUFuQyxVQUFBdTRCLFlBQUEsU0FBQTlILEVBQUE1d0IsRUFBQTZFLEdBQ0EsS0FBQTdFLEtBQ0FTLEtBQUE2M0IsUUFBQTFILEVBQUEsRUFBQS9yQixHQUNBcEUsS0FBQTQzQixRQUdBLzFCLEVBQUFuQyxVQUFBdzRCLFlBQUEsU0FBQS9ILEVBQUE1d0IsRUFBQWtELEdBQ0EsS0FBQWxELEtBQ0FTLEtBQUE2M0IsUUFBQTFILEVBQUEsR0FDQW53QixLQUFBMjNCLE1BQUFsMUIsSUFHQVosRUFBQW5DLFVBQUF5NEIsYUFBQSxTQUFBdmtCLEVBQUFDLEVBQUFwUixHQUNBLEtBQUFtUixFQUFBQyxHQUFBRCxFQUFBNVQsS0FBQWlDLFFBQ0FqQyxLQUFBcUMsSUFBQXVSLElBQUFuUixJQUdBWixFQUFBbkMsVUFBQXNFLE9BQUEsU0FBQXRCLEVBQUFELEVBQUEyMUIsR0FFQSxTQURBLElBQUFBLElBQWdDQSxHQUFBLEdBQ2hDcDRCLEtBQUEwM0IsTUFBQXoxQixPQUFBUyxHQUNBMUMsS0FBQTAzQixNQUFBajBCLEtBQUFoQixHQUVBLEdBQUEyMUIsRUFDQSxLQUFBcDRCLEtBQUEwM0IsTUFBQXoxQixPQUFBUyxHQUNBMUMsS0FBQTAzQixNQUFBcHpCLE1BR0F0RSxLQUFBaUMsT0FBQWpDLEtBQUEwM0IsTUFBQXoxQixRQUVBSixFQUFBbkMsVUFBQW9lLEtBQUEsU0FBQXJiLEdBQ0EsUUFBQTNFLEVBQUEsRUFBdUJBLEVBQUFrQyxLQUFBaUMsU0FBaUJuRSxFQUN4Q2tDLEtBQUFxQyxJQUFBdkUsRUFBQTJFLElBR0FaLEVBQUFuQyxVQUFBdXpCLFNBQUEsU0FBQWh1QixHQUNBakYsS0FBQTAzQixNQUFBenlCLEVBQUF5eUIsTUFBQW50QixNQUFBLEdBQ0F2SyxLQUFBaUMsT0FBQWdELEVBQUFoRCxPQUNBakMsS0FBQXdDLFVBQUF5QyxFQUFBekMsV0FFQVgsRUFBQW5DLFVBQUEwcEIsTUFBQSxXQUNBLElBQUFqbkIsRUFBQSxJQUFBTixFQUFBLEdBRUEsT0FEQU0sRUFBQTh3QixTQUFBanpCLE1BQ0FtQyxHQUVBTixFQXBGQSxHQXNGQWpFLEVBQUFpRSxvQkFDQSxJQUFBdzJCLEVBQUEsRUFDQXQyQixFQUFBLFdBQ0EsU0FBQUEsRUFBQVcsRUFBQUQsRUFBQUQsR0FRQSxRQVBBLElBQUFBLElBQW1DQSxHQUFBLEdBQ25DeEMsS0FBQXdDLFlBQ0F4QyxLQUFBMDNCLE1BQUEsS0FDQTEzQixLQUFBczRCLFVBQUEsR0FDQTcxQixJQUNBQSxFQUFBLEdBQUFzTyxFQUFBN1AsZUFBQTZQLEVBQUE1UCxnQkFBQTRQLEVBQUEzUCxpQkFFQXNCLEVBQUEsQ0FDQTFDLEtBQUEwM0IsTUFBQSxJQUFBYSxZQUFBNzFCLEVBQUEyMUIsR0FDQSxRQUFBdjZCLEVBQUEsRUFBMkJBLEVBQUE0RSxJQUFVNUUsRUFDckNrQyxLQUFBcUMsSUFBQXZFLEVBQUEyRSxHQUdBekMsS0FBQWlDLE9BQUFTLEVBNkhBLE9BM0hBWCxFQUFBckMsVUFBQWYsSUFBQSxTQUFBK0ssR0FDQSxJQUFBOHVCLEVBQUF4NEIsS0FBQTAzQixNQUFBaHVCLEVBQUEydUIsRUFBQSxHQUNBLE9BQ0FyNEIsS0FBQTAzQixNQUFBaHVCLEVBQUEydUIsRUFBQSxHQUNBLFdBQUFHLEVBQ0F4NEIsS0FBQXM0QixVQUFBNXVCLEdBQ0EsRUFBQTBXLE9BQUFDLGFBQUFtWSxHQUFBLEdBQ0F4NEIsS0FBQTAzQixNQUFBaHVCLEVBQUEydUIsRUFBQSxHQUNBLFdBQUFHLEVBQ0F4NEIsS0FBQXM0QixVQUFBNXVCLEdBQUEyVSxXQUFBcmUsS0FBQXM0QixVQUFBNXVCLEdBQUF6SCxPQUFBLEdBQ0F1MkIsSUFHQXoyQixFQUFBckMsVUFBQTJDLElBQUEsU0FBQXFILEVBQUEzSyxHQUNBaUIsS0FBQTAzQixNQUFBaHVCLEVBQUEydUIsRUFBQSxHQUFBdDVCLEVBQUEsR0FDQUEsRUFBQSxHQUFBa0QsT0FBQSxHQUNBakMsS0FBQXM0QixVQUFBNXVCLEdBQUEzSyxFQUFBLEdBQ0FpQixLQUFBMDNCLE1BQUFodUIsRUFBQTJ1QixFQUFBLGNBQUEzdUIsR0FHQTFKLEtBQUEwM0IsTUFBQWh1QixFQUFBMnVCLEVBQUEsR0FBQXQ1QixFQUFBLEdBQUFzZixXQUFBLEdBRUFyZSxLQUFBMDNCLE1BQUFodUIsRUFBQTJ1QixFQUFBLEdBQUF0NUIsRUFBQSxJQUVBZ0QsRUFBQXJDLFVBQUF1NEIsWUFBQSxTQUFBOUgsRUFBQTV3QixFQUFBa0QsR0FFQSxHQURBMHRCLEdBQUFud0IsS0FBQWlDLE9BQ0ExQyxFQUFBUyxLQUFBaUMsT0FBQWt1QixFQUFBLENBQ0EsUUFBQXJ5QixFQUFBa0MsS0FBQWlDLE9BQUFrdUIsRUFBQTV3QixFQUFBLEVBQW1EekIsR0FBQSxJQUFRQSxFQUMzRGtDLEtBQUFxQyxJQUFBOHRCLEVBQUE1d0IsRUFBQXpCLEVBQUFrQyxLQUFBckIsSUFBQXd4QixFQUFBcnlCLElBRUEsSUFBQUEsRUFBQSxFQUEyQkEsRUFBQXlCLElBQU96QixFQUNsQ2tDLEtBQUFxQyxJQUFBOHRCLEVBQUFyeUIsRUFBQTJFLFFBSUEsSUFBQTNFLEVBQUFxeUIsRUFBNkJyeUIsRUFBQWtDLEtBQUFpQyxTQUFpQm5FLEVBQzlDa0MsS0FBQXFDLElBQUF2RSxFQUFBMkUsSUFJQVYsRUFBQXJDLFVBQUF3NEIsWUFBQSxTQUFBL0gsRUFBQTV3QixFQUFBa0QsR0FFQSxHQURBMHRCLEdBQUFud0IsS0FBQWlDLE9BQ0ExQyxFQUFBUyxLQUFBaUMsT0FBQWt1QixFQUFBLENBQ0EsUUFBQXJ5QixFQUFBLEVBQTJCQSxFQUFBa0MsS0FBQWlDLE9BQUFrdUIsRUFBQTV3QixJQUEyQnpCLEVBQ3REa0MsS0FBQXFDLElBQUE4dEIsRUFBQXJ5QixFQUFBa0MsS0FBQXJCLElBQUF3eEIsRUFBQTV3QixFQUFBekIsSUFFQSxJQUFBQSxFQUFBa0MsS0FBQWlDLE9BQUExQyxFQUF5Q3pCLEVBQUFrQyxLQUFBaUMsU0FBaUJuRSxFQUMxRGtDLEtBQUFxQyxJQUFBdkUsRUFBQTJFLFFBSUEsSUFBQTNFLEVBQUFxeUIsRUFBNkJyeUIsRUFBQWtDLEtBQUFpQyxTQUFpQm5FLEVBQzlDa0MsS0FBQXFDLElBQUF2RSxFQUFBMkUsSUFJQVYsRUFBQXJDLFVBQUF5NEIsYUFBQSxTQUFBdmtCLEVBQUFDLEVBQUFwUixHQUNBLEtBQUFtUixFQUFBQyxHQUFBRCxFQUFBNVQsS0FBQWlDLFFBQ0FqQyxLQUFBcUMsSUFBQXVSLElBQUFuUixJQUdBVixFQUFBckMsVUFBQXNFLE9BQUEsU0FBQXRCLEVBQUFELEVBQUEyMUIsR0FFQSxRQURBLElBQUFBLElBQWdDQSxHQUFBLEtBQ2hDMTFCLElBQUExQyxLQUFBaUMsU0FBQW0yQixHQUFBMTFCLEVBQUExQyxLQUFBaUMsUUFBQSxDQUdBLEdBQUFTLEVBQUExQyxLQUFBaUMsT0FBQSxDQUNBLElBQUFzWCxFQUFBLElBQUFnZixZQUFBNzFCLEVBQUEyMUIsR0FDQXI0QixLQUFBaUMsU0FDQVMsRUFBQTIxQixFQUFBcjRCLEtBQUEwM0IsTUFBQXoxQixPQUNBc1gsRUFBQWxYLElBQUFyQyxLQUFBMDNCLE1BQUFlLFNBQUEsRUFBQS8xQixFQUFBMjFCLElBR0E5ZSxFQUFBbFgsSUFBQXJDLEtBQUEwM0IsUUFHQTEzQixLQUFBMDNCLE1BQUFuZSxFQUNBLFFBQUF6YixFQUFBa0MsS0FBQWlDLE9BQXFDbkUsRUFBQTRFLElBQVU1RSxFQUMvQ2tDLEtBQUFxQyxJQUFBdkUsRUFBQTJFLFFBR0EsR0FBQTIxQixFQUFBLENBQ0EsR0FBQTExQixHQUNBNlcsRUFBQSxJQUFBZ2YsWUFBQTcxQixFQUFBMjFCLElBQ0FoMkIsSUFBQXJDLEtBQUEwM0IsTUFBQWUsU0FBQSxFQUFBLzFCLEVBQUEyMUIsSUFDQXI0QixLQUFBMDNCLE1BQUFuZSxPQUdBdlosS0FBQTAzQixNQUFBLEtBR0ExM0IsS0FBQWlDLE9BQUFTLElBRUFYLEVBQUFyQyxVQUFBb2UsS0FBQSxTQUFBcmIsR0FDQXpDLEtBQUFzNEIsVUFBQSxHQUNBLFFBQUF4NkIsRUFBQSxFQUF1QkEsRUFBQWtDLEtBQUFpQyxTQUFpQm5FLEVBQ3hDa0MsS0FBQXFDLElBQUF2RSxFQUFBMkUsSUFHQVYsRUFBQXJDLFVBQUF1ekIsU0FBQSxTQUFBaHVCLEdBU0EsUUFBQTBHLEtBUkEzTCxLQUFBaUMsU0FBQWdELEVBQUFoRCxPQUNBakMsS0FBQTAzQixNQUFBLElBQUFhLFlBQUF0ekIsRUFBQXl5QixPQUdBMTNCLEtBQUEwM0IsTUFBQXIxQixJQUFBNEMsRUFBQXl5QixPQUVBMTNCLEtBQUFpQyxPQUFBZ0QsRUFBQWhELE9BQ0FqQyxLQUFBczRCLFVBQUEsR0FDQXJ6QixFQUFBcXpCLFVBQ0F0NEIsS0FBQXM0QixVQUFBM3NCLEdBQUExRyxFQUFBcXpCLFVBQUEzc0IsR0FFQTNMLEtBQUF3QyxVQUFBeUMsRUFBQXpDLFdBRUFULEVBQUFyQyxVQUFBMHBCLE1BQUEsV0FDQSxJQUFBam5CLEVBQUEsSUFBQUosRUFBQSxHQUdBLFFBQUE0SixLQUZBeEosRUFBQXUxQixNQUFBLElBQUFhLFlBQUF2NEIsS0FBQTAzQixPQUNBdjFCLEVBQUFGLE9BQUFqQyxLQUFBaUMsT0FDQWpDLEtBQUFzNEIsVUFDQW4yQixFQUFBbTJCLFVBQUEzc0IsR0FBQTNMLEtBQUFzNEIsVUFBQTNzQixHQUdBLE9BREF4SixFQUFBSyxVQUFBeEMsS0FBQXdDLFVBQ0FMLEdBRUFKLEVBNUlBLEdBOElBbkUsRUFBQW1FLDJDQ3hPQXZELE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBQzlDLElBQUFzd0IsRUFBQSxXQUNBLFNBQUFBLEVBQUFxSixFQUFBdEosRUFBQTl0QixHQUNBdEIsS0FBQTA0QixZQUNBMTRCLEtBQUFvdkIsbUJBQ0FwdkIsS0FBQXNCLFlBQ0F0QixLQUFBMjRCLGNBQUEsRUFDQTM0QixLQUFBNDRCLHVCQUFBLEVBQ0E1NEIsS0FBQTY0QixxQkFBQSxDQUFxQ2psQixNQUFBLEtBQUFDLElBQUEsTUEyR3JDLE9BekdBd2IsRUFBQTN2QixVQUFBd3VCLGlCQUFBLFdBQ0FsdUIsS0FBQTI0QixjQUFBLEVBQ0EzNEIsS0FBQTY0QixxQkFBQWpsQixNQUFBNVQsS0FBQTA0QixVQUFBMzVCLE1BQUFrRCxPQUNBakMsS0FBQW92QixpQkFBQTBKLFlBQUEsR0FDQTk0QixLQUFBb3ZCLGlCQUFBNWMsVUFBQUMsSUFBQSxXQUVBNGMsRUFBQTN2QixVQUFBeXVCLGtCQUFBLFNBQUF0QixHQUNBLElBQUF4bUIsRUFBQXJHLEtBQ0FBLEtBQUFvdkIsaUJBQUEwSixZQUFBak0sRUFBQXRULEtBQ0F2WixLQUFBcXVCLDRCQUNBdkwsV0FBQSxXQUNBemMsRUFBQXd5QixxQkFBQWhsQixJQUFBeE4sRUFBQXF5QixVQUFBMzVCLE1BQUFrRCxRQUNTLElBRVRvdEIsRUFBQTN2QixVQUFBMHVCLGVBQUEsV0FDQXB1QixLQUFBKzRCLHNCQUFBLElBRUExSixFQUFBM3ZCLFVBQUFxMEIsUUFBQSxTQUFBbEgsR0FDQSxHQUFBN3NCLEtBQUEyNEIsY0FBQTM0QixLQUFBNDRCLHNCQUFBLENBQ0EsU0FBQS9MLEVBQUFpQixRQUNBLFNBRUEsUUFBQWpCLEVBQUFpQixTQUFBLEtBQUFqQixFQUFBaUIsU0FBQSxLQUFBakIsRUFBQWlCLFFBQ0EsU0FFQTl0QixLQUFBKzRCLHNCQUFBLEdBRUEsYUFBQWxNLEVBQUFpQixVQUNBOXRCLEtBQUFnNUIsNkJBQ0EsSUFJQTNKLEVBQUEzdkIsVUFBQXE1QixxQkFBQSxTQUFBRSxHQUNBLElBQUE1eUIsRUFBQXJHLEtBSUEsR0FIQUEsS0FBQW92QixpQkFBQTVjLFVBQUEwYSxPQUFBLFVBQ0FsdEIsS0FBQTI0QixjQUFBLEVBQ0EzNEIsS0FBQWs1Qix5QkFDQUQsRUFLQSxDQUNBLElBQUFFLEVBQUEsQ0FDQXZsQixNQUFBNVQsS0FBQTY0QixxQkFBQWpsQixNQUNBQyxJQUFBN1QsS0FBQTY0QixxQkFBQWhsQixLQUVBN1QsS0FBQTQ0Qix1QkFBQSxFQUNBOVYsV0FBQSxXQUNBLEdBQUF6YyxFQUFBdXlCLHNCQUFBLENBQ0F2eUIsRUFBQXV5Qix1QkFBQSxFQUNBLElBQUFRLE9BQUEsRUFFQUEsRUFEQS95QixFQUFBc3lCLGFBQ0F0eUIsRUFBQXF5QixVQUFBMzVCLE1BQUE2RyxVQUFBdXpCLEVBQUF2bEIsTUFBQXVsQixFQUFBdGxCLEtBR0F4TixFQUFBcXlCLFVBQUEzNUIsTUFBQTZHLFVBQUF1ekIsRUFBQXZsQixPQUVBdk4sRUFBQS9FLFVBQUFxSCxRQUFBeXdCLEtBRWEsT0F2QmIsQ0FDQXA1QixLQUFBNDRCLHVCQUFBLEVBQ0EsSUFBQVEsRUFBQXA1QixLQUFBMDRCLFVBQUEzNUIsTUFBQTZHLFVBQUE1RixLQUFBNjRCLHFCQUFBamxCLE1BQUE1VCxLQUFBNjRCLHFCQUFBaGxCLEtBQ0E3VCxLQUFBc0IsVUFBQXFILFFBQUF5d0IsS0F1QkEvSixFQUFBM3ZCLFVBQUFzNUIsMEJBQUEsV0FDQSxJQUFBM3lCLEVBQUFyRyxLQUNBcTVCLEVBQUFyNUIsS0FBQTA0QixVQUFBMzVCLE1BQ0ErakIsV0FBQSxXQUNBLElBQUF6YyxFQUFBc3lCLGFBQUEsQ0FDQSxJQUNBNUMsRUFEQTF2QixFQUFBcXlCLFVBQUEzNUIsTUFDQXU2QixRQUFBRCxFQUFBLElBQ0F0RCxFQUFBOXpCLE9BQUEsR0FDQW9FLEVBQUEvRSxVQUFBcUgsUUFBQW90QixLQUdTLElBRVQxRyxFQUFBM3ZCLFVBQUEydUIsMEJBQUEsU0FBQWtMLEdBQ0EsSUFBQWx6QixFQUFBckcsS0FDQSxHQUFBQSxLQUFBMjRCLGFBQUEsQ0FHQSxHQUFBMzRCLEtBQUFzQixVQUFBMHFCLE9BQUF3TixtQkFBQSxDQUNBLElBQUF0WixFQUFBemIsS0FBQXFnQixLQUFBOWtCLEtBQUFzQixVQUFBbWlCLFlBQUEzTyxPQUFBOVUsS0FBQXNCLFVBQUE4QixRQUFBa2xCLFlBQ0FtUixFQUFBejVCLEtBQUFzQixVQUFBMHFCLE9BQUFocEIsRUFBQWtkLEVBQ0F3WixFQUFBMTVCLEtBQUFzQixVQUFBMHFCLE9BQUFyb0IsRUFBQTNELEtBQUFzQixVQUFBbWlCLFlBQUE3TyxNQUNBNVUsS0FBQW92QixpQkFBQTFjLE1BQUFpbkIsS0FBQUQsRUFBQSxLQUNBMTVCLEtBQUFvdkIsaUJBQUExYyxNQUFBa25CLElBQUFILEVBQUEsS0FDQXo1QixLQUFBb3ZCLGlCQUFBMWMsTUFBQW9DLE9BQUFvTCxFQUFBLEtBQ0FsZ0IsS0FBQW92QixpQkFBQTFjLE1BQUE0VixXQUFBcEksRUFBQSxLQUNBLElBQUEyWixFQUFBNzVCLEtBQUFvdkIsaUJBQUEwSyx3QkFDQTk1QixLQUFBMDRCLFVBQUFobUIsTUFBQWluQixLQUFBRCxFQUFBLEtBQ0ExNUIsS0FBQTA0QixVQUFBaG1CLE1BQUFrbkIsSUFBQUgsRUFBQSxLQUNBejVCLEtBQUEwNEIsVUFBQWhtQixNQUFBa0MsTUFBQWlsQixFQUFBamxCLE1BQUEsS0FDQTVVLEtBQUEwNEIsVUFBQWhtQixNQUFBb0MsT0FBQStrQixFQUFBL2tCLE9BQUEsS0FDQTlVLEtBQUEwNEIsVUFBQWhtQixNQUFBNFYsV0FBQXVSLEVBQUEva0IsT0FBQSxLQUVBeWtCLEdBQ0F6VyxXQUFBLFdBQW9DLE9BQUF6YyxFQUFBZ29CLDJCQUFBLElBQWdELEtBR3BGZ0IsRUFBQTN2QixVQUFBdzVCLHVCQUFBLFdBQ0FsNUIsS0FBQTA0QixVQUFBaG1CLE1BQUFpbkIsS0FBQSxHQUNBMzVCLEtBQUEwNEIsVUFBQWhtQixNQUFBa25CLElBQUEsSUFFQXZLLEVBbEhBLEdBb0hBenhCLEVBQUF5eEIsa0RDckhBLElBQ0F2dkIsRUFEQUMsRUFBQUMsV0FBQUQsWUFDQUQsRUFBQSxTQUFBMUIsRUFBQTZCLEdBSUEsT0FIQUgsRUFBQXRCLE9BQUEwQixnQkFDQSxDQUFjQyxVQUFBLGNBQWdCQyxPQUFBLFNBQUFoQyxFQUFBNkIsR0FBc0M3QixFQUFBK0IsVUFBQUYsSUFDcEUsU0FBQTdCLEVBQUE2QixHQUE2QixRQUFBTCxLQUFBSyxJQUFBTixlQUFBQyxLQUFBeEIsRUFBQXdCLEdBQUFLLEVBQUFMLE1BQzdCeEIsRUFBQTZCLElBRUEsU0FBQTdCLEVBQUE2QixHQUVBLFNBQUFJLElBQXVCTCxLQUFBTSxZQUFBbEMsRUFEdkIwQixFQUFBMUIsRUFBQTZCLEdBRUE3QixFQUFBc0IsVUFBQSxPQUFBTyxFQUFBekIsT0FBQVksT0FBQWEsSUFBQUksRUFBQVgsVUFBQU8sRUFBQVAsVUFBQSxJQUFBVyxLQUdBN0IsT0FBQUMsZUFBQWIsRUFBQSxjQUE4Q21CLE9BQUEsSUFDOUMsSUFBQXFpQixFQUFrQjFqQixFQUFRLEdBQzFCMmpCLEVBQWtCM2pCLEVBQVEsR0FDMUJxOEIsRUFBQSxHQUNBeEssRUFBQSxTQUFBcG9CLEdBRUEsU0FBQW9vQixFQUFBanVCLEVBQUF5dEIsRUFBQWlMLEVBQUFDLEdBQ0EsSUFBQTV6QixFQUFBYyxFQUFBbEosS0FBQStCLFlBaUJBLE9BaEJBcUcsRUFBQS9FLFlBQ0ErRSxFQUFBMG9CLG1CQUNBMW9CLEVBQUEyekIsY0FDQTN6QixFQUFBNHpCLGVBQ0E1ekIsRUFBQXlmLGVBQUEsRUFDQXpmLEVBQUE2ekIsa0JBQUEsRUFDQTd6QixFQUFBOHpCLDBCQUFBLEVBQ0E5ekIsRUFBQSt6Qiw0QkFBQSxFQUNBL3pCLEVBQUFnMEIsMEJBQUEsRUFDQWgwQixFQUFBaTBCLGVBQUEsRUFDQWowQixFQUFBazBCLG9CQUFBLEVBQ0FsMEIsRUFBQW0wQix1QkFBQSxLQUNBbjBCLEVBQUFvMEIsd0JBQUEsRUFDQXAwQixFQUFBeWYsZUFBQXpmLEVBQUEwb0IsaUJBQUEyTCxZQUFBcjBCLEVBQUEyekIsWUFBQVUsYUFBQVgsRUFDQTF6QixFQUFBRyxTQUFBNmEsRUFBQWhWLHlCQUFBaEcsRUFBQTBvQixpQkFBQSxTQUFBMW9CLEVBQUFzMEIsVUFBQXI3QixLQUFBK0csS0FDQXljLFdBQUEsV0FBZ0MsT0FBQXpjLEVBQUFrbUIsa0JBQWlDLEdBQ2pFbG1CLEVBa0hBLE9BcklBdEcsRUFBQXd2QixFQUFBcG9CLEdBcUJBb29CLEVBQUE3dkIsVUFBQXFVLGVBQUEsU0FBQWhLLEdBQ0EvSixLQUFBK3VCLGlCQUFBcmMsTUFBQWtvQixnQkFBQTd3QixFQUFBRyxXQUFBeUwsS0FFQTRaLEVBQUE3dkIsVUFBQW03QixTQUFBLFdBQ0EsSUFBQXgwQixFQUFBckcsS0FDQSxPQUFBQSxLQUFBdzZCLHlCQUNBeDZCLEtBQUF3NkIsdUJBQUEvZixzQkFBQSxXQUE2RSxPQUFBcFUsRUFBQXFVLG9CQUc3RTZVLEVBQUE3dkIsVUFBQWdiLGNBQUEsV0FDQSxHQUFBMWEsS0FBQWk2QixhQUFBbmxCLE9BQUEsR0FDQTlVLEtBQUFrNkIsa0JBQUFsNkIsS0FBQXNCLFVBQUEwaUIsU0FBQWUsV0FBQXRRLGlCQUFBL0osT0FBQUQsaUJBQ0F6SyxLQUFBbzZCLDRCQUFBcDZCLEtBQUErdUIsaUJBQUErTCxhQUNBLElBQUFDLEVBQUF0MkIsS0FBQXUyQixNQUFBaDdCLEtBQUFrNkIsa0JBQUFsNkIsS0FBQW02Qiw0QkFBQW42QixLQUFBbzZCLDRCQUFBcDZCLEtBQUFzQixVQUFBMGlCLFNBQUFlLFdBQUE5UCxjQUNBalYsS0FBQXE2Qiw0QkFBQVUsSUFDQS82QixLQUFBcTZCLDBCQUFBVSxFQUNBLzZCLEtBQUFnNkIsWUFBQXRuQixNQUFBb0MsT0FBQTlVLEtBQUFxNkIsMEJBQUEsTUFHQSxJQUFBeDJCLEVBQUE3RCxLQUFBc0IsVUFBQTBxQixPQUFBL29CLE1BQUFqRCxLQUFBazZCLGtCQUNBbDZCLEtBQUErdUIsaUJBQUFsckIsZ0JBQ0E3RCxLQUFBeTZCLHdCQUFBLEVBQ0F6NkIsS0FBQSt1QixpQkFBQWxyQixhQUVBN0QsS0FBQXc2Qix1QkFBQSxNQUVBakwsRUFBQTd2QixVQUFBNnNCLGVBQUEsV0FDQSxHQUFBdnNCLEtBQUFtNkIsNEJBQUFuNkIsS0FBQXNCLFVBQUEwcUIsT0FBQWhxQixNQUFBQyxPQUdBLE9BRkFqQyxLQUFBbTZCLDBCQUFBbjZCLEtBQUFzQixVQUFBMHFCLE9BQUFocUIsTUFBQUMsWUFDQWpDLEtBQUE2NkIsV0FHQSxHQUFBNzZCLEtBQUFvNkIsOEJBQUFwNkIsS0FBQXNCLFVBQUEwaUIsU0FBQWUsV0FBQTlQLGFBQUEsQ0FJQSxJQUFBZ21CLEVBQUFqN0IsS0FBQXNCLFVBQUEwcUIsT0FBQS9vQixNQUFBakQsS0FBQWs2QixrQkFDQWw2QixLQUFBczZCLGlCQUFBVyxHQUlBajdCLEtBQUFzNkIsaUJBQUF0NkIsS0FBQSt1QixpQkFBQWxyQixXQUlBN0QsS0FBQXNCLFVBQUEwaUIsU0FBQWUsV0FBQXRRLGlCQUFBL0osT0FBQUQsbUJBQUF6SyxLQUFBazZCLG1CQVBBbDZCLEtBQUE2NkIsZ0JBTEE3NkIsS0FBQTY2QixZQWlCQXRMLEVBQUE3dkIsVUFBQWk3QixVQUFBLFNBQUE5TixHQUVBLEdBREE3c0IsS0FBQXM2QixlQUFBdDZCLEtBQUErdUIsaUJBQUFsckIsVUFDQTdELEtBQUErdUIsaUJBQUF6SyxhQUdBLEdBQUF0a0IsS0FBQXk2Qix1QkFDQXo2QixLQUFBeTZCLHdCQUFBLE1BREEsQ0FJQSxJQUNBMUUsRUFEQXR4QixLQUFBdTJCLE1BQUFoN0IsS0FBQXM2QixlQUFBdDZCLEtBQUFrNkIsbUJBQ0FsNkIsS0FBQXNCLFVBQUEwcUIsT0FBQS9vQixNQUNBakQsS0FBQXNCLFVBQUFvYixZQUFBcVosR0FBQSxLQUVBeEcsRUFBQTd2QixVQUFBMHlCLFFBQUEsU0FBQXZGLEdBQ0EsSUFBQW5tQixFQUFBMUcsS0FBQWs3QixtQkFBQXJPLEdBQ0EsSUFBQW5tQixJQUdBMUcsS0FBQSt1QixpQkFBQWxyQixXQUFBNkMsRUFDQW1tQixFQUFBM0osbUJBRUFxTSxFQUFBN3ZCLFVBQUF3N0IsbUJBQUEsU0FBQXJPLEdBQ0EsT0FBQUEsRUFBQThELE9BQ0EsU0FFQSxJQUFBanFCLEVBQUFtbUIsRUFBQThELE9BT0EsT0FOQTlELEVBQUFzTyxZQUFBQyxXQUFBQyxlQUNBMzBCLEdBQUExRyxLQUFBazZCLGtCQUVBck4sRUFBQXNPLFlBQUFDLFdBQUFFLGlCQUNBNTBCLEdBQUExRyxLQUFBazZCLGtCQUFBbDZCLEtBQUFzQixVQUFBc0IsTUFFQThELEdBRUE2b0IsRUFBQTd2QixVQUFBdXlCLGlCQUFBLFNBQUFwRixHQUNBLE9BQUFBLEVBQUE4RCxPQUNBLFNBRUEsSUFBQWpxQixFQUFBbW1CLEVBQUE4RCxPQVVBLE9BVEE5RCxFQUFBc08sWUFBQUMsV0FBQUcsaUJBQ0E3MEIsR0FBQTFHLEtBQUFrNkIsa0JBQUEsRUFDQWw2QixLQUFBdTZCLHFCQUFBN3pCLEVBQ0FBLEVBQUFqQyxLQUFBc2hCLE1BQUF0aEIsS0FBQTB0QixJQUFBbnlCLEtBQUF1NkIsdUJBQUF2NkIsS0FBQXU2QixvQkFBQSxRQUNBdjZCLEtBQUF1NkIscUJBQUEsR0FFQTFOLEVBQUFzTyxZQUFBQyxXQUFBRSxpQkFDQTUwQixHQUFBMUcsS0FBQXNCLFVBQUFzQixNQUVBOEQsR0FFQTZvQixFQUFBN3ZCLFVBQUEyeUIsYUFBQSxTQUFBeEYsR0FDQTdzQixLQUFBdzdCLFlBQUEzTyxFQUFBNE8sUUFBQSxHQUFBaFosT0FFQThNLEVBQUE3dkIsVUFBQTR5QixZQUFBLFNBQUF6RixHQUNBLElBQUE4RCxFQUFBM3dCLEtBQUF3N0IsWUFBQTNPLEVBQUE0TyxRQUFBLEdBQUFoWixNQUNBemlCLEtBQUF3N0IsWUFBQTNPLEVBQUE0TyxRQUFBLEdBQUFoWixNQUNBLElBQUFrTyxJQUdBM3dCLEtBQUErdUIsaUJBQUFsckIsV0FBQThzQixFQUNBOUQsRUFBQTNKLG1CQUVBcU0sRUF0SUEsQ0F1SUNuTyxFQUFBL1gsWUFDRHpMLEVBQUEyeEIseUNDeEpBLFNBQUFtTSxFQUFBOUwsR0FDQSxPQUFBQSxFQUFBMEosUUFBQSxlQUdBLFNBQUFxQyxFQUFBL0wsRUFBQTNGLEdBQ0EsT0FBQUEsRUFDQSxTQUFBMkYsRUFBQSxTQUVBQSxFQXNDQSxTQUFBbEMsRUFBQWIsRUFBQTFSLEdBQ0FBLEVBQUF6SSxNQUFBa3BCLFNBQUEsUUFDQXpnQixFQUFBekksTUFBQWtDLE1BQUEsT0FDQXVHLEVBQUF6SSxNQUFBb0MsT0FBQSxPQUNBcUcsRUFBQXpJLE1BQUFpbkIsS0FBQTlNLEVBQUFnUCxRQUFBLFFBQ0ExZ0IsRUFBQXpJLE1BQUFrbkIsSUFBQS9NLEVBQUFpUCxRQUFBLFFBQ0EzZ0IsRUFBQXpJLE1BQUF0QixPQUFBLE9BQ0ErSixFQUFBRSxRQUNBeUgsV0FBQSxXQUNBM0gsRUFBQXpJLE1BQUFrcEIsU0FBQSxLQUNBemdCLEVBQUF6SSxNQUFBa0MsTUFBQSxLQUNBdUcsRUFBQXpJLE1BQUFvQyxPQUFBLEtBQ0FxRyxFQUFBekksTUFBQWluQixLQUFBLEtBQ0F4ZSxFQUFBekksTUFBQWtuQixJQUFBLEtBQ0F6ZSxFQUFBekksTUFBQXRCLE9BQUEsTUFDSyxLQTlETDVTLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBSTlDbkIsRUFBQTg5Qix5QkFPQTk5QixFQUFBKzlCLHNCQVVBLzlCLEVBQUF5dkIsWUFUQSxTQUFBUixFQUFBekgsRUFBQTJGLEdBQ0EzRixFQUFBOEQsUUFBQW5kLE9BQ0FyQixPQUFBcXhCLGNBQUFDLFFBQUEsT0FBQWpSLEVBQUErSSxlQUdBakgsRUFBQWtQLGNBQUFDLFFBQUEsYUFBQWpSLEVBQUErSSxlQUVBakgsRUFBQTNKLGtCQTJCQXRsQixFQUFBMnZCLGFBeEJBLFNBQUFWLEVBQUF6SCxHQUNBeUgsRUFBQTJJLGtCQUVBLElBQUF5RyxFQUFBLFNBQUFyTSxHQUVBQSxFQUFBK0wsRUFEQS9MLEVBQUE4TCxFQUFBOUwsR0FDQXhLLEVBQUE2RSxvQkFDQTdFLEVBQUF6YyxRQUFBaW5CLEdBQ0F4SyxFQUFBakssU0FBQXBjLE1BQUEsR0FDQXFtQixFQUFBN2QsS0FBQSxRQUFBcW9CLEdBQ0F4SyxFQUFBeU0sT0FBQWhGLElBRUF6SCxFQUFBOEQsUUFBQW5kLE9BQ0FyQixPQUFBcXhCLGVBRUFFLEVBREF2eEIsT0FBQXF4QixjQUFBRyxRQUFBLFNBS0FyUCxFQUFBa1AsZUFFQUUsRUFEQXBQLEVBQUFrUCxjQUFBRyxRQUFBLGdCQXVCQXQrQixFQUFBOHZCLCtCQVNBOXZCLEVBQUE2dkIsa0JBUkEsU0FBQVosRUFBQTFSLEVBQUE0UCxFQUFBb1IsR0FDQXpPLEVBQUFiLEVBQUExUixHQUNBZ2hCLElBQUFwUixFQUFBcVIsbUJBQUF2UCxJQUNBOUIsRUFBQXNSLG1CQUFBeFAsR0FFQTFSLEVBQUFwYyxNQUFBZ3NCLEVBQUErSSxjQUNBM1ksRUFBQTBVLHdDQ3ZFQSxJQUNBL3ZCLEVBREFDLEVBQUFDLFdBQUFELFlBQ0FELEVBQUEsU0FBQTFCLEVBQUE2QixHQUlBLE9BSEFILEVBQUF0QixPQUFBMEIsZ0JBQ0EsQ0FBY0MsVUFBQSxjQUFnQkMsT0FBQSxTQUFBaEMsRUFBQTZCLEdBQXNDN0IsRUFBQStCLFVBQUFGLElBQ3BFLFNBQUE3QixFQUFBNkIsR0FBNkIsUUFBQUwsS0FBQUssSUFBQU4sZUFBQUMsS0FBQXhCLEVBQUF3QixHQUFBSyxFQUFBTCxNQUM3QnhCLEVBQUE2QixJQUVBLFNBQUE3QixFQUFBNkIsR0FFQSxTQUFBSSxJQUF1QkwsS0FBQU0sWUFBQWxDLEVBRHZCMEIsRUFBQTFCLEVBQUE2QixHQUVBN0IsRUFBQXNCLFVBQUEsT0FBQU8sRUFBQXpCLE9BQUFZLE9BQUFhLElBQUFJLEVBQUFYLFVBQUFPLEVBQUFQLFVBQUEsSUFBQVcsS0FHQTdCLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBQzlDLElBQUE4bkIsRUFBd0JucEIsRUFBUSxHQUNoQzQrQixFQUFpQjUrQixFQUFRLElBQ3pCcVQsRUFBZXJULEVBQVEsR0FDdkI2K0IsRUFBa0I3K0IsRUFBUSxJQUMxQjgrQixFQUE2QjkrQixFQUFRLElBQ3JDMGpCLEVBQWtCMWpCLEVBQVEsR0FDMUIrK0IsRUFBQSxDQUFjQyxJQUFBLEVBQUFDLElBQUEsRUFBQUMsSUFBQSxFQUFBQyxJQUFBLEVBQUFDLElBQUEsRUFBQUMsSUFBQSxHQUNkQyxFQUFBLFdBQ0EsU0FBQUEsRUFBQTE3QixHQUNBdEIsS0FBQXNCLFlBV0EsT0FUQTA3QixFQUFBdDlCLFVBQUF1OUIsS0FBQSxTQUFBQyxFQUFBM1MsRUFBQTRTLEdBQ0FuOUIsS0FBQTAzQixNQUFBLElBRUFzRixFQUFBdDlCLFVBQUEwOUIsSUFBQSxTQUFBN2pCLEVBQUEzRixFQUFBQyxHQUNBN1QsS0FBQTAzQixPQUFBbmUsRUFBQTNULFVBQUFnTyxFQUFBQyxJQUVBbXBCLEVBQUF0OUIsVUFBQTI5QixPQUFBLFdBQ0FyOUIsS0FBQXNCLFVBQUFxSCxRQUFBa2UsRUFBQW5hLEdBQUE0QixJQUFBLE9BQUF0TyxLQUFBMDNCLE1BQUE3USxFQUFBbmEsR0FBQTRCLElBQUEsT0FFQTB1QixFQWJBLEdBZUFNLEVBQUEsV0FDQSxTQUFBQSxFQUFBaDhCLEdBQ0F0QixLQUFBc0IsWUE4QkEsT0E1QkFnOEIsRUFBQTU5QixVQUFBdTlCLEtBQUEsU0FBQUMsRUFBQTNTLEVBQUE0UyxHQUNBbjlCLEtBQUEwM0IsTUFBQSxJQUVBNEYsRUFBQTU5QixVQUFBMDlCLElBQUEsU0FBQTdqQixFQUFBM0YsRUFBQUMsR0FDQTdULEtBQUEwM0IsT0FBQW5lLEVBQUEzVCxVQUFBZ08sRUFBQUMsSUFFQXlwQixFQUFBNTlCLFVBQUEyOUIsT0FBQSxXQUNBLE9BQUFyOUIsS0FBQTAzQixPQUNBLFNBQ0EsT0FBQTEzQixLQUFBc0IsVUFBQXFILFFBQUFrZSxFQUFBbmEsR0FBQTRCLElBQUEsVUFBQXVZLEVBQUFuYSxHQUFBNEIsSUFBQSxNQUNBLFNBQ0EsT0FBQXRPLEtBQUFzQixVQUFBcUgsUUFBQWtlLEVBQUFuYSxHQUFBNEIsSUFBQSxXQUFBdVksRUFBQW5hLEdBQUE0QixJQUFBLE1BQ0EsUUFDQSxJQUFBaXZCLEVBQUF2OUIsS0FBQXNCLFVBQUEwcUIsT0FBQW5vQixVQUFBLEVBQ0EsS0FBc0I3RCxLQUFBc0IsVUFBQTBxQixPQUFBbG9CLGFBQUEsT0FDdEIsT0FBQTlELEtBQUFzQixVQUFBcUgsUUFBQWtlLEVBQUFuYSxHQUFBNEIsSUFBQSxPQUFBaXZCLEVBQUExVyxFQUFBbmEsR0FBQTRCLElBQUEsTUFDQSxRQUNBLE9BQUF0TyxLQUFBc0IsVUFBQXFILFFBQUFrZSxFQUFBbmEsR0FBQTRCLElBQUEsU0FBQXVZLEVBQUFuYSxHQUFBNEIsSUFBQSxNQUNBLFNBQ0EsSUFDQW9FLEVBREEsQ0FBOEI4cUIsTUFBQSxFQUFBQyxVQUFBLEVBQUFDLElBQUEsR0FDOUIxOUIsS0FBQXNCLFVBQUEyYixVQUFBLGdCQUVBLE9BREF2SyxHQUFBMVMsS0FBQXNCLFVBQUEyYixVQUFBLGVBQ0FqZCxLQUFBc0IsVUFBQXFILFFBQUFrZSxFQUFBbmEsR0FBQTRCLElBQUEsT0FBQW9FLEVBQUEsS0FBQW1VLEVBQUFuYSxHQUFBNEIsSUFBQSxNQUNBLFFBQ0F0TyxLQUFBc0IsVUFBQXVxQixNQUFBLG9CQUFBN3JCLEtBQUEwM0IsT0FDQTEzQixLQUFBc0IsVUFBQXFILFFBQUFrZSxFQUFBbmEsR0FBQTRCLElBQUEsT0FBQXRPLEtBQUEwM0IsTUFBQTdRLEVBQUFuYSxHQUFBNEIsSUFBQSxRQUdBZ3ZCLEVBaENBLEdBa0NBeFMsRUFBQSxTQUFBM2pCLEdBRUEsU0FBQTJqQixFQUFBeHBCLEVBQUFxOEIsUUFDQSxJQUFBQSxJQUFpQ0EsRUFBQSxJQUFBbkIsRUFBQW9CLHNCQUNqQyxJQUFBdjNCLEVBQUFjLEVBQUFsSixLQUFBK0IsWUFDQXFHLEVBQUEvRSxZQUNBK0UsRUFBQXMzQixVQUNBdDNCLEVBQUFHLFNBQUFILEVBQUFzM0IsU0FDQXQzQixFQUFBdzNCLGdCQUFBLEdBQ0F4M0IsRUFBQXMzQixRQUFBRyxzQkFBQSxTQUFBWixFQUFBM1MsRUFBQTRTLEdBQ0E5MkIsRUFBQS9FLFVBQUF1cUIsTUFBQSxzQkFBeURxUixVQUFBM1MsU0FBQTRTLEtBQUEvYyxPQUFBQyxhQUFBOGMsT0FFekQ5MkIsRUFBQXMzQixRQUFBSSxzQkFBQSxTQUFBYixFQUFBQyxHQUNBOTJCLEVBQUEvRSxVQUFBdXFCLE1BQUEsc0JBQXlEcVIsVUFBQUMsS0FBQS9jLE9BQUFDLGFBQUE4YyxPQUV6RDkyQixFQUFBczNCLFFBQUFLLDBCQUFBLFNBQUFqc0IsR0FDQTFMLEVBQUEvRSxVQUFBdXFCLE1BQUEsMEJBQTZEOVosV0FFN0QxTCxFQUFBczNCLFFBQUFNLHNCQUFBLFNBQUFDLEVBQUEza0IsR0FDQWxULEVBQUEvRSxVQUFBdXFCLE1BQUEsc0JBQXlEcVMsYUFBQTNrQixXQUV6RGxULEVBQUFzM0IsUUFBQVEsZ0JBQUEsU0FBQTVrQixFQUFBM0YsRUFBQUMsR0FBbUUsT0FBQXhOLEVBQUErM0IsTUFBQTdrQixFQUFBM0YsRUFBQUMsS0FDbkV4TixFQUFBczNCLFFBQUFVLGNBQUEsYUFBQTlULEVBQUEyUyxHQUFxRSxPQUFBNzJCLEVBQUFpNEIsWUFBQS9ULEtBQ3JFbGtCLEVBQUFzM0IsUUFBQVUsY0FBQSxhQUFBOVQsRUFBQTJTLEdBQXFFLE9BQUE3MkIsRUFBQWs0QixTQUFBaFUsS0FDckVsa0IsRUFBQXMzQixRQUFBVSxjQUFBLGFBQUE5VCxFQUFBMlMsR0FBcUUsT0FBQTcyQixFQUFBbTRCLFdBQUFqVSxLQUNyRWxrQixFQUFBczNCLFFBQUFVLGNBQUEsYUFBQTlULEVBQUEyUyxHQUFxRSxPQUFBNzJCLEVBQUFvNEIsY0FBQWxVLEtBQ3JFbGtCLEVBQUFzM0IsUUFBQVUsY0FBQSxhQUFBOVQsRUFBQTJTLEdBQXFFLE9BQUE3MkIsRUFBQXE0QixlQUFBblUsS0FDckVsa0IsRUFBQXMzQixRQUFBVSxjQUFBLGFBQUE5VCxFQUFBMlMsR0FBcUUsT0FBQTcyQixFQUFBczRCLGVBQUFwVSxLQUNyRWxrQixFQUFBczNCLFFBQUFVLGNBQUEsYUFBQTlULEVBQUEyUyxHQUFxRSxPQUFBNzJCLEVBQUF1NEIsb0JBQUFyVSxLQUNyRWxrQixFQUFBczNCLFFBQUFVLGNBQUEsYUFBQTlULEVBQUEyUyxHQUFxRSxPQUFBNzJCLEVBQUF3NEIsbUJBQUF0VSxLQUNyRWxrQixFQUFBczNCLFFBQUFVLGNBQUEsYUFBQTlULEVBQUEyUyxHQUFxRSxPQUFBNzJCLEVBQUF5NEIsZUFBQXZVLEtBQ3JFbGtCLEVBQUFzM0IsUUFBQVUsY0FBQSxhQUFBOVQsRUFBQTJTLEdBQXFFLE9BQUE3MkIsRUFBQTA0QixpQkFBQXhVLEtBQ3JFbGtCLEVBQUFzM0IsUUFBQVUsY0FBQSxhQUFBOVQsRUFBQTJTLEdBQXFFLE9BQUE3MkIsRUFBQTI0QixlQUFBelUsS0FDckVsa0IsRUFBQXMzQixRQUFBVSxjQUFBLGFBQUE5VCxFQUFBMlMsR0FBcUUsT0FBQTcyQixFQUFBNDRCLFlBQUExVSxLQUNyRWxrQixFQUFBczNCLFFBQUFVLGNBQUEsYUFBQTlULEVBQUEyUyxHQUFxRSxPQUFBNzJCLEVBQUE2NEIsWUFBQTNVLEtBQ3JFbGtCLEVBQUFzM0IsUUFBQVUsY0FBQSxhQUFBOVQsRUFBQTJTLEdBQXFFLE9BQUE3MkIsRUFBQTg0QixZQUFBNVUsS0FDckVsa0IsRUFBQXMzQixRQUFBVSxjQUFBLGFBQUE5VCxFQUFBMlMsR0FBcUUsT0FBQTcyQixFQUFBKzRCLFlBQUE3VSxLQUNyRWxrQixFQUFBczNCLFFBQUFVLGNBQUEsYUFBQTlULEVBQUEyUyxHQUFxRSxPQUFBNzJCLEVBQUFnNUIsU0FBQTlVLEtBQ3JFbGtCLEVBQUFzM0IsUUFBQVUsY0FBQSxhQUFBOVQsRUFBQTJTLEdBQXFFLE9BQUE3MkIsRUFBQWk1QixXQUFBL1UsRUFBQTJTLEtBQ3JFNzJCLEVBQUFzM0IsUUFBQVUsY0FBQSxhQUFBOVQsRUFBQTJTLEdBQXFFLE9BQUE3MkIsRUFBQWs1QixXQUFBaFYsS0FDckVsa0IsRUFBQXMzQixRQUFBVSxjQUFBLGFBQUE5VCxFQUFBMlMsR0FBcUUsT0FBQTcyQixFQUFBbTVCLGtCQUFBalYsS0FDckVsa0IsRUFBQXMzQixRQUFBVSxjQUFBLGFBQUE5VCxFQUFBMlMsR0FBcUUsT0FBQTcyQixFQUFBbzVCLGdCQUFBbFYsS0FDckVsa0IsRUFBQXMzQixRQUFBVSxjQUFBLGFBQUE5VCxFQUFBMlMsR0FBcUUsT0FBQTcyQixFQUFBcTVCLGtCQUFBblYsS0FDckVsa0IsRUFBQXMzQixRQUFBVSxjQUFBLGFBQUE5VCxFQUFBMlMsR0FBcUUsT0FBQTcyQixFQUFBczVCLHlCQUFBcFYsS0FDckVsa0IsRUFBQXMzQixRQUFBVSxjQUFBLGFBQUE5VCxFQUFBMlMsR0FBcUUsT0FBQTcyQixFQUFBdTVCLHFCQUFBclYsRUFBQTJTLEtBQ3JFNzJCLEVBQUFzM0IsUUFBQVUsY0FBQSxhQUFBOVQsRUFBQTJTLEdBQXFFLE9BQUE3MkIsRUFBQXc1QixnQkFBQXRWLEtBQ3JFbGtCLEVBQUFzM0IsUUFBQVUsY0FBQSxhQUFBOVQsRUFBQTJTLEdBQXFFLE9BQUE3MkIsRUFBQXk1QixrQkFBQXZWLEtBQ3JFbGtCLEVBQUFzM0IsUUFBQVUsY0FBQSxhQUFBOVQsRUFBQTJTLEdBQXFFLE9BQUE3MkIsRUFBQTA1QixXQUFBeFYsS0FDckVsa0IsRUFBQXMzQixRQUFBVSxjQUFBLGFBQUE5VCxFQUFBMlMsR0FBcUUsT0FBQTcyQixFQUFBMjVCLFNBQUF6VixLQUNyRWxrQixFQUFBczNCLFFBQUFVLGNBQUEsYUFBQTlULEVBQUEyUyxHQUFxRSxPQUFBNzJCLEVBQUE0NUIsUUFBQTFWLEVBQUEyUyxLQUNyRTcyQixFQUFBczNCLFFBQUFVLGNBQUEsYUFBQTlULEVBQUEyUyxHQUFxRSxPQUFBNzJCLEVBQUE2NUIsVUFBQTNWLEVBQUEyUyxLQUNyRTcyQixFQUFBczNCLFFBQUFVLGNBQUEsYUFBQTlULEVBQUEyUyxHQUFxRSxPQUFBNzJCLEVBQUE4NUIsZUFBQTVWLEtBQ3JFbGtCLEVBQUFzM0IsUUFBQVUsY0FBQSxhQUFBOVQsRUFBQTJTLEdBQXFFLE9BQUE3MkIsRUFBQSs1QixhQUFBN1YsRUFBQTJTLEtBQ3JFNzJCLEVBQUFzM0IsUUFBQVUsY0FBQSxhQUFBOVQsRUFBQTJTLEdBQXFFLE9BQUE3MkIsRUFBQWc2QixVQUFBOVYsRUFBQTJTLEtBQ3JFNzJCLEVBQUFzM0IsUUFBQVUsY0FBQSxhQUFBOVQsRUFBQTJTLEdBQXFFLE9BQUE3MkIsRUFBQWk2QixlQUFBL1YsRUFBQTJTLEtBQ3JFNzJCLEVBQUFzM0IsUUFBQVUsY0FBQSxhQUFBOVQsRUFBQTJTLEdBQXFFLE9BQUE3MkIsRUFBQWs2QixnQkFBQWhXLEVBQUEyUyxLQUNyRTcyQixFQUFBczNCLFFBQUFVLGNBQUEsYUFBQTlULEVBQUEyUyxHQUFxRSxPQUFBNzJCLEVBQUFtNkIsV0FBQWpXLEtBQ3JFbGtCLEVBQUFzM0IsUUFBQVUsY0FBQSxhQUFBOVQsRUFBQTJTLEdBQXFFLE9BQUE3MkIsRUFBQW82QixjQUFBbFcsS0FDckVsa0IsRUFBQXMzQixRQUFBK0Msa0JBQUE3WixFQUFBbmEsR0FBQVEsSUFBQSxXQUErRSxPQUFBN0csRUFBQW11QixTQUMvRW51QixFQUFBczNCLFFBQUErQyxrQkFBQTdaLEVBQUFuYSxHQUFBVyxHQUFBLFdBQThFLE9BQUFoSCxFQUFBczZCLGFBQzlFdDZCLEVBQUFzM0IsUUFBQStDLGtCQUFBN1osRUFBQW5hLEdBQUFZLEdBQUEsV0FBOEUsT0FBQWpILEVBQUFzNkIsYUFDOUV0NkIsRUFBQXMzQixRQUFBK0Msa0JBQUE3WixFQUFBbmEsR0FBQWEsR0FBQSxXQUE4RSxPQUFBbEgsRUFBQXM2QixhQUM5RXQ2QixFQUFBczNCLFFBQUErQyxrQkFBQTdaLEVBQUFuYSxHQUFBYyxHQUFBLFdBQThFLE9BQUFuSCxFQUFBdTZCLG1CQUM5RXY2QixFQUFBczNCLFFBQUErQyxrQkFBQTdaLEVBQUFuYSxHQUFBUyxHQUFBLFdBQThFLE9BQUE5RyxFQUFBdzZCLGNBQzlFeDZCLEVBQUFzM0IsUUFBQStDLGtCQUFBN1osRUFBQW5hLEdBQUFVLEdBQUEsV0FBOEUsT0FBQS9HLEVBQUF5NkIsUUFDOUV6NkIsRUFBQXMzQixRQUFBK0Msa0JBQUE3WixFQUFBbmEsR0FBQWUsR0FBQSxXQUE4RSxPQUFBcEgsRUFBQTA2QixhQUM5RTE2QixFQUFBczNCLFFBQUErQyxrQkFBQTdaLEVBQUFuYSxHQUFBZ0IsR0FBQSxXQUE4RSxPQUFBckgsRUFBQTI2QixZQUM5RTM2QixFQUFBczNCLFFBQUErQyxrQkFBQTdaLEVBQUFoWSxHQUFBSyxJQUFBLFdBQStFLE9BQUE3SSxFQUFBcUQsVUFDL0VyRCxFQUFBczNCLFFBQUErQyxrQkFBQTdaLEVBQUFoWSxHQUFBTSxJQUFBLFdBQStFLE9BQUE5SSxFQUFBNDZCLGFBQy9FNTZCLEVBQUFzM0IsUUFBQStDLGtCQUFBN1osRUFBQWhZLEdBQUFTLElBQUEsV0FBK0UsT0FBQWpKLEVBQUFpdkIsV0FDL0VqdkIsRUFBQXMzQixRQUFBdUQsY0FBQSxXQUFBM25CLEdBQXdELE9BQUFsVCxFQUFBODZCLFNBQUE1bkIsS0FDeERsVCxFQUFBczNCLFFBQUF1RCxjQUFBLFdBQUEzbkIsR0FBd0QsT0FBQWxULEVBQUE4NkIsU0FBQTVuQixLQUN4RGxULEVBQUFzM0IsUUFBQXlELGNBQUEsZUFBc0QsT0FBQS82QixFQUFBbTZCLFdBQUEsTUFDdERuNkIsRUFBQXMzQixRQUFBeUQsY0FBQSxlQUFzRCxPQUFBLzZCLEVBQUFvNkIsY0FBQSxNQUN0RHA2QixFQUFBczNCLFFBQUF5RCxjQUFBLGVBQXNELE9BQUEvNkIsRUFBQXFELFVBQ3REckQsRUFBQXMzQixRQUFBeUQsY0FBQSxlQUFzRCxPQUFBLzZCLEVBQUE0NkIsYUFDdEQ1NkIsRUFBQXMzQixRQUFBeUQsY0FBQSxlQUFzRCxPQUFBLzZCLEVBQUFpdkIsV0FDdERqdkIsRUFBQXMzQixRQUFBeUQsY0FBQSxlQUFzRCxPQUFBLzZCLEVBQUErdUIsaUJBQ3REL3VCLEVBQUFzM0IsUUFBQXlELGNBQUEsZUFBc0QsT0FBQS82QixFQUFBZzdCLDBCQUN0RGg3QixFQUFBczNCLFFBQUF5RCxjQUFBLGVBQXNELE9BQUEvNkIsRUFBQWk3QixzQkFDdERqN0IsRUFBQXMzQixRQUFBeUQsY0FBQSxlQUFzRCxPQUFBLzZCLEVBQUE4VyxVQUN0RDlXLEVBQUFzM0IsUUFBQXlELGNBQUEsZUFBc0QsT0FBQS82QixFQUFBZ3VCLFVBQUEsS0FDdERodUIsRUFBQXMzQixRQUFBeUQsY0FBQSxlQUFzRCxPQUFBLzZCLEVBQUFndUIsVUFBQSxLQUN0RGh1QixFQUFBczNCLFFBQUF5RCxjQUFBLGVBQXNELE9BQUEvNkIsRUFBQWd1QixVQUFBLEtBQ3REaHVCLEVBQUFzM0IsUUFBQXlELGNBQUEsSUFBc0MsV0FBZ0IsT0FBQS82QixFQUFBZ3VCLFVBQUEsS0FDdERodUIsRUFBQXMzQixRQUFBeUQsY0FBQSxlQUFzRCxPQUFBLzZCLEVBQUFndUIsVUFBQSxLQUN0RGh1QixFQUFBczNCLFFBQUF5RCxjQUFBLGdCQUF1RCxPQUFBLzZCLEVBQUFrN0IseUJBQ3ZEbDdCLEVBQUFzM0IsUUFBQXlELGNBQUEsZ0JBQXVELE9BQUEvNkIsRUFBQWs3Qix5QkFDdkQsSUFBQUMsRUFBQSxTQUFBckUsR0FDQXNFLEVBQUE5RCxRQUFBeUQsY0FBQSxJQUFBakUsRUFBQSxXQUFrRSxPQUFBOTJCLEVBQUFxN0IsY0FBQSxJQUFBdkUsS0FDbEVzRSxFQUFBOUQsUUFBQXlELGNBQUEsSUFBQWpFLEVBQUEsV0FBa0UsT0FBQTkyQixFQUFBcTdCLGNBQUEsSUFBQXZFLEtBQ2xFc0UsRUFBQTlELFFBQUF5RCxjQUFBLElBQUFqRSxFQUFBLFdBQWtFLE9BQUE5MkIsRUFBQXE3QixjQUFBLElBQUF2RSxLQUNsRXNFLEVBQUE5RCxRQUFBeUQsY0FBQSxJQUFBakUsRUFBQSxXQUFrRSxPQUFBOTJCLEVBQUFxN0IsY0FBQSxJQUFBdkUsS0FDbEVzRSxFQUFBOUQsUUFBQXlELGNBQUEsSUFBQWpFLEVBQUEsV0FBa0UsT0FBQTkyQixFQUFBcTdCLGNBQUEsSUFBQXZFLEtBQ2xFc0UsRUFBQTlELFFBQUF5RCxjQUFBLElBQUFqRSxFQUFBLFdBQWtFLE9BQUE5MkIsRUFBQXE3QixjQUFBLElBQUF2RSxLQUNsRXNFLEVBQUE5RCxRQUFBeUQsY0FBQSxJQUFBakUsRUFBQSxXQUFrRSxPQUFBOTJCLEVBQUFxN0IsY0FBQSxJQUFBdkUsTUFFbEVzRSxFQUFBemhDLEtBQ0EsUUFBQW05QixLQUFBYixFQUFBcUYsU0FDQUgsRUFBQXJFLEdBUUEsT0FOQTkyQixFQUFBczNCLFFBQUFpRSxnQkFBQSxTQUFBQyxHQUVBLE9BREF4N0IsRUFBQS9FLFVBQUF1cUIsTUFBQSxrQkFBQWdXLEdBQ0FBLElBRUF4N0IsRUFBQXMzQixRQUFBbUUsY0FBQSxTQUFBeEUsRUFBQWozQixFQUFBL0UsWUFDQStFLEVBQUFzM0IsUUFBQW1FLGNBQUEsU0FBQTlFLEVBQUEzMkIsRUFBQS9FLFlBQ0ErRSxFQXk2QkEsT0FuaENBdEcsRUFBQStxQixFQUFBM2pCLEdBNEdBMmpCLEVBQUFwckIsVUFBQWlILFFBQUEsV0FDQVEsRUFBQXpILFVBQUFpSCxRQUFBMUksS0FBQStCLE1BQ0FBLEtBQUFzQixVQUFBLE1BRUF3cEIsRUFBQXByQixVQUFBbTBCLE1BQUEsU0FBQXRhLEdBQ0EsR0FBQXZaLEtBQUFzQixVQUFBLENBR0EsSUFBQTBxQixFQUFBaHNCLEtBQUFzQixVQUFBMHFCLE9BQ0ErVixFQUFBL1YsRUFBQXJvQixFQUNBcStCLEVBQUFoVyxFQUFBaHBCLEVBQ0FoRCxLQUFBc0IsVUFBQW9uQixPQUNBMW9CLEtBQUFzQixVQUFBdXpCLElBQUEsU0FBQXRiLEdBRUF2WixLQUFBNjlCLGtCQUNBdGtCLEVBQUF2WixLQUFBNjlCLGdCQUFBdGtCLEVBQ0F2WixLQUFBNjlCLGdCQUFBLElBRUE3OUIsS0FBQTI5QixRQUFBOUosTUFBQXRhLElBQ0F5UyxFQUFBaHNCLEtBQUFzQixVQUFBMHFCLFFBQ0Fyb0IsSUFBQW8rQixHQUFBL1YsRUFBQWhwQixJQUFBZy9CLEdBQ0FoaUMsS0FBQXNCLFVBQUFpRyxLQUFBLGdCQUdBdWpCLEVBQUFwckIsVUFBQTArQixNQUFBLFNBQUE3a0IsRUFBQTNGLEVBQUFDLEdBQ0EsSUFBQXBPLEVBQ0FzTSxFQUNBa3dCLEVBQ0FqVyxFQUFBaHNCLEtBQUFzQixVQUFBMHFCLE9BQ0E5QixFQUFBbHFCLEtBQUFzQixVQUFBNG9CLFFBQ0F6QixFQUFBem9CLEtBQUFzQixVQUFBOEIsUUFBQXFsQixpQkFDQS9sQixFQUFBMUMsS0FBQXNCLFVBQUFvQixLQUNBc25CLEVBQUFocUIsS0FBQXNCLFVBQUEwb0IsZUFDQUQsRUFBQS9wQixLQUFBc0IsVUFBQXlvQixXQUNBTyxFQUFBdHFCLEtBQUFzQixVQUFBZ3BCLFFBQ0E0WCxFQUFBbFcsRUFBQWhxQixNQUFBckQsSUFBQXF0QixFQUFBaHBCLEVBQUFncEIsRUFBQWpwQixPQUNBL0MsS0FBQXNCLFVBQUE4eEIsWUFBQXBILEVBQUFocEIsR0FDQSxRQUFBbS9CLEVBQUF2dUIsRUFBd0N1dUIsRUFBQXR1QixJQUFzQnN1QixFQUFBLENBRzlELEdBRkExOEIsRUFBQThULEVBQUE2b0IsT0FBQUQsR0FFQSxRQURBcHdCLEVBQUF3SCxFQUFBOEUsV0FBQThqQixLQUNBcHdCLEdBQUEsT0FDQSxLQUFBb3dCLEdBQUF0dUIsRUFBQSxDQUNBN1QsS0FBQTY5QixnQkFBQXA0QixFQUNBLFNBRUEsSUFBQTZZLEVBQUEvRSxFQUFBOEUsV0FBQThqQixHQUNBLE9BQUE3akIsTUFBQSxPQUNBdk0sRUFBQSxNQUFBQSxFQUFBLE9BQUF1TSxFQUFBLFlBQ0E3WSxHQUFBOFQsRUFBQTZvQixPQUFBRCxJQUdBQSxJQVdBLEdBUkFGLEVBQUExRixFQUFBaGYsUUFBQXhMLEdBQ0FtWSxJQUVBblksR0FEQXRNLEVBQUF5a0IsRUFBQXprQixPQUNBNFksV0FBQSxJQUVBb0ssR0FDQXpvQixLQUFBc0IsVUFBQWlHLEtBQUEsWUFBQTlCLEdBRUF3OEIsSUFBQWpXLEVBQUFyb0IsRUFBQSxDQW1CQSxHQUFBcW9CLEVBQUFyb0IsRUFBQXMrQixFQUFBLEdBQUF2L0IsRUFDQSxHQUFBc25CLEVBQ0FnQyxFQUFBcm9CLEVBQUEsRUFDQXFvQixFQUFBaHBCLElBQ0FncEIsRUFBQWhwQixFQUFBZ3BCLEVBQUFsb0IsY0FDQWtvQixFQUFBaHBCLElBQ0FoRCxLQUFBc0IsVUFBQW94QixRQUFBLElBR0ExRyxFQUFBaHFCLE1BQUFyRCxJQUFBcXRCLEVBQUFocEIsR0FBQVIsV0FBQSxFQUVBMC9CLEVBQUFsVyxFQUFBaHFCLE1BQUFyRCxJQUFBcXRCLEVBQUFocEIsRUFBQWdwQixFQUFBanBCLFlBR0EsT0FBQWsvQixFQUNBLFNBSUEsR0FBQWxZLEVBQ0FtWSxFQUFBakssWUFBQWpNLEVBQUFyb0IsRUFBQXMrQixFQUFBLENBQUEzWCxFQUFBdlosRUFBQTdQLGVBQUE2UCxFQUFBNVAsZ0JBQUE0UCxFQUFBM1AsaUJBRUEsSUFEQThnQyxFQUFBdmpDLElBQUErRCxFQUFBLEdBQ0FxTyxFQUFBaFEsd0JBQ0FtaEMsRUFBQTcvQixJQUFBSyxFQUFBLEdBQUE0bkIsRUFBQXZaLEVBQUE3UCxlQUFBNlAsRUFBQTVQLGdCQUFBNFAsRUFBQTNQLGlCQUlBLEdBREE4Z0MsRUFBQTcvQixJQUFBMnBCLEVBQUFyb0IsSUFBQSxDQUFBMm1CLEVBQUE3a0IsRUFBQXc4QixFQUFBbHdCLElBQ0Frd0IsRUFBQSxFQUNBLE9BQUFBLEdBQ0FDLEVBQUE3L0IsSUFBQTJwQixFQUFBcm9CLElBQUEsQ0FBQTJtQixFQUFBLFVBQUE5bUIsUUFoREEsQ0FDQSxJQUFBNitCLEVBQUFILEVBQUF2akMsSUFBQXF0QixFQUFBcm9CLEVBQUEsR0FDQSxHQUFBMCtCLEVBQ0EsR0FBQUEsRUFBQXR4QixFQUFBaFEsdUJBU0FzaEMsRUFBQXR4QixFQUFBalEsdUJBQUEyRSxFQUNBNDhCLEVBQUF0eEIsRUFBQS9QLHNCQUFBK1EsRUFDQW13QixFQUFBNy9CLElBQUEycEIsRUFBQXJvQixFQUFBLEVBQUEwK0IsT0FYQSxDQUNBLElBQUFDLEVBQUFKLEVBQUF2akMsSUFBQXF0QixFQUFBcm9CLEVBQUEsR0FDQTIrQixJQUNBQSxFQUFBdnhCLEVBQUFqUSx1QkFBQTJFLEVBQ0E2OEIsRUFBQXZ4QixFQUFBL1Asc0JBQUErUSxFQUNBbXdCLEVBQUE3L0IsSUFBQTJwQixFQUFBcm9CLEVBQUEsRUFBQTIrQixNQTRDQXRpQyxLQUFBc0IsVUFBQTh4QixZQUFBcEgsRUFBQWhwQixJQUVBOG5CLEVBQUFwckIsVUFBQTgwQixLQUFBLFdBQ0F4MEIsS0FBQXNCLFVBQUFrekIsUUFFQTFKLEVBQUFwckIsVUFBQWloQyxTQUFBLFdBQ0EsSUFBQTNVLEVBQUFoc0IsS0FBQXNCLFVBQUEwcUIsT0FDQWhzQixLQUFBc0IsVUFBQThCLFFBQUEya0IsYUFDQWlFLEVBQUFyb0IsRUFBQSxHQUVBcW9CLEVBQUFocEIsSUFDQWdwQixFQUFBaHBCLEVBQUFncEIsRUFBQWxvQixlQUNBa29CLEVBQUFocEIsSUFDQWhELEtBQUFzQixVQUFBb3hCLFVBRUExRyxFQUFBcm9CLEdBQUEzRCxLQUFBc0IsVUFBQW9CLE1BQ0FzcEIsRUFBQXJvQixJQUVBM0QsS0FBQXNCLFVBQUFpRyxLQUFBLGFBRUF1akIsRUFBQXByQixVQUFBa2hDLGVBQUEsV0FDQTVnQyxLQUFBc0IsVUFBQTBxQixPQUFBcm9CLEVBQUEsR0FFQW1uQixFQUFBcHJCLFVBQUFtaEMsVUFBQSxXQUNBN2dDLEtBQUFzQixVQUFBMHFCLE9BQUFyb0IsRUFBQSxHQUNBM0QsS0FBQXNCLFVBQUEwcUIsT0FBQXJvQixLQUdBbW5CLEVBQUFwckIsVUFBQW9oQyxJQUFBLFdBQ0EsSUFBQXlCLEVBQUF2aUMsS0FBQXNCLFVBQUEwcUIsT0FBQXJvQixFQUNBM0QsS0FBQXNCLFVBQUEwcUIsT0FBQXJvQixFQUFBM0QsS0FBQXNCLFVBQUEwcUIsT0FBQTdsQixXQUNBbkcsS0FBQXNCLFVBQUE4QixRQUFBcWxCLGtCQUNBem9CLEtBQUFzQixVQUFBaUcsS0FBQSxXQUFBdkgsS0FBQXNCLFVBQUEwcUIsT0FBQXJvQixFQUFBNCtCLElBR0F6WCxFQUFBcHJCLFVBQUFxaEMsU0FBQSxXQUNBL2dDLEtBQUFzQixVQUFBK3lCLFVBQUEsSUFFQXZKLEVBQUFwckIsVUFBQXNoQyxRQUFBLFdBQ0FoaEMsS0FBQXNCLFVBQUEreUIsVUFBQSxJQUVBdkosRUFBQXByQixVQUFBNCtCLFlBQUEsU0FBQS9ULEdBQ0F2cUIsS0FBQXNCLFVBQUEwcUIsT0FBQWhxQixNQUFBckQsSUFBQXFCLEtBQUFzQixVQUFBMHFCLE9BQUFocEIsRUFBQWhELEtBQUFzQixVQUFBMHFCLE9BQUFqcEIsT0FBQWsxQixZQUFBajRCLEtBQUFzQixVQUFBMHFCLE9BQUFyb0IsRUFBQTRtQixFQUFBLE9BQUF2cUIsS0FBQXNCLFVBQUFtcUIsWUFBQTFhLEVBQUE3UCxlQUFBNlAsRUFBQTVQLGdCQUFBNFAsRUFBQTNQLGlCQUNBcEIsS0FBQXNCLFVBQUE4eEIsWUFBQXB6QixLQUFBc0IsVUFBQTBxQixPQUFBaHBCLElBRUE4bkIsRUFBQXByQixVQUFBNitCLFNBQUEsU0FBQWhVLEdBQ0EsSUFBQWlZLEVBQUFqWSxFQUFBLEdBQ0FpWSxFQUFBLElBQ0FBLEVBQUEsR0FFQXhpQyxLQUFBc0IsVUFBQTBxQixPQUFBaHBCLEdBQUF3L0IsRUFDQXhpQyxLQUFBc0IsVUFBQTBxQixPQUFBaHBCLEVBQUEsSUFDQWhELEtBQUFzQixVQUFBMHFCLE9BQUFocEIsRUFBQSxJQUdBOG5CLEVBQUFwckIsVUFBQTgrQixXQUFBLFNBQUFqVSxHQUNBLElBQUFpWSxFQUFBalksRUFBQSxHQUNBaVksRUFBQSxJQUNBQSxFQUFBLEdBRUF4aUMsS0FBQXNCLFVBQUEwcUIsT0FBQWhwQixHQUFBdy9CLEVBQ0F4aUMsS0FBQXNCLFVBQUEwcUIsT0FBQWhwQixHQUFBaEQsS0FBQXNCLFVBQUFzQixPQUNBNUMsS0FBQXNCLFVBQUEwcUIsT0FBQWhwQixFQUFBaEQsS0FBQXNCLFVBQUFzQixLQUFBLEdBRUE1QyxLQUFBc0IsVUFBQTBxQixPQUFBcm9CLEdBQUEzRCxLQUFBc0IsVUFBQW9CLE1BQ0ExQyxLQUFBc0IsVUFBQTBxQixPQUFBcm9CLEtBR0FtbkIsRUFBQXByQixVQUFBKytCLGNBQUEsU0FBQWxVLEdBQ0EsSUFBQWlZLEVBQUFqWSxFQUFBLEdBQ0FpWSxFQUFBLElBQ0FBLEVBQUEsR0FFQXhpQyxLQUFBc0IsVUFBQTBxQixPQUFBcm9CLEdBQUE2K0IsRUFDQXhpQyxLQUFBc0IsVUFBQTBxQixPQUFBcm9CLEdBQUEzRCxLQUFBc0IsVUFBQW9CLE9BQ0ExQyxLQUFBc0IsVUFBQTBxQixPQUFBcm9CLEVBQUEzRCxLQUFBc0IsVUFBQW9CLEtBQUEsSUFHQW9vQixFQUFBcHJCLFVBQUFnL0IsZUFBQSxTQUFBblUsR0FDQSxJQUFBaVksRUFBQWpZLEVBQUEsR0FDQWlZLEVBQUEsSUFDQUEsRUFBQSxHQUVBeGlDLEtBQUFzQixVQUFBMHFCLE9BQUFyb0IsR0FBQTNELEtBQUFzQixVQUFBb0IsTUFDQTFDLEtBQUFzQixVQUFBMHFCLE9BQUFyb0IsSUFFQTNELEtBQUFzQixVQUFBMHFCLE9BQUFyb0IsR0FBQTYrQixFQUNBeGlDLEtBQUFzQixVQUFBMHFCLE9BQUFyb0IsRUFBQSxJQUNBM0QsS0FBQXNCLFVBQUEwcUIsT0FBQXJvQixFQUFBLElBR0FtbkIsRUFBQXByQixVQUFBaS9CLGVBQUEsU0FBQXBVLEdBQ0EsSUFBQWlZLEVBQUFqWSxFQUFBLEdBQ0FpWSxFQUFBLElBQ0FBLEVBQUEsR0FFQXhpQyxLQUFBc0IsVUFBQTBxQixPQUFBaHBCLEdBQUF3L0IsRUFDQXhpQyxLQUFBc0IsVUFBQTBxQixPQUFBaHBCLEdBQUFoRCxLQUFBc0IsVUFBQXNCLE9BQ0E1QyxLQUFBc0IsVUFBQTBxQixPQUFBaHBCLEVBQUFoRCxLQUFBc0IsVUFBQXNCLEtBQUEsR0FFQTVDLEtBQUFzQixVQUFBMHFCLE9BQUFyb0IsRUFBQSxHQUVBbW5CLEVBQUFwckIsVUFBQWsvQixvQkFBQSxTQUFBclUsR0FDQSxJQUFBaVksRUFBQWpZLEVBQUEsR0FDQWlZLEVBQUEsSUFDQUEsRUFBQSxHQUVBeGlDLEtBQUFzQixVQUFBMHFCLE9BQUFocEIsR0FBQXcvQixFQUNBeGlDLEtBQUFzQixVQUFBMHFCLE9BQUFocEIsRUFBQSxJQUNBaEQsS0FBQXNCLFVBQUEwcUIsT0FBQWhwQixFQUFBLEdBRUFoRCxLQUFBc0IsVUFBQTBxQixPQUFBcm9CLEVBQUEsR0FFQW1uQixFQUFBcHJCLFVBQUFtL0IsbUJBQUEsU0FBQXRVLEdBQ0EsSUFBQWlZLEVBQUFqWSxFQUFBLEdBQ0FpWSxFQUFBLElBQ0FBLEVBQUEsR0FFQXhpQyxLQUFBc0IsVUFBQTBxQixPQUFBcm9CLEVBQUE2K0IsRUFBQSxHQUVBMVgsRUFBQXByQixVQUFBby9CLGVBQUEsU0FBQXZVLEdBQ0EsSUFBQWtZLEVBQ0FDLEVBQUFuWSxFQUFBLEtBRUFrWSxFQURBbFksRUFBQXRvQixRQUFBLEVBQ0Fzb0IsRUFBQSxLQUdBLEVBRUFtWSxFQUFBLEVBQ0FBLEVBQUEsRUFFQUEsR0FBQTFpQyxLQUFBc0IsVUFBQXNCLE9BQ0E4L0IsRUFBQTFpQyxLQUFBc0IsVUFBQXNCLEtBQUEsR0FFQTYvQixFQUFBLEVBQ0FBLEVBQUEsRUFFQUEsR0FBQXppQyxLQUFBc0IsVUFBQW9CLE9BQ0ErL0IsRUFBQXppQyxLQUFBc0IsVUFBQW9CLEtBQUEsR0FFQTFDLEtBQUFzQixVQUFBMHFCLE9BQUFyb0IsRUFBQTgrQixFQUNBemlDLEtBQUFzQixVQUFBMHFCLE9BQUFocEIsRUFBQTAvQixHQUVBNVgsRUFBQXByQixVQUFBcS9CLGlCQUFBLFNBQUF4VSxHQUVBLElBREEsSUFBQWlZLEVBQUFqWSxFQUFBLE1BQ0FpWSxLQUNBeGlDLEtBQUFzQixVQUFBMHFCLE9BQUFyb0IsRUFBQTNELEtBQUFzQixVQUFBMHFCLE9BQUE3bEIsWUFHQTJrQixFQUFBcHJCLFVBQUFpakMsbUJBQUEsU0FBQTMvQixFQUFBNFEsRUFBQUMsRUFBQSt1QixRQUNBLElBQUFBLElBQW1DQSxHQUFBLEdBQ25DLElBQUEzOUIsRUFBQWpGLEtBQUFzQixVQUFBMHFCLE9BQUFocUIsTUFBQXJELElBQUFxQixLQUFBc0IsVUFBQTBxQixPQUFBanBCLE1BQUFDLEdBQ0FpQyxFQUFBa3pCLGFBQUF2a0IsRUFBQUMsRUFBQSxDQUFBN1QsS0FBQXNCLFVBQUFtcUIsWUFBQTFhLEVBQUE3UCxlQUFBNlAsRUFBQTVQLGdCQUFBNFAsRUFBQTNQLGlCQUNBd2hDLElBQ0EzOUIsRUFBQXpDLFdBQUEsSUFHQXNvQixFQUFBcHJCLFVBQUFtakMsaUJBQUEsU0FBQTcvQixHQUNBaEQsS0FBQTJpQyxtQkFBQTMvQixFQUFBLEVBQUFoRCxLQUFBc0IsVUFBQW9CLE1BQUEsSUFFQW9vQixFQUFBcHJCLFVBQUFzL0IsZUFBQSxTQUFBelUsR0FDQSxJQUFBbm9CLEVBQ0EsT0FBQW1vQixFQUFBLElBQ0EsT0FJQSxJQUhBbm9CLEVBQUFwQyxLQUFBc0IsVUFBQTBxQixPQUFBaHBCLEVBQ0FoRCxLQUFBc0IsVUFBQTh4QixZQUFBaHhCLEdBQ0FwQyxLQUFBMmlDLG1CQUFBdmdDLElBQUFwQyxLQUFBc0IsVUFBQTBxQixPQUFBcm9CLEVBQUEzRCxLQUFBc0IsVUFBQW9CLEtBQUEsSUFBQTFDLEtBQUFzQixVQUFBMHFCLE9BQUFyb0IsR0FDc0J2QixFQUFBcEMsS0FBQXNCLFVBQUFzQixLQUF5QlIsSUFDL0NwQyxLQUFBNmlDLGlCQUFBemdDLEdBRUFwQyxLQUFBc0IsVUFBQTh4QixZQUFBaHhCLEdBQ0EsTUFDQSxPQU9BLElBTkFBLEVBQUFwQyxLQUFBc0IsVUFBQTBxQixPQUFBaHBCLEVBQ0FoRCxLQUFBc0IsVUFBQTh4QixZQUFBaHhCLEdBQ0FwQyxLQUFBMmlDLG1CQUFBdmdDLEVBQUEsRUFBQXBDLEtBQUFzQixVQUFBMHFCLE9BQUFyb0IsRUFBQSxNQUNBM0QsS0FBQXNCLFVBQUEwcUIsT0FBQXJvQixFQUFBLEdBQUEzRCxLQUFBc0IsVUFBQW9CLE9BQ0ExQyxLQUFBc0IsVUFBQTBxQixPQUFBaHFCLE1BQUFyRCxJQUFBeUQsRUFBQSxHQUFBSSxXQUFBLEdBRUFKLEtBQ0FwQyxLQUFBNmlDLGlCQUFBemdDLEdBRUFwQyxLQUFBc0IsVUFBQTh4QixZQUFBLEdBQ0EsTUFDQSxPQUdBLElBRkFoeEIsRUFBQXBDLEtBQUFzQixVQUFBc0IsS0FDQTVDLEtBQUFzQixVQUFBOHhCLFlBQUFoeEIsRUFBQSxHQUNBQSxLQUNBcEMsS0FBQTZpQyxpQkFBQXpnQyxHQUVBcEMsS0FBQXNCLFVBQUE4eEIsWUFBQSxHQUNBLE1BQ0EsT0FDQSxJQUFBMFAsRUFBQTlpQyxLQUFBc0IsVUFBQTBxQixPQUFBaHFCLE1BQUFDLE9BQUFqQyxLQUFBc0IsVUFBQXNCLEtBQ0FrZ0MsRUFBQSxJQUNBOWlDLEtBQUFzQixVQUFBMHFCLE9BQUFocUIsTUFBQXdDLFVBQUFzK0IsR0FDQTlpQyxLQUFBc0IsVUFBQTBxQixPQUFBanBCLE1BQUEwQixLQUFBQyxJQUFBMUUsS0FBQXNCLFVBQUEwcUIsT0FBQWpwQixNQUFBKy9CLEVBQUEsR0FDQTlpQyxLQUFBc0IsVUFBQTBxQixPQUFBL29CLE1BQUF3QixLQUFBQyxJQUFBMUUsS0FBQXNCLFVBQUEwcUIsT0FBQS9vQixNQUFBNi9CLEVBQUEsR0FDQTlpQyxLQUFBc0IsVUFBQWlHLEtBQUEsZUFLQXVqQixFQUFBcHJCLFVBQUF1L0IsWUFBQSxTQUFBMVUsR0FDQSxPQUFBQSxFQUFBLElBQ0EsT0FDQXZxQixLQUFBMmlDLG1CQUFBM2lDLEtBQUFzQixVQUFBMHFCLE9BQUFocEIsRUFBQWhELEtBQUFzQixVQUFBMHFCLE9BQUFyb0IsRUFBQTNELEtBQUFzQixVQUFBb0IsTUFDQSxNQUNBLE9BQ0ExQyxLQUFBMmlDLG1CQUFBM2lDLEtBQUFzQixVQUFBMHFCLE9BQUFocEIsRUFBQSxFQUFBaEQsS0FBQXNCLFVBQUEwcUIsT0FBQXJvQixFQUFBLEdBQ0EsTUFDQSxPQUNBM0QsS0FBQTJpQyxtQkFBQTNpQyxLQUFBc0IsVUFBQTBxQixPQUFBaHBCLEVBQUEsRUFBQWhELEtBQUFzQixVQUFBb0IsTUFHQTFDLEtBQUFzQixVQUFBOHhCLFlBQUFwekIsS0FBQXNCLFVBQUEwcUIsT0FBQWhwQixJQUVBOG5CLEVBQUFwckIsVUFBQXcvQixZQUFBLFNBQUEzVSxHQUNBLElBQUFpWSxFQUFBalksRUFBQSxHQUNBaVksRUFBQSxJQUNBQSxFQUFBLEdBTUEsSUFKQSxJQUFBeFcsRUFBQWhzQixLQUFBc0IsVUFBQTBxQixPQUNBMFcsRUFBQTFXLEVBQUFocEIsRUFBQWdwQixFQUFBanBCLE1BQ0FnZ0MsRUFBQS9pQyxLQUFBc0IsVUFBQXNCLEtBQUEsRUFBQW9wQixFQUFBbG9CLGFBQ0FrL0IsRUFBQWhqQyxLQUFBc0IsVUFBQXNCLEtBQUEsRUFBQW9wQixFQUFBanBCLE1BQUFnZ0MsRUFBQSxFQUNBUCxLQUNBeFcsRUFBQWhxQixNQUFBNkUsT0FBQW04QixFQUFBLEtBQ0FoWCxFQUFBaHFCLE1BQUE2RSxPQUFBNjdCLEVBQUEsRUFBQTFXLEVBQUExcEIsYUFBQXRDLEtBQUFzQixVQUFBbXFCLGNBRUF6ckIsS0FBQXNCLFVBQUE4eEIsWUFBQXBILEVBQUFocEIsR0FDQWhELEtBQUFzQixVQUFBOHhCLFlBQUFwSCxFQUFBbG9CLGVBRUFnbkIsRUFBQXByQixVQUFBeS9CLFlBQUEsU0FBQTVVLEdBQ0EsSUFBQWlZLEVBQUFqWSxFQUFBLEdBQ0FpWSxFQUFBLElBQ0FBLEVBQUEsR0FFQSxJQUVBcGdDLEVBRkE0cEIsRUFBQWhzQixLQUFBc0IsVUFBQTBxQixPQUNBMFcsRUFBQTFXLEVBQUFocEIsRUFBQWdwQixFQUFBanBCLE1BSUEsSUFGQVgsRUFBQXBDLEtBQUFzQixVQUFBc0IsS0FBQSxFQUFBb3BCLEVBQUFsb0IsYUFDQTFCLEVBQUFwQyxLQUFBc0IsVUFBQXNCLEtBQUEsRUFBQW9wQixFQUFBanBCLE1BQUFYLEVBQ0FvZ0MsS0FDQXhXLEVBQUFocUIsTUFBQTZFLE9BQUE2N0IsRUFBQSxHQUNBMVcsRUFBQWhxQixNQUFBNkUsT0FBQXpFLEVBQUEsRUFBQTRwQixFQUFBMXBCLGFBQUF0QyxLQUFBc0IsVUFBQW1xQixjQUVBenJCLEtBQUFzQixVQUFBOHhCLFlBQUFwSCxFQUFBaHBCLEdBQ0FoRCxLQUFBc0IsVUFBQTh4QixZQUFBcEgsRUFBQWxvQixlQUVBZ25CLEVBQUFwckIsVUFBQTAvQixZQUFBLFNBQUE3VSxHQUNBdnFCLEtBQUFzQixVQUFBMHFCLE9BQUFocUIsTUFBQXJELElBQUFxQixLQUFBc0IsVUFBQTBxQixPQUFBaHBCLEVBQUFoRCxLQUFBc0IsVUFBQTBxQixPQUFBanBCLE9BQUFtMUIsWUFBQWw0QixLQUFBc0IsVUFBQTBxQixPQUFBcm9CLEVBQUE0bUIsRUFBQSxPQUFBdnFCLEtBQUFzQixVQUFBbXFCLFlBQUExYSxFQUFBN1AsZUFBQTZQLEVBQUE1UCxnQkFBQTRQLEVBQUEzUCxpQkFDQXBCLEtBQUFzQixVQUFBOHhCLFlBQUFwekIsS0FBQXNCLFVBQUEwcUIsT0FBQWhwQixJQUVBOG5CLEVBQUFwckIsVUFBQTIvQixTQUFBLFNBQUE5VSxHQUdBLElBRkEsSUFBQWlZLEVBQUFqWSxFQUFBLE1BQ0F5QixFQUFBaHNCLEtBQUFzQixVQUFBMHFCLE9BQ0F3VyxLQUNBeFcsRUFBQWhxQixNQUFBNkUsT0FBQW1sQixFQUFBanBCLE1BQUFpcEIsRUFBQW5vQixVQUFBLEdBQ0Ftb0IsRUFBQWhxQixNQUFBNkUsT0FBQW1sQixFQUFBanBCLE1BQUFpcEIsRUFBQWxvQixhQUFBLEVBQUFrb0IsRUFBQTFwQixhQUFBeU8sRUFBQXBRLGVBRUFYLEtBQUFzQixVQUFBOHhCLFlBQUFwSCxFQUFBbm9CLFdBQ0E3RCxLQUFBc0IsVUFBQTh4QixZQUFBcEgsRUFBQWxvQixlQUVBZ25CLEVBQUFwckIsVUFBQTQvQixXQUFBLFNBQUEvVSxFQUFBMlMsR0FDQSxHQUFBM1MsRUFBQXRvQixPQUFBLElBQUFpN0IsRUFBQSxDQUdBLElBRkEsSUFBQXNGLEVBQUFqWSxFQUFBLE1BQ0F5QixFQUFBaHNCLEtBQUFzQixVQUFBMHFCLE9BQ0F3VyxLQUNBeFcsRUFBQWhxQixNQUFBNkUsT0FBQW1sQixFQUFBanBCLE1BQUFpcEIsRUFBQWxvQixhQUFBLEdBQ0Frb0IsRUFBQWhxQixNQUFBNkUsT0FBQW1sQixFQUFBanBCLE1BQUFpcEIsRUFBQWxvQixhQUFBLEVBQUFrb0IsRUFBQTFwQixhQUFBeU8sRUFBQXBRLGVBRUFYLEtBQUFzQixVQUFBOHhCLFlBQUFwSCxFQUFBbm9CLFdBQ0E3RCxLQUFBc0IsVUFBQTh4QixZQUFBcEgsRUFBQWxvQixnQkFHQWduQixFQUFBcHJCLFVBQUE2L0IsV0FBQSxTQUFBaFYsR0FDQXZxQixLQUFBc0IsVUFBQTBxQixPQUFBaHFCLE1BQUFyRCxJQUFBcUIsS0FBQXNCLFVBQUEwcUIsT0FBQWhwQixFQUFBaEQsS0FBQXNCLFVBQUEwcUIsT0FBQWpwQixPQUFBbzFCLGFBQUFuNEIsS0FBQXNCLFVBQUEwcUIsT0FBQXJvQixFQUFBM0QsS0FBQXNCLFVBQUEwcUIsT0FBQXJvQixHQUFBNG1CLEVBQUEsUUFBQXZxQixLQUFBc0IsVUFBQW1xQixZQUFBMWEsRUFBQTdQLGVBQUE2UCxFQUFBNVAsZ0JBQUE0UCxFQUFBM1Asa0JBRUEwcEIsRUFBQXByQixVQUFBOC9CLGtCQUFBLFNBQUFqVixHQUdBLElBRkEsSUFBQWlZLEVBQUFqWSxFQUFBLE1BQ0F5QixFQUFBaHNCLEtBQUFzQixVQUFBMHFCLE9BQ0F3VyxLQUNBeFcsRUFBQXJvQixFQUFBcW9CLEVBQUEvbEIsWUFHQTZrQixFQUFBcHJCLFVBQUErL0IsZ0JBQUEsU0FBQWxWLEdBQ0EsSUFBQWlZLEVBQUFqWSxFQUFBLEdBQ0FpWSxFQUFBLElBQ0FBLEVBQUEsR0FFQXhpQyxLQUFBc0IsVUFBQTBxQixPQUFBcm9CLEVBQUE2K0IsRUFBQSxFQUNBeGlDLEtBQUFzQixVQUFBMHFCLE9BQUFyb0IsR0FBQTNELEtBQUFzQixVQUFBb0IsT0FDQTFDLEtBQUFzQixVQUFBMHFCLE9BQUFyb0IsRUFBQTNELEtBQUFzQixVQUFBb0IsS0FBQSxJQUdBb29CLEVBQUFwckIsVUFBQWdnQyxrQkFBQSxTQUFBblYsR0FDQSxJQUFBaVksRUFBQWpZLEVBQUEsR0FDQWlZLEVBQUEsSUFDQUEsRUFBQSxHQUVBeGlDLEtBQUFzQixVQUFBMHFCLE9BQUFyb0IsR0FBQTYrQixFQUNBeGlDLEtBQUFzQixVQUFBMHFCLE9BQUFyb0IsR0FBQTNELEtBQUFzQixVQUFBb0IsT0FDQTFDLEtBQUFzQixVQUFBMHFCLE9BQUFyb0IsRUFBQTNELEtBQUFzQixVQUFBb0IsS0FBQSxJQUdBb29CLEVBQUFwckIsVUFBQWlnQyx5QkFBQSxTQUFBcFYsR0FDQSxJQUFBeUIsRUFBQWhzQixLQUFBc0IsVUFBQTBxQixPQUNBL21CLEVBQUErbUIsRUFBQWhxQixNQUFBckQsSUFBQXF0QixFQUFBanBCLE1BQUFpcEIsRUFBQWhwQixHQUNBaUMsRUFBQWt6QixhQUFBbk0sRUFBQXJvQixFQUFBcW9CLEVBQUFyb0IsR0FBQTRtQixFQUFBLE9BQUF0bEIsRUFBQXRHLElBQUFxdEIsRUFBQXJvQixFQUFBLEtBQUFvTixFQUFBcFEsYUFBQW9RLEVBQUE3UCxlQUFBNlAsRUFBQTVQLGdCQUFBNFAsRUFBQTNQLGtCQUVBMHBCLEVBQUFwckIsVUFBQWtnQyxxQkFBQSxTQUFBclYsRUFBQTJTLEdBQ0EzUyxFQUFBLE9BR0EyUyxFQVFBLE1BQUFBLElBQ0FsOUIsS0FBQXNCLFVBQUEyekIsR0FBQSxTQUNBajFCLEtBQUFzQixVQUFBcUgsUUFBQWtlLEVBQUFuYSxHQUFBNEIsSUFBQSxjQUVBdE8sS0FBQXNCLFVBQUEyekIsR0FBQSxnQkFDQWoxQixLQUFBc0IsVUFBQXFILFFBQUFrZSxFQUFBbmEsR0FBQTRCLElBQUEsY0FFQXRPLEtBQUFzQixVQUFBMnpCLEdBQUEsU0FDQWoxQixLQUFBc0IsVUFBQXFILFFBQUE0aEIsRUFBQSxRQUVBdnFCLEtBQUFzQixVQUFBMnpCLEdBQUEsV0FDQWoxQixLQUFBc0IsVUFBQXFILFFBQUFrZSxFQUFBbmEsR0FBQTRCLElBQUEsa0JBbEJBdE8sS0FBQXNCLFVBQUEyekIsR0FBQSxVQUFBajFCLEtBQUFzQixVQUFBMnpCLEdBQUEsaUJBQUFqMUIsS0FBQXNCLFVBQUEyekIsR0FBQSxVQUNBajFCLEtBQUFzQixVQUFBcUgsUUFBQWtlLEVBQUFuYSxHQUFBNEIsSUFBQSxVQUVBdE8sS0FBQXNCLFVBQUEyekIsR0FBQSxVQUNBajFCLEtBQUFzQixVQUFBcUgsUUFBQWtlLEVBQUFuYSxHQUFBNEIsSUFBQSxVQWtCQXdjLEVBQUFwckIsVUFBQW1nQyxnQkFBQSxTQUFBdFYsR0FDQSxJQUFBaVksRUFBQWpZLEVBQUEsR0FDQWlZLEVBQUEsSUFDQUEsRUFBQSxHQUVBeGlDLEtBQUFzQixVQUFBMHFCLE9BQUFocEIsRUFBQXcvQixFQUFBLEVBQ0F4aUMsS0FBQXNCLFVBQUEwcUIsT0FBQWhwQixHQUFBaEQsS0FBQXNCLFVBQUFzQixPQUNBNUMsS0FBQXNCLFVBQUEwcUIsT0FBQWhwQixFQUFBaEQsS0FBQXNCLFVBQUFzQixLQUFBLElBR0Frb0IsRUFBQXByQixVQUFBb2dDLGtCQUFBLFNBQUF2VixHQUNBLElBQUFpWSxFQUFBalksRUFBQSxHQUNBaVksRUFBQSxJQUNBQSxFQUFBLEdBRUF4aUMsS0FBQXNCLFVBQUEwcUIsT0FBQWhwQixHQUFBdy9CLEVBQ0F4aUMsS0FBQXNCLFVBQUEwcUIsT0FBQWhwQixHQUFBaEQsS0FBQXNCLFVBQUFzQixPQUNBNUMsS0FBQXNCLFVBQUEwcUIsT0FBQWhwQixFQUFBaEQsS0FBQXNCLFVBQUFzQixLQUFBLEdBRUE1QyxLQUFBc0IsVUFBQTBxQixPQUFBcm9CLEdBQUEzRCxLQUFBc0IsVUFBQW9CLE1BQ0ExQyxLQUFBc0IsVUFBQTBxQixPQUFBcm9CLEtBR0FtbkIsRUFBQXByQixVQUFBcWdDLFdBQUEsU0FBQXhWLEdBQ0FBLEVBQUEsT0FDQUEsRUFBQSxNQUNBQSxFQUFBLE9BQ0FBLEVBQUEsTUFDQXZxQixLQUFBc0IsVUFBQTBxQixPQUFBaHBCLEVBQUF1bkIsRUFBQSxLQUNBdnFCLEtBQUFzQixVQUFBMHFCLE9BQUFocEIsR0FBQWhELEtBQUFzQixVQUFBc0IsT0FDQTVDLEtBQUFzQixVQUFBMHFCLE9BQUFocEIsRUFBQWhELEtBQUFzQixVQUFBc0IsS0FBQSxHQUVBNUMsS0FBQXNCLFVBQUEwcUIsT0FBQXJvQixFQUFBNG1CLEVBQUEsS0FDQXZxQixLQUFBc0IsVUFBQTBxQixPQUFBcm9CLEdBQUEzRCxLQUFBc0IsVUFBQW9CLE9BQ0ExQyxLQUFBc0IsVUFBQTBxQixPQUFBcm9CLEVBQUEzRCxLQUFBc0IsVUFBQW9CLEtBQUEsSUFHQW9vQixFQUFBcHJCLFVBQUFzZ0MsU0FBQSxTQUFBelYsR0FDQSxJQUFBaVksRUFBQWpZLEVBQUEsR0FDQWlZLEdBQUEsU0FDQXhpQyxLQUFBc0IsVUFBQTBxQixPQUFBaG1CLEtBQUFoRyxLQUFBc0IsVUFBQTBxQixPQUFBcm9CLEdBRUEsSUFBQTYrQixJQUNBeGlDLEtBQUFzQixVQUFBMHFCLE9BQUFobUIsS0FBQSxLQUdBOGtCLEVBQUFwckIsVUFBQXVnQyxRQUFBLFNBQUExVixFQUFBMlMsR0FDQSxHQUFBM1MsRUFBQXRvQixPQUFBLEVBQ0EsUUFBQW5FLEVBQUEsRUFBMkJBLEVBQUF5c0IsRUFBQXRvQixPQUFtQm5FLElBQzlDa0MsS0FBQWlnQyxRQUFBLENBQUExVixFQUFBenNCLFVBSUEsR0FBQW8vQixHQVNBLFNBQUFBLEVBQ0EsT0FBQTNTLEVBQUEsSUFDQSxPQUNBdnFCLEtBQUFzQixVQUFBdW9CLG1CQUFBLEVBQ0EsTUFDQSxPQUNBN3BCLEtBQUFzQixVQUFBZ3pCLFlBQUEsRUFBQWdJLEVBQUEyRyxpQkFDQWpqQyxLQUFBc0IsVUFBQWd6QixZQUFBLEVBQUFnSSxFQUFBMkcsaUJBQ0FqakMsS0FBQXNCLFVBQUFnekIsWUFBQSxFQUFBZ0ksRUFBQTJHLGlCQUNBampDLEtBQUFzQixVQUFBZ3pCLFlBQUEsRUFBQWdJLEVBQUEyRyxpQkFDQSxNQUNBLE9BQ0FqakMsS0FBQXNCLFVBQUE0aEMsVUFBQWxqQyxLQUFBc0IsVUFBQW9CLEtBQ0ExQyxLQUFBc0IsVUFBQTBDLE9BQUEsSUFBQWhFLEtBQUFzQixVQUFBc0IsTUFDQSxNQUNBLE9BQ0E1QyxLQUFBc0IsVUFBQXdvQixZQUFBLEVBQ0EsTUFDQSxPQUNBOXBCLEtBQUFzQixVQUFBMG9CLGdCQUFBLEVBQ0EsTUFDQSxRQUNBLE1BQ0EsUUFDQWhxQixLQUFBc0IsVUFBQXV6QixJQUFBLDZDQUNBNzBCLEtBQUFzQixVQUFBc29CLG1CQUFBLEVBQ0E1cEIsS0FBQXNCLFVBQUF1a0IsVUFDQTdsQixLQUFBc0IsVUFBQXVrQixTQUFBMEcsaUJBRUEsTUFDQSxPQUNBLFNBQ0EsVUFDQSxVQUNBdnNCLEtBQUFzQixVQUFBeXdCLFNBQUEsSUFBQXhILEVBQUEsR0FDQXZxQixLQUFBc0IsVUFBQXl2QixXQUFBLE1BQUF4RyxFQUFBLEdBQ0F2cUIsS0FBQXNCLFVBQUEwdkIsWUFBQXpHLEVBQUEsT0FDQXZxQixLQUFBc0IsVUFBQXF3QixhQUFBLEVBQ0EzeEIsS0FBQXNCLFVBQUE0WixRQUFBMUksVUFBQUMsSUFBQSx1QkFDQXpTLEtBQUFzQixVQUFBeXBCLGlCQUFBb1ksVUFDQW5qQyxLQUFBc0IsVUFBQXV6QixJQUFBLDRCQUNBLE1BQ0EsVUFDQTcwQixLQUFBc0IsVUFBQXdyQixXQUFBLEVBQ0EsTUFDQSxVQUNBOXNCLEtBQUFzQixVQUFBOHZCLFVBQUEsRUFDQSxNQUNBLFVBQ0FweEIsS0FBQXNCLFVBQUFvd0IsVUFBQSxFQUNBLE1BQ0EsVUFDQTF4QixLQUFBc0IsVUFBQW13QixZQUFBLEVBQ0EsTUFDQSxRQUNBenhCLEtBQUFzQixVQUFBcW9CLGNBQUEsRUFDQSxNQUNBLFVBQ0EzcEIsS0FBQXdnQyxXQUFBalcsR0FDQSxNQUNBLFVBQ0F2cUIsS0FBQXdnQyxXQUFBalcsR0FDQSxRQUNBLFVBQ0F2cUIsS0FBQXNCLFVBQUErcEIsUUFBQXlMLGtCQUFBOTJCLEtBQUFzQixVQUFBbXFCLGFBQ0F6ckIsS0FBQXNCLFVBQUE0WSxRQUFBLEVBQUFsYSxLQUFBc0IsVUFBQXNCLEtBQUEsR0FDQTVDLEtBQUFzQixVQUFBdWtCLFVBQ0E3bEIsS0FBQXNCLFVBQUF1a0IsU0FBQTBHLGlCQUVBdnNCLEtBQUFzQixVQUFBMHJCLGFBQ0EsTUFDQSxVQUNBaHRCLEtBQUFzQixVQUFBMm9CLG9CQUFBLFFBaEZBLE9BQUFNLEVBQUEsSUFDQSxPQUNBdnFCLEtBQUFzQixVQUFBeW9CLFlBQUEsSUFtRkFlLEVBQUFwckIsVUFBQXdnQyxVQUFBLFNBQUEzVixFQUFBMlMsR0FDQSxHQUFBM1MsRUFBQXRvQixPQUFBLEVBQ0EsUUFBQW5FLEVBQUEsRUFBMkJBLEVBQUF5c0IsRUFBQXRvQixPQUFtQm5FLElBQzlDa0MsS0FBQWtnQyxVQUFBLENBQUEzVixFQUFBenNCLFVBSUEsR0FBQW8vQixHQVNBLFNBQUFBLEVBQ0EsT0FBQTNTLEVBQUEsSUFDQSxPQUNBdnFCLEtBQUFzQixVQUFBdW9CLG1CQUFBLEVBQ0EsTUFDQSxPQUNBLE1BQUE3cEIsS0FBQXNCLFVBQUFvQixNQUFBMUMsS0FBQXNCLFVBQUE0aEMsV0FDQWxqQyxLQUFBc0IsVUFBQTBDLE9BQUFoRSxLQUFBc0IsVUFBQTRoQyxVQUFBbGpDLEtBQUFzQixVQUFBc0IsYUFFQTVDLEtBQUFzQixVQUFBNGhDLFVBQ0EsTUFDQSxPQUNBbGpDLEtBQUFzQixVQUFBd29CLFlBQUEsRUFDQSxNQUNBLE9BQ0E5cEIsS0FBQXNCLFVBQUEwb0IsZ0JBQUEsRUFDQSxNQUNBLFFBQ0EsTUFDQSxRQUNBaHFCLEtBQUFzQixVQUFBdXpCLElBQUEsb0NBQ0E3MEIsS0FBQXNCLFVBQUFzb0IsbUJBQUEsRUFDQTVwQixLQUFBc0IsVUFBQXVrQixVQUNBN2xCLEtBQUFzQixVQUFBdWtCLFNBQUEwRyxpQkFFQSxNQUNBLE9BQ0EsU0FDQSxVQUNBLFVBQ0F2c0IsS0FBQXNCLFVBQUF5d0IsVUFBQSxFQUNBL3hCLEtBQUFzQixVQUFBeXZCLFlBQUEsRUFDQS93QixLQUFBc0IsVUFBQTB2QixhQUFBLEVBQ0FoeEIsS0FBQXNCLFVBQUFxd0IsYUFBQSxFQUNBM3hCLEtBQUFzQixVQUFBNFosUUFBQTFJLFVBQUEwYSxPQUFBLHVCQUNBbHRCLEtBQUFzQixVQUFBeXBCLGlCQUFBcVksU0FDQSxNQUNBLFVBQ0FwakMsS0FBQXNCLFVBQUF3ckIsV0FBQSxFQUNBLE1BQ0EsVUFDQTlzQixLQUFBc0IsVUFBQTh2QixVQUFBLEVBQ0EsTUFDQSxVQUNBcHhCLEtBQUFzQixVQUFBb3dCLFVBQUEsRUFDQSxNQUNBLFVBQ0ExeEIsS0FBQXNCLFVBQUFtd0IsWUFBQSxFQUNBLE1BQ0EsUUFDQXp4QixLQUFBc0IsVUFBQXFvQixjQUFBLEVBQ0EsTUFDQSxVQUNBM3BCLEtBQUF5Z0MsY0FBQWxXLEdBQ0EsTUFDQSxVQUNBLFFBQ0EsVUFDQXZxQixLQUFBc0IsVUFBQStwQixRQUFBc0wsdUJBQ0EsT0FBQXBNLEVBQUEsSUFDQXZxQixLQUFBeWdDLGNBQUFsVyxHQUVBdnFCLEtBQUFzQixVQUFBNFksUUFBQSxFQUFBbGEsS0FBQXNCLFVBQUFzQixLQUFBLEdBQ0E1QyxLQUFBc0IsVUFBQXVrQixVQUNBN2xCLEtBQUFzQixVQUFBdWtCLFNBQUEwRyxpQkFFQXZzQixLQUFBc0IsVUFBQTByQixhQUNBLE1BQ0EsVUFDQWh0QixLQUFBc0IsVUFBQTJvQixvQkFBQSxRQTdFQSxPQUFBTSxFQUFBLElBQ0EsT0FDQXZxQixLQUFBc0IsVUFBQXlvQixZQUFBLElBZ0ZBZSxFQUFBcHJCLFVBQUF5Z0MsZUFBQSxTQUFBNVYsR0FDQSxPQUFBQSxFQUFBdG9CLFFBQUEsSUFBQXNvQixFQUFBLElBU0EsSUFMQSxJQUlBM3FCLEVBSkE3QixFQUFBd3NCLEVBQUF0b0IsT0FDQW9oQyxFQUFBcmpDLEtBQUFzQixVQUFBZ3BCLFNBQUEsR0FDQXJZLEVBQUFqUyxLQUFBc0IsVUFBQWdwQixTQUFBLE1BQ0F0WSxFQUFBLElBQUFoUyxLQUFBc0IsVUFBQWdwQixRQUVBeHNCLEVBQUEsRUFBdUJBLEVBQUFDLEVBQU9ELEtBQzlCOEIsRUFBQTJxQixFQUFBenNCLEtBQ0EsSUFBQThCLEdBQUEsR0FDQXFTLEVBQUFyUyxFQUFBLEdBRUFBLEdBQUEsSUFBQUEsR0FBQSxHQUNBb1MsRUFBQXBTLEVBQUEsR0FFQUEsR0FBQSxJQUFBQSxHQUFBLEdBRUFxUyxHQURBclMsR0FBQSxHQUNBLEdBRUFBLEdBQUEsS0FBQUEsR0FBQSxJQUVBb1MsR0FEQXBTLEdBQUEsR0FDQSxJQUVBLElBQUFBLEdBQ0F5akMsRUFBQXR5QixFQUFBcFEsY0FBQSxHQUNBc1IsRUFBQWxCLEVBQUFwUSxjQUFBLE1BQ0FxUixFQUFBLElBQUFqQixFQUFBcFEsY0FFQSxJQUFBZixFQUNBeWpDLEdBQUEsRUFFQSxJQUFBempDLEVBQ0F5akMsR0FBQSxHQUVBLElBQUF6akMsRUFDQXlqQyxHQUFBLEVBRUEsSUFBQXpqQyxFQUNBeWpDLEdBQUEsRUFFQSxJQUFBempDLEVBQ0F5akMsR0FBQSxFQUVBLElBQUF6akMsRUFDQXlqQyxHQUFBLEdBRUEsSUFBQXpqQyxFQUNBeWpDLEdBQUEsR0FFQSxLQUFBempDLEdBQ0F5akMsSUFBQSxFQUNBQSxJQUFBLElBRUEsS0FBQXpqQyxFQUNBeWpDLElBQUEsR0FFQSxLQUFBempDLEVBQ0F5akMsSUFBQSxFQUVBLEtBQUF6akMsRUFDQXlqQyxJQUFBLEVBRUEsS0FBQXpqQyxFQUNBeWpDLElBQUEsRUFFQSxLQUFBempDLEVBQ0F5akMsSUFBQSxHQUVBLEtBQUF6akMsRUFDQXFTLEVBQUFsQixFQUFBcFEsY0FBQSxNQUVBLEtBQUFmLEVBQ0FvUyxFQUFBLElBQUFqQixFQUFBcFEsYUFFQSxLQUFBZixFQUNBLElBQUEycUIsRUFBQXpzQixFQUFBLElBQ0FBLEdBQUEsR0FFQSxLQURBbVUsRUFBQWpTLEtBQUFzQixVQUFBbTBCLFdBQUEsSUFBQWxMLEVBQUF6c0IsR0FBQSxJQUFBeXNCLEVBQUF6c0IsRUFBQSxPQUFBeXNCLEVBQUF6c0IsRUFBQSxPQUVBbVUsRUFBQSxLQUNBblUsR0FBQSxHQUVBLElBQUF5c0IsRUFBQXpzQixFQUFBLEtBR0FtVSxFQURBclMsRUFBQSxJQUFBMnFCLEVBREF6c0IsR0FBQSxJQUtBLEtBQUE4QixFQUNBLElBQUEycUIsRUFBQXpzQixFQUFBLElBQ0FBLEdBQUEsR0FFQSxLQURBa1UsRUFBQWhTLEtBQUFzQixVQUFBbTBCLFdBQUEsSUFBQWxMLEVBQUF6c0IsR0FBQSxJQUFBeXNCLEVBQUF6c0IsRUFBQSxPQUFBeXNCLEVBQUF6c0IsRUFBQSxPQUVBa1UsRUFBQSxLQUNBbFUsR0FBQSxHQUVBLElBQUF5c0IsRUFBQXpzQixFQUFBLEtBR0FrVSxFQURBcFMsRUFBQSxJQUFBMnFCLEVBREF6c0IsR0FBQSxJQUtBLE1BQUE4QixHQUNBcVMsRUFBQWxCLEVBQUFwUSxjQUFBLE1BQ0FxUixFQUFBLElBQUFqQixFQUFBcFEsY0FHQVgsS0FBQXNCLFVBQUF1cUIsTUFBQSw2QkFBQWpzQixHQUdBSSxLQUFBc0IsVUFBQWdwQixRQUFBK1ksR0FBQSxHQUFBcHhCLEdBQUEsRUFBQUQsT0EvR0FoUyxLQUFBc0IsVUFBQWdwQixRQUFBdlosRUFBQXBRLGNBaUhBbXFCLEVBQUFwckIsVUFBQTBnQyxhQUFBLFNBQUE3VixFQUFBMlMsR0FDQSxHQUFBQSxHQVlBLFNBQUFBLEVBQ0EsT0FBQTNTLEVBQUEsSUFDQSxPQUNBdm5CLEVBQUFoRCxLQUFBc0IsVUFBQTBxQixPQUFBaHBCLEVBQUEsRUFDQVcsRUFBQTNELEtBQUFzQixVQUFBMHFCLE9BQUFyb0IsRUFBQSxFQUNBM0QsS0FBQXNCLFVBQUFpRyxLQUFBLE9BQUFzZixFQUFBbmEsR0FBQTRCLElBQUEsS0FBQXRMLEVBQUEsSUFBd0ZXLEVBQUEsV0FoQnhGLE9BQUE0bUIsRUFBQSxJQUNBLE9BQ0F2cUIsS0FBQXNCLFVBQUFpRyxLQUFBLE9BQUFzZixFQUFBbmEsR0FBQTRCLElBQUEsT0FDQSxNQUNBLE9BQ0EsSUFBQXRMLEVBQUFoRCxLQUFBc0IsVUFBQTBxQixPQUFBaHBCLEVBQUEsRUFDQVcsRUFBQTNELEtBQUFzQixVQUFBMHFCLE9BQUFyb0IsRUFBQSxFQUNBM0QsS0FBQXNCLFVBQUFpRyxLQUFBLE9BQUFzZixFQUFBbmEsR0FBQTRCLElBQUEsSUFBQXRMLEVBQUEsSUFBdUZXLEVBQUEsT0FzQnZGbW5CLEVBQUFwckIsVUFBQTJnQyxVQUFBLFNBQUE5VixFQUFBMlMsR0FDQSxNQUFBQSxJQUNBbDlCLEtBQUFzQixVQUFBcW9CLGNBQUEsRUFDQTNwQixLQUFBc0IsVUFBQXlvQixZQUFBLEVBQ0EvcEIsS0FBQXNCLFVBQUF3b0IsWUFBQSxFQUNBOXBCLEtBQUFzQixVQUFBMG9CLGdCQUFBLEVBQ0FocUIsS0FBQXNCLFVBQUFzb0IsbUJBQUEsRUFDQTVwQixLQUFBc0IsVUFBQXVrQixVQUNBN2xCLEtBQUFzQixVQUFBdWtCLFNBQUEwRyxpQkFFQXZzQixLQUFBc0IsVUFBQXVvQixtQkFBQSxFQUNBN3BCLEtBQUFzQixVQUFBMHFCLE9BQUFub0IsVUFBQSxFQUNBN0QsS0FBQXNCLFVBQUEwcUIsT0FBQWxvQixhQUFBOUQsS0FBQXNCLFVBQUFzQixLQUFBLEVBQ0E1QyxLQUFBc0IsVUFBQWdwQixRQUFBdlosRUFBQXBRLGFBQ0FYLEtBQUFzQixVQUFBMHFCLE9BQUFyb0IsRUFBQTNELEtBQUFzQixVQUFBMHFCLE9BQUFocEIsRUFBQSxFQUNBaEQsS0FBQXNCLFVBQUE0b0IsUUFBQSxLQUNBbHFCLEtBQUFzQixVQUFBOG9CLE9BQUEsRUFDQXBxQixLQUFBc0IsVUFBQStvQixTQUFBLFNBR0FTLEVBQUFwckIsVUFBQTRnQyxlQUFBLFNBQUEvVixFQUFBMlMsR0FDQSxTQUFBQSxFQUFBLENBQ0EsSUFBQXNGLEVBQUFqWSxFQUFBLE9BQUFBLEVBQUEsR0FDQSxPQUFBaVksR0FDQSxPQUNBLE9BQ0F4aUMsS0FBQXNCLFVBQUE0YixVQUFBLHVCQUNBLE1BQ0EsT0FDQSxPQUNBbGQsS0FBQXNCLFVBQUE0YixVQUFBLDJCQUNBLE1BQ0EsT0FDQSxPQUNBbGQsS0FBQXNCLFVBQUE0YixVQUFBLHFCQUdBLElBQUFvbUIsRUFBQWQsRUFBQSxLQUNBeGlDLEtBQUFzQixVQUFBNGIsVUFBQSxjQUFBb21CLEtBR0F4WSxFQUFBcHJCLFVBQUE2Z0MsZ0JBQUEsU0FBQWhXLEVBQUEyUyxHQUNBQSxJQUVBbDlCLEtBQUFzQixVQUFBMHFCLE9BQUFub0IsV0FBQTBtQixFQUFBLFNBQ0F2cUIsS0FBQXNCLFVBQUEwcUIsT0FBQWxvQixjQUFBeW1CLEVBQUEsSUFBQUEsRUFBQSxJQUFBdnFCLEtBQUFzQixVQUFBc0IsS0FBQTJuQixFQUFBLEdBQUF2cUIsS0FBQXNCLFVBQUFzQixNQUFBLEVBQ0E1QyxLQUFBc0IsVUFBQTBxQixPQUFBcm9CLEVBQUEsRUFDQTNELEtBQUFzQixVQUFBMHFCLE9BQUFocEIsRUFBQSxJQUVBOG5CLEVBQUFwckIsVUFBQThnQyxXQUFBLFNBQUFqVyxHQUNBdnFCLEtBQUFzQixVQUFBMHFCLE9BQUFubkIsT0FBQTdFLEtBQUFzQixVQUFBMHFCLE9BQUFyb0IsRUFDQTNELEtBQUFzQixVQUFBMHFCLE9BQUFwbkIsT0FBQTVFLEtBQUFzQixVQUFBMHFCLE9BQUFocEIsRUFDQWhELEtBQUFzQixVQUFBMHFCLE9BQUF1WCxhQUFBdmpDLEtBQUFzQixVQUFBZ3BCLFNBRUFRLEVBQUFwckIsVUFBQStnQyxjQUFBLFNBQUFsVyxHQUNBdnFCLEtBQUFzQixVQUFBMHFCLE9BQUFyb0IsRUFBQTNELEtBQUFzQixVQUFBMHFCLE9BQUFubkIsUUFBQSxFQUNBN0UsS0FBQXNCLFVBQUEwcUIsT0FBQWhwQixFQUFBaEQsS0FBQXNCLFVBQUEwcUIsT0FBQXBuQixRQUFBLEVBQ0E1RSxLQUFBc0IsVUFBQWdwQixRQUFBdHFCLEtBQUFzQixVQUFBMHFCLE9BQUF1WCxjQUFBeHlCLEVBQUFwUSxjQUVBbXFCLEVBQUFwckIsVUFBQXloQyxTQUFBLFNBQUE1bkIsR0FDQXZaLEtBQUFzQixVQUFBNHpCLFlBQUEzYixJQUVBdVIsRUFBQXByQixVQUFBdWhDLFNBQUEsV0FDQWpoQyxLQUFBc0IsVUFBQTBxQixPQUFBcm9CLEVBQUEsRUFDQTNELEtBQUEwSixTQUVBb2hCLEVBQUFwckIsVUFBQTJoQyxzQkFBQSxXQUNBcmhDLEtBQUFzQixVQUFBdXpCLElBQUEsNkNBQ0E3MEIsS0FBQXNCLFVBQUFzb0IsbUJBQUEsRUFDQTVwQixLQUFBc0IsVUFBQXVrQixVQUNBN2xCLEtBQUFzQixVQUFBdWtCLFNBQUEwRyxrQkFHQXpCLEVBQUFwckIsVUFBQTRoQyxrQkFBQSxXQUNBdGhDLEtBQUFzQixVQUFBdXpCLElBQUEsb0NBQ0E3MEIsS0FBQXNCLFVBQUFzb0IsbUJBQUEsRUFDQTVwQixLQUFBc0IsVUFBQXVrQixVQUNBN2xCLEtBQUFzQixVQUFBdWtCLFNBQUEwRyxrQkFHQXpCLEVBQUFwckIsVUFBQTZoQyxxQkFBQSxXQUNBdmhDLEtBQUFzQixVQUFBK3lCLFVBQUEsR0FDQXIwQixLQUFBc0IsVUFBQWd6QixZQUFBLEVBQUFnSSxFQUFBMkcsa0JBRUFuWSxFQUFBcHJCLFVBQUFnaUMsY0FBQSxTQUFBOEIsR0FDQSxPQUFBQSxFQUFBdmhDLE9BQ0EsT0FBQWpDLEtBQUF1aEMsdUJBQ0EsTUFBQWlDLEVBQUEsSUFFQXhqQyxLQUFBc0IsVUFBQWd6QixZQUFBbUksRUFBQStHLEVBQUEsSUFBQWxILEVBQUFxRixTQUFBNkIsRUFBQSxLQUFBbEgsRUFBQTJHLGtCQUVBblksRUFBQXByQixVQUFBZ0ssTUFBQSxXQUNBMUosS0FBQXNCLFVBQUFvSSxTQUVBb2hCLEVBQUFwckIsVUFBQTQxQixPQUFBLFdBQ0F0MUIsS0FBQXNCLFVBQUFnMEIsVUFFQXhLLEVBQUFwckIsVUFBQTAxQixhQUFBLFdBQ0FwMUIsS0FBQXNCLFVBQUE4ekIsZ0JBRUF0SyxFQUFBcHJCLFVBQUF5ZCxNQUFBLFdBQ0FuZCxLQUFBMjlCLFFBQUF4Z0IsUUFDQW5kLEtBQUFzQixVQUFBNmIsU0FFQTJOLEVBQUFwckIsVUFBQTIwQixVQUFBLFNBQUFvUCxHQUNBempDLEtBQUFzQixVQUFBK3lCLFVBQUFvUCxJQUVBM1ksRUFwaENBLENBcWhDQzFKLEVBQUEvWCxZQUNEekwsRUFBQWt0Qiw2Q0M1bENBdHNCLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBQzlDbkIsRUFBQStqQyxTQUFBLEdBQ0EvakMsRUFBQXFsQyxnQkFBQXJsQyxFQUFBK2pDLFNBQUEsRUFDQS9qQyxFQUFBK2pDLFNBQUEsSUFDQStCLElBQUEsSUFDQXo0QixFQUFBLElBQ0FoTCxFQUFBLEtBQ0E5QixFQUFBLEtBQ0FDLEVBQUEsS0FDQXdqQixFQUFBLEtBQ0EraEIsRUFBQSxJQUNBaHNCLEVBQUEsSUFDQWlzQixFQUFBLElBQ0E5bEMsRUFBQSxLQUNBc0UsRUFBQSxJQUNBeWhDLEVBQUEsSUFDQTlsQyxFQUFBLElBQ0FHLEVBQUEsSUFDQXFCLEVBQUEsSUFDQWhCLEVBQUEsSUFDQXFCLEVBQUEsSUFDQWtrQyxFQUFBLElBQ0FsbEMsRUFBQSxJQUNBaUIsRUFBQSxJQUNBYixFQUFBLElBQ0Era0MsRUFBQSxJQUNBcnNCLEVBQUEsSUFDQXNzQixFQUFBLElBQ0FyZ0MsRUFBQSxJQUNBWCxFQUFBLElBQ0FpaEMsRUFBQSxJQUNBQyxJQUFNLElBQ05DLElBQUEsSUFDQUMsSUFBTSxJQUNOQyxJQUFBLEtBRUF6bUMsRUFBQStqQyxTQUFBLEdBQ0EyQyxJQUFBLEtBRUExbUMsRUFBQStqQyxTQUFBLE9BQ0EvakMsRUFBQStqQyxTQUFBLElBQ0EyQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxLQUNBQyxLQUFBLElBQ0FDLElBQUEsSUFDQVIsSUFBTSxJQUNOQyxJQUFBLElBQ0FDLElBQU0sSUFDTkMsSUFBQSxLQUVBem1DLEVBQUErakMsU0FBQSxFQUNBL2pDLEVBQUErakMsU0FBQSxJQUNBNkMsSUFBQSxJQUNBQyxLQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBakIsSUFBQSxJQUNBUSxJQUFVLElBQ1ZDLElBQUEsSUFDQUMsSUFBVSxJQUNWQyxJQUFBLEtBRUF6bUMsRUFBQStqQyxTQUFBLEdBQ0EyQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxLQUFBLElBQ0FDLElBQUEsSUFDQVIsSUFBTSxJQUNOQyxJQUFBLElBQ0FDLElBQU0sSUFDTkMsSUFBQSxLQUVBem1DLEVBQUErakMsU0FBQSxHQUNBNEMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLEtBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FqQixJQUFBLElBQ0FRLElBQU0sSUFDTkMsSUFBQSxJQUNBQyxJQUFNLElBQ05DLElBQUEsS0FFQXptQyxFQUFBK2pDLFNBQUEsR0FDQTRDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxLQUFBLElBQ0FDLElBQUEsSUFDQVIsSUFBTSxJQUNOQyxJQUFBLElBQ0FDLElBQU0sSUFDTkMsSUFBQSxLQUVBem1DLEVBQUErakMsU0FBQSxHQUNBMkMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsS0FBQSxJQUNBQyxJQUFBLElBQ0FoQixJQUFBLElBQ0FRLElBQU0sSUFDTkMsSUFBQSxJQUNBQyxJQUFNLElBQ05DLElBQUEsS0FFQXptQyxFQUFBK2pDLFNBQUEsRUFDQS9qQyxFQUFBK2pDLFNBQUEsSUFDQTRDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxLQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBakIsSUFBQSxJQUNBUSxJQUFVLElBQ1ZDLElBQUEsSUFDQUMsSUFBVSxJQUNWQyxJQUFBLEtBRUF6bUMsRUFBQStqQyxTQUFBLEdBQ0EyQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxLQUFBLElBQ0FDLElBQUEsSUFDQVIsSUFBTSxJQUNOQyxJQUFBLElBQ0FDLElBQU0sS0FFTnhtQyxFQUFBK2pDLFNBQUEsRUFDQS9qQyxFQUFBK2pDLFNBQUEsSUFDQTRDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxLQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBakIsSUFBQSxJQUNBUSxJQUFVLElBQ1ZDLElBQUEsSUFDQUMsSUFBVSxJQUNWQyxJQUFBLEtBRUF6bUMsRUFBQStqQyxTQUFBLE1BQ0EyQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxLQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxFQUFBLElBQ0FsQixJQUFBLElBQ0FRLElBQU0sSUFDTkMsSUFBQSxJQUNBQyxJQUFNLElBQ05DLElBQUEsbUNDcEpBLFNBQUFRLEVBQUFDLEVBQUEvbEMsRUFBQTZVLEVBQUFDLEdBR0EsUUFGQSxJQUFBRCxJQUEyQkEsRUFBQSxRQUMzQixJQUFBQyxJQUF5QkEsRUFBQWl4QixFQUFBN2lDLFFBQ3pCMlIsR0FBQWt4QixFQUFBN2lDLE9BQ0EsT0FBQTZpQyxFQUVBbHhCLEdBQUFreEIsRUFBQTdpQyxPQUFBMlIsR0FBQWt4QixFQUFBN2lDLE9BRUE0UixFQURBQSxHQUFBaXhCLEVBQUE3aUMsT0FDQTZpQyxFQUFBN2lDLFFBR0E2aUMsRUFBQTdpQyxPQUFBNFIsR0FBQWl4QixFQUFBN2lDLE9BRUEsUUFBQW5FLEVBQUE4VixFQUF1QjlWLEVBQUErVixJQUFTL1YsRUFDaENnbkMsRUFBQWhuQyxHQUFBaUIsRUFFQSxPQUFBK2xDLEVBeEJBdG1DLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBTzlDbkIsRUFBQWtnQixLQU5BLFNBQUFnbkIsRUFBQS9sQyxFQUFBNlUsRUFBQUMsR0FDQSxPQUFBaXhCLEVBQUFobkIsS0FDQWduQixFQUFBaG5CLEtBQUEvZSxFQUFBNlUsRUFBQUMsR0FFQWd4QixFQUFBQyxFQUFBL2xDLEVBQUE2VSxFQUFBQyxJQXFCQWpXLEVBQUFpbkMsNkNDMUJBLElBQ0Eva0MsRUFEQUMsRUFBQUMsV0FBQUQsWUFDQUQsRUFBQSxTQUFBMUIsRUFBQTZCLEdBSUEsT0FIQUgsRUFBQXRCLE9BQUEwQixnQkFDQSxDQUFjQyxVQUFBLGNBQWdCQyxPQUFBLFNBQUFoQyxFQUFBNkIsR0FBc0M3QixFQUFBK0IsVUFBQUYsSUFDcEUsU0FBQTdCLEVBQUE2QixHQUE2QixRQUFBTCxLQUFBSyxJQUFBTixlQUFBQyxLQUFBeEIsRUFBQXdCLEdBQUFLLEVBQUFMLE1BQzdCeEIsRUFBQTZCLElBRUEsU0FBQTdCLEVBQUE2QixHQUVBLFNBQUFJLElBQXVCTCxLQUFBTSxZQUFBbEMsRUFEdkIwQixFQUFBMUIsRUFBQTZCLEdBRUE3QixFQUFBc0IsVUFBQSxPQUFBTyxFQUFBekIsT0FBQVksT0FBQWEsSUFBQUksRUFBQVgsVUFBQU8sRUFBQVAsVUFBQSxJQUFBVyxLQUdBN0IsT0FBQUMsZUFBQWIsRUFBQSxjQUE4Q21CLE9BQUEsSUFDOUMsSUFBQXFpQixFQUFrQjFqQixFQUFRLEdBQzFCLFNBQUFrQixFQUFBbW1DLEVBQUFDLEdBR0EsSUFGQSxJQUFBN21DLEVBQUE2bUMsRUFBQUQsRUFDQXI1QixFQUFBLElBQUF0TCxNQUFBakMsR0FDQUEsS0FDQXVOLEVBQUF2TixLQUFBNm1DLEVBRUEsT0FBQXQ1QixFQUVBLElBQUF1NUIsRUFBQSxXQUNBLFNBQUFBLEVBQUFoakMsR0FDQWpDLEtBQUE0ZCxNQUFBLG9CQUFBQyxXQUNBLElBQUF6ZCxNQUFBNkIsR0FDQSxJQUFBNGIsV0FBQTViLEdBVUEsT0FSQWdqQyxFQUFBdmxDLFVBQUErUyxJQUFBLFNBQUFWLEVBQUE4dkIsRUFBQXFELEVBQUFqOUIsR0FDQWpJLEtBQUE0ZCxNQUFBaWtCLEdBQUEsRUFBQTl2QixJQUFBLEVBQUFtekIsSUFBQSxRQUFBMWhDLElBQUF5RSxFQUFBNDVCLEVBQUE1NUIsSUFFQWc5QixFQUFBdmxDLFVBQUF5bEMsUUFBQSxTQUFBQyxFQUFBdkQsRUFBQXFELEVBQUFqOUIsR0FDQSxRQUFBbkssRUFBQSxFQUF1QkEsRUFBQXNuQyxFQUFBbmpDLE9BQWtCbkUsSUFDekNrQyxLQUFBeVMsSUFBQTJ5QixFQUFBdG5DLEdBQUErakMsRUFBQXFELEVBQUFqOUIsSUFHQWc5QixFQWRBLEdBZ0JBcm5DLEVBQUFxbkMsa0JBQ0EsSUFBQUksRUFBQXptQyxFQUFBLFFBQ0EwbUMsRUFBQTFtQyxFQUFBLE1BQ0EwbUMsRUFBQTdoQyxLQUFBLElBQ0E2aEMsRUFBQTdoQyxLQUFBMEYsTUFBQW04QixFQUFBMW1DLEVBQUEsUUFFQWhCLEVBQUEybkMsdUJBQUEsV0FDQSxJQUVBMUQsRUFGQWprQixFQUFBLElBQUFxbkIsRUFBQSxNQUNBTyxFQUFBNW1DLEVBQUEsTUFFQSxJQUFBaWpDLEtBQUEyRCxFQUNBLFFBQUF6ekIsRUFBQSxFQUEwQkEsRUFBQSxNQUFZQSxFQUN0QzZMLEVBQUFuTCxJQUFBVixFQUFBOHZCLEVBQUEsS0FJQSxJQUFBQSxLQURBamtCLEVBQUF1bkIsUUFBQUUsRUFBQSxPQUNBRyxFQUNBNW5CLEVBQUF1bkIsUUFBQSxnQkFBQXRELEVBQUEsS0FDQWprQixFQUFBdW5CLFFBQUF2bUMsRUFBQSxTQUFBaWpDLEVBQUEsS0FDQWprQixFQUFBdW5CLFFBQUF2bUMsRUFBQSxTQUFBaWpDLEVBQUEsS0FDQWprQixFQUFBbkwsSUFBQSxJQUFBb3ZCLEVBQUEsS0FDQWprQixFQUFBbkwsSUFBQSxHQUFBb3ZCLEVBQUEsTUFDQWprQixFQUFBbkwsSUFBQSxJQUFBb3ZCLEVBQUEsS0FDQWprQixFQUFBdW5CLFFBQUEsY0FBQXRELEVBQUEsS0FDQWprQixFQUFBbkwsSUFBQSxJQUFBb3ZCLEVBQUEsTUFDQWprQixFQUFBbkwsSUFBQSxJQUFBb3ZCLEVBQUEsTUFnRkEsT0E5RUFqa0IsRUFBQXVuQixRQUFBRyxFQUFBLE9BQ0ExbkIsRUFBQXVuQixRQUFBRyxFQUFBLE9BQ0ExbkIsRUFBQW5MLElBQUEsV0FDQW1MLEVBQUF1bkIsUUFBQUcsRUFBQSxPQUNBMW5CLEVBQUF1bkIsUUFBQUcsRUFBQSxPQUNBMW5CLEVBQUFuTCxJQUFBLFdBQ0FtTCxFQUFBdW5CLFFBQUFHLEVBQUEsT0FDQTFuQixFQUFBbkwsSUFBQSxXQUNBbUwsRUFBQXVuQixRQUFBRyxFQUFBLE9BQ0ExbkIsRUFBQXVuQixRQUFBRyxFQUFBLE9BQ0ExbkIsRUFBQW5MLElBQUEsV0FDQW1MLEVBQUF1bkIsUUFBQUcsRUFBQSxPQUNBMW5CLEVBQUFuTCxJQUFBLFdBQ0FtTCxFQUFBbkwsSUFBQSxVQUNBbUwsRUFBQXVuQixRQUFBRSxFQUFBLE9BQ0F6bkIsRUFBQW5MLElBQUEsV0FDQW1MLEVBQUF1bkIsUUFBQSx3QkFDQXZuQixFQUFBdW5CLFFBQUF2bUMsRUFBQSxjQUNBZ2YsRUFBQXVuQixRQUFBLGtCQUNBdm5CLEVBQUF1bkIsUUFBQUUsRUFBQSxPQUNBem5CLEVBQUF1bkIsUUFBQUcsRUFBQSxPQUNBMW5CLEVBQUFuTCxJQUFBLFdBQ0FtTCxFQUFBbkwsSUFBQSxXQUNBbUwsRUFBQXVuQixRQUFBdm1DLEVBQUEsZUFDQWdmLEVBQUF1bkIsUUFBQXZtQyxFQUFBLGNBQ0FnZixFQUFBbkwsSUFBQSxVQUNBbUwsRUFBQXVuQixRQUFBLHFCQUNBdm5CLEVBQUF1bkIsUUFBQXZtQyxFQUFBLGNBQ0FnZixFQUFBbkwsSUFBQSxVQUNBbUwsRUFBQXVuQixRQUFBdm1DLEVBQUEsZUFDQWdmLEVBQUF1bkIsUUFBQSx3QkFDQXZuQixFQUFBdW5CLFFBQUF2bUMsRUFBQSxjQUNBZ2YsRUFBQW5MLElBQUEsV0FDQW1MLEVBQUF1bkIsUUFBQXZtQyxFQUFBLGVBQ0FnZixFQUFBbkwsSUFBQSxVQUNBbUwsRUFBQXVuQixRQUFBdm1DLEVBQUEsY0FDQWdmLEVBQUF1bkIsUUFBQXZtQyxFQUFBLGNBQ0FnZixFQUFBdW5CLFFBQUF2bUMsRUFBQSxjQUNBZ2YsRUFBQXVuQixRQUFBdm1DLEVBQUEsZUFDQWdmLEVBQUF1bkIsUUFBQXZtQyxFQUFBLGNBQ0FnZixFQUFBdW5CLFFBQUF2bUMsRUFBQSxjQUNBZ2YsRUFBQXVuQixRQUFBdm1DLEVBQUEsY0FDQWdmLEVBQUF1bkIsUUFBQXZtQyxFQUFBLGdCQUNBZ2YsRUFBQXVuQixRQUFBdm1DLEVBQUEsZUFDQWdmLEVBQUF1bkIsUUFBQXZtQyxFQUFBLGVBQ0FnZixFQUFBdW5CLFFBQUEsbUJBQ0F2bkIsRUFBQXVuQixRQUFBdm1DLEVBQUEsZ0JBQ0FnZixFQUFBbkwsSUFBQSxXQUNBbUwsRUFBQXVuQixRQUFBRyxFQUFBLE9BQ0ExbkIsRUFBQW5MLElBQUEsV0FDQW1MLEVBQUF1bkIsUUFBQXZtQyxFQUFBLGNBQ0FnZixFQUFBdW5CLFFBQUF2bUMsRUFBQSxlQUNBZ2YsRUFBQW5MLElBQUEsV0FDQW1MLEVBQUF1bkIsUUFBQXZtQyxFQUFBLGVBQ0FnZixFQUFBbkwsSUFBQSxXQUNBbUwsRUFBQXVuQixRQUFBLHNCQUNBdm5CLEVBQUF1bkIsUUFBQUcsRUFBQSxTQUNBMW5CLEVBQUF1bkIsUUFBQXZtQyxFQUFBLGlCQUNBZ2YsRUFBQXVuQixRQUFBdm1DLEVBQUEsZ0JBQ0FnZixFQUFBdW5CLFFBQUFHLEVBQUEsU0FDQTFuQixFQUFBbkwsSUFBQSxhQUNBbUwsRUFBQXVuQixRQUFBdm1DLEVBQUEsZ0JBQ0FnZixFQUFBdW5CLFFBQUF2bUMsRUFBQSxnQkFDQWdmLEVBQUFuTCxJQUFBLFlBQ0FtTCxFQUFBdW5CLFFBQUEsMEJBQ0F2bkIsRUFBQXVuQixRQUFBdm1DLEVBQUEsZ0JBQ0FnZixFQUFBdW5CLFFBQUFHLEVBQUEsU0FDQTFuQixFQUFBbkwsSUFBQSxhQUNBbUwsRUFBQXVuQixRQUFBdm1DLEVBQUEsZ0JBQ0FnZixFQUFBdW5CLFFBQUF2bUMsRUFBQSxnQkFDQWdmLEVBQUF1bkIsUUFBQXZtQyxFQUFBLGdCQUNBZ2YsRUFBQXVuQixRQUFBdm1DLEVBQUEsa0JBQ0FnZixFQUFBdW5CLFFBQUF2bUMsRUFBQSxrQkFDQWdmLEVBQUF1bkIsUUFBQXZtQyxFQUFBLGlCQUNBZ2YsRUFBQXVuQixRQUFBRyxFQUFBLFVBQ0ExbkIsRUFBQXVuQixRQUFBRSxFQUFBLFVBQ0F6bkIsRUFBQW5MLElBQUEsYUFDQW1MLEVBQUF1bkIsUUFBQSxrQkFDQXZuQixFQW5HQSxHQXFHQSxJQUFBNm5CLEVBQUEsV0FDQSxTQUFBQSxLQUtBLE9BSEFBLEVBQUEvbEMsVUFBQXU5QixLQUFBLFNBQUFDLEVBQUEzUyxFQUFBNFMsS0FDQXNJLEVBQUEvbEMsVUFBQTA5QixJQUFBLFNBQUE3akIsRUFBQTNGLEVBQUFDLEtBQ0E0eEIsRUFBQS9sQyxVQUFBMjlCLE9BQUEsYUFDQW9JLEVBTkEsR0FRQTdILEVBQUEsU0FBQXoyQixHQUVBLFNBQUF5MkIsRUFBQThILFFBQ0EsSUFBQUEsSUFBcUNBLEVBQUE5bkMsRUFBQTJuQyx3QkFDckMsSUFBQWwvQixFQUFBYyxFQUFBbEosS0FBQStCLFlBdUJBLE9BdEJBcUcsRUFBQXEvQixjQUNBci9CLEVBQUFzL0IsYUFBQSxFQUNBdC9CLEVBQUF1L0IsYUFBQXYvQixFQUFBcy9CLGFBQ0F0L0IsRUFBQXcvQixLQUFBLEdBQ0F4L0IsRUFBQXkvQixRQUFBLElBQ0F6L0IsRUFBQTAvQixTQUFBLEdBQ0ExL0IsRUFBQTIvQixnQkFBQSxTQUFBenNCLEVBQUEzRixFQUFBQyxLQUNBeE4sRUFBQTQvQixrQkFBQSxTQUFBbDBCLEtBQ0ExTCxFQUFBNi9CLGNBQUEsU0FBQWhKLEVBQUEzUyxFQUFBNFMsS0FDQTkyQixFQUFBOC9CLGNBQUEsU0FBQWpKLEVBQUFDLEtBQ0E5MkIsRUFBQSsvQixjQUFBLFNBQUFsSSxFQUFBM2tCLEtBQ0FsVCxFQUFBZ2dDLGNBQUEsSUFBQVosRUFDQXAvQixFQUFBaWdDLGdCQUFBLFNBQUF6RSxHQUFrRCxPQUFBQSxHQUNsRHg3QixFQUFBa2dDLGNBQUFsZ0MsRUFBQTIvQixnQkFDQTMvQixFQUFBbWdDLGlCQUFBaG9DLE9BQUFZLE9BQUEsTUFDQWlILEVBQUFvZ0MsYUFBQWpvQyxPQUFBWSxPQUFBLE1BQ0FpSCxFQUFBcWdDLGFBQUFsb0MsT0FBQVksT0FBQSxNQUNBaUgsRUFBQXNnQyxhQUFBbm9DLE9BQUFZLE9BQUEsTUFDQWlILEVBQUF1Z0MsYUFBQXBvQyxPQUFBWSxPQUFBLE1BQ0FpSCxFQUFBd2dDLGtCQUFBLEtBQ0F4Z0MsRUFBQXlnQyxjQUFBemdDLEVBQUFpZ0MsZ0JBQ0FqZ0MsRUFBQSs2QixjQUFBLG1CQUNBLzZCLEVBa1NBLE9BNVRBdEcsRUFBQTY5QixFQUFBejJCLEdBNEJBeTJCLEVBQUFsK0IsVUFBQWlILFFBQUEsV0FDQTNHLEtBQUFnbUMsZ0JBQUEsS0FDQWhtQyxLQUFBaW1DLGtCQUFBLEtBQ0FqbUMsS0FBQWttQyxjQUFBLEtBQ0FsbUMsS0FBQW1tQyxjQUFBLEtBQ0FubUMsS0FBQW9tQyxjQUFBLEtBQ0FwbUMsS0FBQXFtQyxjQUFBLEtBQ0FybUMsS0FBQXNtQyxnQkFBQSxLQUNBdG1DLEtBQUF1bUMsY0FBQSxLQUNBdm1DLEtBQUF3bUMsaUJBQUEsS0FDQXhtQyxLQUFBeW1DLGFBQUEsS0FDQXptQyxLQUFBMG1DLGFBQUEsS0FDQTFtQyxLQUFBMm1DLGFBQUEsS0FDQTNtQyxLQUFBNG1DLGFBQUEsS0FDQTVtQyxLQUFBNm1DLGtCQUFBLEtBQ0E3bUMsS0FBQThtQyxjQUFBLE1BRUFsSixFQUFBbCtCLFVBQUF5K0IsZ0JBQUEsU0FBQTRJLEdBQ0EvbUMsS0FBQXVtQyxjQUFBUSxHQUVBbkosRUFBQWwrQixVQUFBc25DLGtCQUFBLFdBQ0FobkMsS0FBQXVtQyxjQUFBdm1DLEtBQUFnbUMsaUJBRUFwSSxFQUFBbCtCLFVBQUFnaEMsa0JBQUEsU0FBQXZELEVBQUE0SixHQUNBL21DLEtBQUF3bUMsaUJBQUFySixFQUFBOWUsV0FBQSxJQUFBMG9CLEdBRUFuSixFQUFBbCtCLFVBQUF1bkMsb0JBQUEsU0FBQTlKLEdBQ0FuOUIsS0FBQXdtQyxpQkFBQXJKLEVBQUE5ZSxXQUFBLFlBQ0FyZSxLQUFBd21DLGlCQUFBckosRUFBQTllLFdBQUEsS0FFQXVmLEVBQUFsK0IsVUFBQXMrQiwwQkFBQSxTQUFBK0ksR0FDQS9tQyxLQUFBaW1DLGtCQUFBYyxHQUVBbkosRUFBQWwrQixVQUFBMitCLGNBQUEsU0FBQWxCLEVBQUE0SixHQUNBL21DLEtBQUF5bUMsYUFBQXRKLEVBQUE5ZSxXQUFBLElBQUEwb0IsR0FFQW5KLEVBQUFsK0IsVUFBQXduQyxnQkFBQSxTQUFBL0osR0FDQW45QixLQUFBeW1DLGFBQUF0SixFQUFBOWUsV0FBQSxZQUNBcmUsS0FBQXltQyxhQUFBdEosRUFBQTllLFdBQUEsS0FFQXVmLEVBQUFsK0IsVUFBQW8rQixzQkFBQSxTQUFBaUosR0FDQS9tQyxLQUFBa21DLGNBQUFhLEdBRUFuSixFQUFBbCtCLFVBQUEwaEMsY0FBQSxTQUFBb0MsRUFBQXVELEdBQ0EvbUMsS0FBQTBtQyxhQUFBbEQsR0FBQXVELEdBRUFuSixFQUFBbCtCLFVBQUF5bkMsZ0JBQUEsU0FBQTNELEdBQ0F4akMsS0FBQTBtQyxhQUFBbEQsV0FDQXhqQyxLQUFBMG1DLGFBQUFsRCxJQUVBNUYsRUFBQWwrQixVQUFBcStCLHNCQUFBLFNBQUFnSixHQUNBL21DLEtBQUFtbUMsY0FBQVksR0FFQW5KLEVBQUFsK0IsVUFBQXdoQyxjQUFBLFNBQUFrRyxFQUFBTCxHQUNBL21DLEtBQUEybUMsYUFBQVMsR0FBQUwsR0FFQW5KLEVBQUFsK0IsVUFBQTJuQyxnQkFBQSxTQUFBRCxHQUNBcG5DLEtBQUEybUMsYUFBQVMsV0FDQXBuQyxLQUFBMm1DLGFBQUFTLElBRUF4SixFQUFBbCtCLFVBQUF1K0Isc0JBQUEsU0FBQThJLEdBQ0EvbUMsS0FBQW9tQyxjQUFBVyxHQUVBbkosRUFBQWwrQixVQUFBb2lDLGNBQUEsU0FBQTBCLEVBQUE3NkIsR0FDQTNJLEtBQUE0bUMsYUFBQXBELEdBQUE3NkIsR0FFQWkxQixFQUFBbCtCLFVBQUE0bkMsZ0JBQUEsU0FBQTlELEdBQ0F4akMsS0FBQTRtQyxhQUFBcEQsV0FDQXhqQyxLQUFBNG1DLGFBQUFwRCxJQUVBNUYsRUFBQWwrQixVQUFBNm5DLHNCQUFBLFNBQUE1K0IsR0FDQTNJLEtBQUFxbUMsY0FBQTE5QixHQUVBaTFCLEVBQUFsK0IsVUFBQWtpQyxnQkFBQSxTQUFBbUYsR0FDQS9tQyxLQUFBOG1DLGNBQUFDLEdBRUFuSixFQUFBbCtCLFVBQUE4bkMsa0JBQUEsV0FDQXhuQyxLQUFBOG1DLGNBQUE5bUMsS0FBQXNtQyxpQkFFQTFJLEVBQUFsK0IsVUFBQXlkLE1BQUEsV0FDQW5kLEtBQUE0bEMsYUFBQTVsQyxLQUFBMmxDLGFBQ0EzbEMsS0FBQTZsQyxLQUFBLEdBQ0E3bEMsS0FBQThsQyxRQUFBLElBQ0E5bEMsS0FBQStsQyxTQUFBLEdBQ0EvbEMsS0FBQTZtQyxrQkFBQSxNQUVBakosRUFBQWwrQixVQUFBbTBCLE1BQUEsU0FBQXRhLEdBY0EsSUFiQSxJQUFBeEgsRUFBQSxFQUNBMDFCLEVBQUEsRUFDQTViLEdBQUEsRUFDQStaLEVBQUE1bEMsS0FBQTRsQyxhQUNBeEgsR0FBQSxFQUNBc0osR0FBQSxFQUNBQyxFQUFBM25DLEtBQUE2bEMsS0FDQTNJLEVBQUFsOUIsS0FBQStsQyxTQUNBeGIsRUFBQXZxQixLQUFBOGxDLFFBQ0Fsb0IsRUFBQTVkLEtBQUEwbEMsWUFBQTluQixNQUNBZ3FCLEVBQUE1bkMsS0FBQTZtQyxrQkFDQUUsRUFBQSxLQUNBaHBDLEVBQUF3YixFQUFBdFgsT0FDQW5FLEVBQUEsRUFBdUJBLEVBQUFDLElBQU9ELEVBRTlCLEdBREFpVSxFQUFBd0gsRUFBQThFLFdBQUF2Z0IsR0FDQSxJQUFBOG5DLEdBQUE3ekIsRUFBQSxJQUFBQSxFQUFBLEtBQ0Fxc0IsT0FBQXRnQyxFQUNBLEdBQ0FBLFVBQ0FBLEVBQUFDLEdBQUF3YixFQUFBOEUsV0FBQXZnQixHQUFBLElBQUF5YixFQUFBOEUsV0FBQXZnQixHQUFBLEtBQ0FBLFNBR0EsT0FBQThuQyxHQUFBN3pCLEVBQUEsSUFBQUEsRUFBQSxHQUNBd1ksSUFBQXRvQixPQUFBLE1BQUFzb0IsSUFBQXRvQixPQUFBLEdBQUE4UCxFQUFBLE9BREEsQ0FLQSxRQURBMDFCLEVBQUExMUIsRUFBQSxJQUFBNkwsRUFBQWdvQixHQUFBLEVBQUE3ekIsR0E3UEEsS0E4UEEsR0FDQSxPQUNBcXNCLE9BQUF0Z0MsRUFDQSxNQUNBLFFBQ0FzZ0MsSUFDQXArQixLQUFBdW1DLGNBQUFodEIsRUFBQTZrQixFQUFBdGdDLEdBQ0FzZ0MsR0FBQSxJQUVBMkksRUFBQS9tQyxLQUFBd21DLGlCQUFBejBCLElBRUFnMUIsSUFFQS9tQyxLQUFBaW1DLGtCQUFBbDBCLEdBQ0EsTUFDQSxRQUNBcXNCLEdBQ0FwK0IsS0FBQXVtQyxjQUFBaHRCLEVBQUE2a0IsRUFBQXRnQyxHQUNBc2dDLEdBQUEsSUFFQXNKLElBQ0FFLEVBQUF4SyxJQUFBN2pCLEVBQUFtdUIsRUFBQTVwQyxHQUNBNHBDLEdBQUEsR0FFQSxNQUNBLE9BQ0EsR0FBQTMxQixFQUFBLElBQ0EsT0FBQTZ6QixHQUNBLE9BQ0F4SCxPQUFBdGdDLEVBQ0EsTUFDQSxPQUNBNnBDLEdBQUF2bkIsT0FBQUMsYUFBQXRPLEdBQ0EwMUIsR0FBQSxFQUNBLE1BQ0EsT0FDQUEsR0FBQSxFQUNBLE1BQ0EsUUFDQUEsR0FBQSxHQUNBLE1BQ0EsUUFDQUMsT0FBQTVwQyxFQUNBMnBDLEdBQUEsR0FDQSxNQUNBLFFBQ0E1YixHQUFBLE9BSUFBLEdBQUEsRUFFQSxHQUFBQSxFQUFBLENBWUEsR0FYQTdyQixLQUFBOG1DLGNBQUEsQ0FDQWxMLFNBQUE5OUIsRUFDQWlVLE9BQ0E2ekIsZUFDQXhILFFBQ0FzSixNQUNBQyxNQUNBekssVUFDQTNTLFNBQ0FzZCxPQUFBLElBRUFBLE1BQ0EsT0FDQWhjLEdBQUEsRUFFQSxNQUNBLFFBQ0FrYixFQUFBL21DLEtBQUF5bUMsYUFBQTEwQixJQUVBZzFCLEVBQUF4YyxFQUFBMlMsR0FFQWw5QixLQUFBa21DLGNBQUFoSixFQUFBM1MsRUFBQXhZLEdBQ0EsTUFDQSxPQUNBLEtBQUFBLEVBQ0F3WSxFQUFBOW1CLEtBQUEsR0FFQThtQixJQUFBdG9CLE9BQUEsTUFBQXNvQixJQUFBdG9CLE9BQUEsR0FBQThQLEVBQUEsR0FDQSxNQUNBLE9BQ0FtckIsR0FBQTljLE9BQUFDLGFBQUF0TyxHQUNBLE1BQ0EsU0FDQWcxQixFQUFBL21DLEtBQUEwbUMsYUFBQXhKLEVBQUE5YyxPQUFBQyxhQUFBdE8sS0FFQWcxQixFQUFBN0osRUFBQW5yQixHQUVBL1IsS0FBQW1tQyxjQUFBakosRUFBQW5yQixHQUNBLE1BQ0EsU0FDQXFzQixJQUNBcCtCLEtBQUF1bUMsY0FBQWh0QixFQUFBNmtCLEVBQUF0Z0MsR0FDQXNnQyxHQUFBLEdBRUF1SixFQUFBLEdBQ0FwZCxFQUFBLElBQ0EyUyxFQUFBLEdBQ0F3SyxHQUFBLEVBQ0EsTUFDQSxTQUNBRSxFQUFBNW5DLEtBQUE0bUMsYUFBQTFKLEVBQUE5YyxPQUFBQyxhQUFBdE8sT0FFQTYxQixFQUFBNW5DLEtBQUFxbUMsZUFDQXVCLEVBQUEzSyxLQUFBQyxFQUFBM1MsRUFBQXhZLEdBQ0EsTUFDQSxRQUNBMjFCLE9BQUE1cEMsRUFDQSxNQUNBLFFBQ0E4cEMsS0FDQUYsR0FDQUUsRUFBQXhLLElBQUE3akIsRUFBQW11QixFQUFBNXBDLEdBQ0E4cEMsRUFBQXZLLFNBQ0F1SyxFQUFBLE1BRUEsS0FBQTcxQixJQUNBMDFCLEdBQUEsR0FDQUUsRUFBQSxHQUNBcGQsRUFBQSxJQUNBMlMsRUFBQSxHQUNBd0ssR0FBQSxFQUNBLE1BQ0EsUUFDQXRKLElBQ0FwK0IsS0FBQXVtQyxjQUFBaHRCLEVBQUE2a0IsRUFBQXRnQyxHQUNBc2dDLEdBQUEsR0FFQXVKLEVBQUEsR0FDQSxNQUNBLE9BQ0FBLEdBQUFwdUIsRUFBQTZvQixPQUFBdGtDLEdBQ0EsTUFDQSxPQUNBLEdBQUE2cEMsR0FBQSxLQUFBNTFCLEdBQUEsS0FBQUEsRUFBQSxDQUNBLElBQUErMUIsRUFBQUgsRUFBQTdnQyxRQUFBLEtBQ0EsUUFBQWdoQyxFQUNBOW5DLEtBQUFvbUMsZUFBQSxFQUFBdUIsT0FFQSxDQUNBLElBQUF6SixFQUFBM21CLFNBQUFvd0IsRUFBQS9oQyxVQUFBLEVBQUFraUMsSUFDQTEvQixFQUFBdS9CLEVBQUEvaEMsVUFBQWtpQyxFQUFBLElBQ0FmLEVBQUEvbUMsS0FBQTJtQyxhQUFBekksSUFFQTZJLEVBQUEzK0IsR0FFQXBJLEtBQUFvbUMsY0FBQWxJLEVBQUE5MUIsSUFHQSxLQUFBMkosSUFDQTAxQixHQUFBLEdBQ0FFLEVBQUEsR0FDQXBkLEVBQUEsSUFDQTJTLEVBQUEsR0FDQXdLLEdBQUEsRUFHQTlCLEVBQUEsR0FBQTZCLEVBRUEsSUFBQTdCLElBQUF4SCxFQUNBcCtCLEtBQUF1bUMsY0FBQWh0QixFQUFBNmtCLEVBQUE3a0IsRUFBQXRYLFFBRUEsS0FBQTJqQyxJQUFBOEIsR0FBQUUsR0FDQUEsRUFBQXhLLElBQUE3akIsRUFBQW11QixFQUFBbnVCLEVBQUF0WCxRQUVBakMsS0FBQTZsQyxLQUFBOEIsRUFDQTNuQyxLQUFBK2xDLFNBQUE3SSxFQUNBbDlCLEtBQUE4bEMsUUFBQXZiLEVBQ0F2cUIsS0FBQTZtQyxrQkFBQWUsRUFDQTVuQyxLQUFBNGxDLGdCQUVBaEksRUE3VEEsQ0E4VEN4YyxFQUFBL1gsWUFDRHpMLEVBQUFnZ0MscURDemRBLElBQ0E5OUIsRUFEQUMsRUFBQUMsV0FBQUQsWUFDQUQsRUFBQSxTQUFBMUIsRUFBQTZCLEdBSUEsT0FIQUgsRUFBQXRCLE9BQUEwQixnQkFDQSxDQUFjQyxVQUFBLGNBQWdCQyxPQUFBLFNBQUFoQyxFQUFBNkIsR0FBc0M3QixFQUFBK0IsVUFBQUYsSUFDcEUsU0FBQTdCLEVBQUE2QixHQUE2QixRQUFBTCxLQUFBSyxJQUFBTixlQUFBQyxLQUFBeEIsRUFBQXdCLEdBQUFLLEVBQUFMLE1BQzdCeEIsRUFBQTZCLElBRUEsU0FBQTdCLEVBQUE2QixHQUVBLFNBQUFJLElBQXVCTCxLQUFBTSxZQUFBbEMsRUFEdkIwQixFQUFBMUIsRUFBQTZCLEdBRUE3QixFQUFBc0IsVUFBQSxPQUFBTyxFQUFBekIsT0FBQVksT0FBQWEsSUFBQUksRUFBQVgsVUFBQU8sRUFBQVAsVUFBQSxJQUFBVyxLQUdBN0IsT0FBQUMsZUFBQWIsRUFBQSxjQUE4Q21CLE9BQUEsSUFDOUMsSUFBQWdwQyxFQUF3QnJxQyxFQUFRLElBQ2hDc3FDLEVBQTZCdHFDLEVBQVEsSUFDckN1cUMsRUFBMEJ2cUMsRUFBUSxJQUNsQzZwQixFQUFxQjdwQixFQUFRLEdBQzdCd3FDLEVBQXdCeHFDLEVBQVEsSUFDaEM4QyxFQUFxQjlDLEVBQVEsR0FDN0J5cUMsRUFBd0J6cUMsRUFBUSxJQUNoQ2dxQixFQUF5QmhxQixFQUFRLElBQ2pDMHFDLEVBQWdDMXFDLEVBQVEsSUFDeENxeUIsRUFBQSxTQUFBNW9CLEdBRUEsU0FBQTRvQixFQUFBenVCLEVBQUE0VyxHQUNBLElBQUE3UixFQUFBYyxFQUFBbEosS0FBQStCLFlBQ0FxRyxFQUFBL0UsWUFDQStFLEVBQUFnaUMsV0FBQSxFQUNBaGlDLEVBQUFpaUMsbUJBQUEsRUFDQSxJQUFBdjlCLEVBQUExRSxFQUFBL0UsVUFBQThCLFFBQUEySCxrQkFpQ0EsR0FoQ0ExRSxFQUFBbXBCLGFBQUEsSUFBQWpJLEVBQUEzUCxhQUFBdEYsU0FBQXZILEdBQ0ExRSxFQUFBa2lDLHlCQUFBLElBQUFILEVBQUFJLHdCQUFBbG5DLEdBQ0E0VyxHQUNBN1IsRUFBQW1wQixhQUFBdlgsU0FBQUMsR0FFQTdSLEVBQUFvaUMsY0FBQSxDQUNBLElBQUFWLEVBQUFXLGdCQUFBcmlDLEVBQUEvRSxVQUFBa2lCLGNBQUEsRUFBQW5kLEVBQUFtcEIsYUFBQXpsQixPQUFBMUQsRUFBQWtpQyx5QkFBQXg5QixHQUNBLElBQUFpOUIsRUFBQVcscUJBQUF0aUMsRUFBQS9FLFVBQUFraUIsY0FBQSxFQUFBbmQsRUFBQW1wQixhQUFBemxCLFFBQ0EsSUFBQW0rQixFQUFBVSxnQkFBQXZpQyxFQUFBL0UsVUFBQWtpQixjQUFBLEVBQUFuZCxFQUFBbXBCLGFBQUF6bEIsT0FBQTFELEVBQUEvRSxXQUNBLElBQUEybUMsRUFBQVksa0JBQUF4aUMsRUFBQS9FLFVBQUFraUIsY0FBQSxFQUFBbmQsRUFBQW1wQixhQUFBemxCLFNBRUExRCxFQUFBMGUsV0FBQSxDQUNBbmIsZ0JBQUEsS0FDQUMsaUJBQUEsS0FDQTJLLGdCQUFBLEtBQ0FDLGlCQUFBLEtBQ0FDLGVBQUEsS0FDQUMsY0FBQSxLQUNBRSxrQkFBQSxLQUNBRSxtQkFBQSxLQUNBQyxZQUFBLEtBQ0FDLGFBQUEsS0FDQStQLGdCQUFBLEtBQ0FDLGlCQUFBLE1BRUE1ZSxFQUFBeWlDLGtCQUFBcCtCLE9BQUFELGlCQUNBcEUsRUFBQTBpQyxvQkFDQTFpQyxFQUFBK00sbUJBQ0EvTSxFQUFBMmlDLGlCQUFBLElBQUFiLEVBQUFydUIsZ0JBQUF6VCxFQUFBL0UsVUFBQStFLEVBQUE0aUMsWUFBQTNwQyxLQUFBK0csSUFDQUEsRUFBQXFvQixrQkFBQSxJQUFBaEgsRUFBQWpILGlCQUNBcGEsRUFBQXFvQixrQkFBQWhPLFlBQUEsV0FBeUQsT0FBQXJhLEVBQUFvcEIsZUFBQS9rQixPQUFBRCxvQkFDekRwRSxFQUFBRyxTQUFBSCxFQUFBcW9CLG1CQUNBLHlCQUFBaGtCLE9BQUEsQ0FDQSxJQUFBdytCLEVBQUEsSUFBQUMscUJBQUEsU0FBQXZuQixHQUFvRSxPQUFBdmIsRUFBQStpQyxxQkFBQXhuQixFQUFBLEtBQTJDLENBQUd5bkIsVUFBQSxJQUNsSEgsRUFBQUksUUFBQWpqQyxFQUFBL0UsVUFBQTRaLFNBQ0E3VSxFQUFBRyxTQUFBLENBQTRCRyxRQUFBLFdBQXVCLE9BQUF1aUMsRUFBQUssZ0JBRW5ELE9BQUFsakMsRUEwSEEsT0F0S0F0RyxFQUFBZ3dCLEVBQUE1b0IsR0E4Q0E0b0IsRUFBQXJ3QixVQUFBaUgsUUFBQSxXQUNBUSxFQUFBekgsVUFBQWlILFFBQUExSSxLQUFBK0IsTUFDQUEsS0FBQXlvQyxjQUFBai9CLFFBQUEsU0FBQXpMLEdBQWlELE9BQUFBLEVBQUE0SSxhQUVqRG9wQixFQUFBcndCLFVBQUEwcEMscUJBQUEsU0FBQW5xQixHQUNBamYsS0FBQXFvQyxVQUFBLElBQUFwcEIsRUFBQXVxQixtQkFDQXhwQyxLQUFBcW9DLFdBQUFyb0MsS0FBQXNvQyxtQkFDQXRvQyxLQUFBc0IsVUFBQTRZLFFBQUEsRUFBQWxhLEtBQUFzQixVQUFBc0IsS0FBQSxJQUdBbXRCLEVBQUFyd0IsVUFBQSt2QixlQUFBLFNBQUFobEIsR0FDQXpLLEtBQUE4b0Msb0JBQUFyK0IsSUFDQXpLLEtBQUE4b0Msa0JBQUFyK0IsRUFDQXpLLEtBQUFtc0IsU0FBQW5zQixLQUFBc0IsVUFBQW9CLEtBQUExQyxLQUFBc0IsVUFBQXNCLFFBR0FtdEIsRUFBQXJ3QixVQUFBdVksU0FBQSxTQUFBQyxHQUNBLElBQUE3UixFQUFBckcsS0FZQSxPQVhBQSxLQUFBd3ZCLGFBQUF2WCxTQUFBQyxHQUNBbFksS0FBQXlvQyxjQUFBai9CLFFBQUEsU0FBQXpMLEdBQ0FBLEVBQUFnVyxlQUFBMU4sRUFBQS9FLFVBQUErRSxFQUFBbXBCLGFBQUF6bEIsUUFDQWhNLEVBQUFvZixNQUFBOVcsRUFBQS9FLGFBRUF0QixLQUFBcW9DLFVBQ0Fyb0MsS0FBQXNvQyxtQkFBQSxFQUdBdG9DLEtBQUFzQixVQUFBNFksUUFBQSxFQUFBbGEsS0FBQXNCLFVBQUFzQixLQUFBLEdBRUE1QyxLQUFBd3ZCLGFBQUF6bEIsUUFFQWdtQixFQUFBcndCLFVBQUF5c0IsU0FBQSxTQUFBenBCLEVBQUFFLEdBQ0EsSUFBQXlELEVBQUFyRyxLQUNBQSxLQUFBK29DLG9CQUNBL29DLEtBQUF5b0MsY0FBQWovQixRQUFBLFNBQUF6TCxHQUFpRCxPQUFBQSxFQUFBaUcsT0FBQXFDLEVBQUEvRSxVQUFBK0UsRUFBQTBlLGNBQ2pEL2tCLEtBQUFxb0MsVUFDQXJvQyxLQUFBc29DLG1CQUFBLEVBR0F0b0MsS0FBQXNCLFVBQUE0WSxRQUFBLEVBQUFsYSxLQUFBc0IsVUFBQXNCLEtBQUEsR0FFQTVDLEtBQUFzQixVQUFBa2lCLGNBQUE5USxNQUFBa0MsTUFBQTVVLEtBQUEra0IsV0FBQS9QLFlBQUEsS0FDQWhWLEtBQUFzQixVQUFBa2lCLGNBQUE5USxNQUFBb0MsT0FBQTlVLEtBQUEra0IsV0FBQTlQLGFBQUEsS0FDQWpWLEtBQUF1SCxLQUFBLFVBQ0FxTixNQUFBNVUsS0FBQStrQixXQUFBL1AsWUFDQUYsT0FBQTlVLEtBQUEra0IsV0FBQTlQLGdCQUdBOGEsRUFBQXJ3QixVQUFBMnNCLGtCQUFBLFdBQ0Fyc0IsS0FBQW1zQixTQUFBbnNCLEtBQUFzQixVQUFBb0IsS0FBQTFDLEtBQUFzQixVQUFBc0IsT0FFQW10QixFQUFBcndCLFVBQUEyVCxPQUFBLFdBQ0EsSUFBQWhOLEVBQUFyRyxLQUNBQSxLQUFBeXBDLGNBQUEsU0FBQTFyQyxHQUF5QyxPQUFBQSxFQUFBc1YsT0FBQWhOLEVBQUEvRSxjQUV6Q3l1QixFQUFBcndCLFVBQUE0VCxRQUFBLFdBQ0EsSUFBQWpOLEVBQUFyRyxLQUNBQSxLQUFBeXBDLGNBQUEsU0FBQTFyQyxHQUF5QyxPQUFBQSxFQUFBdVYsUUFBQWpOLEVBQUEvRSxjQUV6Q3l1QixFQUFBcndCLFVBQUFpVSxtQkFBQSxTQUFBQyxFQUFBQyxFQUFBQyxHQUNBLElBQUF6TixFQUFBckcsVUFDQSxJQUFBOFQsSUFBMENBLEdBQUEsR0FDMUM5VCxLQUFBeXBDLGNBQUEsU0FBQTFyQyxHQUF5QyxPQUFBQSxFQUFBNFYsbUJBQUF0TixFQUFBL0UsVUFBQXNTLEVBQUFDLEVBQUFDLE1BRXpDaWMsRUFBQXJ3QixVQUFBNlQsYUFBQSxXQUNBLElBQUFsTixFQUFBckcsS0FDQUEsS0FBQXlwQyxjQUFBLFNBQUExckMsR0FBeUMsT0FBQUEsRUFBQXdWLGFBQUFsTixFQUFBL0UsY0FFekN5dUIsRUFBQXJ3QixVQUFBMFQsaUJBQUEsV0FDQSxJQUFBL00sRUFBQXJHLEtBQ0FBLEtBQUF3dkIsYUFBQXprQixrQkFBQS9LLEtBQUFzQixVQUFBOEIsUUFBQTJILGtCQUNBL0ssS0FBQXlwQyxjQUFBLFNBQUExckMsR0FBeUMsT0FBQUEsRUFBQXFWLGlCQUFBL00sRUFBQS9FLGNBRXpDeXVCLEVBQUFyd0IsVUFBQStCLE1BQUEsV0FDQSxJQUFBNEUsRUFBQXJHLEtBQ0FBLEtBQUF5cEMsY0FBQSxTQUFBMXJDLEdBQXlDLE9BQUFBLEVBQUFvZixNQUFBOVcsRUFBQS9FLGNBRXpDeXVCLEVBQUFyd0IsVUFBQStwQyxjQUFBLFNBQUFDLEdBQ0ExcEMsS0FBQXFvQyxVQUNBcm9DLEtBQUFzb0MsbUJBQUEsRUFHQXRvQyxLQUFBeW9DLGNBQUFqL0IsUUFBQSxTQUFBekwsR0FBcUQsT0FBQTJyQyxFQUFBM3JDLE1BR3JEZ3lCLEVBQUFyd0IsVUFBQTZ5QixZQUFBLFNBQUEzZSxFQUFBQyxHQUNBN1QsS0FBQXFvQyxVQUNBcm9DLEtBQUFzb0MsbUJBQUEsRUFHQXRvQyxLQUFBZ3BDLGlCQUFBOXVCLFFBQUF0RyxFQUFBQyxJQUVBa2MsRUFBQXJ3QixVQUFBdXBDLFlBQUEsU0FBQXIxQixFQUFBQyxHQUNBLElBQUF4TixFQUFBckcsS0FDQUEsS0FBQXlvQyxjQUFBai9CLFFBQUEsU0FBQXpMLEdBQWlELE9BQUFBLEVBQUF5VixjQUFBbk4sRUFBQS9FLFVBQUFzUyxFQUFBQyxLQUNqRDdULEtBQUFzQixVQUFBaUcsS0FBQSxXQUF3Q3FNLFFBQUFDLFNBRXhDa2MsRUFBQXJ3QixVQUFBcXBDLGtCQUFBLFdBQ0Evb0MsS0FBQXNCLFVBQUFtaUIsWUFBQTdPLE9BQUE1VSxLQUFBc0IsVUFBQW1pQixZQUFBM08sU0FHQTlVLEtBQUEra0IsV0FBQW5iLGdCQUFBbkYsS0FBQXNoQixNQUFBL2xCLEtBQUFzQixVQUFBbWlCLFlBQUE3TyxNQUFBbEssT0FBQUQsa0JBQ0F6SyxLQUFBK2tCLFdBQUFsYixpQkFBQXBGLEtBQUFxZ0IsS0FBQTlrQixLQUFBc0IsVUFBQW1pQixZQUFBM08sT0FBQXBLLE9BQUFELGtCQUNBekssS0FBQStrQixXQUFBdFEsaUJBQUFoUSxLQUFBc2hCLE1BQUEvbEIsS0FBQStrQixXQUFBbGIsaUJBQUE3SixLQUFBc0IsVUFBQThCLFFBQUFrbEIsWUFDQXRvQixLQUFBK2tCLFdBQUFwUSxjQUFBLElBQUEzVSxLQUFBc0IsVUFBQThCLFFBQUFrbEIsV0FBQSxFQUFBN2pCLEtBQUF1MkIsT0FBQWg3QixLQUFBK2tCLFdBQUF0USxpQkFBQXpVLEtBQUEra0IsV0FBQWxiLGtCQUFBLEdBQ0E3SixLQUFBK2tCLFdBQUF2USxnQkFBQXhVLEtBQUEra0IsV0FBQW5iLGdCQUFBbkYsS0FBQXUyQixNQUFBaDdCLEtBQUFzQixVQUFBOEIsUUFBQW1sQixlQUNBdm9CLEtBQUEra0IsV0FBQXJRLGVBQUFqUSxLQUFBc2hCLE1BQUEvbEIsS0FBQXNCLFVBQUE4QixRQUFBbWxCLGNBQUEsR0FDQXZvQixLQUFBK2tCLFdBQUFoUSxtQkFBQS9VLEtBQUFzQixVQUFBc0IsS0FBQTVDLEtBQUEra0IsV0FBQXRRLGlCQUNBelUsS0FBQStrQixXQUFBbFEsa0JBQUE3VSxLQUFBc0IsVUFBQW9CLEtBQUExQyxLQUFBK2tCLFdBQUF2USxnQkFDQXhVLEtBQUEra0IsV0FBQTlQLGFBQUF4USxLQUFBdTJCLE1BQUFoN0IsS0FBQStrQixXQUFBaFEsbUJBQUFySyxPQUFBRCxrQkFDQXpLLEtBQUEra0IsV0FBQS9QLFlBQUF2USxLQUFBdTJCLE1BQUFoN0IsS0FBQStrQixXQUFBbFEsa0JBQUFuSyxPQUFBRCxrQkFDQXpLLEtBQUEra0IsV0FBQUUsaUJBQUFqbEIsS0FBQStrQixXQUFBOVAsYUFBQWpWLEtBQUFzQixVQUFBc0IsS0FDQTVDLEtBQUEra0IsV0FBQUMsZ0JBQUFobEIsS0FBQStrQixXQUFBL1AsWUFBQWhWLEtBQUFzQixVQUFBb0IsT0FFQXF0QixFQUFBcndCLFVBQUFzYyx3QkFBQSxTQUFBclQsR0FDQSxPQUFBM0ksS0FBQXVvQyx5QkFBQXZzQix3QkFBQXJULElBRUFvbkIsRUFBQXJ3QixVQUFBdWMsMEJBQUEsU0FBQUMsR0FDQSxPQUFBbGMsS0FBQXVvQyx5QkFBQXRzQiwwQkFBQUMsSUFFQTZULEVBdktBLENBd0tDdnZCLEVBQUFnSCxjQUNENUosRUFBQW15Qix5Q0NoTUEsSUFDQWp3QixFQURBQyxFQUFBQyxXQUFBRCxZQUNBRCxFQUFBLFNBQUExQixFQUFBNkIsR0FJQSxPQUhBSCxFQUFBdEIsT0FBQTBCLGdCQUNBLENBQWNDLFVBQUEsY0FBZ0JDLE9BQUEsU0FBQWhDLEVBQUE2QixHQUFzQzdCLEVBQUErQixVQUFBRixJQUNwRSxTQUFBN0IsRUFBQTZCLEdBQTZCLFFBQUFMLEtBQUFLLElBQUFOLGVBQUFDLEtBQUF4QixFQUFBd0IsR0FBQUssRUFBQUwsTUFDN0J4QixFQUFBNkIsSUFFQSxTQUFBN0IsRUFBQTZCLEdBRUEsU0FBQUksSUFBdUJMLEtBQUFNLFlBQUFsQyxFQUR2QjBCLEVBQUExQixFQUFBNkIsR0FFQTdCLEVBQUFzQixVQUFBLE9BQUFPLEVBQUF6QixPQUFBWSxPQUFBYSxJQUFBSSxFQUFBWCxVQUFBTyxFQUFBUCxVQUFBLElBQUFXLEtBR0E3QixPQUFBQyxlQUFBYixFQUFBLGNBQThDbUIsT0FBQSxJQUM5QyxJQUFBZ1MsRUFBZXJULEVBQVEsR0FDdkJnRCxFQUFjaEQsRUFBUSxHQUN0QmlzQyxFQUFrQmpzQyxFQUFRLElBQzFCa3NDLEVBQXdCbHNDLEVBQVEsR0FDaENzVCxFQUF1QnRULEVBQVEsR0FDL0JnckMsRUFBQSxTQUFBdmhDLEdBRUEsU0FBQXVoQyxFQUFBbUIsRUFBQXo0QixFQUFBckgsRUFBQSsvQixFQUFBNTJCLEdBQ0EsSUFBQTdNLEVBQUFjLEVBQUFsSixLQUFBK0IsS0FBQTZwQyxFQUFBLE9BQUF6NEIsRUFBQThCLEVBQUFuSixJQUFBL0osS0FJQSxPQUhBcUcsRUFBQTBqQyx1QkFBQSxHQUNBMWpDLEVBQUEyakMsT0FBQSxJQUFBTCxFQUFBTSxVQUNBNWpDLEVBQUFraUMseUJBQUF1QixFQUNBempDLEVBaUtBLE9BdktBdEcsRUFBQTJvQyxFQUFBdmhDLEdBUUF1aEMsRUFBQWhwQyxVQUFBc0UsT0FBQSxTQUFBOEYsRUFBQXFJLEdBQ0FoTCxFQUFBekgsVUFBQXNFLE9BQUEvRixLQUFBK0IsS0FBQThKLEVBQUFxSSxHQUNBLElBQUErM0IsRUFBQWxxQyxLQUFBZ1csU0FBQWxNLEdBQUEsTUFDQTlKLEtBQUFtcUMsa0JBQUFoNEIsRUFBQXZJLGlCQUFBNUosS0FBQW9xQyxpQkFBQUYsSUFDQWxxQyxLQUFBbXFDLGdCQUFBaDRCLEVBQUF2SSxnQkFDQTVKLEtBQUFvcUMsZUFBQUYsRUFDQWxxQyxLQUFBK3BDLHVCQUFBLElBRUEvcEMsS0FBQWdxQyxPQUFBdm9DLFFBQ0F6QixLQUFBZ3FDLE9BQUFobUMsT0FBQThGLEVBQUFwSCxLQUFBb0gsRUFBQWxILE9BRUE4bEMsRUFBQWhwQyxVQUFBeWQsTUFBQSxTQUFBclQsR0FDQTlKLEtBQUFncUMsT0FBQXZvQyxRQUNBekIsS0FBQW1ULFlBRUF1MUIsRUFBQWhwQyxVQUFBMnFDLGFBQUEsU0FBQXZnQyxFQUFBd2dDLEVBQUFDLEVBQUFDLEVBQUF6RCxHQUNBLFFBQUEvakMsRUFBQXNuQyxFQUE4QnRuQyxHQUFBdW5DLEVBQWN2bkMsSUFJNUMsSUFIQSxJQUFBMC9CLEVBQUExL0IsRUFBQThHLEVBQUFraUIsT0FBQS9vQixNQUNBZ0MsRUFBQTZFLEVBQUFraUIsT0FBQWhxQixNQUFBckQsSUFBQStqQyxHQUNBK0gsRUFBQUQsSUFBQUUsb0JBQUFoSSxHQUFBLEdBQ0EvK0IsRUFBQSxFQUEyQkEsRUFBQW1HLEVBQUFwSCxLQUFtQmlCLElBQUEsQ0FDOUMsSUFBQW1TLEVBQUE3USxFQUFBdEcsSUFBQWdGLEdBQ0FvTyxFQUFBK0QsRUFBQS9FLEVBQUEvUCxzQkFDQThRLEVBQUFnRSxFQUFBL0UsRUFBQWpRLHNCQUNBeUIsRUFBQXVULEVBQUEvRSxFQUFBbFEsc0JBQ0ErVCxFQUFBa0IsRUFBQS9FLEVBQUFoUSx1QkFDQTRwQyxHQUFBLEVBQ0FDLEVBQUFqbkMsRUFDQSxPQUFBaVIsRUFBQSxDQUdBLEdBQUE2MUIsRUFBQXhvQyxPQUFBLEdBQUEwQixJQUFBOG1DLEVBQUEsT0FDQUUsR0FBQSxFQUNBLElBQUF6aUMsRUFBQXVpQyxFQUFBcmEsUUFDQXRlLEVBQUFoSSxFQUFBa2lCLE9BQUE5bUIsNEJBQUF3OUIsR0FBQSxFQUFBeDZCLEVBQUEsR0FBQUEsRUFBQSxJQUNBME0sRUFBQTFNLEVBQUEsR0FBQUEsRUFBQSxHQUNBNkosRUFBQWtrQixJQUNBMlUsRUFBQTFpQyxFQUFBLE1BRUF5aUMsR0FBQTNxQyxLQUFBNnFDLGVBQUEvMEIsSUFDQTgwQixFQUFBM2xDLEVBQUFoRCxPQUFBLEdBQUFnRCxFQUFBdEcsSUFBQWlzQyxFQUFBLEdBQUE3NUIsRUFBQS9QLHdCQUFBK1AsRUFBQTNQLGlCQUNBd1QsRUFBQSxHQUdBLElBQUF5dUIsRUFBQTlnQyxHQUFBLEdBQ0F5UCxFQUFBLElBQUF6UCxFQUNBMFAsRUFBQTFQLEdBQUEsTUFDQSxLQUFBOGdDLEVBQUEsQ0FDQSxJQUFBeUgsRUFBQTk0QixFQUNBQSxFQUFBQyxHQUNBQSxFQUFBNjRCLEtBQ0FwcUMsRUFBQUUsZ0JBQ0FxUixFQUFBdlIsRUFBQTJILHdCQUVBMkosSUFBQXRSLEVBQUFFLGdCQUNBb1IsRUFBQXRSLEVBQUEySCx3QkFHQTArQixFQUFBaDFCLEVBQUFELEVBQUE4QyxFQUFBalIsRUFBQVgsRUFBQWlQLEVBQUFELEVBQUFxeEIsR0FDQTEvQixFQUFBaW5DLEtBSUFsQyxFQUFBaHBDLFVBQUFxckMsZ0JBQUEsU0FBQWpoQyxFQUFBd2dDLEVBQUFDLEdBQ0EsSUFBQWxrQyxFQUFBckcsS0FDQW1nQixFQUFBbmdCLEtBQUFnVCxLQUNBdFEsRUFBQW9ILEVBQUFwSCxLQUNBc29DLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEtBQ0EvcUIsRUFBQTFKLE9BQ0F6VyxLQUFBcXFDLGFBQUF2Z0MsRUFBQXdnQyxFQUFBQyxFQUFBLGNBQUF4NEIsRUFBQUQsRUFBQThDLEVBQUFqUixFQUFBWCxFQUFBaVAsRUFBQUQsRUFBQXF4QixHQUNBLElBQUE4SCxFQUFBLEtBQ0FuNUIsSUFBQXRSLEVBQUEySCx1QkFDQThpQyxFQUFBOWtDLEVBQUFpTCxRQUFBckgsV0FBQTBMLElBRUEzRSxFQUFBN0YsV0FBQTZHLEtBQ0FtNUIsRUFBQTlrQyxFQUFBaUwsUUFBQWhILEtBQUEwSCxHQUFBMkQsS0FFQSxPQUFBdTFCLElBQ0FGLEVBQUFybkMsRUFDQXNuQyxFQUFBam9DLEdBRUFBLElBQUFpb0MsR0FDQTlxQixFQUFBekssVUFBQXcxQixFQUNBN2tDLEVBQUE2TyxVQUFBODFCLEVBQUFDLEVBQUF2b0MsRUFBQXNvQyxFQUFBLEdBQ0FBLEVBQUFybkMsRUFDQXNuQyxFQUFBam9DLEdBRUFrb0MsSUFBQUMsSUFDQWhyQixFQUFBekssVUFBQXcxQixFQUNBN2tDLEVBQUE2TyxVQUFBODFCLEVBQUFDLEVBQUF0bkMsRUFBQXFuQyxFQUFBLEdBQ0FBLEVBQUFybkMsRUFDQXNuQyxFQUFBam9DLEdBRUFrb0MsRUFBQUMsSUFFQSxPQUFBRCxJQUNBL3FCLEVBQUF6SyxVQUFBdzFCLEVBQ0FsckMsS0FBQWtWLFVBQUE4MUIsRUFBQUMsRUFBQXZvQyxFQUFBc29DLEVBQUEsSUFFQTdxQixFQUFBeEosV0FFQSt4QixFQUFBaHBDLFVBQUEwckMsZ0JBQUEsU0FBQXRoQyxFQUFBd2dDLEVBQUFDLEdBQ0EsSUFBQWxrQyxFQUFBckcsS0FDQUEsS0FBQXFxQyxhQUFBdmdDLEVBQUF3Z0MsRUFBQUMsRUFBQXZxQyxLQUFBdW9DLHlCQUFBLFNBQUF4MkIsRUFBQUQsRUFBQThDLEVBQUFqUixFQUFBWCxFQUFBaVAsRUFBQUQsRUFBQXF4QixHQUNBLEdBQUFBLElBR0EsRUFBQUEsSUFDQWg5QixFQUFBMk0sS0FBQXlELE9BQ0F4RSxJQUFBdlIsRUFBQTJILHVCQUNBaEMsRUFBQTJNLEtBQUEwQyxVQUFBclAsRUFBQWlMLFFBQUFwSCxXQUFBeUwsSUFFQTNFLEVBQUE3RixXQUFBOEcsR0FDQTVMLEVBQUEyTSxLQUFBMEMsVUFBQXJQLEVBQUFpTCxRQUFBaEgsS0FBQTJILEdBQUEwRCxJQUdBdFAsRUFBQTJNLEtBQUEwQyxVQUFBclAsRUFBQWlMLFFBQUFySCxXQUFBMEwsSUFFQXRQLEVBQUErTyxzQkFBQXpSLEVBQUFYLEVBQUE0UixHQUNBdk8sRUFBQTJNLEtBQUEyRCxXQUVBdFEsRUFBQStQLFVBQUF0TSxFQUFBZ0ksRUFBQUMsRUFBQTZDLEVBQUFqUixFQUFBWCxFQUFBaVAsRUFBQUQsS0FBQSxFQUFBcXhCLE1BQUEsR0FBQUEsTUFBQSxHQUFBQSxRQUdBcUYsRUFBQWhwQyxVQUFBOFQsY0FBQSxTQUFBMUosRUFBQXdnQyxFQUFBQyxHQUNBLElBQUF2cUMsS0FBQWdxQyxPQUFBcUIsTUFBQXBwQyxTQUdBakMsS0FBQStTLFlBQ0EvUyxLQUFBK1MsV0FBQTZHLGFBRUE1WixLQUFBNFYsV0FBQSxFQUFBMDBCLEVBQUF4Z0MsRUFBQXBILEtBQUE2bkMsRUFBQUQsRUFBQSxHQUNBdHFDLEtBQUErcUMsZ0JBQUFqaEMsRUFBQXdnQyxFQUFBQyxHQUNBdnFDLEtBQUFvckMsZ0JBQUF0aEMsRUFBQXdnQyxFQUFBQyxLQUVBN0IsRUFBQWhwQyxVQUFBMFQsaUJBQUEsU0FBQXRKLEdBQ0E5SixLQUFBa1UsZ0JBQUFwSyxJQUFBMUcsUUFBQTJILG9CQUVBMjlCLEVBQUFocEMsVUFBQW1yQyxlQUFBLFNBQUEvMEIsR0FDQSxPQUFBQSxFQUFBL0UsRUFBQWhRLHVCQUNBLFNBR0EsR0FEQStVLEVBQUEvRSxFQUFBL1Asc0JBQ0EsSUFDQSxTQUVBLElBQUF5RSxFQUFBcVEsRUFBQS9FLEVBQUFqUSxzQkFDQSxHQUFBZCxLQUFBK3BDLHVCQUFBcHFDLGVBQUE4RixHQUNBLE9BQUF6RixLQUFBK3BDLHVCQUFBdGtDLEdBRUF6RixLQUFBZ1QsS0FBQXlELE9BQ0F6VyxLQUFBZ1QsS0FBQStDLEtBQUEvVixLQUFBb3FDLGVBQ0EsSUFBQWtCLEVBQUE3bUMsS0FBQXNoQixNQUFBL2xCLEtBQUFnVCxLQUFBdTRCLFlBQUE5bEMsR0FBQW1QLE9BQUE1VSxLQUFBbXFDLGdCQUdBLE9BRkFucUMsS0FBQWdULEtBQUEyRCxVQUNBM1csS0FBQStwQyx1QkFBQXRrQyxHQUFBNmxDLEVBQ0FBLEdBRUE1QyxFQXhLQSxDQXlLQ2tCLEVBQUEzNEIsaUJBQ0RyVCxFQUFBOHFDLGdEQzdMQWxxQyxPQUFBQyxlQUFBYixFQUFBLGNBQThDbUIsT0FBQSxJQUM5QyxJQUFBa3JDLEVBQUEsV0FDQSxTQUFBQSxJQUNBanFDLEtBQUFxckMsTUFBQSxHQXFCQSxPQW5CQXBCLEVBQUF2cUMsVUFBQXNFLE9BQUEsU0FBQTRRLEVBQUFFLEdBQ0EsUUFBQW5SLEVBQUEsRUFBdUJBLEVBQUFpUixFQUFXalIsSUFBQSxDQUNsQzNELEtBQUFxckMsTUFBQXBwQyxRQUFBMEIsR0FDQTNELEtBQUFxckMsTUFBQTVuQyxLQUFBLElBRUEsUUFBQVQsRUFBQWhELEtBQUFxckMsTUFBQTFuQyxHQUFBMUIsT0FBOENlLEVBQUE4UixFQUFZOVIsSUFDMURoRCxLQUFBcXJDLE1BQUExbkMsR0FBQUYsS0FBQSxNQUVBekQsS0FBQXFyQyxNQUFBMW5DLEdBQUExQixPQUFBNlMsRUFFQTlVLEtBQUFxckMsTUFBQXBwQyxPQUFBMlMsR0FFQXExQixFQUFBdnFDLFVBQUErQixNQUFBLFdBQ0EsUUFBQWtDLEVBQUEsRUFBdUJBLEVBQUEzRCxLQUFBcXJDLE1BQUFwcEMsT0FBdUIwQixJQUM5QyxRQUFBWCxFQUFBLEVBQTJCQSxFQUFBaEQsS0FBQXFyQyxNQUFBMW5DLEdBQUExQixPQUEwQmUsSUFDckRoRCxLQUFBcXJDLE1BQUExbkMsR0FBQVgsR0FBQSxNQUlBaW5DLEVBdkJBLEdBeUJBcnNDLEVBQUFxc0MsMENDMUJBLElBQ0FucUMsRUFEQUMsRUFBQUMsV0FBQUQsWUFDQUQsRUFBQSxTQUFBMUIsRUFBQTZCLEdBSUEsT0FIQUgsRUFBQXRCLE9BQUEwQixnQkFDQSxDQUFjQyxVQUFBLGNBQWdCQyxPQUFBLFNBQUFoQyxFQUFBNkIsR0FBc0M3QixFQUFBK0IsVUFBQUYsSUFDcEUsU0FBQTdCLEVBQUE2QixHQUE2QixRQUFBTCxLQUFBSyxJQUFBTixlQUFBQyxLQUFBeEIsRUFBQXdCLEdBQUFLLEVBQUFMLE1BQzdCeEIsRUFBQTZCLElBRUEsU0FBQTdCLEVBQUE2QixHQUVBLFNBQUFJLElBQXVCTCxLQUFBTSxZQUFBbEMsRUFEdkIwQixFQUFBMUIsRUFBQTZCLEdBRUE3QixFQUFBc0IsVUFBQSxPQUFBTyxFQUFBekIsT0FBQVksT0FBQWEsSUFBQUksRUFBQVgsVUFBQU8sRUFBQVAsVUFBQSxJQUFBVyxLQUdBN0IsT0FBQUMsZUFBQWIsRUFBQSxjQUE4Q21CLE9BQUEsSUFDOUMsSUFBQTJCLEVBQWNoRCxFQUFRLEdBQ3RCOHRDLEVBQXNCOXRDLEVBQVEsSUFDOUI2cEIsRUFBcUI3cEIsRUFBUSxHQUM3Qit0QyxFQUEyQi90QyxFQUFRLElBQ25DZ3VDLEVBQWVodUMsRUFBUSxJQUN2QjZoQixFQUFpQjdoQixFQUFRLEdBQ3pCaXVDLEVBQUEsS0FDQUMsRUFBQSxLQUNBQyxFQUFBLENBQ0FsMkIsSUFBQSxtQkFDQXpLLEtBQUEsR0FJQSxTQUFBNGdDLEVBQUFDLEdBQ0EsT0FBQUEsRUFBQWg2QixNQUFBLEdBQUFnNkIsRUFBQS81QixJQUFBLEdBQUErNUIsRUFBQTk1QixJQUFBLEdBQUE4NUIsRUFBQTc1QixLQUFBLE1BQUE2NUIsRUFBQTU1QixJQUFBLE1BQUE0NUIsRUFBQTM1QixPQUFBLEtBRUF4VSxFQUFBa3VDLG1CQUNBLElBQUFFLEVBQUEsU0FBQTdrQyxHQUVBLFNBQUE2a0MsRUFBQTE1QixFQUFBMjVCLEdBQ0EsSUFBQTVsQyxFQUFBYyxFQUFBbEosS0FBQStCLFlBQ0FxRyxFQUFBNGxDLFVBQ0E1bEMsRUFBQTZsQyxrQkFBQSxFQUNBN2xDLEVBQUE4bEMsdUJBQUEsR0FDQTlsQyxFQUFBK2xDLHFCQUFBLEtBQ0EvbEMsRUFBQWdtQyxRQUFBLEtBQ0FobUMsRUFBQWltQyxhQUFBaDZCLEVBQUFDLGNBQUEsVUFDQWxNLEVBQUFpbUMsYUFBQTEzQixNQUFBKzJCLEVBQ0F0bEMsRUFBQWltQyxhQUFBeDNCLE9BQUE4MkIsRUFDQXZsQyxFQUFBa21DLFVBQUFsbUMsRUFBQWltQyxhQUFBcjVCLFdBQUEsTUFBK0RDLE9BQUEsSUFDL0QsSUFBQXM1QixFQUFBbDZCLEVBQUFDLGNBQUEsVUFDQWk2QixFQUFBNTNCLE1BQUF2TyxFQUFBNGxDLFFBQUFyaUMsZ0JBQ0E0aUMsRUFBQTEzQixPQUFBek8sRUFBQTRsQyxRQUFBcGlDLGlCQUNBeEQsRUFBQW9tQyxRQUFBRCxFQUFBdjVCLFdBQUEsTUFBb0RDLE1BQUE3TSxFQUFBNGxDLFFBQUFsaEMsb0JBQ3BEMUUsRUFBQXFtQyxPQUFBam9DLEtBQUFzaEIsTUFBQTRsQixFQUFBdGxDLEVBQUE0bEMsUUFBQXJpQyxpQkFDQXZELEVBQUFzbUMsUUFBQWxvQyxLQUFBc2hCLE1BQUE2bEIsRUFBQXZsQyxFQUFBNGxDLFFBQUFwaUMsa0JBQ0EsSUFBQStpQyxFQUFBdm1DLEVBQUFxbUMsT0FBQXJtQyxFQUFBc21DLFFBR0EsT0FGQXRtQyxFQUFBd21DLFVBQUEsSUFBQW5CLEVBQUE3eEIsUUFBQSt5QixHQUNBdm1DLEVBQUF3bUMsVUFBQUMsU0FBQUYsR0FDQXZtQyxFQThJQSxPQW5LQXRHLEVBQUFpc0MsRUFBQTdrQyxHQXVCQTZrQyxFQUFBdHNDLFVBQUFpSCxRQUFBLFdBQ0EsT0FBQTNHLEtBQUFvc0MsdUJBQ0ExaEMsT0FBQWtZLGFBQUE1aUIsS0FBQW9zQyxzQkFDQXBzQyxLQUFBb3NDLHFCQUFBLE9BR0FKLEVBQUF0c0MsVUFBQWthLFdBQUEsV0FDQTVaLEtBQUFrc0Msa0JBQUEsR0FFQUYsRUFBQXRzQyxVQUFBNlcsS0FBQSxTQUFBNEosRUFBQTRyQixFQUFBcG9DLEVBQUFYLEdBQ0EsUUFBQStvQyxFQUFBaDZCLEtBQ0EsU0FFQSxJQUFBL1IsS0FBQStzQyxVQUFBaEIsR0FDQSxTQUVBLElBQUFpQixFQUFBbEIsRUFBQUMsR0FDQWtCLEVBQUFqdEMsS0FBQTZzQyxVQUFBbHVDLElBQUFxdUMsR0FDQSxHQUFBQyxRQUVBLE9BREFqdEMsS0FBQWt0QyxlQUFBL3NCLEVBQUE4c0IsRUFBQXRwQyxFQUFBWCxJQUNBLEVBRUEsR0FBQWhELEtBQUFrc0Msa0JBcERBLElBb0RBLENBQ0EsSUFBQXhpQyxPQUFBLEVBRUFBLEVBREExSixLQUFBNnNDLFVBQUFNLEtBQUFudEMsS0FBQTZzQyxVQUFBRCxTQUNBNXNDLEtBQUE2c0MsVUFBQU0sS0FHQW50QyxLQUFBNnNDLFVBQUFPLE9BQUExakMsTUFFQSxJQUFBMmpDLEVBQUFydEMsS0FBQXN0QyxhQUFBdkIsRUFBQXJpQyxHQUdBLE9BRkExSixLQUFBNnNDLFVBQUF4cUMsSUFBQTJxQyxFQUFBSyxHQUNBcnRDLEtBQUFrdEMsZUFBQS9zQixFQUFBa3RCLEVBQUExcEMsRUFBQVgsSUFDQSxFQUVBLFVBRUFncEMsRUFBQXRzQyxVQUFBcXRDLFVBQUEsU0FBQWhCLEdBQ0EsT0FBQUEsRUFBQWg2QixLQUFBLEtBRUFpNkIsRUFBQXRzQyxVQUFBNnRDLGVBQUEsU0FBQTdqQyxHQUNBLE9BQUFBLEVBQUExSixLQUFBMHNDLE9BQUExc0MsS0FBQWlzQyxRQUFBcmlDLGlCQUVBb2lDLEVBQUF0c0MsVUFBQTh0QyxlQUFBLFNBQUE5akMsR0FDQSxPQUFBakYsS0FBQXNoQixNQUFBcmMsRUFBQTFKLEtBQUEwc0MsUUFBQTFzQyxLQUFBaXNDLFFBQUFwaUMsa0JBRUFtaUMsRUFBQXRzQyxVQUFBd3RDLGVBQUEsU0FBQS9zQixFQUFBOHNCLEVBQUF0cEMsRUFBQVgsR0FDQSxJQUFBaXFDLEVBQUF0dEIsUUFBQSxDQUdBLElBQUE4dEIsRUFBQXp0QyxLQUFBdXRDLGVBQUFOLEVBQUF2akMsT0FDQWdrQyxFQUFBMXRDLEtBQUF3dEMsZUFBQVAsRUFBQXZqQyxPQUNBeVcsRUFBQXd0QixVQUFBVixFQUFBVyxTQUFBNXRDLEtBQUFxc0MsUUFBQXJzQyxLQUFBc3NDLGFBQUFtQixFQUFBQyxFQUFBMXRDLEtBQUFpc0MsUUFBQXJpQyxnQkFBQTVKLEtBQUFpc0MsUUFBQXBpQyxpQkFBQWxHLEVBQUFYLEVBQUFoRCxLQUFBaXNDLFFBQUFyaUMsZ0JBQUE1SixLQUFBaXNDLFFBQUFwaUMsb0JBRUFtaUMsRUFBQXRzQyxVQUFBbXVDLHVCQUFBLFNBQUEvRixHQUNBLE9BQUFBLEVBQUE5bkMsS0FBQWlzQyxRQUFBbGlDLE9BQUFPLEtBQUFySSxPQUNBakMsS0FBQWlzQyxRQUFBbGlDLE9BQUFPLEtBQUF3OUIsR0FFQXZnQixFQUFBOVAsb0JBQUFxd0IsSUFFQWtFLEVBQUF0c0MsVUFBQW91QyxvQkFBQSxTQUFBL0IsR0FDQSxPQUFBL3JDLEtBQUFpc0MsUUFBQWxoQyxrQkFDQThnQyxFQUVBRSxFQUFBLzVCLEtBQUF0UixFQUFBMkgsdUJBQ0FySSxLQUFBaXNDLFFBQUFsaUMsT0FBQUUsV0FFQThoQyxFQUFBLzVCLEdBQUEsSUFDQWhTLEtBQUE2dEMsdUJBQUE5QixFQUFBLzVCLElBRUFoUyxLQUFBaXNDLFFBQUFsaUMsT0FBQUcsWUFFQThoQyxFQUFBdHNDLFVBQUFxdUMsb0JBQUEsU0FBQWhDLEdBQ0EsT0FBQUEsRUFBQTk1QixLQUFBdlIsRUFBQTJILHVCQUNBckksS0FBQWlzQyxRQUFBbGlDLE9BQUFHLFdBRUE2aEMsRUFBQTk1QixHQUFBLElBQ0FqUyxLQUFBNnRDLHVCQUFBOUIsRUFBQTk1QixJQUVBalMsS0FBQWlzQyxRQUFBbGlDLE9BQUFFLFlBRUEraEMsRUFBQXRzQyxVQUFBNHRDLGFBQUEsU0FBQXZCLEVBQUFyaUMsR0FDQTFKLEtBQUFrc0Msb0JBQ0Fsc0MsS0FBQXlzQyxRQUFBaDJCLE9BQ0EsSUFBQW1rQixFQUFBNTZCLEtBQUE4dEMsb0JBQUEvQixHQUNBL3JDLEtBQUF5c0MsUUFBQTMwQix5QkFBQSxPQUNBOVgsS0FBQXlzQyxRQUFBLzJCLFVBQUFrbEIsRUFBQWpsQixJQUNBM1YsS0FBQXlzQyxRQUFBdDNCLFNBQUEsSUFBQW5WLEtBQUFpc0MsUUFBQXJpQyxnQkFBQTVKLEtBQUFpc0MsUUFBQXBpQyxrQkFDQTdKLEtBQUF5c0MsUUFBQTMwQix5QkFBQSxjQUNBLElBQUFqTixFQUFBa2hDLEVBQUE3NUIsS0FBQWxTLEtBQUFpc0MsUUFBQW5oQyxlQUFBOUssS0FBQWlzQyxRQUFBcGhDLFdBQ0FtakMsRUFBQWpDLEVBQUEzNUIsT0FBQSxZQUNBcFMsS0FBQXlzQyxRQUFBMTJCLEtBQ0FpNEIsRUFBQSxJQUFBbmpDLEVBQUEsSUFBQTdLLEtBQUFpc0MsUUFBQXJoQyxTQUFBNUssS0FBQWlzQyxRQUFBeGhDLGlCQUFBLE1BQUF6SyxLQUFBaXNDLFFBQUF0aEMsV0FDQTNLLEtBQUF5c0MsUUFBQXgyQixhQUFBLE1BQ0FqVyxLQUFBeXNDLFFBQUEvMkIsVUFBQTFWLEtBQUErdEMsb0JBQUFoQyxHQUFBcDJCLElBQ0FvMkIsRUFBQTU1QixNQUNBblMsS0FBQXlzQyxRQUFBLzFCLFlBQUFoVyxFQUFBNEgsYUFFQXRJLEtBQUF5c0MsUUFBQXQyQixTQUFBNDFCLEVBQUFqNkIsTUFBQSxLQUNBOVIsS0FBQXlzQyxRQUFBOTFCLFVBQ0EsSUFBQThJLEVBQUF6ZixLQUFBeXNDLFFBQUFqekIsYUFBQSxJQUFBeFosS0FBQWlzQyxRQUFBcmlDLGdCQUFBNUosS0FBQWlzQyxRQUFBcGlDLGtCQUNBOFYsR0FBQSxFQUNBM2YsS0FBQWlzQyxRQUFBbGhDLG9CQUNBNFUsRUFBQThyQixFQUFBanNCLFdBQUFDLEVBQUFtYixJQUVBLElBQUFqM0IsRUFBQTNELEtBQUF1dEMsZUFBQTdqQyxHQUNBMUcsRUFBQWhELEtBQUF3dEMsZUFBQTlqQyxHQUNBMUosS0FBQXVzQyxVQUFBMEIsYUFBQXh1QixFQUFBOWIsRUFBQVgsR0FDQSxJQUFBaXFDLEVBQUEsQ0FDQXZqQyxRQUNBaVcsVUFDQWl1QixVQUFBLEdBR0EsT0FEQTV0QyxLQUFBa3VDLGtCQUFBakIsR0FDQUEsR0FFQWpCLEVBQUF0c0MsVUFBQXd1QyxrQkFBQSxTQUFBakIsR0FDQSxJQUFBNW1DLEVBQUFyRyxLQUNBLHNCQUFBMEssU0FBQTZVLEVBQUEzVCxZQUFBMlQsRUFBQTFULFdBR0E3TCxLQUFBbXNDLHVCQUFBMW9DLEtBQUF3cEMsR0FDQSxPQUFBanRDLEtBQUFvc0MsdUJBR0Fwc0MsS0FBQW9zQyxxQkFBQTFoQyxPQUFBb1ksV0FBQSxXQUFtRSxPQUFBemMsRUFBQThuQyxtQkExSm5FLFFBNEpBbkMsRUFBQXRzQyxVQUFBeXVDLGdCQUFBLFdBQ0EsSUFBQTluQyxFQUFBckcsS0FDQW91QyxFQUFBcHVDLEtBQUFtc0MsdUJBQ0Fuc0MsS0FBQW1zQyx1QkFBQSxHQUNBemhDLE9BQUE4VixrQkFBQXhnQixLQUFBc3NDLGNBQUErQixLQUFBLFNBQUFDLEdBQ0Fqb0MsRUFBQWdtQyxRQUFBaUMsRUFDQSxRQUFBeHdDLEVBQUEsRUFBMkJBLEVBQUFzd0MsRUFBQW5zQyxPQUFpQ25FLElBQUEsQ0FDNURzd0MsRUFBQXR3QyxHQUNBOHZDLFVBQUEsS0FHQTV0QyxLQUFBb3NDLHFCQUFBLE1BRUFKLEVBcEtBLENBcUtDUixFQUFBM3hCLFNBQ0RqYyxFQUFBaWMsUUFBQW15QixnQ0N0TUF4dEMsT0FBQUMsZUFBQWIsRUFBQSxjQUE4Q21CLE9BQUEsSUFDOUMsSUFBQXd2QyxFQUFBLFdBQ0EsU0FBQUEsRUFBQTNCLEdBQ0E1c0MsS0FBQTRzQyxXQUNBNXNDLEtBQUF3dUMsS0FBQSxHQUNBeHVDLEtBQUF5dUMsTUFBQSxLQUNBenVDLEtBQUEwdUMsTUFBQSxLQUNBMXVDLEtBQUEydUMsVUFBQSxHQUNBM3VDLEtBQUFtdEMsS0FBQSxFQWdHQSxPQTlGQW9CLEVBQUE3dUMsVUFBQWt2QyxZQUFBLFNBQUF0aUMsR0FDQSxJQUFBdWlDLEVBQUF2aUMsRUFBQXVpQyxLQUNBNW1DLEVBQUFxRSxFQUFBckUsS0FDQXFFLElBQUF0TSxLQUFBeXVDLFFBQ0F6dUMsS0FBQXl1QyxNQUFBeG1DLEdBRUFxRSxJQUFBdE0sS0FBQTB1QyxRQUNBMXVDLEtBQUEwdUMsTUFBQUcsR0FFQSxPQUFBQSxJQUNBQSxFQUFBNW1DLFFBRUEsT0FBQUEsSUFDQUEsRUFBQTRtQyxTQUdBTixFQUFBN3VDLFVBQUFvdkMsWUFBQSxTQUFBeGlDLEdBQ0EsSUFBQXlpQyxFQUFBL3VDLEtBQUEwdUMsTUFDQSxPQUFBSyxJQUNBQSxFQUFBOW1DLEtBQUFxRSxHQUVBQSxFQUFBdWlDLEtBQUFFLEVBQ0F6aUMsRUFBQXJFLEtBQUEsS0FDQWpJLEtBQUEwdUMsTUFBQXBpQyxFQUNBLE9BQUF0TSxLQUFBeXVDLFFBQ0F6dUMsS0FBQXl1QyxNQUFBbmlDLElBR0FpaUMsRUFBQTd1QyxVQUFBb3RDLFNBQUEsU0FBQXRWLEdBRUEsSUFEQSxJQUFBd1gsRUFBQWh2QyxLQUFBMnVDLFVBQ0E3d0MsRUFBQSxFQUF1QkEsRUFBQTA1QixFQUFXMTVCLElBQ2xDa3hDLEVBQUF2ckMsS0FBQSxDQUNBb3JDLEtBQUEsS0FDQTVtQyxLQUFBLEtBQ0E1SSxJQUFBLEtBQ0FOLE1BQUEsUUFJQXd2QyxFQUFBN3VDLFVBQUFmLElBQUEsU0FBQVUsR0FDQSxJQUFBaU4sRUFBQXRNLEtBQUF3dUMsS0FBQW52QyxHQUNBLFlBQUFtRSxJQUFBOEksR0FDQXRNLEtBQUE0dUMsWUFBQXRpQyxHQUNBdE0sS0FBQTh1QyxZQUFBeGlDLEdBQ0FBLEVBQUF2TixPQUVBLE1BRUF3dkMsRUFBQTd1QyxVQUFBdXZDLFVBQUEsU0FBQTV2QyxHQUNBLElBQUFpTixFQUFBdE0sS0FBQXd1QyxLQUFBbnZDLEdBQ0EsWUFBQW1FLElBQUE4SSxFQUNBQSxFQUFBdk4sTUFFQSxNQUVBd3ZDLEVBQUE3dUMsVUFBQTB0QyxLQUFBLFdBQ0EsSUFBQThCLEVBQUFsdkMsS0FBQXl1QyxNQUNBLGNBQUFTLEVBQUEsS0FBQUEsRUFBQW53QyxPQUVBd3ZDLEVBQUE3dUMsVUFBQTJDLElBQUEsU0FBQWhELEVBQUFOLEdBQ0EsSUFBQXVOLEVBQUF0TSxLQUFBd3VDLEtBQUFudkMsR0FDQSxRQUFBbUUsSUFBQThJLEVBQ0FBLEVBQUF0TSxLQUFBd3VDLEtBQUFudkMsR0FDQVcsS0FBQTR1QyxZQUFBdGlDLEdBQ0FBLEVBQUF2TixhQUVBLEdBQUFpQixLQUFBbXRDLE1BQUFudEMsS0FBQTRzQyxTQUNBdGdDLEVBQUF0TSxLQUFBeXVDLE1BQ0F6dUMsS0FBQTR1QyxZQUFBdGlDLFVBQ0F0TSxLQUFBd3VDLEtBQUFsaUMsRUFBQWpOLEtBQ0FpTixFQUFBak4sTUFDQWlOLEVBQUF2TixRQUNBaUIsS0FBQXd1QyxLQUFBbnZDLEdBQUFpTixNQUVBLENBQ0EsSUFBQTBpQyxFQUFBaHZDLEtBQUEydUMsVUFDQUssRUFBQS9zQyxPQUFBLElBQ0FxSyxFQUFBMGlDLEVBQUExcUMsT0FDQWpGLE1BQ0FpTixFQUFBdk4sU0FHQXVOLEVBQUEsQ0FDQXVpQyxLQUFBLEtBQ0E1bUMsS0FBQSxLQUNBNUksTUFDQU4sU0FHQWlCLEtBQUF3dUMsS0FBQW52QyxHQUFBaU4sRUFDQXRNLEtBQUFtdEMsT0FFQW50QyxLQUFBOHVDLFlBQUF4aUMsSUFFQWlpQyxFQXZHQSxHQXlHQTN3QyxFQUFBaWMsUUFBQTAwQixnQ0MxR0EsSUFDQXp1QyxFQURBQyxFQUFBQyxXQUFBRCxZQUNBRCxFQUFBLFNBQUExQixFQUFBNkIsR0FJQSxPQUhBSCxFQUFBdEIsT0FBQTBCLGdCQUNBLENBQWNDLFVBQUEsY0FBZ0JDLE9BQUEsU0FBQWhDLEVBQUE2QixHQUFzQzdCLEVBQUErQixVQUFBRixJQUNwRSxTQUFBN0IsRUFBQTZCLEdBQTZCLFFBQUFMLEtBQUFLLElBQUFOLGVBQUFDLEtBQUF4QixFQUFBd0IsR0FBQUssRUFBQUwsTUFDN0J4QixFQUFBNkIsSUFFQSxTQUFBN0IsRUFBQTZCLEdBRUEsU0FBQUksSUFBdUJMLEtBQUFNLFlBQUFsQyxFQUR2QjBCLEVBQUExQixFQUFBNkIsR0FFQTdCLEVBQUFzQixVQUFBLE9BQUFPLEVBQUF6QixPQUFBWSxPQUFBYSxJQUFBSSxFQUFBWCxVQUFBTyxFQUFBUCxVQUFBLElBQUFXLEtBR0E3QixPQUFBQyxlQUFBYixFQUFBLGNBQThDbUIsT0FBQSxJQUM5QyxJQUNBb3dDLEVBQUEsU0FBQWhvQyxHQUVBLFNBQUFnb0MsRUFBQTc4QixFQUFBNk0sR0FDQSxPQUFBaFksRUFBQWxKLEtBQUErQixZQUtBLE9BUEFELEVBQUFvdkMsRUFBQWhvQyxHQUlBZ29DLEVBQUF6dkMsVUFBQTZXLEtBQUEsU0FBQTRKLEVBQUE0ckIsRUFBQXBvQyxFQUFBWCxHQUNBLFVBRUFtc0MsRUFSQSxDQURzQnp4QyxFQUFRLElBVTdCbWMsU0FDRGpjLEVBQUFpYyxRQUFBczFCLGdDQ3pCQSxJQUNBcnZDLEVBREFDLEVBQUFDLFdBQUFELFlBQ0FELEVBQUEsU0FBQTFCLEVBQUE2QixHQUlBLE9BSEFILEVBQUF0QixPQUFBMEIsZ0JBQ0EsQ0FBY0MsVUFBQSxjQUFnQkMsT0FBQSxTQUFBaEMsRUFBQTZCLEdBQXNDN0IsRUFBQStCLFVBQUFGLElBQ3BFLFNBQUE3QixFQUFBNkIsR0FBNkIsUUFBQUwsS0FBQUssSUFBQU4sZUFBQUMsS0FBQXhCLEVBQUF3QixHQUFBSyxFQUFBTCxNQUM3QnhCLEVBQUE2QixJQUVBLFNBQUE3QixFQUFBNkIsR0FFQSxTQUFBSSxJQUF1QkwsS0FBQU0sWUFBQWxDLEVBRHZCMEIsRUFBQTFCLEVBQUE2QixHQUVBN0IsRUFBQXNCLFVBQUEsT0FBQU8sRUFBQXpCLE9BQUFZLE9BQUFhLElBQUFJLEVBQUFYLFVBQUFPLEVBQUFQLFVBQUEsSUFBQVcsS0FHQTdCLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBQzlDLElBQUEyQixFQUFjaEQsRUFBUSxHQUN0Qit0QyxFQUEyQi90QyxFQUFRLElBQ25DOHRDLEVBQXNCOXRDLEVBQVEsSUFDOUJzVCxFQUF1QnRULEVBQVEsR0FDL0IweEMsRUFBQSxTQUFBam9DLEdBRUEsU0FBQWlvQyxFQUFBM2dCLEVBQUF3ZCxHQUNBLElBQUE1bEMsRUFBQWMsRUFBQWxKLEtBQUErQixZQVNBLE9BUkFxRyxFQUFBb29CLFlBQ0Fwb0IsRUFBQTRsQyxVQUNBNWxDLEVBQUFncEMsZUFBQSxTQUFBejZCLEVBQUFFLEdBQ0EsSUFBQStDLEVBQUF4UixFQUFBb29CLFVBQUFsYyxjQUFBLFVBR0EsT0FGQXNGLEVBQUFqRCxRQUNBaUQsRUFBQS9DLFNBQ0ErQyxHQUVBeFIsRUErQ0EsT0ExREF0RyxFQUFBcXZDLEVBQUFqb0MsR0FhQWlvQyxFQUFBMXZDLFVBQUFpYSxVQUFBLFdBQ0EsSUFBQXRULEVBQUFyRyxLQUNBbUksRUFBQXNqQyxFQUFBM3JCLCtCQUFBcFYsT0FBQTFLLEtBQUFxdkMsZUFBQXJ2QyxLQUFBaXNDLFNBQ0E5akMsYUFBQW1uQyxrQkFDQXR2QyxLQUFBdXZDLFNBQUFwbkMsRUFHQUEsRUFBQWttQyxLQUFBLFNBQUFtQixHQUNBbnBDLEVBQUFrcEMsU0FBQUMsS0FJQUosRUFBQTF2QyxVQUFBK3ZDLFVBQUEsU0FBQTFELEVBQUF6ckIsR0FDQSxJQUFBb3ZCLEVBQUEzRCxFQUFBaDZCLEtBQUEsSUFDQTQ5QixFQUFBNUQsRUFBQTk1QixHQUFBLEdBQ0EyOUIsRUFBQTdELEVBQUE5NUIsS0FBQXZSLEVBQUFFLGNBQ0FpdkMsRUFBQTlELEVBQUEvNUIsS0FBQXRSLEVBQUFFLGNBQ0EsT0FBQTh1QyxJQUFBQyxHQUFBQyxJQUFBQyxJQUFBOUQsRUFBQTM1QixRQUVBZzlCLEVBQUExdkMsVUFBQTZXLEtBQUEsU0FBQTRKLEVBQUE0ckIsRUFBQXBvQyxFQUFBWCxHQUNBLFVBQUFoRCxLQUFBdXZDLGVBQUEvckMsSUFBQXhELEtBQUF1dkMsU0FDQSxTQUVBLElBQUFqdkIsRUFBQSxFQVNBLEdBUkF0UCxFQUFBN0YsV0FBQTRnQyxFQUFBOTVCLElBQ0FxTyxFQUFBLEVBQUF5ckIsRUFBQTk1QixJQUFBODVCLEVBQUE3NUIsS0FBQSxNQUVBNjVCLEVBQUE5NUIsS0FBQXZSLEVBQUFFLGVBQ0FtckMsRUFBQTc1QixPQUNBb08sRUFBQSxJQUdBdGdCLEtBQUF5dkMsVUFBQTFELEVBQUF6ckIsR0FDQSxTQUVBSCxFQUFBMUosT0FDQSxJQUFBcTVCLEVBQUE5dkMsS0FBQWlzQyxRQUFBcmlDLGdCQUFBbEosRUFBQTZILHdCQUNBd25DLEVBQUEvdkMsS0FBQWlzQyxRQUFBcGlDLGlCQUFBbkosRUFBQTZILHdCQU1BLE9BTEF3akMsRUFBQTU1QixNQUNBZ08sRUFBQXpKLFlBQUFoVyxFQUFBNEgsYUFFQTZYLEVBQUF3dEIsVUFBQTN0QyxLQUFBdXZDLFNBQUF4RCxFQUFBaDZCLEtBQUErOUIsRUFBQXh2QixFQUFBeXZCLEVBQUFELEVBQUE5dkMsS0FBQWlzQyxRQUFBcGlDLGlCQUFBbEcsRUFBQVgsRUFBQThzQyxFQUFBOXZDLEtBQUFpc0MsUUFBQXBpQyxrQkFDQXNXLEVBQUF4SixXQUNBLEdBRUF5NEIsRUEzREEsQ0E0REM1RCxFQUFBM3hCLFNBQ0RqYyxFQUFBaWMsUUFBQXUxQixnQ0MvRUEsSUFDQXR2QyxFQURBQyxFQUFBQyxXQUFBRCxZQUNBRCxFQUFBLFNBQUExQixFQUFBNkIsR0FJQSxPQUhBSCxFQUFBdEIsT0FBQTBCLGdCQUNBLENBQWNDLFVBQUEsY0FBZ0JDLE9BQUEsU0FBQWhDLEVBQUE2QixHQUFzQzdCLEVBQUErQixVQUFBRixJQUNwRSxTQUFBN0IsRUFBQTZCLEdBQTZCLFFBQUFMLEtBQUFLLElBQUFOLGVBQUFDLEtBQUF4QixFQUFBd0IsR0FBQUssRUFBQUwsTUFDN0J4QixFQUFBNkIsSUFFQSxTQUFBN0IsRUFBQTZCLEdBRUEsU0FBQUksSUFBdUJMLEtBQUFNLFlBQUFsQyxFQUR2QjBCLEVBQUExQixFQUFBNkIsR0FFQTdCLEVBQUFzQixVQUFBLE9BQUFPLEVBQUF6QixPQUFBWSxPQUFBYSxJQUFBSSxFQUFBWCxVQUFBTyxFQUFBUCxVQUFBLElBQUFXLEtBR0E3QixPQUFBQyxlQUFBYixFQUFBLGNBQThDbUIsT0FBQSxJQUM5QyxJQUNBNHBDLEVBQUEsU0FBQXhoQyxHQUVBLFNBQUF3aEMsRUFBQWtCLEVBQUF6NEIsRUFBQXJILEdBQ0EsSUFBQTFELEVBQUFjLEVBQUFsSixLQUFBK0IsS0FBQTZwQyxFQUFBLFlBQUF6NEIsR0FBQSxFQUFBckgsSUFBQS9KLEtBRUEsT0FEQXFHLEVBQUEycEMsY0FDQTNwQyxFQXNFQSxPQTFFQXRHLEVBQUE0b0MsRUFBQXhoQyxHQU1Bd2hDLEVBQUFqcEMsVUFBQXN3QyxZQUFBLFdBQ0Fod0MsS0FBQWdxQyxPQUFBLENBQ0FwMkIsTUFBQSxLQUNBQyxJQUFBLEtBQ0FDLGlCQUFBLEtBQ0E3USxNQUFBLE9BR0EwbEMsRUFBQWpwQyxVQUFBc0UsT0FBQSxTQUFBOEYsRUFBQXFJLEdBQ0FoTCxFQUFBekgsVUFBQXNFLE9BQUEvRixLQUFBK0IsS0FBQThKLEVBQUFxSSxHQUNBblMsS0FBQWd3QyxlQUVBckgsRUFBQWpwQyxVQUFBeWQsTUFBQSxTQUFBclQsR0FDQTlKLEtBQUFncUMsT0FBQXAyQixPQUFBNVQsS0FBQWdxQyxPQUFBbjJCLE1BQ0E3VCxLQUFBZ3dDLGNBQ0Fod0MsS0FBQW1ULGFBR0F3MUIsRUFBQWpwQyxVQUFBaVUsbUJBQUEsU0FBQTdKLEVBQUE4SixFQUFBQyxFQUFBQyxHQUNBLEdBQUE5VCxLQUFBaXdDLGdCQUFBcjhCLEVBQUFDLEVBQUFDLEVBQUFoSyxFQUFBa2lCLE9BQUEvb0IsU0FHQWpELEtBQUFtVCxXQUNBUyxHQUFBQyxHQUFBLENBR0EsSUFBQXE4QixFQUFBdDhCLEVBQUEsR0FBQTlKLEVBQUFraUIsT0FBQS9vQixNQUNBa3RDLEVBQUF0OEIsRUFBQSxHQUFBL0osRUFBQWtpQixPQUFBL29CLE1BQ0FtdEMsRUFBQTNyQyxLQUFBQyxJQUFBd3JDLEVBQUEsR0FDQUcsRUFBQTVyQyxLQUFBRSxJQUFBd3JDLEVBQUFybUMsRUFBQWxILEtBQUEsR0FDQSxLQUFBd3RDLEdBQUF0bUMsRUFBQWxILE1BQUF5dEMsRUFBQSxJQUlBLEdBREFyd0MsS0FBQWdULEtBQUEwQyxVQUFBMVYsS0FBQXNSLFFBQUFqSCxVQUFBc0wsSUFDQTdCLEVBQUEsQ0FDQSxJQUFBMU8sRUFBQXdPLEVBQUEsR0FDQWdCLEVBQUFmLEVBQUEsR0FBQXpPLEVBQ0EwUCxFQUFBdTdCLEVBQUFELEVBQUEsRUFDQXB3QyxLQUFBa1YsVUFBQTlQLEVBQUFnckMsRUFBQXg3QixFQUFBRSxPQUVBLENBQ0ExUCxFQUFBOHFDLElBQUFFLEVBQUF4OEIsRUFBQSxTQUNBMDhCLEVBQUFGLElBQUFDLEVBQUF4OEIsRUFBQSxHQUFBL0osRUFBQXBILEtBQ0ExQyxLQUFBa1YsVUFBQTlQLEVBQUFnckMsRUFBQUUsRUFBQWxyQyxFQUFBLEdBQ0EsSUFBQW1yQyxFQUFBOXJDLEtBQUFDLElBQUEyckMsRUFBQUQsRUFBQSxLQUVBLEdBREFwd0MsS0FBQWtWLFVBQUEsRUFBQWs3QixFQUFBLEVBQUF0bUMsRUFBQXBILEtBQUE2dEMsR0FDQUgsSUFBQUMsRUFBQSxDQUNBLElBQUFockMsRUFBQThxQyxJQUFBRSxFQUFBeDhCLEVBQUEsR0FBQS9KLEVBQUFwSCxLQUNBMUMsS0FBQWtWLFVBQUEsRUFBQW03QixFQUFBaHJDLEVBQUEsSUFHQXJGLEtBQUFncUMsT0FBQXAyQixNQUFBLENBQUFBLEVBQUEsR0FBQUEsRUFBQSxJQUNBNVQsS0FBQWdxQyxPQUFBbjJCLElBQUEsQ0FBQUEsRUFBQSxHQUFBQSxFQUFBLElBQ0E3VCxLQUFBZ3FDLE9BQUFsMkIsbUJBQ0E5VCxLQUFBZ3FDLE9BQUEvbUMsTUFBQTZHLEVBQUFraUIsT0FBQS9vQixTQUVBMGxDLEVBQUFqcEMsVUFBQXV3QyxnQkFBQSxTQUFBcjhCLEVBQUFDLEVBQUFDLEVBQUE3USxHQUNBLE9BQUFqRCxLQUFBd3dDLHFCQUFBNThCLEVBQUE1VCxLQUFBZ3FDLE9BQUFwMkIsU0FDQTVULEtBQUF3d0MscUJBQUEzOEIsRUFBQTdULEtBQUFncUMsT0FBQW4yQixNQUNBQyxJQUFBOVQsS0FBQWdxQyxPQUFBbDJCLGtCQUNBN1EsSUFBQWpELEtBQUFncUMsT0FBQS9tQyxPQUVBMGxDLEVBQUFqcEMsVUFBQTh3QyxxQkFBQSxTQUFBQyxFQUFBQyxHQUNBLFNBQUFELElBQUFDLEtBR0FELEVBQUEsS0FBQUMsRUFBQSxJQUFBRCxFQUFBLEtBQUFDLEVBQUEsS0FFQS9ILEVBM0VBLENBRHdCanJDLEVBQVEsR0E2RS9CdVQsaUJBQ0RyVCxFQUFBK3FDLHFEQzVGQSxJQUNBN29DLEVBREFDLEVBQUFDLFdBQUFELFlBQ0FELEVBQUEsU0FBQTFCLEVBQUE2QixHQUlBLE9BSEFILEVBQUF0QixPQUFBMEIsZ0JBQ0EsQ0FBY0MsVUFBQSxjQUFnQkMsT0FBQSxTQUFBaEMsRUFBQTZCLEdBQXNDN0IsRUFBQStCLFVBQUFGLElBQ3BFLFNBQUE3QixFQUFBNkIsR0FBNkIsUUFBQUwsS0FBQUssSUFBQU4sZUFBQUMsS0FBQXhCLEVBQUF3QixHQUFBSyxFQUFBTCxNQUM3QnhCLEVBQUE2QixJQUVBLFNBQUE3QixFQUFBNkIsR0FFQSxTQUFBSSxJQUF1QkwsS0FBQU0sWUFBQWxDLEVBRHZCMEIsRUFBQTFCLEVBQUE2QixHQUVBN0IsRUFBQXNCLFVBQUEsT0FBQU8sRUFBQXpCLE9BQUFZLE9BQUFhLElBQUFJLEVBQUFYLFVBQUFPLEVBQUFQLFVBQUEsSUFBQVcsS0FHQTdCLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBQzlDLElBQUFnUyxFQUFlclQsRUFBUSxHQUN2QmtzQyxFQUF3QmxzQyxFQUFRLEdBRWhDbXJDLEVBQUEsU0FBQTFoQyxHQUVBLFNBQUEwaEMsRUFBQWdCLEVBQUF6NEIsRUFBQXJILEdBQ0EsSUFBQTFELEVBQUFjLEVBQUFsSixLQUFBK0IsS0FBQTZwQyxFQUFBLFNBQUF6NEIsR0FBQSxFQUFBckgsSUFBQS9KLEtBYUEsT0FaQXFHLEVBQUEyakMsT0FBQSxDQUNBcm1DLEVBQUEsS0FDQVgsRUFBQSxLQUNBMnRDLFVBQUEsS0FDQWorQixNQUFBLEtBQ0FrQyxNQUFBLE1BRUF2TyxFQUFBdXFDLGlCQUFBLENBQ0FsVCxJQUFBcjNCLEVBQUF3cUMsaUJBQUF2eEMsS0FBQStHLEdBQ0FtM0IsTUFBQW4zQixFQUFBeXFDLG1CQUFBeHhDLEtBQUErRyxHQUNBbzNCLFVBQUFwM0IsRUFBQTBxQyx1QkFBQXp4QyxLQUFBK0csSUFFQUEsRUF5SkEsT0F4S0F0RyxFQUFBOG9DLEVBQUExaEMsR0FpQkEwaEMsRUFBQW5wQyxVQUFBc0UsT0FBQSxTQUFBOEYsRUFBQXFJLEdBQ0FoTCxFQUFBekgsVUFBQXNFLE9BQUEvRixLQUFBK0IsS0FBQThKLEVBQUFxSSxHQUNBblMsS0FBQWdxQyxPQUFBLENBQ0FybUMsRUFBQSxLQUNBWCxFQUFBLEtBQ0EydEMsVUFBQSxLQUNBaitCLE1BQUEsS0FDQWtDLE1BQUEsT0FHQWkwQixFQUFBbnBDLFVBQUF5ZCxNQUFBLFNBQUFyVCxHQUNBOUosS0FBQWd4QyxlQUNBaHhDLEtBQUFpeEMsMkJBQ0FqeEMsS0FBQWl4Qyx5QkFBQXRxQyxVQUNBM0csS0FBQWl4Qyx5QkFBQSxLQUNBanhDLEtBQUFvVCxpQkFBQXRKLEtBR0ErK0IsRUFBQW5wQyxVQUFBMlQsT0FBQSxTQUFBdkosR0FDQTlKLEtBQUFpeEMsMEJBQ0FqeEMsS0FBQWl4Qyx5QkFBQUMsUUFFQXBuQyxFQUFBb1EsUUFBQXBRLEVBQUFraUIsT0FBQWhwQixFQUFBOEcsRUFBQWtpQixPQUFBaHBCLElBRUE2bEMsRUFBQW5wQyxVQUFBNFQsUUFBQSxTQUFBeEosR0FDQTlKLEtBQUFpeEMseUJBQ0FqeEMsS0FBQWl4Qyx5QkFBQUUsT0FBQXJuQyxHQUdBQSxFQUFBb1EsUUFBQXBRLEVBQUFraUIsT0FBQWhwQixFQUFBOEcsRUFBQWtpQixPQUFBaHBCLElBR0E2bEMsRUFBQW5wQyxVQUFBMFQsaUJBQUEsU0FBQXRKLEdBQ0EsSUFBQXpELEVBQUFyRyxLQUNBOEosRUFBQTFHLFFBQUE2a0IsWUFDQWpvQixLQUFBaXhDLDJCQUNBanhDLEtBQUFpeEMseUJBQUEsSUFBQUcsRUFBQXRuQyxFQUFBLFdBQ0F6RCxFQUFBZ3JDLFFBQUF2bkMsR0FBQSxPQUtBOUosS0FBQWl4QywyQkFDQWp4QyxLQUFBaXhDLHlCQUFBdHFDLFVBQ0EzRyxLQUFBaXhDLHlCQUFBLE1BRUFubkMsRUFBQW9RLFFBQUFwUSxFQUFBa2lCLE9BQUFocEIsRUFBQThHLEVBQUFraUIsT0FBQWhwQixLQUdBNmxDLEVBQUFucEMsVUFBQTZULGFBQUEsU0FBQXpKLEdBQ0E5SixLQUFBaXhDLDBCQUNBanhDLEtBQUFpeEMseUJBQUFLLHNCQUFBeG5DLElBR0ErK0IsRUFBQW5wQyxVQUFBOFQsY0FBQSxTQUFBMUosRUFBQTJKLEVBQUFDLElBQ0ExVCxLQUFBaXhDLDBCQUFBanhDLEtBQUFpeEMseUJBQUFNLFNBQ0F2eEMsS0FBQXF4QyxRQUFBdm5DLEdBQUEsR0FHQTlKLEtBQUFpeEMseUJBQUFLLHNCQUFBeG5DLElBR0ErK0IsRUFBQW5wQyxVQUFBMnhDLFFBQUEsU0FBQXZuQyxFQUFBMG5DLEdBQ0EsR0FBQTFuQyxFQUFBNGYsY0FBQTVmLEVBQUE2ZixhQUFBLENBSUEsSUFBQThuQixFQUFBM25DLEVBQUFraUIsT0FBQWpwQixNQUFBK0csRUFBQWtpQixPQUFBaHBCLEVBQ0EwdUMsRUFBQUQsRUFBQTNuQyxFQUFBa2lCLE9BQUEvb0IsTUFDQSxHQUFBeXVDLEVBQUEsR0FBQUEsR0FBQTVuQyxFQUFBbEgsS0FDQTVDLEtBQUFneEMsbUJBREEsQ0FJQSxJQUFBbDdCLEVBQUFoTSxFQUFBa2lCLE9BQUFocUIsTUFBQXJELElBQUE4eUMsR0FBQTl5QyxJQUFBbUwsRUFBQWtpQixPQUFBcm9CLEdBQ0EsR0FBQW1TLEVBQUEsQ0FHQSxJQUFBaE0sRUFBQTZtQyxVQVdBLE9BVkEzd0MsS0FBQWd4QyxlQUNBaHhDLEtBQUFnVCxLQUFBeUQsT0FDQXpXLEtBQUFnVCxLQUFBMEMsVUFBQTFWLEtBQUFzUixRQUFBbkgsT0FBQXdMLElBQ0EzVixLQUFBMnhDLGtCQUFBN25DLElBQUFraUIsT0FBQXJvQixFQUFBK3RDLEVBQUE1N0IsR0FDQTlWLEtBQUFnVCxLQUFBMkQsVUFDQTNXLEtBQUFncUMsT0FBQXJtQyxFQUFBbUcsRUFBQWtpQixPQUFBcm9CLEVBQ0EzRCxLQUFBZ3FDLE9BQUFobkMsRUFBQTB1QyxFQUNBMXhDLEtBQUFncUMsT0FBQTJHLFdBQUEsRUFDQTN3QyxLQUFBZ3FDLE9BQUF0M0IsTUFBQTVJLEVBQUExRyxRQUFBOGtCLGlCQUNBbG9CLEtBQUFncUMsT0FBQXAxQixNQUFBa0IsRUFBQS9FLEVBQUFoUSx3QkFHQSxJQUFBZixLQUFBaXhDLDBCQUFBanhDLEtBQUFpeEMseUJBQUFXLGdCQUFBLENBSUEsR0FBQTV4QyxLQUFBZ3FDLE9BQUEsQ0FDQSxHQUFBaHFDLEtBQUFncUMsT0FBQXJtQyxJQUFBbUcsRUFBQWtpQixPQUFBcm9CLEdBQ0EzRCxLQUFBZ3FDLE9BQUFobkMsSUFBQTB1QyxHQUNBMXhDLEtBQUFncUMsT0FBQTJHLFlBQUE3bUMsRUFBQTZtQyxXQUNBM3dDLEtBQUFncUMsT0FBQXQzQixRQUFBNUksRUFBQTFHLFFBQUE4a0IsYUFDQWxvQixLQUFBZ3FDLE9BQUFwMUIsUUFBQWtCLEVBQUEvRSxFQUFBaFEsdUJBQ0EsT0FFQWYsS0FBQWd4QyxlQUVBaHhDLEtBQUFnVCxLQUFBeUQsT0FDQXpXLEtBQUE0d0MsaUJBQUE5bUMsRUFBQTFHLFFBQUE4a0IsYUFBQSxTQUFBcGUsSUFBQWtpQixPQUFBcm9CLEVBQUErdEMsRUFBQTU3QixHQUNBOVYsS0FBQWdULEtBQUEyRCxVQUNBM1csS0FBQWdxQyxPQUFBcm1DLEVBQUFtRyxFQUFBa2lCLE9BQUFyb0IsRUFDQTNELEtBQUFncUMsT0FBQWhuQyxFQUFBMHVDLEVBQ0ExeEMsS0FBQWdxQyxPQUFBMkcsV0FBQSxFQUNBM3dDLEtBQUFncUMsT0FBQXQzQixNQUFBNUksRUFBQTFHLFFBQUE4a0IsWUFDQWxvQixLQUFBZ3FDLE9BQUFwMUIsTUFBQWtCLEVBQUEvRSxFQUFBaFEsNEJBcEJBZixLQUFBZ3hDLHNCQTNCQWh4QyxLQUFBZ3hDLGdCQWlEQW5JLEVBQUFucEMsVUFBQXN4QyxhQUFBLFdBQ0FoeEMsS0FBQWdxQyxTQUNBaHFDLEtBQUE0VixXQUFBNVYsS0FBQWdxQyxPQUFBcm1DLEVBQUEzRCxLQUFBZ3FDLE9BQUFobkMsRUFBQWhELEtBQUFncUMsT0FBQXAxQixNQUFBLEdBQ0E1VSxLQUFBZ3FDLE9BQUEsQ0FDQXJtQyxFQUFBLEtBQ0FYLEVBQUEsS0FDQTJ0QyxVQUFBLEtBQ0FqK0IsTUFBQSxLQUNBa0MsTUFBQSxRQUlBaTBCLEVBQUFucEMsVUFBQW14QyxpQkFBQSxTQUFBL21DLEVBQUFuRyxFQUFBWCxFQUFBOFMsR0FDQTlWLEtBQUFnVCxLQUFBeUQsT0FDQXpXLEtBQUFnVCxLQUFBMEMsVUFBQTFWLEtBQUFzUixRQUFBbkgsT0FBQXdMLElBQ0EzVixLQUFBcVYsbUJBQUExUixFQUFBWCxHQUNBaEQsS0FBQWdULEtBQUEyRCxXQUVBa3lCLEVBQUFucEMsVUFBQW94QyxtQkFBQSxTQUFBaG5DLEVBQUFuRyxFQUFBWCxFQUFBOFMsR0FDQTlWLEtBQUFnVCxLQUFBeUQsT0FDQXpXLEtBQUFnVCxLQUFBMEMsVUFBQTFWLEtBQUFzUixRQUFBbkgsT0FBQXdMLElBQ0EzVixLQUFBa1YsVUFBQXZSLEVBQUFYLEVBQUE4UyxFQUFBL0UsRUFBQWhRLHVCQUFBLEdBQ0FmLEtBQUFnVCxLQUFBMEMsVUFBQTFWLEtBQUFzUixRQUFBbEgsYUFBQXVMLElBQ0EzVixLQUFBNlYsa0JBQUEvTCxFQUFBZ00sRUFBQW5TLEVBQUFYLEdBQ0FoRCxLQUFBZ1QsS0FBQTJELFdBRUFreUIsRUFBQW5wQyxVQUFBcXhDLHVCQUFBLFNBQUFqbkMsRUFBQW5HLEVBQUFYLEVBQUE4UyxHQUNBOVYsS0FBQWdULEtBQUF5RCxPQUNBelcsS0FBQWdULEtBQUEwQyxVQUFBMVYsS0FBQXNSLFFBQUFuSCxPQUFBd0wsSUFDQTNWLEtBQUFvVixzQkFBQXpSLEVBQUFYLEdBQ0FoRCxLQUFBZ1QsS0FBQTJELFdBRUFreUIsRUFBQW5wQyxVQUFBaXlDLGtCQUFBLFNBQUE3bkMsRUFBQW5HLEVBQUFYLEVBQUE4UyxHQUNBOVYsS0FBQWdULEtBQUF5RCxPQUNBelcsS0FBQWdULEtBQUE2K0IsWUFBQTd4QyxLQUFBc1IsUUFBQW5ILE9BQUF3TCxJQUNBM1YsS0FBQXNWLGlCQUFBM1IsRUFBQVgsRUFBQThTLEVBQUEvRSxFQUFBaFEsdUJBQUEsR0FDQWYsS0FBQWdULEtBQUEyRCxXQUVBa3lCLEVBektBLENBMEtDZSxFQUFBMzRCLGlCQUNEclQsRUFBQWlyQyxvQkFDQSxJQUFBdUksRUFBQSxXQUNBLFNBQUFBLEVBQUF0bkMsRUFBQWdvQyxHQUNBOXhDLEtBQUE4eEMsa0JBQ0E5eEMsS0FBQTR4QyxpQkFBQSxFQUNBOW5DLEVBQUE2bUMsV0FDQTN3QyxLQUFBK3hDLG1CQTJGQSxPQXhGQXZ6QyxPQUFBQyxlQUFBMnlDLEVBQUExeEMsVUFBQSxZQUNBZixJQUFBLFdBQTBCLFFBQUFxQixLQUFBZ3lDLG9CQUFBaHlDLEtBQUFpeUMsaUJBQzFCdnpDLFlBQUEsRUFDQW1FLGNBQUEsSUFFQXV1QyxFQUFBMXhDLFVBQUFpSCxRQUFBLFdBQ0EzRyxLQUFBaXlDLGlCQUNBdm5DLE9BQUF3bkMsY0FBQWx5QyxLQUFBaXlDLGdCQUNBanlDLEtBQUFpeUMsZUFBQSxNQUVBanlDLEtBQUFneUMscUJBQ0F0bkMsT0FBQWtZLGFBQUE1aUIsS0FBQWd5QyxvQkFDQWh5QyxLQUFBZ3lDLG1CQUFBLE1BRUFoeUMsS0FBQWdhLGtCQUNBdFAsT0FBQXVQLHFCQUFBamEsS0FBQWdhLGlCQUNBaGEsS0FBQWdhLGdCQUFBLE9BR0FvM0IsRUFBQTF4QyxVQUFBNHhDLHNCQUFBLFNBQUF4bkMsR0FDQSxJQUFBekQsRUFBQXJHLEtBQ0FBLEtBQUF1eEMsV0FHQXZ4QyxLQUFBbXlDLHdCQUFBQyxLQUFBQyxNQUNBcnlDLEtBQUE0eEMsaUJBQUEsRUFDQTV4QyxLQUFBZ2Esa0JBQ0FoYSxLQUFBZ2EsZ0JBQUF0UCxPQUFBK1Asc0JBQUEsV0FDQXBVLEVBQUF5ckMsa0JBQ0F6ckMsRUFBQTJULGdCQUFBLFVBSUFvM0IsRUFBQTF4QyxVQUFBcXlDLGlCQUFBLFNBQUFPLEdBQ0EsSUFBQWpzQyxFQUFBckcsVUFDQSxJQUFBc3lDLElBQXFDQSxFQXhOckMsS0F5TkF0eUMsS0FBQWl5QyxnQkFDQXZuQyxPQUFBd25DLGNBQUFseUMsS0FBQWl5QyxnQkFFQWp5QyxLQUFBZ3lDLG1CQUFBbHZCLFdBQUEsV0FDQSxHQUFBemMsRUFBQThyQyx3QkFBQSxDQUNBLElBQUFJLEVBOU5BLEtBOE5BSCxLQUFBQyxNQUFBaHNDLEVBQUE4ckMseUJBRUEsR0FEQTlyQyxFQUFBOHJDLHdCQUFBLEtBQ0FJLEVBQUEsRUFFQSxZQURBbHNDLEVBQUEwckMsaUJBQUFRLEdBSUFsc0MsRUFBQXVyQyxpQkFBQSxFQUNBdnJDLEVBQUEyVCxnQkFBQXRQLE9BQUErUCxzQkFBQSxXQUNBcFUsRUFBQXlyQyxrQkFDQXpyQyxFQUFBMlQsZ0JBQUEsT0FFQTNULEVBQUE0ckMsZUFBQU8sWUFBQSxXQUNBLEdBQUFuc0MsRUFBQThyQyx3QkFBQSxDQUNBLElBQUFJLEVBNU9BLEtBNE9BSCxLQUFBQyxNQUFBaHNDLEVBQUE4ckMseUJBR0EsT0FGQTlyQyxFQUFBOHJDLHdCQUFBLFVBQ0E5ckMsRUFBQTByQyxpQkFBQVEsR0FHQWxzQyxFQUFBdXJDLGlCQUFBdnJDLEVBQUF1ckMsZ0JBQ0F2ckMsRUFBQTJULGdCQUFBdFAsT0FBQStQLHNCQUFBLFdBQ0FwVSxFQUFBeXJDLGtCQUNBenJDLEVBQUEyVCxnQkFBQSxRQXBQQSxNQXVQU3M0QixJQUVUbEIsRUFBQTF4QyxVQUFBd3hDLE1BQUEsV0FDQWx4QyxLQUFBNHhDLGlCQUFBLEVBQ0E1eEMsS0FBQWl5QyxpQkFDQXZuQyxPQUFBd25DLGNBQUFseUMsS0FBQWl5QyxnQkFDQWp5QyxLQUFBaXlDLGVBQUEsTUFFQWp5QyxLQUFBZ3lDLHFCQUNBdG5DLE9BQUFrWSxhQUFBNWlCLEtBQUFneUMsb0JBQ0FoeUMsS0FBQWd5QyxtQkFBQSxNQUVBaHlDLEtBQUFnYSxrQkFDQXRQLE9BQUF1UCxxQkFBQWphLEtBQUFnYSxpQkFDQWhhLEtBQUFnYSxnQkFBQSxPQUdBbzNCLEVBQUExeEMsVUFBQXl4QyxPQUFBLFNBQUFybkMsR0FDQTlKLEtBQUFteUMsd0JBQUEsS0FDQW55QyxLQUFBK3hDLG1CQUNBL3hDLEtBQUFzeEMsc0JBQUF4bkMsSUFFQXNuQyxFQWhHQSxpQ0M3TEEsSUFDQXR4QyxFQURBQyxFQUFBQyxXQUFBRCxZQUNBRCxFQUFBLFNBQUExQixFQUFBNkIsR0FJQSxPQUhBSCxFQUFBdEIsT0FBQTBCLGdCQUNBLENBQWNDLFVBQUEsY0FBZ0JDLE9BQUEsU0FBQWhDLEVBQUE2QixHQUFzQzdCLEVBQUErQixVQUFBRixJQUNwRSxTQUFBN0IsRUFBQTZCLEdBQTZCLFFBQUFMLEtBQUFLLElBQUFOLGVBQUFDLEtBQUF4QixFQUFBd0IsR0FBQUssRUFBQUwsTUFDN0J4QixFQUFBNkIsSUFFQSxTQUFBN0IsRUFBQTZCLEdBRUEsU0FBQUksSUFBdUJMLEtBQUFNLFlBQUFsQyxFQUR2QjBCLEVBQUExQixFQUFBNkIsR0FFQTdCLEVBQUFzQixVQUFBLE9BQUFPLEVBQUF6QixPQUFBWSxPQUFBYSxJQUFBSSxFQUFBWCxVQUFBTyxFQUFBUCxVQUFBLElBQUFXLEtBR0E3QixPQUFBQyxlQUFBYixFQUFBLGNBQThDbUIsT0FBQSxJQUM5QyxJQUFBNnFDLEVBQXdCbHNDLEVBQVEsR0FDaENnRCxFQUFjaEQsRUFBUSxHQUN0QnNULEVBQXVCdFQsRUFBUSxHQUMvQmtyQyxFQUFBLFNBQUF6aEMsR0FFQSxTQUFBeWhDLEVBQUFpQixFQUFBejRCLEVBQUFySCxFQUFBRCxHQUNBLElBQUF6RCxFQUFBYyxFQUFBbEosS0FBQStCLEtBQUE2cEMsRUFBQSxPQUFBejRCLEdBQUEsRUFBQXJILElBQUEvSixLQUlBLE9BSEFxRyxFQUFBMmpDLE9BQUEsS0FDQWxnQyxFQUFBa2hCLFVBQUF2aUIsR0FBQSxxQkFBQW1aLEdBQXlELE9BQUF2YixFQUFBb3NDLGFBQUE3d0IsS0FDekQ5WCxFQUFBa2hCLFVBQUF2aUIsR0FBQSxxQkFBQW1aLEdBQXlELE9BQUF2YixFQUFBcXNDLGFBQUE5d0IsS0FDekR2YixFQTZDQSxPQW5EQXRHLEVBQUE2b0MsRUFBQXpoQyxHQVFBeWhDLEVBQUFscEMsVUFBQXNFLE9BQUEsU0FBQThGLEVBQUFxSSxHQUNBaEwsRUFBQXpILFVBQUFzRSxPQUFBL0YsS0FBQStCLEtBQUE4SixFQUFBcUksR0FDQW5TLEtBQUFncUMsT0FBQSxNQUVBcEIsRUFBQWxwQyxVQUFBeWQsTUFBQSxTQUFBclQsR0FDQTlKLEtBQUEyeUMscUJBRUEvSixFQUFBbHBDLFVBQUFpekMsa0JBQUEsV0FDQSxHQUFBM3lDLEtBQUFncUMsT0FBQSxDQUNBaHFDLEtBQUE0VixXQUFBNVYsS0FBQWdxQyxPQUFBdG1CLEdBQUExakIsS0FBQWdxQyxPQUFBM25CLEdBQUFyaUIsS0FBQWdxQyxPQUFBdG5DLEtBQUExQyxLQUFBZ3FDLE9BQUF0bUIsR0FBQSxHQUNBLElBQUFrdkIsRUFBQTV5QyxLQUFBZ3FDLE9BQUExbkIsR0FBQXRpQixLQUFBZ3FDLE9BQUEzbkIsR0FBQSxFQUNBdXdCLEVBQUEsR0FDQTV5QyxLQUFBNFYsV0FBQSxFQUFBNVYsS0FBQWdxQyxPQUFBM25CLEdBQUEsRUFBQXJpQixLQUFBZ3FDLE9BQUF0bkMsS0FBQWt3QyxHQUVBNXlDLEtBQUE0VixXQUFBLEVBQUE1VixLQUFBZ3FDLE9BQUExbkIsR0FBQXRpQixLQUFBZ3FDLE9BQUFybUIsR0FBQSxHQUNBM2pCLEtBQUFncUMsT0FBQSxPQUdBcEIsRUFBQWxwQyxVQUFBK3lDLGFBQUEsU0FBQTd3QixHQVVBLEdBVEFBLEVBQUEzUCxLQUFBdlIsRUFBQTJILHVCQUNBckksS0FBQWdULEtBQUEwQyxVQUFBMVYsS0FBQXNSLFFBQUFwSCxXQUFBeUwsSUFFQTNFLEVBQUE3RixXQUFBeVcsRUFBQTNQLElBQ0FqUyxLQUFBZ1QsS0FBQTBDLFVBQUExVixLQUFBc1IsUUFBQWhILEtBQUFzWCxFQUFBM1AsSUFBQTBELElBR0EzVixLQUFBZ1QsS0FBQTBDLFVBQUExVixLQUFBc1IsUUFBQXJILFdBQUEwTCxJQUVBaU0sRUFBQVMsS0FBQVQsRUFBQVUsR0FDQXRpQixLQUFBb1Ysc0JBQUF3TSxFQUFBOEIsR0FBQTlCLEVBQUFTLEdBQUFULEVBQUErQixHQUFBL0IsRUFBQThCLFFBRUEsQ0FDQTFqQixLQUFBb1Ysc0JBQUF3TSxFQUFBOEIsR0FBQTlCLEVBQUFTLEdBQUFULEVBQUFsZixLQUFBa2YsRUFBQThCLElBQ0EsUUFBQTFnQixFQUFBNGUsRUFBQVMsR0FBQSxFQUFrQ3JmLEVBQUE0ZSxFQUFBVSxHQUFVdGYsSUFDNUNoRCxLQUFBb1Ysc0JBQUEsRUFBQXBTLEVBQUE0ZSxFQUFBbGYsTUFFQTFDLEtBQUFvVixzQkFBQSxFQUFBd00sRUFBQVUsR0FBQVYsRUFBQStCLElBRUEzakIsS0FBQWdxQyxPQUFBcG9CLEdBRUFnbkIsRUFBQWxwQyxVQUFBZ3pDLGFBQUEsU0FBQTl3QixHQUNBNWhCLEtBQUEyeUMscUJBRUEvSixFQXBEQSxDQXFEQ2dCLEVBQUEzNEIsaUJBQ0RyVCxFQUFBZ3JDLGdEQ3ZFQXBxQyxPQUFBQyxlQUFBYixFQUFBLGNBQThDbUIsT0FBQSxJQUM5QyxJQUFBZ1MsRUFBZXJULEVBQVEsR0FDdkI4cUMsRUFBQSxXQUNBLFNBQUFBLEVBQUFsbkMsR0FDQXRCLEtBQUFzQixZQUNBdEIsS0FBQTZ5QyxrQkFBQSxHQUNBN3lDLEtBQUE4eUMsdUJBQUEsRUEySkEsT0F6SkF0SyxFQUFBOW9DLFVBQUFzYyx3QkFBQSxTQUFBclQsR0FDQSxJQUFBb3FDLEVBQUEsQ0FDQTVoQyxHQUFBblIsS0FBQTh5Qyx5QkFDQW5xQyxXQUdBLE9BREEzSSxLQUFBNnlDLGtCQUFBcHZDLEtBQUFzdkMsR0FDQUEsRUFBQTVoQyxJQUVBcTNCLEVBQUE5b0MsVUFBQXVjLDBCQUFBLFNBQUFDLEdBQ0EsUUFBQXBlLEVBQUEsRUFBdUJBLEVBQUFrQyxLQUFBNnlDLGtCQUFBNXdDLE9BQW1DbkUsSUFDMUQsR0FBQWtDLEtBQUE2eUMsa0JBQUEvMEMsR0FBQXFULEtBQUErSyxFQUVBLE9BREFsYyxLQUFBNnlDLGtCQUFBaHNDLE9BQUEvSSxFQUFBLElBQ0EsRUFHQSxVQUVBMHFDLEVBQUE5b0MsVUFBQWdyQyxvQkFBQSxTQUFBaEksR0FDQSxPQUFBMWlDLEtBQUE2eUMsa0JBQUE1d0MsT0FDQSxTQUVBLElBQUFnRCxFQUFBakYsS0FBQXNCLFVBQUEwcUIsT0FBQWhxQixNQUFBckQsSUFBQStqQyxHQUNBLE9BQUF6OUIsRUFBQWhELE9BQ0EsU0FRQSxJQU5BLElBQUErd0MsRUFBQSxHQUNBQyxFQUFBanpDLEtBQUFzQixVQUFBMHFCLE9BQUE5bUIsNEJBQUF3OUIsR0FBQSxHQUNBd1EsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQXB1QyxFQUFBdEcsSUFBQSxHQUFBb1MsRUFBQWxRLHVCQUFBLEVBQ0E4QyxFQUFBLEVBQXVCQSxFQUFBM0QsS0FBQXNCLFVBQUFvQixLQUF5QmlCLElBQUEsQ0FDaEQsSUFBQW1TLEVBQUE3USxFQUFBdEcsSUFBQWdGLEdBQ0FtTyxFQUFBZ0UsRUFBQS9FLEVBQUFqUSxzQkFDQThULEVBQUFrQixFQUFBL0UsRUFBQWhRLHVCQUNBd0IsRUFBQXVULEVBQUEvRSxFQUFBbFEsdUJBQUEsRUFDQSxPQUFBK1QsRUFBQSxDQUdBLEdBQUFyUyxJQUFBOHdDLEVBQUEsQ0FDQSxHQUFBMXZDLEVBQUF1dkMsRUFBQSxFQUVBLElBREEsSUFBQXpJLEVBQUF6cUMsS0FBQXN6QyxpQkFBQUwsRUFBQUcsRUFBQUQsRUFBQWx1QyxFQUFBaXVDLEdBQ0FwMUMsRUFBQSxFQUFtQ0EsRUFBQTJzQyxFQUFBeG9DLE9BQXlCbkUsSUFDNURrMUMsRUFBQXZ2QyxLQUFBZ25DLEVBQUEzc0MsSUFHQW8xQyxFQUFBdnZDLEVBQ0F5dkMsRUFBQUQsRUFDQUUsRUFBQTl3QyxFQUVBNHdDLEdBQUFyaEMsRUFBQTdQLFFBRUEsR0FBQWpDLEtBQUFzQixVQUFBb0IsS0FBQXd3QyxFQUFBLEVBRUEsSUFEQXpJLEVBQUF6cUMsS0FBQXN6QyxpQkFBQUwsRUFBQUcsRUFBQUQsRUFBQWx1QyxFQUFBaXVDLEdBQ0FwMUMsRUFBQSxFQUEyQkEsRUFBQTJzQyxFQUFBeG9DLE9BQXlCbkUsSUFDcERrMUMsRUFBQXZ2QyxLQUFBZ25DLEVBQUEzc0MsSUFHQSxPQUFBazFDLEdBRUF4SyxFQUFBOW9DLFVBQUE0ekMsaUJBQUEsU0FBQXJ1QyxFQUFBTSxFQUFBQyxFQUFBK3RDLEVBQUFudUMsR0FHQSxJQUZBLElBQUF3cUIsRUFBQTNxQixFQUFBVyxVQUFBTCxFQUFBQyxHQUNBaWxDLEVBQUF6cUMsS0FBQTZ5QyxrQkFBQSxHQUFBbHFDLFFBQUFpbkIsR0FDQTl4QixFQUFBLEVBQXVCQSxFQUFBa0MsS0FBQTZ5QyxrQkFBQTV3QyxPQUFtQ25FLElBRTFELElBREEsSUFBQTAxQyxFQUFBeHpDLEtBQUE2eUMsa0JBQUEvMEMsR0FBQTZLLFFBQUFpbkIsR0FDQXh0QixFQUFBLEVBQTJCQSxFQUFBb3hDLEVBQUF2eEMsT0FBeUJHLElBQ3BEb21DLEVBQUFpTCxhQUFBaEosRUFBQStJLEVBQUFweEMsSUFJQSxPQURBcEMsS0FBQTB6QywwQkFBQWpKLEVBQUE4SSxFQUFBbnVDLEdBQ0FxbEMsR0FFQWpDLEVBQUE5b0MsVUFBQWcwQywwQkFBQSxTQUFBVixFQUFBL3RDLEVBQUFHLEdBQ0EsSUFBQXV1QyxFQUFBLEVBQ0FDLEdBQUEsRUFDQVQsRUFBQSxFQUNBVSxFQUFBYixFQUFBVyxHQUNBLEdBQUFFLEVBQUEsQ0FHQSxRQUFBbHdDLEVBQUF5QixFQUE4QnpCLEVBQUEzRCxLQUFBc0IsVUFBQW9CLEtBQXlCaUIsSUFBQSxDQUN2RCxJQUFBbVMsRUFBQTdRLEVBQUF0RyxJQUFBZ0YsR0FDQWlSLEVBQUFrQixFQUFBL0UsRUFBQWhRLHVCQUNBK3lDLEVBQUFoK0IsRUFBQS9FLEVBQUFqUSxzQkFBQW1CLE9BQ0EsT0FBQTJTLEVBQUEsQ0FPQSxJQUpBZy9CLEdBQUFDLEVBQUEsSUFBQVYsSUFDQVUsRUFBQSxHQUFBbHdDLEVBQ0Fpd0MsR0FBQSxHQUVBQyxFQUFBLElBQUFWLEVBQUEsQ0FHQSxHQUZBVSxFQUFBLEdBQUFsd0MsSUFDQWt3QyxFQUFBYixJQUFBVyxJQUVBLE1BRUFFLEVBQUEsSUFBQVYsR0FDQVUsRUFBQSxHQUFBbHdDLEVBQ0Fpd0MsR0FBQSxHQUdBQSxHQUFBLEVBR0FULEdBQUFXLEdBRUFELElBQ0FBLEVBQUEsR0FBQTd6QyxLQUFBc0IsVUFBQW9CLFFBR0E4bEMsRUFBQWlMLGFBQUEsU0FBQVQsRUFBQWUsR0FFQSxJQURBLElBQUFDLEdBQUEsRUFDQWwyQyxFQUFBLEVBQXVCQSxFQUFBazFDLEVBQUEvd0MsT0FBbUJuRSxJQUFBLENBQzFDLElBQUFvSyxFQUFBOHFDLEVBQUFsMUMsR0FDQSxHQUFBazJDLEVBQUEsQ0FnQkEsR0FBQUQsRUFBQSxJQUFBN3JDLEVBQUEsR0FFQSxPQURBOHFDLEVBQUFsMUMsRUFBQSxNQUFBaTJDLEVBQUEsR0FDQWYsRUFFQSxHQUFBZSxFQUFBLElBQUE3ckMsRUFBQSxHQUlBLE9BSEE4cUMsRUFBQWwxQyxFQUFBLE1BQUEyRyxLQUFBQyxJQUFBcXZDLEVBQUEsR0FBQTdyQyxFQUFBLElBQ0E4cUMsRUFBQW5zQyxPQUFBL0ksRUFBQSxHQUNBazJDLEdBQUEsRUFDQWhCLEVBRUFBLEVBQUFuc0MsT0FBQS9JLEVBQUEsR0FDQUEsUUEzQkEsQ0FDQSxHQUFBaTJDLEVBQUEsSUFBQTdyQyxFQUFBLEdBRUEsT0FEQThxQyxFQUFBbnNDLE9BQUEvSSxFQUFBLEVBQUFpMkMsR0FDQWYsRUFFQSxHQUFBZSxFQUFBLElBQUE3ckMsRUFBQSxHQUVBLE9BREFBLEVBQUEsR0FBQXpELEtBQUFFLElBQUFvdkMsRUFBQSxHQUFBN3JDLEVBQUEsSUFDQThxQyxFQUVBZSxFQUFBLEdBQUE3ckMsRUFBQSxLQUNBQSxFQUFBLEdBQUF6RCxLQUFBRSxJQUFBb3ZDLEVBQUEsR0FBQTdyQyxFQUFBLElBQ0E4ckMsR0FBQSxJQXlCQSxPQU5BQSxFQUNBaEIsSUFBQS93QyxPQUFBLE1BQUE4eEMsRUFBQSxHQUdBZixFQUFBdnZDLEtBQUFzd0MsR0FFQWYsR0FFQXhLLEVBL0pBLEdBaUtBNXFDLEVBQUE0cUMsd0RDbktBLElBQ0Exb0MsRUFEQUMsRUFBQUMsV0FBQUQsWUFDQUQsRUFBQSxTQUFBMUIsRUFBQTZCLEdBSUEsT0FIQUgsRUFBQXRCLE9BQUEwQixnQkFDQSxDQUFjQyxVQUFBLGNBQWdCQyxPQUFBLFNBQUFoQyxFQUFBNkIsR0FBc0M3QixFQUFBK0IsVUFBQUYsSUFDcEUsU0FBQTdCLEVBQUE2QixHQUE2QixRQUFBTCxLQUFBSyxJQUFBTixlQUFBQyxLQUFBeEIsRUFBQXdCLEdBQUFLLEVBQUFMLE1BQzdCeEIsRUFBQTZCLElBRUEsU0FBQTdCLEVBQUE2QixHQUVBLFNBQUFJLElBQXVCTCxLQUFBTSxZQUFBbEMsRUFEdkIwQixFQUFBMUIsRUFBQTZCLEdBRUE3QixFQUFBc0IsVUFBQSxPQUFBTyxFQUFBekIsT0FBQVksT0FBQWEsSUFBQUksRUFBQVgsVUFBQU8sRUFBQVAsVUFBQSxJQUFBVyxLQUdBN0IsT0FBQUMsZUFBQWIsRUFBQSxjQUE4Q21CLE9BQUEsSUFDOUMsSUFBQXlvQixFQUF5QjlwQixFQUFRLElBQ2pDOEMsRUFBcUI5QyxFQUFRLEdBQzdCcVQsRUFBZXJULEVBQVEsR0FDdkI2K0IsRUFBa0I3K0IsRUFBUSxJQUMxQnV0QixFQUFBLFNBQUE5akIsR0FFQSxTQUFBOGpCLEVBQUEzcEIsR0FDQSxJQUFBK0UsRUFBQWMsRUFBQWxKLEtBQUErQixZQVFBLE9BUEFxRyxFQUFBL0UsWUFDQStFLEVBQUE0dEMsY0FBQSxHQUNBNXRDLEVBQUE2dEMsbUJBQUEsRUFDQTd0QyxFQUFBOHRDLGVBQUEsQ0FDQXZnQyxNQUFBLEtBQ0FDLElBQUEsTUFFQXhOLEVBMktBLE9BckxBdEcsRUFBQWtyQixFQUFBOWpCLEdBWUE4akIsRUFBQXZyQixVQUFBd3ZCLFlBQUEsU0FBQWtsQixHQUNBcDBDLEtBQUFrckIsa0JBQUFrcEIsR0FFQW5wQixFQUFBdnJCLFVBQUE4eUIsWUFBQSxTQUFBNWUsRUFBQUMsR0FDQSxJQUFBeE4sRUFBQXJHLEtBQ0FBLEtBQUFrckIsb0JBR0EsT0FBQWxyQixLQUFBbTBDLGVBQUF2Z0MsT0FDQTVULEtBQUFtMEMsZUFBQXZnQyxRQUNBNVQsS0FBQW0wQyxlQUFBdGdDLFFBR0E3VCxLQUFBbTBDLGVBQUF2Z0MsTUFBQW5QLEtBQUFFLElBQUEzRSxLQUFBbTBDLGVBQUF2Z0MsU0FDQTVULEtBQUFtMEMsZUFBQXRnQyxJQUFBcFAsS0FBQUMsSUFBQTFFLEtBQUFtMEMsZUFBQXRnQyxRQUVBN1QsS0FBQWtyQixrQkFBQS9YLFNBQUFTLEVBQUFDLEdBQ0E3VCxLQUFBcTBDLGdCQUNBenhCLGFBQUE1aUIsS0FBQXEwQyxnQkFFQXIwQyxLQUFBcTBDLGVBQUF2eEIsV0FBQSxXQUFzRCxPQUFBemMsRUFBQWl1QyxnQkFBK0JycEIsRUFBQXNwQix1QkFFckZ0cEIsRUFBQXZyQixVQUFBNDBDLGFBQUEsV0FDQXQwQyxLQUFBcTBDLGVBQUEsS0FDQSxJQUFBcm9CLEVBQUFoc0IsS0FBQXNCLFVBQUEwcUIsT0FDQXdvQixFQUFBeG9CLEVBQUEvb0IsTUFBQWpELEtBQUFtMEMsZUFBQXZnQyxNQUNBLEtBQUE0Z0MsR0FBQXhvQixFQUFBaHFCLE1BQUFDLFFBQUEsQ0FNQSxJQUhBLElBQUF3eUMsRUFBQXpvQixFQUFBL29CLE1BQUF3QixLQUFBRSxJQUFBM0UsS0FBQW0wQyxlQUFBdGdDLElBQUE3VCxLQUFBc0IsVUFBQXNCLE1BQUEsRUFDQTh4QyxFQUFBandDLEtBQUFxZ0IsS0FBQW1HLEVBQUEwcEIsb0JBQUEzMEMsS0FBQXNCLFVBQUFvQixNQUNBcUUsRUFBQS9HLEtBQUFzQixVQUFBMHFCLE9BQUFqbEIsVUFBQSxFQUFBeXRDLEVBQUFDLEVBQUFDLEtBQ0EzdEMsRUFBQWlCLFdBRUEsSUFEQSxJQUFBdXJDLEVBQUF4c0MsRUFBQWtCLE9BQ0FuSyxFQUFBLEVBQTJCQSxFQUFBa0MsS0FBQWkwQyxjQUFBaHlDLE9BQStCbkUsSUFDMURrQyxLQUFBNDBDLGNBQUFyQixFQUFBcnJDLE1BQUFwQyxNQUFBeXRDLEVBQUFuckMsUUFBQXBJLEtBQUFpMEMsY0FBQW4yQyxJQUdBa0MsS0FBQW0wQyxlQUFBdmdDLE1BQUEsS0FDQTVULEtBQUFtMEMsZUFBQXRnQyxJQUFBLE9BRUFvWCxFQUFBdnJCLFVBQUFrYyxvQkFBQSxTQUFBQyxFQUFBbFQsRUFBQXZGLEdBRUEsUUFEQSxJQUFBQSxJQUFpQ0EsRUFBQSxLQUNqQ3VGLEVBQ0EsVUFBQWlqQixNQUFBLDJCQUVBLElBQUFpcEIsRUFBQSxDQUNBMWpDLEdBQUFuUixLQUFBazBDLHFCQUNBcjRCLFFBQ0FsVCxVQUNBbXNDLFdBQUExeEMsRUFBQTB4QyxXQUNBQyxtQkFBQTN4QyxFQUFBMnhDLG1CQUNBQyxxQkFBQTV4QyxFQUFBNGYsZ0JBQ0FpeUIsbUJBQUE3eEMsRUFBQW1mLGNBQ0FVLGlCQUFBN2YsRUFBQTZmLGlCQUNBaXlCLFNBQUE5eEMsRUFBQTh4QyxVQUFBLEdBR0EsT0FEQWwxQyxLQUFBbTFDLHNCQUFBTixHQUNBQSxFQUFBMWpDLElBRUE4WixFQUFBdnJCLFVBQUF5MUMsc0JBQUEsU0FBQU4sR0FDQSxPQUFBNzBDLEtBQUFpMEMsY0FBQWh5QyxPQUFBLENBSUEsUUFBQW5FLEVBQUFrQyxLQUFBaTBDLGNBQUFoeUMsT0FBQSxFQUFtRG5FLEdBQUEsRUFBUUEsSUFDM0QsR0FBQSsyQyxFQUFBSyxVQUFBbDFDLEtBQUFpMEMsY0FBQW4yQyxHQUFBbzNDLFNBRUEsWUFEQWwxQyxLQUFBaTBDLGNBQUFwdEMsT0FBQS9JLEVBQUEsSUFBQSsyQyxHQUlBNzBDLEtBQUFpMEMsY0FBQXB0QyxPQUFBLElBQUFndUMsUUFUQTcwQyxLQUFBaTBDLGNBQUF4d0MsS0FBQW94QyxJQVdBNXBCLEVBQUF2ckIsVUFBQW9jLHNCQUFBLFNBQUFDLEdBQ0EsUUFBQWplLEVBQUEsRUFBdUJBLEVBQUFrQyxLQUFBaTBDLGNBQUFoeUMsT0FBK0JuRSxJQUN0RCxHQUFBa0MsS0FBQWkwQyxjQUFBbjJDLEdBQUFxVCxLQUFBNEssRUFFQSxPQURBL2IsS0FBQWkwQyxjQUFBcHRDLE9BQUEvSSxFQUFBLElBQ0EsRUFHQSxVQUVBbXRCLEVBQUF2ckIsVUFBQWsxQyxjQUFBLFNBQUFRLEVBQUF4bEIsRUFBQWlsQixHQXVDQSxJQXRDQSxJQUVBUSxFQUZBaHZDLEVBQUFyRyxLQUNBczFDLEVBQUEsSUFBQUMsT0FBQVYsRUFBQWg1QixNQUFBMjVCLE9BQUFYLEVBQUFoNUIsTUFBQXduQixNQUFBLEtBRUFyK0IsR0FBQSxFQUNBdzhCLEVBQUEsV0FDQSxJQUFBaVUsRUFBQUosRUFBQSxpQkFBQVIsRUFBQUMsV0FBQSxFQUFBRCxFQUFBQyxZQUNBLElBQUFXLEVBQUEsQ0FDQSxHQUFBaFUsRUFBQW5nQyxVQUFBb25CLE1BRUEsTUFEQXJQLFFBQUF3YixJQUFBLENBQWlDd2dCLFFBQUFSLFlBQ2pDLElBQUFqcEIsTUFBQSxnREFFQSxjQUVBNW1CLEVBQUE0cUIsRUFBQTlvQixRQUFBMnVDLEVBQUF6d0MsRUFBQSxHQUNBc3dDLEVBQUFJLFVBQUExd0MsRUFBQXl3QyxFQUFBeHpDLE9BQ0EsSUFHQWdRLEVBSEEwakMsRUFBQWxVLEVBQUFuZ0MsVUFBQTBxQixPQUFBbG5CLHlCQUFBc3dDLEVBQUFwd0MsR0FFQVMsRUFEQWc4QixFQUFBbmdDLFVBQUEwcUIsT0FBQWhxQixNQUFBckQsSUFBQWczQyxFQUFBLElBQ0FoM0MsSUFBQWczQyxFQUFBLElBRUEsR0FBQWx3QyxFQUFBLENBQ0EsSUFBQWxELEVBQUFrRCxFQUFBc0wsRUFBQWxRLHNCQUNBb1IsRUFBQTFQLEdBQUEsTUFFQXN5QyxFQUFBRSxtQkFDQUYsRUFBQUUsbUJBQUFVLEVBQUEsU0FBQUcsR0FDQXZ2QyxFQUFBZ3VDLGdCQUdBdUIsR0FDQXZ2QyxFQUFBd3ZDLFNBQUFGLEVBQUEsR0FBQUEsRUFBQSxHQUFBdHZDLEVBQUEvRSxVQUFBMHFCLE9BQUEvb0IsTUFBQXd5QyxFQUFBWixFQUFBNWlDLEtBS0F3dkIsRUFBQW9VLFNBQUFGLEVBQUEsR0FBQUEsRUFBQSxHQUFBbFUsRUFBQW5nQyxVQUFBMHFCLE9BQUEvb0IsTUFBQXd5QyxFQUFBWixFQUFBNWlDLElBR0F3dkIsRUFBQXpoQyxLQUNBLFFBQUFxMUMsRUFBQUMsRUFBQVEsS0FBQWxtQixLQUFBLENBRUEsYUFEQTRSLElBRUEsUUFHQXZXLEVBQUF2ckIsVUFBQW0yQyxTQUFBLFNBQUFseUMsRUFBQVgsRUFBQXl5QyxFQUFBWixFQUFBNWlDLEdBQ0EsSUFBQTVMLEVBQUFyRyxLQUNBNFUsRUFBQTJuQixFQUFBbmUsbUJBQUFxM0IsR0FDQS94QixFQUFBL2YsRUFBQTNELEtBQUFzQixVQUFBb0IsS0FDQTJmLEVBQUFyZixFQUFBeUIsS0FBQXNoQixNQUFBcGlCLEVBQUEzRCxLQUFBc0IsVUFBQW9CLE1BQ0FpaEIsR0FBQUQsRUFBQTlPLEdBQUE1VSxLQUFBc0IsVUFBQW9CLEtBQ0E0ZixFQUFBRCxFQUFBNWQsS0FBQXNoQixPQUFBckMsRUFBQTlPLEdBQUE1VSxLQUFBc0IsVUFBQW9CLE1BQ0EsSUFBQWloQixJQUNBQSxFQUFBM2pCLEtBQUFzQixVQUFBb0IsS0FDQTRmLEtBRUF0aUIsS0FBQWtyQixrQkFBQXpZLElBQUEsSUFBQStVLEVBQUE1RCxVQUFBRixFQUFBLEVBQUFyQixFQUFBLEVBQUFzQixFQUFBLEVBQUFyQixFQUFBLFdBQUFWLEdBQ0EsR0FBQWl6QixFQUFBbHNDLFFBQ0EsT0FBQWtzQyxFQUFBbHNDLFFBQUFpWixFQUFBNnpCLEdBRUEvcUMsT0FBQThRLEtBQUFpNkIsRUFBQSxXQUNTLFNBQUE3ekIsR0FDVHZiLEVBQUFrQixLQUFBLFlBQUFsQixFQUFBMHZDLHNCQUFBcnlCLEVBQUFyQixFQUFBc0IsRUFBQXJCLEVBQUFyUSxJQUNBNUwsRUFBQS9FLFVBQUE0WixRQUFBMUksVUFBQUMsSUFBQSx5QkFDUyxTQUFBbVAsR0FDVHZiLEVBQUFrQixLQUFBLGNBQUFsQixFQUFBMHZDLHNCQUFBcnlCLEVBQUFyQixFQUFBc0IsRUFBQXJCLEVBQUFyUSxJQUNBNGlDLEVBQUFHLHNCQUNBSCxFQUFBRyxxQkFBQXB6QixFQUFBNnpCLElBRVMsV0FDVHB2QyxFQUFBa0IsS0FBQSxZQUFBbEIsRUFBQTB2QyxzQkFBQXJ5QixFQUFBckIsRUFBQXNCLEVBQUFyQixFQUFBclEsSUFDQTVMLEVBQUEvRSxVQUFBNFosUUFBQTFJLFVBQUEwYSxPQUFBLHdCQUNBMm5CLEVBQUFJLG9CQUNBSixFQUFBSSxzQkFFUyxTQUFBcnpCLEdBQ1QsT0FBQWl6QixFQUFBNXhCLGtCQUNBNHhCLEVBQUE1eEIsaUJBQUFyQixFQUFBNnpCLE9BS0F4cUIsRUFBQXZyQixVQUFBcTJDLHNCQUFBLFNBQUFyeUIsRUFBQXJCLEVBQUFzQixFQUFBckIsRUFBQXJRLEdBQ0EsT0FBZ0J5UixLQUFBckIsS0FBQXNCLEtBQUFyQixLQUFBNWYsS0FBQTFDLEtBQUFzQixVQUFBb0IsS0FBQXVQLE9BRWhCZ1osRUFBQXNwQixvQkFBQSxJQUNBdHBCLEVBQUEwcEIsb0JBQUEsSUFDQTFwQixFQXRMQSxDQXVMQ3pxQixFQUFBZ0gsY0FDRDVKLEVBQUFxdEIsMENDMU1BLElBQ0FuckIsRUFEQUMsRUFBQUMsV0FBQUQsWUFDQUQsRUFBQSxTQUFBMUIsRUFBQTZCLEdBSUEsT0FIQUgsRUFBQXRCLE9BQUEwQixnQkFDQSxDQUFjQyxVQUFBLGNBQWdCQyxPQUFBLFNBQUFoQyxFQUFBNkIsR0FBc0M3QixFQUFBK0IsVUFBQUYsSUFDcEUsU0FBQTdCLEVBQUE2QixHQUE2QixRQUFBTCxLQUFBSyxJQUFBTixlQUFBQyxLQUFBeEIsRUFBQXdCLEdBQUFLLEVBQUFMLE1BQzdCeEIsRUFBQTZCLElBRUEsU0FBQTdCLEVBQUE2QixHQUVBLFNBQUFJLElBQXVCTCxLQUFBTSxZQUFBbEMsRUFEdkIwQixFQUFBMUIsRUFBQTZCLEdBRUE3QixFQUFBc0IsVUFBQSxPQUFBTyxFQUFBekIsT0FBQVksT0FBQWEsSUFBQUksRUFBQVgsVUFBQU8sRUFBQVAsVUFBQSxJQUFBVyxLQUdBN0IsT0FBQUMsZUFBQWIsRUFBQSxjQUE4Q21CLE9BQUEsSUFDOUMsSUFBQXFvQixFQUFvQjFwQixFQUFRLElBQzVCeXBCLEVBQWN6cEIsRUFBUSxHQUN0QjhDLEVBQXFCOUMsRUFBUSxHQUM3QnM0QyxFQUF1QnQ0QyxFQUFRLElBQy9CcVQsRUFBZXJULEVBQVEsR0FDdkJ1NEMsRUFBd0J2NEMsRUFBUSxJQU1oQ3c0QyxFQUFBOTFCLE9BQUFDLGFBQUEsS0FDQTgxQixFQUFBLElBQUFaLE9BQUFXLEVBQUEsS0FDQXhtQixFQUFBLFNBQUF2b0IsR0FFQSxTQUFBdW9CLEVBQUFwdUIsRUFBQTI0QixHQUNBLElBQUE1ekIsRUFBQWMsRUFBQWxKLEtBQUErQixZQVFBLE9BUEFxRyxFQUFBL0UsWUFDQStFLEVBQUE0ekIsZUFDQTV6QixFQUFBK3ZDLFVBQUEsRUFDQS92QyxFQUFBZ3dDLGlCQUNBaHdDLEVBQUErOEIsU0FDQS84QixFQUFBaXdDLE9BQUEsSUFBQU4sRUFBQU8sZUFBQWoxQyxHQUNBK0UsRUFBQW13QyxxQkFBQSxFQUNBbndDLEVBbWhCQSxPQTdoQkF0RyxFQUFBMnZCLEVBQUF2b0IsR0FZQXVvQixFQUFBaHdCLFVBQUFpSCxRQUFBLFdBQ0FRLEVBQUF6SCxVQUFBaUgsUUFBQTFJLEtBQUErQixNQUNBQSxLQUFBeTJDLDZCQUVBajRDLE9BQUFDLGVBQUFpeEIsRUFBQWh3QixVQUFBLFdBQ0FmLElBQUEsV0FDQSxPQUFBcUIsS0FBQXNCLFVBQUErcEIsUUFBQUcsUUFFQTlzQixZQUFBLEVBQ0FtRSxjQUFBLElBRUE2c0IsRUFBQWh3QixVQUFBMjJDLGVBQUEsV0FDQSxJQUFBaHdDLEVBQUFyRyxLQUNBQSxLQUFBOGhCLG1CQUFBLFNBQUFvQyxHQUFvRCxPQUFBN2QsRUFBQTBiLGFBQUFtQyxJQUNwRGxrQixLQUFBMDJDLGlCQUFBLFNBQUF4eUIsR0FBa0QsT0FBQTdkLEVBQUFzd0MsV0FBQXp5QixJQUNsRGxrQixLQUFBNDJDLGNBQUEsU0FBQWx3QyxHQUFnRCxPQUFBTCxFQUFBd3dDLFFBQUFud0MsSUFDaEQxRyxLQUFBdXJCLHdCQUVBbUUsRUFBQWh3QixVQUFBNnJCLHFCQUFBLFdBQ0EsSUFBQWxsQixFQUFBckcsS0FDQUEsS0FBQXNCLFVBQUEwcUIsT0FBQWhxQixNQUFBeUcsR0FBQSxPQUFBekksS0FBQTQyQyxlQUNBNTJDLEtBQUFzQixVQUFBK3BCLFFBQUE1aUIsR0FBQSxvQkFBQW1aLEdBQTRELE9BQUF2YixFQUFBeXdDLGtCQUFBbDFCLE1BRTVEOE4sRUFBQWh3QixVQUFBeWpDLFFBQUEsV0FDQW5qQyxLQUFBc2MsaUJBQ0F0YyxLQUFBbzJDLFVBQUEsR0FFQTFtQixFQUFBaHdCLFVBQUEwakMsT0FBQSxXQUNBcGpDLEtBQUFvMkMsVUFBQSxHQUVBNTNDLE9BQUFDLGVBQUFpeEIsRUFBQWh3QixVQUFBLGtCQUNBZixJQUFBLFdBQTBCLE9BQUFxQixLQUFBczJDLE9BQUFTLHFCQUMxQnI0QyxZQUFBLEVBQ0FtRSxjQUFBLElBRUFyRSxPQUFBQyxlQUFBaXhCLEVBQUFod0IsVUFBQSxnQkFDQWYsSUFBQSxXQUEwQixPQUFBcUIsS0FBQXMyQyxPQUFBVSxtQkFDMUJ0NEMsWUFBQSxFQUNBbUUsY0FBQSxJQUVBckUsT0FBQUMsZUFBQWl4QixFQUFBaHdCLFVBQUEsZ0JBQ0FmLElBQUEsV0FDQSxJQUFBaVYsRUFBQTVULEtBQUFzMkMsT0FBQVMsb0JBQ0FsakMsRUFBQTdULEtBQUFzMkMsT0FBQVUsa0JBQ0EsU0FBQXBqQyxJQUFBQyxLQUdBRCxFQUFBLEtBQUFDLEVBQUEsSUFBQUQsRUFBQSxLQUFBQyxFQUFBLEtBRUFuVixZQUFBLEVBQ0FtRSxjQUFBLElBRUFyRSxPQUFBQyxlQUFBaXhCLEVBQUFod0IsVUFBQSxpQkFDQWYsSUFBQSxXQUNBLElBQUFpVixFQUFBNVQsS0FBQXMyQyxPQUFBUyxvQkFDQWxqQyxFQUFBN1QsS0FBQXMyQyxPQUFBVSxrQkFDQSxJQUFBcGpDLElBQUFDLEVBQ0EsU0FFQSxJQUFBMUwsRUFBQSxHQUNBLE9BQUFuSSxLQUFBdzJDLHFCQUFBLENBQ0EsR0FBQTVpQyxFQUFBLEtBQUFDLEVBQUEsR0FDQSxTQUVBLFFBQUEvVixFQUFBOFYsRUFBQSxHQUFzQzlWLEdBQUErVixFQUFBLEdBQWEvVixJQUFBLENBQ25ELElBQUFtNUMsRUFBQWozQyxLQUFBeUgsUUFBQXZDLDRCQUFBcEgsR0FBQSxFQUFBOFYsRUFBQSxHQUFBQyxFQUFBLElBQ0ExTCxFQUFBMUUsS0FBQXd6QyxRQUdBLENBQ0EsSUFBQTNHLEVBQUExOEIsRUFBQSxLQUFBQyxFQUFBLEdBQUFBLEVBQUEsUUFDQTFMLEVBQUExRSxLQUFBekQsS0FBQXlILFFBQUF2Qyw0QkFBQTBPLEVBQUEsTUFBQUEsRUFBQSxHQUFBMDhCLElBQ0EsSUFBQXh5QyxFQUFBOFYsRUFBQSxLQUEwQzlWLEdBQUErVixFQUFBLEtBQWlCL1YsSUFBQSxDQUMzRCxJQUFBbzVDLEVBQUFsM0MsS0FBQXlILFFBQUF6RixNQUFBckQsSUFBQWIsR0FDQW01QyxFQUFBajNDLEtBQUF5SCxRQUFBdkMsNEJBQUFwSCxHQUFBLEdBQ0FvNUMsRUFBQTEwQyxVQUNBMkYsSUFBQWxHLE9BQUEsSUFBQWcxQyxFQUdBOXVDLEVBQUExRSxLQUFBd3pDLEdBR0EsR0FBQXJqQyxFQUFBLEtBQUFDLEVBQUEsSUFDQXFqQyxFQUFBbDNDLEtBQUF5SCxRQUFBekYsTUFBQXJELElBQUFrVixFQUFBLElBQ0FvakMsRUFBQWozQyxLQUFBeUgsUUFBQXZDLDRCQUFBMk8sRUFBQSxRQUFBQSxFQUFBLElBQ0FxakMsRUFBQTEwQyxVQUNBMkYsSUFBQWxHLE9BQUEsSUFBQWcxQyxFQUdBOXVDLEVBQUExRSxLQUFBd3pDLElBT0EsT0FIQTl1QyxFQUFBZ3ZDLElBQUEsU0FBQWx5QyxHQUNBLE9BQUFBLEVBQUFxMEIsUUFBQTZjLEVBQUEsT0FDYWlCLEtBQUFqd0IsRUFBQWhiLFlBQUEsY0FHYnpOLFlBQUEsRUFDQW1FLGNBQUEsSUFFQTZzQixFQUFBaHdCLFVBQUE0YyxlQUFBLFdBQ0F0YyxLQUFBczJDLE9BQUFoNkIsaUJBQ0F0YyxLQUFBeTJDLDRCQUNBejJDLEtBQUFrYSxXQUVBd1YsRUFBQWh3QixVQUFBd2EsUUFBQSxTQUFBbTlCLEdBQ0EsSUFBQWh4QyxFQUFBckcsTUFDQUEsS0FBQXc2Qix5QkFDQXg2QixLQUFBdzZCLHVCQUFBOXZCLE9BQUErUCxzQkFBQSxXQUFvRixPQUFBcFUsRUFBQXcwQixjQUVwRjFULEVBQUEvYSxTQUFBaXJDLEtBQ0FyM0MsS0FBQTh6QixjQUNBN3hCLFFBQ0FqQyxLQUFBdUgsS0FBQSxlQUFBdkgsS0FBQTh6QixpQkFJQXBFLEVBQUFod0IsVUFBQW03QixTQUFBLFdBQ0E3NkIsS0FBQXc2Qix1QkFBQSxLQUNBeDZCLEtBQUF1SCxLQUFBLFdBQ0FxTSxNQUFBNVQsS0FBQXMyQyxPQUFBUyxvQkFDQWxqQyxJQUFBN1QsS0FBQXMyQyxPQUFBVSxrQkFDQWxqQyxpQkFBQSxJQUFBOVQsS0FBQXcyQyx3QkFHQTltQixFQUFBaHdCLFVBQUEwOEIsbUJBQUEsU0FBQWxZLEdBQ0EsSUFBQWIsRUFBQXJqQixLQUFBczNDLHNCQUFBcHpCLEdBQ0F0USxFQUFBNVQsS0FBQXMyQyxPQUFBUyxvQkFDQWxqQyxFQUFBN1QsS0FBQXMyQyxPQUFBVSxrQkFDQSxTQUFBcGpDLElBQUFDLElBR0E3VCxLQUFBdTNDLHNCQUFBbDBCLEVBQUF6UCxFQUFBQyxJQUVBNmIsRUFBQWh3QixVQUFBNjNDLHNCQUFBLFNBQUFsMEIsRUFBQXpQLEVBQUFDLEdBQ0EsT0FBQXdQLEVBQUEsR0FBQXpQLEVBQUEsSUFBQXlQLEVBQUEsR0FBQXhQLEVBQUEsSUFDQUQsRUFBQSxLQUFBQyxFQUFBLElBQUF3UCxFQUFBLEtBQUF6UCxFQUFBLElBQUF5UCxFQUFBLElBQUF6UCxFQUFBLElBQUF5UCxFQUFBLEdBQUF4UCxFQUFBLElBQ0FELEVBQUEsR0FBQUMsRUFBQSxJQUFBd1AsRUFBQSxLQUFBeFAsRUFBQSxJQUFBd1AsRUFBQSxHQUFBeFAsRUFBQSxJQUNBRCxFQUFBLEdBQUFDLEVBQUEsSUFBQXdQLEVBQUEsS0FBQXpQLEVBQUEsSUFBQXlQLEVBQUEsSUFBQXpQLEVBQUEsSUFFQThiLEVBQUFod0IsVUFBQTI4QixtQkFBQSxTQUFBblksR0FDQSxJQUFBYixFQUFBcmpCLEtBQUFzM0Msc0JBQUFwekIsR0FDQWIsSUFDQXJqQixLQUFBdzNDLGNBQUFuMEIsR0FBQSxHQUNBcmpCLEtBQUFzMkMsT0FBQW1CLGFBQUEsS0FDQXozQyxLQUFBa2EsU0FBQSxLQUdBd1YsRUFBQWh3QixVQUFBNmMsVUFBQSxXQUNBdmMsS0FBQXMyQyxPQUFBb0IsbUJBQUEsRUFDQTEzQyxLQUFBa2EsVUFDQWxhLEtBQUFzQixVQUFBaUcsS0FBQSxjQUVBbW9CLEVBQUFod0IsVUFBQThjLFlBQUEsU0FBQTVJLEVBQUFDLEdBQ0E3VCxLQUFBczJDLE9BQUFoNkIsaUJBQ0ExSSxFQUFBblAsS0FBQUMsSUFBQWtQLEVBQUEsR0FDQUMsRUFBQXBQLEtBQUFFLElBQUFrUCxFQUFBN1QsS0FBQXNCLFVBQUEwcUIsT0FBQWhxQixNQUFBQyxPQUFBLEdBQ0FqQyxLQUFBczJDLE9BQUFxQixlQUFBLEdBQUEvakMsR0FDQTVULEtBQUFzMkMsT0FBQW1CLGFBQUEsQ0FBQXozQyxLQUFBc0IsVUFBQW9CLEtBQUFtUixHQUNBN1QsS0FBQWthLFVBQ0FsYSxLQUFBc0IsVUFBQWlHLEtBQUEsY0FFQW1vQixFQUFBaHdCLFVBQUFtM0MsUUFBQSxTQUFBbndDLEdBQ0ExRyxLQUFBczJDLE9BQUFzQixPQUFBbHhDLElBRUExRyxLQUFBa2EsV0FHQXdWLEVBQUFod0IsVUFBQTQzQyxzQkFBQSxTQUFBcHpCLEdBQ0EsSUFBQWIsRUFBQXJqQixLQUFBc0IsVUFBQWdpQixZQUFBQyxVQUFBVyxFQUFBbGtCLEtBQUFzQixVQUFBa2lCLGNBQUF4akIsS0FBQWk2QixhQUFBajZCLEtBQUFzQixVQUFBb0IsS0FBQTFDLEtBQUFzQixVQUFBc0IsTUFBQSxHQUNBLE9BQUF5Z0IsR0FHQUEsRUFBQSxLQUNBQSxFQUFBLEtBQ0FBLEVBQUEsSUFBQXJqQixLQUFBc0IsVUFBQTBxQixPQUFBL29CLE1BQ0FvZ0IsR0FMQSxNQU9BcU0sRUFBQWh3QixVQUFBbTRDLDJCQUFBLFNBQUEzekIsR0FDQSxJQUFBdEUsRUFBQXdILEVBQUF2RCxZQUFBSSwyQkFBQUMsRUFBQWxrQixLQUFBc0IsVUFBQWtpQixlQUFBLEdBQ0FzMEIsRUFBQTkzQyxLQUFBc0IsVUFBQXNCLEtBQUE2QixLQUFBcWdCLEtBQUE5a0IsS0FBQWk2QixhQUFBbmxCLE9BQUE5VSxLQUFBc0IsVUFBQThCLFFBQUFrbEIsWUFDQSxPQUFBMUksR0FBQSxHQUFBQSxHQUFBazRCLEVBQ0EsR0FFQWw0QixFQUFBazRCLElBQ0FsNEIsR0FBQWs0QixHQUVBbDRCLEVBQUFuYixLQUFBRSxJQUFBRixLQUFBQyxJQUFBa2IsR0FoTkEsU0FpTkFBLEdBak5BLElBa05BbmIsS0FBQTB0QixJQUFBdlMsR0FBQW5iLEtBQUF1MkIsTUFBQSxHQUFBcGIsS0FFQThQLEVBQUFod0IsVUFBQWt5QixxQkFBQSxTQUFBMU4sR0FDQSxPQUFBaUQsRUFBQW5iLE1BQ0FrWSxFQUFBa1EsUUFBQXAwQixLQUFBc0IsVUFBQThCLFFBQUF3bEIsOEJBRUExRSxFQUFBME0sVUFFQWxCLEVBQUFod0IsVUFBQWl3QixZQUFBLFNBQUF6TCxHQUVBLEdBREFsa0IsS0FBQSszQyxvQkFBQTd6QixFQUFBOHpCLFdBQ0EsSUFBQTl6QixFQUFBc0osU0FBQXh0QixLQUFBb2MsZUFHQSxJQUFBOEgsRUFBQXNKLE9BQUEsQ0FHQSxJQUFBeHRCLEtBQUFvMkMsU0FBQSxDQUNBLElBQUFwMkMsS0FBQTR4QixxQkFBQTFOLEdBQ0EsT0FFQUEsRUFBQXNSLGtCQUVBdFIsRUFBQWhCLGlCQUNBbGpCLEtBQUFpNEMsa0JBQUEsRUFDQWo0QyxLQUFBbzJDLFVBQUFseUIsRUFBQTBNLFNBQ0E1d0IsS0FBQWs0QyxvQkFBQWgwQixHQUdBLElBQUFBLEVBQUF3TSxPQUNBMXdCLEtBQUFtNEMsZUFBQWowQixHQUVBLElBQUFBLEVBQUF3TSxPQUNBMXdCLEtBQUFvNEMsZUFBQWwwQixHQUVBLElBQUFBLEVBQUF3TSxRQUNBMXdCLEtBQUFxNEMsZUFBQW4wQixHQUdBbGtCLEtBQUFzNEMseUJBQ0F0NEMsS0FBQWthLFNBQUEsS0FFQXdWLEVBQUFod0IsVUFBQTQ0Qyx1QkFBQSxXQUNBLElBQUFqeUMsRUFBQXJHLEtBQ0FBLEtBQUFzQixVQUFBNFosUUFBQXFKLGNBQUEvWCxpQkFBQSxZQUFBeE0sS0FBQThoQixvQkFDQTloQixLQUFBc0IsVUFBQTRaLFFBQUFxSixjQUFBL1gsaUJBQUEsVUFBQXhNLEtBQUEwMkMsa0JBQ0ExMkMsS0FBQXU0Qyx5QkFBQS9GLFlBQUEsV0FBaUUsT0FBQW5zQyxFQUFBbXlDLGVBN1BqRSxLQStQQTlvQixFQUFBaHdCLFVBQUErMkMsMEJBQUEsV0FDQXoyQyxLQUFBc0IsVUFBQTRaLFFBQUFxSixnQkFDQXZrQixLQUFBc0IsVUFBQTRaLFFBQUFxSixjQUFBOVgsb0JBQUEsWUFBQXpNLEtBQUE4aEIsb0JBQ0E5aEIsS0FBQXNCLFVBQUE0WixRQUFBcUosY0FBQTlYLG9CQUFBLFVBQUF6TSxLQUFBMDJDLG1CQUVBeEUsY0FBQWx5QyxLQUFBdTRDLDBCQUNBdjRDLEtBQUF1NEMseUJBQUEsTUFFQTdvQixFQUFBaHdCLFVBQUF3NEMsb0JBQUEsU0FBQWgwQixHQUNBbGtCLEtBQUFzMkMsT0FBQXFCLGlCQUNBMzNDLEtBQUFzMkMsT0FBQW1CLGFBQUF6M0MsS0FBQXMzQyxzQkFBQXB6QixLQUdBd0wsRUFBQWh3QixVQUFBeTRDLGVBQUEsU0FBQWowQixHQUtBLEdBSkFsa0IsS0FBQXMyQyxPQUFBbUMscUJBQUEsRUFDQXo0QyxLQUFBczJDLE9BQUFvQixtQkFBQSxFQUNBMTNDLEtBQUF3MkMscUJBQUF4MkMsS0FBQXl5QixtQkFBQXZPLEdBQUEsSUFDQWxrQixLQUFBczJDLE9BQUFxQixlQUFBMzNDLEtBQUFzM0Msc0JBQUFwekIsR0FDQWxrQixLQUFBczJDLE9BQUFxQixlQUFBLENBR0EzM0MsS0FBQXMyQyxPQUFBbUIsYUFBQSxLQUNBLElBQUF4eUMsRUFBQWpGLEtBQUF5SCxRQUFBekYsTUFBQXJELElBQUFxQixLQUFBczJDLE9BQUFxQixlQUFBLElBQ0EsR0FBQTF5QyxFQUdBLEtBQUFBLEVBQUFoRCxRQUFBakMsS0FBQXMyQyxPQUFBcUIsZUFBQSxJQUlBLElBREExeUMsRUFBQXRHLElBQUFxQixLQUFBczJDLE9BQUFxQixlQUFBLElBQ0E1bUMsRUFBQWhRLHdCQUNBZixLQUFBczJDLE9BQUFxQixlQUFBLE9BR0Fqb0IsRUFBQWh3QixVQUFBMDRDLGVBQUEsU0FBQWwwQixHQUNBLElBQUFiLEVBQUFyakIsS0FBQXMzQyxzQkFBQXB6QixHQUNBYixJQUNBcmpCLEtBQUF3MkMscUJBQUEsRUFDQXgyQyxLQUFBdzNDLGNBQUFuMEIsR0FBQSxLQUdBcU0sRUFBQWh3QixVQUFBMjRDLGVBQUEsU0FBQW4wQixHQUNBLElBQUFiLEVBQUFyakIsS0FBQXMzQyxzQkFBQXB6QixHQUNBYixJQUNBcmpCLEtBQUF3MkMscUJBQUEsRUFDQXgyQyxLQUFBMDRDLGNBQUFyMUIsRUFBQSxNQUdBcU0sRUFBQWh3QixVQUFBK3lCLG1CQUFBLFNBQUF2TyxHQUNBLE9BQUFBLEVBQUFrUSxVQUFBak4sRUFBQW5iLE9BQUFoTSxLQUFBc0IsVUFBQThCLFFBQUF3bEIsZ0NBRUE4RyxFQUFBaHdCLFVBQUFxaUIsYUFBQSxTQUFBbUMsR0FDQUEsRUFBQWYsMkJBQ0EsSUFBQXcxQixFQUFBMzRDLEtBQUFzMkMsT0FBQW1CLGFBQUEsQ0FBQXozQyxLQUFBczJDLE9BQUFtQixhQUFBLEdBQUF6M0MsS0FBQXMyQyxPQUFBbUIsYUFBQSxTQUVBLEdBREF6M0MsS0FBQXMyQyxPQUFBbUIsYUFBQXozQyxLQUFBczNDLHNCQUFBcHpCLEdBQ0Fsa0IsS0FBQXMyQyxPQUFBbUIsYUFBQSxDQXdCQSxHQXBCQSxJQUFBejNDLEtBQUF3MkMscUJBQ0F4MkMsS0FBQXMyQyxPQUFBbUIsYUFBQSxHQUFBejNDLEtBQUFzMkMsT0FBQXFCLGVBQUEsR0FDQTMzQyxLQUFBczJDLE9BQUFtQixhQUFBLEtBR0F6M0MsS0FBQXMyQyxPQUFBbUIsYUFBQSxHQUFBejNDLEtBQUFzQixVQUFBb0IsS0FHQSxJQUFBMUMsS0FBQXcyQyxzQkFDQXgyQyxLQUFBNDRDLGdCQUFBNTRDLEtBQUFzMkMsT0FBQW1CLGNBRUF6M0MsS0FBQWk0QyxrQkFBQWo0QyxLQUFBNjNDLDJCQUFBM3pCLEdBQ0EsSUFBQWxrQixLQUFBdzJDLHVCQUNBeDJDLEtBQUFpNEMsa0JBQUEsRUFDQWo0QyxLQUFBczJDLE9BQUFtQixhQUFBLEdBQUF6M0MsS0FBQXNCLFVBQUFvQixLQUVBMUMsS0FBQWk0QyxrQkFBQSxJQUNBajRDLEtBQUFzMkMsT0FBQW1CLGFBQUEsT0FHQXozQyxLQUFBczJDLE9BQUFtQixhQUFBLEdBQUF6M0MsS0FBQXlILFFBQUF6RixNQUFBQyxPQUFBLENBQ0EsSUFBQXdELEVBQUF6RixLQUFBeUgsUUFBQXpGLE1BQUFyRCxJQUFBcUIsS0FBQXMyQyxPQUFBbUIsYUFBQSxJQUFBOTRDLElBQUFxQixLQUFBczJDLE9BQUFtQixhQUFBLElBQ0FoeUMsR0FBQSxJQUFBQSxFQUFBc0wsRUFBQWhRLHdCQUNBZixLQUFBczJDLE9BQUFtQixhQUFBLEtBR0FrQixHQUNBQSxFQUFBLEtBQUEzNEMsS0FBQXMyQyxPQUFBbUIsYUFBQSxJQUNBa0IsRUFBQSxLQUFBMzRDLEtBQUFzMkMsT0FBQW1CLGFBQUEsSUFDQXozQyxLQUFBa2EsU0FBQSxRQWhDQWxhLEtBQUFrYSxTQUFBLElBbUNBd1YsRUFBQWh3QixVQUFBODRDLFlBQUEsV0FDQXg0QyxLQUFBaTRDLG9CQUNBajRDLEtBQUFzQixVQUFBb2IsWUFBQTFjLEtBQUFpNEMsbUJBQUEsR0FDQWo0QyxLQUFBaTRDLGtCQUFBLEdBQ0EsSUFBQWo0QyxLQUFBdzJDLHVCQUNBeDJDLEtBQUFzMkMsT0FBQW1CLGFBQUEsR0FBQXozQyxLQUFBc0IsVUFBQW9CLE1BRUExQyxLQUFBczJDLE9BQUFtQixhQUFBLEdBQUFoekMsS0FBQUUsSUFBQTNFLEtBQUFzQixVQUFBMHFCLE9BQUEvb0IsTUFBQWpELEtBQUFzQixVQUFBc0IsS0FBQTVDLEtBQUFzQixVQUFBMHFCLE9BQUFocUIsTUFBQUMsT0FBQSxLQUdBLElBQUFqQyxLQUFBdzJDLHVCQUNBeDJDLEtBQUFzMkMsT0FBQW1CLGFBQUEsTUFFQXozQyxLQUFBczJDLE9BQUFtQixhQUFBLEdBQUF6M0MsS0FBQXNCLFVBQUEwcUIsT0FBQS9vQixPQUVBakQsS0FBQWthLFlBR0F3VixFQUFBaHdCLFVBQUFpM0MsV0FBQSxTQUFBenlCLEdBQ0EsSUFBQTIwQixFQUFBMzBCLEVBQUE4ekIsVUFBQWg0QyxLQUFBKzNDLG9CQUNBLzNDLEtBQUF5MkMsNEJBQ0F6MkMsS0FBQTh6QixjQUFBN3hCLFFBQUEsR0FBQTQyQyxFQTlXQSxJQStXQSxJQUFBNUMsRUFBQTZDLGdCQUFBNTBCLEVBQUFsa0IsS0FBQXNCLFdBQUF5M0MsT0FFQS80QyxLQUFBb2MsY0FDQXBjLEtBQUFzQixVQUFBaUcsS0FBQSxjQUdBbW9CLEVBQUFod0IsVUFBQW8zQyxrQkFBQSxTQUFBbDFCLEdBQ0E1aEIsS0FBQXNjLGlCQUNBc0YsRUFBQWlWLGVBQUE3MEIsTUFBQTZHLElBQUEsT0FBQTdJLEtBQUE0MkMsZUFDQWgxQixFQUFBZ1YsYUFBQTUwQixNQUFBeUcsR0FBQSxPQUFBekksS0FBQTQyQyxnQkFFQWxuQixFQUFBaHdCLFVBQUFzNUMsb0NBQUEsU0FBQTlCLEVBQUE3ekIsR0FFQSxJQURBLElBQUE0MUIsRUFBQTUxQixFQUFBLEdBQ0F2bEIsRUFBQSxFQUF1QnVsQixFQUFBLElBQUF2bEIsRUFBZ0JBLElBQUEsQ0FDdkMsSUFBQTJILEVBQUF5eEMsRUFBQXY0QyxJQUFBYixHQUNBLElBQUEySCxFQUFBc0wsRUFBQWhRLHVCQUNBazRDLElBRUF4ekMsRUFBQXNMLEVBQUFqUSxzQkFBQW1CLE9BQUEsR0FBQW9oQixFQUFBLEtBQUF2bEIsSUFDQW03QyxHQUFBeHpDLEVBQUFzTCxFQUFBalEsc0JBQUFtQixPQUFBLEdBR0EsT0FBQWczQyxHQUVBdnBCLEVBQUFod0IsVUFBQXc1QyxhQUFBLFNBQUF6VyxFQUFBQyxFQUFBemdDLEdBQ0FqQyxLQUFBczJDLE9BQUFoNkIsaUJBQ0F0YyxLQUFBeTJDLDRCQUNBejJDLEtBQUFzMkMsT0FBQXFCLGVBQUEsQ0FBQWxWLEVBQUFDLEdBQ0ExaUMsS0FBQXMyQyxPQUFBbUMscUJBQUF4MkMsRUFDQWpDLEtBQUFrYSxXQUVBd1YsRUFBQWh3QixVQUFBeTVDLFdBQUEsU0FBQTkxQixFQUFBKzFCLEVBQUFDLEVBQUFDLEdBR0EsUUFGQSxJQUFBRCxJQUFpREEsR0FBQSxRQUNqRCxJQUFBQyxJQUFpREEsR0FBQSxHQUNqRGoyQixFQUFBLElBQUFyakIsS0FBQXNCLFVBQUFvQixLQUNBLFlBRUEsSUFBQXcwQyxFQUFBbDNDLEtBQUF5SCxRQUFBekYsTUFBQXJELElBQUEwa0IsRUFBQSxJQUNBLElBQUE2ekIsRUFDQSxZQUVBLElBQUFqeUMsRUFBQWpGLEtBQUF5SCxRQUFBdkMsNEJBQUFtZSxFQUFBLE9BQ0E5ZCxFQUFBdkYsS0FBQWc1QyxvQ0FBQTlCLEVBQUE3ekIsR0FDQTdkLEVBQUFELEVBQ0FnMEMsRUFBQWwyQixFQUFBLEdBQUE5ZCxFQUNBaTBDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQSxTQUFBMTBDLEVBQUFtOUIsT0FBQTc4QixHQUFBLENBQ0EsS0FBQUEsRUFBQSxTQUFBTixFQUFBbTlCLE9BQUE3OEIsRUFBQSxJQUNBQSxJQUVBLEtBQUFDLEVBQUFQLEVBQUFoRCxRQUFBLE1BQUFnRCxFQUFBbTlCLE9BQUE1OEIsRUFBQSxJQUNBQSxRQUdBLENBQ0EsSUFBQUosRUFBQWllLEVBQUEsR0FDQWhlLEVBQUFnZSxFQUFBLEdBYUEsSUFaQSxJQUFBNnpCLEVBQUF2NEMsSUFBQXlHLEdBQUEyTCxFQUFBaFEseUJBQ0F5NEMsSUFDQXAwQyxLQUVBLElBQUE4eEMsRUFBQXY0QyxJQUFBMEcsR0FBQTBMLEVBQUFoUSx5QkFDQTA0QyxJQUNBcDBDLEtBRUE2eEMsRUFBQXY0QyxJQUFBMEcsR0FBQTBMLEVBQUFqUSxzQkFBQW1CLE9BQUEsSUFDQTAzQyxHQUFBekMsRUFBQXY0QyxJQUFBMEcsR0FBQTBMLEVBQUFqUSxzQkFBQW1CLE9BQUEsRUFDQXVELEdBQUEweEMsRUFBQXY0QyxJQUFBMEcsR0FBQTBMLEVBQUFqUSxzQkFBQW1CLE9BQUEsR0FFQW1ELEVBQUEsR0FBQUcsRUFBQSxJQUFBdkYsS0FBQTQ1QyxxQkFBQTFDLEVBQUF2NEMsSUFBQXlHLEVBQUEsTUFFQSxLQURBSyxFQUFBeXhDLEVBQUF2NEMsSUFBQXlHLEVBQUEsSUFDQTJMLEVBQUFoUSx3QkFDQXk0QyxJQUNBcDBDLEtBRUFLLEVBQUFzTCxFQUFBalEsc0JBQUFtQixPQUFBLElBQ0F5M0MsR0FBQWowQyxFQUFBc0wsRUFBQWpRLHNCQUFBbUIsT0FBQSxFQUNBc0QsR0FBQUUsRUFBQXNMLEVBQUFqUSxzQkFBQW1CLE9BQUEsR0FFQXNELElBQ0FILElBRUEsS0FBQUMsRUFBQTZ4QyxFQUFBajFDLFFBQUF1RCxFQUFBLEVBQUFQLEVBQUFoRCxTQUFBakMsS0FBQTQ1QyxxQkFBQTFDLEVBQUF2NEMsSUFBQTBHLEVBQUEsTUFDQSxJQUFBSSxFQUNBLEtBREFBLEVBQUF5eEMsRUFBQXY0QyxJQUFBMEcsRUFBQSxJQUNBMEwsRUFBQWhRLHdCQUNBMDRDLElBQ0FwMEMsS0FFQUksRUFBQXNMLEVBQUFqUSxzQkFBQW1CLE9BQUEsSUFDQTAzQyxHQUFBbDBDLEVBQUFzTCxFQUFBalEsc0JBQUFtQixPQUFBLEVBQ0F1RCxHQUFBQyxFQUFBc0wsRUFBQWpRLHNCQUFBbUIsT0FBQSxHQUVBdUQsSUFDQUgsS0FHQUcsSUFDQSxJQUFBb08sRUFBQXJPLEVBQ0FnMEMsRUFDQUMsRUFDQUUsRUFDQXozQyxFQUFBd0MsS0FBQUUsSUFBQTNFLEtBQUFzQixVQUFBb0IsS0FBQThDLEVBQ0FELEVBQ0FpMEMsRUFDQUMsRUFDQUMsRUFDQUMsR0FDQSxJQUFBUCxHQUFBLEtBQUFuMEMsRUFBQXNGLE1BQUFoRixFQUFBQyxHQUFBcTBDLE9BQ0EsWUFFQSxHQUFBUixHQUNBLElBQUF6bEMsR0FBQSxLQUFBc2pDLEVBQUF2NEMsSUFBQSxHQUFBb1MsRUFBQS9QLHNCQUFBLENBQ0EsSUFBQTg0QyxFQUFBOTVDLEtBQUF5SCxRQUFBekYsTUFBQXJELElBQUEwa0IsRUFBQSxNQUNBLEdBQUF5MkIsR0FBQTVDLEVBQUExMEMsV0FBQSxLQUFBczNDLEVBQUFuN0MsSUFBQXFCLEtBQUFzQixVQUFBb0IsS0FBQSxHQUFBcU8sRUFBQS9QLHNCQUFBLENBQ0EsSUFBQSs0QyxFQUFBLzVDLEtBQUFtNUMsV0FBQSxDQUFBbjVDLEtBQUFzQixVQUFBb0IsS0FBQSxFQUFBMmdCLEVBQUEsZ0JBQ0EsR0FBQTAyQixFQUFBLENBQ0EsSUFBQW42QixFQUFBNWYsS0FBQXNCLFVBQUFvQixLQUFBcTNDLEVBQUFubUMsTUFDQUEsR0FBQWdNLEVBQ0EzZCxHQUFBMmQsSUFLQSxHQUFBMDVCLEdBQ0ExbEMsRUFBQTNSLElBQUFqQyxLQUFBc0IsVUFBQW9CLE1BQUEsS0FBQXcwQyxFQUFBdjRDLElBQUFxQixLQUFBc0IsVUFBQW9CLEtBQUEsR0FBQXFPLEVBQUEvUCxzQkFBQSxDQUNBLElBQUFnNUMsRUFBQWg2QyxLQUFBeUgsUUFBQXpGLE1BQUFyRCxJQUFBMGtCLEVBQUEsTUFDQSxHQUFBMjJCLEtBQUF4M0MsV0FBQSxLQUFBdzNDLEVBQUFyN0MsSUFBQSxHQUFBb1MsRUFBQS9QLHNCQUFBLENBQ0EsSUFBQWk1QyxFQUFBajZDLEtBQUFtNUMsV0FBQSxHQUFBOTFCLEVBQUEsZ0JBQ0E0MkIsSUFDQWg0QyxHQUFBZzRDLEVBQUFoNEMsU0FLQSxPQUFnQjJSLFFBQUEzUixXQUVoQnl0QixFQUFBaHdCLFVBQUE4M0MsY0FBQSxTQUFBbjBCLEVBQUErMUIsR0FDQSxJQUFBYyxFQUFBbDZDLEtBQUFtNUMsV0FBQTkxQixFQUFBKzFCLEdBQ0EsR0FBQWMsRUFBQSxDQUNBLEtBQUFBLEVBQUF0bUMsTUFBQSxHQUNBc21DLEVBQUF0bUMsT0FBQTVULEtBQUFzQixVQUFBb0IsS0FDQTJnQixFQUFBLEtBRUFyakIsS0FBQXMyQyxPQUFBcUIsZUFBQSxDQUFBdUMsRUFBQXRtQyxNQUFBeVAsRUFBQSxJQUNBcmpCLEtBQUFzMkMsT0FBQW1DLHFCQUFBeUIsRUFBQWo0QyxTQUdBeXRCLEVBQUFod0IsVUFBQWs1QyxnQkFBQSxTQUFBdjFCLEdBQ0EsSUFBQTYyQixFQUFBbDZDLEtBQUFtNUMsV0FBQTkxQixHQUFBLEdBQ0EsR0FBQTYyQixFQUFBLENBRUEsSUFEQSxJQUFBeG1DLEVBQUEyUCxFQUFBLEdBQ0E2MkIsRUFBQXRtQyxNQUFBLEdBQ0FzbUMsRUFBQXRtQyxPQUFBNVQsS0FBQXNCLFVBQUFvQixLQUNBZ1IsSUFFQSxJQUFBMVQsS0FBQXMyQyxPQUFBNkQsNkJBQ0EsS0FBQUQsRUFBQXRtQyxNQUFBc21DLEVBQUFqNEMsT0FBQWpDLEtBQUFzQixVQUFBb0IsTUFDQXczQyxFQUFBajRDLFFBQUFqQyxLQUFBc0IsVUFBQW9CLEtBQ0FnUixJQUdBMVQsS0FBQXMyQyxPQUFBbUIsYUFBQSxDQUFBejNDLEtBQUFzMkMsT0FBQTZELDZCQUFBRCxFQUFBdG1DLE1BQUFzbUMsRUFBQXRtQyxNQUFBc21DLEVBQUFqNEMsT0FBQXlSLEtBR0FnYyxFQUFBaHdCLFVBQUFrNkMscUJBQUEsU0FBQTlqQyxHQUNBLFdBQUFBLEVBQUEvRSxFQUFBaFEsd0JBdGhCQSxhQXloQkErRixRQUFBZ1AsRUFBQS9FLEVBQUFqUSx3QkFBQSxHQUVBNHVCLEVBQUFod0IsVUFBQWc1QyxjQUFBLFNBQUF6ekMsR0FDQSxJQUFBbTFDLEVBQUFwNkMsS0FBQXlILFFBQUE1Qix1QkFBQVosR0FDQWpGLEtBQUFzMkMsT0FBQXFCLGVBQUEsR0FBQXlDLEVBQUF0MEMsT0FDQTlGLEtBQUFzMkMsT0FBQW1CLGFBQUEsQ0FBQXozQyxLQUFBc0IsVUFBQW9CLEtBQUEwM0MsRUFBQXIwQyxNQUNBL0YsS0FBQXMyQyxPQUFBbUMscUJBQUEsR0FFQS9vQixFQTloQkEsQ0EraEJDbHZCLEVBQUFnSCxjQUNENUosRUFBQTh4QixpREMzakJBbHhCLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBQzlDLElBQUF3M0MsRUFBQSxXQUNBLFNBQUFBLEVBQUFqMUMsR0FDQXRCLEtBQUFzQixZQUNBdEIsS0FBQXNjLGlCQXNFQSxPQXBFQWk2QixFQUFBNzJDLFVBQUE0YyxlQUFBLFdBQ0F0YyxLQUFBMjNDLGVBQUEsS0FDQTMzQyxLQUFBeTNDLGFBQUEsS0FDQXozQyxLQUFBMDNDLG1CQUFBLEVBQ0ExM0MsS0FBQXk0QyxxQkFBQSxHQUVBajZDLE9BQUFDLGVBQUE4M0MsRUFBQTcyQyxVQUFBLHVCQUNBZixJQUFBLFdBQ0EsT0FBQXFCLEtBQUEwM0Msa0JBQ0EsTUFFQTEzQyxLQUFBeTNDLGNBQUF6M0MsS0FBQTIzQyxnQkFHQTMzQyxLQUFBbTZDLDZCQUFBbjZDLEtBQUF5M0MsYUFGQXozQyxLQUFBMjNDLGdCQUlBajVDLFlBQUEsRUFDQW1FLGNBQUEsSUFFQXJFLE9BQUFDLGVBQUE4M0MsRUFBQTcyQyxVQUFBLHFCQUNBZixJQUFBLFdBQ0EsR0FBQXFCLEtBQUEwM0Msa0JBQ0EsT0FBQTEzQyxLQUFBc0IsVUFBQW9CLEtBQUExQyxLQUFBc0IsVUFBQTBxQixPQUFBanBCLE1BQUEvQyxLQUFBc0IsVUFBQXNCLEtBQUEsR0FFQSxJQUFBNUMsS0FBQTIzQyxlQUNBLFlBRUEsSUFBQTMzQyxLQUFBeTNDLGNBQUF6M0MsS0FBQW02Qyw2QkFBQSxDQUNBLElBQUFFLEVBQUFyNkMsS0FBQTIzQyxlQUFBLEdBQUEzM0MsS0FBQXk0QyxxQkFDQSxPQUFBNEIsRUFBQXI2QyxLQUFBc0IsVUFBQW9CLEtBQ0EsQ0FBQTIzQyxFQUFBcjZDLEtBQUFzQixVQUFBb0IsS0FBQTFDLEtBQUEyM0MsZUFBQSxHQUFBbHpDLEtBQUFzaEIsTUFBQXMwQixFQUFBcjZDLEtBQUFzQixVQUFBb0IsT0FFQSxDQUFBMjNDLEVBQUFyNkMsS0FBQTIzQyxlQUFBLElBRUEsT0FBQTMzQyxLQUFBeTRDLHNCQUNBejRDLEtBQUF5M0MsYUFBQSxLQUFBejNDLEtBQUEyM0MsZUFBQSxHQUNBLENBQUFsekMsS0FBQUMsSUFBQTFFLEtBQUEyM0MsZUFBQSxHQUFBMzNDLEtBQUF5NEMscUJBQUF6NEMsS0FBQXkzQyxhQUFBLElBQUF6M0MsS0FBQXkzQyxhQUFBLElBR0F6M0MsS0FBQXkzQyxjQUVBLzRDLFlBQUEsRUFDQW1FLGNBQUEsSUFFQTB6QyxFQUFBNzJDLFVBQUF5NkMsMkJBQUEsV0FDQSxJQUFBdm1DLEVBQUE1VCxLQUFBMjNDLGVBQ0E5akMsRUFBQTdULEtBQUF5M0MsYUFDQSxTQUFBN2pDLElBQUFDLEtBR0FELEVBQUEsR0FBQUMsRUFBQSxJQUFBRCxFQUFBLEtBQUFDLEVBQUEsSUFBQUQsRUFBQSxHQUFBQyxFQUFBLEtBRUEwaUMsRUFBQTcyQyxVQUFBazRDLE9BQUEsU0FBQWx4QyxHQU9BLE9BTkExRyxLQUFBMjNDLGlCQUNBMzNDLEtBQUEyM0MsZUFBQSxJQUFBanhDLEdBRUExRyxLQUFBeTNDLGVBQ0F6M0MsS0FBQXkzQyxhQUFBLElBQUEvd0MsR0FFQTFHLEtBQUF5M0MsY0FBQXozQyxLQUFBeTNDLGFBQUEsTUFDQXozQyxLQUFBc2Msa0JBQ0EsSUFFQXRjLEtBQUEyM0MsZ0JBQUEzM0MsS0FBQTIzQyxlQUFBLE9BQ0EzM0MsS0FBQTIzQyxlQUFBLE9BRUEsSUFFQXBCLEVBekVBLEdBMkVBMzRDLEVBQUEyNEMsK0NDNUVBLzNDLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBQzlDLElBQUE4bkIsRUFBd0JucEIsRUFBUSxHQUNoQ283QyxFQUFBLFdBQ0EsU0FBQUEsRUFBQXdCLEVBQUFoNUMsR0FDQSxJQUFBdzJCLEVBQ0E5M0IsS0FBQXM2QyxjQUNBdDZDLEtBQUFzQixZQUNBdEIsS0FBQXU2QyxPQUFBdjZDLEtBQUFzQixVQUFBMHFCLE9BQUFocUIsTUFDQWhDLEtBQUF3NkMsVUFBQXg2QyxLQUFBc0IsVUFBQTBxQixPQUFBcm9CLEVBQ0EzRCxLQUFBeTZDLFVBQUF6NkMsS0FBQXNCLFVBQUEwcUIsT0FBQWhwQixFQUNBLElBQUEwM0MsRUFBQTE2QyxLQUFBc0IsVUFBQWdpQixZQUFBQyxVQUFBdmpCLEtBQUFzNkMsWUFBQXQ2QyxLQUFBc0IsVUFBQTRaLFFBQUFsYixLQUFBc0IsVUFBQW1pQixZQUFBempCLEtBQUFzQixVQUFBb0IsS0FBQTFDLEtBQUFzQixVQUFBc0IsTUFBQSxHQUNBODNDLElBQ0E1aUIsRUFBQTRpQixFQUFBdkQsSUFBQSxTQUFBd0QsR0FDQSxPQUFBQSxFQUFBLElBQ2EzNkMsS0FBQTQ2QyxRQUFBOWlCLEVBQUEsR0FBQTkzQixLQUFBNjZDLFFBQUEvaUIsRUFBQSxJQStHYixPQTVHQWdoQixFQUFBcDVDLFVBQUFxNUMsS0FBQSxXQUNBLzRDLEtBQUFzNkMsWUFBQWxtQixhQUFBNXdCLElBQUF4RCxLQUFBNDZDLGNBQUFwM0MsSUFBQXhELEtBQUE2NkMsU0FDQTc2QyxLQUFBc0IsVUFBQXFILFFBQUEzSSxLQUFBODZDLG9CQUdBaEMsRUFBQXA1QyxVQUFBbzdDLGdCQUFBLFdBQ0EsT0FBQTk2QyxLQUFBc0IsVUFBQTBxQixPQUFBZ0csY0FHQWh5QixLQUFBKzZDLHdCQUZBLzZDLEtBQUFnN0Msb0JBQUFoN0MsS0FBQWk3QyxzQkFBQWo3QyxLQUFBazdDLHVCQUlBcEMsRUFBQXA1QyxVQUFBczdDLGtCQUFBLFdBQ0EsV0FBQWg3QyxLQUFBaTdDLHNCQUFBaDVDLE9BQ0EsR0FFQWs1QyxFQUFBbjdDLEtBQUFvN0MsWUFBQXA3QyxLQUFBdzZDLFVBQUF4NkMsS0FBQXk2QyxVQUFBejZDLEtBQUF3NkMsVUFBQXg2QyxLQUFBeTZDLFVBQUF6NkMsS0FBQXE3QyxtQkFBQXI3QyxLQUFBeTZDLFlBQUEsR0FBQXg0QyxPQUFBakMsS0FBQXM3QyxVQUFBLE9BRUF4QyxFQUFBcDVDLFVBQUF1N0Msb0JBQUEsV0FDQSxJQUFBeG5DLEVBQUF6VCxLQUFBeTZDLFVBQUF6NkMsS0FBQXE3QyxtQkFBQXI3QyxLQUFBeTZDLFdBQ0EvbUMsRUFBQTFULEtBQUE2NkMsUUFBQTc2QyxLQUFBcTdDLG1CQUFBcjdDLEtBQUE2NkMsU0FFQSxPQUFBTSxFQURBMTJDLEtBQUEwdEIsSUFBQTFlLEVBQUFDLEdBQUExVCxLQUFBdTdDLG9CQUNBdjdDLEtBQUFzN0MsVUFBQXQ3QyxLQUFBdzdDLHdCQUVBMUMsRUFBQXA1QyxVQUFBdzdDLG9CQUFBLFdBQ0EsSUFBQXpuQyxFQUVBQSxFQURBelQsS0FBQWk3QyxzQkFBQWg1QyxPQUFBLEVBQ0FqQyxLQUFBNjZDLFFBQUE3NkMsS0FBQXE3QyxtQkFBQXI3QyxLQUFBNjZDLFNBR0E3NkMsS0FBQXk2QyxVQUVBLElBQUEvbUMsRUFBQTFULEtBQUE2NkMsUUFDQVksRUFBQXo3QyxLQUFBMDdDLHVCQUNBLE9BQUFQLEVBQUFuN0MsS0FBQW83QyxZQUFBcDdDLEtBQUF3NkMsVUFBQS9tQyxFQUFBelQsS0FBQTQ2QyxRQUFBbG5DLEVBQUEsTUFBQStuQyxHQUFBeDVDLE9BQUFqQyxLQUFBczdDLFVBQUFHLEtBRUEzQyxFQUFBcDVDLFVBQUFxN0Msc0JBQUEsV0FDQSxJQUFBVSxFQUFBejdDLEtBQUEwN0MsdUJBQ0EsT0FBQVAsRUFBQTEyQyxLQUFBMHRCLElBQUFueUIsS0FBQXc2QyxVQUFBeDZDLEtBQUE0NkMsU0FBQTU2QyxLQUFBczdDLFVBQUFHLEtBRUEzQyxFQUFBcDVDLFVBQUE2N0Msa0JBQUEsV0FJQSxJQUhBLElBQUFJLEVBQUEsRUFDQWxvQyxFQUFBelQsS0FBQXk2QyxVQUFBejZDLEtBQUFxN0MsbUJBQUFyN0MsS0FBQXk2QyxXQUNBL21DLEVBQUExVCxLQUFBNjZDLFFBQUE3NkMsS0FBQXE3QyxtQkFBQXI3QyxLQUFBNjZDLFNBQ0EvOEMsRUFBQSxFQUF1QkEsRUFBQTJHLEtBQUEwdEIsSUFBQTFlLEVBQUFDLEdBQWlDNVYsSUFBQSxDQUN4RCxJQUFBMjlDLEVBQUEsTUFBQXo3QyxLQUFBdzdDLHNCQUFBLElBQ0F4N0MsS0FBQXU2QyxPQUFBNTdDLElBQUE4VSxFQUFBZ29DLEVBQUEzOUMsR0FBQTBFLFdBQ0FtNUMsSUFHQSxPQUFBQSxHQUVBN0MsRUFBQXA1QyxVQUFBMjdDLG1CQUFBLFNBQUFPLEdBR0EsSUFGQSxJQUFBaDNCLEVBQUEsRUFDQWkzQixFQUFBNzdDLEtBQUF1NkMsT0FBQTU3QyxJQUFBaTlDLEdBQUFwNUMsVUFDQXE1QyxHQUFBRCxHQUFBLEdBQUFBLEVBQUE1N0MsS0FBQXNCLFVBQUFzQixNQUNBZ2lCLElBQ0FnM0IsSUFDQUMsRUFBQTc3QyxLQUFBdTZDLE9BQUE1N0MsSUFBQWk5QyxHQUFBcDVDLFVBRUEsT0FBQW9pQixHQUVBazBCLEVBQUFwNUMsVUFBQWc4QyxxQkFBQSxXQUNBLElBQUFqb0MsRUFPQSxPQUxBQSxFQURBelQsS0FBQWk3QyxzQkFBQWg1QyxPQUFBLEVBQ0FqQyxLQUFBNjZDLFFBQUE3NkMsS0FBQXE3QyxtQkFBQXI3QyxLQUFBNjZDLFNBR0E3NkMsS0FBQXk2QyxVQUVBejZDLEtBQUF3NkMsVUFBQXg2QyxLQUFBNDZDLFNBQ0FubkMsR0FBQXpULEtBQUE2NkMsU0FDQTc2QyxLQUFBdzZDLFdBQUF4NkMsS0FBQTQ2QyxTQUNBbm5DLEVBQUF6VCxLQUFBNjZDLFFBQ0EsSUFFQSxLQUVBL0IsRUFBQXA1QyxVQUFBODdDLG1CQUFBLFdBQ0EsT0FBQXg3QyxLQUFBeTZDLFVBQUF6NkMsS0FBQTY2QyxRQUNBLElBRUEsS0FFQS9CLEVBQUFwNUMsVUFBQTA3QyxZQUFBLFNBQUFoMkMsRUFBQXFPLEVBQUFwTyxFQUFBcU8sRUFBQW9vQyxHQUlBLElBSEEsSUFBQUMsRUFBQTMyQyxFQUNBdzJDLEVBQUFub0MsRUFDQXVvQyxFQUFBLEdBQ0FELElBQUExMkMsR0FBQXUyQyxJQUFBbG9DLEdBQ0Fxb0MsR0FBQUQsRUFBQSxLQUNBQSxHQUFBQyxFQUFBLzdDLEtBQUFzQixVQUFBb0IsS0FBQSxHQUNBczVDLEdBQUFoOEMsS0FBQXNCLFVBQUEwcUIsT0FBQTltQiw0QkFBQTAyQyxHQUFBLEVBQUF4MkMsRUFBQTIyQyxHQUNBQSxFQUFBLEVBQ0EzMkMsRUFBQSxFQUNBdzJDLE1BRUFFLEdBQUFDLEVBQUEsSUFDQUMsR0FBQWg4QyxLQUFBc0IsVUFBQTBxQixPQUFBOW1CLDRCQUFBMDJDLEdBQUEsSUFBQXgyQyxFQUFBLEdBRUFBLEVBREEyMkMsRUFBQS83QyxLQUFBc0IsVUFBQW9CLEtBQUEsRUFFQWs1QyxLQUdBLE9BQUFJLEVBQUFoOEMsS0FBQXNCLFVBQUEwcUIsT0FBQTltQiw0QkFBQTAyQyxHQUFBLEVBQUF4MkMsRUFBQTIyQyxJQUVBakQsRUFBQXA1QyxVQUFBNDdDLFVBQUEsU0FBQUcsR0FDQSxJQUFBbHJCLEVBQUF2d0IsS0FBQXNCLFVBQUF1b0Isa0JBQUEsUUFDQSxPQUFBaEQsRUFBQW5hLEdBQUE0QixJQUFBaWlCLEVBQUFrckIsR0FFQTNDLEVBM0hBLEdBOEhBLFNBQUFxQyxFQUFBM2pCLEVBQUF5a0IsR0FDQXprQixFQUFBL3lCLEtBQUFzaEIsTUFBQXlSLEdBRUEsSUFEQSxJQUFBMGtCLEVBQUEsR0FDQXArQyxFQUFBLEVBQW1CQSxFQUFBMDVCLEVBQVcxNUIsSUFDOUJvK0MsR0FBQUQsRUFFQSxPQUFBQyxFQVBBdCtDLEVBQUFrN0MsZ0RDL0hBLElBQ0FoNUMsRUFEQUMsRUFBQUMsV0FBQUQsWUFDQUQsRUFBQSxTQUFBMUIsRUFBQTZCLEdBSUEsT0FIQUgsRUFBQXRCLE9BQUEwQixnQkFDQSxDQUFjQyxVQUFBLGNBQWdCQyxPQUFBLFNBQUFoQyxFQUFBNkIsR0FBc0M3QixFQUFBK0IsVUFBQUYsSUFDcEUsU0FBQTdCLEVBQUE2QixHQUE2QixRQUFBTCxLQUFBSyxJQUFBTixlQUFBQyxLQUFBeEIsRUFBQXdCLEdBQUFLLEVBQUFMLE1BQzdCeEIsRUFBQTZCLElBRUEsU0FBQTdCLEVBQUE2QixHQUVBLFNBQUFJLElBQXVCTCxLQUFBTSxZQUFBbEMsRUFEdkIwQixFQUFBMUIsRUFBQTZCLEdBRUE3QixFQUFBc0IsVUFBQSxPQUFBTyxFQUFBekIsT0FBQVksT0FBQWEsSUFBQUksRUFBQVgsVUFBQU8sRUFBQVAsVUFBQSxJQUFBVyxLQUdBN0IsT0FBQUMsZUFBQWIsRUFBQSxjQUE4Q21CLE9BQUEsSUFDOUMsSUFDQXV3QixFQUFBLFNBQUFub0IsR0FFQSxTQUFBbW9CLEVBQUFoZCxFQUFBb1MsR0FDQSxJQUFBcmUsRUFBQWMsRUFBQWxKLEtBQUErQixZQVFBLE9BUEFxRyxFQUFBb29CLFVBQUFuYyxFQUNBak0sRUFBQTgxQyxlQUFBejNCLEVBQ0FyZSxFQUFBKzFDLGdCQUFBLzFDLEVBQUFvb0IsVUFBQWxjLGNBQUEsUUFDQWxNLEVBQUErMUMsZ0JBQUE1cEMsVUFBQUMsSUFBQSw4QkFDQXBNLEVBQUErMUMsZ0JBQUF0akIsWUFBQSxJQUNBenlCLEVBQUErMUMsZ0JBQUF4dEIsYUFBQSxzQkFDQXZvQixFQUFBODFDLGVBQUF0cEMsWUFBQXhNLEVBQUErMUMsaUJBQ0EvMUMsRUE2QkEsT0F2Q0F0RyxFQUFBdXZCLEVBQUFub0IsR0FZQTNJLE9BQUFDLGVBQUE2d0IsRUFBQTV2QixVQUFBLFNBQ0FmLElBQUEsV0FDQSxPQUFBcUIsS0FBQTBzQyxRQUVBaHVDLFlBQUEsRUFDQW1FLGNBQUEsSUFFQXJFLE9BQUFDLGVBQUE2d0IsRUFBQTV2QixVQUFBLFVBQ0FmLElBQUEsV0FDQSxPQUFBcUIsS0FBQTJzQyxTQUVBanVDLFlBQUEsRUFDQW1FLGNBQUEsSUFFQXlzQixFQUFBNXZCLFVBQUF3c0IsUUFBQSxTQUFBOW9CLEdBQ0FwRCxLQUFBbzhDLGdCQUFBMXBDLE1BQUEvSCxXQUFBdkgsRUFBQXVILFdBQ0EzSyxLQUFBbzhDLGdCQUFBMXBDLE1BQUE5SCxTQUFBeEgsRUFBQXdILFNBQUEsS0FDQSxJQUFBcWIsRUFBQWptQixLQUFBbzhDLGdCQUFBdGlCLHdCQUNBLElBQUE3VCxFQUFBclIsT0FBQSxJQUFBcVIsRUFBQW5SLFNBR0E5VSxLQUFBMHNDLFNBQUF6bUIsRUFBQXJSLE9BQUE1VSxLQUFBMnNDLFVBQUExbUIsRUFBQW5SLFNBQ0E5VSxLQUFBMHNDLE9BQUF6bUIsRUFBQXJSLE1BQ0E1VSxLQUFBMnNDLFFBQUFsb0MsS0FBQXFnQixLQUFBbUIsRUFBQW5SLFFBQ0E5VSxLQUFBdUgsS0FBQSxzQkFHQStuQixFQXhDQSxDQURxQjV4QixFQUFRLEdBMEM1QjhKLGNBQ0Q1SixFQUFBMHhCLDRDQ3pEQTl3QixPQUFBQyxlQUFBYixFQUFBLGNBQThDbUIsT0FBQSxJQUM5Q25CLEVBQUF3ckIsTUFBQSxTQUFBaXpCLEVBQUFDLEdBRUEsUUFEQSxJQUFBQSxJQUEyQkEsRUFBQSxHQUMzQixpQkFBQUQsRUFDQSxPQUFBQSxFQUVBLFVBQUFBLEVBQ0EsWUFFQSxJQUFBRSxFQUFBbjhDLE1BQUFvOEMsUUFBQUgsR0FBQSxNQUNBLFFBQUFoOUMsS0FBQWc5QyxFQUNBRSxFQUFBbDlDLEdBQUFpOUMsR0FBQSxFQUFBRCxFQUFBaDlDLEdBQUF6QixFQUFBd3JCLE1BQUFpekIsRUFBQWg5QyxHQUFBaTlDLEVBQUEsR0FFQSxPQUFBQyxpQ0NiQS85QyxPQUFBQyxlQUFBYixFQUFBLGNBQThDbUIsT0FBQSxJQUM5Q25CLEVBQUF3cUIsbUJBQUEsaWJBQ0EsSUFBQWdELEVBQUEsV0FDQSxTQUFBQSxFQUFBOXBCLEdBQ0F0QixLQUFBc0IsWUEwQ0EsT0F4Q0E5QyxPQUFBQyxlQUFBMnNCLEVBQUEsZ0JBQ0F6c0IsSUFBQSxXQUNBLElBQUF5c0IsRUFBQXF4QixjQUFBLENBQ0EsSUFBQUMsRUFBQWh5QyxPQUFBaXlDLGNBQUFqeUMsT0FBQWt5QyxtQkFDQSxJQUFBRixFQUVBLE9BREFyakMsUUFBQUMsS0FBQSw0RkFDQSxLQUVBOFIsRUFBQXF4QixjQUFBLElBQUFDLEVBRUEsT0FBQXR4QixFQUFBcXhCLGVBRUEvOUMsWUFBQSxFQUNBbUUsY0FBQSxJQUVBdW9CLEVBQUExckIsVUFBQWcxQixjQUFBLFdBQ0EsSUFBQXZVLEVBQUFpTCxFQUFBeXhCLGFBQ0EsR0FBQTE4QixFQUFBLENBR0EsSUFBQTI4QixFQUFBMzhCLEVBQUE0OEIscUJBQ0E1OEIsRUFBQTY4QixnQkFBQWg5QyxLQUFBaTlDLHFCQUFBajlDLEtBQUFrOUMsZ0JBQUFsOUMsS0FBQXNCLFVBQUE4QixRQUFBK2tCLFlBQUEsU0FBQTZELEdBQ0E4d0IsRUFBQTl3QixTQUNBOHdCLEVBQUFLLFFBQUFoOUIsRUFBQWk5QixhQUNBTixFQUFBbHBDLE1BQUEsT0FHQXdYLEVBQUExckIsVUFBQXU5QyxxQkFBQSxTQUFBSSxHQUlBLElBSEEsSUFBQUMsRUFBQTV5QyxPQUFBNnlDLEtBQUFGLEdBQ0FHLEVBQUFGLEVBQUFyN0MsT0FDQXc3QyxFQUFBLElBQUE1L0IsV0FBQTIvQixHQUNBMS9DLEVBQUEsRUFBdUJBLEVBQUEwL0MsRUFBUzEvQyxJQUNoQzIvQyxFQUFBMy9DLEdBQUF3L0MsRUFBQWovQixXQUFBdmdCLEdBRUEsT0FBQTIvQyxFQUFBenhCLFFBRUFaLEVBQUExckIsVUFBQXc5QyxnQkFBQSxTQUFBUSxHQUVBLE9BREFBLEVBQUFDLE1BQUEsS0FDQSxJQUVBdnlCLEVBNUNBLEdBOENBeHRCLEVBQUF3dEIsNkNDaERBLElBQ0F0ckIsRUFEQUMsRUFBQUMsV0FBQUQsWUFDQUQsRUFBQSxTQUFBMUIsRUFBQTZCLEdBSUEsT0FIQUgsRUFBQXRCLE9BQUEwQixnQkFDQSxDQUFjQyxVQUFBLGNBQWdCQyxPQUFBLFNBQUFoQyxFQUFBNkIsR0FBc0M3QixFQUFBK0IsVUFBQUYsSUFDcEUsU0FBQTdCLEVBQUE2QixHQUE2QixRQUFBTCxLQUFBSyxJQUFBTixlQUFBQyxLQUFBeEIsRUFBQXdCLEdBQUFLLEVBQUFMLE1BQzdCeEIsRUFBQTZCLElBRUEsU0FBQTdCLEVBQUE2QixHQUVBLFNBQUFJLElBQXVCTCxLQUFBTSxZQUFBbEMsRUFEdkIwQixFQUFBMUIsRUFBQTZCLEdBRUE3QixFQUFBc0IsVUFBQSxPQUFBTyxFQUFBekIsT0FBQVksT0FBQWEsSUFBQUksRUFBQVgsVUFBQU8sRUFBQVAsVUFBQSxJQUFBVyxLQUdBN0IsT0FBQUMsZUFBQWIsRUFBQSxjQUE4Q21CLE9BQUEsSUFDOUMsSUFBQWdjLEVBQWNyZCxFQUFRLElBQ3RCNmhCLEVBQWlCN2hCLEVBQVEsR0FDekJ5cUMsRUFBd0J6cUMsRUFBUSxJQUNoQzBqQixFQUFrQjFqQixFQUFRLEdBQzFCMmpCLEVBQWtCM2pCLEVBQVEsR0FFMUIrdUIsRUFBQSxTQUFBdGxCLEdBRUEsU0FBQXNsQixFQUFBbnJCLEdBQ0EsSUFBQStFLEVBQUFjLEVBQUFsSixLQUFBK0IsWUFDQXFHLEVBQUEvRSxZQUNBK0UsRUFBQXUzQyxxQkFBQSxFQUNBdjNDLEVBQUF3M0MsZ0JBQUEsR0FDQXgzQyxFQUFBeTNDLHVCQUFBeHJDLFNBQUFDLGNBQUEsT0FDQWxNLEVBQUF5M0MsdUJBQUF0ckMsVUFBQUMsSUFBQSx1QkFDQXBNLEVBQUEwM0MsY0FBQXpyQyxTQUFBQyxjQUFBLE9BQ0FsTSxFQUFBMDNDLGNBQUF2ckMsVUFBQUMsSUFBQSw0QkFDQXBNLEVBQUEyM0MsYUFBQSxHQUNBLFFBQUFsZ0QsRUFBQSxFQUF1QkEsRUFBQXVJLEVBQUEvRSxVQUFBc0IsS0FBMEI5RSxJQUNqRHVJLEVBQUEyM0MsYUFBQWxnRCxHQUFBdUksRUFBQTQzQywrQkFDQTUzQyxFQUFBMDNDLGNBQUFsckMsWUFBQXhNLEVBQUEyM0MsYUFBQWxnRCxJQTJCQSxPQXpCQXVJLEVBQUE2M0MsMEJBQUEsU0FBQXQ4QixHQUF3RCxPQUFBdmIsRUFBQTgzQyxpQkFBQXY4QixFQUFBLElBQ3hEdmIsRUFBQSszQyw2QkFBQSxTQUFBeDhCLEdBQTJELE9BQUF2YixFQUFBODNDLGlCQUFBdjhCLEVBQUEsSUFDM0R2YixFQUFBMjNDLGFBQUEsR0FBQXh4QyxpQkFBQSxRQUFBbkcsRUFBQTYzQywyQkFDQTczQyxFQUFBMjNDLGFBQUEzM0MsRUFBQTIzQyxhQUFBLzdDLE9BQUEsR0FBQXVLLGlCQUFBLFFBQUFuRyxFQUFBKzNDLDhCQUNBLzNDLEVBQUFnNEMseUJBQ0FoNEMsRUFBQXkzQyx1QkFBQWpyQyxZQUFBeE0sRUFBQTAzQyxlQUNBMTNDLEVBQUFpNEMscUJBQUEsSUFBQW5XLEVBQUFydUIsZ0JBQUF6VCxFQUFBL0UsVUFBQStFLEVBQUE0aUMsWUFBQTNwQyxLQUFBK0csSUFDQUEsRUFBQWs0QyxlQUNBbDRDLEVBQUFtNEMsWUFBQWxzQyxTQUFBQyxjQUFBLE9BQ0FsTSxFQUFBbTRDLFlBQUFoc0MsVUFBQUMsSUFBQSxlQUNBcE0sRUFBQW00QyxZQUFBNXZCLGFBQUEseUJBQ0F2b0IsRUFBQXkzQyx1QkFBQWpyQyxZQUFBeE0sRUFBQW00QyxhQUNBbjRDLEVBQUEvRSxVQUFBNFosUUFBQXVqQyxzQkFBQSxhQUFBcDRDLEVBQUF5M0Msd0JBQ0F6M0MsRUFBQUcsU0FBQUgsRUFBQWk0QyxzQkFDQWo0QyxFQUFBRyxTQUFBSCxFQUFBL0UsVUFBQW1GLHNCQUFBLGtCQUFBOFMsR0FBd0YsT0FBQWxULEVBQUFxNEMsVUFBQW5sQyxFQUFBM1csU0FDeEZ5RCxFQUFBRyxTQUFBSCxFQUFBL0UsVUFBQW1GLHNCQUFBLG1CQUFBOFMsR0FBeUYsT0FBQWxULEVBQUFrNEMsYUFBQWhsQyxFQUFBM0YsTUFBQTJGLEVBQUExRixRQUN6RnhOLEVBQUFHLFNBQUFILEVBQUEvRSxVQUFBbUYsc0JBQUEsa0JBQUE4UyxHQUF3RixPQUFBbFQsRUFBQWs0QyxrQkFDeEZsNEMsRUFBQUcsU0FBQUgsRUFBQS9FLFVBQUFtRixzQkFBQSxxQkFBQWhCLEdBQTJGLE9BQUFZLEVBQUFzNEMsUUFBQWw1QyxNQUMzRlksRUFBQUcsU0FBQUgsRUFBQS9FLFVBQUFtRixzQkFBQSxzQkFBc0YsT0FBQUosRUFBQXM0QyxRQUFBLFNBQ3RGdDRDLEVBQUFHLFNBQUFILEVBQUEvRSxVQUFBbUYsc0JBQUEsb0JBQUFtNEMsR0FBZ0csT0FBQXY0QyxFQUFBdzRDLE9BQUFELE1BQ2hHdjRDLEVBQUFHLFNBQUFILEVBQUEvRSxVQUFBbUYsc0JBQUEsZUFBQXE0QyxHQUF3RixPQUFBejRDLEVBQUEwNEMsT0FBQUQsTUFDeEZ6NEMsRUFBQUcsU0FBQUgsRUFBQS9FLFVBQUFtRixzQkFBQSxrQkFBa0YsT0FBQUosRUFBQTI0QyxzQkFDbEYzNEMsRUFBQUcsU0FBQUgsRUFBQS9FLFVBQUFtRixzQkFBQSx1QkFBdUYsT0FBQUosRUFBQWc0Qyw0QkFDdkZoNEMsRUFBQUcsU0FBQUgsRUFBQS9FLFVBQUEwaUIsU0FBQXZkLHNCQUFBLG9CQUE2RixPQUFBSixFQUFBZzRDLDRCQUM3Rmg0QyxFQUFBRyxTQUFBNGEsRUFBQS9VLHlCQUFBM0IsT0FBQSxvQkFBMkYsT0FBQXJFLEVBQUFnNEMsNEJBQzNGaDRDLEVBc0pBLE9BOUxBdEcsRUFBQTBzQixFQUFBdGxCLEdBMENBc2xCLEVBQUEvc0IsVUFBQWlILFFBQUEsV0FDQVEsRUFBQXpILFVBQUFpSCxRQUFBMUksS0FBQStCLE1BQ0FBLEtBQUFzQixVQUFBNFosUUFBQXBJLFlBQUE5UyxLQUFBODlDLHdCQUNBOTlDLEtBQUFnK0MsYUFBQS83QyxPQUFBLEdBRUF3cUIsRUFBQS9zQixVQUFBeStDLGlCQUFBLFNBQUF2OEIsRUFBQWdhLEdBQ0EsSUFBQXFqQixFQUFBcjlCLEVBQUFzOUIsT0FDQUMsRUFBQW4vQyxLQUFBZytDLGFBQUEsSUFBQXBpQixFQUFBLEVBQUE1N0IsS0FBQWcrQyxhQUFBLzdDLE9BQUEsR0FHQSxHQUZBZzlDLEVBQUFHLGFBQUEsb0JBQ0EsSUFBQXhqQixFQUFBLE9BQUE1N0IsS0FBQXNCLFVBQUEwcUIsT0FBQWhxQixNQUFBQyxTQUlBMmYsRUFBQXk5QixnQkFBQUYsRUFBQSxDQUdBLElBQUFHLEVBQ0FDLEVBYUEsR0FaQSxJQUFBM2pCLEdBQ0EwakIsRUFBQUwsRUFDQU0sRUFBQXYvQyxLQUFBZytDLGFBQUExNUMsTUFDQXRFLEtBQUErOUMsY0FBQWpyQyxZQUFBeXNDLEtBR0FELEVBQUF0L0MsS0FBQWcrQyxhQUFBNXRCLFFBQ0FtdkIsRUFBQU4sRUFDQWovQyxLQUFBKzlDLGNBQUFqckMsWUFBQXdzQyxJQUVBQSxFQUFBN3lDLG9CQUFBLFFBQUF6TSxLQUFBaytDLDJCQUNBcUIsRUFBQTl5QyxvQkFBQSxRQUFBek0sS0FBQW8rQyw4QkFDQSxJQUFBeGlCLEVBQUEsQ0FDQSxJQUFBNGpCLEVBQUF4L0MsS0FBQWkrQywrQkFDQWorQyxLQUFBZytDLGFBQUF5QixRQUFBRCxHQUNBeC9DLEtBQUErOUMsY0FBQVUsc0JBQUEsYUFBQWUsT0FFQSxDQUNBQSxFQUFBeC9DLEtBQUFpK0MsK0JBQ0FqK0MsS0FBQWcrQyxhQUFBdjZDLEtBQUErN0MsR0FDQXgvQyxLQUFBKzlDLGNBQUFsckMsWUFBQTJzQyxHQUVBeC9DLEtBQUFnK0MsYUFBQSxHQUFBeHhDLGlCQUFBLFFBQUF4TSxLQUFBaytDLDJCQUNBbCtDLEtBQUFnK0MsYUFBQWgrQyxLQUFBZytDLGFBQUEvN0MsT0FBQSxHQUFBdUssaUJBQUEsUUFBQXhNLEtBQUFvK0MsOEJBQ0FwK0MsS0FBQXNCLFVBQUFvYixZQUFBLElBQUFrZixHQUFBLEtBQ0E1N0IsS0FBQWcrQyxhQUFBLElBQUFwaUIsRUFBQSxFQUFBNTdCLEtBQUFnK0MsYUFBQS83QyxPQUFBLEdBQUFvWixRQUNBdUcsRUFBQXNCLGlCQUNBdEIsRUFBQXVCLDZCQUVBc0osRUFBQS9zQixVQUFBZy9DLFVBQUEsU0FBQTk3QyxHQUNBNUMsS0FBQWcrQyxhQUFBaCtDLEtBQUFnK0MsYUFBQS83QyxPQUFBLEdBQUF3SyxvQkFBQSxRQUFBek0sS0FBQW8rQyw4QkFDQSxRQUFBdGdELEVBQUFrQyxLQUFBKzlDLGNBQUEyQixTQUFBejlDLE9BQXdEbkUsRUFBQWtDLEtBQUFzQixVQUFBc0IsS0FBeUI5RSxJQUNqRmtDLEtBQUFnK0MsYUFBQWxnRCxHQUFBa0MsS0FBQWkrQywrQkFDQWorQyxLQUFBKzlDLGNBQUFsckMsWUFBQTdTLEtBQUFnK0MsYUFBQWxnRCxJQUVBLEtBQUFrQyxLQUFBZytDLGFBQUEvN0MsT0FBQVcsR0FDQTVDLEtBQUErOUMsY0FBQWpyQyxZQUFBOVMsS0FBQWcrQyxhQUFBMTVDLE9BRUF0RSxLQUFBZytDLGFBQUFoK0MsS0FBQWcrQyxhQUFBLzdDLE9BQUEsR0FBQXVLLGlCQUFBLFFBQUF4TSxLQUFBbytDLDhCQUNBcCtDLEtBQUFxK0MsMEJBRUE1eEIsRUFBQS9zQixVQUFBdStDLDZCQUFBLFdBQ0EsSUFBQS9pQyxFQUFBNUksU0FBQUMsY0FBQSxPQUlBLE9BSEEySSxFQUFBMFQsYUFBQSxtQkFDQTFULEVBQUFpVSxVQUFBLEVBQ0FudkIsS0FBQTIvQyxzQkFBQXprQyxHQUNBQSxHQUVBdVIsRUFBQS9zQixVQUFBbS9DLE9BQUEsU0FBQUQsR0FDQSxRQUFBOWdELEVBQUEsRUFBdUJBLEVBQUE4Z0QsRUFBZ0I5Z0QsSUFDdkNrQyxLQUFBMitDLFFBQUEsTUFHQWx5QixFQUFBL3NCLFVBQUFpL0MsUUFBQSxTQUFBbDVDLEdBQ0EsSUFBQVksRUFBQXJHLEtBQ0EsR0FBQUEsS0FBQTQ5QyxxQkFBQWdDLEdBQUEsQ0FDQSxHQUFBNS9DLEtBQUE2OUMsZ0JBQUE1N0MsT0FBQSxFQUNBakMsS0FBQTY5QyxnQkFBQXp0QixVQUNBM3FCLEdBQ0F6RixLQUFBNi9DLG1CQUFBcDZDLFFBSUF6RixLQUFBNi9DLG1CQUFBcDZDLEdBRUEsT0FBQUEsSUFDQXpGLEtBQUE0OUMsdUJBQ0FnQyxLQUFBNS9DLEtBQUE0OUMsdUJBQ0E1OUMsS0FBQXcrQyxZQUFBMWxCLGFBQUEvZCxFQUFBRixnQkFHQTBFLEVBQUF2VCxPQUNBaE0sS0FBQXcrQyxZQUFBMWxCLGFBQUE5NEIsS0FBQXcrQyxZQUFBMWxCLFlBQUE3MkIsT0FBQSxJQUFBakMsS0FBQXcrQyxZQUFBajFCLFlBQ0F6RyxXQUFBLFdBQ0F6YyxFQUFBeTNDLHVCQUFBanJDLFlBQUF4TSxFQUFBbTRDLGNBQ3FCLEtBS3JCL3hCLEVBQUEvc0IsVUFBQXMvQyxpQkFBQSxXQUNBaC9DLEtBQUF3K0MsWUFBQTFsQixZQUFBLEdBQ0E5NEIsS0FBQTQ5QyxxQkFBQSxFQUNBcitCLEVBQUF2VCxPQUNBaE0sS0FBQXcrQyxZQUFBajFCLFlBQ0F2cEIsS0FBQTg5Qyx1QkFBQWhyQyxZQUFBOVMsS0FBQXcrQyxjQUlBL3hCLEVBQUEvc0IsVUFBQXEvQyxPQUFBLFNBQUFELEdBQ0E5K0MsS0FBQWcvQyxtQkFDQWgvQyxLQUFBNjlDLGdCQUFBcDZDLEtBQUFxN0MsSUFFQXJ5QixFQUFBL3NCLFVBQUE2K0MsYUFBQSxTQUFBM3FDLEVBQUFDLEdBQ0E3VCxLQUFBcytDLHFCQUFBcGtDLFFBQUF0RyxFQUFBQyxJQUVBNFksRUFBQS9zQixVQUFBdXBDLFlBQUEsU0FBQXIxQixFQUFBQyxHQUdBLElBRkEsSUFBQW1ZLEVBQUFoc0IsS0FBQXNCLFVBQUEwcUIsT0FDQTh6QixFQUFBOXpCLEVBQUFocUIsTUFBQUMsT0FBQTBRLFdBQ0E3VSxFQUFBOFYsRUFBMkI5VixHQUFBK1YsRUFBVS9WLElBQUEsQ0FDckMsSUFBQXkxQyxFQUFBdm5CLEVBQUE5bUIsNEJBQUE4bUIsRUFBQS9vQixNQUFBbkYsR0FBQSxHQUNBaWlELEdBQUEvekIsRUFBQS9vQixNQUFBbkYsRUFBQSxHQUFBNlUsV0FDQXVJLEVBQUFsYixLQUFBZytDLGFBQUFsZ0QsR0FDQW9kLEVBQUE0ZCxZQUFBLElBQUF5YSxFQUFBdHhDLE9BQUE4WSxFQUFBSixVQUFBNDRCLEVBQ0FyNEIsRUFBQTBULGFBQUEsZ0JBQUFteEIsR0FDQTdrQyxFQUFBMFQsYUFBQSxlQUFBa3hCLEtBR0FyekIsRUFBQS9zQixVQUFBMitDLHVCQUFBLFdBQ0EsR0FBQXIrQyxLQUFBc0IsVUFBQTBpQixTQUFBZSxXQUFBRSxpQkFBQSxDQUdBamxCLEtBQUFnK0MsYUFBQS83QyxTQUFBakMsS0FBQXNCLFVBQUFzQixNQUNBNUMsS0FBQTArQyxVQUFBMStDLEtBQUFzQixVQUFBc0IsTUFFQSxRQUFBOUUsRUFBQSxFQUF1QkEsRUFBQWtDLEtBQUFzQixVQUFBc0IsS0FBeUI5RSxJQUNoRGtDLEtBQUEyL0Msc0JBQUEzL0MsS0FBQWcrQyxhQUFBbGdELE1BR0EydUIsRUFBQS9zQixVQUFBaWdELHNCQUFBLFNBQUF6a0MsR0FDQUEsRUFBQXhJLE1BQUFvQyxPQUFBOVUsS0FBQXNCLFVBQUEwaUIsU0FBQWUsV0FBQUUsaUJBQUEsTUFFQXdILEVBQUEvc0IsVUFBQW1nRCxtQkFBQSxTQUFBcDZDLEdBQ0EsTUFBQUEsRUFDQXpGLEtBQUF3K0MsWUFBQXdCLFdBQUEsU0FHQWhnRCxLQUFBdytDLFlBQUExbEIsYUFBQXJ6QixHQUdBZ25CLEVBL0xBLENBZ01DcEwsRUFBQWhZLFlBQ0R6TCxFQUFBNnVCLHFEQ3JOQSxJQUNBM3NCLEVBREFDLEVBQUFDLFdBQUFELFlBQ0FELEVBQUEsU0FBQTFCLEVBQUE2QixHQUlBLE9BSEFILEVBQUF0QixPQUFBMEIsZ0JBQ0EsQ0FBY0MsVUFBQSxjQUFnQkMsT0FBQSxTQUFBaEMsRUFBQTZCLEdBQXNDN0IsRUFBQStCLFVBQUFGLElBQ3BFLFNBQUE3QixFQUFBNkIsR0FBNkIsUUFBQUwsS0FBQUssSUFBQU4sZUFBQUMsS0FBQXhCLEVBQUF3QixHQUFBSyxFQUFBTCxNQUM3QnhCLEVBQUE2QixJQUVBLFNBQUE3QixFQUFBNkIsR0FFQSxTQUFBSSxJQUF1QkwsS0FBQU0sWUFBQWxDLEVBRHZCMEIsRUFBQTFCLEVBQUE2QixHQUVBN0IsRUFBQXNCLFVBQUEsT0FBQU8sRUFBQXpCLE9BQUFZLE9BQUFhLElBQUFJLEVBQUFYLFVBQUFPLEVBQUFQLFVBQUEsSUFBQVcsS0FHQTdCLE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBQzlDLElBQUF5QixFQUFxQjlDLEVBQVEsR0FDN0I2cEIsRUFBcUI3cEIsRUFBUSxHQUM3QnlxQyxFQUF3QnpxQyxFQUFRLElBQ2hDdWlELEVBQThCdmlELEVBQVEsSUFDdENnRCxFQUFjaEQsRUFBUSxHQUN0QndpRCxFQUFBLDRCQUNBQyxFQUFBLGFBSUFDLEVBQUEsa0JBQ0FDLEVBQUEsRUFDQXJ3QixFQUFBLFNBQUE3b0IsR0FFQSxTQUFBNm9CLEVBQUExdUIsRUFBQTRXLEdBQ0EsSUFBQTdSLEVBQUFjLEVBQUFsSixLQUFBK0IsWUFDQXFHLEVBQUEvRSxZQUNBK0UsRUFBQWk2QyxlQUFBRCxJQUNBaDZDLEVBQUEyM0MsYUFBQSxHQUNBLElBQUFqekMsRUFBQTFFLEVBQUEvRSxVQUFBOEIsUUFBQTJILGtCQWlDQSxPQWhDQTFFLEVBQUFtcEIsYUFBQSxJQUFBakksRUFBQTNQLGFBQUF0RixTQUFBdkgsR0FDQTFFLEVBQUE0UixTQUFBQyxHQUNBN1IsRUFBQTAzQyxjQUFBenJDLFNBQUFDLGNBQUEsT0FDQWxNLEVBQUEwM0MsY0FBQXZyQyxVQUFBQyxJQUFBMHRDLEdBQ0E5NUMsRUFBQTAzQyxjQUFBcnJDLE1BQUE0VixXQUFBLFNBQ0FqaUIsRUFBQTAzQyxjQUFBbnZCLGFBQUEsc0JBQ0F2b0IsRUFBQWs2QyxvQkFBQWw2QyxFQUFBL0UsVUFBQW9CLEtBQUEyRCxFQUFBL0UsVUFBQXNCLE1BQ0F5RCxFQUFBbTZDLG9CQUFBbHVDLFNBQUFDLGNBQUEsT0FDQWxNLEVBQUFtNkMsb0JBQUFodUMsVUFBQUMsSUFBQTJ0QyxHQUNBLzVDLEVBQUFtNkMsb0JBQUE1eEIsYUFBQSxzQkFDQXZvQixFQUFBMGUsV0FBQSxDQUNBbmIsZ0JBQUEsS0FDQUMsaUJBQUEsS0FDQTJLLGdCQUFBLEtBQ0FDLGlCQUFBLEtBQ0FDLGVBQUEsS0FDQUMsY0FBQSxLQUNBRSxrQkFBQSxLQUNBRSxtQkFBQSxLQUNBQyxZQUFBLEtBQ0FDLGFBQUEsS0FDQStQLGdCQUFBLEtBQ0FDLGlCQUFBLE1BRUE1ZSxFQUFBMGlDLG9CQUNBMWlDLEVBQUEyaUMsaUJBQUEsSUFBQWIsRUFBQXJ1QixnQkFBQXpULEVBQUEvRSxVQUFBK0UsRUFBQTRpQyxZQUFBM3BDLEtBQUErRyxJQUNBQSxFQUFBbzZDLFlBQUEsSUFBQVIsRUFBQVMsc0JBQUFwdUMsVUFDQWpNLEVBQUEvRSxVQUFBNFosUUFBQTFJLFVBQUFDLElBQUF5dEMsRUFBQTc1QyxFQUFBaTZDLGdCQUNBajZDLEVBQUEvRSxVQUFBa2lCLGNBQUEzUSxZQUFBeE0sRUFBQTAzQyxlQUNBMTNDLEVBQUEvRSxVQUFBa2lCLGNBQUEzUSxZQUFBeE0sRUFBQW02QyxxQkFDQW42QyxFQUFBL0UsVUFBQTBwQixVQUFBdmlCLEdBQUEscUJBQUFtWixHQUFnRSxPQUFBdmIsRUFBQW9zQyxhQUFBN3dCLEtBQ2hFdmIsRUFBQS9FLFVBQUEwcEIsVUFBQXZpQixHQUFBLHFCQUFBbVosR0FBZ0UsT0FBQXZiLEVBQUFxc0MsYUFBQTl3QixLQUNoRXZiLEVBc09BLE9BN1FBdEcsRUFBQWl3QixFQUFBN29CLEdBeUNBNm9CLEVBQUF0d0IsVUFBQWlILFFBQUEsV0FDQTNHLEtBQUFzQixVQUFBNFosUUFBQTFJLFVBQUEwYSxPQUFBZ3pCLEVBQUFsZ0QsS0FBQXNnRCxnQkFDQXRnRCxLQUFBc0IsVUFBQWtpQixjQUFBMVEsWUFBQTlTLEtBQUErOUMsZUFDQS85QyxLQUFBc0IsVUFBQWtpQixjQUFBMVEsWUFBQTlTLEtBQUF3Z0QscUJBQ0F4Z0QsS0FBQXNCLFVBQUFraUIsY0FBQTFRLFlBQUE5UyxLQUFBMmdELG9CQUNBM2dELEtBQUFzQixVQUFBa2lCLGNBQUExUSxZQUFBOVMsS0FBQTRnRCx5QkFDQXo1QyxFQUFBekgsVUFBQWlILFFBQUExSSxLQUFBK0IsT0FFQWd3QixFQUFBdHdCLFVBQUFxcEMsa0JBQUEsV0FDQSxJQUFBMWlDLEVBQUFyRyxLQUNBQSxLQUFBK2tCLFdBQUFuYixnQkFBQW5GLEtBQUFzaEIsTUFBQS9sQixLQUFBc0IsVUFBQW1pQixZQUFBN08sTUFBQWxLLE9BQUFELGtCQUNBekssS0FBQStrQixXQUFBbGIsaUJBQUFwRixLQUFBcWdCLEtBQUE5a0IsS0FBQXNCLFVBQUFtaUIsWUFBQTNPLE9BQUFwSyxPQUFBRCxrQkFDQXpLLEtBQUEra0IsV0FBQXZRLGdCQUFBeFUsS0FBQStrQixXQUFBbmIsZ0JBQUFuRixLQUFBdTJCLE1BQUFoN0IsS0FBQXNCLFVBQUE4QixRQUFBbWxCLGVBQ0F2b0IsS0FBQStrQixXQUFBdFEsaUJBQUFoUSxLQUFBc2hCLE1BQUEvbEIsS0FBQStrQixXQUFBbGIsaUJBQUE3SixLQUFBc0IsVUFBQThCLFFBQUFrbEIsWUFDQXRvQixLQUFBK2tCLFdBQUFyUSxlQUFBLEVBQ0ExVSxLQUFBK2tCLFdBQUFwUSxjQUFBLEVBQ0EzVSxLQUFBK2tCLFdBQUFsUSxrQkFBQTdVLEtBQUEra0IsV0FBQXZRLGdCQUFBeFUsS0FBQXNCLFVBQUFvQixLQUNBMUMsS0FBQStrQixXQUFBaFEsbUJBQUEvVSxLQUFBK2tCLFdBQUF0USxpQkFBQXpVLEtBQUFzQixVQUFBc0IsS0FDQTVDLEtBQUEra0IsV0FBQS9QLFlBQUF2USxLQUFBdTJCLE1BQUFoN0IsS0FBQStrQixXQUFBbFEsa0JBQUFuSyxPQUFBRCxrQkFDQXpLLEtBQUEra0IsV0FBQTlQLGFBQUF4USxLQUFBdTJCLE1BQUFoN0IsS0FBQStrQixXQUFBaFEsbUJBQUFySyxPQUFBRCxrQkFDQXpLLEtBQUEra0IsV0FBQUMsZ0JBQUFobEIsS0FBQStrQixXQUFBL1AsWUFBQWhWLEtBQUFzQixVQUFBb0IsS0FDQTFDLEtBQUEra0IsV0FBQUUsaUJBQUFqbEIsS0FBQStrQixXQUFBOVAsYUFBQWpWLEtBQUFzQixVQUFBc0IsS0FDQTVDLEtBQUFnK0MsYUFBQXgwQyxRQUFBLFNBQUEwUixHQUNBQSxFQUFBeEksTUFBQWtDLE1BQUF2TyxFQUFBMGUsV0FBQS9QLFlBQUEsS0FDQWtHLEVBQUF4SSxNQUFBb0MsT0FBQXpPLEVBQUEwZSxXQUFBRSxpQkFBQSxLQUNBL0osRUFBQXhJLE1BQUE0VixXQUFBamlCLEVBQUEwZSxXQUFBRSxpQkFBQSxLQUNBL0osRUFBQXhJLE1BQUFtdUMsU0FBQSxXQUVBN2dELEtBQUE0Z0QsMEJBQ0E1Z0QsS0FBQTRnRCx3QkFBQXR1QyxTQUFBQyxjQUFBLFNBQ0F2UyxLQUFBc0IsVUFBQWtpQixjQUFBM1EsWUFBQTdTLEtBQUE0Z0QsMEJBRUEsSUFBQUUsRUFBQTlnRCxLQUFBK2dELGtCQUFBLEtBQUFaLEVBQUEsNEVBSUFuZ0QsS0FBQStrQixXQUFBQyxnQkFBQSxNQUVBaGxCLEtBQUE0Z0Qsd0JBQUFaLFVBQUFjLEVBQ0E5Z0QsS0FBQXdnRCxvQkFBQTl0QyxNQUFBb0MsT0FBQTlVLEtBQUFzQixVQUFBeXRCLGlCQUFBcmMsTUFBQW9DLE9BQ0E5VSxLQUFBc0IsVUFBQWtpQixjQUFBOVEsTUFBQWtDLE1BQUE1VSxLQUFBK2tCLFdBQUEvUCxZQUFBLEtBQ0FoVixLQUFBc0IsVUFBQWtpQixjQUFBOVEsTUFBQW9DLE9BQUE5VSxLQUFBK2tCLFdBQUE5UCxhQUFBLE1BRUErYSxFQUFBdHdCLFVBQUF1WSxTQUFBLFNBQUFDLEdBQ0EsSUFBQTdSLEVBQUFyRyxLQUNBa1ksR0FDQWxZLEtBQUF3dkIsYUFBQXZYLFNBQUFDLEdBRUFsWSxLQUFBMmdELHFCQUNBM2dELEtBQUEyZ0QsbUJBQUFydUMsU0FBQUMsY0FBQSxTQUNBdlMsS0FBQXNCLFVBQUFraUIsY0FBQTNRLFlBQUE3UyxLQUFBMmdELHFCQUVBLElBQUFHLEVBQUE5Z0QsS0FBQStnRCxrQkFBQSxLQUFBWixFQUFBLGFBQ0FuZ0QsS0FBQXd2QixhQUFBemxCLE9BQUFFLFdBQUEwTCxJQUFBLHVCQUNBM1YsS0FBQXd2QixhQUFBemxCLE9BQUFHLFdBQUF5TCxJQUFBLGtCQUNBM1YsS0FBQXNCLFVBQUEyYixVQUFBLDhCQUNBamQsS0FBQXNCLFVBQUEyYixVQUFBLG1CQWdEQSxPQTlDQTZqQyxHQUNBOWdELEtBQUErZ0Qsa0JBQUEsY0FBQWQsRUFBQWUsV0FBQSxvQkFDQWhoRCxLQUFBc0IsVUFBQThCLFFBQUF5SCxXQUFBLEtBRUE3SyxLQUFBK2dELGtCQUFBLFNBQUFkLEVBQUFlLFdBQUEsbUJBQ0FoaEQsS0FBQXNCLFVBQUE4QixRQUFBMEgsZUFBQSxLQUVBOUssS0FBQStnRCxrQkFBQSxTQUFBZCxFQUFBZ0IsYUFBQSwwQkFHQUgsR0FDQTlnRCxLQUFBK2dELGtCQUFBLEtBQUFaLEVBQUEsdUJBQUFGLEVBQUFpQixhQUFBLHlCQUNBbGhELEtBQUF3dkIsYUFBQXpsQixPQUFBSSxPQUFBd0wsSUFBQSwyQkFHQTNWLEtBQUErZ0Qsa0JBQUEsS0FBQVosRUFBQSxpQkFBQUYsRUFBQWlCLGFBQUEsSUFBQWpCLEVBQUFrQix5QkFBQSx3QkFDQW5oRCxLQUFBd3ZCLGFBQUF6bEIsT0FBQUksT0FBQXdMLElBQUEsWUFDQTNWLEtBQUF3dkIsYUFBQXpsQixPQUFBSyxhQUFBdUwsSUFBQSxLQUVBM1YsS0FBQStnRCxrQkFBQSxLQUFBWixFQUFBLGlCQUFBRixFQUFBaUIsYUFBQSxJQUFBakIsRUFBQW1CLHVCQUFBLDBCQUNBcGhELEtBQUF3dkIsYUFBQXpsQixPQUFBSSxPQUFBd0wsSUFBQSxXQUVBM1YsS0FBQStnRCxrQkFBQSxLQUFBWixFQUFBLGlCQUFBRixFQUFBaUIsYUFBQSxJQUFBakIsRUFBQW9CLDZCQUFBLDJCQUNBcmhELEtBQUF3dkIsYUFBQXpsQixPQUFBSSxPQUFBd0wsSUFBQSxXQUVBbXJDLEdBQ0E5Z0QsS0FBQStnRCxrQkFBQSxLQUFBWCxFQUFBLDZFQU9BcGdELEtBQUErZ0Qsa0JBQUEsS0FBQVgsRUFBQSxnREFFQXBnRCxLQUFBd3ZCLGFBQUF6bEIsT0FBQU0sVUFBQXNMLElBQUEsS0FFQTNWLEtBQUF3dkIsYUFBQXpsQixPQUFBTyxLQUFBZCxRQUFBLFNBQUFyTCxFQUFBTCxHQUNBZ2pELEdBQ0F6NkMsRUFBQTA2QyxrQkFBQSxjQUFBampELEVBQUEsYUFBMEVLLEVBQUF3WCxJQUFBLE1BQzFFdFAsRUFBQTA2QyxrQkFBQSxjQUFBampELEVBQUEsd0JBQStFSyxFQUFBd1gsSUFBQSxRQUUvRW1yQyxHQUNBOWdELEtBQUErZ0Qsa0JBQUEsY0FBQXJnRCxFQUFBMkgsdUJBQUEsYUFBa0dySSxLQUFBd3ZCLGFBQUF6bEIsT0FBQUcsV0FBQXlMLElBQUEsTUFDbEczVixLQUFBK2dELGtCQUFBLGNBQUFyZ0QsRUFBQTJILHVCQUFBLHdCQUF1R3JJLEtBQUF3dkIsYUFBQXpsQixPQUFBRSxXQUFBMEwsSUFBQSxNQUN2RzNWLEtBQUEyZ0QsbUJBQUFYLFVBQUFjLEVBQ0E5Z0QsS0FBQXd2QixhQUFBemxCLFFBRUFpbUIsRUFBQXR3QixVQUFBK3ZCLGVBQUEsU0FBQWhsQixHQUNBekssS0FBQStvQyxxQkFFQS9ZLEVBQUF0d0IsVUFBQTZnRCxvQkFBQSxTQUFBNzlDLEVBQUFFLEdBQ0EsUUFBQTlFLEVBQUFrQyxLQUFBZytDLGFBQUEvN0MsT0FBOENuRSxHQUFBOEUsRUFBVzlFLElBQUEsQ0FDekQsSUFBQTRrQyxFQUFBcHdCLFNBQUFDLGNBQUEsT0FDQXZTLEtBQUErOUMsY0FBQWxyQyxZQUFBNnZCLEdBQ0ExaUMsS0FBQWcrQyxhQUFBdjZDLEtBQUFpL0IsR0FFQSxLQUFBMWlDLEtBQUFnK0MsYUFBQS83QyxPQUFBVyxHQUNBNUMsS0FBQSs5QyxjQUFBanJDLFlBQUE5UyxLQUFBZytDLGFBQUExNUMsUUFHQTByQixFQUFBdHdCLFVBQUF5c0IsU0FBQSxTQUFBenBCLEVBQUFFLEdBQ0E1QyxLQUFBdWdELG9CQUFBNzlDLEVBQUFFLEdBQ0E1QyxLQUFBK29DLHFCQUVBL1ksRUFBQXR3QixVQUFBMnNCLGtCQUFBLFdBQ0Fyc0IsS0FBQStvQyxxQkFFQS9ZLEVBQUF0d0IsVUFBQTJULE9BQUEsV0FDQXJULEtBQUErOUMsY0FBQXZyQyxVQUFBMGEsT0E1S0EsZ0JBOEtBOEMsRUFBQXR3QixVQUFBNFQsUUFBQSxXQUNBdFQsS0FBQSs5QyxjQUFBdnJDLFVBQUFDLElBL0tBLGdCQWlMQXVkLEVBQUF0d0IsVUFBQWlVLG1CQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsS0FBQTlULEtBQUF3Z0Qsb0JBQUFkLFNBQUF6OUMsUUFDQWpDLEtBQUF3Z0Qsb0JBQUExdEMsWUFBQTlTLEtBQUF3Z0Qsb0JBQUFkLFNBQUEsSUFFQSxHQUFBOXJDLEdBQUFDLEVBQUEsQ0FHQSxJQUFBcThCLEVBQUF0OEIsRUFBQSxHQUFBNVQsS0FBQXNCLFVBQUEwcUIsT0FBQS9vQixNQUNBa3RDLEVBQUF0OEIsRUFBQSxHQUFBN1QsS0FBQXNCLFVBQUEwcUIsT0FBQS9vQixNQUNBbXRDLEVBQUEzckMsS0FBQUMsSUFBQXdyQyxFQUFBLEdBQ0FHLEVBQUE1ckMsS0FBQUUsSUFBQXdyQyxFQUFBbndDLEtBQUFzQixVQUFBc0IsS0FBQSxHQUNBLEtBQUF3dEMsR0FBQXB3QyxLQUFBc0IsVUFBQXNCLE1BQUF5dEMsRUFBQSxJQUdBLElBQUFpUixFQUFBaHZDLFNBQUF3Yyx5QkFDQSxHQUFBaGIsRUFDQXd0QyxFQUFBenVDLFlBQUE3UyxLQUFBdWhELHdCQUFBblIsRUFBQXg4QixFQUFBLEdBQUFDLEVBQUEsR0FBQXc4QixFQUFBRCxFQUFBLFFBRUEsQ0FDQSxJQUFBaHJDLEVBQUE4cUMsSUFBQUUsRUFBQXg4QixFQUFBLEtBQ0F2TyxFQUFBK3FDLElBQUFDLEVBQUF4OEIsRUFBQSxHQUFBN1QsS0FBQXNCLFVBQUFvQixLQUNBNCtDLEVBQUF6dUMsWUFBQTdTLEtBQUF1aEQsd0JBQUFuUixFQUFBaHJDLEVBQUFDLElBQ0EsSUFBQWtyQyxFQUFBRixFQUFBRCxFQUFBLEVBRUEsR0FEQWtSLEVBQUF6dUMsWUFBQTdTLEtBQUF1aEQsd0JBQUFuUixFQUFBLElBQUFwd0MsS0FBQXNCLFVBQUFvQixLQUFBNnRDLElBQ0FILElBQUFDLEVBQUEsQ0FDQSxJQUFBbVIsRUFBQXJSLElBQUFFLEVBQUF4OEIsRUFBQSxHQUFBN1QsS0FBQXNCLFVBQUFvQixLQUNBNCtDLEVBQUF6dUMsWUFBQTdTLEtBQUF1aEQsd0JBQUFsUixFQUFBLEVBQUFtUixLQUdBeGhELEtBQUF3Z0Qsb0JBQUEzdEMsWUFBQXl1QyxNQUVBdHhCLEVBQUF0d0IsVUFBQTZoRCx3QkFBQSxTQUFBN2UsRUFBQStlLEVBQUFDLEVBQUE5OEIsUUFDQSxJQUFBQSxJQUFrQ0EsRUFBQSxHQUNsQyxJQUFBMUosRUFBQTVJLFNBQUFDLGNBQUEsT0FLQSxPQUpBMkksRUFBQXhJLE1BQUFvQyxPQUFBOFAsRUFBQTVrQixLQUFBK2tCLFdBQUFFLGlCQUFBLEtBQ0EvSixFQUFBeEksTUFBQWtuQixJQUFBOEksRUFBQTFpQyxLQUFBK2tCLFdBQUFFLGlCQUFBLEtBQ0EvSixFQUFBeEksTUFBQWluQixLQUFBOG5CLEVBQUF6aEQsS0FBQStrQixXQUFBQyxnQkFBQSxLQUNBOUosRUFBQXhJLE1BQUFrQyxNQUFBNVUsS0FBQStrQixXQUFBQyxpQkFBQTA4QixFQUFBRCxHQUFBLEtBQ0F2bUMsR0FFQThVLEVBQUF0d0IsVUFBQTZULGFBQUEsYUFFQXljLEVBQUF0d0IsVUFBQTBULGlCQUFBLFdBQ0FwVCxLQUFBK29DLG9CQUNBL29DLEtBQUFpWSxjQUFBelUsR0FDQXhELEtBQUFzQixVQUFBNFksUUFBQSxFQUFBbGEsS0FBQXNCLFVBQUFzQixLQUFBLElBRUFvdEIsRUFBQXR3QixVQUFBK0IsTUFBQSxXQUNBekIsS0FBQWcrQyxhQUFBeDBDLFFBQUEsU0FBQW9ZLEdBQWdELE9BQUFBLEVBQUFvK0IsVUFBQSxNQUVoRGh3QixFQUFBdHdCLFVBQUE2eUIsWUFBQSxTQUFBM2UsRUFBQUMsR0FDQTdULEtBQUFncEMsaUJBQUE5dUIsUUFBQXRHLEVBQUFDLElBRUFtYyxFQUFBdHdCLFVBQUF1cEMsWUFBQSxTQUFBcjFCLEVBQUFDLEdBSUEsSUFIQSxJQUFBL0osRUFBQTlKLEtBQUFzQixVQUNBcWdELEVBQUE3M0MsRUFBQWtpQixPQUFBanBCLE1BQUErRyxFQUFBa2lCLE9BQUFocEIsRUFDQTQrQyxFQUFBNWhELEtBQUFzQixVQUFBMHFCLE9BQUFyb0IsRUFDQVgsRUFBQTRRLEVBQTJCNVEsR0FBQTZRLEVBQVU3USxJQUFBLENBQ3JDLElBQUE2K0MsRUFBQTdoRCxLQUFBZytDLGFBQUFoN0MsR0FDQTYrQyxFQUFBN0IsVUFBQSxHQUNBLElBQUF0ZCxFQUFBMS9CLEVBQUE4RyxFQUFBa2lCLE9BQUEvb0IsTUFDQXN3QyxFQUFBenBDLEVBQUFraUIsT0FBQWhxQixNQUFBckQsSUFBQStqQyxHQUNBeGEsRUFBQXBlLEVBQUExRyxRQUFBOGtCLFlBQ0EyNUIsRUFBQWh2QyxZQUFBN1MsS0FBQXlnRCxZQUFBcUIsVUFBQXZPLEVBQUE3USxJQUFBaWYsRUFBQXo1QixFQUFBMDVCLEVBQUE1aEQsS0FBQStrQixXQUFBQyxnQkFBQWxiLEVBQUFwSCxPQUVBMUMsS0FBQXNCLFVBQUFpRyxLQUFBLFdBQXdDcU0sUUFBQUMsU0FFeENyVixPQUFBQyxlQUFBdXhCLEVBQUF0d0IsVUFBQSxxQkFDQWYsSUFBQSxXQUNBLFVBQUF1aEQsRUFBQWxnRCxLQUFBc2dELGdCQUVBNWhELFlBQUEsRUFDQW1FLGNBQUEsSUFFQW10QixFQUFBdHdCLFVBQUFzYyx3QkFBQSxTQUFBclQsR0FBd0UsVUFDeEVxbkIsRUFBQXR3QixVQUFBdWMsMEJBQUEsU0FBQUMsR0FBMkUsVUFDM0U4VCxFQUFBdHdCLFVBQUEreUMsYUFBQSxTQUFBN3dCLEdBQ0E1aEIsS0FBQStoRCxrQkFBQW5nQyxFQUFBOEIsR0FBQTlCLEVBQUErQixHQUFBL0IsRUFBQVMsR0FBQVQsRUFBQVUsR0FBQVYsRUFBQWxmLE1BQUEsSUFFQXN0QixFQUFBdHdCLFVBQUFnekMsYUFBQSxTQUFBOXdCLEdBQ0E1aEIsS0FBQStoRCxrQkFBQW5nQyxFQUFBOEIsR0FBQTlCLEVBQUErQixHQUFBL0IsRUFBQVMsR0FBQVQsRUFBQVUsR0FBQVYsRUFBQWxmLE1BQUEsSUFFQXN0QixFQUFBdHdCLFVBQUFxaUQsa0JBQUEsU0FBQXArQyxFQUFBZ2dCLEVBQUEzZ0IsRUFBQXNmLEVBQUE1ZixFQUFBcy9DLEdBQ0EsS0FBQXIrQyxJQUFBZ2dCLEdBQUEzZ0IsSUFBQXNmLEdBQUEsQ0FDQSxJQUFBb2dCLEVBQUExaUMsS0FBQWcrQyxhQUFBaDdDLEdBQ0EsSUFBQTAvQixFQUNBLE9BRUFBLEVBQUFnZCxTQUFBLzdDLEdBQ0ErTyxNQUFBdXZDLGVBQUFELEVBQUEsbUJBRUEsS0FEQXIrQyxLQUFBLEdBQUFqQixJQUVBTSxNQUlBZ3RCLEVBOVFBLENBK1FDeHZCLEVBQUFnSCxjQUNENUosRUFBQW95Qiw0Q0MxU0F4eEIsT0FBQUMsZUFBQWIsRUFBQSxjQUE4Q21CLE9BQUEsSUFDOUMsSUFBQWdTLEVBQWVyVCxFQUFRLEdBQ3ZCZ0QsRUFBY2hELEVBQVEsR0FDdEJFLEVBQUFvakQsV0FBQSxhQUNBcGpELEVBQUFxakQsYUFBQSxlQUNBcmpELEVBQUFzakQsYUFBQSxlQUNBdGpELEVBQUF1akQseUJBQUEscUJBQ0F2akQsRUFBQXdqRCx1QkFBQSxtQkFDQXhqRCxFQUFBeWpELDZCQUFBLHlCQUNBLElBQUFYLEVBQUEsV0FDQSxTQUFBQSxFQUFBanlCLEdBQ0F6dUIsS0FBQXl1QixZQXlFQSxPQXZFQWl5QixFQUFBaGhELFVBQUFvaUQsVUFBQSxTQUFBdk8sRUFBQTJPLEVBQUFoNkIsRUFBQTA1QixFQUFBM2hDLEVBQUF2ZCxHQUdBLElBRkEsSUFBQW1zQixFQUFBN3VCLEtBQUF5dUIsVUFBQUsseUJBQ0FxekIsRUFBQSxFQUNBeCtDLEVBQUFjLEtBQUFFLElBQUE0dUMsRUFBQXR4QyxPQUFBUyxHQUFBLEVBQXlEaUIsR0FBQSxFQUFRQSxJQUFBLENBR2pFLElBRkFtUyxFQUFBeTlCLEVBQUE1MEMsSUFBQWdGLElBQ0FvTixFQUFBL1Asd0JBQ0ErUCxFQUFBM1AsZ0JBQUE4Z0QsR0FBQXYrQyxJQUFBaStDLEVBQUEsQ0FDQU8sRUFBQXgrQyxFQUFBLEVBQ0EsT0FHQSxJQUFBQSxFQUFBLEVBQXVCQSxFQUFBdytDLEVBQWdCeCtDLElBQUEsQ0FDdkMsSUFBQW1TLEVBQ0FyUSxHQURBcVEsRUFBQXk5QixFQUFBNTBDLElBQUFnRixJQUNBb04sRUFBQWpRLHNCQUNBeUIsRUFBQXVULEVBQUEvRSxFQUFBbFEsc0JBQ0ErVCxFQUFBa0IsRUFBQS9FLEVBQUFoUSx1QkFDQSxPQUFBNlQsRUFBQSxDQUdBLElBQUF3dEMsRUFBQXBpRCxLQUFBeXVCLFVBQUFsYyxjQUFBLFFBQ0FxQyxFQUFBLElBQ0F3dEMsRUFBQTF2QyxNQUFBa0MsTUFBQXFMLEVBQUFyTCxFQUFBLE1BRUEsSUFBQXl1QixFQUFBOWdDLEdBQUEsR0FDQXlQLEVBQUEsSUFBQXpQLEVBQ0EwUCxFQUFBMVAsR0FBQSxNQUNBLEdBQUEyL0MsR0FBQXYrQyxJQUFBaStDLEVBRUEsT0FEQVEsRUFBQTV2QyxVQUFBQyxJQUFBN1UsRUFBQXNqRCxjQUNBaDVCLEdBQ0EsVUFDQWs2QixFQUFBNXZDLFVBQUFDLElBQUE3VSxFQUFBd2pELHdCQUNBLE1BQ0EsZ0JBQ0FnQixFQUFBNXZDLFVBQUFDLElBQUE3VSxFQUFBeWpELDhCQUNBLE1BQ0EsUUFDQWUsRUFBQTV2QyxVQUFBQyxJQUFBN1UsRUFBQXVqRCwwQkFJQSxLQUFBOWQsRUFBQSxDQUNBLElBQUF5SCxFQUFBOTRCLEVBQ0FBLEVBQUFDLEdBQ0FBLEVBQUE2NEIsS0FDQXBxQyxFQUFBRSxnQkFDQXFSLEVBQUF2UixFQUFBMkgsd0JBRUEySixJQUFBdFIsRUFBQUUsZ0JBQ0FvUixFQUFBdFIsRUFBQTJILHdCQUdBLEVBQUFnN0IsSUFDQXB4QixFQUFBLElBQ0FBLEdBQUEsR0FFQW13QyxFQUFBNXZDLFVBQUFDLElBQUE3VSxFQUFBb2pELGFBRUEsR0FBQTNkLEdBQ0ErZSxFQUFBNXZDLFVBQUFDLElBQUE3VSxFQUFBcWpELGNBRUFtQixFQUFBdHBCLFlBQUFyekIsRUFDQXdNLElBQUF2UixFQUFBRSxlQUNBd2hELEVBQUE1dkMsVUFBQUMsSUFBQSxZQUFBUixHQUVBRCxJQUFBdFIsRUFBQUUsZUFDQXdoRCxFQUFBNXZDLFVBQUFDLElBQUEsWUFBQVQsR0FFQTZjLEVBQUFoYyxZQUFBdXZDLElBRUEsT0FBQXZ6QixHQUVBNnhCLEVBM0VBLEdBNkVBOWlELEVBQUE4aUQsc0RDdEZBbGlELE9BQUFDLGVBQUFiLEVBQUEsY0FBOENtQixPQUFBLElBQzlDLElBQUE4bkIsRUFBd0JucEIsRUFBUSxHQUNoQzJrRCxFQUFBLENBQ0FDLEdBQUEsVUFDQUMsR0FBQSxVQUNBQyxHQUFBLFVBQ0FDLEdBQUEsVUFDQUMsR0FBQSxVQUNBQyxHQUFBLFVBQ0FDLEdBQUEsVUFDQUMsR0FBQSxVQUNBQyxHQUFBLFVBQ0FDLEdBQUEsVUFDQUMsSUFBQSxLQUFZLEtBQ1pDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxVQUNBQyxJQUFBLFVBQ0FDLElBQUEsVUFDQUMsSUFBQSxXQUNBQyxJQUFBLFVBQ0FDLElBQUEsV0E4VEE5bEQsRUFBQW8yQixzQkE1VEEsU0FBQW5ILEVBQUE4MkIsRUFBQTMzQyxFQUFBMmMsR0FDQSxJQUFBeGdCLEVBQUEsQ0FDQXhHLEtBQUEsRUFDQWt3QixRQUFBLEVBQ0F4eUIsU0FBQW1FLEdBRUFvZ0QsR0FBQS8yQixFQUFBK0QsU0FBQSxNQUFBL0QsRUFBQXVILE9BQUEsTUFBQXZILEVBQUFpRSxRQUFBLE1BQUFqRSxFQUFBZ0UsUUFBQSxLQUNBLE9BQUFoRSxFQUFBaUIsU0FDQSxPQUNBLHNCQUFBakIsRUFBQXh0QixJQUVBOEksRUFBQTlJLElBREFza0QsRUFDQTk4QixFQUFBbmEsR0FBQTRCLElBQUEsS0FHQXVZLEVBQUFuYSxHQUFBNEIsSUFBQSxLQUdBLHdCQUFBdWUsRUFBQXh0QixJQUVBOEksRUFBQTlJLElBREFza0QsRUFDQTk4QixFQUFBbmEsR0FBQTRCLElBQUEsS0FHQXVZLEVBQUFuYSxHQUFBNEIsSUFBQSxLQUdBLHlCQUFBdWUsRUFBQXh0QixJQUVBOEksRUFBQTlJLElBREFza0QsRUFDQTk4QixFQUFBbmEsR0FBQTRCLElBQUEsS0FHQXVZLEVBQUFuYSxHQUFBNEIsSUFBQSxLQUdBLHdCQUFBdWUsRUFBQXh0QixNQUVBOEksRUFBQTlJLElBREFza0QsRUFDQTk4QixFQUFBbmEsR0FBQTRCLElBQUEsS0FHQXVZLEVBQUFuYSxHQUFBNEIsSUFBQSxNQUdBLE1BQ0EsT0FDQSxHQUFBdWUsRUFBQStELFNBQUEsQ0FDQXpvQixFQUFBOUksSUFBQXduQixFQUFBbmEsR0FBQVMsR0FDQSxNQUVBLEdBQUEwZixFQUFBdUgsT0FBQSxDQUNBanNCLEVBQUE5SSxJQUFBd25CLEVBQUFuYSxHQUFBNEIsSUFBQXVZLEVBQUFuYSxHQUFBa0MsSUFDQSxNQUVBekcsRUFBQTlJLElBQUF3bkIsRUFBQW5hLEdBQUFrQyxJQUNBLE1BQ0EsT0FDQSxHQUFBaWUsRUFBQStELFNBQUEsQ0FDQXpvQixFQUFBOUksSUFBQXduQixFQUFBbmEsR0FBQTRCLElBQUEsS0FDQSxNQUVBbkcsRUFBQTlJLElBQUF3bkIsRUFBQW5hLEdBQUFVLEdBQ0FqRixFQUFBMHBCLFFBQUEsRUFDQSxNQUNBLFFBQ0ExcEIsRUFBQTlJLElBQUF3bkIsRUFBQW5hLEdBQUFjLEdBQ0FyRixFQUFBMHBCLFFBQUEsRUFDQSxNQUNBLFFBQ0ExcEIsRUFBQTlJLElBQUF3bkIsRUFBQW5hLEdBQUE0QixJQUNBbkcsRUFBQTBwQixRQUFBLEVBQ0EsTUFDQSxRQUNBK3hCLEdBQ0F6N0MsRUFBQTlJLElBQUF3bkIsRUFBQW5hLEdBQUE0QixJQUFBLE9BQTREczFDLEVBQUEsT0FDNUR6N0MsRUFBQTlJLE1BQUF3bkIsRUFBQW5hLEdBQUE0QixJQUFBLFVBQ0FuRyxFQUFBOUksSUFBQTJNLEVBQUE2YSxFQUFBbmEsR0FBQTRCLElBQUEsSUFBQXVZLEVBQUFuYSxHQUFBNEIsSUFBQSxVQUlBbkcsRUFBQTlJLElBREFza0QsRUFDQTk4QixFQUFBbmEsR0FBQTRCLElBQUEsS0FHQXVZLEVBQUFuYSxHQUFBNEIsSUFBQSxLQUVBLE1BQ0EsUUFDQXMxQyxHQUNBejdDLEVBQUE5SSxJQUFBd25CLEVBQUFuYSxHQUFBNEIsSUFBQSxPQUE0RHMxQyxFQUFBLE9BQzVEejdDLEVBQUE5SSxNQUFBd25CLEVBQUFuYSxHQUFBNEIsSUFBQSxVQUNBbkcsRUFBQTlJLElBQUEyTSxFQUFBNmEsRUFBQW5hLEdBQUE0QixJQUFBLElBQUF1WSxFQUFBbmEsR0FBQTRCLElBQUEsVUFJQW5HLEVBQUE5SSxJQURBc2tELEVBQ0E5OEIsRUFBQW5hLEdBQUE0QixJQUFBLEtBR0F1WSxFQUFBbmEsR0FBQTRCLElBQUEsS0FFQSxNQUNBLFFBQ0FzMUMsR0FDQXo3QyxFQUFBOUksSUFBQXduQixFQUFBbmEsR0FBQTRCLElBQUEsT0FBNERzMUMsRUFBQSxPQUM1RHo3QyxFQUFBOUksTUFBQXduQixFQUFBbmEsR0FBQTRCLElBQUEsVUFDQW5HLEVBQUE5SSxJQUFBd25CLEVBQUFuYSxHQUFBNEIsSUFBQSxVQUlBbkcsRUFBQTlJLElBREFza0QsRUFDQTk4QixFQUFBbmEsR0FBQTRCLElBQUEsS0FHQXVZLEVBQUFuYSxHQUFBNEIsSUFBQSxLQUVBLE1BQ0EsUUFDQXMxQyxHQUNBejdDLEVBQUE5SSxJQUFBd25CLEVBQUFuYSxHQUFBNEIsSUFBQSxPQUE0RHMxQyxFQUFBLE9BQzVEejdDLEVBQUE5SSxNQUFBd25CLEVBQUFuYSxHQUFBNEIsSUFBQSxVQUNBbkcsRUFBQTlJLElBQUF3bkIsRUFBQW5hLEdBQUE0QixJQUFBLFVBSUFuRyxFQUFBOUksSUFEQXNrRCxFQUNBOThCLEVBQUFuYSxHQUFBNEIsSUFBQSxLQUdBdVksRUFBQW5hLEdBQUE0QixJQUFBLEtBRUEsTUFDQSxRQUNBdWUsRUFBQStELFVBQUEvRCxFQUFBaUUsVUFDQTNvQixFQUFBOUksSUFBQXduQixFQUFBbmEsR0FBQTRCLElBQUEsT0FFQSxNQUNBLFFBRUFuRyxFQUFBOUksSUFEQXVrRCxFQUNBLzhCLEVBQUFuYSxHQUFBNEIsSUFBQSxPQUE0RHMxQyxFQUFBLE9BRzVELzhCLEVBQUFuYSxHQUFBNEIsSUFBQSxNQUVBLE1BQ0EsUUFFQW5HLEVBQUE5SSxJQURBdWtELEVBQ0EvOEIsRUFBQW5hLEdBQUE0QixJQUFBLE9BQTREczFDLEVBQUEsT0FFNURELEVBQ0E5OEIsRUFBQW5hLEdBQUE0QixJQUFBLEtBR0F1WSxFQUFBbmEsR0FBQTRCLElBQUEsS0FFQSxNQUNBLFFBRUFuRyxFQUFBOUksSUFEQXVrRCxFQUNBLzhCLEVBQUFuYSxHQUFBNEIsSUFBQSxPQUE0RHMxQyxFQUFBLE9BRTVERCxFQUNBOThCLEVBQUFuYSxHQUFBNEIsSUFBQSxLQUdBdVksRUFBQW5hLEdBQUE0QixJQUFBLEtBRUEsTUFDQSxRQUNBdWUsRUFBQStELFNBQ0F6b0IsRUFBQXhHLEtBQUEsRUFHQXdHLEVBQUE5SSxJQUFBd25CLEVBQUFuYSxHQUFBNEIsSUFBQSxNQUVBLE1BQ0EsUUFDQXVlLEVBQUErRCxTQUNBem9CLEVBQUF4RyxLQUFBLEVBR0F3RyxFQUFBOUksSUFBQXduQixFQUFBbmEsR0FBQTRCLElBQUEsTUFFQSxNQUNBLFNBRUFuRyxFQUFBOUksSUFEQXVrRCxFQUNBLzhCLEVBQUFuYSxHQUFBNEIsSUFBQSxPQUE0RHMxQyxFQUFBLE9BRzVELzhCLEVBQUFuYSxHQUFBNEIsSUFBQSxLQUVBLE1BQ0EsU0FFQW5HLEVBQUE5SSxJQURBdWtELEVBQ0EvOEIsRUFBQW5hLEdBQUE0QixJQUFBLE9BQTREczFDLEVBQUEsT0FHNUQvOEIsRUFBQW5hLEdBQUE0QixJQUFBLEtBRUEsTUFDQSxTQUVBbkcsRUFBQTlJLElBREF1a0QsRUFDQS84QixFQUFBbmEsR0FBQTRCLElBQUEsT0FBNERzMUMsRUFBQSxPQUc1RC84QixFQUFBbmEsR0FBQTRCLElBQUEsS0FFQSxNQUNBLFNBRUFuRyxFQUFBOUksSUFEQXVrRCxFQUNBLzhCLEVBQUFuYSxHQUFBNEIsSUFBQSxPQUE0RHMxQyxFQUFBLE9BRzVELzhCLEVBQUFuYSxHQUFBNEIsSUFBQSxLQUVBLE1BQ0EsU0FFQW5HLEVBQUE5SSxJQURBdWtELEVBQ0EvOEIsRUFBQW5hLEdBQUE0QixJQUFBLFFBQTZEczFDLEVBQUEsT0FHN0QvOEIsRUFBQW5hLEdBQUE0QixJQUFBLE9BRUEsTUFDQSxTQUVBbkcsRUFBQTlJLElBREF1a0QsRUFDQS84QixFQUFBbmEsR0FBQTRCLElBQUEsUUFBNkRzMUMsRUFBQSxPQUc3RC84QixFQUFBbmEsR0FBQTRCLElBQUEsT0FFQSxNQUNBLFNBRUFuRyxFQUFBOUksSUFEQXVrRCxFQUNBLzhCLEVBQUFuYSxHQUFBNEIsSUFBQSxRQUE2RHMxQyxFQUFBLE9BRzdELzhCLEVBQUFuYSxHQUFBNEIsSUFBQSxPQUVBLE1BQ0EsU0FFQW5HLEVBQUE5SSxJQURBdWtELEVBQ0EvOEIsRUFBQW5hLEdBQUE0QixJQUFBLFFBQTZEczFDLEVBQUEsT0FHN0QvOEIsRUFBQW5hLEdBQUE0QixJQUFBLE9BRUEsTUFDQSxTQUVBbkcsRUFBQTlJLElBREF1a0QsRUFDQS84QixFQUFBbmEsR0FBQTRCLElBQUEsUUFBNkRzMUMsRUFBQSxPQUc3RC84QixFQUFBbmEsR0FBQTRCLElBQUEsT0FFQSxNQUNBLFNBRUFuRyxFQUFBOUksSUFEQXVrRCxFQUNBLzhCLEVBQUFuYSxHQUFBNEIsSUFBQSxRQUE2RHMxQyxFQUFBLE9BRzdELzhCLEVBQUFuYSxHQUFBNEIsSUFBQSxPQUVBLE1BQ0EsU0FFQW5HLEVBQUE5SSxJQURBdWtELEVBQ0EvOEIsRUFBQW5hLEdBQUE0QixJQUFBLFFBQTZEczFDLEVBQUEsT0FHN0QvOEIsRUFBQW5hLEdBQUE0QixJQUFBLE9BRUEsTUFDQSxTQUVBbkcsRUFBQTlJLElBREF1a0QsRUFDQS84QixFQUFBbmEsR0FBQTRCLElBQUEsUUFBNkRzMUMsRUFBQSxPQUc3RC84QixFQUFBbmEsR0FBQTRCLElBQUEsT0FFQSxNQUNBLFFBQ0EsSUFBQXVlLEVBQUFpRSxTQUFBakUsRUFBQStELFVBQUEvRCxFQUFBdUgsUUFBQXZILEVBQUFnRSxRQXVCQSxHQUFBN2tCLElBQUEyYyxJQUFBa0UsRUFBQXVILFFBQUF2SCxFQUFBZ0UsUUFXQTdrQixJQUFBNmdCLEVBQUF1SCxTQUFBdkgsRUFBQWlFLFNBQUFqRSxFQUFBZ0UsU0FDQSxLQUFBaEUsRUFBQWlCLFVBQ0EzbEIsRUFBQXhHLEtBQUEsT0FiQSxDQUNBLElBQUFraUQsRUFBQXhCLEVBQUF4MUIsRUFBQWlCLFNBQ0F6dUIsRUFBQXdrRCxLQUFBaDNCLEVBQUErRCxTQUFBLEtBQ0EsR0FBQXZ4QixFQUNBOEksRUFBQTlJLElBQUF3bkIsRUFBQW5hLEdBQUE0QixJQUFBalAsT0FFQSxHQUFBd3RCLEVBQUFpQixTQUFBLElBQUFqQixFQUFBaUIsU0FBQSxJQUNBLElBQUFBLEVBQUFqQixFQUFBaUUsUUFBQWpFLEVBQUFpQixRQUFBLEdBQUFqQixFQUFBaUIsUUFBQSxHQUNBM2xCLEVBQUE5SSxJQUFBd25CLEVBQUFuYSxHQUFBNEIsSUFBQThSLE9BQUFDLGFBQUF5TixTQTlCQWpCLEVBQUFpQixTQUFBLElBQUFqQixFQUFBaUIsU0FBQSxHQUNBM2xCLEVBQUE5SSxJQUFBK2dCLE9BQUFDLGFBQUF3TSxFQUFBaUIsUUFBQSxJQUVBLEtBQUFqQixFQUFBaUIsUUFDQTNsQixFQUFBOUksSUFBQStnQixPQUFBQyxhQUFBLEdBRUF3TSxFQUFBaUIsU0FBQSxJQUFBakIsRUFBQWlCLFNBQUEsR0FDQTNsQixFQUFBOUksSUFBQStnQixPQUFBQyxhQUFBd00sRUFBQWlCLFFBQUEsT0FFQSxLQUFBakIsRUFBQWlCLFFBQ0EzbEIsRUFBQTlJLElBQUErZ0IsT0FBQUMsYUFBQSxLQUVBLE1BQUF3TSxFQUFBaUIsUUFDQTNsQixFQUFBOUksSUFBQStnQixPQUFBQyxhQUFBLElBRUEsTUFBQXdNLEVBQUFpQixRQUNBM2xCLEVBQUE5SSxJQUFBK2dCLE9BQUFDLGFBQUEsSUFFQSxNQUFBd00sRUFBQWlCLFVBQ0EzbEIsRUFBQTlJLElBQUErZ0IsT0FBQUMsYUFBQSxLQXFCQSxPQUFBbFksaUNDblZBM0osT0FBQUMsZUFBQWIsRUFBQSxjQUE4Q21CLE9BQUEsSUFDOUMsSUFBQStiLEVBQWlCcGQsRUFBUSxJQUN6QkcsRUFBQUQsUUFBQWtkLEVBQUFFIiwiZmlsZSI6InRlcm1pbmFsLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAyMSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQ2lyY3VsYXJMaXN0XzEgPSByZXF1aXJlKFwiLi9jb21tb24vQ2lyY3VsYXJMaXN0XCIpO1xudmFyIEV2ZW50RW1pdHRlcl8xID0gcmVxdWlyZShcIi4vY29tbW9uL0V2ZW50RW1pdHRlclwiKTtcbnZhciBCdWZmZXJMaW5lXzEgPSByZXF1aXJlKFwiLi9CdWZmZXJMaW5lXCIpO1xudmFyIFR5cGVzXzEgPSByZXF1aXJlKFwiLi9yZW5kZXJlci9hdGxhcy9UeXBlc1wiKTtcbmV4cG9ydHMuREVGQVVMVF9BVFRSID0gKDAgPDwgMTgpIHwgKFR5cGVzXzEuREVGQVVMVF9DT0xPUiA8PCA5KSB8ICgyNTYgPDwgMCk7XG5leHBvcnRzLkNIQVJfREFUQV9BVFRSX0lOREVYID0gMDtcbmV4cG9ydHMuQ0hBUl9EQVRBX0NIQVJfSU5ERVggPSAxO1xuZXhwb3J0cy5DSEFSX0RBVEFfV0lEVEhfSU5ERVggPSAyO1xuZXhwb3J0cy5DSEFSX0RBVEFfQ09ERV9JTkRFWCA9IDM7XG5leHBvcnRzLk1BWF9CVUZGRVJfU0laRSA9IDQyOTQ5NjcyOTU7XG5leHBvcnRzLk5VTExfQ0VMTF9DSEFSID0gJyAnO1xuZXhwb3J0cy5OVUxMX0NFTExfV0lEVEggPSAxO1xuZXhwb3J0cy5OVUxMX0NFTExfQ09ERSA9IDMyO1xudmFyIEJ1ZmZlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQnVmZmVyKF90ZXJtaW5hbCwgX2hhc1Njcm9sbGJhY2spIHtcbiAgICAgICAgdGhpcy5fdGVybWluYWwgPSBfdGVybWluYWw7XG4gICAgICAgIHRoaXMuX2hhc1Njcm9sbGJhY2sgPSBfaGFzU2Nyb2xsYmFjaztcbiAgICAgICAgdGhpcy5tYXJrZXJzID0gW107XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICB9XG4gICAgQnVmZmVyLnByb3RvdHlwZS5zZXRCdWZmZXJMaW5lRmFjdG9yeSA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgIGlmICh0eXBlID09PSAnSnNBcnJheScpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9idWZmZXJMaW5lQ29uc3RydWN0b3IgIT09IEJ1ZmZlckxpbmVfMS5CdWZmZXJMaW5lSlNBcnJheSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2J1ZmZlckxpbmVDb25zdHJ1Y3RvciA9IEJ1ZmZlckxpbmVfMS5CdWZmZXJMaW5lSlNBcnJheTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWNyZWF0ZUxpbmVzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fYnVmZmVyTGluZUNvbnN0cnVjdG9yICE9PSBCdWZmZXJMaW5lXzEuQnVmZmVyTGluZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2J1ZmZlckxpbmVDb25zdHJ1Y3RvciA9IEJ1ZmZlckxpbmVfMS5CdWZmZXJMaW5lO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlY3JlYXRlTGluZXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgQnVmZmVyLnByb3RvdHlwZS5fcmVjcmVhdGVMaW5lcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmxpbmVzKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGluZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBvbGRMaW5lID0gdGhpcy5saW5lcy5nZXQoaSk7XG4gICAgICAgICAgICB2YXIgbmV3TGluZSA9IG5ldyB0aGlzLl9idWZmZXJMaW5lQ29uc3RydWN0b3Iob2xkTGluZS5sZW5ndGgpO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBvbGRMaW5lLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgbmV3TGluZS5zZXQoaiwgb2xkTGluZS5nZXQoaikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5saW5lcy5zZXQoaSwgbmV3TGluZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJ1ZmZlci5wcm90b3R5cGUuZ2V0QmxhbmtMaW5lID0gZnVuY3Rpb24gKGF0dHIsIGlzV3JhcHBlZCkge1xuICAgICAgICB2YXIgZmlsbENoYXJEYXRhID0gW2F0dHIsIGV4cG9ydHMuTlVMTF9DRUxMX0NIQVIsIGV4cG9ydHMuTlVMTF9DRUxMX1dJRFRILCBleHBvcnRzLk5VTExfQ0VMTF9DT0RFXTtcbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzLl9idWZmZXJMaW5lQ29uc3RydWN0b3IodGhpcy5fdGVybWluYWwuY29scywgZmlsbENoYXJEYXRhLCBpc1dyYXBwZWQpO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlci5wcm90b3R5cGUsIFwiaGFzU2Nyb2xsYmFja1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hhc1Njcm9sbGJhY2sgJiYgdGhpcy5saW5lcy5tYXhMZW5ndGggPiB0aGlzLl90ZXJtaW5hbC5yb3dzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLnByb3RvdHlwZSwgXCJpc0N1cnNvckluVmlld3BvcnRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhYnNvbHV0ZVkgPSB0aGlzLnliYXNlICsgdGhpcy55O1xuICAgICAgICAgICAgdmFyIHJlbGF0aXZlWSA9IGFic29sdXRlWSAtIHRoaXMueWRpc3A7XG4gICAgICAgICAgICByZXR1cm4gKHJlbGF0aXZlWSA+PSAwICYmIHJlbGF0aXZlWSA8IHRoaXMuX3Rlcm1pbmFsLnJvd3MpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBCdWZmZXIucHJvdG90eXBlLl9nZXRDb3JyZWN0QnVmZmVyTGVuZ3RoID0gZnVuY3Rpb24gKHJvd3MpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9oYXNTY3JvbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gcm93cztcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29ycmVjdEJ1ZmZlckxlbmd0aCA9IHJvd3MgKyB0aGlzLl90ZXJtaW5hbC5vcHRpb25zLnNjcm9sbGJhY2s7XG4gICAgICAgIHJldHVybiBjb3JyZWN0QnVmZmVyTGVuZ3RoID4gZXhwb3J0cy5NQVhfQlVGRkVSX1NJWkUgPyBleHBvcnRzLk1BWF9CVUZGRVJfU0laRSA6IGNvcnJlY3RCdWZmZXJMZW5ndGg7XG4gICAgfTtcbiAgICBCdWZmZXIucHJvdG90eXBlLmZpbGxWaWV3cG9ydFJvd3MgPSBmdW5jdGlvbiAoZmlsbEF0dHIpIHtcbiAgICAgICAgaWYgKHRoaXMubGluZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBpZiAoZmlsbEF0dHIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGZpbGxBdHRyID0gZXhwb3J0cy5ERUZBVUxUX0FUVFI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaSA9IHRoaXMuX3Rlcm1pbmFsLnJvd3M7XG4gICAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5saW5lcy5wdXNoKHRoaXMuZ2V0QmxhbmtMaW5lKGZpbGxBdHRyKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJ1ZmZlci5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2V0QnVmZmVyTGluZUZhY3RvcnkodGhpcy5fdGVybWluYWwub3B0aW9ucy5leHBlcmltZW50YWxCdWZmZXJMaW5lSW1wbCk7XG4gICAgICAgIHRoaXMueWRpc3AgPSAwO1xuICAgICAgICB0aGlzLnliYXNlID0gMDtcbiAgICAgICAgdGhpcy55ID0gMDtcbiAgICAgICAgdGhpcy54ID0gMDtcbiAgICAgICAgdGhpcy5saW5lcyA9IG5ldyBDaXJjdWxhckxpc3RfMS5DaXJjdWxhckxpc3QodGhpcy5fZ2V0Q29ycmVjdEJ1ZmZlckxlbmd0aCh0aGlzLl90ZXJtaW5hbC5yb3dzKSk7XG4gICAgICAgIHRoaXMuc2Nyb2xsVG9wID0gMDtcbiAgICAgICAgdGhpcy5zY3JvbGxCb3R0b20gPSB0aGlzLl90ZXJtaW5hbC5yb3dzIC0gMTtcbiAgICAgICAgdGhpcy5zZXR1cFRhYlN0b3BzKCk7XG4gICAgfTtcbiAgICBCdWZmZXIucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uIChuZXdDb2xzLCBuZXdSb3dzKSB7XG4gICAgICAgIHZhciBuZXdNYXhMZW5ndGggPSB0aGlzLl9nZXRDb3JyZWN0QnVmZmVyTGVuZ3RoKG5ld1Jvd3MpO1xuICAgICAgICBpZiAobmV3TWF4TGVuZ3RoID4gdGhpcy5saW5lcy5tYXhMZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMubGluZXMubWF4TGVuZ3RoID0gbmV3TWF4TGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmxpbmVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl90ZXJtaW5hbC5jb2xzIDwgbmV3Q29scykge1xuICAgICAgICAgICAgICAgIHZhciBjaCA9IFtleHBvcnRzLkRFRkFVTFRfQVRUUiwgZXhwb3J0cy5OVUxMX0NFTExfQ0hBUiwgZXhwb3J0cy5OVUxMX0NFTExfV0lEVEgsIGV4cG9ydHMuTlVMTF9DRUxMX0NPREVdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5saW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpbmVzLmdldChpKS5yZXNpemUobmV3Q29scywgY2gpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBhZGRUb1kgPSAwO1xuICAgICAgICAgICAgaWYgKHRoaXMuX3Rlcm1pbmFsLnJvd3MgPCBuZXdSb3dzKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgeSA9IHRoaXMuX3Rlcm1pbmFsLnJvd3M7IHkgPCBuZXdSb3dzOyB5KyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubGluZXMubGVuZ3RoIDwgbmV3Um93cyArIHRoaXMueWJhc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnliYXNlID4gMCAmJiB0aGlzLmxpbmVzLmxlbmd0aCA8PSB0aGlzLnliYXNlICsgdGhpcy55ICsgYWRkVG9ZICsgMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueWJhc2UtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRUb1krKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy55ZGlzcCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55ZGlzcC0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWxsQ2hhckRhdGEgPSBbZXhwb3J0cy5ERUZBVUxUX0FUVFIsIGV4cG9ydHMuTlVMTF9DRUxMX0NIQVIsIGV4cG9ydHMuTlVMTF9DRUxMX1dJRFRILCBleHBvcnRzLk5VTExfQ0VMTF9DT0RFXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpbmVzLnB1c2gobmV3IHRoaXMuX2J1ZmZlckxpbmVDb25zdHJ1Y3RvcihuZXdDb2xzLCBmaWxsQ2hhckRhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHkgPSB0aGlzLl90ZXJtaW5hbC5yb3dzOyB5ID4gbmV3Um93czsgeS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmxpbmVzLmxlbmd0aCA+IG5ld1Jvd3MgKyB0aGlzLnliYXNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5saW5lcy5sZW5ndGggPiB0aGlzLnliYXNlICsgdGhpcy55ICsgMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGluZXMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnliYXNlKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55ZGlzcCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5ld01heExlbmd0aCA8IHRoaXMubGluZXMubWF4TGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFtb3VudFRvVHJpbSA9IHRoaXMubGluZXMubGVuZ3RoIC0gbmV3TWF4TGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChhbW91bnRUb1RyaW0gPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGluZXMudHJpbVN0YXJ0KGFtb3VudFRvVHJpbSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMueWJhc2UgPSBNYXRoLm1heCh0aGlzLnliYXNlIC0gYW1vdW50VG9UcmltLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55ZGlzcCA9IE1hdGgubWF4KHRoaXMueWRpc3AgLSBhbW91bnRUb1RyaW0sIDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmxpbmVzLm1heExlbmd0aCA9IG5ld01heExlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMueCA9IE1hdGgubWluKHRoaXMueCwgbmV3Q29scyAtIDEpO1xuICAgICAgICAgICAgdGhpcy55ID0gTWF0aC5taW4odGhpcy55LCBuZXdSb3dzIC0gMSk7XG4gICAgICAgICAgICBpZiAoYWRkVG9ZKSB7XG4gICAgICAgICAgICAgICAgdGhpcy55ICs9IGFkZFRvWTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2F2ZWRZID0gTWF0aC5taW4odGhpcy5zYXZlZFksIG5ld1Jvd3MgLSAxKTtcbiAgICAgICAgICAgIHRoaXMuc2F2ZWRYID0gTWF0aC5taW4odGhpcy5zYXZlZFgsIG5ld0NvbHMgLSAxKTtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsVG9wID0gMDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNjcm9sbEJvdHRvbSA9IG5ld1Jvd3MgLSAxO1xuICAgIH07XG4gICAgQnVmZmVyLnByb3RvdHlwZS5zdHJpbmdJbmRleFRvQnVmZmVySW5kZXggPSBmdW5jdGlvbiAobGluZUluZGV4LCBzdHJpbmdJbmRleCkge1xuICAgICAgICB3aGlsZSAoc3RyaW5nSW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBsaW5lID0gdGhpcy5saW5lcy5nZXQobGluZUluZGV4KTtcbiAgICAgICAgICAgIGlmICghbGluZSkge1xuICAgICAgICAgICAgICAgIFstMSwgLTFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgc3RyaW5nSW5kZXggLT0gbGluZS5nZXQoaSlbZXhwb3J0cy5DSEFSX0RBVEFfQ0hBUl9JTkRFWF0ubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChzdHJpbmdJbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtsaW5lSW5kZXgsIGldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxpbmVJbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbbGluZUluZGV4LCAwXTtcbiAgICB9O1xuICAgIEJ1ZmZlci5wcm90b3R5cGUudHJhbnNsYXRlQnVmZmVyTGluZVRvU3RyaW5nID0gZnVuY3Rpb24gKGxpbmVJbmRleCwgdHJpbVJpZ2h0LCBzdGFydENvbCwgZW5kQ29sKSB7XG4gICAgICAgIGlmIChzdGFydENvbCA9PT0gdm9pZCAwKSB7IHN0YXJ0Q29sID0gMDsgfVxuICAgICAgICBpZiAoZW5kQ29sID09PSB2b2lkIDApIHsgZW5kQ29sID0gbnVsbDsgfVxuICAgICAgICB2YXIgbGluZVN0cmluZyA9ICcnO1xuICAgICAgICB2YXIgbGluZSA9IHRoaXMubGluZXMuZ2V0KGxpbmVJbmRleCk7XG4gICAgICAgIGlmICghbGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdGFydEluZGV4ID0gc3RhcnRDb2w7XG4gICAgICAgIGlmIChlbmRDb2wgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGVuZENvbCA9IGxpbmUubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlbmRJbmRleCA9IGVuZENvbDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgY2hhciA9IGxpbmUuZ2V0KGkpO1xuICAgICAgICAgICAgbGluZVN0cmluZyArPSBjaGFyW2V4cG9ydHMuQ0hBUl9EQVRBX0NIQVJfSU5ERVhdO1xuICAgICAgICAgICAgaWYgKGNoYXJbZXhwb3J0cy5DSEFSX0RBVEFfV0lEVEhfSU5ERVhdID09PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0Q29sID49IGkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRJbmRleC0tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZW5kQ29sID4gaSkge1xuICAgICAgICAgICAgICAgICAgICBlbmRJbmRleC0tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChjaGFyW2V4cG9ydHMuQ0hBUl9EQVRBX0NIQVJfSU5ERVhdLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0Q29sID4gaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRJbmRleCArPSBjaGFyW2V4cG9ydHMuQ0hBUl9EQVRBX0NIQVJfSU5ERVhdLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVuZENvbCA+IGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZEluZGV4ICs9IGNoYXJbZXhwb3J0cy5DSEFSX0RBVEFfQ0hBUl9JTkRFWF0ubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHJpbVJpZ2h0KSB7XG4gICAgICAgICAgICB2YXIgcmlnaHRXaGl0ZXNwYWNlSW5kZXggPSBsaW5lU3RyaW5nLnNlYXJjaCgvXFxzKyQvKTtcbiAgICAgICAgICAgIGlmIChyaWdodFdoaXRlc3BhY2VJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBlbmRJbmRleCA9IE1hdGgubWluKGVuZEluZGV4LCByaWdodFdoaXRlc3BhY2VJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZW5kSW5kZXggPD0gc3RhcnRJbmRleCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGluZVN0cmluZy5zdWJzdHJpbmcoc3RhcnRJbmRleCwgZW5kSW5kZXgpO1xuICAgIH07XG4gICAgQnVmZmVyLnByb3RvdHlwZS5nZXRXcmFwcGVkUmFuZ2VGb3JMaW5lID0gZnVuY3Rpb24gKHkpIHtcbiAgICAgICAgdmFyIGZpcnN0ID0geTtcbiAgICAgICAgdmFyIGxhc3QgPSB5O1xuICAgICAgICB3aGlsZSAoZmlyc3QgPiAwICYmIHRoaXMubGluZXMuZ2V0KGZpcnN0KS5pc1dyYXBwZWQpIHtcbiAgICAgICAgICAgIGZpcnN0LS07XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGxhc3QgKyAxIDwgdGhpcy5saW5lcy5sZW5ndGggJiYgdGhpcy5saW5lcy5nZXQobGFzdCArIDEpLmlzV3JhcHBlZCkge1xuICAgICAgICAgICAgbGFzdCsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGZpcnN0OiBmaXJzdCwgbGFzdDogbGFzdCB9O1xuICAgIH07XG4gICAgQnVmZmVyLnByb3RvdHlwZS5zZXR1cFRhYlN0b3BzID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgaWYgKGkgIT09IG51bGwgJiYgaSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMudGFic1tpXSkge1xuICAgICAgICAgICAgICAgIGkgPSB0aGlzLnByZXZTdG9wKGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50YWJzID0ge307XG4gICAgICAgICAgICBpID0gMDtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKDsgaSA8IHRoaXMuX3Rlcm1pbmFsLmNvbHM7IGkgKz0gdGhpcy5fdGVybWluYWwub3B0aW9ucy50YWJTdG9wV2lkdGgpIHtcbiAgICAgICAgICAgIHRoaXMudGFic1tpXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJ1ZmZlci5wcm90b3R5cGUucHJldlN0b3AgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICBpZiAoeCA9PT0gbnVsbCB8fCB4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHggPSB0aGlzLng7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKCF0aGlzLnRhYnNbLS14XSAmJiB4ID4gMClcbiAgICAgICAgICAgIDtcbiAgICAgICAgcmV0dXJuIHggPj0gdGhpcy5fdGVybWluYWwuY29scyA/IHRoaXMuX3Rlcm1pbmFsLmNvbHMgLSAxIDogeCA8IDAgPyAwIDogeDtcbiAgICB9O1xuICAgIEJ1ZmZlci5wcm90b3R5cGUubmV4dFN0b3AgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICBpZiAoeCA9PT0gbnVsbCB8fCB4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHggPSB0aGlzLng7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKCF0aGlzLnRhYnNbKyt4XSAmJiB4IDwgdGhpcy5fdGVybWluYWwuY29scylcbiAgICAgICAgICAgIDtcbiAgICAgICAgcmV0dXJuIHggPj0gdGhpcy5fdGVybWluYWwuY29scyA/IHRoaXMuX3Rlcm1pbmFsLmNvbHMgLSAxIDogeCA8IDAgPyAwIDogeDtcbiAgICB9O1xuICAgIEJ1ZmZlci5wcm90b3R5cGUuYWRkTWFya2VyID0gZnVuY3Rpb24gKHkpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBNYXJrZXIoeSk7XG4gICAgICAgIHRoaXMubWFya2Vycy5wdXNoKG1hcmtlcik7XG4gICAgICAgIG1hcmtlci5yZWdpc3Rlcih0aGlzLmxpbmVzLmFkZERpc3Bvc2FibGVMaXN0ZW5lcigndHJpbScsIGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgIG1hcmtlci5saW5lIC09IGFtb3VudDtcbiAgICAgICAgICAgIGlmIChtYXJrZXIubGluZSA8IDApIHtcbiAgICAgICAgICAgICAgICBtYXJrZXIuZGlzcG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICAgIG1hcmtlci5yZWdpc3RlcihtYXJrZXIuYWRkRGlzcG9zYWJsZUxpc3RlbmVyKCdkaXNwb3NlJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX3JlbW92ZU1hcmtlcihtYXJrZXIpOyB9KSk7XG4gICAgICAgIHJldHVybiBtYXJrZXI7XG4gICAgfTtcbiAgICBCdWZmZXIucHJvdG90eXBlLl9yZW1vdmVNYXJrZXIgPSBmdW5jdGlvbiAobWFya2VyKSB7XG4gICAgICAgIHRoaXMubWFya2Vycy5zcGxpY2UodGhpcy5tYXJrZXJzLmluZGV4T2YobWFya2VyKSwgMSk7XG4gICAgfTtcbiAgICBCdWZmZXIucHJvdG90eXBlLml0ZXJhdG9yID0gZnVuY3Rpb24gKHRyaW1SaWdodCwgc3RhcnRJbmRleCwgZW5kSW5kZXgsIHN0YXJ0T3ZlcnNjYW4sIGVuZE92ZXJzY2FuKSB7XG4gICAgICAgIHJldHVybiBuZXcgQnVmZmVyU3RyaW5nSXRlcmF0b3IodGhpcywgdHJpbVJpZ2h0LCBzdGFydEluZGV4LCBlbmRJbmRleCwgc3RhcnRPdmVyc2NhbiwgZW5kT3ZlcnNjYW4pO1xuICAgIH07XG4gICAgcmV0dXJuIEJ1ZmZlcjtcbn0oKSk7XG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlcjtcbnZhciBNYXJrZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNYXJrZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWFya2VyKGxpbmUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMubGluZSA9IGxpbmU7XG4gICAgICAgIF90aGlzLl9pZCA9IE1hcmtlci5fbmV4dElkKys7XG4gICAgICAgIF90aGlzLmlzRGlzcG9zZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWFya2VyLnByb3RvdHlwZSwgXCJpZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5faWQ7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE1hcmtlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNEaXNwb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNEaXNwb3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuZW1pdCgnZGlzcG9zZScpO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIE1hcmtlci5fbmV4dElkID0gMTtcbiAgICByZXR1cm4gTWFya2VyO1xufShFdmVudEVtaXR0ZXJfMS5FdmVudEVtaXR0ZXIpKTtcbmV4cG9ydHMuTWFya2VyID0gTWFya2VyO1xudmFyIEJ1ZmZlclN0cmluZ0l0ZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCdWZmZXJTdHJpbmdJdGVyYXRvcihfYnVmZmVyLCBfdHJpbVJpZ2h0LCBfc3RhcnRJbmRleCwgX2VuZEluZGV4LCBfc3RhcnRPdmVyc2NhbiwgX2VuZE92ZXJzY2FuKSB7XG4gICAgICAgIGlmIChfc3RhcnRJbmRleCA9PT0gdm9pZCAwKSB7IF9zdGFydEluZGV4ID0gMDsgfVxuICAgICAgICBpZiAoX2VuZEluZGV4ID09PSB2b2lkIDApIHsgX2VuZEluZGV4ID0gX2J1ZmZlci5saW5lcy5sZW5ndGg7IH1cbiAgICAgICAgaWYgKF9zdGFydE92ZXJzY2FuID09PSB2b2lkIDApIHsgX3N0YXJ0T3ZlcnNjYW4gPSAwOyB9XG4gICAgICAgIGlmIChfZW5kT3ZlcnNjYW4gPT09IHZvaWQgMCkgeyBfZW5kT3ZlcnNjYW4gPSAwOyB9XG4gICAgICAgIHRoaXMuX2J1ZmZlciA9IF9idWZmZXI7XG4gICAgICAgIHRoaXMuX3RyaW1SaWdodCA9IF90cmltUmlnaHQ7XG4gICAgICAgIHRoaXMuX3N0YXJ0SW5kZXggPSBfc3RhcnRJbmRleDtcbiAgICAgICAgdGhpcy5fZW5kSW5kZXggPSBfZW5kSW5kZXg7XG4gICAgICAgIHRoaXMuX3N0YXJ0T3ZlcnNjYW4gPSBfc3RhcnRPdmVyc2NhbjtcbiAgICAgICAgdGhpcy5fZW5kT3ZlcnNjYW4gPSBfZW5kT3ZlcnNjYW47XG4gICAgICAgIGlmICh0aGlzLl9zdGFydEluZGV4IDwgMCkge1xuICAgICAgICAgICAgdGhpcy5fc3RhcnRJbmRleCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2VuZEluZGV4ID4gdGhpcy5fYnVmZmVyLmxpbmVzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5fZW5kSW5kZXggPSB0aGlzLl9idWZmZXIubGluZXMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2N1cnJlbnQgPSB0aGlzLl9zdGFydEluZGV4O1xuICAgIH1cbiAgICBCdWZmZXJTdHJpbmdJdGVyYXRvci5wcm90b3R5cGUuaGFzTmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2N1cnJlbnQgPCB0aGlzLl9lbmRJbmRleDtcbiAgICB9O1xuICAgIEJ1ZmZlclN0cmluZ0l0ZXJhdG9yLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcmFuZ2UgPSB0aGlzLl9idWZmZXIuZ2V0V3JhcHBlZFJhbmdlRm9yTGluZSh0aGlzLl9jdXJyZW50KTtcbiAgICAgICAgaWYgKHJhbmdlLmZpcnN0IDwgdGhpcy5fc3RhcnRJbmRleCAtIHRoaXMuX3N0YXJ0T3ZlcnNjYW4pIHtcbiAgICAgICAgICAgIHJhbmdlLmZpcnN0ID0gdGhpcy5fc3RhcnRJbmRleCAtIHRoaXMuX3N0YXJ0T3ZlcnNjYW47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJhbmdlLmxhc3QgPiB0aGlzLl9lbmRJbmRleCArIHRoaXMuX2VuZE92ZXJzY2FuKSB7XG4gICAgICAgICAgICByYW5nZS5sYXN0ID0gdGhpcy5fZW5kSW5kZXggKyB0aGlzLl9lbmRPdmVyc2NhbjtcbiAgICAgICAgfVxuICAgICAgICByYW5nZS5maXJzdCA9IE1hdGgubWF4KHJhbmdlLmZpcnN0LCAwKTtcbiAgICAgICAgcmFuZ2UubGFzdCA9IE1hdGgubWluKHJhbmdlLmxhc3QsIHRoaXMuX2J1ZmZlci5saW5lcy5sZW5ndGgpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICAgIGZvciAodmFyIGkgPSByYW5nZS5maXJzdDsgaSA8PSByYW5nZS5sYXN0OyArK2kpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSB0aGlzLl9idWZmZXIudHJhbnNsYXRlQnVmZmVyTGluZVRvU3RyaW5nKGksICh0aGlzLl90cmltUmlnaHQpID8gaSA9PT0gcmFuZ2UubGFzdCA6IGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jdXJyZW50ID0gcmFuZ2UubGFzdCArIDE7XG4gICAgICAgIHJldHVybiB7IHJhbmdlOiByYW5nZSwgY29udGVudDogcmVzdWx0IH07XG4gICAgfTtcbiAgICByZXR1cm4gQnVmZmVyU3RyaW5nSXRlcmF0b3I7XG59KCkpO1xuZXhwb3J0cy5CdWZmZXJTdHJpbmdJdGVyYXRvciA9IEJ1ZmZlclN0cmluZ0l0ZXJhdG9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QnVmZmVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ERUZBVUxUX0NPTE9SID0gMjU2O1xuZXhwb3J0cy5JTlZFUlRFRF9ERUZBVUxUX0NPTE9SID0gMjU3O1xuZXhwb3J0cy5ESU1fT1BBQ0lUWSA9IDAuNTtcbmV4cG9ydHMuQ0hBUl9BVExBU19DRUxMX1NQQUNJTkcgPSAxO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VHlwZXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIExpZmVjeWNsZV8xID0gcmVxdWlyZShcIi4vTGlmZWN5Y2xlXCIpO1xudmFyIEV2ZW50RW1pdHRlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEV2ZW50RW1pdHRlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9ldmVudHMgPSBfdGhpcy5fZXZlbnRzIHx8IHt9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gdGhpcy5fZXZlbnRzW3R5cGVdIHx8IFtdO1xuICAgICAgICB0aGlzLl9ldmVudHNbdHlwZV0ucHVzaChsaXN0ZW5lcik7XG4gICAgfTtcbiAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZERpc3Bvc2FibGVMaXN0ZW5lciA9IGZ1bmN0aW9uICh0eXBlLCBoYW5kbGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMub24odHlwZSwgaGFuZGxlcik7XG4gICAgICAgIHZhciBkaXNwb3NlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGlzcG9zZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChkaXNwb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzLm9mZih0eXBlLCBoYW5kbGVyKTtcbiAgICAgICAgICAgICAgICBkaXNwb3NlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uICh0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoIXRoaXMuX2V2ZW50c1t0eXBlXSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvYmogPSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgICAgIHZhciBpID0gb2JqLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgaWYgKG9ialtpXSA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICBvYmouc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICBpZiAodGhpcy5fZXZlbnRzW3R5cGVdKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2V2ZW50c1t0eXBlXSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvYmogPSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBvYmpbaV0uYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50c1t0eXBlXSB8fCBbXTtcbiAgICB9O1xuICAgIEV2ZW50RW1pdHRlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgIH07XG4gICAgcmV0dXJuIEV2ZW50RW1pdHRlcjtcbn0oTGlmZWN5Y2xlXzEuRGlzcG9zYWJsZSkpO1xuZXhwb3J0cy5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1FdmVudEVtaXR0ZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRGlzcG9zYWJsZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGlzcG9zYWJsZSgpIHtcbiAgICAgICAgdGhpcy5fZGlzcG9zYWJsZXMgPSBbXTtcbiAgICAgICAgdGhpcy5faXNEaXNwb3NlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBEaXNwb3NhYmxlLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9pc0Rpc3Bvc2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fZGlzcG9zYWJsZXMuZm9yRWFjaChmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5kaXNwb3NlKCk7IH0pO1xuICAgICAgICB0aGlzLl9kaXNwb3NhYmxlcy5sZW5ndGggPSAwO1xuICAgIH07XG4gICAgRGlzcG9zYWJsZS5wcm90b3R5cGUucmVnaXN0ZXIgPSBmdW5jdGlvbiAoZCkge1xuICAgICAgICB0aGlzLl9kaXNwb3NhYmxlcy5wdXNoKGQpO1xuICAgIH07XG4gICAgRGlzcG9zYWJsZS5wcm90b3R5cGUudW5yZWdpc3RlciA9IGZ1bmN0aW9uIChkKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuX2Rpc3Bvc2FibGVzLmluZGV4T2YoZCk7XG4gICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuX2Rpc3Bvc2FibGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBEaXNwb3NhYmxlO1xufSgpKTtcbmV4cG9ydHMuRGlzcG9zYWJsZSA9IERpc3Bvc2FibGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1MaWZlY3ljbGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgVHlwZXNfMSA9IHJlcXVpcmUoXCIuL1R5cGVzXCIpO1xuZnVuY3Rpb24gZ2VuZXJhdGVDb25maWcoc2NhbGVkQ2hhcldpZHRoLCBzY2FsZWRDaGFySGVpZ2h0LCB0ZXJtaW5hbCwgY29sb3JzKSB7XG4gICAgdmFyIGNsb25lZENvbG9ycyA9IHtcbiAgICAgICAgZm9yZWdyb3VuZDogY29sb3JzLmZvcmVncm91bmQsXG4gICAgICAgIGJhY2tncm91bmQ6IGNvbG9ycy5iYWNrZ3JvdW5kLFxuICAgICAgICBjdXJzb3I6IG51bGwsXG4gICAgICAgIGN1cnNvckFjY2VudDogbnVsbCxcbiAgICAgICAgc2VsZWN0aW9uOiBudWxsLFxuICAgICAgICBhbnNpOiBjb2xvcnMuYW5zaS5zbGljZSgwLCAxNilcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHRlcm1pbmFsLm9wdGlvbnMuZXhwZXJpbWVudGFsQ2hhckF0bGFzLFxuICAgICAgICBkZXZpY2VQaXhlbFJhdGlvOiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyxcbiAgICAgICAgc2NhbGVkQ2hhcldpZHRoOiBzY2FsZWRDaGFyV2lkdGgsXG4gICAgICAgIHNjYWxlZENoYXJIZWlnaHQ6IHNjYWxlZENoYXJIZWlnaHQsXG4gICAgICAgIGZvbnRGYW1pbHk6IHRlcm1pbmFsLm9wdGlvbnMuZm9udEZhbWlseSxcbiAgICAgICAgZm9udFNpemU6IHRlcm1pbmFsLm9wdGlvbnMuZm9udFNpemUsXG4gICAgICAgIGZvbnRXZWlnaHQ6IHRlcm1pbmFsLm9wdGlvbnMuZm9udFdlaWdodCxcbiAgICAgICAgZm9udFdlaWdodEJvbGQ6IHRlcm1pbmFsLm9wdGlvbnMuZm9udFdlaWdodEJvbGQsXG4gICAgICAgIGFsbG93VHJhbnNwYXJlbmN5OiB0ZXJtaW5hbC5vcHRpb25zLmFsbG93VHJhbnNwYXJlbmN5LFxuICAgICAgICBjb2xvcnM6IGNsb25lZENvbG9yc1xuICAgIH07XG59XG5leHBvcnRzLmdlbmVyYXRlQ29uZmlnID0gZ2VuZXJhdGVDb25maWc7XG5mdW5jdGlvbiBjb25maWdFcXVhbHMoYSwgYikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYS5jb2xvcnMuYW5zaS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYS5jb2xvcnMuYW5zaVtpXS5yZ2JhICE9PSBiLmNvbG9ycy5hbnNpW2ldLnJnYmEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYS50eXBlID09PSBiLnR5cGUgJiZcbiAgICAgICAgYS5kZXZpY2VQaXhlbFJhdGlvID09PSBiLmRldmljZVBpeGVsUmF0aW8gJiZcbiAgICAgICAgYS5mb250RmFtaWx5ID09PSBiLmZvbnRGYW1pbHkgJiZcbiAgICAgICAgYS5mb250U2l6ZSA9PT0gYi5mb250U2l6ZSAmJlxuICAgICAgICBhLmZvbnRXZWlnaHQgPT09IGIuZm9udFdlaWdodCAmJlxuICAgICAgICBhLmZvbnRXZWlnaHRCb2xkID09PSBiLmZvbnRXZWlnaHRCb2xkICYmXG4gICAgICAgIGEuYWxsb3dUcmFuc3BhcmVuY3kgPT09IGIuYWxsb3dUcmFuc3BhcmVuY3kgJiZcbiAgICAgICAgYS5zY2FsZWRDaGFyV2lkdGggPT09IGIuc2NhbGVkQ2hhcldpZHRoICYmXG4gICAgICAgIGEuc2NhbGVkQ2hhckhlaWdodCA9PT0gYi5zY2FsZWRDaGFySGVpZ2h0ICYmXG4gICAgICAgIGEuY29sb3JzLmZvcmVncm91bmQgPT09IGIuY29sb3JzLmZvcmVncm91bmQgJiZcbiAgICAgICAgYS5jb2xvcnMuYmFja2dyb3VuZCA9PT0gYi5jb2xvcnMuYmFja2dyb3VuZDtcbn1cbmV4cG9ydHMuY29uZmlnRXF1YWxzID0gY29uZmlnRXF1YWxzO1xuZnVuY3Rpb24gaXMyNTZDb2xvcihjb2xvckNvZGUpIHtcbiAgICByZXR1cm4gY29sb3JDb2RlIDwgVHlwZXNfMS5ERUZBVUxUX0NPTE9SO1xufVxuZXhwb3J0cy5pczI1NkNvbG9yID0gaXMyNTZDb2xvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNoYXJBdGxhc1V0aWxzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGlzTm9kZSA9ICh0eXBlb2YgbmF2aWdhdG9yID09PSAndW5kZWZpbmVkJykgPyB0cnVlIDogZmFsc2U7XG52YXIgdXNlckFnZW50ID0gKGlzTm9kZSkgPyAnbm9kZScgOiBuYXZpZ2F0b3IudXNlckFnZW50O1xudmFyIHBsYXRmb3JtID0gKGlzTm9kZSkgPyAnbm9kZScgOiBuYXZpZ2F0b3IucGxhdGZvcm07XG5leHBvcnRzLmlzRmlyZWZveCA9ICEhfnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94Jyk7XG5leHBvcnRzLmlzU2FmYXJpID0gL14oKD8hY2hyb21lfGFuZHJvaWQpLikqc2FmYXJpL2kudGVzdCh1c2VyQWdlbnQpO1xuZXhwb3J0cy5pc01TSUUgPSAhIX51c2VyQWdlbnQuaW5kZXhPZignTVNJRScpIHx8ICEhfnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50Jyk7XG5leHBvcnRzLmlzTWFjID0gY29udGFpbnMoWydNYWNpbnRvc2gnLCAnTWFjSW50ZWwnLCAnTWFjUFBDJywgJ01hYzY4SyddLCBwbGF0Zm9ybSk7XG5leHBvcnRzLmlzSXBhZCA9IHBsYXRmb3JtID09PSAnaVBhZCc7XG5leHBvcnRzLmlzSXBob25lID0gcGxhdGZvcm0gPT09ICdpUGhvbmUnO1xuZXhwb3J0cy5pc01TV2luZG93cyA9IGNvbnRhaW5zKFsnV2luZG93cycsICdXaW4xNicsICdXaW4zMicsICdXaW5DRSddLCBwbGF0Zm9ybSk7XG5leHBvcnRzLmlzTGludXggPSBwbGF0Zm9ybS5pbmRleE9mKCdMaW51eCcpID49IDA7XG5mdW5jdGlvbiBjb250YWlucyhhcnIsIGVsKSB7XG4gICAgcmV0dXJuIGFyci5pbmRleE9mKGVsKSA+PSAwO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UGxhdGZvcm0uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiBhZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIobm9kZSwgdHlwZSwgaGFuZGxlciwgdXNlQ2FwdHVyZSkge1xuICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyLCB1c2VDYXB0dXJlKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIWhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlciwgdXNlQ2FwdHVyZSk7XG4gICAgICAgICAgICBub2RlID0gbnVsbDtcbiAgICAgICAgICAgIGhhbmRsZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmV4cG9ydHMuYWRkRGlzcG9zYWJsZURvbUxpc3RlbmVyID0gYWRkRGlzcG9zYWJsZURvbUxpc3RlbmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TGlmZWN5Y2xlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEMwO1xuKGZ1bmN0aW9uIChDMCkge1xuICAgIEMwLk5VTCA9ICdcXHgwMCc7XG4gICAgQzAuU09IID0gJ1xceDAxJztcbiAgICBDMC5TVFggPSAnXFx4MDInO1xuICAgIEMwLkVUWCA9ICdcXHgwMyc7XG4gICAgQzAuRU9UID0gJ1xceDA0JztcbiAgICBDMC5FTlEgPSAnXFx4MDUnO1xuICAgIEMwLkFDSyA9ICdcXHgwNic7XG4gICAgQzAuQkVMID0gJ1xceDA3JztcbiAgICBDMC5CUyA9ICdcXHgwOCc7XG4gICAgQzAuSFQgPSAnXFx4MDknO1xuICAgIEMwLkxGID0gJ1xceDBhJztcbiAgICBDMC5WVCA9ICdcXHgwYic7XG4gICAgQzAuRkYgPSAnXFx4MGMnO1xuICAgIEMwLkNSID0gJ1xceDBkJztcbiAgICBDMC5TTyA9ICdcXHgwZSc7XG4gICAgQzAuU0kgPSAnXFx4MGYnO1xuICAgIEMwLkRMRSA9ICdcXHgxMCc7XG4gICAgQzAuREMxID0gJ1xceDExJztcbiAgICBDMC5EQzIgPSAnXFx4MTInO1xuICAgIEMwLkRDMyA9ICdcXHgxMyc7XG4gICAgQzAuREM0ID0gJ1xceDE0JztcbiAgICBDMC5OQUsgPSAnXFx4MTUnO1xuICAgIEMwLlNZTiA9ICdcXHgxNic7XG4gICAgQzAuRVRCID0gJ1xceDE3JztcbiAgICBDMC5DQU4gPSAnXFx4MTgnO1xuICAgIEMwLkVNID0gJ1xceDE5JztcbiAgICBDMC5TVUIgPSAnXFx4MWEnO1xuICAgIEMwLkVTQyA9ICdcXHgxYic7XG4gICAgQzAuRlMgPSAnXFx4MWMnO1xuICAgIEMwLkdTID0gJ1xceDFkJztcbiAgICBDMC5SUyA9ICdcXHgxZSc7XG4gICAgQzAuVVMgPSAnXFx4MWYnO1xuICAgIEMwLlNQID0gJ1xceDIwJztcbiAgICBDMC5ERUwgPSAnXFx4N2YnO1xufSkoQzAgPSBleHBvcnRzLkMwIHx8IChleHBvcnRzLkMwID0ge30pKTtcbnZhciBDMTtcbihmdW5jdGlvbiAoQzEpIHtcbiAgICBDMS5QQUQgPSAnXFx4ODAnO1xuICAgIEMxLkhPUCA9ICdcXHg4MSc7XG4gICAgQzEuQlBIID0gJ1xceDgyJztcbiAgICBDMS5OQkggPSAnXFx4ODMnO1xuICAgIEMxLklORCA9ICdcXHg4NCc7XG4gICAgQzEuTkVMID0gJ1xceDg1JztcbiAgICBDMS5TU0EgPSAnXFx4ODYnO1xuICAgIEMxLkVTQSA9ICdcXHg4Nyc7XG4gICAgQzEuSFRTID0gJ1xceDg4JztcbiAgICBDMS5IVEogPSAnXFx4ODknO1xuICAgIEMxLlZUUyA9ICdcXHg4YSc7XG4gICAgQzEuUExEID0gJ1xceDhiJztcbiAgICBDMS5QTFUgPSAnXFx4OGMnO1xuICAgIEMxLlJJID0gJ1xceDhkJztcbiAgICBDMS5TUzIgPSAnXFx4OGUnO1xuICAgIEMxLlNTMyA9ICdcXHg4Zic7XG4gICAgQzEuRENTID0gJ1xceDkwJztcbiAgICBDMS5QVTEgPSAnXFx4OTEnO1xuICAgIEMxLlBVMiA9ICdcXHg5Mic7XG4gICAgQzEuU1RTID0gJ1xceDkzJztcbiAgICBDMS5DQ0ggPSAnXFx4OTQnO1xuICAgIEMxLk1XID0gJ1xceDk1JztcbiAgICBDMS5TUEEgPSAnXFx4OTYnO1xuICAgIEMxLkVQQSA9ICdcXHg5Nyc7XG4gICAgQzEuU09TID0gJ1xceDk4JztcbiAgICBDMS5TR0NJID0gJ1xceDk5JztcbiAgICBDMS5TQ0kgPSAnXFx4OWEnO1xuICAgIEMxLkNTSSA9ICdcXHg5Yic7XG4gICAgQzEuU1QgPSAnXFx4OWMnO1xuICAgIEMxLk9TQyA9ICdcXHg5ZCc7XG4gICAgQzEuUE0gPSAnXFx4OWUnO1xuICAgIEMxLkFQQyA9ICdcXHg5Zic7XG59KShDMSA9IGV4cG9ydHMuQzEgfHwgKGV4cG9ydHMuQzEgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RXNjYXBlU2VxdWVuY2VzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFR5cGVzXzEgPSByZXF1aXJlKFwiLi9hdGxhcy9UeXBlc1wiKTtcbnZhciBDaGFyQXRsYXNDYWNoZV8xID0gcmVxdWlyZShcIi4vYXRsYXMvQ2hhckF0bGFzQ2FjaGVcIik7XG52YXIgQnVmZmVyXzEgPSByZXF1aXJlKFwiLi4vQnVmZmVyXCIpO1xudmFyIENoYXJBdGxhc1V0aWxzXzEgPSByZXF1aXJlKFwiLi9hdGxhcy9DaGFyQXRsYXNVdGlsc1wiKTtcbnZhciBCYXNlUmVuZGVyTGF5ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJhc2VSZW5kZXJMYXllcihfY29udGFpbmVyLCBpZCwgekluZGV4LCBfYWxwaGEsIF9jb2xvcnMpIHtcbiAgICAgICAgdGhpcy5fY29udGFpbmVyID0gX2NvbnRhaW5lcjtcbiAgICAgICAgdGhpcy5fYWxwaGEgPSBfYWxwaGE7XG4gICAgICAgIHRoaXMuX2NvbG9ycyA9IF9jb2xvcnM7XG4gICAgICAgIHRoaXMuX3NjYWxlZENoYXJXaWR0aCA9IDA7XG4gICAgICAgIHRoaXMuX3NjYWxlZENoYXJIZWlnaHQgPSAwO1xuICAgICAgICB0aGlzLl9zY2FsZWRDZWxsV2lkdGggPSAwO1xuICAgICAgICB0aGlzLl9zY2FsZWRDZWxsSGVpZ2h0ID0gMDtcbiAgICAgICAgdGhpcy5fc2NhbGVkQ2hhckxlZnQgPSAwO1xuICAgICAgICB0aGlzLl9zY2FsZWRDaGFyVG9wID0gMDtcbiAgICAgICAgdGhpcy5fY3VycmVudEdseXBoSWRlbnRpZmllciA9IHtcbiAgICAgICAgICAgIGNoYXJzOiAnJyxcbiAgICAgICAgICAgIGNvZGU6IDAsXG4gICAgICAgICAgICBiZzogMCxcbiAgICAgICAgICAgIGZnOiAwLFxuICAgICAgICAgICAgYm9sZDogZmFsc2UsXG4gICAgICAgICAgICBkaW06IGZhbHNlLFxuICAgICAgICAgICAgaXRhbGljOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgdGhpcy5fY2FudmFzLmNsYXNzTGlzdC5hZGQoXCJ4dGVybS1cIiArIGlkICsgXCItbGF5ZXJcIik7XG4gICAgICAgIHRoaXMuX2NhbnZhcy5zdHlsZS56SW5kZXggPSB6SW5kZXgudG9TdHJpbmcoKTtcbiAgICAgICAgdGhpcy5faW5pdENhbnZhcygpO1xuICAgICAgICB0aGlzLl9jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5fY2FudmFzKTtcbiAgICB9XG4gICAgQmFzZVJlbmRlckxheWVyLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9jb250YWluZXIucmVtb3ZlQ2hpbGQodGhpcy5fY2FudmFzKTtcbiAgICAgICAgaWYgKHRoaXMuX2NoYXJBdGxhcykge1xuICAgICAgICAgICAgdGhpcy5fY2hhckF0bGFzLmRpc3Bvc2UoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQmFzZVJlbmRlckxheWVyLnByb3RvdHlwZS5faW5pdENhbnZhcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fY3R4ID0gdGhpcy5fY2FudmFzLmdldENvbnRleHQoJzJkJywgeyBhbHBoYTogdGhpcy5fYWxwaGEgfSk7XG4gICAgICAgIGlmICghdGhpcy5fYWxwaGEpIHtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJBbGwoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQmFzZVJlbmRlckxheWVyLnByb3RvdHlwZS5vbk9wdGlvbnNDaGFuZ2VkID0gZnVuY3Rpb24gKHRlcm1pbmFsKSB7IH07XG4gICAgQmFzZVJlbmRlckxheWVyLnByb3RvdHlwZS5vbkJsdXIgPSBmdW5jdGlvbiAodGVybWluYWwpIHsgfTtcbiAgICBCYXNlUmVuZGVyTGF5ZXIucHJvdG90eXBlLm9uRm9jdXMgPSBmdW5jdGlvbiAodGVybWluYWwpIHsgfTtcbiAgICBCYXNlUmVuZGVyTGF5ZXIucHJvdG90eXBlLm9uQ3Vyc29yTW92ZSA9IGZ1bmN0aW9uICh0ZXJtaW5hbCkgeyB9O1xuICAgIEJhc2VSZW5kZXJMYXllci5wcm90b3R5cGUub25HcmlkQ2hhbmdlZCA9IGZ1bmN0aW9uICh0ZXJtaW5hbCwgc3RhcnRSb3csIGVuZFJvdykgeyB9O1xuICAgIEJhc2VSZW5kZXJMYXllci5wcm90b3R5cGUub25TZWxlY3Rpb25DaGFuZ2VkID0gZnVuY3Rpb24gKHRlcm1pbmFsLCBzdGFydCwgZW5kLCBjb2x1bW5TZWxlY3RNb2RlKSB7XG4gICAgICAgIGlmIChjb2x1bW5TZWxlY3RNb2RlID09PSB2b2lkIDApIHsgY29sdW1uU2VsZWN0TW9kZSA9IGZhbHNlOyB9XG4gICAgfTtcbiAgICBCYXNlUmVuZGVyTGF5ZXIucHJvdG90eXBlLm9uVGhlbWVDaGFuZ2VkID0gZnVuY3Rpb24gKHRlcm1pbmFsLCBjb2xvclNldCkge1xuICAgICAgICB0aGlzLl9yZWZyZXNoQ2hhckF0bGFzKHRlcm1pbmFsLCBjb2xvclNldCk7XG4gICAgfTtcbiAgICBCYXNlUmVuZGVyTGF5ZXIucHJvdG90eXBlLnNldFRyYW5zcGFyZW5jeSA9IGZ1bmN0aW9uICh0ZXJtaW5hbCwgYWxwaGEpIHtcbiAgICAgICAgaWYgKGFscGhhID09PSB0aGlzLl9hbHBoYSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvbGRDYW52YXMgPSB0aGlzLl9jYW52YXM7XG4gICAgICAgIHRoaXMuX2FscGhhID0gYWxwaGE7XG4gICAgICAgIHRoaXMuX2NhbnZhcyA9IHRoaXMuX2NhbnZhcy5jbG9uZU5vZGUoKTtcbiAgICAgICAgdGhpcy5faW5pdENhbnZhcygpO1xuICAgICAgICB0aGlzLl9jb250YWluZXIucmVwbGFjZUNoaWxkKHRoaXMuX2NhbnZhcywgb2xkQ2FudmFzKTtcbiAgICAgICAgdGhpcy5fcmVmcmVzaENoYXJBdGxhcyh0ZXJtaW5hbCwgdGhpcy5fY29sb3JzKTtcbiAgICAgICAgdGhpcy5vbkdyaWRDaGFuZ2VkKHRlcm1pbmFsLCAwLCB0ZXJtaW5hbC5yb3dzIC0gMSk7XG4gICAgfTtcbiAgICBCYXNlUmVuZGVyTGF5ZXIucHJvdG90eXBlLl9yZWZyZXNoQ2hhckF0bGFzID0gZnVuY3Rpb24gKHRlcm1pbmFsLCBjb2xvclNldCkge1xuICAgICAgICBpZiAodGhpcy5fc2NhbGVkQ2hhcldpZHRoIDw9IDAgJiYgdGhpcy5fc2NhbGVkQ2hhckhlaWdodCA8PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY2hhckF0bGFzID0gQ2hhckF0bGFzQ2FjaGVfMS5hY3F1aXJlQ2hhckF0bGFzKHRlcm1pbmFsLCBjb2xvclNldCwgdGhpcy5fc2NhbGVkQ2hhcldpZHRoLCB0aGlzLl9zY2FsZWRDaGFySGVpZ2h0KTtcbiAgICAgICAgdGhpcy5fY2hhckF0bGFzLndhcm1VcCgpO1xuICAgIH07XG4gICAgQmFzZVJlbmRlckxheWVyLnByb3RvdHlwZS5yZXNpemUgPSBmdW5jdGlvbiAodGVybWluYWwsIGRpbSkge1xuICAgICAgICB0aGlzLl9zY2FsZWRDZWxsV2lkdGggPSBkaW0uc2NhbGVkQ2VsbFdpZHRoO1xuICAgICAgICB0aGlzLl9zY2FsZWRDZWxsSGVpZ2h0ID0gZGltLnNjYWxlZENlbGxIZWlnaHQ7XG4gICAgICAgIHRoaXMuX3NjYWxlZENoYXJXaWR0aCA9IGRpbS5zY2FsZWRDaGFyV2lkdGg7XG4gICAgICAgIHRoaXMuX3NjYWxlZENoYXJIZWlnaHQgPSBkaW0uc2NhbGVkQ2hhckhlaWdodDtcbiAgICAgICAgdGhpcy5fc2NhbGVkQ2hhckxlZnQgPSBkaW0uc2NhbGVkQ2hhckxlZnQ7XG4gICAgICAgIHRoaXMuX3NjYWxlZENoYXJUb3AgPSBkaW0uc2NhbGVkQ2hhclRvcDtcbiAgICAgICAgdGhpcy5fY2FudmFzLndpZHRoID0gZGltLnNjYWxlZENhbnZhc1dpZHRoO1xuICAgICAgICB0aGlzLl9jYW52YXMuaGVpZ2h0ID0gZGltLnNjYWxlZENhbnZhc0hlaWdodDtcbiAgICAgICAgdGhpcy5fY2FudmFzLnN0eWxlLndpZHRoID0gZGltLmNhbnZhc1dpZHRoICsgXCJweFwiO1xuICAgICAgICB0aGlzLl9jYW52YXMuc3R5bGUuaGVpZ2h0ID0gZGltLmNhbnZhc0hlaWdodCArIFwicHhcIjtcbiAgICAgICAgaWYgKCF0aGlzLl9hbHBoYSkge1xuICAgICAgICAgICAgdGhpcy5jbGVhckFsbCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3JlZnJlc2hDaGFyQXRsYXModGVybWluYWwsIHRoaXMuX2NvbG9ycyk7XG4gICAgfTtcbiAgICBCYXNlUmVuZGVyTGF5ZXIucHJvdG90eXBlLmZpbGxDZWxscyA9IGZ1bmN0aW9uICh4LCB5LCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHRoaXMuX2N0eC5maWxsUmVjdCh4ICogdGhpcy5fc2NhbGVkQ2VsbFdpZHRoLCB5ICogdGhpcy5fc2NhbGVkQ2VsbEhlaWdodCwgd2lkdGggKiB0aGlzLl9zY2FsZWRDZWxsV2lkdGgsIGhlaWdodCAqIHRoaXMuX3NjYWxlZENlbGxIZWlnaHQpO1xuICAgIH07XG4gICAgQmFzZVJlbmRlckxheWVyLnByb3RvdHlwZS5maWxsQm90dG9tTGluZUF0Q2VsbHMgPSBmdW5jdGlvbiAoeCwgeSwgd2lkdGgpIHtcbiAgICAgICAgaWYgKHdpZHRoID09PSB2b2lkIDApIHsgd2lkdGggPSAxOyB9XG4gICAgICAgIHRoaXMuX2N0eC5maWxsUmVjdCh4ICogdGhpcy5fc2NhbGVkQ2VsbFdpZHRoLCAoeSArIDEpICogdGhpcy5fc2NhbGVkQ2VsbEhlaWdodCAtIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIC0gMSwgd2lkdGggKiB0aGlzLl9zY2FsZWRDZWxsV2lkdGgsIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTtcbiAgICB9O1xuICAgIEJhc2VSZW5kZXJMYXllci5wcm90b3R5cGUuZmlsbExlZnRMaW5lQXRDZWxsID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgICAgdGhpcy5fY3R4LmZpbGxSZWN0KHggKiB0aGlzLl9zY2FsZWRDZWxsV2lkdGgsIHkgKiB0aGlzLl9zY2FsZWRDZWxsSGVpZ2h0LCB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbywgdGhpcy5fc2NhbGVkQ2VsbEhlaWdodCk7XG4gICAgfTtcbiAgICBCYXNlUmVuZGVyTGF5ZXIucHJvdG90eXBlLnN0cm9rZVJlY3RBdENlbGwgPSBmdW5jdGlvbiAoeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuICAgICAgICB0aGlzLl9jdHgubGluZVdpZHRoID0gd2luZG93LmRldmljZVBpeGVsUmF0aW87XG4gICAgICAgIHRoaXMuX2N0eC5zdHJva2VSZWN0KHggKiB0aGlzLl9zY2FsZWRDZWxsV2lkdGggKyB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyAvIDIsIHkgKiB0aGlzLl9zY2FsZWRDZWxsSGVpZ2h0ICsgKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIC8gMiksIHdpZHRoICogdGhpcy5fc2NhbGVkQ2VsbFdpZHRoIC0gd2luZG93LmRldmljZVBpeGVsUmF0aW8sIChoZWlnaHQgKiB0aGlzLl9zY2FsZWRDZWxsSGVpZ2h0KSAtIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTtcbiAgICB9O1xuICAgIEJhc2VSZW5kZXJMYXllci5wcm90b3R5cGUuY2xlYXJBbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9hbHBoYSkge1xuICAgICAgICAgICAgdGhpcy5fY3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLl9jYW52YXMud2lkdGgsIHRoaXMuX2NhbnZhcy5oZWlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fY3R4LmZpbGxTdHlsZSA9IHRoaXMuX2NvbG9ycy5iYWNrZ3JvdW5kLmNzcztcbiAgICAgICAgICAgIHRoaXMuX2N0eC5maWxsUmVjdCgwLCAwLCB0aGlzLl9jYW52YXMud2lkdGgsIHRoaXMuX2NhbnZhcy5oZWlnaHQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCYXNlUmVuZGVyTGF5ZXIucHJvdG90eXBlLmNsZWFyQ2VsbHMgPSBmdW5jdGlvbiAoeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuICAgICAgICBpZiAodGhpcy5fYWxwaGEpIHtcbiAgICAgICAgICAgIHRoaXMuX2N0eC5jbGVhclJlY3QoeCAqIHRoaXMuX3NjYWxlZENlbGxXaWR0aCwgeSAqIHRoaXMuX3NjYWxlZENlbGxIZWlnaHQsIHdpZHRoICogdGhpcy5fc2NhbGVkQ2VsbFdpZHRoLCBoZWlnaHQgKiB0aGlzLl9zY2FsZWRDZWxsSGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2N0eC5maWxsU3R5bGUgPSB0aGlzLl9jb2xvcnMuYmFja2dyb3VuZC5jc3M7XG4gICAgICAgICAgICB0aGlzLl9jdHguZmlsbFJlY3QoeCAqIHRoaXMuX3NjYWxlZENlbGxXaWR0aCwgeSAqIHRoaXMuX3NjYWxlZENlbGxIZWlnaHQsIHdpZHRoICogdGhpcy5fc2NhbGVkQ2VsbFdpZHRoLCBoZWlnaHQgKiB0aGlzLl9zY2FsZWRDZWxsSGVpZ2h0KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQmFzZVJlbmRlckxheWVyLnByb3RvdHlwZS5maWxsQ2hhclRydWVDb2xvciA9IGZ1bmN0aW9uICh0ZXJtaW5hbCwgY2hhckRhdGEsIHgsIHkpIHtcbiAgICAgICAgdGhpcy5fY3R4LmZvbnQgPSB0aGlzLl9nZXRGb250KHRlcm1pbmFsLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICB0aGlzLl9jdHgudGV4dEJhc2VsaW5lID0gJ3RvcCc7XG4gICAgICAgIHRoaXMuX2NsaXBSb3codGVybWluYWwsIHkpO1xuICAgICAgICB0aGlzLl9jdHguZmlsbFRleHQoY2hhckRhdGFbQnVmZmVyXzEuQ0hBUl9EQVRBX0NIQVJfSU5ERVhdLCB4ICogdGhpcy5fc2NhbGVkQ2VsbFdpZHRoICsgdGhpcy5fc2NhbGVkQ2hhckxlZnQsIHkgKiB0aGlzLl9zY2FsZWRDZWxsSGVpZ2h0ICsgdGhpcy5fc2NhbGVkQ2hhclRvcCk7XG4gICAgfTtcbiAgICBCYXNlUmVuZGVyTGF5ZXIucHJvdG90eXBlLmRyYXdDaGFycyA9IGZ1bmN0aW9uICh0ZXJtaW5hbCwgY2hhcnMsIGNvZGUsIHdpZHRoLCB4LCB5LCBmZywgYmcsIGJvbGQsIGRpbSwgaXRhbGljKSB7XG4gICAgICAgIHZhciBkcmF3SW5CcmlnaHRDb2xvciA9IHRlcm1pbmFsLm9wdGlvbnMuZHJhd0JvbGRUZXh0SW5CcmlnaHRDb2xvcnMgJiYgYm9sZCAmJiBmZyA8IDggJiYgZmcgIT09IFR5cGVzXzEuSU5WRVJURURfREVGQVVMVF9DT0xPUjtcbiAgICAgICAgZmcgKz0gZHJhd0luQnJpZ2h0Q29sb3IgPyA4IDogMDtcbiAgICAgICAgdGhpcy5fY3VycmVudEdseXBoSWRlbnRpZmllci5jaGFycyA9IGNoYXJzO1xuICAgICAgICB0aGlzLl9jdXJyZW50R2x5cGhJZGVudGlmaWVyLmNvZGUgPSBjb2RlO1xuICAgICAgICB0aGlzLl9jdXJyZW50R2x5cGhJZGVudGlmaWVyLmJnID0gYmc7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRHbHlwaElkZW50aWZpZXIuZmcgPSBmZztcbiAgICAgICAgdGhpcy5fY3VycmVudEdseXBoSWRlbnRpZmllci5ib2xkID0gYm9sZCAmJiB0ZXJtaW5hbC5vcHRpb25zLmVuYWJsZUJvbGQ7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRHbHlwaElkZW50aWZpZXIuZGltID0gZGltO1xuICAgICAgICB0aGlzLl9jdXJyZW50R2x5cGhJZGVudGlmaWVyLml0YWxpYyA9IGl0YWxpYztcbiAgICAgICAgdmFyIGF0bGFzRGlkRHJhdyA9IHRoaXMuX2NoYXJBdGxhcyAmJiB0aGlzLl9jaGFyQXRsYXMuZHJhdyh0aGlzLl9jdHgsIHRoaXMuX2N1cnJlbnRHbHlwaElkZW50aWZpZXIsIHggKiB0aGlzLl9zY2FsZWRDZWxsV2lkdGggKyB0aGlzLl9zY2FsZWRDaGFyTGVmdCwgeSAqIHRoaXMuX3NjYWxlZENlbGxIZWlnaHQgKyB0aGlzLl9zY2FsZWRDaGFyVG9wKTtcbiAgICAgICAgaWYgKCFhdGxhc0RpZERyYXcpIHtcbiAgICAgICAgICAgIHRoaXMuX2RyYXdVbmNhY2hlZENoYXJzKHRlcm1pbmFsLCBjaGFycywgd2lkdGgsIGZnLCB4LCB5LCBib2xkICYmIHRlcm1pbmFsLm9wdGlvbnMuZW5hYmxlQm9sZCwgZGltLCBpdGFsaWMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCYXNlUmVuZGVyTGF5ZXIucHJvdG90eXBlLl9kcmF3VW5jYWNoZWRDaGFycyA9IGZ1bmN0aW9uICh0ZXJtaW5hbCwgY2hhcnMsIHdpZHRoLCBmZywgeCwgeSwgYm9sZCwgZGltLCBpdGFsaWMpIHtcbiAgICAgICAgdGhpcy5fY3R4LnNhdmUoKTtcbiAgICAgICAgdGhpcy5fY3R4LmZvbnQgPSB0aGlzLl9nZXRGb250KHRlcm1pbmFsLCBib2xkLCBpdGFsaWMpO1xuICAgICAgICB0aGlzLl9jdHgudGV4dEJhc2VsaW5lID0gJ3RvcCc7XG4gICAgICAgIGlmIChmZyA9PT0gVHlwZXNfMS5JTlZFUlRFRF9ERUZBVUxUX0NPTE9SKSB7XG4gICAgICAgICAgICB0aGlzLl9jdHguZmlsbFN0eWxlID0gdGhpcy5fY29sb3JzLmJhY2tncm91bmQuY3NzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKENoYXJBdGxhc1V0aWxzXzEuaXMyNTZDb2xvcihmZykpIHtcbiAgICAgICAgICAgIHRoaXMuX2N0eC5maWxsU3R5bGUgPSB0aGlzLl9jb2xvcnMuYW5zaVtmZ10uY3NzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fY3R4LmZpbGxTdHlsZSA9IHRoaXMuX2NvbG9ycy5mb3JlZ3JvdW5kLmNzcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jbGlwUm93KHRlcm1pbmFsLCB5KTtcbiAgICAgICAgaWYgKGRpbSkge1xuICAgICAgICAgICAgdGhpcy5fY3R4Lmdsb2JhbEFscGhhID0gVHlwZXNfMS5ESU1fT1BBQ0lUWTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jdHguZmlsbFRleHQoY2hhcnMsIHggKiB0aGlzLl9zY2FsZWRDZWxsV2lkdGggKyB0aGlzLl9zY2FsZWRDaGFyTGVmdCwgeSAqIHRoaXMuX3NjYWxlZENlbGxIZWlnaHQgKyB0aGlzLl9zY2FsZWRDaGFyVG9wKTtcbiAgICAgICAgdGhpcy5fY3R4LnJlc3RvcmUoKTtcbiAgICB9O1xuICAgIEJhc2VSZW5kZXJMYXllci5wcm90b3R5cGUuX2NsaXBSb3cgPSBmdW5jdGlvbiAodGVybWluYWwsIHkpIHtcbiAgICAgICAgdGhpcy5fY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICB0aGlzLl9jdHgucmVjdCgwLCB5ICogdGhpcy5fc2NhbGVkQ2VsbEhlaWdodCwgdGVybWluYWwuY29scyAqIHRoaXMuX3NjYWxlZENlbGxXaWR0aCwgdGhpcy5fc2NhbGVkQ2VsbEhlaWdodCk7XG4gICAgICAgIHRoaXMuX2N0eC5jbGlwKCk7XG4gICAgfTtcbiAgICBCYXNlUmVuZGVyTGF5ZXIucHJvdG90eXBlLl9nZXRGb250ID0gZnVuY3Rpb24gKHRlcm1pbmFsLCBpc0JvbGQsIGlzSXRhbGljKSB7XG4gICAgICAgIHZhciBmb250V2VpZ2h0ID0gaXNCb2xkID8gdGVybWluYWwub3B0aW9ucy5mb250V2VpZ2h0Qm9sZCA6IHRlcm1pbmFsLm9wdGlvbnMuZm9udFdlaWdodDtcbiAgICAgICAgdmFyIGZvbnRTdHlsZSA9IGlzSXRhbGljID8gJ2l0YWxpYycgOiAnJztcbiAgICAgICAgcmV0dXJuIGZvbnRTdHlsZSArIFwiIFwiICsgZm9udFdlaWdodCArIFwiIFwiICsgdGVybWluYWwub3B0aW9ucy5mb250U2l6ZSAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvICsgXCJweCBcIiArIHRlcm1pbmFsLm9wdGlvbnMuZm9udEZhbWlseTtcbiAgICB9O1xuICAgIHJldHVybiBCYXNlUmVuZGVyTGF5ZXI7XG59KCkpO1xuZXhwb3J0cy5CYXNlUmVuZGVyTGF5ZXIgPSBCYXNlUmVuZGVyTGF5ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1CYXNlUmVuZGVyTGF5ZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgREVGQVVMVF9GT1JFR1JPVU5EID0gZnJvbUhleCgnI2ZmZmZmZicpO1xudmFyIERFRkFVTFRfQkFDS0dST1VORCA9IGZyb21IZXgoJyMwMDAwMDAnKTtcbnZhciBERUZBVUxUX0NVUlNPUiA9IGZyb21IZXgoJyNmZmZmZmYnKTtcbnZhciBERUZBVUxUX0NVUlNPUl9BQ0NFTlQgPSBmcm9tSGV4KCcjMDAwMDAwJyk7XG52YXIgREVGQVVMVF9TRUxFQ1RJT04gPSB7XG4gICAgY3NzOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpJyxcbiAgICByZ2JhOiAweEZGRkZGRjc3XG59O1xuZXhwb3J0cy5ERUZBVUxUX0FOU0lfQ09MT1JTID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY29sb3JzID0gW1xuICAgICAgICBmcm9tSGV4KCcjMmUzNDM2JyksXG4gICAgICAgIGZyb21IZXgoJyNjYzAwMDAnKSxcbiAgICAgICAgZnJvbUhleCgnIzRlOWEwNicpLFxuICAgICAgICBmcm9tSGV4KCcjYzRhMDAwJyksXG4gICAgICAgIGZyb21IZXgoJyMzNDY1YTQnKSxcbiAgICAgICAgZnJvbUhleCgnIzc1NTA3YicpLFxuICAgICAgICBmcm9tSGV4KCcjMDY5ODlhJyksXG4gICAgICAgIGZyb21IZXgoJyNkM2Q3Y2YnKSxcbiAgICAgICAgZnJvbUhleCgnIzU1NTc1MycpLFxuICAgICAgICBmcm9tSGV4KCcjZWYyOTI5JyksXG4gICAgICAgIGZyb21IZXgoJyM4YWUyMzQnKSxcbiAgICAgICAgZnJvbUhleCgnI2ZjZTk0ZicpLFxuICAgICAgICBmcm9tSGV4KCcjNzI5ZmNmJyksXG4gICAgICAgIGZyb21IZXgoJyNhZDdmYTgnKSxcbiAgICAgICAgZnJvbUhleCgnIzM0ZTJlMicpLFxuICAgICAgICBmcm9tSGV4KCcjZWVlZWVjJylcbiAgICBdO1xuICAgIHZhciB2ID0gWzB4MDAsIDB4NWYsIDB4ODcsIDB4YWYsIDB4ZDcsIDB4ZmZdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjE2OyBpKyspIHtcbiAgICAgICAgdmFyIHIgPSB2WyhpIC8gMzYpICUgNiB8IDBdO1xuICAgICAgICB2YXIgZyA9IHZbKGkgLyA2KSAlIDYgfCAwXTtcbiAgICAgICAgdmFyIGIgPSB2W2kgJSA2XTtcbiAgICAgICAgY29sb3JzLnB1c2goe1xuICAgICAgICAgICAgY3NzOiBcIiNcIiArIHRvUGFkZGVkSGV4KHIpICsgdG9QYWRkZWRIZXgoZykgKyB0b1BhZGRlZEhleChiKSxcbiAgICAgICAgICAgIHJnYmE6ICgociA8PCAyNCkgfCAoZyA8PCAxNikgfCAoYiA8PCA4KSB8IDB4RkYpID4+PiAwXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI0OyBpKyspIHtcbiAgICAgICAgdmFyIGMgPSA4ICsgaSAqIDEwO1xuICAgICAgICB2YXIgY2ggPSB0b1BhZGRlZEhleChjKTtcbiAgICAgICAgY29sb3JzLnB1c2goe1xuICAgICAgICAgICAgY3NzOiBcIiNcIiArIGNoICsgY2ggKyBjaCxcbiAgICAgICAgICAgIHJnYmE6ICgoYyA8PCAyNCkgfCAoYyA8PCAxNikgfCAoYyA8PCA4KSB8IDB4RkYpID4+PiAwXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gY29sb3JzO1xufSkoKTtcbmZ1bmN0aW9uIGZyb21IZXgoY3NzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY3NzOiBjc3MsXG4gICAgICAgIHJnYmE6IHBhcnNlSW50KGNzcy5zbGljZSgxKSwgMTYpIDw8IDggfCAweEZGXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRvUGFkZGVkSGV4KGMpIHtcbiAgICB2YXIgcyA9IGMudG9TdHJpbmcoMTYpO1xuICAgIHJldHVybiBzLmxlbmd0aCA8IDIgPyAnMCcgKyBzIDogcztcbn1cbnZhciBDb2xvck1hbmFnZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbG9yTWFuYWdlcihkb2N1bWVudCwgYWxsb3dUcmFuc3BhcmVuY3kpIHtcbiAgICAgICAgdGhpcy5hbGxvd1RyYW5zcGFyZW5jeSA9IGFsbG93VHJhbnNwYXJlbmN5O1xuICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgIGNhbnZhcy53aWR0aCA9IDE7XG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSAxO1xuICAgICAgICB0aGlzLl9jdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgdGhpcy5fY3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdjb3B5JztcbiAgICAgICAgdGhpcy5fbGl0bXVzQ29sb3IgPSB0aGlzLl9jdHguY3JlYXRlTGluZWFyR3JhZGllbnQoMCwgMCwgMSwgMSk7XG4gICAgICAgIHRoaXMuY29sb3JzID0ge1xuICAgICAgICAgICAgZm9yZWdyb3VuZDogREVGQVVMVF9GT1JFR1JPVU5ELFxuICAgICAgICAgICAgYmFja2dyb3VuZDogREVGQVVMVF9CQUNLR1JPVU5ELFxuICAgICAgICAgICAgY3Vyc29yOiBERUZBVUxUX0NVUlNPUixcbiAgICAgICAgICAgIGN1cnNvckFjY2VudDogREVGQVVMVF9DVVJTT1JfQUNDRU5ULFxuICAgICAgICAgICAgc2VsZWN0aW9uOiBERUZBVUxUX1NFTEVDVElPTixcbiAgICAgICAgICAgIGFuc2k6IGV4cG9ydHMuREVGQVVMVF9BTlNJX0NPTE9SUy5zbGljZSgpXG4gICAgICAgIH07XG4gICAgfVxuICAgIENvbG9yTWFuYWdlci5wcm90b3R5cGUuc2V0VGhlbWUgPSBmdW5jdGlvbiAodGhlbWUpIHtcbiAgICAgICAgdGhpcy5jb2xvcnMuZm9yZWdyb3VuZCA9IHRoaXMuX3BhcnNlQ29sb3IodGhlbWUuZm9yZWdyb3VuZCwgREVGQVVMVF9GT1JFR1JPVU5EKTtcbiAgICAgICAgdGhpcy5jb2xvcnMuYmFja2dyb3VuZCA9IHRoaXMuX3BhcnNlQ29sb3IodGhlbWUuYmFja2dyb3VuZCwgREVGQVVMVF9CQUNLR1JPVU5EKTtcbiAgICAgICAgdGhpcy5jb2xvcnMuY3Vyc29yID0gdGhpcy5fcGFyc2VDb2xvcih0aGVtZS5jdXJzb3IsIERFRkFVTFRfQ1VSU09SLCB0cnVlKTtcbiAgICAgICAgdGhpcy5jb2xvcnMuY3Vyc29yQWNjZW50ID0gdGhpcy5fcGFyc2VDb2xvcih0aGVtZS5jdXJzb3JBY2NlbnQsIERFRkFVTFRfQ1VSU09SX0FDQ0VOVCwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuY29sb3JzLnNlbGVjdGlvbiA9IHRoaXMuX3BhcnNlQ29sb3IodGhlbWUuc2VsZWN0aW9uLCBERUZBVUxUX1NFTEVDVElPTiwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuY29sb3JzLmFuc2lbMF0gPSB0aGlzLl9wYXJzZUNvbG9yKHRoZW1lLmJsYWNrLCBleHBvcnRzLkRFRkFVTFRfQU5TSV9DT0xPUlNbMF0pO1xuICAgICAgICB0aGlzLmNvbG9ycy5hbnNpWzFdID0gdGhpcy5fcGFyc2VDb2xvcih0aGVtZS5yZWQsIGV4cG9ydHMuREVGQVVMVF9BTlNJX0NPTE9SU1sxXSk7XG4gICAgICAgIHRoaXMuY29sb3JzLmFuc2lbMl0gPSB0aGlzLl9wYXJzZUNvbG9yKHRoZW1lLmdyZWVuLCBleHBvcnRzLkRFRkFVTFRfQU5TSV9DT0xPUlNbMl0pO1xuICAgICAgICB0aGlzLmNvbG9ycy5hbnNpWzNdID0gdGhpcy5fcGFyc2VDb2xvcih0aGVtZS55ZWxsb3csIGV4cG9ydHMuREVGQVVMVF9BTlNJX0NPTE9SU1szXSk7XG4gICAgICAgIHRoaXMuY29sb3JzLmFuc2lbNF0gPSB0aGlzLl9wYXJzZUNvbG9yKHRoZW1lLmJsdWUsIGV4cG9ydHMuREVGQVVMVF9BTlNJX0NPTE9SU1s0XSk7XG4gICAgICAgIHRoaXMuY29sb3JzLmFuc2lbNV0gPSB0aGlzLl9wYXJzZUNvbG9yKHRoZW1lLm1hZ2VudGEsIGV4cG9ydHMuREVGQVVMVF9BTlNJX0NPTE9SU1s1XSk7XG4gICAgICAgIHRoaXMuY29sb3JzLmFuc2lbNl0gPSB0aGlzLl9wYXJzZUNvbG9yKHRoZW1lLmN5YW4sIGV4cG9ydHMuREVGQVVMVF9BTlNJX0NPTE9SU1s2XSk7XG4gICAgICAgIHRoaXMuY29sb3JzLmFuc2lbN10gPSB0aGlzLl9wYXJzZUNvbG9yKHRoZW1lLndoaXRlLCBleHBvcnRzLkRFRkFVTFRfQU5TSV9DT0xPUlNbN10pO1xuICAgICAgICB0aGlzLmNvbG9ycy5hbnNpWzhdID0gdGhpcy5fcGFyc2VDb2xvcih0aGVtZS5icmlnaHRCbGFjaywgZXhwb3J0cy5ERUZBVUxUX0FOU0lfQ09MT1JTWzhdKTtcbiAgICAgICAgdGhpcy5jb2xvcnMuYW5zaVs5XSA9IHRoaXMuX3BhcnNlQ29sb3IodGhlbWUuYnJpZ2h0UmVkLCBleHBvcnRzLkRFRkFVTFRfQU5TSV9DT0xPUlNbOV0pO1xuICAgICAgICB0aGlzLmNvbG9ycy5hbnNpWzEwXSA9IHRoaXMuX3BhcnNlQ29sb3IodGhlbWUuYnJpZ2h0R3JlZW4sIGV4cG9ydHMuREVGQVVMVF9BTlNJX0NPTE9SU1sxMF0pO1xuICAgICAgICB0aGlzLmNvbG9ycy5hbnNpWzExXSA9IHRoaXMuX3BhcnNlQ29sb3IodGhlbWUuYnJpZ2h0WWVsbG93LCBleHBvcnRzLkRFRkFVTFRfQU5TSV9DT0xPUlNbMTFdKTtcbiAgICAgICAgdGhpcy5jb2xvcnMuYW5zaVsxMl0gPSB0aGlzLl9wYXJzZUNvbG9yKHRoZW1lLmJyaWdodEJsdWUsIGV4cG9ydHMuREVGQVVMVF9BTlNJX0NPTE9SU1sxMl0pO1xuICAgICAgICB0aGlzLmNvbG9ycy5hbnNpWzEzXSA9IHRoaXMuX3BhcnNlQ29sb3IodGhlbWUuYnJpZ2h0TWFnZW50YSwgZXhwb3J0cy5ERUZBVUxUX0FOU0lfQ09MT1JTWzEzXSk7XG4gICAgICAgIHRoaXMuY29sb3JzLmFuc2lbMTRdID0gdGhpcy5fcGFyc2VDb2xvcih0aGVtZS5icmlnaHRDeWFuLCBleHBvcnRzLkRFRkFVTFRfQU5TSV9DT0xPUlNbMTRdKTtcbiAgICAgICAgdGhpcy5jb2xvcnMuYW5zaVsxNV0gPSB0aGlzLl9wYXJzZUNvbG9yKHRoZW1lLmJyaWdodFdoaXRlLCBleHBvcnRzLkRFRkFVTFRfQU5TSV9DT0xPUlNbMTVdKTtcbiAgICB9O1xuICAgIENvbG9yTWFuYWdlci5wcm90b3R5cGUuX3BhcnNlQ29sb3IgPSBmdW5jdGlvbiAoY3NzLCBmYWxsYmFjaywgYWxsb3dUcmFuc3BhcmVuY3kpIHtcbiAgICAgICAgaWYgKGFsbG93VHJhbnNwYXJlbmN5ID09PSB2b2lkIDApIHsgYWxsb3dUcmFuc3BhcmVuY3kgPSB0aGlzLmFsbG93VHJhbnNwYXJlbmN5OyB9XG4gICAgICAgIGlmICghY3NzKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsbGJhY2s7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY3R4LmZpbGxTdHlsZSA9IHRoaXMuX2xpdG11c0NvbG9yO1xuICAgICAgICB0aGlzLl9jdHguZmlsbFN0eWxlID0gY3NzO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuX2N0eC5maWxsU3R5bGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJDb2xvcjogXCIgKyBjc3MgKyBcIiBpcyBpbnZhbGlkIHVzaW5nIGZhbGxiYWNrIFwiICsgZmFsbGJhY2suY3NzKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxsYmFjaztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jdHguZmlsbFJlY3QoMCwgMCwgMSwgMSk7XG4gICAgICAgIHZhciBkYXRhID0gdGhpcy5fY3R4LmdldEltYWdlRGF0YSgwLCAwLCAxLCAxKS5kYXRhO1xuICAgICAgICBpZiAoIWFsbG93VHJhbnNwYXJlbmN5ICYmIGRhdGFbM10gIT09IDB4RkYpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkNvbG9yOiBcIiArIGNzcyArIFwiIGlzIHVzaW5nIHRyYW5zcGFyZW5jeSwgYnV0IGFsbG93VHJhbnNwYXJlbmN5IGlzIGZhbHNlLiBcIiArXG4gICAgICAgICAgICAgICAgKFwiVXNpbmcgZmFsbGJhY2sgXCIgKyBmYWxsYmFjay5jc3MgKyBcIi5cIikpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbGxiYWNrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjc3M6IGNzcyxcbiAgICAgICAgICAgIHJnYmE6IChkYXRhWzBdIDw8IDI0IHwgZGF0YVsxXSA8PCAxNiB8IGRhdGFbMl0gPDwgOCB8IGRhdGFbM10pID4+PiAwXG4gICAgICAgIH07XG4gICAgfTtcbiAgICByZXR1cm4gQ29sb3JNYW5hZ2VyO1xufSgpKTtcbmV4cG9ydHMuQ29sb3JNYW5hZ2VyID0gQ29sb3JNYW5hZ2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29sb3JNYW5hZ2VyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEJhc2VDaGFyQXRsYXMgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJhc2VDaGFyQXRsYXMoKSB7XG4gICAgICAgIHRoaXMuX2RpZFdhcm1VcCA9IGZhbHNlO1xuICAgIH1cbiAgICBCYXNlQ2hhckF0bGFzLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIEJhc2VDaGFyQXRsYXMucHJvdG90eXBlLndhcm1VcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9kaWRXYXJtVXApIHtcbiAgICAgICAgICAgIHRoaXMuX2RvV2FybVVwKCk7XG4gICAgICAgICAgICB0aGlzLl9kaWRXYXJtVXAgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCYXNlQ2hhckF0bGFzLnByb3RvdHlwZS5fZG9XYXJtVXAgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgQmFzZUNoYXJBdGxhcy5wcm90b3R5cGUuYmVnaW5GcmFtZSA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICByZXR1cm4gQmFzZUNoYXJBdGxhcztcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBCYXNlQ2hhckF0bGFzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QmFzZUNoYXJBdGxhcy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBSZW5kZXJEZWJvdW5jZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlbmRlckRlYm91bmNlcihfdGVybWluYWwsIF9jYWxsYmFjaykge1xuICAgICAgICB0aGlzLl90ZXJtaW5hbCA9IF90ZXJtaW5hbDtcbiAgICAgICAgdGhpcy5fY2FsbGJhY2sgPSBfY2FsbGJhY2s7XG4gICAgICAgIHRoaXMuX2FuaW1hdGlvbkZyYW1lID0gbnVsbDtcbiAgICB9XG4gICAgUmVuZGVyRGVib3VuY2VyLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fYW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgICAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLl9hbmltYXRpb25GcmFtZSk7XG4gICAgICAgICAgICB0aGlzLl9hbmltYXRpb25GcmFtZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlbmRlckRlYm91bmNlci5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uIChyb3dTdGFydCwgcm93RW5kKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJvd1N0YXJ0ID0gcm93U3RhcnQgIT09IG51bGwgJiYgcm93U3RhcnQgIT09IHVuZGVmaW5lZCA/IHJvd1N0YXJ0IDogMDtcbiAgICAgICAgcm93RW5kID0gcm93RW5kICE9PSBudWxsICYmIHJvd0VuZCAhPT0gdW5kZWZpbmVkID8gcm93RW5kIDogdGhpcy5fdGVybWluYWwucm93cyAtIDE7XG4gICAgICAgIHZhciBpc1Jvd1N0YXJ0U2V0ID0gdGhpcy5fcm93U3RhcnQgIT09IHVuZGVmaW5lZCAmJiB0aGlzLl9yb3dTdGFydCAhPT0gbnVsbDtcbiAgICAgICAgdmFyIGlzUm93RW5kU2V0ID0gdGhpcy5fcm93RW5kICE9PSB1bmRlZmluZWQgJiYgdGhpcy5fcm93RW5kICE9PSBudWxsO1xuICAgICAgICB0aGlzLl9yb3dTdGFydCA9IGlzUm93U3RhcnRTZXQgPyBNYXRoLm1pbih0aGlzLl9yb3dTdGFydCwgcm93U3RhcnQpIDogcm93U3RhcnQ7XG4gICAgICAgIHRoaXMuX3Jvd0VuZCA9IGlzUm93RW5kU2V0ID8gTWF0aC5tYXgodGhpcy5fcm93RW5kLCByb3dFbmQpIDogcm93RW5kO1xuICAgICAgICBpZiAodGhpcy5fYW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9hbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX2lubmVyUmVmcmVzaCgpOyB9KTtcbiAgICB9O1xuICAgIFJlbmRlckRlYm91bmNlci5wcm90b3R5cGUuX2lubmVyUmVmcmVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fcm93U3RhcnQgPSBNYXRoLm1heCh0aGlzLl9yb3dTdGFydCwgMCk7XG4gICAgICAgIHRoaXMuX3Jvd0VuZCA9IE1hdGgubWluKHRoaXMuX3Jvd0VuZCwgdGhpcy5fdGVybWluYWwucm93cyAtIDEpO1xuICAgICAgICB0aGlzLl9jYWxsYmFjayh0aGlzLl9yb3dTdGFydCwgdGhpcy5fcm93RW5kKTtcbiAgICAgICAgdGhpcy5fcm93U3RhcnQgPSBudWxsO1xuICAgICAgICB0aGlzLl9yb3dFbmQgPSBudWxsO1xuICAgICAgICB0aGlzLl9hbmltYXRpb25GcmFtZSA9IG51bGw7XG4gICAgfTtcbiAgICByZXR1cm4gUmVuZGVyRGVib3VuY2VyO1xufSgpKTtcbmV4cG9ydHMuUmVuZGVyRGVib3VuY2VyID0gUmVuZGVyRGVib3VuY2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVuZGVyRGVib3VuY2VyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ibGFua0xpbmUgPSAnQmxhbmsgbGluZSc7XG5leHBvcnRzLnByb21wdExhYmVsID0gJ1Rlcm1pbmFsIGlucHV0JztcbmV4cG9ydHMudG9vTXVjaE91dHB1dCA9ICdUb28gbXVjaCBvdXRwdXQgdG8gYW5ub3VuY2UsIG5hdmlnYXRlIHRvIHJvd3MgbWFudWFsbHkgdG8gcmVhZCc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdHJpbmdzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFRlcm1pbmFsXzEgPSByZXF1aXJlKFwiLi4vVGVybWluYWxcIik7XG52YXIgU3RyaW5ncyA9IHJlcXVpcmUoXCIuLi9TdHJpbmdzXCIpO1xudmFyIFRlcm1pbmFsID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUZXJtaW5hbChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuX2NvcmUgPSBuZXcgVGVybWluYWxfMS5UZXJtaW5hbChvcHRpb25zKTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRlcm1pbmFsLnByb3RvdHlwZSwgXCJlbGVtZW50XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9jb3JlLmVsZW1lbnQ7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUZXJtaW5hbC5wcm90b3R5cGUsIFwidGV4dGFyZWFcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2NvcmUudGV4dGFyZWE7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUZXJtaW5hbC5wcm90b3R5cGUsIFwicm93c1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fY29yZS5yb3dzOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVGVybWluYWwucHJvdG90eXBlLCBcImNvbHNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2NvcmUuY29sczsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRlcm1pbmFsLnByb3RvdHlwZSwgXCJtYXJrZXJzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9jb3JlLm1hcmtlcnM7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5ibHVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9jb3JlLmJsdXIoKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5mb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fY29yZS5mb2N1cygpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX2NvcmUub24odHlwZSwgbGlzdGVuZXIpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uICh0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9jb3JlLm9mZih0eXBlLCBsaXN0ZW5lcik7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uICh0eXBlLCBkYXRhKSB7XG4gICAgICAgIHRoaXMuX2NvcmUuZW1pdCh0eXBlLCBkYXRhKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5hZGREaXNwb3NhYmxlTGlzdGVuZXIgPSBmdW5jdGlvbiAodHlwZSwgaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29yZS5hZGREaXNwb3NhYmxlTGlzdGVuZXIodHlwZSwgaGFuZGxlcik7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24gKGNvbHVtbnMsIHJvd3MpIHtcbiAgICAgICAgdGhpcy5fY29yZS5yZXNpemUoY29sdW1ucywgcm93cyk7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUud3JpdGVsbiA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHRoaXMuX2NvcmUud3JpdGVsbihkYXRhKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICB0aGlzLl9jb3JlLm9wZW4ocGFyZW50KTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5hdHRhY2hDdXN0b21LZXlFdmVudEhhbmRsZXIgPSBmdW5jdGlvbiAoY3VzdG9tS2V5RXZlbnRIYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuX2NvcmUuYXR0YWNoQ3VzdG9tS2V5RXZlbnRIYW5kbGVyKGN1c3RvbUtleUV2ZW50SGFuZGxlcik7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUucmVnaXN0ZXJMaW5rTWF0Y2hlciA9IGZ1bmN0aW9uIChyZWdleCwgaGFuZGxlciwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29yZS5yZWdpc3RlckxpbmtNYXRjaGVyKHJlZ2V4LCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5kZXJlZ2lzdGVyTGlua01hdGNoZXIgPSBmdW5jdGlvbiAobWF0Y2hlcklkKSB7XG4gICAgICAgIHRoaXMuX2NvcmUuZGVyZWdpc3RlckxpbmtNYXRjaGVyKG1hdGNoZXJJZCk7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUucmVnaXN0ZXJDaGFyYWN0ZXJKb2luZXIgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29yZS5yZWdpc3RlckNoYXJhY3RlckpvaW5lcihoYW5kbGVyKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5kZXJlZ2lzdGVyQ2hhcmFjdGVySm9pbmVyID0gZnVuY3Rpb24gKGpvaW5lcklkKSB7XG4gICAgICAgIHRoaXMuX2NvcmUuZGVyZWdpc3RlckNoYXJhY3RlckpvaW5lcihqb2luZXJJZCk7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuYWRkTWFya2VyID0gZnVuY3Rpb24gKGN1cnNvcllPZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvcmUuYWRkTWFya2VyKGN1cnNvcllPZmZzZXQpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLmhhc1NlbGVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvcmUuaGFzU2VsZWN0aW9uKCk7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuZ2V0U2VsZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29yZS5nZXRTZWxlY3Rpb24oKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5jbGVhclNlbGVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fY29yZS5jbGVhclNlbGVjdGlvbigpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLnNlbGVjdEFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fY29yZS5zZWxlY3RBbGwoKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5zZWxlY3RMaW5lcyA9IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgICAgIHRoaXMuX2NvcmUuc2VsZWN0TGluZXMoc3RhcnQsIGVuZCk7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fY29yZS5kaXNwb3NlKCk7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fY29yZS5kZXN0cm95KCk7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuc2Nyb2xsTGluZXMgPSBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgICAgIHRoaXMuX2NvcmUuc2Nyb2xsTGluZXMoYW1vdW50KTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5zY3JvbGxQYWdlcyA9IGZ1bmN0aW9uIChwYWdlQ291bnQpIHtcbiAgICAgICAgdGhpcy5fY29yZS5zY3JvbGxQYWdlcyhwYWdlQ291bnQpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLnNjcm9sbFRvVG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9jb3JlLnNjcm9sbFRvVG9wKCk7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuc2Nyb2xsVG9Cb3R0b20gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2NvcmUuc2Nyb2xsVG9Cb3R0b20oKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5zY3JvbGxUb0xpbmUgPSBmdW5jdGlvbiAobGluZSkge1xuICAgICAgICB0aGlzLl9jb3JlLnNjcm9sbFRvTGluZShsaW5lKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fY29yZS5jbGVhcigpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdGhpcy5fY29yZS53cml0ZShkYXRhKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5nZXRPcHRpb24gPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb3JlLmdldE9wdGlvbihrZXkpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLnNldE9wdGlvbiA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2NvcmUuc2V0T3B0aW9uKGtleSwgdmFsdWUpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICAgICAgICB0aGlzLl9jb3JlLnJlZnJlc2goc3RhcnQsIGVuZCk7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2NvcmUucmVzZXQoKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLmFwcGx5QWRkb24gPSBmdW5jdGlvbiAoYWRkb24pIHtcbiAgICAgICAgYWRkb24uYXBwbHkoVGVybWluYWwpO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRlcm1pbmFsLCBcInN0cmluZ3NcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBTdHJpbmdzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gVGVybWluYWw7XG59KCkpO1xuZXhwb3J0cy5UZXJtaW5hbCA9IFRlcm1pbmFsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VGVybWluYWwuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgVHlwZWRBcnJheVV0aWxzXzEgPSByZXF1aXJlKFwiLi9jb21tb24vVHlwZWRBcnJheVV0aWxzXCIpO1xuZXhwb3J0cy53Y3dpZHRoID0gKGZ1bmN0aW9uIChvcHRzKSB7XG4gICAgdmFyIENPTUJJTklOR19CTVAgPSBbXG4gICAgICAgIFsweDAzMDAsIDB4MDM2Rl0sIFsweDA0ODMsIDB4MDQ4Nl0sIFsweDA0ODgsIDB4MDQ4OV0sXG4gICAgICAgIFsweDA1OTEsIDB4MDVCRF0sIFsweDA1QkYsIDB4MDVCRl0sIFsweDA1QzEsIDB4MDVDMl0sXG4gICAgICAgIFsweDA1QzQsIDB4MDVDNV0sIFsweDA1QzcsIDB4MDVDN10sIFsweDA2MDAsIDB4MDYwM10sXG4gICAgICAgIFsweDA2MTAsIDB4MDYxNV0sIFsweDA2NEIsIDB4MDY1RV0sIFsweDA2NzAsIDB4MDY3MF0sXG4gICAgICAgIFsweDA2RDYsIDB4MDZFNF0sIFsweDA2RTcsIDB4MDZFOF0sIFsweDA2RUEsIDB4MDZFRF0sXG4gICAgICAgIFsweDA3MEYsIDB4MDcwRl0sIFsweDA3MTEsIDB4MDcxMV0sIFsweDA3MzAsIDB4MDc0QV0sXG4gICAgICAgIFsweDA3QTYsIDB4MDdCMF0sIFsweDA3RUIsIDB4MDdGM10sIFsweDA5MDEsIDB4MDkwMl0sXG4gICAgICAgIFsweDA5M0MsIDB4MDkzQ10sIFsweDA5NDEsIDB4MDk0OF0sIFsweDA5NEQsIDB4MDk0RF0sXG4gICAgICAgIFsweDA5NTEsIDB4MDk1NF0sIFsweDA5NjIsIDB4MDk2M10sIFsweDA5ODEsIDB4MDk4MV0sXG4gICAgICAgIFsweDA5QkMsIDB4MDlCQ10sIFsweDA5QzEsIDB4MDlDNF0sIFsweDA5Q0QsIDB4MDlDRF0sXG4gICAgICAgIFsweDA5RTIsIDB4MDlFM10sIFsweDBBMDEsIDB4MEEwMl0sIFsweDBBM0MsIDB4MEEzQ10sXG4gICAgICAgIFsweDBBNDEsIDB4MEE0Ml0sIFsweDBBNDcsIDB4MEE0OF0sIFsweDBBNEIsIDB4MEE0RF0sXG4gICAgICAgIFsweDBBNzAsIDB4MEE3MV0sIFsweDBBODEsIDB4MEE4Ml0sIFsweDBBQkMsIDB4MEFCQ10sXG4gICAgICAgIFsweDBBQzEsIDB4MEFDNV0sIFsweDBBQzcsIDB4MEFDOF0sIFsweDBBQ0QsIDB4MEFDRF0sXG4gICAgICAgIFsweDBBRTIsIDB4MEFFM10sIFsweDBCMDEsIDB4MEIwMV0sIFsweDBCM0MsIDB4MEIzQ10sXG4gICAgICAgIFsweDBCM0YsIDB4MEIzRl0sIFsweDBCNDEsIDB4MEI0M10sIFsweDBCNEQsIDB4MEI0RF0sXG4gICAgICAgIFsweDBCNTYsIDB4MEI1Nl0sIFsweDBCODIsIDB4MEI4Ml0sIFsweDBCQzAsIDB4MEJDMF0sXG4gICAgICAgIFsweDBCQ0QsIDB4MEJDRF0sIFsweDBDM0UsIDB4MEM0MF0sIFsweDBDNDYsIDB4MEM0OF0sXG4gICAgICAgIFsweDBDNEEsIDB4MEM0RF0sIFsweDBDNTUsIDB4MEM1Nl0sIFsweDBDQkMsIDB4MENCQ10sXG4gICAgICAgIFsweDBDQkYsIDB4MENCRl0sIFsweDBDQzYsIDB4MENDNl0sIFsweDBDQ0MsIDB4MENDRF0sXG4gICAgICAgIFsweDBDRTIsIDB4MENFM10sIFsweDBENDEsIDB4MEQ0M10sIFsweDBENEQsIDB4MEQ0RF0sXG4gICAgICAgIFsweDBEQ0EsIDB4MERDQV0sIFsweDBERDIsIDB4MERENF0sIFsweDBERDYsIDB4MERENl0sXG4gICAgICAgIFsweDBFMzEsIDB4MEUzMV0sIFsweDBFMzQsIDB4MEUzQV0sIFsweDBFNDcsIDB4MEU0RV0sXG4gICAgICAgIFsweDBFQjEsIDB4MEVCMV0sIFsweDBFQjQsIDB4MEVCOV0sIFsweDBFQkIsIDB4MEVCQ10sXG4gICAgICAgIFsweDBFQzgsIDB4MEVDRF0sIFsweDBGMTgsIDB4MEYxOV0sIFsweDBGMzUsIDB4MEYzNV0sXG4gICAgICAgIFsweDBGMzcsIDB4MEYzN10sIFsweDBGMzksIDB4MEYzOV0sIFsweDBGNzEsIDB4MEY3RV0sXG4gICAgICAgIFsweDBGODAsIDB4MEY4NF0sIFsweDBGODYsIDB4MEY4N10sIFsweDBGOTAsIDB4MEY5N10sXG4gICAgICAgIFsweDBGOTksIDB4MEZCQ10sIFsweDBGQzYsIDB4MEZDNl0sIFsweDEwMkQsIDB4MTAzMF0sXG4gICAgICAgIFsweDEwMzIsIDB4MTAzMl0sIFsweDEwMzYsIDB4MTAzN10sIFsweDEwMzksIDB4MTAzOV0sXG4gICAgICAgIFsweDEwNTgsIDB4MTA1OV0sIFsweDExNjAsIDB4MTFGRl0sIFsweDEzNUYsIDB4MTM1Rl0sXG4gICAgICAgIFsweDE3MTIsIDB4MTcxNF0sIFsweDE3MzIsIDB4MTczNF0sIFsweDE3NTIsIDB4MTc1M10sXG4gICAgICAgIFsweDE3NzIsIDB4MTc3M10sIFsweDE3QjQsIDB4MTdCNV0sIFsweDE3QjcsIDB4MTdCRF0sXG4gICAgICAgIFsweDE3QzYsIDB4MTdDNl0sIFsweDE3QzksIDB4MTdEM10sIFsweDE3REQsIDB4MTdERF0sXG4gICAgICAgIFsweDE4MEIsIDB4MTgwRF0sIFsweDE4QTksIDB4MThBOV0sIFsweDE5MjAsIDB4MTkyMl0sXG4gICAgICAgIFsweDE5MjcsIDB4MTkyOF0sIFsweDE5MzIsIDB4MTkzMl0sIFsweDE5MzksIDB4MTkzQl0sXG4gICAgICAgIFsweDFBMTcsIDB4MUExOF0sIFsweDFCMDAsIDB4MUIwM10sIFsweDFCMzQsIDB4MUIzNF0sXG4gICAgICAgIFsweDFCMzYsIDB4MUIzQV0sIFsweDFCM0MsIDB4MUIzQ10sIFsweDFCNDIsIDB4MUI0Ml0sXG4gICAgICAgIFsweDFCNkIsIDB4MUI3M10sIFsweDFEQzAsIDB4MURDQV0sIFsweDFERkUsIDB4MURGRl0sXG4gICAgICAgIFsweDIwMEIsIDB4MjAwRl0sIFsweDIwMkEsIDB4MjAyRV0sIFsweDIwNjAsIDB4MjA2M10sXG4gICAgICAgIFsweDIwNkEsIDB4MjA2Rl0sIFsweDIwRDAsIDB4MjBFRl0sIFsweDMwMkEsIDB4MzAyRl0sXG4gICAgICAgIFsweDMwOTksIDB4MzA5QV0sIFsweEE4MDYsIDB4QTgwNl0sIFsweEE4MEIsIDB4QTgwQl0sXG4gICAgICAgIFsweEE4MjUsIDB4QTgyNl0sIFsweEZCMUUsIDB4RkIxRV0sIFsweEZFMDAsIDB4RkUwRl0sXG4gICAgICAgIFsweEZFMjAsIDB4RkUyM10sIFsweEZFRkYsIDB4RkVGRl0sIFsweEZGRjksIDB4RkZGQl1cbiAgICBdO1xuICAgIHZhciBDT01CSU5JTkdfSElHSCA9IFtcbiAgICAgICAgWzB4MTBBMDEsIDB4MTBBMDNdLCBbMHgxMEEwNSwgMHgxMEEwNl0sIFsweDEwQTBDLCAweDEwQTBGXSxcbiAgICAgICAgWzB4MTBBMzgsIDB4MTBBM0FdLCBbMHgxMEEzRiwgMHgxMEEzRl0sIFsweDFEMTY3LCAweDFEMTY5XSxcbiAgICAgICAgWzB4MUQxNzMsIDB4MUQxODJdLCBbMHgxRDE4NSwgMHgxRDE4Ql0sIFsweDFEMUFBLCAweDFEMUFEXSxcbiAgICAgICAgWzB4MUQyNDIsIDB4MUQyNDRdLCBbMHhFMDAwMSwgMHhFMDAwMV0sIFsweEUwMDIwLCAweEUwMDdGXSxcbiAgICAgICAgWzB4RTAxMDAsIDB4RTAxRUZdXG4gICAgXTtcbiAgICBmdW5jdGlvbiBiaXNlYXJjaCh1Y3MsIGRhdGEpIHtcbiAgICAgICAgdmFyIG1pbiA9IDA7XG4gICAgICAgIHZhciBtYXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gICAgICAgIHZhciBtaWQ7XG4gICAgICAgIGlmICh1Y3MgPCBkYXRhWzBdWzBdIHx8IHVjcyA+IGRhdGFbbWF4XVsxXSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChtYXggPj0gbWluKSB7XG4gICAgICAgICAgICBtaWQgPSAobWluICsgbWF4KSA+PiAxO1xuICAgICAgICAgICAgaWYgKHVjcyA+IGRhdGFbbWlkXVsxXSkge1xuICAgICAgICAgICAgICAgIG1pbiA9IG1pZCArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh1Y3MgPCBkYXRhW21pZF1bMF0pIHtcbiAgICAgICAgICAgICAgICBtYXggPSBtaWQgLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmdW5jdGlvbiB3Y3dpZHRoSGlnaCh1Y3MpIHtcbiAgICAgICAgaWYgKGJpc2VhcmNoKHVjcywgQ09NQklOSU5HX0hJR0gpKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHVjcyA+PSAweDIwMDAwICYmIHVjcyA8PSAweDJmZmZkKSB8fCAodWNzID49IDB4MzAwMDAgJiYgdWNzIDw9IDB4M2ZmZmQpKSB7XG4gICAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgdmFyIGNvbnRyb2wgPSBvcHRzLmNvbnRyb2wgfCAwO1xuICAgIHZhciB0YWJsZSA9IG5ldyBVaW50OEFycmF5KDY1NTM2KTtcbiAgICBUeXBlZEFycmF5VXRpbHNfMS5maWxsKHRhYmxlLCAxKTtcbiAgICB0YWJsZVswXSA9IG9wdHMubnVsO1xuICAgIFR5cGVkQXJyYXlVdGlsc18xLmZpbGwodGFibGUsIG9wdHMuY29udHJvbCwgMSwgMzIpO1xuICAgIFR5cGVkQXJyYXlVdGlsc18xLmZpbGwodGFibGUsIG9wdHMuY29udHJvbCwgMHg3ZiwgMHhhMCk7XG4gICAgVHlwZWRBcnJheVV0aWxzXzEuZmlsbCh0YWJsZSwgMiwgMHgxMTAwLCAweDExNjApO1xuICAgIHRhYmxlWzB4MjMyOV0gPSAyO1xuICAgIHRhYmxlWzB4MjMyYV0gPSAyO1xuICAgIFR5cGVkQXJyYXlVdGlsc18xLmZpbGwodGFibGUsIDIsIDB4MmU4MCwgMHhhNGQwKTtcbiAgICB0YWJsZVsweDMwM2ZdID0gMTtcbiAgICBUeXBlZEFycmF5VXRpbHNfMS5maWxsKHRhYmxlLCAyLCAweGFjMDAsIDB4ZDdhNCk7XG4gICAgVHlwZWRBcnJheVV0aWxzXzEuZmlsbCh0YWJsZSwgMiwgMHhmOTAwLCAweGZiMDApO1xuICAgIFR5cGVkQXJyYXlVdGlsc18xLmZpbGwodGFibGUsIDIsIDB4ZmUxMCwgMHhmZTFhKTtcbiAgICBUeXBlZEFycmF5VXRpbHNfMS5maWxsKHRhYmxlLCAyLCAweGZlMzAsIDB4ZmU3MCk7XG4gICAgVHlwZWRBcnJheVV0aWxzXzEuZmlsbCh0YWJsZSwgMiwgMHhmZjAwLCAweGZmNjEpO1xuICAgIFR5cGVkQXJyYXlVdGlsc18xLmZpbGwodGFibGUsIDIsIDB4ZmZlMCwgMHhmZmU3KTtcbiAgICBmb3IgKHZhciByID0gMDsgciA8IENPTUJJTklOR19CTVAubGVuZ3RoOyArK3IpIHtcbiAgICAgICAgVHlwZWRBcnJheVV0aWxzXzEuZmlsbCh0YWJsZSwgMCwgQ09NQklOSU5HX0JNUFtyXVswXSwgQ09NQklOSU5HX0JNUFtyXVsxXSArIDEpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKG51bSkge1xuICAgICAgICBpZiAobnVtIDwgMzIpIHtcbiAgICAgICAgICAgIHJldHVybiBjb250cm9sIHwgMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobnVtIDwgMTI3KSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobnVtIDwgNjU1MzYpIHtcbiAgICAgICAgICAgIHJldHVybiB0YWJsZVtudW1dO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3Y3dpZHRoSGlnaChudW0pO1xuICAgIH07XG59KSh7IG51bDogMCwgY29udHJvbDogMCB9KTtcbmZ1bmN0aW9uIGdldFN0cmluZ0NlbGxXaWR0aChzKSB7XG4gICAgdmFyIHJlc3VsdCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IHMubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGNvZGUgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGlmICgweEQ4MDAgPD0gY29kZSAmJiBjb2RlIDw9IDB4REJGRikge1xuICAgICAgICAgICAgaWYgKCsraSA+PSBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgZXhwb3J0cy53Y3dpZHRoKGNvZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHNlY29uZCA9IHMuY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgIGlmICgweERDMDAgPD0gc2Vjb25kICYmIHNlY29uZCA8PSAweERGRkYpIHtcbiAgICAgICAgICAgICAgICBjb2RlID0gKGNvZGUgLSAweEQ4MDApICogMHg0MDAgKyBzZWNvbmQgLSAweERDMDAgKyAweDEwMDAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IGV4cG9ydHMud2N3aWR0aChzZWNvbmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCArPSBleHBvcnRzLndjd2lkdGgoY29kZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLmdldFN0cmluZ0NlbGxXaWR0aCA9IGdldFN0cmluZ0NlbGxXaWR0aDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNoYXJXaWR0aC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBDaGFyQXRsYXNVdGlsc18xID0gcmVxdWlyZShcIi4vQ2hhckF0bGFzVXRpbHNcIik7XG52YXIgRHluYW1pY0NoYXJBdGxhc18xID0gcmVxdWlyZShcIi4vRHluYW1pY0NoYXJBdGxhc1wiKTtcbnZhciBOb25lQ2hhckF0bGFzXzEgPSByZXF1aXJlKFwiLi9Ob25lQ2hhckF0bGFzXCIpO1xudmFyIFN0YXRpY0NoYXJBdGxhc18xID0gcmVxdWlyZShcIi4vU3RhdGljQ2hhckF0bGFzXCIpO1xudmFyIGNoYXJBdGxhc0ltcGxlbWVudGF0aW9ucyA9IHtcbiAgICAnbm9uZSc6IE5vbmVDaGFyQXRsYXNfMS5kZWZhdWx0LFxuICAgICdzdGF0aWMnOiBTdGF0aWNDaGFyQXRsYXNfMS5kZWZhdWx0LFxuICAgICdkeW5hbWljJzogRHluYW1pY0NoYXJBdGxhc18xLmRlZmF1bHRcbn07XG52YXIgY2hhckF0bGFzQ2FjaGUgPSBbXTtcbmZ1bmN0aW9uIGFjcXVpcmVDaGFyQXRsYXModGVybWluYWwsIGNvbG9ycywgc2NhbGVkQ2hhcldpZHRoLCBzY2FsZWRDaGFySGVpZ2h0KSB7XG4gICAgdmFyIG5ld0NvbmZpZyA9IENoYXJBdGxhc1V0aWxzXzEuZ2VuZXJhdGVDb25maWcoc2NhbGVkQ2hhcldpZHRoLCBzY2FsZWRDaGFySGVpZ2h0LCB0ZXJtaW5hbCwgY29sb3JzKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoYXJBdGxhc0NhY2hlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGNoYXJBdGxhc0NhY2hlW2ldO1xuICAgICAgICB2YXIgb3duZWRCeUluZGV4ID0gZW50cnkub3duZWRCeS5pbmRleE9mKHRlcm1pbmFsKTtcbiAgICAgICAgaWYgKG93bmVkQnlJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICBpZiAoQ2hhckF0bGFzVXRpbHNfMS5jb25maWdFcXVhbHMoZW50cnkuY29uZmlnLCBuZXdDb25maWcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVudHJ5LmF0bGFzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVudHJ5Lm93bmVkQnkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgY2hhckF0bGFzQ2FjaGUuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZW50cnkub3duZWRCeS5zcGxpY2Uob3duZWRCeUluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hhckF0bGFzQ2FjaGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gY2hhckF0bGFzQ2FjaGVbaV07XG4gICAgICAgIGlmIChDaGFyQXRsYXNVdGlsc18xLmNvbmZpZ0VxdWFscyhlbnRyeS5jb25maWcsIG5ld0NvbmZpZykpIHtcbiAgICAgICAgICAgIGVudHJ5Lm93bmVkQnkucHVzaCh0ZXJtaW5hbCk7XG4gICAgICAgICAgICByZXR1cm4gZW50cnkuYXRsYXM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIG5ld0VudHJ5ID0ge1xuICAgICAgICBhdGxhczogbmV3IGNoYXJBdGxhc0ltcGxlbWVudGF0aW9uc1t0ZXJtaW5hbC5vcHRpb25zLmV4cGVyaW1lbnRhbENoYXJBdGxhc10oZG9jdW1lbnQsIG5ld0NvbmZpZyksXG4gICAgICAgIGNvbmZpZzogbmV3Q29uZmlnLFxuICAgICAgICBvd25lZEJ5OiBbdGVybWluYWxdXG4gICAgfTtcbiAgICBjaGFyQXRsYXNDYWNoZS5wdXNoKG5ld0VudHJ5KTtcbiAgICByZXR1cm4gbmV3RW50cnkuYXRsYXM7XG59XG5leHBvcnRzLmFjcXVpcmVDaGFyQXRsYXMgPSBhY3F1aXJlQ2hhckF0bGFzO1xuZnVuY3Rpb24gcmVtb3ZlVGVybWluYWxGcm9tQ2FjaGUodGVybWluYWwpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoYXJBdGxhc0NhY2hlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGNoYXJBdGxhc0NhY2hlW2ldLm93bmVkQnkuaW5kZXhPZih0ZXJtaW5hbCk7XG4gICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIGlmIChjaGFyQXRsYXNDYWNoZVtpXS5vd25lZEJ5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGNoYXJBdGxhc0NhY2hlLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNoYXJBdGxhc0NhY2hlW2ldLm93bmVkQnkuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5yZW1vdmVUZXJtaW5hbEZyb21DYWNoZSA9IHJlbW92ZVRlcm1pbmFsRnJvbUNhY2hlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2hhckF0bGFzQ2FjaGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgUGxhdGZvcm1fMSA9IHJlcXVpcmUoXCIuLi8uLi9jb3JlL1BsYXRmb3JtXCIpO1xudmFyIFR5cGVzXzEgPSByZXF1aXJlKFwiLi9UeXBlc1wiKTtcbmZ1bmN0aW9uIGdlbmVyYXRlU3RhdGljQ2hhckF0bGFzVGV4dHVyZShjb250ZXh0LCBjYW52YXNGYWN0b3J5LCBjb25maWcpIHtcbiAgICB2YXIgY2VsbFdpZHRoID0gY29uZmlnLnNjYWxlZENoYXJXaWR0aCArIFR5cGVzXzEuQ0hBUl9BVExBU19DRUxMX1NQQUNJTkc7XG4gICAgdmFyIGNlbGxIZWlnaHQgPSBjb25maWcuc2NhbGVkQ2hhckhlaWdodCArIFR5cGVzXzEuQ0hBUl9BVExBU19DRUxMX1NQQUNJTkc7XG4gICAgdmFyIGNhbnZhcyA9IGNhbnZhc0ZhY3RvcnkoMjU1ICogY2VsbFdpZHRoLCAoMiArIDE2ICsgMTYpICogY2VsbEhlaWdodCk7XG4gICAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcsIHsgYWxwaGE6IGNvbmZpZy5hbGxvd1RyYW5zcGFyZW5jeSB9KTtcbiAgICBjdHguZmlsbFN0eWxlID0gY29uZmlnLmNvbG9ycy5iYWNrZ3JvdW5kLmNzcztcbiAgICBjdHguZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5maWxsU3R5bGUgPSBjb25maWcuY29sb3JzLmZvcmVncm91bmQuY3NzO1xuICAgIGN0eC5mb250ID0gZ2V0Rm9udChjb25maWcuZm9udFdlaWdodCwgY29uZmlnKTtcbiAgICBjdHgudGV4dEJhc2VsaW5lID0gJ3RvcCc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7IGkrKykge1xuICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5yZWN0KGkgKiBjZWxsV2lkdGgsIDAsIGNlbGxXaWR0aCwgY2VsbEhlaWdodCk7XG4gICAgICAgIGN0eC5jbGlwKCk7XG4gICAgICAgIGN0eC5maWxsVGV4dChTdHJpbmcuZnJvbUNoYXJDb2RlKGkpLCBpICogY2VsbFdpZHRoLCAwKTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHguZm9udCA9IGdldEZvbnQoY29uZmlnLmZvbnRXZWlnaHRCb2xkLCBjb25maWcpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyBpKyspIHtcbiAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHgucmVjdChpICogY2VsbFdpZHRoLCBjZWxsSGVpZ2h0LCBjZWxsV2lkdGgsIGNlbGxIZWlnaHQpO1xuICAgICAgICBjdHguY2xpcCgpO1xuICAgICAgICBjdHguZmlsbFRleHQoU3RyaW5nLmZyb21DaGFyQ29kZShpKSwgaSAqIGNlbGxXaWR0aCwgY2VsbEhlaWdodCk7XG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxuICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgY3R4LmZvbnQgPSBnZXRGb250KGNvbmZpZy5mb250V2VpZ2h0LCBjb25maWcpO1xuICAgIGZvciAodmFyIGNvbG9ySW5kZXggPSAwOyBjb2xvckluZGV4IDwgMTY7IGNvbG9ySW5kZXgrKykge1xuICAgICAgICB2YXIgeSA9IChjb2xvckluZGV4ICsgMikgKiBjZWxsSGVpZ2h0O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgaSsrKSB7XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgY3R4LnJlY3QoaSAqIGNlbGxXaWR0aCwgeSwgY2VsbFdpZHRoLCBjZWxsSGVpZ2h0KTtcbiAgICAgICAgICAgIGN0eC5jbGlwKCk7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gY29uZmlnLmNvbG9ycy5hbnNpW2NvbG9ySW5kZXhdLmNzcztcbiAgICAgICAgICAgIGN0eC5maWxsVGV4dChTdHJpbmcuZnJvbUNoYXJDb2RlKGkpLCBpICogY2VsbFdpZHRoLCB5KTtcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY3R4LmZvbnQgPSBnZXRGb250KGNvbmZpZy5mb250V2VpZ2h0Qm9sZCwgY29uZmlnKTtcbiAgICBmb3IgKHZhciBjb2xvckluZGV4ID0gMDsgY29sb3JJbmRleCA8IDE2OyBjb2xvckluZGV4KyspIHtcbiAgICAgICAgdmFyIHkgPSAoY29sb3JJbmRleCArIDIgKyAxNikgKiBjZWxsSGVpZ2h0O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgaSsrKSB7XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgY3R4LnJlY3QoaSAqIGNlbGxXaWR0aCwgeSwgY2VsbFdpZHRoLCBjZWxsSGVpZ2h0KTtcbiAgICAgICAgICAgIGN0eC5jbGlwKCk7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gY29uZmlnLmNvbG9ycy5hbnNpW2NvbG9ySW5kZXhdLmNzcztcbiAgICAgICAgICAgIGN0eC5maWxsVGV4dChTdHJpbmcuZnJvbUNoYXJDb2RlKGkpLCBpICogY2VsbFdpZHRoLCB5KTtcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgICBpZiAoISgnY3JlYXRlSW1hZ2VCaXRtYXAnIGluIGNvbnRleHQpIHx8IFBsYXRmb3JtXzEuaXNGaXJlZm94IHx8IFBsYXRmb3JtXzEuaXNTYWZhcmkpIHtcbiAgICAgICAgcmV0dXJuIGNhbnZhcztcbiAgICB9XG4gICAgdmFyIGNoYXJBdGxhc0ltYWdlRGF0YSA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICBjbGVhckNvbG9yKGNoYXJBdGxhc0ltYWdlRGF0YSwgY29uZmlnLmNvbG9ycy5iYWNrZ3JvdW5kKTtcbiAgICByZXR1cm4gY29udGV4dC5jcmVhdGVJbWFnZUJpdG1hcChjaGFyQXRsYXNJbWFnZURhdGEpO1xufVxuZXhwb3J0cy5nZW5lcmF0ZVN0YXRpY0NoYXJBdGxhc1RleHR1cmUgPSBnZW5lcmF0ZVN0YXRpY0NoYXJBdGxhc1RleHR1cmU7XG5mdW5jdGlvbiBjbGVhckNvbG9yKGltYWdlRGF0YSwgY29sb3IpIHtcbiAgICB2YXIgaXNFbXB0eSA9IHRydWU7XG4gICAgdmFyIHIgPSBjb2xvci5yZ2JhID4+PiAyNDtcbiAgICB2YXIgZyA9IGNvbG9yLnJnYmEgPj4+IDE2ICYgMHhGRjtcbiAgICB2YXIgYiA9IGNvbG9yLnJnYmEgPj4+IDggJiAweEZGO1xuICAgIGZvciAodmFyIG9mZnNldCA9IDA7IG9mZnNldCA8IGltYWdlRGF0YS5kYXRhLmxlbmd0aDsgb2Zmc2V0ICs9IDQpIHtcbiAgICAgICAgaWYgKGltYWdlRGF0YS5kYXRhW29mZnNldF0gPT09IHIgJiZcbiAgICAgICAgICAgIGltYWdlRGF0YS5kYXRhW29mZnNldCArIDFdID09PSBnICYmXG4gICAgICAgICAgICBpbWFnZURhdGEuZGF0YVtvZmZzZXQgKyAyXSA9PT0gYikge1xuICAgICAgICAgICAgaW1hZ2VEYXRhLmRhdGFbb2Zmc2V0ICsgM10gPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaXNFbXB0eSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpc0VtcHR5O1xufVxuZXhwb3J0cy5jbGVhckNvbG9yID0gY2xlYXJDb2xvcjtcbmZ1bmN0aW9uIGdldEZvbnQoZm9udFdlaWdodCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIGZvbnRXZWlnaHQgKyBcIiBcIiArIGNvbmZpZy5mb250U2l6ZSAqIGNvbmZpZy5kZXZpY2VQaXhlbFJhdGlvICsgXCJweCBcIiArIGNvbmZpZy5mb250RmFtaWx5O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2hhckF0bGFzR2VuZXJhdG9yLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBMaWZlY3ljbGVfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vTGlmZWN5Y2xlXCIpO1xudmFyIFNjcmVlbkRwck1vbml0b3IgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTY3JlZW5EcHJNb25pdG9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNjcmVlbkRwck1vbml0b3IoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgU2NyZWVuRHByTW9uaXRvci5wcm90b3R5cGUuc2V0TGlzdGVuZXIgPSBmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuX2xpc3RlbmVyKSB7XG4gICAgICAgICAgICB0aGlzLmNsZWFyTGlzdGVuZXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9saXN0ZW5lciA9IGxpc3RlbmVyO1xuICAgICAgICB0aGlzLl9vdXRlckxpc3RlbmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuX2xpc3RlbmVyKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvLCBfdGhpcy5fY3VycmVudERldmljZVBpeGVsUmF0aW8pO1xuICAgICAgICAgICAgX3RoaXMuX3VwZGF0ZURwcigpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl91cGRhdGVEcHIoKTtcbiAgICB9O1xuICAgIFNjcmVlbkRwck1vbml0b3IucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLmNsZWFyTGlzdGVuZXIoKTtcbiAgICB9O1xuICAgIFNjcmVlbkRwck1vbml0b3IucHJvdG90eXBlLl91cGRhdGVEcHIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9yZXNvbHV0aW9uTWVkaWFNYXRjaExpc3QpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdXRpb25NZWRpYU1hdGNoTGlzdC5yZW1vdmVMaXN0ZW5lcih0aGlzLl9vdXRlckxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgICAgICB0aGlzLl9yZXNvbHV0aW9uTWVkaWFNYXRjaExpc3QgPSB3aW5kb3cubWF0Y2hNZWRpYShcInNjcmVlbiBhbmQgKHJlc29sdXRpb246IFwiICsgd2luZG93LmRldmljZVBpeGVsUmF0aW8gKyBcImRwcHgpXCIpO1xuICAgICAgICB0aGlzLl9yZXNvbHV0aW9uTWVkaWFNYXRjaExpc3QuYWRkTGlzdGVuZXIodGhpcy5fb3V0ZXJMaXN0ZW5lcik7XG4gICAgfTtcbiAgICBTY3JlZW5EcHJNb25pdG9yLnByb3RvdHlwZS5jbGVhckxpc3RlbmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2xpc3RlbmVyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVzb2x1dGlvbk1lZGlhTWF0Y2hMaXN0LnJlbW92ZUxpc3RlbmVyKHRoaXMuX291dGVyTGlzdGVuZXIpO1xuICAgICAgICB0aGlzLl9saXN0ZW5lciA9IG51bGw7XG4gICAgICAgIHRoaXMuX291dGVyTGlzdGVuZXIgPSBudWxsO1xuICAgIH07XG4gICAgcmV0dXJuIFNjcmVlbkRwck1vbml0b3I7XG59KExpZmVjeWNsZV8xLkRpc3Bvc2FibGUpKTtcbmV4cG9ydHMuU2NyZWVuRHByTW9uaXRvciA9IFNjcmVlbkRwck1vbml0b3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TY3JlZW5EcHJNb25pdG9yLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBMaWZlY3ljbGVfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vTGlmZWN5Y2xlXCIpO1xudmFyIExpZmVjeWNsZV8yID0gcmVxdWlyZShcIi4vTGlmZWN5Y2xlXCIpO1xudmFyIEhPVkVSX0RVUkFUSU9OID0gNTAwO1xudmFyIE1vdXNlWm9uZU1hbmFnZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNb3VzZVpvbmVNYW5hZ2VyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1vdXNlWm9uZU1hbmFnZXIoX3Rlcm1pbmFsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl90ZXJtaW5hbCA9IF90ZXJtaW5hbDtcbiAgICAgICAgX3RoaXMuX3pvbmVzID0gW107XG4gICAgICAgIF90aGlzLl9hcmVab25lc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5fdG9vbHRpcFRpbWVvdXQgPSBudWxsO1xuICAgICAgICBfdGhpcy5fY3VycmVudFpvbmUgPSBudWxsO1xuICAgICAgICBfdGhpcy5fbGFzdEhvdmVyQ29vcmRzID0gW251bGwsIG51bGxdO1xuICAgICAgICBfdGhpcy5yZWdpc3RlcihMaWZlY3ljbGVfMi5hZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIoX3RoaXMuX3Rlcm1pbmFsLmVsZW1lbnQsICdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZSkgeyByZXR1cm4gX3RoaXMuX29uTW91c2VEb3duKGUpOyB9KSk7XG4gICAgICAgIF90aGlzLl9tb3VzZU1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiBfdGhpcy5fb25Nb3VzZU1vdmUoZSk7IH07XG4gICAgICAgIF90aGlzLl9jbGlja0xpc3RlbmVyID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIF90aGlzLl9vbkNsaWNrKGUpOyB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE1vdXNlWm9uZU1hbmFnZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLl9kZWFjdGl2YXRlKCk7XG4gICAgfTtcbiAgICBNb3VzZVpvbmVNYW5hZ2VyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoem9uZSkge1xuICAgICAgICB0aGlzLl96b25lcy5wdXNoKHpvbmUpO1xuICAgICAgICBpZiAodGhpcy5fem9uZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmF0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNb3VzZVpvbmVNYW5hZ2VyLnByb3RvdHlwZS5jbGVhckFsbCA9IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgICAgIGlmICh0aGlzLl96b25lcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWVuZCkge1xuICAgICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICAgICAgZW5kID0gdGhpcy5fdGVybWluYWwucm93cyAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl96b25lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHpvbmUgPSB0aGlzLl96b25lc1tpXTtcbiAgICAgICAgICAgIGlmICgoem9uZS55MSA+IHN0YXJ0ICYmIHpvbmUueTEgPD0gZW5kICsgMSkgfHxcbiAgICAgICAgICAgICAgICAoem9uZS55MiA+IHN0YXJ0ICYmIHpvbmUueTIgPD0gZW5kICsgMSkgfHxcbiAgICAgICAgICAgICAgICAoem9uZS55MSA8IHN0YXJ0ICYmIHpvbmUueTIgPiBlbmQgKyAxKSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50Wm9uZSAmJiB0aGlzLl9jdXJyZW50Wm9uZSA9PT0gem9uZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50Wm9uZS5sZWF2ZUNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRab25lID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fem9uZXMuc3BsaWNlKGktLSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3pvbmVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5fZGVhY3RpdmF0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNb3VzZVpvbmVNYW5hZ2VyLnByb3RvdHlwZS5fYWN0aXZhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5fYXJlWm9uZXNBY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuX2FyZVpvbmVzQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5fbW91c2VNb3ZlTGlzdGVuZXIpO1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX2NsaWNrTGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNb3VzZVpvbmVNYW5hZ2VyLnByb3RvdHlwZS5fZGVhY3RpdmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FyZVpvbmVzQWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLl9hcmVab25lc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLl9tb3VzZU1vdmVMaXN0ZW5lcik7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fY2xpY2tMaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1vdXNlWm9uZU1hbmFnZXIucHJvdG90eXBlLl9vbk1vdXNlTW92ZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICh0aGlzLl9sYXN0SG92ZXJDb29yZHNbMF0gIT09IGUucGFnZVggfHwgdGhpcy5fbGFzdEhvdmVyQ29vcmRzWzFdICE9PSBlLnBhZ2VZKSB7XG4gICAgICAgICAgICB0aGlzLl9vbkhvdmVyKGUpO1xuICAgICAgICAgICAgdGhpcy5fbGFzdEhvdmVyQ29vcmRzID0gW2UucGFnZVgsIGUucGFnZVldO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNb3VzZVpvbmVNYW5hZ2VyLnByb3RvdHlwZS5fb25Ib3ZlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciB6b25lID0gdGhpcy5fZmluZFpvbmVFdmVudEF0KGUpO1xuICAgICAgICBpZiAoem9uZSA9PT0gdGhpcy5fY3VycmVudFpvbmUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fY3VycmVudFpvbmUpIHtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRab25lLmxlYXZlQ2FsbGJhY2soKTtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRab25lID0gbnVsbDtcbiAgICAgICAgICAgIGlmICh0aGlzLl90b29sdGlwVGltZW91dCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90b29sdGlwVGltZW91dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF6b25lKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY3VycmVudFpvbmUgPSB6b25lO1xuICAgICAgICBpZiAoem9uZS5ob3ZlckNhbGxiYWNrKSB7XG4gICAgICAgICAgICB6b25lLmhvdmVyQ2FsbGJhY2soZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdG9vbHRpcFRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLl9vblRvb2x0aXAoZSk7IH0sIEhPVkVSX0RVUkFUSU9OKTtcbiAgICB9O1xuICAgIE1vdXNlWm9uZU1hbmFnZXIucHJvdG90eXBlLl9vblRvb2x0aXAgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICB0aGlzLl90b29sdGlwVGltZW91dCA9IG51bGw7XG4gICAgICAgIHZhciB6b25lID0gdGhpcy5fZmluZFpvbmVFdmVudEF0KGUpO1xuICAgICAgICBpZiAoem9uZSAmJiB6b25lLnRvb2x0aXBDYWxsYmFjaykge1xuICAgICAgICAgICAgem9uZS50b29sdGlwQ2FsbGJhY2soZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1vdXNlWm9uZU1hbmFnZXIucHJvdG90eXBlLl9vbk1vdXNlRG93biA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICghdGhpcy5fYXJlWm9uZXNBY3RpdmUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgem9uZSA9IHRoaXMuX2ZpbmRab25lRXZlbnRBdChlKTtcbiAgICAgICAgaWYgKHpvbmUpIHtcbiAgICAgICAgICAgIGlmICh6b25lLndpbGxMaW5rQWN0aXZhdGUoZSkpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgTW91c2Vab25lTWFuYWdlci5wcm90b3R5cGUuX29uQ2xpY2sgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgem9uZSA9IHRoaXMuX2ZpbmRab25lRXZlbnRBdChlKTtcbiAgICAgICAgaWYgKHpvbmUpIHtcbiAgICAgICAgICAgIHpvbmUuY2xpY2tDYWxsYmFjayhlKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1vdXNlWm9uZU1hbmFnZXIucHJvdG90eXBlLl9maW5kWm9uZUV2ZW50QXQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgY29vcmRzID0gdGhpcy5fdGVybWluYWwubW91c2VIZWxwZXIuZ2V0Q29vcmRzKGUsIHRoaXMuX3Rlcm1pbmFsLnNjcmVlbkVsZW1lbnQsIHRoaXMuX3Rlcm1pbmFsLmNoYXJNZWFzdXJlLCB0aGlzLl90ZXJtaW5hbC5jb2xzLCB0aGlzLl90ZXJtaW5hbC5yb3dzKTtcbiAgICAgICAgaWYgKCFjb29yZHMpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHZhciB4ID0gY29vcmRzWzBdO1xuICAgICAgICB2YXIgeSA9IGNvb3Jkc1sxXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl96b25lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHpvbmUgPSB0aGlzLl96b25lc1tpXTtcbiAgICAgICAgICAgIGlmICh6b25lLnkxID09PSB6b25lLnkyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHkgPT09IHpvbmUueTEgJiYgeCA+PSB6b25lLngxICYmIHggPCB6b25lLngyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB6b25lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICgoeSA9PT0gem9uZS55MSAmJiB4ID49IHpvbmUueDEpIHx8XG4gICAgICAgICAgICAgICAgICAgICh5ID09PSB6b25lLnkyICYmIHggPCB6b25lLngyKSB8fFxuICAgICAgICAgICAgICAgICAgICAoeSA+IHpvbmUueTEgJiYgeSA8IHpvbmUueTIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB6b25lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIHJldHVybiBNb3VzZVpvbmVNYW5hZ2VyO1xufShMaWZlY3ljbGVfMS5EaXNwb3NhYmxlKSk7XG5leHBvcnRzLk1vdXNlWm9uZU1hbmFnZXIgPSBNb3VzZVpvbmVNYW5hZ2VyO1xudmFyIE1vdXNlWm9uZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTW91c2Vab25lKHgxLCB5MSwgeDIsIHkyLCBjbGlja0NhbGxiYWNrLCBob3ZlckNhbGxiYWNrLCB0b29sdGlwQ2FsbGJhY2ssIGxlYXZlQ2FsbGJhY2ssIHdpbGxMaW5rQWN0aXZhdGUpIHtcbiAgICAgICAgdGhpcy54MSA9IHgxO1xuICAgICAgICB0aGlzLnkxID0geTE7XG4gICAgICAgIHRoaXMueDIgPSB4MjtcbiAgICAgICAgdGhpcy55MiA9IHkyO1xuICAgICAgICB0aGlzLmNsaWNrQ2FsbGJhY2sgPSBjbGlja0NhbGxiYWNrO1xuICAgICAgICB0aGlzLmhvdmVyQ2FsbGJhY2sgPSBob3ZlckNhbGxiYWNrO1xuICAgICAgICB0aGlzLnRvb2x0aXBDYWxsYmFjayA9IHRvb2x0aXBDYWxsYmFjaztcbiAgICAgICAgdGhpcy5sZWF2ZUNhbGxiYWNrID0gbGVhdmVDYWxsYmFjaztcbiAgICAgICAgdGhpcy53aWxsTGlua0FjdGl2YXRlID0gd2lsbExpbmtBY3RpdmF0ZTtcbiAgICB9XG4gICAgcmV0dXJuIE1vdXNlWm9uZTtcbn0oKSk7XG5leHBvcnRzLk1vdXNlWm9uZSA9IE1vdXNlWm9uZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1vdXNlWm9uZU1hbmFnZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgTW91c2VIZWxwZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1vdXNlSGVscGVyKF9yZW5kZXJlcikge1xuICAgICAgICB0aGlzLl9yZW5kZXJlciA9IF9yZW5kZXJlcjtcbiAgICB9XG4gICAgTW91c2VIZWxwZXIucHJvdG90eXBlLnNldFJlbmRlcmVyID0gZnVuY3Rpb24gKHJlbmRlcmVyKSB7XG4gICAgICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgfTtcbiAgICBNb3VzZUhlbHBlci5nZXRDb29yZHNSZWxhdGl2ZVRvRWxlbWVudCA9IGZ1bmN0aW9uIChldmVudCwgZWxlbWVudCkge1xuICAgICAgICBpZiAoZXZlbnQucGFnZVggPT09IG51bGwgfHwgZXZlbnQucGFnZVggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9yaWdpbmFsRWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHZhciB4ID0gZXZlbnQucGFnZVg7XG4gICAgICAgIHZhciB5ID0gZXZlbnQucGFnZVk7XG4gICAgICAgIHdoaWxlIChlbGVtZW50KSB7XG4gICAgICAgICAgICB4IC09IGVsZW1lbnQub2Zmc2V0TGVmdDtcbiAgICAgICAgICAgIHkgLT0gZWxlbWVudC5vZmZzZXRUb3A7XG4gICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5vZmZzZXRQYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxlbWVudCA9IG9yaWdpbmFsRWxlbWVudDtcbiAgICAgICAgd2hpbGUgKGVsZW1lbnQgJiYgZWxlbWVudCAhPT0gZWxlbWVudC5vd25lckRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgICAgIHggKz0gZWxlbWVudC5zY3JvbGxMZWZ0O1xuICAgICAgICAgICAgeSArPSBlbGVtZW50LnNjcm9sbFRvcDtcbiAgICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFt4LCB5XTtcbiAgICB9O1xuICAgIE1vdXNlSGVscGVyLnByb3RvdHlwZS5nZXRDb29yZHMgPSBmdW5jdGlvbiAoZXZlbnQsIGVsZW1lbnQsIGNoYXJNZWFzdXJlLCBjb2xDb3VudCwgcm93Q291bnQsIGlzU2VsZWN0aW9uKSB7XG4gICAgICAgIGlmICghY2hhck1lYXN1cmUud2lkdGggfHwgIWNoYXJNZWFzdXJlLmhlaWdodCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvb3JkcyA9IE1vdXNlSGVscGVyLmdldENvb3Jkc1JlbGF0aXZlVG9FbGVtZW50KGV2ZW50LCBlbGVtZW50KTtcbiAgICAgICAgaWYgKCFjb29yZHMpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvb3Jkc1swXSA9IE1hdGguY2VpbCgoY29vcmRzWzBdICsgKGlzU2VsZWN0aW9uID8gdGhpcy5fcmVuZGVyZXIuZGltZW5zaW9ucy5hY3R1YWxDZWxsV2lkdGggLyAyIDogMCkpIC8gdGhpcy5fcmVuZGVyZXIuZGltZW5zaW9ucy5hY3R1YWxDZWxsV2lkdGgpO1xuICAgICAgICBjb29yZHNbMV0gPSBNYXRoLmNlaWwoY29vcmRzWzFdIC8gdGhpcy5fcmVuZGVyZXIuZGltZW5zaW9ucy5hY3R1YWxDZWxsSGVpZ2h0KTtcbiAgICAgICAgY29vcmRzWzBdID0gTWF0aC5taW4oTWF0aC5tYXgoY29vcmRzWzBdLCAxKSwgY29sQ291bnQgKyAoaXNTZWxlY3Rpb24gPyAxIDogMCkpO1xuICAgICAgICBjb29yZHNbMV0gPSBNYXRoLm1pbihNYXRoLm1heChjb29yZHNbMV0sIDEpLCByb3dDb3VudCk7XG4gICAgICAgIHJldHVybiBjb29yZHM7XG4gICAgfTtcbiAgICBNb3VzZUhlbHBlci5wcm90b3R5cGUuZ2V0UmF3Qnl0ZUNvb3JkcyA9IGZ1bmN0aW9uIChldmVudCwgZWxlbWVudCwgY2hhck1lYXN1cmUsIGNvbENvdW50LCByb3dDb3VudCkge1xuICAgICAgICB2YXIgY29vcmRzID0gdGhpcy5nZXRDb29yZHMoZXZlbnQsIGVsZW1lbnQsIGNoYXJNZWFzdXJlLCBjb2xDb3VudCwgcm93Q291bnQpO1xuICAgICAgICB2YXIgeCA9IGNvb3Jkc1swXTtcbiAgICAgICAgdmFyIHkgPSBjb29yZHNbMV07XG4gICAgICAgIHggKz0gMzI7XG4gICAgICAgIHkgKz0gMzI7XG4gICAgICAgIHJldHVybiB7IHg6IHgsIHk6IHkgfTtcbiAgICB9O1xuICAgIHJldHVybiBNb3VzZUhlbHBlcjtcbn0oKSk7XG5leHBvcnRzLk1vdXNlSGVscGVyID0gTW91c2VIZWxwZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Nb3VzZUhlbHBlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIHByb3Bvc2VHZW9tZXRyeSh0ZXJtKSB7XG4gICAgaWYgKCF0ZXJtLmVsZW1lbnQucGFyZW50RWxlbWVudCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIHBhcmVudEVsZW1lbnRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRlcm0uZWxlbWVudC5wYXJlbnRFbGVtZW50KTtcbiAgICB2YXIgcGFyZW50RWxlbWVudEhlaWdodCA9IHBhcnNlSW50KHBhcmVudEVsZW1lbnRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdoZWlnaHQnKSk7XG4gICAgdmFyIHBhcmVudEVsZW1lbnRXaWR0aCA9IE1hdGgubWF4KDAsIHBhcnNlSW50KHBhcmVudEVsZW1lbnRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCd3aWR0aCcpKSk7XG4gICAgdmFyIGVsZW1lbnRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRlcm0uZWxlbWVudCk7XG4gICAgdmFyIGVsZW1lbnRQYWRkaW5nID0ge1xuICAgICAgICB0b3A6IHBhcnNlSW50KGVsZW1lbnRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLXRvcCcpKSxcbiAgICAgICAgYm90dG9tOiBwYXJzZUludChlbGVtZW50U3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgncGFkZGluZy1ib3R0b20nKSksXG4gICAgICAgIHJpZ2h0OiBwYXJzZUludChlbGVtZW50U3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgncGFkZGluZy1yaWdodCcpKSxcbiAgICAgICAgbGVmdDogcGFyc2VJbnQoZWxlbWVudFN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctbGVmdCcpKVxuICAgIH07XG4gICAgdmFyIGVsZW1lbnRQYWRkaW5nVmVyID0gZWxlbWVudFBhZGRpbmcudG9wICsgZWxlbWVudFBhZGRpbmcuYm90dG9tO1xuICAgIHZhciBlbGVtZW50UGFkZGluZ0hvciA9IGVsZW1lbnRQYWRkaW5nLnJpZ2h0ICsgZWxlbWVudFBhZGRpbmcubGVmdDtcbiAgICB2YXIgYXZhaWxhYmxlSGVpZ2h0ID0gcGFyZW50RWxlbWVudEhlaWdodCAtIGVsZW1lbnRQYWRkaW5nVmVyO1xuICAgIHZhciBhdmFpbGFibGVXaWR0aCA9IHBhcmVudEVsZW1lbnRXaWR0aCAtIGVsZW1lbnRQYWRkaW5nSG9yIC0gdGVybS5fY29yZS52aWV3cG9ydC5zY3JvbGxCYXJXaWR0aDtcbiAgICB2YXIgZ2VvbWV0cnkgPSB7XG4gICAgICAgIGNvbHM6IE1hdGguZmxvb3IoYXZhaWxhYmxlV2lkdGggLyB0ZXJtLl9jb3JlLnJlbmRlcmVyLmRpbWVuc2lvbnMuYWN0dWFsQ2VsbFdpZHRoKSxcbiAgICAgICAgcm93czogTWF0aC5mbG9vcihhdmFpbGFibGVIZWlnaHQgLyB0ZXJtLl9jb3JlLnJlbmRlcmVyLmRpbWVuc2lvbnMuYWN0dWFsQ2VsbEhlaWdodClcbiAgICB9O1xuICAgIHJldHVybiBnZW9tZXRyeTtcbn1cbmV4cG9ydHMucHJvcG9zZUdlb21ldHJ5ID0gcHJvcG9zZUdlb21ldHJ5O1xuZnVuY3Rpb24gZml0KHRlcm0pIHtcbiAgICB2YXIgZ2VvbWV0cnkgPSBwcm9wb3NlR2VvbWV0cnkodGVybSk7XG4gICAgaWYgKGdlb21ldHJ5KSB7XG4gICAgICAgIGlmICh0ZXJtLnJvd3MgIT09IGdlb21ldHJ5LnJvd3MgfHwgdGVybS5jb2xzICE9PSBnZW9tZXRyeS5jb2xzKSB7XG4gICAgICAgICAgICB0ZXJtLl9jb3JlLnJlbmRlcmVyLmNsZWFyKCk7XG4gICAgICAgICAgICB0ZXJtLnJlc2l6ZShnZW9tZXRyeS5jb2xzLCBnZW9tZXRyeS5yb3dzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuZml0ID0gZml0O1xuZnVuY3Rpb24gYXBwbHkodGVybWluYWxDb25zdHJ1Y3Rvcikge1xuICAgIHRlcm1pbmFsQ29uc3RydWN0b3IucHJvdG90eXBlLnByb3Bvc2VHZW9tZXRyeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHByb3Bvc2VHZW9tZXRyeSh0aGlzKTtcbiAgICB9O1xuICAgIHRlcm1pbmFsQ29uc3RydWN0b3IucHJvdG90eXBlLmZpdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZml0KHRoaXMpO1xuICAgIH07XG59XG5leHBvcnRzLmFwcGx5ID0gYXBwbHk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maXQuanMubWFwIiwiJ3VzZSBzdHJpY3QnXHJcbmltcG9ydCB7VGVybWluYWx9IGZyb20gJ3h0ZXJtJ1xyXG5pbXBvcnQge2ZpdH0gZnJvbSAneHRlcm0vbGliL2FkZG9ucy9maXQvZml0J1xyXG5pbXBvcnQgJ3h0ZXJtL2xpYi94dGVybS5jc3MnXHJcbmltcG9ydCAneHRlcm0vbGliL3h0ZXJtJ1xyXG5pbXBvcnQgJy4vY2xpZW50Lmxlc3MnXHJcblxyXG5jb25zdCB0ZXJtaW5hbF9kb20gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGVybWluYWwnKVxyXG5jb25zdCB4dGVybSA9IG5ldyBUZXJtaW5hbCgpXHJcbnh0ZXJtLnNldE9wdGlvbignY3Vyc29yQmxpbmsnLCB0cnVlKVxyXG54dGVybS5vcGVuKHRlcm1pbmFsX2RvbSlcclxueHRlcm0uZm9jdXMoKVxyXG5maXQoeHRlcm0pXHJcblxyXG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQnVmZmVyU2V0XzEgPSByZXF1aXJlKFwiLi9CdWZmZXJTZXRcIik7XG52YXIgQnVmZmVyXzEgPSByZXF1aXJlKFwiLi9CdWZmZXJcIik7XG52YXIgQ29tcG9zaXRpb25IZWxwZXJfMSA9IHJlcXVpcmUoXCIuL0NvbXBvc2l0aW9uSGVscGVyXCIpO1xudmFyIEV2ZW50RW1pdHRlcl8xID0gcmVxdWlyZShcIi4vY29tbW9uL0V2ZW50RW1pdHRlclwiKTtcbnZhciBWaWV3cG9ydF8xID0gcmVxdWlyZShcIi4vVmlld3BvcnRcIik7XG52YXIgQ2xpcGJvYXJkXzEgPSByZXF1aXJlKFwiLi91aS9DbGlwYm9hcmRcIik7XG52YXIgRXNjYXBlU2VxdWVuY2VzXzEgPSByZXF1aXJlKFwiLi9jb21tb24vZGF0YS9Fc2NhcGVTZXF1ZW5jZXNcIik7XG52YXIgSW5wdXRIYW5kbGVyXzEgPSByZXF1aXJlKFwiLi9JbnB1dEhhbmRsZXJcIik7XG52YXIgUmVuZGVyZXJfMSA9IHJlcXVpcmUoXCIuL3JlbmRlcmVyL1JlbmRlcmVyXCIpO1xudmFyIExpbmtpZmllcl8xID0gcmVxdWlyZShcIi4vTGlua2lmaWVyXCIpO1xudmFyIFNlbGVjdGlvbk1hbmFnZXJfMSA9IHJlcXVpcmUoXCIuL1NlbGVjdGlvbk1hbmFnZXJcIik7XG52YXIgQ2hhck1lYXN1cmVfMSA9IHJlcXVpcmUoXCIuL3VpL0NoYXJNZWFzdXJlXCIpO1xudmFyIEJyb3dzZXIgPSByZXF1aXJlKFwiLi9jb3JlL1BsYXRmb3JtXCIpO1xudmFyIExpZmVjeWNsZV8xID0gcmVxdWlyZShcIi4vdWkvTGlmZWN5Y2xlXCIpO1xudmFyIFN0cmluZ3MgPSByZXF1aXJlKFwiLi9TdHJpbmdzXCIpO1xudmFyIE1vdXNlSGVscGVyXzEgPSByZXF1aXJlKFwiLi91dGlscy9Nb3VzZUhlbHBlclwiKTtcbnZhciBDbG9uZV8xID0gcmVxdWlyZShcIi4vdXRpbHMvQ2xvbmVcIik7XG52YXIgU291bmRNYW5hZ2VyXzEgPSByZXF1aXJlKFwiLi9Tb3VuZE1hbmFnZXJcIik7XG52YXIgQ29sb3JNYW5hZ2VyXzEgPSByZXF1aXJlKFwiLi9yZW5kZXJlci9Db2xvck1hbmFnZXJcIik7XG52YXIgTW91c2Vab25lTWFuYWdlcl8xID0gcmVxdWlyZShcIi4vdWkvTW91c2Vab25lTWFuYWdlclwiKTtcbnZhciBBY2Nlc3NpYmlsaXR5TWFuYWdlcl8xID0gcmVxdWlyZShcIi4vQWNjZXNzaWJpbGl0eU1hbmFnZXJcIik7XG52YXIgU2NyZWVuRHByTW9uaXRvcl8xID0gcmVxdWlyZShcIi4vdWkvU2NyZWVuRHByTW9uaXRvclwiKTtcbnZhciBDaGFyQXRsYXNDYWNoZV8xID0gcmVxdWlyZShcIi4vcmVuZGVyZXIvYXRsYXMvQ2hhckF0bGFzQ2FjaGVcIik7XG52YXIgRG9tUmVuZGVyZXJfMSA9IHJlcXVpcmUoXCIuL3JlbmRlcmVyL2RvbS9Eb21SZW5kZXJlclwiKTtcbnZhciBLZXlib2FyZF8xID0gcmVxdWlyZShcIi4vY29yZS9pbnB1dC9LZXlib2FyZFwiKTtcbnZhciBkb2N1bWVudCA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykgPyB3aW5kb3cuZG9jdW1lbnQgOiBudWxsO1xudmFyIFdSSVRFX0JVRkZFUl9QQVVTRV9USFJFU0hPTEQgPSA1O1xudmFyIFdSSVRFX0JBVENIX1NJWkUgPSAzMDA7XG52YXIgQ09OU1RSVUNUT1JfT05MWV9PUFRJT05TID0gWydjb2xzJywgJ3Jvd3MnXTtcbnZhciBERUZBVUxUX09QVElPTlMgPSB7XG4gICAgY29sczogODAsXG4gICAgcm93czogMjQsXG4gICAgY29udmVydEVvbDogZmFsc2UsXG4gICAgdGVybU5hbWU6ICd4dGVybScsXG4gICAgY3Vyc29yQmxpbms6IGZhbHNlLFxuICAgIGN1cnNvclN0eWxlOiAnYmxvY2snLFxuICAgIGJlbGxTb3VuZDogU291bmRNYW5hZ2VyXzEuREVGQVVMVF9CRUxMX1NPVU5ELFxuICAgIGJlbGxTdHlsZTogJ25vbmUnLFxuICAgIGRyYXdCb2xkVGV4dEluQnJpZ2h0Q29sb3JzOiB0cnVlLFxuICAgIGVuYWJsZUJvbGQ6IHRydWUsXG4gICAgZXhwZXJpbWVudGFsQ2hhckF0bGFzOiAnc3RhdGljJyxcbiAgICBmb250RmFtaWx5OiAnY291cmllci1uZXcsIGNvdXJpZXIsIG1vbm9zcGFjZScsXG4gICAgZm9udFNpemU6IDE1LFxuICAgIGZvbnRXZWlnaHQ6ICdub3JtYWwnLFxuICAgIGZvbnRXZWlnaHRCb2xkOiAnYm9sZCcsXG4gICAgbGluZUhlaWdodDogMS4wLFxuICAgIGxldHRlclNwYWNpbmc6IDAsXG4gICAgc2Nyb2xsYmFjazogMTAwMCxcbiAgICBzY3JlZW5LZXlzOiBmYWxzZSxcbiAgICBzY3JlZW5SZWFkZXJNb2RlOiBmYWxzZSxcbiAgICBkZWJ1ZzogZmFsc2UsXG4gICAgbWFjT3B0aW9uSXNNZXRhOiBmYWxzZSxcbiAgICBtYWNPcHRpb25DbGlja0ZvcmNlc1NlbGVjdGlvbjogZmFsc2UsXG4gICAgY2FuY2VsRXZlbnRzOiBmYWxzZSxcbiAgICBkaXNhYmxlU3RkaW46IGZhbHNlLFxuICAgIHVzZUZsb3dDb250cm9sOiBmYWxzZSxcbiAgICBhbGxvd1RyYW5zcGFyZW5jeTogZmFsc2UsXG4gICAgdGFiU3RvcFdpZHRoOiA4LFxuICAgIHRoZW1lOiBudWxsLFxuICAgIHJpZ2h0Q2xpY2tTZWxlY3RzV29yZDogQnJvd3Nlci5pc01hYyxcbiAgICByZW5kZXJlclR5cGU6ICdjYW52YXMnLFxuICAgIGV4cGVyaW1lbnRhbEJ1ZmZlckxpbmVJbXBsOiAnVHlwZWRBcnJheSdcbn07XG52YXIgVGVybWluYWwgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhUZXJtaW5hbCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBUZXJtaW5hbChvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmJyb3dzZXIgPSBCcm93c2VyO1xuICAgICAgICBfdGhpcy5fYmxhbmtMaW5lID0gbnVsbDtcbiAgICAgICAgX3RoaXMub3B0aW9ucyA9IENsb25lXzEuY2xvbmUob3B0aW9ucyk7XG4gICAgICAgIF90aGlzLl9zZXR1cCgpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5fY3VzdG9tS2V5RXZlbnRIYW5kbGVyID0gbnVsbDtcbiAgICAgICAgQ2hhckF0bGFzQ2FjaGVfMS5yZW1vdmVUZXJtaW5hbEZyb21DYWNoZSh0aGlzKTtcbiAgICAgICAgdGhpcy5oYW5kbGVyID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgICAgICB0aGlzLndyaXRlID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgICAgICBpZiAodGhpcy5lbGVtZW50ICYmIHRoaXMuZWxlbWVudC5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kaXNwb3NlKCk7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuX3NldHVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBPYmplY3Qua2V5cyhERUZBVUxUX09QVElPTlMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnNba2V5XSA9PT0gbnVsbCB8fCBfdGhpcy5vcHRpb25zW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIF90aGlzLm9wdGlvbnNba2V5XSA9IERFRkFVTFRfT1BUSU9OU1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fcGFyZW50ID0gZG9jdW1lbnQgPyBkb2N1bWVudC5ib2R5IDogbnVsbDtcbiAgICAgICAgdGhpcy5jb2xzID0gdGhpcy5vcHRpb25zLmNvbHM7XG4gICAgICAgIHRoaXMucm93cyA9IHRoaXMub3B0aW9ucy5yb3dzO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmhhbmRsZXIpIHtcbiAgICAgICAgICAgIHRoaXMub24oJ2RhdGEnLCB0aGlzLm9wdGlvbnMuaGFuZGxlcik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJzb3JTdGF0ZSA9IDA7XG4gICAgICAgIHRoaXMuY3Vyc29ySGlkZGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2N1c3RvbUtleUV2ZW50SGFuZGxlciA9IG51bGw7XG4gICAgICAgIHRoaXMuYXBwbGljYXRpb25LZXlwYWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hcHBsaWNhdGlvbkN1cnNvciA9IGZhbHNlO1xuICAgICAgICB0aGlzLm9yaWdpbk1vZGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pbnNlcnRNb2RlID0gZmFsc2U7XG4gICAgICAgIHRoaXMud3JhcGFyb3VuZE1vZGUgPSB0cnVlO1xuICAgICAgICB0aGlzLmJyYWNrZXRlZFBhc3RlTW9kZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNoYXJzZXQgPSBudWxsO1xuICAgICAgICB0aGlzLmdjaGFyc2V0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5nbGV2ZWwgPSAwO1xuICAgICAgICB0aGlzLmNoYXJzZXRzID0gW251bGxdO1xuICAgICAgICB0aGlzLmN1ckF0dHIgPSBCdWZmZXJfMS5ERUZBVUxUX0FUVFI7XG4gICAgICAgIHRoaXMucGFyYW1zID0gW107XG4gICAgICAgIHRoaXMuY3VycmVudFBhcmFtID0gMDtcbiAgICAgICAgdGhpcy53cml0ZUJ1ZmZlciA9IFtdO1xuICAgICAgICB0aGlzLl93cml0ZUluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5feG9mZlNlbnRUb0NhdGNoVXAgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fdXNlclNjcm9sbGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pbnB1dEhhbmRsZXIgPSBuZXcgSW5wdXRIYW5kbGVyXzEuSW5wdXRIYW5kbGVyKHRoaXMpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKHRoaXMuX2lucHV0SGFuZGxlcik7XG4gICAgICAgIHRoaXMucmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyIHx8IG51bGw7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uTWFuYWdlciA9IHRoaXMuc2VsZWN0aW9uTWFuYWdlciB8fCBudWxsO1xuICAgICAgICB0aGlzLmxpbmtpZmllciA9IHRoaXMubGlua2lmaWVyIHx8IG5ldyBMaW5raWZpZXJfMS5MaW5raWZpZXIodGhpcyk7XG4gICAgICAgIHRoaXMuX21vdXNlWm9uZU1hbmFnZXIgPSB0aGlzLl9tb3VzZVpvbmVNYW5hZ2VyIHx8IG51bGw7XG4gICAgICAgIHRoaXMuc291bmRNYW5hZ2VyID0gdGhpcy5zb3VuZE1hbmFnZXIgfHwgbmV3IFNvdW5kTWFuYWdlcl8xLlNvdW5kTWFuYWdlcih0aGlzKTtcbiAgICAgICAgdGhpcy5idWZmZXJzID0gbmV3IEJ1ZmZlclNldF8xLkJ1ZmZlclNldCh0aGlzKTtcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uTWFuYWdlcikge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25NYW5hZ2VyLmNsZWFyU2VsZWN0aW9uKCk7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGlvbk1hbmFnZXIuaW5pdEJ1ZmZlcnNMaXN0ZW5lcnMoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRlcm1pbmFsLnByb3RvdHlwZSwgXCJidWZmZXJcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlcnMuYWN0aXZlO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuZXJhc2VBdHRyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKEJ1ZmZlcl8xLkRFRkFVTFRfQVRUUiAmIH4weDFmZikgfCAodGhpcy5jdXJBdHRyICYgMHgxZmYpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLmZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy50ZXh0YXJlYSkge1xuICAgICAgICAgICAgdGhpcy50ZXh0YXJlYS5mb2N1cygpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVGVybWluYWwucHJvdG90eXBlLCBcImlzRm9jdXNlZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IHRoaXMudGV4dGFyZWEgJiYgZG9jdW1lbnQuaGFzRm9jdXMoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgVGVybWluYWwucHJvdG90eXBlLmdldE9wdGlvbiA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIERFRkFVTFRfT1BUSU9OUykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gb3B0aW9uIHdpdGgga2V5IFwiJyArIGtleSArICdcIicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNba2V5XTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5zZXRPcHRpb24gPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoIShrZXkgaW4gREVGQVVMVF9PUFRJT05TKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBvcHRpb24gd2l0aCBrZXkgXCInICsga2V5ICsgJ1wiJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKENPTlNUUlVDVE9SX09OTFlfT1BUSU9OUy5pbmRleE9mKGtleSkgIT09IC0xKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiT3B0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIiBjYW4gb25seSBiZSBzZXQgaW4gdGhlIGNvbnN0cnVjdG9yXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnNba2V5XSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSAnYmVsbFN0eWxlJzpcbiAgICAgICAgICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gJ25vbmUnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2N1cnNvclN0eWxlJzpcbiAgICAgICAgICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gJ2Jsb2NrJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdmb250V2VpZ2h0JzpcbiAgICAgICAgICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gJ25vcm1hbCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZm9udFdlaWdodEJvbGQnOlxuICAgICAgICAgICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAnYm9sZCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbGluZUhlaWdodCc6XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlIDwgMSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oa2V5ICsgXCIgY2Fubm90IGJlIGxlc3MgdGhhbiAxLCB2YWx1ZTogXCIgKyB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdyZW5kZXJlclR5cGUnOlxuICAgICAgICAgICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAnY2FudmFzJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd0YWJTdG9wV2lkdGgnOlxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA8IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGtleSArIFwiIGNhbm5vdCBiZSBsZXNzIHRoYW4gMSwgdmFsdWU6IFwiICsgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndGhlbWUnOlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlbmRlcmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldFRoZW1lKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3Njcm9sbGJhY2snOlxuICAgICAgICAgICAgICAgIHZhbHVlID0gTWF0aC5taW4odmFsdWUsIEJ1ZmZlcl8xLk1BWF9CVUZGRVJfU0laRSk7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oa2V5ICsgXCIgY2Fubm90IGJlIGxlc3MgdGhhbiAwLCB2YWx1ZTogXCIgKyB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9uc1trZXldICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3QnVmZmVyTGVuZ3RoID0gdGhpcy5yb3dzICsgdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmJ1ZmZlci5saW5lcy5sZW5ndGggPiBuZXdCdWZmZXJMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbW91bnRUb1RyaW0gPSB0aGlzLmJ1ZmZlci5saW5lcy5sZW5ndGggLSBuZXdCdWZmZXJMZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmVlZHNSZWZyZXNoID0gKHRoaXMuYnVmZmVyLnlkaXNwIC0gYW1vdW50VG9UcmltIDwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlci5saW5lcy50cmltU3RhcnQoYW1vdW50VG9UcmltKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyLnliYXNlID0gTWF0aC5tYXgodGhpcy5idWZmZXIueWJhc2UgLSBhbW91bnRUb1RyaW0sIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5idWZmZXIueWRpc3AgPSBNYXRoLm1heCh0aGlzLmJ1ZmZlci55ZGlzcCAtIGFtb3VudFRvVHJpbSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmVlZHNSZWZyZXNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoKDAsIHRoaXMucm93cyAtIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3B0aW9uc1trZXldID0gdmFsdWU7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdmb250RmFtaWx5JzpcbiAgICAgICAgICAgIGNhc2UgJ2ZvbnRTaXplJzpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yZW5kZXJlcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhck1lYXN1cmUubWVhc3VyZSh0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2RyYXdCb2xkVGV4dEluQnJpZ2h0Q29sb3JzJzpcbiAgICAgICAgICAgIGNhc2UgJ2V4cGVyaW1lbnRhbENoYXJBdGxhcyc6XG4gICAgICAgICAgICBjYXNlICdlbmFibGVCb2xkJzpcbiAgICAgICAgICAgIGNhc2UgJ2xldHRlclNwYWNpbmcnOlxuICAgICAgICAgICAgY2FzZSAnbGluZUhlaWdodCc6XG4gICAgICAgICAgICBjYXNlICdmb250V2VpZ2h0JzpcbiAgICAgICAgICAgIGNhc2UgJ2ZvbnRXZWlnaHRCb2xkJzpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yZW5kZXJlcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIub25SZXNpemUodGhpcy5jb2xzLCB0aGlzLnJvd3MpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2goMCwgdGhpcy5yb3dzIC0gMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAncmVuZGVyZXJUeXBlJzpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yZW5kZXJlcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVucmVnaXN0ZXIodGhpcy5yZW5kZXJlcik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0dXBSZW5kZXJlcigpO1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIub25DaGFyU2l6ZUNoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdGhlbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRUaGVtZSh0aGlzLl90aGVtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMubW91c2VIZWxwZXIuc2V0UmVuZGVyZXIodGhpcy5yZW5kZXJlcik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzY3JvbGxiYWNrJzpcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlcnMucmVzaXplKHRoaXMuY29scywgdGhpcy5yb3dzKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy52aWV3cG9ydCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdwb3J0LnN5bmNTY3JvbGxBcmVhKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2NyZWVuUmVhZGVyTW9kZSc6XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5fYWNjZXNzaWJpbGl0eU1hbmFnZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FjY2Vzc2liaWxpdHlNYW5hZ2VyID0gbmV3IEFjY2Vzc2liaWxpdHlNYW5hZ2VyXzEuQWNjZXNzaWJpbGl0eU1hbmFnZXIodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hY2Nlc3NpYmlsaXR5TWFuYWdlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWNjZXNzaWJpbGl0eU1hbmFnZXIuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWNjZXNzaWJpbGl0eU1hbmFnZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndGFiU3RvcFdpZHRoJzpcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlcnMuc2V0dXBUYWJTdG9wcygpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZXhwZXJpbWVudGFsQnVmZmVyTGluZUltcGwnOlxuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVycy5ub3JtYWwuc2V0QnVmZmVyTGluZUZhY3RvcnkodmFsdWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVycy5hbHQuc2V0QnVmZmVyTGluZUZhY3RvcnkodmFsdWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2JsYW5rTGluZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucmVuZGVyZXIpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIub25PcHRpb25zQ2hhbmdlZCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuX29uVGV4dEFyZWFGb2N1cyA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICBpZiAodGhpcy5zZW5kRm9jdXMpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlcihFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnW0knKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZUN1cnNvclN0eWxlKGV2KTtcbiAgICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2ZvY3VzJyk7XG4gICAgICAgIHRoaXMuc2hvd0N1cnNvcigpO1xuICAgICAgICB0aGlzLmVtaXQoJ2ZvY3VzJyk7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuYmx1ciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dGFyZWEuYmx1cigpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLl9vblRleHRBcmVhQmx1ciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy50ZXh0YXJlYS52YWx1ZSA9ICcnO1xuICAgICAgICB0aGlzLnJlZnJlc2godGhpcy5idWZmZXIueSwgdGhpcy5idWZmZXIueSk7XG4gICAgICAgIGlmICh0aGlzLnNlbmRGb2N1cykge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVyKEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbTycpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdmb2N1cycpO1xuICAgICAgICB0aGlzLmVtaXQoJ2JsdXInKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5faW5pdEdsb2JhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5fYmluZEtleXMoKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlcihMaWZlY3ljbGVfMS5hZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIodGhpcy5lbGVtZW50LCAnY29weScsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5oYXNTZWxlY3Rpb24oKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIENsaXBib2FyZF8xLmNvcHlIYW5kbGVyKGV2ZW50LCBfdGhpcywgX3RoaXMuc2VsZWN0aW9uTWFuYWdlcik7XG4gICAgICAgIH0pKTtcbiAgICAgICAgdmFyIHBhc3RlSGFuZGxlcldyYXBwZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHsgcmV0dXJuIENsaXBib2FyZF8xLnBhc3RlSGFuZGxlcihldmVudCwgX3RoaXMpOyB9O1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKExpZmVjeWNsZV8xLmFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcih0aGlzLnRleHRhcmVhLCAncGFzdGUnLCBwYXN0ZUhhbmRsZXJXcmFwcGVyKSk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXIoTGlmZWN5Y2xlXzEuYWRkRGlzcG9zYWJsZURvbUxpc3RlbmVyKHRoaXMuZWxlbWVudCwgJ3Bhc3RlJywgcGFzdGVIYW5kbGVyV3JhcHBlcikpO1xuICAgICAgICBpZiAoQnJvd3Nlci5pc0ZpcmVmb3gpIHtcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXIoTGlmZWN5Y2xlXzEuYWRkRGlzcG9zYWJsZURvbUxpc3RlbmVyKHRoaXMuZWxlbWVudCwgJ21vdXNlZG93bicsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChldmVudC5idXR0b24gPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgQ2xpcGJvYXJkXzEucmlnaHRDbGlja0hhbmRsZXIoZXZlbnQsIF90aGlzLnRleHRhcmVhLCBfdGhpcy5zZWxlY3Rpb25NYW5hZ2VyLCBfdGhpcy5vcHRpb25zLnJpZ2h0Q2xpY2tTZWxlY3RzV29yZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZWdpc3RlcihMaWZlY3ljbGVfMS5hZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIodGhpcy5lbGVtZW50LCAnY29udGV4dG1lbnUnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBDbGlwYm9hcmRfMS5yaWdodENsaWNrSGFuZGxlcihldmVudCwgX3RoaXMudGV4dGFyZWEsIF90aGlzLnNlbGVjdGlvbk1hbmFnZXIsIF90aGlzLm9wdGlvbnMucmlnaHRDbGlja1NlbGVjdHNXb3JkKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQnJvd3Nlci5pc0xpbnV4KSB7XG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyKExpZmVjeWNsZV8xLmFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcih0aGlzLmVsZW1lbnQsICdhdXhjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChldmVudC5idXR0b24gPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgQ2xpcGJvYXJkXzEubW92ZVRleHRBcmVhVW5kZXJNb3VzZUN1cnNvcihldmVudCwgX3RoaXMudGV4dGFyZWEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLl9iaW5kS2V5cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKExpZmVjeWNsZV8xLmFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcih0aGlzLmVsZW1lbnQsICdrZXlkb3duJywgZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gdGhpcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuX2tleURvd24oZXYpO1xuICAgICAgICB9LCB0cnVlKSk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXIoTGlmZWN5Y2xlXzEuYWRkRGlzcG9zYWJsZURvbUxpc3RlbmVyKHRoaXMuZWxlbWVudCwgJ2tleXByZXNzJywgZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gdGhpcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuX2tleVByZXNzKGV2KTtcbiAgICAgICAgfSwgdHJ1ZSkpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKExpZmVjeWNsZV8xLmFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcih0aGlzLmVsZW1lbnQsICdrZXl1cCcsIGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgaWYgKCF3YXNNb2RpZmllcktleU9ubHlFdmVudChldikpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5mb2N1cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5fa2V5VXAoZXYpO1xuICAgICAgICB9LCB0cnVlKSk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXIoTGlmZWN5Y2xlXzEuYWRkRGlzcG9zYWJsZURvbUxpc3RlbmVyKHRoaXMudGV4dGFyZWEsICdrZXlkb3duJywgZnVuY3Rpb24gKGV2KSB7IHJldHVybiBfdGhpcy5fa2V5RG93bihldik7IH0sIHRydWUpKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlcihMaWZlY3ljbGVfMS5hZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIodGhpcy50ZXh0YXJlYSwgJ2tleXByZXNzJywgZnVuY3Rpb24gKGV2KSB7IHJldHVybiBfdGhpcy5fa2V5UHJlc3MoZXYpOyB9LCB0cnVlKSk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXIoTGlmZWN5Y2xlXzEuYWRkRGlzcG9zYWJsZURvbUxpc3RlbmVyKHRoaXMudGV4dGFyZWEsICdjb21wb3NpdGlvbnN0YXJ0JywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX2NvbXBvc2l0aW9uSGVscGVyLmNvbXBvc2l0aW9uc3RhcnQoKTsgfSkpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKExpZmVjeWNsZV8xLmFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcih0aGlzLnRleHRhcmVhLCAnY29tcG9zaXRpb251cGRhdGUnLCBmdW5jdGlvbiAoZSkgeyByZXR1cm4gX3RoaXMuX2NvbXBvc2l0aW9uSGVscGVyLmNvbXBvc2l0aW9udXBkYXRlKGUpOyB9KSk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXIoTGlmZWN5Y2xlXzEuYWRkRGlzcG9zYWJsZURvbUxpc3RlbmVyKHRoaXMudGV4dGFyZWEsICdjb21wb3NpdGlvbmVuZCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLl9jb21wb3NpdGlvbkhlbHBlci5jb21wb3NpdGlvbmVuZCgpOyB9KSk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXIodGhpcy5hZGREaXNwb3NhYmxlTGlzdGVuZXIoJ3JlZnJlc2gnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fY29tcG9zaXRpb25IZWxwZXIudXBkYXRlQ29tcG9zaXRpb25FbGVtZW50cygpOyB9KSk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXIodGhpcy5hZGREaXNwb3NhYmxlTGlzdGVuZXIoJ3JlZnJlc2gnLCBmdW5jdGlvbiAoZGF0YSkgeyByZXR1cm4gX3RoaXMuX3F1ZXVlTGlua2lmaWNhdGlvbihkYXRhLnN0YXJ0LCBkYXRhLmVuZCk7IH0pKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQgfHwgdGhpcy5fcGFyZW50O1xuICAgICAgICBpZiAoIXRoaXMuX3BhcmVudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUZXJtaW5hbCByZXF1aXJlcyBhIHBhcmVudCBlbGVtZW50LicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NvbnRleHQgPSB0aGlzLl9wYXJlbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcbiAgICAgICAgdGhpcy5fZG9jdW1lbnQgPSB0aGlzLl9wYXJlbnQub3duZXJEb2N1bWVudDtcbiAgICAgICAgdGhpcy5fc2NyZWVuRHByTW9uaXRvciA9IG5ldyBTY3JlZW5EcHJNb25pdG9yXzEuU2NyZWVuRHByTW9uaXRvcigpO1xuICAgICAgICB0aGlzLl9zY3JlZW5EcHJNb25pdG9yLnNldExpc3RlbmVyKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmVtaXQoJ2RwcmNoYW5nZScsIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTsgfSk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXIodGhpcy5fc2NyZWVuRHByTW9uaXRvcik7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IHRoaXMuX2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLmVsZW1lbnQuZGlyID0gJ2x0cic7XG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCd0ZXJtaW5hbCcpO1xuICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgneHRlcm0nKTtcbiAgICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnMCcpO1xuICAgICAgICB0aGlzLl9wYXJlbnQuYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50KTtcbiAgICAgICAgdmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgICB0aGlzLl92aWV3cG9ydEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5fdmlld3BvcnRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3h0ZXJtLXZpZXdwb3J0Jyk7XG4gICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKHRoaXMuX3ZpZXdwb3J0RWxlbWVudCk7XG4gICAgICAgIHRoaXMuX3ZpZXdwb3J0U2Nyb2xsQXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLl92aWV3cG9ydFNjcm9sbEFyZWEuY2xhc3NMaXN0LmFkZCgneHRlcm0tc2Nyb2xsLWFyZWEnKTtcbiAgICAgICAgdGhpcy5fdmlld3BvcnRFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuX3ZpZXdwb3J0U2Nyb2xsQXJlYSk7XG4gICAgICAgIHRoaXMuc2NyZWVuRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLnNjcmVlbkVsZW1lbnQuY2xhc3NMaXN0LmFkZCgneHRlcm0tc2NyZWVuJyk7XG4gICAgICAgIHRoaXMuX2hlbHBlckNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLl9oZWxwZXJDb250YWluZXIuY2xhc3NMaXN0LmFkZCgneHRlcm0taGVscGVycycpO1xuICAgICAgICB0aGlzLnNjcmVlbkVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5faGVscGVyQ29udGFpbmVyKTtcbiAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQodGhpcy5zY3JlZW5FbGVtZW50KTtcbiAgICAgICAgdGhpcy5fbW91c2Vab25lTWFuYWdlciA9IG5ldyBNb3VzZVpvbmVNYW5hZ2VyXzEuTW91c2Vab25lTWFuYWdlcih0aGlzKTtcbiAgICAgICAgdGhpcy5yZWdpc3Rlcih0aGlzLl9tb3VzZVpvbmVNYW5hZ2VyKTtcbiAgICAgICAgdGhpcy5yZWdpc3Rlcih0aGlzLmFkZERpc3Bvc2FibGVMaXN0ZW5lcignc2Nyb2xsJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX21vdXNlWm9uZU1hbmFnZXIuY2xlYXJBbGwoKTsgfSkpO1xuICAgICAgICB0aGlzLmxpbmtpZmllci5hdHRhY2hUb0RvbSh0aGlzLl9tb3VzZVpvbmVNYW5hZ2VyKTtcbiAgICAgICAgdGhpcy50ZXh0YXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XG4gICAgICAgIHRoaXMudGV4dGFyZWEuY2xhc3NMaXN0LmFkZCgneHRlcm0taGVscGVyLXRleHRhcmVhJyk7XG4gICAgICAgIHRoaXMudGV4dGFyZWEuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgU3RyaW5ncy5wcm9tcHRMYWJlbCk7XG4gICAgICAgIHRoaXMudGV4dGFyZWEuc2V0QXR0cmlidXRlKCdhcmlhLW11bHRpbGluZScsICdmYWxzZScpO1xuICAgICAgICB0aGlzLnRleHRhcmVhLnNldEF0dHJpYnV0ZSgnYXV0b2NvcnJlY3QnLCAnb2ZmJyk7XG4gICAgICAgIHRoaXMudGV4dGFyZWEuc2V0QXR0cmlidXRlKCdhdXRvY2FwaXRhbGl6ZScsICdvZmYnKTtcbiAgICAgICAgdGhpcy50ZXh0YXJlYS5zZXRBdHRyaWJ1dGUoJ3NwZWxsY2hlY2snLCAnZmFsc2UnKTtcbiAgICAgICAgdGhpcy50ZXh0YXJlYS50YWJJbmRleCA9IDA7XG4gICAgICAgIHRoaXMucmVnaXN0ZXIoTGlmZWN5Y2xlXzEuYWRkRGlzcG9zYWJsZURvbUxpc3RlbmVyKHRoaXMudGV4dGFyZWEsICdmb2N1cycsIGZ1bmN0aW9uIChldikgeyByZXR1cm4gX3RoaXMuX29uVGV4dEFyZWFGb2N1cyhldik7IH0pKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlcihMaWZlY3ljbGVfMS5hZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIodGhpcy50ZXh0YXJlYSwgJ2JsdXInLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fb25UZXh0QXJlYUJsdXIoKTsgfSkpO1xuICAgICAgICB0aGlzLl9oZWxwZXJDb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy50ZXh0YXJlYSk7XG4gICAgICAgIHRoaXMuX2NvbXBvc2l0aW9uVmlldyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLl9jb21wb3NpdGlvblZpZXcuY2xhc3NMaXN0LmFkZCgnY29tcG9zaXRpb24tdmlldycpO1xuICAgICAgICB0aGlzLl9jb21wb3NpdGlvbkhlbHBlciA9IG5ldyBDb21wb3NpdGlvbkhlbHBlcl8xLkNvbXBvc2l0aW9uSGVscGVyKHRoaXMudGV4dGFyZWEsIHRoaXMuX2NvbXBvc2l0aW9uVmlldywgdGhpcyk7XG4gICAgICAgIHRoaXMuX2hlbHBlckNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLl9jb21wb3NpdGlvblZpZXcpO1xuICAgICAgICB0aGlzLmNoYXJNZWFzdXJlID0gbmV3IENoYXJNZWFzdXJlXzEuQ2hhck1lYXN1cmUoZG9jdW1lbnQsIHRoaXMuX2hlbHBlckNvbnRhaW5lcik7XG4gICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZChmcmFnbWVudCk7XG4gICAgICAgIHRoaXMuX3NldHVwUmVuZGVyZXIoKTtcbiAgICAgICAgdGhpcy5fdGhlbWUgPSB0aGlzLm9wdGlvbnMudGhlbWU7XG4gICAgICAgIHRoaXMub3B0aW9ucy50aGVtZSA9IG51bGw7XG4gICAgICAgIHRoaXMudmlld3BvcnQgPSBuZXcgVmlld3BvcnRfMS5WaWV3cG9ydCh0aGlzLCB0aGlzLl92aWV3cG9ydEVsZW1lbnQsIHRoaXMuX3ZpZXdwb3J0U2Nyb2xsQXJlYSwgdGhpcy5jaGFyTWVhc3VyZSk7XG4gICAgICAgIHRoaXMudmlld3BvcnQub25UaGVtZUNoYW5nZWQodGhpcy5yZW5kZXJlci5jb2xvck1hbmFnZXIuY29sb3JzKTtcbiAgICAgICAgdGhpcy5yZWdpc3Rlcih0aGlzLnZpZXdwb3J0KTtcbiAgICAgICAgdGhpcy5yZWdpc3Rlcih0aGlzLmFkZERpc3Bvc2FibGVMaXN0ZW5lcignY3Vyc29ybW92ZScsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnJlbmRlcmVyLm9uQ3Vyc29yTW92ZSgpOyB9KSk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXIodGhpcy5hZGREaXNwb3NhYmxlTGlzdGVuZXIoJ3Jlc2l6ZScsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnJlbmRlcmVyLm9uUmVzaXplKF90aGlzLmNvbHMsIF90aGlzLnJvd3MpOyB9KSk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXIodGhpcy5hZGREaXNwb3NhYmxlTGlzdGVuZXIoJ2JsdXInLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5yZW5kZXJlci5vbkJsdXIoKTsgfSkpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKHRoaXMuYWRkRGlzcG9zYWJsZUxpc3RlbmVyKCdmb2N1cycsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnJlbmRlcmVyLm9uRm9jdXMoKTsgfSkpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKHRoaXMuYWRkRGlzcG9zYWJsZUxpc3RlbmVyKCdkcHJjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5yZW5kZXJlci5vbldpbmRvd1Jlc2l6ZSh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7IH0pKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlcihMaWZlY3ljbGVfMS5hZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIod2luZG93LCAncmVzaXplJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMucmVuZGVyZXIub25XaW5kb3dSZXNpemUod2luZG93LmRldmljZVBpeGVsUmF0aW8pOyB9KSk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXIodGhpcy5jaGFyTWVhc3VyZS5hZGREaXNwb3NhYmxlTGlzdGVuZXIoJ2NoYXJzaXplY2hhbmdlZCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnJlbmRlcmVyLm9uQ2hhclNpemVDaGFuZ2VkKCk7IH0pKTtcbiAgICAgICAgdGhpcy5yZWdpc3Rlcih0aGlzLnJlbmRlcmVyLmFkZERpc3Bvc2FibGVMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24gKGRpbWVuc2lvbnMpIHsgcmV0dXJuIF90aGlzLnZpZXdwb3J0LnN5bmNTY3JvbGxBcmVhKCk7IH0pKTtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25NYW5hZ2VyID0gbmV3IFNlbGVjdGlvbk1hbmFnZXJfMS5TZWxlY3Rpb25NYW5hZ2VyKHRoaXMsIHRoaXMuY2hhck1lYXN1cmUpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKExpZmVjeWNsZV8xLmFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcih0aGlzLmVsZW1lbnQsICdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZSkgeyByZXR1cm4gX3RoaXMuc2VsZWN0aW9uTWFuYWdlci5vbk1vdXNlRG93bihlKTsgfSkpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKHRoaXMuc2VsZWN0aW9uTWFuYWdlci5hZGREaXNwb3NhYmxlTGlzdGVuZXIoJ3JlZnJlc2gnLCBmdW5jdGlvbiAoZGF0YSkgeyByZXR1cm4gX3RoaXMucmVuZGVyZXIub25TZWxlY3Rpb25DaGFuZ2VkKGRhdGEuc3RhcnQsIGRhdGEuZW5kLCBkYXRhLmNvbHVtblNlbGVjdE1vZGUpOyB9KSk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXIodGhpcy5zZWxlY3Rpb25NYW5hZ2VyLmFkZERpc3Bvc2FibGVMaXN0ZW5lcignbmV3c2VsZWN0aW9uJywgZnVuY3Rpb24gKHRleHQpIHtcbiAgICAgICAgICAgIF90aGlzLnRleHRhcmVhLnZhbHVlID0gdGV4dDtcbiAgICAgICAgICAgIF90aGlzLnRleHRhcmVhLmZvY3VzKCk7XG4gICAgICAgICAgICBfdGhpcy50ZXh0YXJlYS5zZWxlY3QoKTtcbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKHRoaXMuYWRkRGlzcG9zYWJsZUxpc3RlbmVyKCdzY3JvbGwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy52aWV3cG9ydC5zeW5jU2Nyb2xsQXJlYSgpO1xuICAgICAgICAgICAgX3RoaXMuc2VsZWN0aW9uTWFuYWdlci5yZWZyZXNoKCk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlcihMaWZlY3ljbGVfMS5hZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIodGhpcy5fdmlld3BvcnRFbGVtZW50LCAnc2Nyb2xsJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2VsZWN0aW9uTWFuYWdlci5yZWZyZXNoKCk7IH0pKTtcbiAgICAgICAgdGhpcy5tb3VzZUhlbHBlciA9IG5ldyBNb3VzZUhlbHBlcl8xLk1vdXNlSGVscGVyKHRoaXMucmVuZGVyZXIpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNjcmVlblJlYWRlck1vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2FjY2Vzc2liaWxpdHlNYW5hZ2VyID0gbmV3IEFjY2Vzc2liaWxpdHlNYW5hZ2VyXzEuQWNjZXNzaWJpbGl0eU1hbmFnZXIodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jaGFyTWVhc3VyZS5tZWFzdXJlKHRoaXMub3B0aW9ucyk7XG4gICAgICAgIHRoaXMucmVmcmVzaCgwLCB0aGlzLnJvd3MgLSAxKTtcbiAgICAgICAgdGhpcy5faW5pdEdsb2JhbCgpO1xuICAgICAgICB0aGlzLmJpbmRNb3VzZSgpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLl9zZXR1cFJlbmRlcmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzd2l0Y2ggKHRoaXMub3B0aW9ucy5yZW5kZXJlclR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2NhbnZhcyc6XG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlciA9IG5ldyBSZW5kZXJlcl8xLlJlbmRlcmVyKHRoaXMsIHRoaXMub3B0aW9ucy50aGVtZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkb20nOlxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgRG9tUmVuZGVyZXJfMS5Eb21SZW5kZXJlcih0aGlzLCB0aGlzLm9wdGlvbnMudGhlbWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKFwiVW5yZWNvZ25pemVkIHJlbmRlcmVyVHlwZSBcXFwiXCIgKyB0aGlzLm9wdGlvbnMucmVuZGVyZXJUeXBlICsgXCJcXFwiXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVnaXN0ZXIodGhpcy5yZW5kZXJlcik7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuX3NldFRoZW1lID0gZnVuY3Rpb24gKHRoZW1lKSB7XG4gICAgICAgIHRoaXMuX3RoZW1lID0gdGhlbWU7XG4gICAgICAgIHZhciBjb2xvcnMgPSB0aGlzLnJlbmRlcmVyLnNldFRoZW1lKHRoZW1lKTtcbiAgICAgICAgaWYgKHRoaXMudmlld3BvcnQpIHtcbiAgICAgICAgICAgIHRoaXMudmlld3BvcnQub25UaGVtZUNoYW5nZWQoY29sb3JzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLmJpbmRNb3VzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGVsID0gdGhpcy5lbGVtZW50O1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciBwcmVzc2VkID0gMzI7XG4gICAgICAgIGZ1bmN0aW9uIHNlbmRCdXR0b24oZXYpIHtcbiAgICAgICAgICAgIHZhciBidXR0b247XG4gICAgICAgICAgICB2YXIgcG9zO1xuICAgICAgICAgICAgYnV0dG9uID0gZ2V0QnV0dG9uKGV2KTtcbiAgICAgICAgICAgIHBvcyA9IHNlbGYubW91c2VIZWxwZXIuZ2V0UmF3Qnl0ZUNvb3Jkcyhldiwgc2VsZi5zY3JlZW5FbGVtZW50LCBzZWxmLmNoYXJNZWFzdXJlLCBzZWxmLmNvbHMsIHNlbGYucm93cyk7XG4gICAgICAgICAgICBpZiAoIXBvcylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBzZW5kRXZlbnQoYnV0dG9uLCBwb3MpO1xuICAgICAgICAgICAgc3dpdGNoIChldi5vdmVycmlkZVR5cGUgfHwgZXYudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ21vdXNlZG93bic6XG4gICAgICAgICAgICAgICAgICAgIHByZXNzZWQgPSBidXR0b247XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ21vdXNldXAnOlxuICAgICAgICAgICAgICAgICAgICBwcmVzc2VkID0gMzI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3doZWVsJzpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc2VuZE1vdmUoZXYpIHtcbiAgICAgICAgICAgIHZhciBidXR0b24gPSBwcmVzc2VkO1xuICAgICAgICAgICAgdmFyIHBvcyA9IHNlbGYubW91c2VIZWxwZXIuZ2V0UmF3Qnl0ZUNvb3Jkcyhldiwgc2VsZi5zY3JlZW5FbGVtZW50LCBzZWxmLmNoYXJNZWFzdXJlLCBzZWxmLmNvbHMsIHNlbGYucm93cyk7XG4gICAgICAgICAgICBpZiAoIXBvcylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBidXR0b24gKz0gMzI7XG4gICAgICAgICAgICBzZW5kRXZlbnQoYnV0dG9uLCBwb3MpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGVuY29kZShkYXRhLCBjaCkge1xuICAgICAgICAgICAgaWYgKCFzZWxmLnV0Zk1vdXNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoID09PSAyNTUpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wdXNoKDApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjaCA+IDEyNylcbiAgICAgICAgICAgICAgICAgICAgY2ggPSAxMjc7XG4gICAgICAgICAgICAgICAgZGF0YS5wdXNoKGNoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gMjA0Nykge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLnB1c2goMCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNoIDwgMTI3KSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEucHVzaChjaCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2ggPiAyMDQ3KVxuICAgICAgICAgICAgICAgICAgICAgICAgY2ggPSAyMDQ3O1xuICAgICAgICAgICAgICAgICAgICBkYXRhLnB1c2goMHhDMCB8IChjaCA+PiA2KSk7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEucHVzaCgweDgwIHwgKGNoICYgMHgzRikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBzZW5kRXZlbnQoYnV0dG9uLCBwb3MpIHtcbiAgICAgICAgICAgIGlmIChzZWxmLl92dDMwME1vdXNlKSB7XG4gICAgICAgICAgICAgICAgYnV0dG9uICY9IDM7XG4gICAgICAgICAgICAgICAgcG9zLnggLT0gMzI7XG4gICAgICAgICAgICAgICAgcG9zLnkgLT0gMzI7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGFfMSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbMjQnO1xuICAgICAgICAgICAgICAgIGlmIChidXR0b24gPT09IDApXG4gICAgICAgICAgICAgICAgICAgIGRhdGFfMSArPSAnMSc7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYnV0dG9uID09PSAxKVxuICAgICAgICAgICAgICAgICAgICBkYXRhXzEgKz0gJzMnO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbiA9PT0gMilcbiAgICAgICAgICAgICAgICAgICAgZGF0YV8xICs9ICc1JztcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChidXR0b24gPT09IDMpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGRhdGFfMSArPSAnMCc7XG4gICAgICAgICAgICAgICAgZGF0YV8xICs9ICd+WycgKyBwb3MueCArICcsJyArIHBvcy55ICsgJ11cXHInO1xuICAgICAgICAgICAgICAgIHNlbGYuaGFuZGxlcihkYXRhXzEpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWxmLl9kZWNMb2NhdG9yKSB7XG4gICAgICAgICAgICAgICAgYnV0dG9uICY9IDM7XG4gICAgICAgICAgICAgICAgcG9zLnggLT0gMzI7XG4gICAgICAgICAgICAgICAgcG9zLnkgLT0gMzI7XG4gICAgICAgICAgICAgICAgaWYgKGJ1dHRvbiA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uID0gMjtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChidXR0b24gPT09IDEpXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbiA9IDQ7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYnV0dG9uID09PSAyKVxuICAgICAgICAgICAgICAgICAgICBidXR0b24gPSA2O1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbiA9PT0gMylcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uID0gMztcbiAgICAgICAgICAgICAgICBzZWxmLmhhbmRsZXIoRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1snXG4gICAgICAgICAgICAgICAgICAgICsgYnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICsgJzsnXG4gICAgICAgICAgICAgICAgICAgICsgKGJ1dHRvbiA9PT0gMyA/IDQgOiAwKVxuICAgICAgICAgICAgICAgICAgICArICc7J1xuICAgICAgICAgICAgICAgICAgICArIHBvcy55XG4gICAgICAgICAgICAgICAgICAgICsgJzsnXG4gICAgICAgICAgICAgICAgICAgICsgcG9zLnhcbiAgICAgICAgICAgICAgICAgICAgKyAnOydcbiAgICAgICAgICAgICAgICAgICAgKyBwb3MucGFnZSB8fCAwXG4gICAgICAgICAgICAgICAgICAgICsgJyZ3Jyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNlbGYudXJ4dnRNb3VzZSkge1xuICAgICAgICAgICAgICAgIHBvcy54IC09IDMyO1xuICAgICAgICAgICAgICAgIHBvcy55IC09IDMyO1xuICAgICAgICAgICAgICAgIHBvcy54Kys7XG4gICAgICAgICAgICAgICAgcG9zLnkrKztcbiAgICAgICAgICAgICAgICBzZWxmLmhhbmRsZXIoRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1snICsgYnV0dG9uICsgJzsnICsgcG9zLnggKyAnOycgKyBwb3MueSArICdNJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNlbGYuc2dyTW91c2UpIHtcbiAgICAgICAgICAgICAgICBwb3MueCAtPSAzMjtcbiAgICAgICAgICAgICAgICBwb3MueSAtPSAzMjtcbiAgICAgICAgICAgICAgICBzZWxmLmhhbmRsZXIoRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1s8J1xuICAgICAgICAgICAgICAgICAgICArICgoKGJ1dHRvbiAmIDMpID09PSAzID8gYnV0dG9uICYgfjMgOiBidXR0b24pIC0gMzIpXG4gICAgICAgICAgICAgICAgICAgICsgJzsnXG4gICAgICAgICAgICAgICAgICAgICsgcG9zLnhcbiAgICAgICAgICAgICAgICAgICAgKyAnOydcbiAgICAgICAgICAgICAgICAgICAgKyBwb3MueVxuICAgICAgICAgICAgICAgICAgICArICgoYnV0dG9uICYgMykgPT09IDMgPyAnbScgOiAnTScpKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZGF0YSA9IFtdO1xuICAgICAgICAgICAgZW5jb2RlKGRhdGEsIGJ1dHRvbik7XG4gICAgICAgICAgICBlbmNvZGUoZGF0YSwgcG9zLngpO1xuICAgICAgICAgICAgZW5jb2RlKGRhdGEsIHBvcy55KTtcbiAgICAgICAgICAgIHNlbGYuaGFuZGxlcihFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnW00nICsgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGRhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBnZXRCdXR0b24oZXYpIHtcbiAgICAgICAgICAgIHZhciBidXR0b247XG4gICAgICAgICAgICB2YXIgc2hpZnQ7XG4gICAgICAgICAgICB2YXIgbWV0YTtcbiAgICAgICAgICAgIHZhciBjdHJsO1xuICAgICAgICAgICAgdmFyIG1vZDtcbiAgICAgICAgICAgIHN3aXRjaCAoZXYub3ZlcnJpZGVUeXBlIHx8IGV2LnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdtb3VzZWRvd24nOlxuICAgICAgICAgICAgICAgICAgICBidXR0b24gPSBldi5idXR0b24gIT09IG51bGwgJiYgZXYuYnV0dG9uICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgID8gK2V2LmJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgOiBldi53aGljaCAhPT0gbnVsbCAmJiBldi53aGljaCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBldi53aGljaCAtIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGlmIChCcm93c2VyLmlzTVNJRSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uID0gYnV0dG9uID09PSAxID8gMCA6IGJ1dHRvbiA9PT0gNCA/IDEgOiBidXR0b247XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbW91c2V1cCc6XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbiA9IDM7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0RPTU1vdXNlU2Nyb2xsJzpcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uID0gZXYuZGV0YWlsIDwgMFxuICAgICAgICAgICAgICAgICAgICAgICAgPyA2NFxuICAgICAgICAgICAgICAgICAgICAgICAgOiA2NTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnd2hlZWwnOlxuICAgICAgICAgICAgICAgICAgICBidXR0b24gPSBldi5kZWx0YVkgPCAwXG4gICAgICAgICAgICAgICAgICAgICAgICA/IDY0XG4gICAgICAgICAgICAgICAgICAgICAgICA6IDY1O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNoaWZ0ID0gZXYuc2hpZnRLZXkgPyA0IDogMDtcbiAgICAgICAgICAgIG1ldGEgPSBldi5tZXRhS2V5ID8gOCA6IDA7XG4gICAgICAgICAgICBjdHJsID0gZXYuY3RybEtleSA/IDE2IDogMDtcbiAgICAgICAgICAgIG1vZCA9IHNoaWZ0IHwgbWV0YSB8IGN0cmw7XG4gICAgICAgICAgICBpZiAoc2VsZi52dDIwME1vdXNlKSB7XG4gICAgICAgICAgICAgICAgbW9kICY9IGN0cmw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghc2VsZi5ub3JtYWxNb3VzZSkge1xuICAgICAgICAgICAgICAgIG1vZCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBidXR0b24gPSAoMzIgKyAobW9kIDw8IDIpKSArIGJ1dHRvbjtcbiAgICAgICAgICAgIHJldHVybiBidXR0b247XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZWdpc3RlcihMaWZlY3ljbGVfMS5hZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIoZWwsICdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBfdGhpcy5mb2N1cygpO1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5tb3VzZUV2ZW50cyB8fCBfdGhpcy5zZWxlY3Rpb25NYW5hZ2VyLnNob3VsZEZvcmNlU2VsZWN0aW9uKGV2KSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbmRCdXR0b24oZXYpO1xuICAgICAgICAgICAgaWYgKF90aGlzLnZ0MjAwTW91c2UpIHtcbiAgICAgICAgICAgICAgICBldi5vdmVycmlkZVR5cGUgPSAnbW91c2V1cCc7XG4gICAgICAgICAgICAgICAgc2VuZEJ1dHRvbihldik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNhbmNlbChldik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbW92ZUhhbmRsZXI7XG4gICAgICAgICAgICBpZiAoX3RoaXMubm9ybWFsTW91c2UpIHtcbiAgICAgICAgICAgICAgICBtb3ZlSGFuZGxlciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV90aGlzLm5vcm1hbE1vdXNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2VuZE1vdmUoZXZlbnQpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgX3RoaXMuX2RvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG1vdmVIYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLm5vcm1hbE1vdXNlICYmICFfdGhpcy54MTBNb3VzZSkge1xuICAgICAgICAgICAgICAgICAgICBzZW5kQnV0dG9uKGV2KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1vdmVIYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBtb3ZlSGFuZGxlcik7XG4gICAgICAgICAgICAgICAgICAgIG1vdmVIYW5kbGVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RoaXMuX2RvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBoYW5kbGVyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY2FuY2VsKGV2KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfdGhpcy5fZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIGhhbmRsZXIpO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNhbmNlbChldik7XG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlcihMaWZlY3ljbGVfMS5hZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIoZWwsICd3aGVlbCcsIGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5tb3VzZUV2ZW50cykge1xuICAgICAgICAgICAgICAgIGlmICghX3RoaXMuYnVmZmVyLmhhc1Njcm9sbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFtb3VudCA9IF90aGlzLnZpZXdwb3J0LmdldExpbmVzU2Nyb2xsZWQoZXYpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYW1vdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlcXVlbmNlID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgKF90aGlzLmFwcGxpY2F0aW9uQ3Vyc29yID8gJ08nIDogJ1snKSArIChldi5kZWx0YVkgPCAwID8gJ0EnIDogJ0InKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBNYXRoLmFicyhhbW91bnQpOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgKz0gc2VxdWVuY2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuaGFuZGxlcihkYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF90aGlzLngxME1vdXNlIHx8IF90aGlzLl92dDMwME1vdXNlIHx8IF90aGlzLl9kZWNMb2NhdG9yKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHNlbmRCdXR0b24oZXYpO1xuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKExpZmVjeWNsZV8xLmFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcihlbCwgJ3doZWVsJywgZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMubW91c2VFdmVudHMpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgX3RoaXMudmlld3BvcnQub25XaGVlbChldik7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY2FuY2VsKGV2KTtcbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKExpZmVjeWNsZV8xLmFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcihlbCwgJ3RvdWNoc3RhcnQnLCBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5tb3VzZUV2ZW50cylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBfdGhpcy52aWV3cG9ydC5vblRvdWNoU3RhcnQoZXYpO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNhbmNlbChldik7XG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlcihMaWZlY3ljbGVfMS5hZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIoZWwsICd0b3VjaG1vdmUnLCBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5tb3VzZUV2ZW50cylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBfdGhpcy52aWV3cG9ydC5vblRvdWNoTW92ZShldik7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY2FuY2VsKGV2KTtcbiAgICAgICAgfSkpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICAgICAgICBpZiAodGhpcy5yZW5kZXJlcikge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5yZWZyZXNoUm93cyhzdGFydCwgZW5kKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLl9xdWV1ZUxpbmtpZmljYXRpb24gPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICAgICAgICBpZiAodGhpcy5saW5raWZpZXIpIHtcbiAgICAgICAgICAgIHRoaXMubGlua2lmaWVyLmxpbmtpZnlSb3dzKHN0YXJ0LCBlbmQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUudXBkYXRlQ3Vyc29yU3R5bGUgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uTWFuYWdlciAmJiB0aGlzLnNlbGVjdGlvbk1hbmFnZXIuc2hvdWxkQ29sdW1uU2VsZWN0KGV2KSkge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2NvbHVtbi1zZWxlY3QnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdjb2x1bW4tc2VsZWN0Jyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5zaG93Q3Vyc29yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuY3Vyc29yU3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuY3Vyc29yU3RhdGUgPSAxO1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoKHRoaXMuYnVmZmVyLnksIHRoaXMuYnVmZmVyLnkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuc2Nyb2xsID0gZnVuY3Rpb24gKGlzV3JhcHBlZCkge1xuICAgICAgICBpZiAoaXNXcmFwcGVkID09PSB2b2lkIDApIHsgaXNXcmFwcGVkID0gZmFsc2U7IH1cbiAgICAgICAgdmFyIG5ld0xpbmU7XG4gICAgICAgIHZhciB1c2VSZWN5Y2xpbmcgPSB0aGlzLm9wdGlvbnMuZXhwZXJpbWVudGFsQnVmZmVyTGluZUltcGwgIT09ICdKc0FycmF5JztcbiAgICAgICAgaWYgKHVzZVJlY3ljbGluZykge1xuICAgICAgICAgICAgbmV3TGluZSA9IHRoaXMuX2JsYW5rTGluZTtcbiAgICAgICAgICAgIGlmICghbmV3TGluZSB8fCBuZXdMaW5lLmxlbmd0aCAhPT0gdGhpcy5jb2xzIHx8IG5ld0xpbmUuZ2V0KDApW0J1ZmZlcl8xLkNIQVJfREFUQV9BVFRSX0lOREVYXSAhPT0gdGhpcy5lcmFzZUF0dHIoKSkge1xuICAgICAgICAgICAgICAgIG5ld0xpbmUgPSB0aGlzLmJ1ZmZlci5nZXRCbGFua0xpbmUodGhpcy5lcmFzZUF0dHIoKSwgaXNXcmFwcGVkKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9ibGFua0xpbmUgPSBuZXdMaW5lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3TGluZS5pc1dyYXBwZWQgPSBpc1dyYXBwZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuZXdMaW5lID0gdGhpcy5idWZmZXIuZ2V0QmxhbmtMaW5lKHRoaXMuZXJhc2VBdHRyKCksIGlzV3JhcHBlZCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRvcFJvdyA9IHRoaXMuYnVmZmVyLnliYXNlICsgdGhpcy5idWZmZXIuc2Nyb2xsVG9wO1xuICAgICAgICB2YXIgYm90dG9tUm93ID0gdGhpcy5idWZmZXIueWJhc2UgKyB0aGlzLmJ1ZmZlci5zY3JvbGxCb3R0b207XG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlci5zY3JvbGxUb3AgPT09IDApIHtcbiAgICAgICAgICAgIHZhciB3aWxsQnVmZmVyQmVUcmltbWVkID0gdGhpcy5idWZmZXIubGluZXMuaXNGdWxsO1xuICAgICAgICAgICAgaWYgKGJvdHRvbVJvdyA9PT0gdGhpcy5idWZmZXIubGluZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIGlmICh1c2VSZWN5Y2xpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpbGxCdWZmZXJCZVRyaW1tZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyLmxpbmVzLnJlY3ljbGUoKS5jb3B5RnJvbShuZXdMaW5lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyLmxpbmVzLnB1c2gobmV3TGluZS5jbG9uZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5idWZmZXIubGluZXMucHVzaChuZXdMaW5lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlci5saW5lcy5zcGxpY2UoYm90dG9tUm93ICsgMSwgMCwgKHVzZVJlY3ljbGluZykgPyBuZXdMaW5lLmNsb25lKCkgOiBuZXdMaW5lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghd2lsbEJ1ZmZlckJlVHJpbW1lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyLnliYXNlKys7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl91c2VyU2Nyb2xsaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyLnlkaXNwKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VzZXJTY3JvbGxpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5idWZmZXIueWRpc3AgPSBNYXRoLm1heCh0aGlzLmJ1ZmZlci55ZGlzcCAtIDEsIDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBzY3JvbGxSZWdpb25IZWlnaHQgPSBib3R0b21Sb3cgLSB0b3BSb3cgKyAxO1xuICAgICAgICAgICAgdGhpcy5idWZmZXIubGluZXMuc2hpZnRFbGVtZW50cyh0b3BSb3cgKyAxLCBzY3JvbGxSZWdpb25IZWlnaHQgLSAxLCAtMSk7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlci5saW5lcy5zZXQoYm90dG9tUm93LCAodXNlUmVjeWNsaW5nKSA/IG5ld0xpbmUuY2xvbmUoKSA6IG5ld0xpbmUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fdXNlclNjcm9sbGluZykge1xuICAgICAgICAgICAgdGhpcy5idWZmZXIueWRpc3AgPSB0aGlzLmJ1ZmZlci55YmFzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZVJhbmdlKHRoaXMuYnVmZmVyLnNjcm9sbFRvcCk7XG4gICAgICAgIHRoaXMudXBkYXRlUmFuZ2UodGhpcy5idWZmZXIuc2Nyb2xsQm90dG9tKTtcbiAgICAgICAgdGhpcy5lbWl0KCdzY3JvbGwnLCB0aGlzLmJ1ZmZlci55ZGlzcCk7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuc2Nyb2xsTGluZXMgPSBmdW5jdGlvbiAoZGlzcCwgc3VwcHJlc3NTY3JvbGxFdmVudCkge1xuICAgICAgICBpZiAoZGlzcCA8IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmJ1ZmZlci55ZGlzcCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3VzZXJTY3JvbGxpbmcgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRpc3AgKyB0aGlzLmJ1ZmZlci55ZGlzcCA+PSB0aGlzLmJ1ZmZlci55YmFzZSkge1xuICAgICAgICAgICAgdGhpcy5fdXNlclNjcm9sbGluZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvbGRZZGlzcCA9IHRoaXMuYnVmZmVyLnlkaXNwO1xuICAgICAgICB0aGlzLmJ1ZmZlci55ZGlzcCA9IE1hdGgubWF4KE1hdGgubWluKHRoaXMuYnVmZmVyLnlkaXNwICsgZGlzcCwgdGhpcy5idWZmZXIueWJhc2UpLCAwKTtcbiAgICAgICAgaWYgKG9sZFlkaXNwID09PSB0aGlzLmJ1ZmZlci55ZGlzcCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc3VwcHJlc3NTY3JvbGxFdmVudCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdzY3JvbGwnLCB0aGlzLmJ1ZmZlci55ZGlzcCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZWZyZXNoKDAsIHRoaXMucm93cyAtIDEpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLnNjcm9sbFBhZ2VzID0gZnVuY3Rpb24gKHBhZ2VDb3VudCkge1xuICAgICAgICB0aGlzLnNjcm9sbExpbmVzKHBhZ2VDb3VudCAqICh0aGlzLnJvd3MgLSAxKSk7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuc2Nyb2xsVG9Ub3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsTGluZXMoLXRoaXMuYnVmZmVyLnlkaXNwKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5zY3JvbGxUb0JvdHRvbSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zY3JvbGxMaW5lcyh0aGlzLmJ1ZmZlci55YmFzZSAtIHRoaXMuYnVmZmVyLnlkaXNwKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5zY3JvbGxUb0xpbmUgPSBmdW5jdGlvbiAobGluZSkge1xuICAgICAgICB2YXIgc2Nyb2xsQW1vdW50ID0gbGluZSAtIHRoaXMuYnVmZmVyLnlkaXNwO1xuICAgICAgICBpZiAoc2Nyb2xsQW1vdW50ICE9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbExpbmVzKHNjcm9sbEFtb3VudCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLl9pc0Rpc3Bvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy53cml0ZUJ1ZmZlci5wdXNoKGRhdGEpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnVzZUZsb3dDb250cm9sICYmICF0aGlzLl94b2ZmU2VudFRvQ2F0Y2hVcCAmJiB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCA+PSBXUklURV9CVUZGRVJfUEFVU0VfVEhSRVNIT0xEKSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZXIoRXNjYXBlU2VxdWVuY2VzXzEuQzAuREMzKTtcbiAgICAgICAgICAgIHRoaXMuX3hvZmZTZW50VG9DYXRjaFVwID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX3dyaXRlSW5Qcm9ncmVzcyAmJiB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuX3dyaXRlSW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5faW5uZXJXcml0ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5faW5uZXJXcml0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuX2lzRGlzcG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMud3JpdGVCdWZmZXIgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgd3JpdGVCYXRjaCA9IHRoaXMud3JpdGVCdWZmZXIuc3BsaWNlKDAsIFdSSVRFX0JBVENIX1NJWkUpO1xuICAgICAgICB3aGlsZSAod3JpdGVCYXRjaC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IHdyaXRlQmF0Y2guc2hpZnQoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl94b2ZmU2VudFRvQ2F0Y2hVcCAmJiB3cml0ZUJhdGNoLmxlbmd0aCA9PT0gMCAmJiB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlcihFc2NhcGVTZXF1ZW5jZXNfMS5DMC5EQzEpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3hvZmZTZW50VG9DYXRjaFVwID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9yZWZyZXNoU3RhcnQgPSB0aGlzLmJ1ZmZlci55O1xuICAgICAgICAgICAgdGhpcy5fcmVmcmVzaEVuZCA9IHRoaXMuYnVmZmVyLnk7XG4gICAgICAgICAgICB0aGlzLl9pbnB1dEhhbmRsZXIucGFyc2UoZGF0YSk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVJhbmdlKHRoaXMuYnVmZmVyLnkpO1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoKHRoaXMuX3JlZnJlc2hTdGFydCwgdGhpcy5fcmVmcmVzaEVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5faW5uZXJXcml0ZSgpOyB9LCAwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3dyaXRlSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUud3JpdGVsbiA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHRoaXMud3JpdGUoZGF0YSArICdcXHJcXG4nKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5hdHRhY2hDdXN0b21LZXlFdmVudEhhbmRsZXIgPSBmdW5jdGlvbiAoY3VzdG9tS2V5RXZlbnRIYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuX2N1c3RvbUtleUV2ZW50SGFuZGxlciA9IGN1c3RvbUtleUV2ZW50SGFuZGxlcjtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5yZWdpc3RlckxpbmtNYXRjaGVyID0gZnVuY3Rpb24gKHJlZ2V4LCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBtYXRjaGVySWQgPSB0aGlzLmxpbmtpZmllci5yZWdpc3RlckxpbmtNYXRjaGVyKHJlZ2V4LCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5yZWZyZXNoKDAsIHRoaXMucm93cyAtIDEpO1xuICAgICAgICByZXR1cm4gbWF0Y2hlcklkO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLmRlcmVnaXN0ZXJMaW5rTWF0Y2hlciA9IGZ1bmN0aW9uIChtYXRjaGVySWQpIHtcbiAgICAgICAgaWYgKHRoaXMubGlua2lmaWVyLmRlcmVnaXN0ZXJMaW5rTWF0Y2hlcihtYXRjaGVySWQpKSB7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2goMCwgdGhpcy5yb3dzIC0gMSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5yZWdpc3RlckNoYXJhY3RlckpvaW5lciA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHZhciBqb2luZXJJZCA9IHRoaXMucmVuZGVyZXIucmVnaXN0ZXJDaGFyYWN0ZXJKb2luZXIoaGFuZGxlcik7XG4gICAgICAgIHRoaXMucmVmcmVzaCgwLCB0aGlzLnJvd3MgLSAxKTtcbiAgICAgICAgcmV0dXJuIGpvaW5lcklkO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLmRlcmVnaXN0ZXJDaGFyYWN0ZXJKb2luZXIgPSBmdW5jdGlvbiAoam9pbmVySWQpIHtcbiAgICAgICAgaWYgKHRoaXMucmVuZGVyZXIuZGVyZWdpc3RlckNoYXJhY3RlckpvaW5lcihqb2luZXJJZCkpIHtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaCgwLCB0aGlzLnJvd3MgLSAxKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRlcm1pbmFsLnByb3RvdHlwZSwgXCJtYXJrZXJzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5idWZmZXIubWFya2VycztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgVGVybWluYWwucHJvdG90eXBlLmFkZE1hcmtlciA9IGZ1bmN0aW9uIChjdXJzb3JZT2Zmc2V0KSB7XG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlciAhPT0gdGhpcy5idWZmZXJzLm5vcm1hbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlci5hZGRNYXJrZXIodGhpcy5idWZmZXIueWJhc2UgKyB0aGlzLmJ1ZmZlci55ICsgY3Vyc29yWU9mZnNldCk7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuaGFzU2VsZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3Rpb25NYW5hZ2VyID8gdGhpcy5zZWxlY3Rpb25NYW5hZ2VyLmhhc1NlbGVjdGlvbiA6IGZhbHNlO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLmdldFNlbGVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uTWFuYWdlciA/IHRoaXMuc2VsZWN0aW9uTWFuYWdlci5zZWxlY3Rpb25UZXh0IDogJyc7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuY2xlYXJTZWxlY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGlvbk1hbmFnZXIpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uTWFuYWdlci5jbGVhclNlbGVjdGlvbigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuc2VsZWN0QWxsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb25NYW5hZ2VyKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGlvbk1hbmFnZXIuc2VsZWN0QWxsKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5zZWxlY3RMaW5lcyA9IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGlvbk1hbmFnZXIpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uTWFuYWdlci5zZWxlY3RMaW5lcyhzdGFydCwgZW5kKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLl9rZXlEb3duID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLl9jdXN0b21LZXlFdmVudEhhbmRsZXIgJiYgdGhpcy5fY3VzdG9tS2V5RXZlbnRIYW5kbGVyKGV2ZW50KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2NvbXBvc2l0aW9uSGVscGVyLmtleWRvd24oZXZlbnQpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5idWZmZXIueWJhc2UgIT09IHRoaXMuYnVmZmVyLnlkaXNwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxUb0JvdHRvbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSBLZXlib2FyZF8xLmV2YWx1YXRlS2V5Ym9hcmRFdmVudChldmVudCwgdGhpcy5hcHBsaWNhdGlvbkN1cnNvciwgdGhpcy5icm93c2VyLmlzTWFjLCB0aGlzLm9wdGlvbnMubWFjT3B0aW9uSXNNZXRhKTtcbiAgICAgICAgdGhpcy51cGRhdGVDdXJzb3JTdHlsZShldmVudCk7XG4gICAgICAgIGlmIChyZXN1bHQudHlwZSA9PT0gMyB8fCByZXN1bHQudHlwZSA9PT0gMikge1xuICAgICAgICAgICAgdmFyIHNjcm9sbENvdW50ID0gdGhpcy5yb3dzIC0gMTtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsTGluZXMocmVzdWx0LnR5cGUgPT09IDIgPyAtc2Nyb2xsQ291bnQgOiBzY3JvbGxDb3VudCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jYW5jZWwoZXZlbnQsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQudHlwZSA9PT0gMSkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RBbGwoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faXNUaGlyZExldmVsU2hpZnQodGhpcy5icm93c2VyLCBldmVudCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXN1bHQuY2FuY2VsKSB7XG4gICAgICAgICAgICB0aGlzLmNhbmNlbChldmVudCwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyZXN1bHQua2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVtaXQoJ2tleWRvd24nLCBldmVudCk7XG4gICAgICAgIHRoaXMuZW1pdCgna2V5JywgcmVzdWx0LmtleSwgZXZlbnQpO1xuICAgICAgICB0aGlzLnNob3dDdXJzb3IoKTtcbiAgICAgICAgdGhpcy5oYW5kbGVyKHJlc3VsdC5rZXkpO1xuICAgICAgICByZXR1cm4gdGhpcy5jYW5jZWwoZXZlbnQsIHRydWUpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLl9pc1RoaXJkTGV2ZWxTaGlmdCA9IGZ1bmN0aW9uIChicm93c2VyLCBldikge1xuICAgICAgICB2YXIgdGhpcmRMZXZlbEtleSA9IChicm93c2VyLmlzTWFjICYmICF0aGlzLm9wdGlvbnMubWFjT3B0aW9uSXNNZXRhICYmIGV2LmFsdEtleSAmJiAhZXYuY3RybEtleSAmJiAhZXYubWV0YUtleSkgfHxcbiAgICAgICAgICAgIChicm93c2VyLmlzTVNXaW5kb3dzICYmIGV2LmFsdEtleSAmJiBldi5jdHJsS2V5ICYmICFldi5tZXRhS2V5KTtcbiAgICAgICAgaWYgKGV2LnR5cGUgPT09ICdrZXlwcmVzcycpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlyZExldmVsS2V5O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlyZExldmVsS2V5ICYmICghZXYua2V5Q29kZSB8fCBldi5rZXlDb2RlID4gNDcpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLnNldGdMZXZlbCA9IGZ1bmN0aW9uIChnKSB7XG4gICAgICAgIHRoaXMuZ2xldmVsID0gZztcbiAgICAgICAgdGhpcy5jaGFyc2V0ID0gdGhpcy5jaGFyc2V0c1tnXTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5zZXRnQ2hhcnNldCA9IGZ1bmN0aW9uIChnLCBjaGFyc2V0KSB7XG4gICAgICAgIHRoaXMuY2hhcnNldHNbZ10gPSBjaGFyc2V0O1xuICAgICAgICBpZiAodGhpcy5nbGV2ZWwgPT09IGcpIHtcbiAgICAgICAgICAgIHRoaXMuY2hhcnNldCA9IGNoYXJzZXQ7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5fa2V5VXAgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgdGhpcy51cGRhdGVDdXJzb3JTdHlsZShldik7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuX2tleVByZXNzID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIHZhciBrZXk7XG4gICAgICAgIGlmICh0aGlzLl9jdXN0b21LZXlFdmVudEhhbmRsZXIgJiYgdGhpcy5fY3VzdG9tS2V5RXZlbnRIYW5kbGVyKGV2KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNhbmNlbChldik7XG4gICAgICAgIGlmIChldi5jaGFyQ29kZSkge1xuICAgICAgICAgICAga2V5ID0gZXYuY2hhckNvZGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZXYud2hpY2ggPT09IG51bGwgfHwgZXYud2hpY2ggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAga2V5ID0gZXYua2V5Q29kZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChldi53aGljaCAhPT0gMCAmJiBldi5jaGFyQ29kZSAhPT0gMCkge1xuICAgICAgICAgICAga2V5ID0gZXYud2hpY2g7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFrZXkgfHwgKChldi5hbHRLZXkgfHwgZXYuY3RybEtleSB8fCBldi5tZXRhS2V5KSAmJiAhdGhpcy5faXNUaGlyZExldmVsU2hpZnQodGhpcy5icm93c2VyLCBldikpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAga2V5ID0gU3RyaW5nLmZyb21DaGFyQ29kZShrZXkpO1xuICAgICAgICB0aGlzLmVtaXQoJ2tleXByZXNzJywga2V5LCBldik7XG4gICAgICAgIHRoaXMuZW1pdCgna2V5Jywga2V5LCBldik7XG4gICAgICAgIHRoaXMuc2hvd0N1cnNvcigpO1xuICAgICAgICB0aGlzLmhhbmRsZXIoa2V5KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuYmVsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5lbWl0KCdiZWxsJyk7XG4gICAgICAgIGlmICh0aGlzLl9zb3VuZEJlbGwoKSkge1xuICAgICAgICAgICAgdGhpcy5zb3VuZE1hbmFnZXIucGxheUJlbGxTb3VuZCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl92aXN1YWxCZWxsKCkpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCd2aXN1YWwtYmVsbC1hY3RpdmUnKTtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl92aXN1YWxCZWxsVGltZXIpO1xuICAgICAgICAgICAgdGhpcy5fdmlzdWFsQmVsbFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgndmlzdWFsLWJlbGwtYWN0aXZlJyk7XG4gICAgICAgICAgICB9LCAyMDApO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUubG9nID0gZnVuY3Rpb24gKHRleHQsIGRhdGEpIHtcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuZGVidWcpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICghdGhpcy5fY29udGV4dC5jb25zb2xlIHx8ICF0aGlzLl9jb250ZXh0LmNvbnNvbGUubG9nKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmNvbnNvbGUubG9nKHRleHQsIGRhdGEpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKHRleHQsIGRhdGEpIHtcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuZGVidWcpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICghdGhpcy5fY29udGV4dC5jb25zb2xlIHx8ICF0aGlzLl9jb250ZXh0LmNvbnNvbGUuZXJyb3IpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuX2NvbnRleHQuY29uc29sZS5lcnJvcih0ZXh0LCBkYXRhKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5yZXNpemUgPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgICBpZiAoaXNOYU4oeCkgfHwgaXNOYU4oeSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoeCA9PT0gdGhpcy5jb2xzICYmIHkgPT09IHRoaXMucm93cykge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2hhck1lYXN1cmUgJiYgKCF0aGlzLmNoYXJNZWFzdXJlLndpZHRoIHx8ICF0aGlzLmNoYXJNZWFzdXJlLmhlaWdodCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJNZWFzdXJlLm1lYXN1cmUodGhpcy5vcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoeCA8IDEpXG4gICAgICAgICAgICB4ID0gMTtcbiAgICAgICAgaWYgKHkgPCAxKVxuICAgICAgICAgICAgeSA9IDE7XG4gICAgICAgIHRoaXMuYnVmZmVycy5yZXNpemUoeCwgeSk7XG4gICAgICAgIHRoaXMuY29scyA9IHg7XG4gICAgICAgIHRoaXMucm93cyA9IHk7XG4gICAgICAgIHRoaXMuYnVmZmVycy5zZXR1cFRhYlN0b3BzKHRoaXMuY29scyk7XG4gICAgICAgIGlmICh0aGlzLmNoYXJNZWFzdXJlKSB7XG4gICAgICAgICAgICB0aGlzLmNoYXJNZWFzdXJlLm1lYXN1cmUodGhpcy5vcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlZnJlc2goMCwgdGhpcy5yb3dzIC0gMSk7XG4gICAgICAgIHRoaXMuZW1pdCgncmVzaXplJywgeyBjb2xzOiB4LCByb3dzOiB5IH0pO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLnVwZGF0ZVJhbmdlID0gZnVuY3Rpb24gKHkpIHtcbiAgICAgICAgaWYgKHkgPCB0aGlzLl9yZWZyZXNoU3RhcnQpXG4gICAgICAgICAgICB0aGlzLl9yZWZyZXNoU3RhcnQgPSB5O1xuICAgICAgICBpZiAoeSA+IHRoaXMuX3JlZnJlc2hFbmQpXG4gICAgICAgICAgICB0aGlzLl9yZWZyZXNoRW5kID0geTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5tYXhSYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fcmVmcmVzaFN0YXJ0ID0gMDtcbiAgICAgICAgdGhpcy5fcmVmcmVzaEVuZCA9IHRoaXMucm93cyAtIDE7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlci55YmFzZSA9PT0gMCAmJiB0aGlzLmJ1ZmZlci55ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5idWZmZXIubGluZXMuc2V0KDAsIHRoaXMuYnVmZmVyLmxpbmVzLmdldCh0aGlzLmJ1ZmZlci55YmFzZSArIHRoaXMuYnVmZmVyLnkpKTtcbiAgICAgICAgdGhpcy5idWZmZXIubGluZXMubGVuZ3RoID0gMTtcbiAgICAgICAgdGhpcy5idWZmZXIueWRpc3AgPSAwO1xuICAgICAgICB0aGlzLmJ1ZmZlci55YmFzZSA9IDA7XG4gICAgICAgIHRoaXMuYnVmZmVyLnkgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlci5saW5lcy5wdXNoKHRoaXMuYnVmZmVyLmdldEJsYW5rTGluZShCdWZmZXJfMS5ERUZBVUxUX0FUVFIpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlZnJlc2goMCwgdGhpcy5yb3dzIC0gMSk7XG4gICAgICAgIHRoaXMuZW1pdCgnc2Nyb2xsJywgdGhpcy5idWZmZXIueWRpc3ApO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLmNoID0gZnVuY3Rpb24gKGN1cikge1xuICAgICAgICBpZiAoY3VyKSB7XG4gICAgICAgICAgICByZXR1cm4gW3RoaXMuZXJhc2VBdHRyKCksIEJ1ZmZlcl8xLk5VTExfQ0VMTF9DSEFSLCBCdWZmZXJfMS5OVUxMX0NFTExfV0lEVEgsIEJ1ZmZlcl8xLk5VTExfQ0VMTF9DT0RFXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW0J1ZmZlcl8xLkRFRkFVTFRfQVRUUiwgQnVmZmVyXzEuTlVMTF9DRUxMX0NIQVIsIEJ1ZmZlcl8xLk5VTExfQ0VMTF9XSURUSCwgQnVmZmVyXzEuTlVMTF9DRUxMX0NPREVdO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLmlzID0gZnVuY3Rpb24gKHRlcm0pIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLm9wdGlvbnMudGVybU5hbWUgKyAnJykuaW5kZXhPZih0ZXJtKSA9PT0gMDtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5oYW5kbGVyID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kaXNhYmxlU3RkaW4pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb25NYW5hZ2VyICYmIHRoaXMuc2VsZWN0aW9uTWFuYWdlci5oYXNTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uTWFuYWdlci5jbGVhclNlbGVjdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlci55YmFzZSAhPT0gdGhpcy5idWZmZXIueWRpc3ApIHtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsVG9Cb3R0b20oKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVtaXQoJ2RhdGEnLCBkYXRhKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5oYW5kbGVUaXRsZSA9IGZ1bmN0aW9uICh0aXRsZSkge1xuICAgICAgICB0aGlzLmVtaXQoJ3RpdGxlJywgdGl0bGUpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLmluZGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmJ1ZmZlci55Kys7XG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlci55ID4gdGhpcy5idWZmZXIuc2Nyb2xsQm90dG9tKSB7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlci55LS07XG4gICAgICAgICAgICB0aGlzLnNjcm9sbCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlci54ID49IHRoaXMuY29scykge1xuICAgICAgICAgICAgdGhpcy5idWZmZXIueC0tO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUucmV2ZXJzZUluZGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5idWZmZXIueSA9PT0gdGhpcy5idWZmZXIuc2Nyb2xsVG9wKSB7XG4gICAgICAgICAgICB2YXIgc2Nyb2xsUmVnaW9uSGVpZ2h0ID0gdGhpcy5idWZmZXIuc2Nyb2xsQm90dG9tIC0gdGhpcy5idWZmZXIuc2Nyb2xsVG9wO1xuICAgICAgICAgICAgdGhpcy5idWZmZXIubGluZXMuc2hpZnRFbGVtZW50cyh0aGlzLmJ1ZmZlci55ICsgdGhpcy5idWZmZXIueWJhc2UsIHNjcm9sbFJlZ2lvbkhlaWdodCwgMSk7XG4gICAgICAgICAgICB0aGlzLmJ1ZmZlci5saW5lcy5zZXQodGhpcy5idWZmZXIueSArIHRoaXMuYnVmZmVyLnliYXNlLCB0aGlzLmJ1ZmZlci5nZXRCbGFua0xpbmUodGhpcy5lcmFzZUF0dHIoKSkpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVSYW5nZSh0aGlzLmJ1ZmZlci5zY3JvbGxUb3ApO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVSYW5nZSh0aGlzLmJ1ZmZlci5zY3JvbGxCb3R0b20pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5idWZmZXIueS0tO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5yb3dzID0gdGhpcy5yb3dzO1xuICAgICAgICB0aGlzLm9wdGlvbnMuY29scyA9IHRoaXMuY29scztcbiAgICAgICAgdmFyIGN1c3RvbUtleUV2ZW50SGFuZGxlciA9IHRoaXMuX2N1c3RvbUtleUV2ZW50SGFuZGxlcjtcbiAgICAgICAgdmFyIGlucHV0SGFuZGxlciA9IHRoaXMuX2lucHV0SGFuZGxlcjtcbiAgICAgICAgdmFyIGN1cnNvclN0YXRlID0gdGhpcy5jdXJzb3JTdGF0ZTtcbiAgICAgICAgdGhpcy5fc2V0dXAoKTtcbiAgICAgICAgdGhpcy5fY3VzdG9tS2V5RXZlbnRIYW5kbGVyID0gY3VzdG9tS2V5RXZlbnRIYW5kbGVyO1xuICAgICAgICB0aGlzLl9pbnB1dEhhbmRsZXIgPSBpbnB1dEhhbmRsZXI7XG4gICAgICAgIHRoaXMuY3Vyc29yU3RhdGUgPSBjdXJzb3JTdGF0ZTtcbiAgICAgICAgdGhpcy5yZWZyZXNoKDAsIHRoaXMucm93cyAtIDEpO1xuICAgICAgICBpZiAodGhpcy52aWV3cG9ydCkge1xuICAgICAgICAgICAgdGhpcy52aWV3cG9ydC5zeW5jU2Nyb2xsQXJlYSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUudGFiU2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmJ1ZmZlci50YWJzW3RoaXMuYnVmZmVyLnhdID0gdHJ1ZTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5jYW5jZWwgPSBmdW5jdGlvbiAoZXYsIGZvcmNlKSB7XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLmNhbmNlbEV2ZW50cyAmJiAhZm9yY2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLm1hdGNoQ29sb3IgPSBmdW5jdGlvbiAocjEsIGcxLCBiMSkge1xuICAgICAgICB2YXIgaGFzaCA9IChyMSA8PCAxNikgfCAoZzEgPDwgOCkgfCBiMTtcbiAgICAgICAgaWYgKG1hdGNoQ29sb3JDYWNoZVtoYXNoXSAhPT0gbnVsbCAmJiBtYXRjaENvbG9yQ2FjaGVbaGFzaF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIG1hdGNoQ29sb3JDYWNoZVtoYXNoXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGRpZmYgPSBJbmZpbml0eTtcbiAgICAgICAgdmFyIGxpID0gLTE7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgdmFyIGM7XG4gICAgICAgIHZhciByMjtcbiAgICAgICAgdmFyIGcyO1xuICAgICAgICB2YXIgYjI7XG4gICAgICAgIHZhciBkaWZmO1xuICAgICAgICBmb3IgKDsgaSA8IENvbG9yTWFuYWdlcl8xLkRFRkFVTFRfQU5TSV9DT0xPUlMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGMgPSBDb2xvck1hbmFnZXJfMS5ERUZBVUxUX0FOU0lfQ09MT1JTW2ldLnJnYmE7XG4gICAgICAgICAgICByMiA9IGMgPj4+IDI0O1xuICAgICAgICAgICAgZzIgPSBjID4+PiAxNiAmIDB4RkY7XG4gICAgICAgICAgICBiMiA9IGMgPj4+IDggJiAweEZGO1xuICAgICAgICAgICAgZGlmZiA9IG1hdGNoQ29sb3JEaXN0YW5jZShyMSwgZzEsIGIxLCByMiwgZzIsIGIyKTtcbiAgICAgICAgICAgIGlmIChkaWZmID09PSAwKSB7XG4gICAgICAgICAgICAgICAgbGkgPSBpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRpZmYgPCBsZGlmZikge1xuICAgICAgICAgICAgICAgIGxkaWZmID0gZGlmZjtcbiAgICAgICAgICAgICAgICBsaSA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hdGNoQ29sb3JDYWNoZVtoYXNoXSA9IGxpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLl92aXN1YWxCZWxsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuX3NvdW5kQmVsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5iZWxsU3R5bGUgPT09ICdzb3VuZCc7XG4gICAgfTtcbiAgICByZXR1cm4gVGVybWluYWw7XG59KEV2ZW50RW1pdHRlcl8xLkV2ZW50RW1pdHRlcikpO1xuZXhwb3J0cy5UZXJtaW5hbCA9IFRlcm1pbmFsO1xuZnVuY3Rpb24gd2FzTW9kaWZpZXJLZXlPbmx5RXZlbnQoZXYpIHtcbiAgICByZXR1cm4gZXYua2V5Q29kZSA9PT0gMTYgfHxcbiAgICAgICAgZXYua2V5Q29kZSA9PT0gMTcgfHxcbiAgICAgICAgZXYua2V5Q29kZSA9PT0gMTg7XG59XG52YXIgbWF0Y2hDb2xvckNhY2hlID0ge307XG5mdW5jdGlvbiBtYXRjaENvbG9yRGlzdGFuY2UocjEsIGcxLCBiMSwgcjIsIGcyLCBiMikge1xuICAgIHJldHVybiBNYXRoLnBvdygzMCAqIChyMSAtIHIyKSwgMilcbiAgICAgICAgKyBNYXRoLnBvdyg1OSAqIChnMSAtIGcyKSwgMilcbiAgICAgICAgKyBNYXRoLnBvdygxMSAqIChiMSAtIGIyKSwgMik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1UZXJtaW5hbC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQnVmZmVyXzEgPSByZXF1aXJlKFwiLi9CdWZmZXJcIik7XG52YXIgRXZlbnRFbWl0dGVyXzEgPSByZXF1aXJlKFwiLi9jb21tb24vRXZlbnRFbWl0dGVyXCIpO1xudmFyIEJ1ZmZlclNldCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEJ1ZmZlclNldCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBCdWZmZXJTZXQoX3Rlcm1pbmFsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl90ZXJtaW5hbCA9IF90ZXJtaW5hbDtcbiAgICAgICAgX3RoaXMuX25vcm1hbCA9IG5ldyBCdWZmZXJfMS5CdWZmZXIoX3RoaXMuX3Rlcm1pbmFsLCB0cnVlKTtcbiAgICAgICAgX3RoaXMuX25vcm1hbC5maWxsVmlld3BvcnRSb3dzKCk7XG4gICAgICAgIF90aGlzLl9hbHQgPSBuZXcgQnVmZmVyXzEuQnVmZmVyKF90aGlzLl90ZXJtaW5hbCwgZmFsc2UpO1xuICAgICAgICBfdGhpcy5fYWN0aXZlQnVmZmVyID0gX3RoaXMuX25vcm1hbDtcbiAgICAgICAgX3RoaXMuc2V0dXBUYWJTdG9wcygpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXJTZXQucHJvdG90eXBlLCBcImFsdFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FsdDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlclNldC5wcm90b3R5cGUsIFwiYWN0aXZlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZlQnVmZmVyO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyU2V0LnByb3RvdHlwZSwgXCJub3JtYWxcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9ub3JtYWw7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIEJ1ZmZlclNldC5wcm90b3R5cGUuYWN0aXZhdGVOb3JtYWxCdWZmZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmVCdWZmZXIgPT09IHRoaXMuX25vcm1hbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX25vcm1hbC54ID0gdGhpcy5fYWx0Lng7XG4gICAgICAgIHRoaXMuX25vcm1hbC55ID0gdGhpcy5fYWx0Lnk7XG4gICAgICAgIHRoaXMuX2FsdC5jbGVhcigpO1xuICAgICAgICB0aGlzLl9hY3RpdmVCdWZmZXIgPSB0aGlzLl9ub3JtYWw7XG4gICAgICAgIHRoaXMuZW1pdCgnYWN0aXZhdGUnLCB7XG4gICAgICAgICAgICBhY3RpdmVCdWZmZXI6IHRoaXMuX25vcm1hbCxcbiAgICAgICAgICAgIGluYWN0aXZlQnVmZmVyOiB0aGlzLl9hbHRcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBCdWZmZXJTZXQucHJvdG90eXBlLmFjdGl2YXRlQWx0QnVmZmVyID0gZnVuY3Rpb24gKGZpbGxBdHRyKSB7XG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmVCdWZmZXIgPT09IHRoaXMuX2FsdCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2FsdC5maWxsVmlld3BvcnRSb3dzKGZpbGxBdHRyKTtcbiAgICAgICAgdGhpcy5fYWx0LnggPSB0aGlzLl9ub3JtYWwueDtcbiAgICAgICAgdGhpcy5fYWx0LnkgPSB0aGlzLl9ub3JtYWwueTtcbiAgICAgICAgdGhpcy5fYWN0aXZlQnVmZmVyID0gdGhpcy5fYWx0O1xuICAgICAgICB0aGlzLmVtaXQoJ2FjdGl2YXRlJywge1xuICAgICAgICAgICAgYWN0aXZlQnVmZmVyOiB0aGlzLl9hbHQsXG4gICAgICAgICAgICBpbmFjdGl2ZUJ1ZmZlcjogdGhpcy5fbm9ybWFsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQnVmZmVyU2V0LnByb3RvdHlwZS5yZXNpemUgPSBmdW5jdGlvbiAobmV3Q29scywgbmV3Um93cykge1xuICAgICAgICB0aGlzLl9ub3JtYWwucmVzaXplKG5ld0NvbHMsIG5ld1Jvd3MpO1xuICAgICAgICB0aGlzLl9hbHQucmVzaXplKG5ld0NvbHMsIG5ld1Jvd3MpO1xuICAgIH07XG4gICAgQnVmZmVyU2V0LnByb3RvdHlwZS5zZXR1cFRhYlN0b3BzID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgdGhpcy5fbm9ybWFsLnNldHVwVGFiU3RvcHMoaSk7XG4gICAgICAgIHRoaXMuX2FsdC5zZXR1cFRhYlN0b3BzKGkpO1xuICAgIH07XG4gICAgcmV0dXJuIEJ1ZmZlclNldDtcbn0oRXZlbnRFbWl0dGVyXzEuRXZlbnRFbWl0dGVyKSk7XG5leHBvcnRzLkJ1ZmZlclNldCA9IEJ1ZmZlclNldDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJ1ZmZlclNldC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRXZlbnRFbWl0dGVyXzEgPSByZXF1aXJlKFwiLi9FdmVudEVtaXR0ZXJcIik7XG52YXIgQ2lyY3VsYXJMaXN0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ2lyY3VsYXJMaXN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENpcmN1bGFyTGlzdChfbWF4TGVuZ3RoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9tYXhMZW5ndGggPSBfbWF4TGVuZ3RoO1xuICAgICAgICBfdGhpcy5fYXJyYXkgPSBuZXcgQXJyYXkoX3RoaXMuX21heExlbmd0aCk7XG4gICAgICAgIF90aGlzLl9zdGFydEluZGV4ID0gMDtcbiAgICAgICAgX3RoaXMuX2xlbmd0aCA9IDA7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENpcmN1bGFyTGlzdC5wcm90b3R5cGUsIFwibWF4TGVuZ3RoXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbWF4TGVuZ3RoO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChuZXdNYXhMZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9tYXhMZW5ndGggPT09IG5ld01heExlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBuZXdBcnJheSA9IG5ldyBBcnJheShuZXdNYXhMZW5ndGgpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBNYXRoLm1pbihuZXdNYXhMZW5ndGgsIHRoaXMubGVuZ3RoKTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbmV3QXJyYXlbaV0gPSB0aGlzLl9hcnJheVt0aGlzLl9nZXRDeWNsaWNJbmRleChpKV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9hcnJheSA9IG5ld0FycmF5O1xuICAgICAgICAgICAgdGhpcy5fbWF4TGVuZ3RoID0gbmV3TWF4TGVuZ3RoO1xuICAgICAgICAgICAgdGhpcy5fc3RhcnRJbmRleCA9IDA7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDaXJjdWxhckxpc3QucHJvdG90eXBlLCBcImxlbmd0aFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xlbmd0aDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAobmV3TGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAobmV3TGVuZ3RoID4gdGhpcy5fbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMuX2xlbmd0aDsgaSA8IG5ld0xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FycmF5W2ldID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2xlbmd0aCA9IG5ld0xlbmd0aDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgQ2lyY3VsYXJMaXN0LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FycmF5W3RoaXMuX2dldEN5Y2xpY0luZGV4KGluZGV4KV07XG4gICAgfTtcbiAgICBDaXJjdWxhckxpc3QucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChpbmRleCwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5fYXJyYXlbdGhpcy5fZ2V0Q3ljbGljSW5kZXgoaW5kZXgpXSA9IHZhbHVlO1xuICAgIH07XG4gICAgQ2lyY3VsYXJMaXN0LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2FycmF5W3RoaXMuX2dldEN5Y2xpY0luZGV4KHRoaXMuX2xlbmd0aCldID0gdmFsdWU7XG4gICAgICAgIGlmICh0aGlzLl9sZW5ndGggPT09IHRoaXMuX21heExlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5fc3RhcnRJbmRleCA9ICsrdGhpcy5fc3RhcnRJbmRleCAlIHRoaXMuX21heExlbmd0aDtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgndHJpbScsIDEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fbGVuZ3RoKys7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENpcmN1bGFyTGlzdC5wcm90b3R5cGUucmVjeWNsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2xlbmd0aCAhPT0gdGhpcy5fbWF4TGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbiBvbmx5IHJlY3ljbGUgd2hlbiB0aGUgYnVmZmVyIGlzIGZ1bGwnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zdGFydEluZGV4ID0gKyt0aGlzLl9zdGFydEluZGV4ICUgdGhpcy5fbWF4TGVuZ3RoO1xuICAgICAgICB0aGlzLmVtaXQoJ3RyaW0nLCAxKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FycmF5W3RoaXMuX2dldEN5Y2xpY0luZGV4KHRoaXMuX2xlbmd0aCAtIDEpXTtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDaXJjdWxhckxpc3QucHJvdG90eXBlLCBcImlzRnVsbFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xlbmd0aCA9PT0gdGhpcy5fbWF4TGVuZ3RoO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBDaXJjdWxhckxpc3QucHJvdG90eXBlLnBvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FycmF5W3RoaXMuX2dldEN5Y2xpY0luZGV4KHRoaXMuX2xlbmd0aC0tIC0gMSldO1xuICAgIH07XG4gICAgQ2lyY3VsYXJMaXN0LnByb3RvdHlwZS5zcGxpY2UgPSBmdW5jdGlvbiAoc3RhcnQsIGRlbGV0ZUNvdW50KSB7XG4gICAgICAgIHZhciBpdGVtcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDI7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgaXRlbXNbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlbGV0ZUNvdW50KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCB0aGlzLl9sZW5ndGggLSBkZWxldGVDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYXJyYXlbdGhpcy5fZ2V0Q3ljbGljSW5kZXgoaSldID0gdGhpcy5fYXJyYXlbdGhpcy5fZ2V0Q3ljbGljSW5kZXgoaSArIGRlbGV0ZUNvdW50KV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9sZW5ndGggLT0gZGVsZXRlQ291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0ZW1zICYmIGl0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMuX2xlbmd0aCAtIDE7IGkgPj0gc3RhcnQ7IGktLSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2FycmF5W3RoaXMuX2dldEN5Y2xpY0luZGV4KGkgKyBpdGVtcy5sZW5ndGgpXSA9IHRoaXMuX2FycmF5W3RoaXMuX2dldEN5Y2xpY0luZGV4KGkpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hcnJheVt0aGlzLl9nZXRDeWNsaWNJbmRleChzdGFydCArIGkpXSA9IGl0ZW1zW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX2xlbmd0aCArIGl0ZW1zLmxlbmd0aCA+IHRoaXMuX21heExlbmd0aCkge1xuICAgICAgICAgICAgICAgIHZhciBjb3VudFRvVHJpbSA9ICh0aGlzLl9sZW5ndGggKyBpdGVtcy5sZW5ndGgpIC0gdGhpcy5fbWF4TGVuZ3RoO1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXJ0SW5kZXggKz0gY291bnRUb1RyaW07XG4gICAgICAgICAgICAgICAgdGhpcy5fbGVuZ3RoID0gdGhpcy5fbWF4TGVuZ3RoO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgndHJpbScsIGNvdW50VG9UcmltKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xlbmd0aCArPSBpdGVtcy5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENpcmN1bGFyTGlzdC5wcm90b3R5cGUudHJpbVN0YXJ0ID0gZnVuY3Rpb24gKGNvdW50KSB7XG4gICAgICAgIGlmIChjb3VudCA+IHRoaXMuX2xlbmd0aCkge1xuICAgICAgICAgICAgY291bnQgPSB0aGlzLl9sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RhcnRJbmRleCArPSBjb3VudDtcbiAgICAgICAgdGhpcy5fbGVuZ3RoIC09IGNvdW50O1xuICAgICAgICB0aGlzLmVtaXQoJ3RyaW0nLCBjb3VudCk7XG4gICAgfTtcbiAgICBDaXJjdWxhckxpc3QucHJvdG90eXBlLnNoaWZ0RWxlbWVudHMgPSBmdW5jdGlvbiAoc3RhcnQsIGNvdW50LCBvZmZzZXQpIHtcbiAgICAgICAgaWYgKGNvdW50IDw9IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMuX2xlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzdGFydCBhcmd1bWVudCBvdXQgb2YgcmFuZ2UnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnQgKyBvZmZzZXQgPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBzaGlmdCBlbGVtZW50cyBpbiBsaXN0IGJleW9uZCBpbmRleCAwJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9mZnNldCA+IDApIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBjb3VudCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoc3RhcnQgKyBpICsgb2Zmc2V0LCB0aGlzLmdldChzdGFydCArIGkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBleHBhbmRMaXN0QnkgPSAoc3RhcnQgKyBjb3VudCArIG9mZnNldCkgLSB0aGlzLl9sZW5ndGg7XG4gICAgICAgICAgICBpZiAoZXhwYW5kTGlzdEJ5ID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xlbmd0aCArPSBleHBhbmRMaXN0Qnk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHRoaXMuX2xlbmd0aCA+IHRoaXMuX21heExlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9sZW5ndGgtLTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RhcnRJbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ3RyaW0nLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldChzdGFydCArIGkgKyBvZmZzZXQsIHRoaXMuZ2V0KHN0YXJ0ICsgaSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBDaXJjdWxhckxpc3QucHJvdG90eXBlLl9nZXRDeWNsaWNJbmRleCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuX3N0YXJ0SW5kZXggKyBpbmRleCkgJSB0aGlzLl9tYXhMZW5ndGg7XG4gICAgfTtcbiAgICByZXR1cm4gQ2lyY3VsYXJMaXN0O1xufShFdmVudEVtaXR0ZXJfMS5FdmVudEVtaXR0ZXIpKTtcbmV4cG9ydHMuQ2lyY3VsYXJMaXN0ID0gQ2lyY3VsYXJMaXN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2lyY3VsYXJMaXN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEJ1ZmZlcl8xID0gcmVxdWlyZShcIi4vQnVmZmVyXCIpO1xudmFyIEJ1ZmZlckxpbmVKU0FycmF5ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCdWZmZXJMaW5lSlNBcnJheShjb2xzLCBmaWxsQ2hhckRhdGEsIGlzV3JhcHBlZCkge1xuICAgICAgICB0aGlzLmlzV3JhcHBlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9kYXRhID0gW107XG4gICAgICAgIGlmICghZmlsbENoYXJEYXRhKSB7XG4gICAgICAgICAgICBmaWxsQ2hhckRhdGEgPSBbMCwgQnVmZmVyXzEuTlVMTF9DRUxMX0NIQVIsIEJ1ZmZlcl8xLk5VTExfQ0VMTF9XSURUSCwgQnVmZmVyXzEuTlVMTF9DRUxMX0NPREVdO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29sczsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLl9wdXNoKGZpbGxDaGFyRGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzV3JhcHBlZCkge1xuICAgICAgICAgICAgdGhpcy5pc1dyYXBwZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGVuZ3RoID0gdGhpcy5fZGF0YS5sZW5ndGg7XG4gICAgfVxuICAgIEJ1ZmZlckxpbmVKU0FycmF5LnByb3RvdHlwZS5fcG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGEucG9wKCk7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gdGhpcy5fZGF0YS5sZW5ndGg7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH07XG4gICAgQnVmZmVyTGluZUpTQXJyYXkucHJvdG90eXBlLl9wdXNoID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdGhpcy5fZGF0YS5wdXNoKGRhdGEpO1xuICAgICAgICB0aGlzLmxlbmd0aCA9IHRoaXMuX2RhdGEubGVuZ3RoO1xuICAgIH07XG4gICAgQnVmZmVyTGluZUpTQXJyYXkucHJvdG90eXBlLl9zcGxpY2UgPSBmdW5jdGlvbiAoc3RhcnQsIGRlbGV0ZUNvdW50KSB7XG4gICAgICAgIHZhciBpdGVtcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDI7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgaXRlbXNbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgcmVtb3ZlZCA9IChfYSA9IHRoaXMuX2RhdGEpLnNwbGljZS5hcHBseShfYSwgW3N0YXJ0LCBkZWxldGVDb3VudF0uY29uY2F0KGl0ZW1zKSk7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gdGhpcy5fZGF0YS5sZW5ndGg7XG4gICAgICAgIHJldHVybiByZW1vdmVkO1xuICAgIH07XG4gICAgQnVmZmVyTGluZUpTQXJyYXkucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YVtpbmRleF07XG4gICAgfTtcbiAgICBCdWZmZXJMaW5lSlNBcnJheS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKGluZGV4LCBkYXRhKSB7XG4gICAgICAgIHRoaXMuX2RhdGFbaW5kZXhdID0gZGF0YTtcbiAgICB9O1xuICAgIEJ1ZmZlckxpbmVKU0FycmF5LnByb3RvdHlwZS5pbnNlcnRDZWxscyA9IGZ1bmN0aW9uIChwb3MsIG4sIGNoKSB7XG4gICAgICAgIHdoaWxlIChuLS0pIHtcbiAgICAgICAgICAgIHRoaXMuX3NwbGljZShwb3MsIDAsIGNoKTtcbiAgICAgICAgICAgIHRoaXMuX3BvcCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCdWZmZXJMaW5lSlNBcnJheS5wcm90b3R5cGUuZGVsZXRlQ2VsbHMgPSBmdW5jdGlvbiAocG9zLCBuLCBmaWxsQ2hhckRhdGEpIHtcbiAgICAgICAgd2hpbGUgKG4tLSkge1xuICAgICAgICAgICAgdGhpcy5fc3BsaWNlKHBvcywgMSk7XG4gICAgICAgICAgICB0aGlzLl9wdXNoKGZpbGxDaGFyRGF0YSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJ1ZmZlckxpbmVKU0FycmF5LnByb3RvdHlwZS5yZXBsYWNlQ2VsbHMgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgZmlsbENoYXJEYXRhKSB7XG4gICAgICAgIHdoaWxlIChzdGFydCA8IGVuZCAmJiBzdGFydCA8IHRoaXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnNldChzdGFydCsrLCBmaWxsQ2hhckRhdGEpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCdWZmZXJMaW5lSlNBcnJheS5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24gKGNvbHMsIGZpbGxDaGFyRGF0YSwgc2hyaW5rKSB7XG4gICAgICAgIGlmIChzaHJpbmsgPT09IHZvaWQgMCkgeyBzaHJpbmsgPSBmYWxzZTsgfVxuICAgICAgICB3aGlsZSAodGhpcy5fZGF0YS5sZW5ndGggPCBjb2xzKSB7XG4gICAgICAgICAgICB0aGlzLl9kYXRhLnB1c2goZmlsbENoYXJEYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hyaW5rKSB7XG4gICAgICAgICAgICB3aGlsZSAodGhpcy5fZGF0YS5sZW5ndGggPiBjb2xzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGF0YS5wb3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxlbmd0aCA9IHRoaXMuX2RhdGEubGVuZ3RoO1xuICAgIH07XG4gICAgQnVmZmVyTGluZUpTQXJyYXkucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiAoZmlsbENoYXJEYXRhKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdGhpcy5zZXQoaSwgZmlsbENoYXJEYXRhKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQnVmZmVyTGluZUpTQXJyYXkucHJvdG90eXBlLmNvcHlGcm9tID0gZnVuY3Rpb24gKGxpbmUpIHtcbiAgICAgICAgdGhpcy5fZGF0YSA9IGxpbmUuX2RhdGEuc2xpY2UoMCk7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gbGluZS5sZW5ndGg7XG4gICAgICAgIHRoaXMuaXNXcmFwcGVkID0gbGluZS5pc1dyYXBwZWQ7XG4gICAgfTtcbiAgICBCdWZmZXJMaW5lSlNBcnJheS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBuZXdMaW5lID0gbmV3IEJ1ZmZlckxpbmVKU0FycmF5KDApO1xuICAgICAgICBuZXdMaW5lLmNvcHlGcm9tKHRoaXMpO1xuICAgICAgICByZXR1cm4gbmV3TGluZTtcbiAgICB9O1xuICAgIHJldHVybiBCdWZmZXJMaW5lSlNBcnJheTtcbn0oKSk7XG5leHBvcnRzLkJ1ZmZlckxpbmVKU0FycmF5ID0gQnVmZmVyTGluZUpTQXJyYXk7XG52YXIgQ0VMTF9TSVpFID0gMztcbnZhciBCdWZmZXJMaW5lID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCdWZmZXJMaW5lKGNvbHMsIGZpbGxDaGFyRGF0YSwgaXNXcmFwcGVkKSB7XG4gICAgICAgIGlmIChpc1dyYXBwZWQgPT09IHZvaWQgMCkgeyBpc1dyYXBwZWQgPSBmYWxzZTsgfVxuICAgICAgICB0aGlzLmlzV3JhcHBlZCA9IGlzV3JhcHBlZDtcbiAgICAgICAgdGhpcy5fZGF0YSA9IG51bGw7XG4gICAgICAgIHRoaXMuX2NvbWJpbmVkID0ge307XG4gICAgICAgIGlmICghZmlsbENoYXJEYXRhKSB7XG4gICAgICAgICAgICBmaWxsQ2hhckRhdGEgPSBbMCwgQnVmZmVyXzEuTlVMTF9DRUxMX0NIQVIsIEJ1ZmZlcl8xLk5VTExfQ0VMTF9XSURUSCwgQnVmZmVyXzEuTlVMTF9DRUxMX0NPREVdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb2xzKSB7XG4gICAgICAgICAgICB0aGlzLl9kYXRhID0gbmV3IFVpbnQzMkFycmF5KGNvbHMgKiBDRUxMX1NJWkUpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2xzOyArK2kpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldChpLCBmaWxsQ2hhckRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMubGVuZ3RoID0gY29scztcbiAgICB9XG4gICAgQnVmZmVyTGluZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIHZhciBzdHJpbmdEYXRhID0gdGhpcy5fZGF0YVtpbmRleCAqIENFTExfU0laRSArIDFdO1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgdGhpcy5fZGF0YVtpbmRleCAqIENFTExfU0laRSArIDBdLFxuICAgICAgICAgICAgKHN0cmluZ0RhdGEgJiAweDgwMDAwMDAwKVxuICAgICAgICAgICAgICAgID8gdGhpcy5fY29tYmluZWRbaW5kZXhdXG4gICAgICAgICAgICAgICAgOiAoc3RyaW5nRGF0YSkgPyBTdHJpbmcuZnJvbUNoYXJDb2RlKHN0cmluZ0RhdGEpIDogJycsXG4gICAgICAgICAgICB0aGlzLl9kYXRhW2luZGV4ICogQ0VMTF9TSVpFICsgMl0sXG4gICAgICAgICAgICAoc3RyaW5nRGF0YSAmIDB4ODAwMDAwMDApXG4gICAgICAgICAgICAgICAgPyB0aGlzLl9jb21iaW5lZFtpbmRleF0uY2hhckNvZGVBdCh0aGlzLl9jb21iaW5lZFtpbmRleF0ubGVuZ3RoIC0gMSlcbiAgICAgICAgICAgICAgICA6IHN0cmluZ0RhdGFcbiAgICAgICAgXTtcbiAgICB9O1xuICAgIEJ1ZmZlckxpbmUucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChpbmRleCwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5fZGF0YVtpbmRleCAqIENFTExfU0laRSArIDBdID0gdmFsdWVbMF07XG4gICAgICAgIGlmICh2YWx1ZVsxXS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB0aGlzLl9jb21iaW5lZFtpbmRleF0gPSB2YWx1ZVsxXTtcbiAgICAgICAgICAgIHRoaXMuX2RhdGFbaW5kZXggKiBDRUxMX1NJWkUgKyAxXSA9IGluZGV4IHwgMHg4MDAwMDAwMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2RhdGFbaW5kZXggKiBDRUxMX1NJWkUgKyAxXSA9IHZhbHVlWzFdLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZGF0YVtpbmRleCAqIENFTExfU0laRSArIDJdID0gdmFsdWVbMl07XG4gICAgfTtcbiAgICBCdWZmZXJMaW5lLnByb3RvdHlwZS5pbnNlcnRDZWxscyA9IGZ1bmN0aW9uIChwb3MsIG4sIGZpbGxDaGFyRGF0YSkge1xuICAgICAgICBwb3MgJT0gdGhpcy5sZW5ndGg7XG4gICAgICAgIGlmIChuIDwgdGhpcy5sZW5ndGggLSBwb3MpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aCAtIHBvcyAtIG4gLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0KHBvcyArIG4gKyBpLCB0aGlzLmdldChwb3MgKyBpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0KHBvcyArIGksIGZpbGxDaGFyRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gcG9zOyBpIDwgdGhpcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0KGksIGZpbGxDaGFyRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJ1ZmZlckxpbmUucHJvdG90eXBlLmRlbGV0ZUNlbGxzID0gZnVuY3Rpb24gKHBvcywgbiwgZmlsbENoYXJEYXRhKSB7XG4gICAgICAgIHBvcyAlPSB0aGlzLmxlbmd0aDtcbiAgICAgICAgaWYgKG4gPCB0aGlzLmxlbmd0aCAtIHBvcykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAtIHBvcyAtIG47ICsraSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0KHBvcyArIGksIHRoaXMuZ2V0KHBvcyArIG4gKyBpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSBuOyBpIDwgdGhpcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0KGksIGZpbGxDaGFyRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gcG9zOyBpIDwgdGhpcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0KGksIGZpbGxDaGFyRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJ1ZmZlckxpbmUucHJvdG90eXBlLnJlcGxhY2VDZWxscyA9IGZ1bmN0aW9uIChzdGFydCwgZW5kLCBmaWxsQ2hhckRhdGEpIHtcbiAgICAgICAgd2hpbGUgKHN0YXJ0IDwgZW5kICYmIHN0YXJ0IDwgdGhpcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0KHN0YXJ0KyssIGZpbGxDaGFyRGF0YSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJ1ZmZlckxpbmUucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uIChjb2xzLCBmaWxsQ2hhckRhdGEsIHNocmluaykge1xuICAgICAgICBpZiAoc2hyaW5rID09PSB2b2lkIDApIHsgc2hyaW5rID0gZmFsc2U7IH1cbiAgICAgICAgaWYgKGNvbHMgPT09IHRoaXMubGVuZ3RoIHx8ICghc2hyaW5rICYmIGNvbHMgPCB0aGlzLmxlbmd0aCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29scyA+IHRoaXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IG5ldyBVaW50MzJBcnJheShjb2xzICogQ0VMTF9TSVpFKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGlmIChjb2xzICogQ0VMTF9TSVpFIDwgdGhpcy5fZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5zZXQodGhpcy5fZGF0YS5zdWJhcnJheSgwLCBjb2xzICogQ0VMTF9TSVpFKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLnNldCh0aGlzLl9kYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9kYXRhID0gZGF0YTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aDsgaSA8IGNvbHM7ICsraSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0KGksIGZpbGxDaGFyRGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc2hyaW5rKSB7XG4gICAgICAgICAgICBpZiAoY29scykge1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gbmV3IFVpbnQzMkFycmF5KGNvbHMgKiBDRUxMX1NJWkUpO1xuICAgICAgICAgICAgICAgIGRhdGEuc2V0KHRoaXMuX2RhdGEuc3ViYXJyYXkoMCwgY29scyAqIENFTExfU0laRSkpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2RhdGEgPSBkYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGF0YSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sZW5ndGggPSBjb2xzO1xuICAgIH07XG4gICAgQnVmZmVyTGluZS5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIChmaWxsQ2hhckRhdGEpIHtcbiAgICAgICAgdGhpcy5fY29tYmluZWQgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB0aGlzLnNldChpLCBmaWxsQ2hhckRhdGEpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCdWZmZXJMaW5lLnByb3RvdHlwZS5jb3B5RnJvbSA9IGZ1bmN0aW9uIChsaW5lKSB7XG4gICAgICAgIGlmICh0aGlzLmxlbmd0aCAhPT0gbGluZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuX2RhdGEgPSBuZXcgVWludDMyQXJyYXkobGluZS5fZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9kYXRhLnNldChsaW5lLl9kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxlbmd0aCA9IGxpbmUubGVuZ3RoO1xuICAgICAgICB0aGlzLl9jb21iaW5lZCA9IHt9O1xuICAgICAgICBmb3IgKHZhciBlbCBpbiBsaW5lLl9jb21iaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fY29tYmluZWRbZWxdID0gbGluZS5fY29tYmluZWRbZWxdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNXcmFwcGVkID0gbGluZS5pc1dyYXBwZWQ7XG4gICAgfTtcbiAgICBCdWZmZXJMaW5lLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5ld0xpbmUgPSBuZXcgQnVmZmVyTGluZSgwKTtcbiAgICAgICAgbmV3TGluZS5fZGF0YSA9IG5ldyBVaW50MzJBcnJheSh0aGlzLl9kYXRhKTtcbiAgICAgICAgbmV3TGluZS5sZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgZWwgaW4gdGhpcy5fY29tYmluZWQpIHtcbiAgICAgICAgICAgIG5ld0xpbmUuX2NvbWJpbmVkW2VsXSA9IHRoaXMuX2NvbWJpbmVkW2VsXTtcbiAgICAgICAgfVxuICAgICAgICBuZXdMaW5lLmlzV3JhcHBlZCA9IHRoaXMuaXNXcmFwcGVkO1xuICAgICAgICByZXR1cm4gbmV3TGluZTtcbiAgICB9O1xuICAgIHJldHVybiBCdWZmZXJMaW5lO1xufSgpKTtcbmV4cG9ydHMuQnVmZmVyTGluZSA9IEJ1ZmZlckxpbmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1CdWZmZXJMaW5lLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIENvbXBvc2l0aW9uSGVscGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb21wb3NpdGlvbkhlbHBlcihfdGV4dGFyZWEsIF9jb21wb3NpdGlvblZpZXcsIF90ZXJtaW5hbCkge1xuICAgICAgICB0aGlzLl90ZXh0YXJlYSA9IF90ZXh0YXJlYTtcbiAgICAgICAgdGhpcy5fY29tcG9zaXRpb25WaWV3ID0gX2NvbXBvc2l0aW9uVmlldztcbiAgICAgICAgdGhpcy5fdGVybWluYWwgPSBfdGVybWluYWw7XG4gICAgICAgIHRoaXMuX2lzQ29tcG9zaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2lzU2VuZGluZ0NvbXBvc2l0aW9uID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2NvbXBvc2l0aW9uUG9zaXRpb24gPSB7IHN0YXJ0OiBudWxsLCBlbmQ6IG51bGwgfTtcbiAgICB9XG4gICAgQ29tcG9zaXRpb25IZWxwZXIucHJvdG90eXBlLmNvbXBvc2l0aW9uc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2lzQ29tcG9zaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fY29tcG9zaXRpb25Qb3NpdGlvbi5zdGFydCA9IHRoaXMuX3RleHRhcmVhLnZhbHVlLmxlbmd0aDtcbiAgICAgICAgdGhpcy5fY29tcG9zaXRpb25WaWV3LnRleHRDb250ZW50ID0gJyc7XG4gICAgICAgIHRoaXMuX2NvbXBvc2l0aW9uVmlldy5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgICB9O1xuICAgIENvbXBvc2l0aW9uSGVscGVyLnByb3RvdHlwZS5jb21wb3NpdGlvbnVwZGF0ZSA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLl9jb21wb3NpdGlvblZpZXcudGV4dENvbnRlbnQgPSBldi5kYXRhO1xuICAgICAgICB0aGlzLnVwZGF0ZUNvbXBvc2l0aW9uRWxlbWVudHMoKTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5fY29tcG9zaXRpb25Qb3NpdGlvbi5lbmQgPSBfdGhpcy5fdGV4dGFyZWEudmFsdWUubGVuZ3RoO1xuICAgICAgICB9LCAwKTtcbiAgICB9O1xuICAgIENvbXBvc2l0aW9uSGVscGVyLnByb3RvdHlwZS5jb21wb3NpdGlvbmVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fZmluYWxpemVDb21wb3NpdGlvbih0cnVlKTtcbiAgICB9O1xuICAgIENvbXBvc2l0aW9uSGVscGVyLnByb3RvdHlwZS5rZXlkb3duID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIGlmICh0aGlzLl9pc0NvbXBvc2luZyB8fCB0aGlzLl9pc1NlbmRpbmdDb21wb3NpdGlvbikge1xuICAgICAgICAgICAgaWYgKGV2LmtleUNvZGUgPT09IDIyOSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGV2LmtleUNvZGUgPT09IDE2IHx8IGV2LmtleUNvZGUgPT09IDE3IHx8IGV2LmtleUNvZGUgPT09IDE4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fZmluYWxpemVDb21wb3NpdGlvbihmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2LmtleUNvZGUgPT09IDIyOSkge1xuICAgICAgICAgICAgdGhpcy5faGFuZGxlQW55VGV4dGFyZWFDaGFuZ2VzKCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBDb21wb3NpdGlvbkhlbHBlci5wcm90b3R5cGUuX2ZpbmFsaXplQ29tcG9zaXRpb24gPSBmdW5jdGlvbiAod2FpdEZvclByb3BvZ2F0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuX2NvbXBvc2l0aW9uVmlldy5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgICAgdGhpcy5faXNDb21wb3NpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fY2xlYXJUZXh0YXJlYVBvc2l0aW9uKCk7XG4gICAgICAgIGlmICghd2FpdEZvclByb3BvZ2F0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9pc1NlbmRpbmdDb21wb3NpdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcy5fdGV4dGFyZWEudmFsdWUuc3Vic3RyaW5nKHRoaXMuX2NvbXBvc2l0aW9uUG9zaXRpb24uc3RhcnQsIHRoaXMuX2NvbXBvc2l0aW9uUG9zaXRpb24uZW5kKTtcbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmhhbmRsZXIoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRDb21wb3NpdGlvblBvc2l0aW9uXzEgPSB7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IHRoaXMuX2NvbXBvc2l0aW9uUG9zaXRpb24uc3RhcnQsXG4gICAgICAgICAgICAgICAgZW5kOiB0aGlzLl9jb21wb3NpdGlvblBvc2l0aW9uLmVuZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuX2lzU2VuZGluZ0NvbXBvc2l0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5faXNTZW5kaW5nQ29tcG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2lzU2VuZGluZ0NvbXBvc2l0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9pc0NvbXBvc2luZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQgPSBfdGhpcy5fdGV4dGFyZWEudmFsdWUuc3Vic3RyaW5nKGN1cnJlbnRDb21wb3NpdGlvblBvc2l0aW9uXzEuc3RhcnQsIGN1cnJlbnRDb21wb3NpdGlvblBvc2l0aW9uXzEuZW5kKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0ID0gX3RoaXMuX3RleHRhcmVhLnZhbHVlLnN1YnN0cmluZyhjdXJyZW50Q29tcG9zaXRpb25Qb3NpdGlvbl8xLnN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fdGVybWluYWwuaGFuZGxlcihpbnB1dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbXBvc2l0aW9uSGVscGVyLnByb3RvdHlwZS5faGFuZGxlQW55VGV4dGFyZWFDaGFuZ2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLl90ZXh0YXJlYS52YWx1ZTtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIV90aGlzLl9pc0NvbXBvc2luZykge1xuICAgICAgICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IF90aGlzLl90ZXh0YXJlYS52YWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgZGlmZiA9IG5ld1ZhbHVlLnJlcGxhY2Uob2xkVmFsdWUsICcnKTtcbiAgICAgICAgICAgICAgICBpZiAoZGlmZi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl90ZXJtaW5hbC5oYW5kbGVyKGRpZmYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgMCk7XG4gICAgfTtcbiAgICBDb21wb3NpdGlvbkhlbHBlci5wcm90b3R5cGUudXBkYXRlQ29tcG9zaXRpb25FbGVtZW50cyA9IGZ1bmN0aW9uIChkb250UmVjdXJzZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMuX2lzQ29tcG9zaW5nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci5pc0N1cnNvckluVmlld3BvcnQpIHtcbiAgICAgICAgICAgIHZhciBjZWxsSGVpZ2h0ID0gTWF0aC5jZWlsKHRoaXMuX3Rlcm1pbmFsLmNoYXJNZWFzdXJlLmhlaWdodCAqIHRoaXMuX3Rlcm1pbmFsLm9wdGlvbnMubGluZUhlaWdodCk7XG4gICAgICAgICAgICB2YXIgY3Vyc29yVG9wID0gdGhpcy5fdGVybWluYWwuYnVmZmVyLnkgKiBjZWxsSGVpZ2h0O1xuICAgICAgICAgICAgdmFyIGN1cnNvckxlZnQgPSB0aGlzLl90ZXJtaW5hbC5idWZmZXIueCAqIHRoaXMuX3Rlcm1pbmFsLmNoYXJNZWFzdXJlLndpZHRoO1xuICAgICAgICAgICAgdGhpcy5fY29tcG9zaXRpb25WaWV3LnN0eWxlLmxlZnQgPSBjdXJzb3JMZWZ0ICsgJ3B4JztcbiAgICAgICAgICAgIHRoaXMuX2NvbXBvc2l0aW9uVmlldy5zdHlsZS50b3AgPSBjdXJzb3JUb3AgKyAncHgnO1xuICAgICAgICAgICAgdGhpcy5fY29tcG9zaXRpb25WaWV3LnN0eWxlLmhlaWdodCA9IGNlbGxIZWlnaHQgKyAncHgnO1xuICAgICAgICAgICAgdGhpcy5fY29tcG9zaXRpb25WaWV3LnN0eWxlLmxpbmVIZWlnaHQgPSBjZWxsSGVpZ2h0ICsgJ3B4JztcbiAgICAgICAgICAgIHZhciBjb21wb3NpdGlvblZpZXdCb3VuZHMgPSB0aGlzLl9jb21wb3NpdGlvblZpZXcuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICB0aGlzLl90ZXh0YXJlYS5zdHlsZS5sZWZ0ID0gY3Vyc29yTGVmdCArICdweCc7XG4gICAgICAgICAgICB0aGlzLl90ZXh0YXJlYS5zdHlsZS50b3AgPSBjdXJzb3JUb3AgKyAncHgnO1xuICAgICAgICAgICAgdGhpcy5fdGV4dGFyZWEuc3R5bGUud2lkdGggPSBjb21wb3NpdGlvblZpZXdCb3VuZHMud2lkdGggKyAncHgnO1xuICAgICAgICAgICAgdGhpcy5fdGV4dGFyZWEuc3R5bGUuaGVpZ2h0ID0gY29tcG9zaXRpb25WaWV3Qm91bmRzLmhlaWdodCArICdweCc7XG4gICAgICAgICAgICB0aGlzLl90ZXh0YXJlYS5zdHlsZS5saW5lSGVpZ2h0ID0gY29tcG9zaXRpb25WaWV3Qm91bmRzLmhlaWdodCArICdweCc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkb250UmVjdXJzZSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy51cGRhdGVDb21wb3NpdGlvbkVsZW1lbnRzKHRydWUpOyB9LCAwKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29tcG9zaXRpb25IZWxwZXIucHJvdG90eXBlLl9jbGVhclRleHRhcmVhUG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3RleHRhcmVhLnN0eWxlLmxlZnQgPSAnJztcbiAgICAgICAgdGhpcy5fdGV4dGFyZWEuc3R5bGUudG9wID0gJyc7XG4gICAgfTtcbiAgICByZXR1cm4gQ29tcG9zaXRpb25IZWxwZXI7XG59KCkpO1xuZXhwb3J0cy5Db21wb3NpdGlvbkhlbHBlciA9IENvbXBvc2l0aW9uSGVscGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29tcG9zaXRpb25IZWxwZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIExpZmVjeWNsZV8xID0gcmVxdWlyZShcIi4vY29tbW9uL0xpZmVjeWNsZVwiKTtcbnZhciBMaWZlY3ljbGVfMiA9IHJlcXVpcmUoXCIuL3VpL0xpZmVjeWNsZVwiKTtcbnZhciBGQUxMQkFDS19TQ1JPTExfQkFSX1dJRFRIID0gMTU7XG52YXIgVmlld3BvcnQgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhWaWV3cG9ydCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBWaWV3cG9ydChfdGVybWluYWwsIF92aWV3cG9ydEVsZW1lbnQsIF9zY3JvbGxBcmVhLCBfY2hhck1lYXN1cmUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX3Rlcm1pbmFsID0gX3Rlcm1pbmFsO1xuICAgICAgICBfdGhpcy5fdmlld3BvcnRFbGVtZW50ID0gX3ZpZXdwb3J0RWxlbWVudDtcbiAgICAgICAgX3RoaXMuX3Njcm9sbEFyZWEgPSBfc2Nyb2xsQXJlYTtcbiAgICAgICAgX3RoaXMuX2NoYXJNZWFzdXJlID0gX2NoYXJNZWFzdXJlO1xuICAgICAgICBfdGhpcy5zY3JvbGxCYXJXaWR0aCA9IDA7XG4gICAgICAgIF90aGlzLl9jdXJyZW50Um93SGVpZ2h0ID0gMDtcbiAgICAgICAgX3RoaXMuX2xhc3RSZWNvcmRlZEJ1ZmZlckxlbmd0aCA9IDA7XG4gICAgICAgIF90aGlzLl9sYXN0UmVjb3JkZWRWaWV3cG9ydEhlaWdodCA9IDA7XG4gICAgICAgIF90aGlzLl9sYXN0UmVjb3JkZWRCdWZmZXJIZWlnaHQgPSAwO1xuICAgICAgICBfdGhpcy5fbGFzdFNjcm9sbFRvcCA9IDA7XG4gICAgICAgIF90aGlzLl93aGVlbFBhcnRpYWxTY3JvbGwgPSAwO1xuICAgICAgICBfdGhpcy5fcmVmcmVzaEFuaW1hdGlvbkZyYW1lID0gbnVsbDtcbiAgICAgICAgX3RoaXMuX2lnbm9yZU5leHRTY3JvbGxFdmVudCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5zY3JvbGxCYXJXaWR0aCA9IChfdGhpcy5fdmlld3BvcnRFbGVtZW50Lm9mZnNldFdpZHRoIC0gX3RoaXMuX3Njcm9sbEFyZWEub2Zmc2V0V2lkdGgpIHx8IEZBTExCQUNLX1NDUk9MTF9CQVJfV0lEVEg7XG4gICAgICAgIF90aGlzLnJlZ2lzdGVyKExpZmVjeWNsZV8yLmFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcihfdGhpcy5fdmlld3BvcnRFbGVtZW50LCAnc2Nyb2xsJywgX3RoaXMuX29uU2Nyb2xsLmJpbmQoX3RoaXMpKSk7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc3luY1Njcm9sbEFyZWEoKTsgfSwgMCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgVmlld3BvcnQucHJvdG90eXBlLm9uVGhlbWVDaGFuZ2VkID0gZnVuY3Rpb24gKGNvbG9ycykge1xuICAgICAgICB0aGlzLl92aWV3cG9ydEVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gY29sb3JzLmJhY2tncm91bmQuY3NzO1xuICAgIH07XG4gICAgVmlld3BvcnQucHJvdG90eXBlLl9yZWZyZXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5fcmVmcmVzaEFuaW1hdGlvbkZyYW1lID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9yZWZyZXNoQW5pbWF0aW9uRnJhbWUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX2lubmVyUmVmcmVzaCgpOyB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVmlld3BvcnQucHJvdG90eXBlLl9pbm5lclJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9jaGFyTWVhc3VyZS5oZWlnaHQgPiAwKSB7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50Um93SGVpZ2h0ID0gdGhpcy5fdGVybWluYWwucmVuZGVyZXIuZGltZW5zaW9ucy5zY2FsZWRDZWxsSGVpZ2h0IC8gd2luZG93LmRldmljZVBpeGVsUmF0aW87XG4gICAgICAgICAgICB0aGlzLl9sYXN0UmVjb3JkZWRWaWV3cG9ydEhlaWdodCA9IHRoaXMuX3ZpZXdwb3J0RWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgICB2YXIgbmV3QnVmZmVySGVpZ2h0ID0gTWF0aC5yb3VuZCh0aGlzLl9jdXJyZW50Um93SGVpZ2h0ICogdGhpcy5fbGFzdFJlY29yZGVkQnVmZmVyTGVuZ3RoKSArICh0aGlzLl9sYXN0UmVjb3JkZWRWaWV3cG9ydEhlaWdodCAtIHRoaXMuX3Rlcm1pbmFsLnJlbmRlcmVyLmRpbWVuc2lvbnMuY2FudmFzSGVpZ2h0KTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9sYXN0UmVjb3JkZWRCdWZmZXJIZWlnaHQgIT09IG5ld0J1ZmZlckhlaWdodCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xhc3RSZWNvcmRlZEJ1ZmZlckhlaWdodCA9IG5ld0J1ZmZlckhlaWdodDtcbiAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGxBcmVhLnN0eWxlLmhlaWdodCA9IHRoaXMuX2xhc3RSZWNvcmRlZEJ1ZmZlckhlaWdodCArICdweCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNjcm9sbFRvcCA9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ZGlzcCAqIHRoaXMuX2N1cnJlbnRSb3dIZWlnaHQ7XG4gICAgICAgIGlmICh0aGlzLl92aWV3cG9ydEVsZW1lbnQuc2Nyb2xsVG9wICE9PSBzY3JvbGxUb3ApIHtcbiAgICAgICAgICAgIHRoaXMuX2lnbm9yZU5leHRTY3JvbGxFdmVudCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl92aWV3cG9ydEVsZW1lbnQuc2Nyb2xsVG9wID0gc2Nyb2xsVG9wO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3JlZnJlc2hBbmltYXRpb25GcmFtZSA9IG51bGw7XG4gICAgfTtcbiAgICBWaWV3cG9ydC5wcm90b3R5cGUuc3luY1Njcm9sbEFyZWEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9sYXN0UmVjb3JkZWRCdWZmZXJMZW5ndGggIT09IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci5saW5lcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuX2xhc3RSZWNvcmRlZEJ1ZmZlckxlbmd0aCA9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci5saW5lcy5sZW5ndGg7XG4gICAgICAgICAgICB0aGlzLl9yZWZyZXNoKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2xhc3RSZWNvcmRlZFZpZXdwb3J0SGVpZ2h0ICE9PSB0aGlzLl90ZXJtaW5hbC5yZW5kZXJlci5kaW1lbnNpb25zLmNhbnZhc0hlaWdodCkge1xuICAgICAgICAgICAgdGhpcy5fcmVmcmVzaCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuZXdTY3JvbGxUb3AgPSB0aGlzLl90ZXJtaW5hbC5idWZmZXIueWRpc3AgKiB0aGlzLl9jdXJyZW50Um93SGVpZ2h0O1xuICAgICAgICBpZiAodGhpcy5fbGFzdFNjcm9sbFRvcCAhPT0gbmV3U2Nyb2xsVG9wKSB7XG4gICAgICAgICAgICB0aGlzLl9yZWZyZXNoKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2xhc3RTY3JvbGxUb3AgIT09IHRoaXMuX3ZpZXdwb3J0RWxlbWVudC5zY3JvbGxUb3ApIHtcbiAgICAgICAgICAgIHRoaXMuX3JlZnJlc2goKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fdGVybWluYWwucmVuZGVyZXIuZGltZW5zaW9ucy5zY2FsZWRDZWxsSGVpZ2h0IC8gd2luZG93LmRldmljZVBpeGVsUmF0aW8gIT09IHRoaXMuX2N1cnJlbnRSb3dIZWlnaHQpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlZnJlc2goKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVmlld3BvcnQucHJvdG90eXBlLl9vblNjcm9sbCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICB0aGlzLl9sYXN0U2Nyb2xsVG9wID0gdGhpcy5fdmlld3BvcnRFbGVtZW50LnNjcm9sbFRvcDtcbiAgICAgICAgaWYgKCF0aGlzLl92aWV3cG9ydEVsZW1lbnQub2Zmc2V0UGFyZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2lnbm9yZU5leHRTY3JvbGxFdmVudCkge1xuICAgICAgICAgICAgdGhpcy5faWdub3JlTmV4dFNjcm9sbEV2ZW50ID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5ld1JvdyA9IE1hdGgucm91bmQodGhpcy5fbGFzdFNjcm9sbFRvcCAvIHRoaXMuX2N1cnJlbnRSb3dIZWlnaHQpO1xuICAgICAgICB2YXIgZGlmZiA9IG5ld1JvdyAtIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ZGlzcDtcbiAgICAgICAgdGhpcy5fdGVybWluYWwuc2Nyb2xsTGluZXMoZGlmZiwgdHJ1ZSk7XG4gICAgfTtcbiAgICBWaWV3cG9ydC5wcm90b3R5cGUub25XaGVlbCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICB2YXIgYW1vdW50ID0gdGhpcy5fZ2V0UGl4ZWxzU2Nyb2xsZWQoZXYpO1xuICAgICAgICBpZiAoYW1vdW50ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdmlld3BvcnRFbGVtZW50LnNjcm9sbFRvcCArPSBhbW91bnQ7XG4gICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfTtcbiAgICBWaWV3cG9ydC5wcm90b3R5cGUuX2dldFBpeGVsc1Njcm9sbGVkID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIGlmIChldi5kZWx0YVkgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhbW91bnQgPSBldi5kZWx0YVk7XG4gICAgICAgIGlmIChldi5kZWx0YU1vZGUgPT09IFdoZWVsRXZlbnQuRE9NX0RFTFRBX0xJTkUpIHtcbiAgICAgICAgICAgIGFtb3VudCAqPSB0aGlzLl9jdXJyZW50Um93SGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGV2LmRlbHRhTW9kZSA9PT0gV2hlZWxFdmVudC5ET01fREVMVEFfUEFHRSkge1xuICAgICAgICAgICAgYW1vdW50ICo9IHRoaXMuX2N1cnJlbnRSb3dIZWlnaHQgKiB0aGlzLl90ZXJtaW5hbC5yb3dzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbW91bnQ7XG4gICAgfTtcbiAgICBWaWV3cG9ydC5wcm90b3R5cGUuZ2V0TGluZXNTY3JvbGxlZCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICBpZiAoZXYuZGVsdGFZID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYW1vdW50ID0gZXYuZGVsdGFZO1xuICAgICAgICBpZiAoZXYuZGVsdGFNb2RlID09PSBXaGVlbEV2ZW50LkRPTV9ERUxUQV9QSVhFTCkge1xuICAgICAgICAgICAgYW1vdW50IC89IHRoaXMuX2N1cnJlbnRSb3dIZWlnaHQgKyAwLjA7XG4gICAgICAgICAgICB0aGlzLl93aGVlbFBhcnRpYWxTY3JvbGwgKz0gYW1vdW50O1xuICAgICAgICAgICAgYW1vdW50ID0gTWF0aC5mbG9vcihNYXRoLmFicyh0aGlzLl93aGVlbFBhcnRpYWxTY3JvbGwpKSAqICh0aGlzLl93aGVlbFBhcnRpYWxTY3JvbGwgPiAwID8gMSA6IC0xKTtcbiAgICAgICAgICAgIHRoaXMuX3doZWVsUGFydGlhbFNjcm9sbCAlPSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGV2LmRlbHRhTW9kZSA9PT0gV2hlZWxFdmVudC5ET01fREVMVEFfUEFHRSkge1xuICAgICAgICAgICAgYW1vdW50ICo9IHRoaXMuX3Rlcm1pbmFsLnJvd3M7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFtb3VudDtcbiAgICB9O1xuICAgIFZpZXdwb3J0LnByb3RvdHlwZS5vblRvdWNoU3RhcnQgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgdGhpcy5fbGFzdFRvdWNoWSA9IGV2LnRvdWNoZXNbMF0ucGFnZVk7XG4gICAgfTtcbiAgICBWaWV3cG9ydC5wcm90b3R5cGUub25Ub3VjaE1vdmUgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgdmFyIGRlbHRhWSA9IHRoaXMuX2xhc3RUb3VjaFkgLSBldi50b3VjaGVzWzBdLnBhZ2VZO1xuICAgICAgICB0aGlzLl9sYXN0VG91Y2hZID0gZXYudG91Y2hlc1swXS5wYWdlWTtcbiAgICAgICAgaWYgKGRlbHRhWSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ZpZXdwb3J0RWxlbWVudC5zY3JvbGxUb3AgKz0gZGVsdGFZO1xuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH07XG4gICAgcmV0dXJuIFZpZXdwb3J0O1xufShMaWZlY3ljbGVfMS5EaXNwb3NhYmxlKSk7XG5leHBvcnRzLlZpZXdwb3J0ID0gVmlld3BvcnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1WaWV3cG9ydC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIHByZXBhcmVUZXh0Rm9yVGVybWluYWwodGV4dCkge1xuICAgIHJldHVybiB0ZXh0LnJlcGxhY2UoL1xccj9cXG4vZywgJ1xccicpO1xufVxuZXhwb3J0cy5wcmVwYXJlVGV4dEZvclRlcm1pbmFsID0gcHJlcGFyZVRleHRGb3JUZXJtaW5hbDtcbmZ1bmN0aW9uIGJyYWNrZXRUZXh0Rm9yUGFzdGUodGV4dCwgYnJhY2tldGVkUGFzdGVNb2RlKSB7XG4gICAgaWYgKGJyYWNrZXRlZFBhc3RlTW9kZSkge1xuICAgICAgICByZXR1cm4gJ1xceDFiWzIwMH4nICsgdGV4dCArICdcXHgxYlsyMDF+JztcbiAgICB9XG4gICAgcmV0dXJuIHRleHQ7XG59XG5leHBvcnRzLmJyYWNrZXRUZXh0Rm9yUGFzdGUgPSBicmFja2V0VGV4dEZvclBhc3RlO1xuZnVuY3Rpb24gY29weUhhbmRsZXIoZXYsIHRlcm0sIHNlbGVjdGlvbk1hbmFnZXIpIHtcbiAgICBpZiAodGVybS5icm93c2VyLmlzTVNJRSkge1xuICAgICAgICB3aW5kb3cuY2xpcGJvYXJkRGF0YS5zZXREYXRhKCdUZXh0Jywgc2VsZWN0aW9uTWFuYWdlci5zZWxlY3Rpb25UZXh0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGV2LmNsaXBib2FyZERhdGEuc2V0RGF0YSgndGV4dC9wbGFpbicsIHNlbGVjdGlvbk1hbmFnZXIuc2VsZWN0aW9uVGV4dCk7XG4gICAgfVxuICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG59XG5leHBvcnRzLmNvcHlIYW5kbGVyID0gY29weUhhbmRsZXI7XG5mdW5jdGlvbiBwYXN0ZUhhbmRsZXIoZXYsIHRlcm0pIHtcbiAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB2YXIgdGV4dDtcbiAgICB2YXIgZGlzcGF0Y2hQYXN0ZSA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgICAgIHRleHQgPSBwcmVwYXJlVGV4dEZvclRlcm1pbmFsKHRleHQpO1xuICAgICAgICB0ZXh0ID0gYnJhY2tldFRleHRGb3JQYXN0ZSh0ZXh0LCB0ZXJtLmJyYWNrZXRlZFBhc3RlTW9kZSk7XG4gICAgICAgIHRlcm0uaGFuZGxlcih0ZXh0KTtcbiAgICAgICAgdGVybS50ZXh0YXJlYS52YWx1ZSA9ICcnO1xuICAgICAgICB0ZXJtLmVtaXQoJ3Bhc3RlJywgdGV4dCk7XG4gICAgICAgIHRlcm0uY2FuY2VsKGV2KTtcbiAgICB9O1xuICAgIGlmICh0ZXJtLmJyb3dzZXIuaXNNU0lFKSB7XG4gICAgICAgIGlmICh3aW5kb3cuY2xpcGJvYXJkRGF0YSkge1xuICAgICAgICAgICAgdGV4dCA9IHdpbmRvdy5jbGlwYm9hcmREYXRhLmdldERhdGEoJ1RleHQnKTtcbiAgICAgICAgICAgIGRpc3BhdGNoUGFzdGUodGV4dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChldi5jbGlwYm9hcmREYXRhKSB7XG4gICAgICAgICAgICB0ZXh0ID0gZXYuY2xpcGJvYXJkRGF0YS5nZXREYXRhKCd0ZXh0L3BsYWluJyk7XG4gICAgICAgICAgICBkaXNwYXRjaFBhc3RlKHRleHQpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5wYXN0ZUhhbmRsZXIgPSBwYXN0ZUhhbmRsZXI7XG5mdW5jdGlvbiBtb3ZlVGV4dEFyZWFVbmRlck1vdXNlQ3Vyc29yKGV2LCB0ZXh0YXJlYSkge1xuICAgIHRleHRhcmVhLnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJztcbiAgICB0ZXh0YXJlYS5zdHlsZS53aWR0aCA9ICcyMHB4JztcbiAgICB0ZXh0YXJlYS5zdHlsZS5oZWlnaHQgPSAnMjBweCc7XG4gICAgdGV4dGFyZWEuc3R5bGUubGVmdCA9IChldi5jbGllbnRYIC0gMTApICsgJ3B4JztcbiAgICB0ZXh0YXJlYS5zdHlsZS50b3AgPSAoZXYuY2xpZW50WSAtIDEwKSArICdweCc7XG4gICAgdGV4dGFyZWEuc3R5bGUuekluZGV4ID0gJzEwMDAnO1xuICAgIHRleHRhcmVhLmZvY3VzKCk7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRleHRhcmVhLnN0eWxlLnBvc2l0aW9uID0gbnVsbDtcbiAgICAgICAgdGV4dGFyZWEuc3R5bGUud2lkdGggPSBudWxsO1xuICAgICAgICB0ZXh0YXJlYS5zdHlsZS5oZWlnaHQgPSBudWxsO1xuICAgICAgICB0ZXh0YXJlYS5zdHlsZS5sZWZ0ID0gbnVsbDtcbiAgICAgICAgdGV4dGFyZWEuc3R5bGUudG9wID0gbnVsbDtcbiAgICAgICAgdGV4dGFyZWEuc3R5bGUuekluZGV4ID0gbnVsbDtcbiAgICB9LCAyMDApO1xufVxuZXhwb3J0cy5tb3ZlVGV4dEFyZWFVbmRlck1vdXNlQ3Vyc29yID0gbW92ZVRleHRBcmVhVW5kZXJNb3VzZUN1cnNvcjtcbmZ1bmN0aW9uIHJpZ2h0Q2xpY2tIYW5kbGVyKGV2LCB0ZXh0YXJlYSwgc2VsZWN0aW9uTWFuYWdlciwgc2hvdWxkU2VsZWN0V29yZCkge1xuICAgIG1vdmVUZXh0QXJlYVVuZGVyTW91c2VDdXJzb3IoZXYsIHRleHRhcmVhKTtcbiAgICBpZiAoc2hvdWxkU2VsZWN0V29yZCAmJiAhc2VsZWN0aW9uTWFuYWdlci5pc0NsaWNrSW5TZWxlY3Rpb24oZXYpKSB7XG4gICAgICAgIHNlbGVjdGlvbk1hbmFnZXIuc2VsZWN0V29yZEF0Q3Vyc29yKGV2KTtcbiAgICB9XG4gICAgdGV4dGFyZWEudmFsdWUgPSBzZWxlY3Rpb25NYW5hZ2VyLnNlbGVjdGlvblRleHQ7XG4gICAgdGV4dGFyZWEuc2VsZWN0KCk7XG59XG5leHBvcnRzLnJpZ2h0Q2xpY2tIYW5kbGVyID0gcmlnaHRDbGlja0hhbmRsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DbGlwYm9hcmQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEVzY2FwZVNlcXVlbmNlc18xID0gcmVxdWlyZShcIi4vY29tbW9uL2RhdGEvRXNjYXBlU2VxdWVuY2VzXCIpO1xudmFyIENoYXJzZXRzXzEgPSByZXF1aXJlKFwiLi9jb3JlL2RhdGEvQ2hhcnNldHNcIik7XG52YXIgQnVmZmVyXzEgPSByZXF1aXJlKFwiLi9CdWZmZXJcIik7XG52YXIgQ2hhcldpZHRoXzEgPSByZXF1aXJlKFwiLi9DaGFyV2lkdGhcIik7XG52YXIgRXNjYXBlU2VxdWVuY2VQYXJzZXJfMSA9IHJlcXVpcmUoXCIuL0VzY2FwZVNlcXVlbmNlUGFyc2VyXCIpO1xudmFyIExpZmVjeWNsZV8xID0gcmVxdWlyZShcIi4vY29tbW9uL0xpZmVjeWNsZVwiKTtcbnZhciBHTEVWRUwgPSB7ICcoJzogMCwgJyknOiAxLCAnKic6IDIsICcrJzogMywgJy0nOiAxLCAnLic6IDIgfTtcbnZhciBSZXF1ZXN0VGVybWluZm8gPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlcXVlc3RUZXJtaW5mbyhfdGVybWluYWwpIHtcbiAgICAgICAgdGhpcy5fdGVybWluYWwgPSBfdGVybWluYWw7XG4gICAgfVxuICAgIFJlcXVlc3RUZXJtaW5mby5wcm90b3R5cGUuaG9vayA9IGZ1bmN0aW9uIChjb2xsZWN0LCBwYXJhbXMsIGZsYWcpIHtcbiAgICAgICAgdGhpcy5fZGF0YSA9ICcnO1xuICAgIH07XG4gICAgUmVxdWVzdFRlcm1pbmZvLnByb3RvdHlwZS5wdXQgPSBmdW5jdGlvbiAoZGF0YSwgc3RhcnQsIGVuZCkge1xuICAgICAgICB0aGlzLl9kYXRhICs9IGRhdGEuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpO1xuICAgIH07XG4gICAgUmVxdWVzdFRlcm1pbmZvLnByb3RvdHlwZS51bmhvb2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmhhbmRsZXIoRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgXCJQMCtyXCIgKyB0aGlzLl9kYXRhICsgRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgXCJcXFxcXCIpO1xuICAgIH07XG4gICAgcmV0dXJuIFJlcXVlc3RUZXJtaW5mbztcbn0oKSk7XG52YXIgREVDUlFTUyA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gREVDUlFTUyhfdGVybWluYWwpIHtcbiAgICAgICAgdGhpcy5fdGVybWluYWwgPSBfdGVybWluYWw7XG4gICAgfVxuICAgIERFQ1JRU1MucHJvdG90eXBlLmhvb2sgPSBmdW5jdGlvbiAoY29sbGVjdCwgcGFyYW1zLCBmbGFnKSB7XG4gICAgICAgIHRoaXMuX2RhdGEgPSAnJztcbiAgICB9O1xuICAgIERFQ1JRU1MucHJvdG90eXBlLnB1dCA9IGZ1bmN0aW9uIChkYXRhLCBzdGFydCwgZW5kKSB7XG4gICAgICAgIHRoaXMuX2RhdGEgKz0gZGF0YS5zdWJzdHJpbmcoc3RhcnQsIGVuZCk7XG4gICAgfTtcbiAgICBERUNSUVNTLnByb3RvdHlwZS51bmhvb2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5fZGF0YSkge1xuICAgICAgICAgICAgY2FzZSAnXCJxJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdGVybWluYWwuaGFuZGxlcihFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyBcIlAxJHIwXFxcInFcIiArIEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArIFwiXFxcXFwiKTtcbiAgICAgICAgICAgIGNhc2UgJ1wicCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Rlcm1pbmFsLmhhbmRsZXIoRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgXCJQMSRyNjFcXFwicFwiICsgRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgXCJcXFxcXCIpO1xuICAgICAgICAgICAgY2FzZSAncic6XG4gICAgICAgICAgICAgICAgdmFyIHB0ID0gJycgKyAodGhpcy5fdGVybWluYWwuYnVmZmVyLnNjcm9sbFRvcCArIDEpICtcbiAgICAgICAgICAgICAgICAgICAgJzsnICsgKHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci5zY3JvbGxCb3R0b20gKyAxKSArICdyJztcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdGVybWluYWwuaGFuZGxlcihFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyBcIlAxJHJcIiArIHB0ICsgRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgXCJcXFxcXCIpO1xuICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Rlcm1pbmFsLmhhbmRsZXIoRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgXCJQMSRyMG1cIiArIEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArIFwiXFxcXFwiKTtcbiAgICAgICAgICAgIGNhc2UgJyBxJzpcbiAgICAgICAgICAgICAgICB2YXIgU1RZTEVTID0geyAnYmxvY2snOiAyLCAndW5kZXJsaW5lJzogNCwgJ2Jhcic6IDYgfTtcbiAgICAgICAgICAgICAgICB2YXIgc3R5bGUgPSBTVFlMRVNbdGhpcy5fdGVybWluYWwuZ2V0T3B0aW9uKCdjdXJzb3JTdHlsZScpXTtcbiAgICAgICAgICAgICAgICBzdHlsZSAtPSB0aGlzLl90ZXJtaW5hbC5nZXRPcHRpb24oJ2N1cnNvckJsaW5rJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Rlcm1pbmFsLmhhbmRsZXIoRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgXCJQMSRyXCIgKyBzdHlsZSArIFwiIHFcIiArIEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArIFwiXFxcXFwiKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuZXJyb3IoJ1Vua25vd24gRENTICRxICVzJywgdGhpcy5fZGF0YSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuaGFuZGxlcihFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyBcIlAwJHJcIiArIHRoaXMuX2RhdGEgKyBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyBcIlxcXFxcIik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBERUNSUVNTO1xufSgpKTtcbnZhciBJbnB1dEhhbmRsZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhJbnB1dEhhbmRsZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSW5wdXRIYW5kbGVyKF90ZXJtaW5hbCwgX3BhcnNlcikge1xuICAgICAgICBpZiAoX3BhcnNlciA9PT0gdm9pZCAwKSB7IF9wYXJzZXIgPSBuZXcgRXNjYXBlU2VxdWVuY2VQYXJzZXJfMS5Fc2NhcGVTZXF1ZW5jZVBhcnNlcigpOyB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl90ZXJtaW5hbCA9IF90ZXJtaW5hbDtcbiAgICAgICAgX3RoaXMuX3BhcnNlciA9IF9wYXJzZXI7XG4gICAgICAgIF90aGlzLnJlZ2lzdGVyKF90aGlzLl9wYXJzZXIpO1xuICAgICAgICBfdGhpcy5fc3Vycm9nYXRlRmlyc3QgPSAnJztcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRDc2lIYW5kbGVyRmFsbGJhY2soZnVuY3Rpb24gKGNvbGxlY3QsIHBhcmFtcywgZmxhZykge1xuICAgICAgICAgICAgX3RoaXMuX3Rlcm1pbmFsLmVycm9yKCdVbmtub3duIENTSSBjb2RlOiAnLCB7IGNvbGxlY3Q6IGNvbGxlY3QsIHBhcmFtczogcGFyYW1zLCBmbGFnOiBTdHJpbmcuZnJvbUNoYXJDb2RlKGZsYWcpIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRFc2NIYW5kbGVyRmFsbGJhY2soZnVuY3Rpb24gKGNvbGxlY3QsIGZsYWcpIHtcbiAgICAgICAgICAgIF90aGlzLl90ZXJtaW5hbC5lcnJvcignVW5rbm93biBFU0MgY29kZTogJywgeyBjb2xsZWN0OiBjb2xsZWN0LCBmbGFnOiBTdHJpbmcuZnJvbUNoYXJDb2RlKGZsYWcpIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRFeGVjdXRlSGFuZGxlckZhbGxiYWNrKGZ1bmN0aW9uIChjb2RlKSB7XG4gICAgICAgICAgICBfdGhpcy5fdGVybWluYWwuZXJyb3IoJ1Vua25vd24gRVhFQ1VURSBjb2RlOiAnLCB7IGNvZGU6IGNvZGUgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldE9zY0hhbmRsZXJGYWxsYmFjayhmdW5jdGlvbiAoaWRlbnRpZmllciwgZGF0YSkge1xuICAgICAgICAgICAgX3RoaXMuX3Rlcm1pbmFsLmVycm9yKCdVbmtub3duIE9TQyBjb2RlOiAnLCB7IGlkZW50aWZpZXI6IGlkZW50aWZpZXIsIGRhdGE6IGRhdGEgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldFByaW50SGFuZGxlcihmdW5jdGlvbiAoZGF0YSwgc3RhcnQsIGVuZCkgeyByZXR1cm4gX3RoaXMucHJpbnQoZGF0YSwgc3RhcnQsIGVuZCk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldENzaUhhbmRsZXIoJ0AnLCBmdW5jdGlvbiAocGFyYW1zLCBjb2xsZWN0KSB7IHJldHVybiBfdGhpcy5pbnNlcnRDaGFycyhwYXJhbXMpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRDc2lIYW5kbGVyKCdBJywgZnVuY3Rpb24gKHBhcmFtcywgY29sbGVjdCkgeyByZXR1cm4gX3RoaXMuY3Vyc29yVXAocGFyYW1zKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0Q3NpSGFuZGxlcignQicsIGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHsgcmV0dXJuIF90aGlzLmN1cnNvckRvd24ocGFyYW1zKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0Q3NpSGFuZGxlcignQycsIGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHsgcmV0dXJuIF90aGlzLmN1cnNvckZvcndhcmQocGFyYW1zKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0Q3NpSGFuZGxlcignRCcsIGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHsgcmV0dXJuIF90aGlzLmN1cnNvckJhY2t3YXJkKHBhcmFtcyk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldENzaUhhbmRsZXIoJ0UnLCBmdW5jdGlvbiAocGFyYW1zLCBjb2xsZWN0KSB7IHJldHVybiBfdGhpcy5jdXJzb3JOZXh0TGluZShwYXJhbXMpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRDc2lIYW5kbGVyKCdGJywgZnVuY3Rpb24gKHBhcmFtcywgY29sbGVjdCkgeyByZXR1cm4gX3RoaXMuY3Vyc29yUHJlY2VkaW5nTGluZShwYXJhbXMpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRDc2lIYW5kbGVyKCdHJywgZnVuY3Rpb24gKHBhcmFtcywgY29sbGVjdCkgeyByZXR1cm4gX3RoaXMuY3Vyc29yQ2hhckFic29sdXRlKHBhcmFtcyk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldENzaUhhbmRsZXIoJ0gnLCBmdW5jdGlvbiAocGFyYW1zLCBjb2xsZWN0KSB7IHJldHVybiBfdGhpcy5jdXJzb3JQb3NpdGlvbihwYXJhbXMpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRDc2lIYW5kbGVyKCdJJywgZnVuY3Rpb24gKHBhcmFtcywgY29sbGVjdCkgeyByZXR1cm4gX3RoaXMuY3Vyc29yRm9yd2FyZFRhYihwYXJhbXMpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRDc2lIYW5kbGVyKCdKJywgZnVuY3Rpb24gKHBhcmFtcywgY29sbGVjdCkgeyByZXR1cm4gX3RoaXMuZXJhc2VJbkRpc3BsYXkocGFyYW1zKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0Q3NpSGFuZGxlcignSycsIGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHsgcmV0dXJuIF90aGlzLmVyYXNlSW5MaW5lKHBhcmFtcyk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldENzaUhhbmRsZXIoJ0wnLCBmdW5jdGlvbiAocGFyYW1zLCBjb2xsZWN0KSB7IHJldHVybiBfdGhpcy5pbnNlcnRMaW5lcyhwYXJhbXMpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRDc2lIYW5kbGVyKCdNJywgZnVuY3Rpb24gKHBhcmFtcywgY29sbGVjdCkgeyByZXR1cm4gX3RoaXMuZGVsZXRlTGluZXMocGFyYW1zKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0Q3NpSGFuZGxlcignUCcsIGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHsgcmV0dXJuIF90aGlzLmRlbGV0ZUNoYXJzKHBhcmFtcyk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldENzaUhhbmRsZXIoJ1MnLCBmdW5jdGlvbiAocGFyYW1zLCBjb2xsZWN0KSB7IHJldHVybiBfdGhpcy5zY3JvbGxVcChwYXJhbXMpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRDc2lIYW5kbGVyKCdUJywgZnVuY3Rpb24gKHBhcmFtcywgY29sbGVjdCkgeyByZXR1cm4gX3RoaXMuc2Nyb2xsRG93bihwYXJhbXMsIGNvbGxlY3QpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRDc2lIYW5kbGVyKCdYJywgZnVuY3Rpb24gKHBhcmFtcywgY29sbGVjdCkgeyByZXR1cm4gX3RoaXMuZXJhc2VDaGFycyhwYXJhbXMpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRDc2lIYW5kbGVyKCdaJywgZnVuY3Rpb24gKHBhcmFtcywgY29sbGVjdCkgeyByZXR1cm4gX3RoaXMuY3Vyc29yQmFja3dhcmRUYWIocGFyYW1zKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0Q3NpSGFuZGxlcignYCcsIGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHsgcmV0dXJuIF90aGlzLmNoYXJQb3NBYnNvbHV0ZShwYXJhbXMpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRDc2lIYW5kbGVyKCdhJywgZnVuY3Rpb24gKHBhcmFtcywgY29sbGVjdCkgeyByZXR1cm4gX3RoaXMuaFBvc2l0aW9uUmVsYXRpdmUocGFyYW1zKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0Q3NpSGFuZGxlcignYicsIGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHsgcmV0dXJuIF90aGlzLnJlcGVhdFByZWNlZGluZ0NoYXJhY3RlcihwYXJhbXMpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRDc2lIYW5kbGVyKCdjJywgZnVuY3Rpb24gKHBhcmFtcywgY29sbGVjdCkgeyByZXR1cm4gX3RoaXMuc2VuZERldmljZUF0dHJpYnV0ZXMocGFyYW1zLCBjb2xsZWN0KTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0Q3NpSGFuZGxlcignZCcsIGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHsgcmV0dXJuIF90aGlzLmxpbmVQb3NBYnNvbHV0ZShwYXJhbXMpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRDc2lIYW5kbGVyKCdlJywgZnVuY3Rpb24gKHBhcmFtcywgY29sbGVjdCkgeyByZXR1cm4gX3RoaXMudlBvc2l0aW9uUmVsYXRpdmUocGFyYW1zKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0Q3NpSGFuZGxlcignZicsIGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHsgcmV0dXJuIF90aGlzLmhWUG9zaXRpb24ocGFyYW1zKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0Q3NpSGFuZGxlcignZycsIGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHsgcmV0dXJuIF90aGlzLnRhYkNsZWFyKHBhcmFtcyk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldENzaUhhbmRsZXIoJ2gnLCBmdW5jdGlvbiAocGFyYW1zLCBjb2xsZWN0KSB7IHJldHVybiBfdGhpcy5zZXRNb2RlKHBhcmFtcywgY29sbGVjdCk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldENzaUhhbmRsZXIoJ2wnLCBmdW5jdGlvbiAocGFyYW1zLCBjb2xsZWN0KSB7IHJldHVybiBfdGhpcy5yZXNldE1vZGUocGFyYW1zLCBjb2xsZWN0KTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0Q3NpSGFuZGxlcignbScsIGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHsgcmV0dXJuIF90aGlzLmNoYXJBdHRyaWJ1dGVzKHBhcmFtcyk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldENzaUhhbmRsZXIoJ24nLCBmdW5jdGlvbiAocGFyYW1zLCBjb2xsZWN0KSB7IHJldHVybiBfdGhpcy5kZXZpY2VTdGF0dXMocGFyYW1zLCBjb2xsZWN0KTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0Q3NpSGFuZGxlcigncCcsIGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHsgcmV0dXJuIF90aGlzLnNvZnRSZXNldChwYXJhbXMsIGNvbGxlY3QpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRDc2lIYW5kbGVyKCdxJywgZnVuY3Rpb24gKHBhcmFtcywgY29sbGVjdCkgeyByZXR1cm4gX3RoaXMuc2V0Q3Vyc29yU3R5bGUocGFyYW1zLCBjb2xsZWN0KTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0Q3NpSGFuZGxlcigncicsIGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHsgcmV0dXJuIF90aGlzLnNldFNjcm9sbFJlZ2lvbihwYXJhbXMsIGNvbGxlY3QpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRDc2lIYW5kbGVyKCdzJywgZnVuY3Rpb24gKHBhcmFtcywgY29sbGVjdCkgeyByZXR1cm4gX3RoaXMuc2F2ZUN1cnNvcihwYXJhbXMpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRDc2lIYW5kbGVyKCd1JywgZnVuY3Rpb24gKHBhcmFtcywgY29sbGVjdCkgeyByZXR1cm4gX3RoaXMucmVzdG9yZUN1cnNvcihwYXJhbXMpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRFeGVjdXRlSGFuZGxlcihFc2NhcGVTZXF1ZW5jZXNfMS5DMC5CRUwsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmJlbGwoKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0RXhlY3V0ZUhhbmRsZXIoRXNjYXBlU2VxdWVuY2VzXzEuQzAuTEYsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmxpbmVGZWVkKCk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldEV4ZWN1dGVIYW5kbGVyKEVzY2FwZVNlcXVlbmNlc18xLkMwLlZULCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5saW5lRmVlZCgpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRFeGVjdXRlSGFuZGxlcihFc2NhcGVTZXF1ZW5jZXNfMS5DMC5GRiwgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMubGluZUZlZWQoKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0RXhlY3V0ZUhhbmRsZXIoRXNjYXBlU2VxdWVuY2VzXzEuQzAuQ1IsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmNhcnJpYWdlUmV0dXJuKCk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldEV4ZWN1dGVIYW5kbGVyKEVzY2FwZVNlcXVlbmNlc18xLkMwLkJTLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5iYWNrc3BhY2UoKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0RXhlY3V0ZUhhbmRsZXIoRXNjYXBlU2VxdWVuY2VzXzEuQzAuSFQsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnRhYigpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRFeGVjdXRlSGFuZGxlcihFc2NhcGVTZXF1ZW5jZXNfMS5DMC5TTywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2hpZnRPdXQoKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0RXhlY3V0ZUhhbmRsZXIoRXNjYXBlU2VxdWVuY2VzXzEuQzAuU0ksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnNoaWZ0SW4oKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0RXhlY3V0ZUhhbmRsZXIoRXNjYXBlU2VxdWVuY2VzXzEuQzEuSU5ELCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5pbmRleCgpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRFeGVjdXRlSGFuZGxlcihFc2NhcGVTZXF1ZW5jZXNfMS5DMS5ORUwsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLm5leHRMaW5lKCk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldEV4ZWN1dGVIYW5kbGVyKEVzY2FwZVNlcXVlbmNlc18xLkMxLkhUUywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMudGFiU2V0KCk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldE9zY0hhbmRsZXIoMCwgZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIF90aGlzLnNldFRpdGxlKGRhdGEpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRPc2NIYW5kbGVyKDIsIGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBfdGhpcy5zZXRUaXRsZShkYXRhKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0RXNjSGFuZGxlcignNycsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnNhdmVDdXJzb3IoW10pOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRFc2NIYW5kbGVyKCc4JywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMucmVzdG9yZUN1cnNvcihbXSk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldEVzY0hhbmRsZXIoJ0QnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5pbmRleCgpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRFc2NIYW5kbGVyKCdFJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMubmV4dExpbmUoKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0RXNjSGFuZGxlcignSCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnRhYlNldCgpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRFc2NIYW5kbGVyKCdNJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMucmV2ZXJzZUluZGV4KCk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldEVzY0hhbmRsZXIoJz0nLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5rZXlwYWRBcHBsaWNhdGlvbk1vZGUoKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0RXNjSGFuZGxlcignPicsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmtleXBhZE51bWVyaWNNb2RlKCk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldEVzY0hhbmRsZXIoJ2MnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5yZXNldCgpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRFc2NIYW5kbGVyKCduJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2V0Z0xldmVsKDIpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRFc2NIYW5kbGVyKCdvJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2V0Z0xldmVsKDMpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRFc2NIYW5kbGVyKCd8JywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2V0Z0xldmVsKDMpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRFc2NIYW5kbGVyKCd9JywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2V0Z0xldmVsKDIpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRFc2NIYW5kbGVyKCd+JywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2V0Z0xldmVsKDEpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRFc2NIYW5kbGVyKCclQCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnNlbGVjdERlZmF1bHRDaGFyc2V0KCk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldEVzY0hhbmRsZXIoJyVHJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2VsZWN0RGVmYXVsdENoYXJzZXQoKTsgfSk7XG4gICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKGZsYWcpIHtcbiAgICAgICAgICAgIHRoaXNfMS5fcGFyc2VyLnNldEVzY0hhbmRsZXIoJygnICsgZmxhZywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2VsZWN0Q2hhcnNldCgnKCcgKyBmbGFnKTsgfSk7XG4gICAgICAgICAgICB0aGlzXzEuX3BhcnNlci5zZXRFc2NIYW5kbGVyKCcpJyArIGZsYWcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnNlbGVjdENoYXJzZXQoJyknICsgZmxhZyk7IH0pO1xuICAgICAgICAgICAgdGhpc18xLl9wYXJzZXIuc2V0RXNjSGFuZGxlcignKicgKyBmbGFnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5zZWxlY3RDaGFyc2V0KCcqJyArIGZsYWcpOyB9KTtcbiAgICAgICAgICAgIHRoaXNfMS5fcGFyc2VyLnNldEVzY0hhbmRsZXIoJysnICsgZmxhZywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2VsZWN0Q2hhcnNldCgnKycgKyBmbGFnKTsgfSk7XG4gICAgICAgICAgICB0aGlzXzEuX3BhcnNlci5zZXRFc2NIYW5kbGVyKCctJyArIGZsYWcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnNlbGVjdENoYXJzZXQoJy0nICsgZmxhZyk7IH0pO1xuICAgICAgICAgICAgdGhpc18xLl9wYXJzZXIuc2V0RXNjSGFuZGxlcignLicgKyBmbGFnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5zZWxlY3RDaGFyc2V0KCcuJyArIGZsYWcpOyB9KTtcbiAgICAgICAgICAgIHRoaXNfMS5fcGFyc2VyLnNldEVzY0hhbmRsZXIoJy8nICsgZmxhZywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2VsZWN0Q2hhcnNldCgnLycgKyBmbGFnKTsgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciB0aGlzXzEgPSB0aGlzO1xuICAgICAgICBmb3IgKHZhciBmbGFnIGluIENoYXJzZXRzXzEuQ0hBUlNFVFMpIHtcbiAgICAgICAgICAgIF9sb29wXzEoZmxhZyk7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRFcnJvckhhbmRsZXIoZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgICAgICBfdGhpcy5fdGVybWluYWwuZXJyb3IoJ1BhcnNpbmcgZXJyb3I6ICcsIHN0YXRlKTtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0RGNzSGFuZGxlcignJHEnLCBuZXcgREVDUlFTUyhfdGhpcy5fdGVybWluYWwpKTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXREY3NIYW5kbGVyKCcrcScsIG5ldyBSZXF1ZXN0VGVybWluZm8oX3RoaXMuX3Rlcm1pbmFsKSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5fdGVybWluYWwgPSBudWxsO1xuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGlmICghdGhpcy5fdGVybWluYWwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5fdGVybWluYWwuYnVmZmVyO1xuICAgICAgICB2YXIgY3Vyc29yU3RhcnRYID0gYnVmZmVyLng7XG4gICAgICAgIHZhciBjdXJzb3JTdGFydFkgPSBidWZmZXIueTtcbiAgICAgICAgaWYgKHRoaXMuX3Rlcm1pbmFsLmRlYnVnKSB7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5sb2coJ2RhdGE6ICcgKyBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fc3Vycm9nYXRlRmlyc3QpIHtcbiAgICAgICAgICAgIGRhdGEgPSB0aGlzLl9zdXJyb2dhdGVGaXJzdCArIGRhdGE7XG4gICAgICAgICAgICB0aGlzLl9zdXJyb2dhdGVGaXJzdCA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3BhcnNlci5wYXJzZShkYXRhKTtcbiAgICAgICAgYnVmZmVyID0gdGhpcy5fdGVybWluYWwuYnVmZmVyO1xuICAgICAgICBpZiAoYnVmZmVyLnggIT09IGN1cnNvclN0YXJ0WCB8fCBidWZmZXIueSAhPT0gY3Vyc29yU3RhcnRZKSB7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5lbWl0KCdjdXJzb3Jtb3ZlJyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUucHJpbnQgPSBmdW5jdGlvbiAoZGF0YSwgc3RhcnQsIGVuZCkge1xuICAgICAgICB2YXIgY2hhcjtcbiAgICAgICAgdmFyIGNvZGU7XG4gICAgICAgIHZhciBjaFdpZHRoO1xuICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5fdGVybWluYWwuYnVmZmVyO1xuICAgICAgICB2YXIgY2hhcnNldCA9IHRoaXMuX3Rlcm1pbmFsLmNoYXJzZXQ7XG4gICAgICAgIHZhciBzY3JlZW5SZWFkZXJNb2RlID0gdGhpcy5fdGVybWluYWwub3B0aW9ucy5zY3JlZW5SZWFkZXJNb2RlO1xuICAgICAgICB2YXIgY29scyA9IHRoaXMuX3Rlcm1pbmFsLmNvbHM7XG4gICAgICAgIHZhciB3cmFwYXJvdW5kTW9kZSA9IHRoaXMuX3Rlcm1pbmFsLndyYXBhcm91bmRNb2RlO1xuICAgICAgICB2YXIgaW5zZXJ0TW9kZSA9IHRoaXMuX3Rlcm1pbmFsLmluc2VydE1vZGU7XG4gICAgICAgIHZhciBjdXJBdHRyID0gdGhpcy5fdGVybWluYWwuY3VyQXR0cjtcbiAgICAgICAgdmFyIGJ1ZmZlclJvdyA9IGJ1ZmZlci5saW5lcy5nZXQoYnVmZmVyLnkgKyBidWZmZXIueWJhc2UpO1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC51cGRhdGVSYW5nZShidWZmZXIueSk7XG4gICAgICAgIGZvciAodmFyIHN0cmluZ1Bvc2l0aW9uID0gc3RhcnQ7IHN0cmluZ1Bvc2l0aW9uIDwgZW5kOyArK3N0cmluZ1Bvc2l0aW9uKSB7XG4gICAgICAgICAgICBjaGFyID0gZGF0YS5jaGFyQXQoc3RyaW5nUG9zaXRpb24pO1xuICAgICAgICAgICAgY29kZSA9IGRhdGEuY2hhckNvZGVBdChzdHJpbmdQb3NpdGlvbik7XG4gICAgICAgICAgICBpZiAoMHhEODAwIDw9IGNvZGUgJiYgY29kZSA8PSAweERCRkYpIHtcbiAgICAgICAgICAgICAgICBpZiAoKytzdHJpbmdQb3NpdGlvbiA+PSBlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3Vycm9nYXRlRmlyc3QgPSBjaGFyO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHNlY29uZCA9IGRhdGEuY2hhckNvZGVBdChzdHJpbmdQb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgaWYgKDB4REMwMCA8PSBzZWNvbmQgJiYgc2Vjb25kIDw9IDB4REZGRikge1xuICAgICAgICAgICAgICAgICAgICBjb2RlID0gKGNvZGUgLSAweEQ4MDApICogMHg0MDAgKyBzZWNvbmQgLSAweERDMDAgKyAweDEwMDAwO1xuICAgICAgICAgICAgICAgICAgICBjaGFyICs9IGRhdGEuY2hhckF0KHN0cmluZ1Bvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN0cmluZ1Bvc2l0aW9uLS07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2hXaWR0aCA9IENoYXJXaWR0aF8xLndjd2lkdGgoY29kZSk7XG4gICAgICAgICAgICBpZiAoY2hhcnNldCkge1xuICAgICAgICAgICAgICAgIGNoYXIgPSBjaGFyc2V0W2NoYXJdIHx8IGNoYXI7XG4gICAgICAgICAgICAgICAgY29kZSA9IGNoYXIuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzY3JlZW5SZWFkZXJNb2RlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuZW1pdCgnYTExeS5jaGFyJywgY2hhcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWNoV2lkdGggJiYgYnVmZmVyLngpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2hNaW51c09uZSA9IGJ1ZmZlclJvdy5nZXQoYnVmZmVyLnggLSAxKTtcbiAgICAgICAgICAgICAgICBpZiAoY2hNaW51c09uZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNoTWludXNPbmVbQnVmZmVyXzEuQ0hBUl9EQVRBX1dJRFRIX0lOREVYXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoTWludXNUd28gPSBidWZmZXJSb3cuZ2V0KGJ1ZmZlci54IC0gMik7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hNaW51c1R3bykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoTWludXNUd29bQnVmZmVyXzEuQ0hBUl9EQVRBX0NIQVJfSU5ERVhdICs9IGNoYXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hNaW51c1R3b1tCdWZmZXJfMS5DSEFSX0RBVEFfQ09ERV9JTkRFWF0gPSBjb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlclJvdy5zZXQoYnVmZmVyLnggLSAyLCBjaE1pbnVzVHdvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoTWludXNPbmVbQnVmZmVyXzEuQ0hBUl9EQVRBX0NIQVJfSU5ERVhdICs9IGNoYXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaE1pbnVzT25lW0J1ZmZlcl8xLkNIQVJfREFUQV9DT0RFX0lOREVYXSA9IGNvZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJSb3cuc2V0KGJ1ZmZlci54IC0gMSwgY2hNaW51c09uZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYnVmZmVyLnggKyBjaFdpZHRoIC0gMSA+PSBjb2xzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHdyYXBhcm91bmRNb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlci54ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyLnkrKztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1ZmZlci55ID4gYnVmZmVyLnNjcm9sbEJvdHRvbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyLnktLTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLnNjcm9sbCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlci5saW5lcy5nZXQoYnVmZmVyLnkpLmlzV3JhcHBlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyUm93ID0gYnVmZmVyLmxpbmVzLmdldChidWZmZXIueSArIGJ1ZmZlci55YmFzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hXaWR0aCA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW5zZXJ0TW9kZSkge1xuICAgICAgICAgICAgICAgIGJ1ZmZlclJvdy5pbnNlcnRDZWxscyhidWZmZXIueCwgY2hXaWR0aCwgW2N1ckF0dHIsIEJ1ZmZlcl8xLk5VTExfQ0VMTF9DSEFSLCBCdWZmZXJfMS5OVUxMX0NFTExfV0lEVEgsIEJ1ZmZlcl8xLk5VTExfQ0VMTF9DT0RFXSk7XG4gICAgICAgICAgICAgICAgdmFyIGxhc3RDZWxsID0gYnVmZmVyUm93LmdldChjb2xzIC0gMSk7XG4gICAgICAgICAgICAgICAgaWYgKGxhc3RDZWxsW0J1ZmZlcl8xLkNIQVJfREFUQV9XSURUSF9JTkRFWF0gPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyUm93LnNldChjb2xzIC0gMSwgW2N1ckF0dHIsIEJ1ZmZlcl8xLk5VTExfQ0VMTF9DSEFSLCBCdWZmZXJfMS5OVUxMX0NFTExfV0lEVEgsIEJ1ZmZlcl8xLk5VTExfQ0VMTF9DT0RFXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnVmZmVyUm93LnNldChidWZmZXIueCsrLCBbY3VyQXR0ciwgY2hhciwgY2hXaWR0aCwgY29kZV0pO1xuICAgICAgICAgICAgaWYgKGNoV2lkdGggPiAwKSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKC0tY2hXaWR0aCkge1xuICAgICAgICAgICAgICAgICAgICBidWZmZXJSb3cuc2V0KGJ1ZmZlci54KyssIFtjdXJBdHRyLCAnJywgMCwgdW5kZWZpbmVkXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLnVwZGF0ZVJhbmdlKGJ1ZmZlci55KTtcbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUuYmVsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fdGVybWluYWwuYmVsbCgpO1xuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5saW5lRmVlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlcjtcbiAgICAgICAgaWYgKHRoaXMuX3Rlcm1pbmFsLm9wdGlvbnMuY29udmVydEVvbCkge1xuICAgICAgICAgICAgYnVmZmVyLnggPSAwO1xuICAgICAgICB9XG4gICAgICAgIGJ1ZmZlci55Kys7XG4gICAgICAgIGlmIChidWZmZXIueSA+IGJ1ZmZlci5zY3JvbGxCb3R0b20pIHtcbiAgICAgICAgICAgIGJ1ZmZlci55LS07XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5zY3JvbGwoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYnVmZmVyLnggPj0gdGhpcy5fdGVybWluYWwuY29scykge1xuICAgICAgICAgICAgYnVmZmVyLngtLTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90ZXJtaW5hbC5lbWl0KCdsaW5lZmVlZCcpO1xuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5jYXJyaWFnZVJldHVybiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnggPSAwO1xuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5iYWNrc3BhY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl90ZXJtaW5hbC5idWZmZXIueCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci54LS07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUudGFiID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3JpZ2luYWxYID0gdGhpcy5fdGVybWluYWwuYnVmZmVyLng7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci54ID0gdGhpcy5fdGVybWluYWwuYnVmZmVyLm5leHRTdG9wKCk7XG4gICAgICAgIGlmICh0aGlzLl90ZXJtaW5hbC5vcHRpb25zLnNjcmVlblJlYWRlck1vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmVtaXQoJ2ExMXkudGFiJywgdGhpcy5fdGVybWluYWwuYnVmZmVyLnggLSBvcmlnaW5hbFgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLnNoaWZ0T3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5zZXRnTGV2ZWwoMSk7XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLnNoaWZ0SW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLnNldGdMZXZlbCgwKTtcbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUuaW5zZXJ0Q2hhcnMgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci5saW5lcy5nZXQodGhpcy5fdGVybWluYWwuYnVmZmVyLnkgKyB0aGlzLl90ZXJtaW5hbC5idWZmZXIueWJhc2UpLmluc2VydENlbGxzKHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci54LCBwYXJhbXNbMF0gfHwgMSwgW3RoaXMuX3Rlcm1pbmFsLmVyYXNlQXR0cigpLCBCdWZmZXJfMS5OVUxMX0NFTExfQ0hBUiwgQnVmZmVyXzEuTlVMTF9DRUxMX1dJRFRILCBCdWZmZXJfMS5OVUxMX0NFTExfQ09ERV0pO1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC51cGRhdGVSYW5nZSh0aGlzLl90ZXJtaW5hbC5idWZmZXIueSk7XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLmN1cnNvclVwID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICB2YXIgcGFyYW0gPSBwYXJhbXNbMF07XG4gICAgICAgIGlmIChwYXJhbSA8IDEpIHtcbiAgICAgICAgICAgIHBhcmFtID0gMTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIueSAtPSBwYXJhbTtcbiAgICAgICAgaWYgKHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55IDwgMCkge1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnkgPSAwO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLmN1cnNvckRvd24gPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIHZhciBwYXJhbSA9IHBhcmFtc1swXTtcbiAgICAgICAgaWYgKHBhcmFtIDwgMSkge1xuICAgICAgICAgICAgcGFyYW0gPSAxO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ICs9IHBhcmFtO1xuICAgICAgICBpZiAodGhpcy5fdGVybWluYWwuYnVmZmVyLnkgPj0gdGhpcy5fdGVybWluYWwucm93cykge1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnkgPSB0aGlzLl90ZXJtaW5hbC5yb3dzIC0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fdGVybWluYWwuYnVmZmVyLnggPj0gdGhpcy5fdGVybWluYWwuY29scykge1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLngtLTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5jdXJzb3JGb3J3YXJkID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICB2YXIgcGFyYW0gPSBwYXJhbXNbMF07XG4gICAgICAgIGlmIChwYXJhbSA8IDEpIHtcbiAgICAgICAgICAgIHBhcmFtID0gMTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIueCArPSBwYXJhbTtcbiAgICAgICAgaWYgKHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci54ID49IHRoaXMuX3Rlcm1pbmFsLmNvbHMpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci54ID0gdGhpcy5fdGVybWluYWwuY29scyAtIDE7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUuY3Vyc29yQmFja3dhcmQgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIHZhciBwYXJhbSA9IHBhcmFtc1swXTtcbiAgICAgICAgaWYgKHBhcmFtIDwgMSkge1xuICAgICAgICAgICAgcGFyYW0gPSAxO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl90ZXJtaW5hbC5idWZmZXIueCA+PSB0aGlzLl90ZXJtaW5hbC5jb2xzKSB7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIueC0tO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci54IC09IHBhcmFtO1xuICAgICAgICBpZiAodGhpcy5fdGVybWluYWwuYnVmZmVyLnggPCAwKSB7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIueCA9IDA7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUuY3Vyc29yTmV4dExpbmUgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIHZhciBwYXJhbSA9IHBhcmFtc1swXTtcbiAgICAgICAgaWYgKHBhcmFtIDwgMSkge1xuICAgICAgICAgICAgcGFyYW0gPSAxO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ICs9IHBhcmFtO1xuICAgICAgICBpZiAodGhpcy5fdGVybWluYWwuYnVmZmVyLnkgPj0gdGhpcy5fdGVybWluYWwucm93cykge1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnkgPSB0aGlzLl90ZXJtaW5hbC5yb3dzIC0gMTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIueCA9IDA7XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLmN1cnNvclByZWNlZGluZ0xpbmUgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIHZhciBwYXJhbSA9IHBhcmFtc1swXTtcbiAgICAgICAgaWYgKHBhcmFtIDwgMSkge1xuICAgICAgICAgICAgcGFyYW0gPSAxO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55IC09IHBhcmFtO1xuICAgICAgICBpZiAodGhpcy5fdGVybWluYWwuYnVmZmVyLnkgPCAwKSB7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIueSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnggPSAwO1xuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5jdXJzb3JDaGFyQWJzb2x1dGUgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIHZhciBwYXJhbSA9IHBhcmFtc1swXTtcbiAgICAgICAgaWYgKHBhcmFtIDwgMSkge1xuICAgICAgICAgICAgcGFyYW0gPSAxO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci54ID0gcGFyYW0gLSAxO1xuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5jdXJzb3JQb3NpdGlvbiA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgdmFyIGNvbDtcbiAgICAgICAgdmFyIHJvdyA9IHBhcmFtc1swXSAtIDE7XG4gICAgICAgIGlmIChwYXJhbXMubGVuZ3RoID49IDIpIHtcbiAgICAgICAgICAgIGNvbCA9IHBhcmFtc1sxXSAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb2wgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyb3cgPCAwKSB7XG4gICAgICAgICAgICByb3cgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHJvdyA+PSB0aGlzLl90ZXJtaW5hbC5yb3dzKSB7XG4gICAgICAgICAgICByb3cgPSB0aGlzLl90ZXJtaW5hbC5yb3dzIC0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29sIDwgMCkge1xuICAgICAgICAgICAgY29sID0gMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb2wgPj0gdGhpcy5fdGVybWluYWwuY29scykge1xuICAgICAgICAgICAgY29sID0gdGhpcy5fdGVybWluYWwuY29scyAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnggPSBjb2w7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ID0gcm93O1xuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5jdXJzb3JGb3J3YXJkVGFiID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICB2YXIgcGFyYW0gPSBwYXJhbXNbMF0gfHwgMTtcbiAgICAgICAgd2hpbGUgKHBhcmFtLS0pIHtcbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci54ID0gdGhpcy5fdGVybWluYWwuYnVmZmVyLm5leHRTdG9wKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUuX2VyYXNlSW5CdWZmZXJMaW5lID0gZnVuY3Rpb24gKHksIHN0YXJ0LCBlbmQsIGNsZWFyV3JhcCkge1xuICAgICAgICBpZiAoY2xlYXJXcmFwID09PSB2b2lkIDApIHsgY2xlYXJXcmFwID0gZmFsc2U7IH1cbiAgICAgICAgdmFyIGxpbmUgPSB0aGlzLl90ZXJtaW5hbC5idWZmZXIubGluZXMuZ2V0KHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55YmFzZSArIHkpO1xuICAgICAgICBsaW5lLnJlcGxhY2VDZWxscyhzdGFydCwgZW5kLCBbdGhpcy5fdGVybWluYWwuZXJhc2VBdHRyKCksIEJ1ZmZlcl8xLk5VTExfQ0VMTF9DSEFSLCBCdWZmZXJfMS5OVUxMX0NFTExfV0lEVEgsIEJ1ZmZlcl8xLk5VTExfQ0VMTF9DT0RFXSk7XG4gICAgICAgIGlmIChjbGVhcldyYXApIHtcbiAgICAgICAgICAgIGxpbmUuaXNXcmFwcGVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUuX3Jlc2V0QnVmZmVyTGluZSA9IGZ1bmN0aW9uICh5KSB7XG4gICAgICAgIHRoaXMuX2VyYXNlSW5CdWZmZXJMaW5lKHksIDAsIHRoaXMuX3Rlcm1pbmFsLmNvbHMsIHRydWUpO1xuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5lcmFzZUluRGlzcGxheSA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgdmFyIGo7XG4gICAgICAgIHN3aXRjaCAocGFyYW1zWzBdKSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgaiA9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55O1xuICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLnVwZGF0ZVJhbmdlKGopO1xuICAgICAgICAgICAgICAgIHRoaXMuX2VyYXNlSW5CdWZmZXJMaW5lKGorKywgdGhpcy5fdGVybWluYWwuYnVmZmVyLngsIHRoaXMuX3Rlcm1pbmFsLmNvbHMsIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci54ID09PSAwKTtcbiAgICAgICAgICAgICAgICBmb3IgKDsgaiA8IHRoaXMuX3Rlcm1pbmFsLnJvd3M7IGorKykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXNldEJ1ZmZlckxpbmUoaik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLnVwZGF0ZVJhbmdlKGopO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGogPSB0aGlzLl90ZXJtaW5hbC5idWZmZXIueTtcbiAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC51cGRhdGVSYW5nZShqKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcmFzZUluQnVmZmVyTGluZShqLCAwLCB0aGlzLl90ZXJtaW5hbC5idWZmZXIueCArIDEsIHRydWUpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl90ZXJtaW5hbC5idWZmZXIueCArIDEgPj0gdGhpcy5fdGVybWluYWwuY29scykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIubGluZXMuZ2V0KGogKyAxKS5pc1dyYXBwZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgd2hpbGUgKGotLSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXNldEJ1ZmZlckxpbmUoaik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLnVwZGF0ZVJhbmdlKDApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGogPSB0aGlzLl90ZXJtaW5hbC5yb3dzO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLnVwZGF0ZVJhbmdlKGogLSAxKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoai0tKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jlc2V0QnVmZmVyTGluZShqKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwudXBkYXRlUmFuZ2UoMCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgdmFyIHNjcm9sbEJhY2tTaXplID0gdGhpcy5fdGVybWluYWwuYnVmZmVyLmxpbmVzLmxlbmd0aCAtIHRoaXMuX3Rlcm1pbmFsLnJvd3M7XG4gICAgICAgICAgICAgICAgaWYgKHNjcm9sbEJhY2tTaXplID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIubGluZXMudHJpbVN0YXJ0KHNjcm9sbEJhY2tTaXplKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnliYXNlID0gTWF0aC5tYXgodGhpcy5fdGVybWluYWwuYnVmZmVyLnliYXNlIC0gc2Nyb2xsQmFja1NpemUsIDApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIueWRpc3AgPSBNYXRoLm1heCh0aGlzLl90ZXJtaW5hbC5idWZmZXIueWRpc3AgLSBzY3JvbGxCYWNrU2l6ZSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmVtaXQoJ3Njcm9sbCcsIDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5lcmFzZUluTGluZSA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgc3dpdGNoIChwYXJhbXNbMF0pIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICB0aGlzLl9lcmFzZUluQnVmZmVyTGluZSh0aGlzLl90ZXJtaW5hbC5idWZmZXIueSwgdGhpcy5fdGVybWluYWwuYnVmZmVyLngsIHRoaXMuX3Rlcm1pbmFsLmNvbHMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHRoaXMuX2VyYXNlSW5CdWZmZXJMaW5lKHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55LCAwLCB0aGlzLl90ZXJtaW5hbC5idWZmZXIueCArIDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHRoaXMuX2VyYXNlSW5CdWZmZXJMaW5lKHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55LCAwLCB0aGlzLl90ZXJtaW5hbC5jb2xzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90ZXJtaW5hbC51cGRhdGVSYW5nZSh0aGlzLl90ZXJtaW5hbC5idWZmZXIueSk7XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLmluc2VydExpbmVzID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICB2YXIgcGFyYW0gPSBwYXJhbXNbMF07XG4gICAgICAgIGlmIChwYXJhbSA8IDEpIHtcbiAgICAgICAgICAgIHBhcmFtID0gMTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5fdGVybWluYWwuYnVmZmVyO1xuICAgICAgICB2YXIgcm93ID0gYnVmZmVyLnkgKyBidWZmZXIueWJhc2U7XG4gICAgICAgIHZhciBzY3JvbGxCb3R0b21Sb3dzT2Zmc2V0ID0gdGhpcy5fdGVybWluYWwucm93cyAtIDEgLSBidWZmZXIuc2Nyb2xsQm90dG9tO1xuICAgICAgICB2YXIgc2Nyb2xsQm90dG9tQWJzb2x1dGUgPSB0aGlzLl90ZXJtaW5hbC5yb3dzIC0gMSArIGJ1ZmZlci55YmFzZSAtIHNjcm9sbEJvdHRvbVJvd3NPZmZzZXQgKyAxO1xuICAgICAgICB3aGlsZSAocGFyYW0tLSkge1xuICAgICAgICAgICAgYnVmZmVyLmxpbmVzLnNwbGljZShzY3JvbGxCb3R0b21BYnNvbHV0ZSAtIDEsIDEpO1xuICAgICAgICAgICAgYnVmZmVyLmxpbmVzLnNwbGljZShyb3csIDAsIGJ1ZmZlci5nZXRCbGFua0xpbmUodGhpcy5fdGVybWluYWwuZXJhc2VBdHRyKCkpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90ZXJtaW5hbC51cGRhdGVSYW5nZShidWZmZXIueSk7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLnVwZGF0ZVJhbmdlKGJ1ZmZlci5zY3JvbGxCb3R0b20pO1xuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5kZWxldGVMaW5lcyA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgdmFyIHBhcmFtID0gcGFyYW1zWzBdO1xuICAgICAgICBpZiAocGFyYW0gPCAxKSB7XG4gICAgICAgICAgICBwYXJhbSA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlcjtcbiAgICAgICAgdmFyIHJvdyA9IGJ1ZmZlci55ICsgYnVmZmVyLnliYXNlO1xuICAgICAgICB2YXIgajtcbiAgICAgICAgaiA9IHRoaXMuX3Rlcm1pbmFsLnJvd3MgLSAxIC0gYnVmZmVyLnNjcm9sbEJvdHRvbTtcbiAgICAgICAgaiA9IHRoaXMuX3Rlcm1pbmFsLnJvd3MgLSAxICsgYnVmZmVyLnliYXNlIC0gajtcbiAgICAgICAgd2hpbGUgKHBhcmFtLS0pIHtcbiAgICAgICAgICAgIGJ1ZmZlci5saW5lcy5zcGxpY2Uocm93LCAxKTtcbiAgICAgICAgICAgIGJ1ZmZlci5saW5lcy5zcGxpY2UoaiwgMCwgYnVmZmVyLmdldEJsYW5rTGluZSh0aGlzLl90ZXJtaW5hbC5lcmFzZUF0dHIoKSkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLnVwZGF0ZVJhbmdlKGJ1ZmZlci55KTtcbiAgICAgICAgdGhpcy5fdGVybWluYWwudXBkYXRlUmFuZ2UoYnVmZmVyLnNjcm9sbEJvdHRvbSk7XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLmRlbGV0ZUNoYXJzID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIubGluZXMuZ2V0KHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ICsgdGhpcy5fdGVybWluYWwuYnVmZmVyLnliYXNlKS5kZWxldGVDZWxscyh0aGlzLl90ZXJtaW5hbC5idWZmZXIueCwgcGFyYW1zWzBdIHx8IDEsIFt0aGlzLl90ZXJtaW5hbC5lcmFzZUF0dHIoKSwgQnVmZmVyXzEuTlVMTF9DRUxMX0NIQVIsIEJ1ZmZlcl8xLk5VTExfQ0VMTF9XSURUSCwgQnVmZmVyXzEuTlVMTF9DRUxMX0NPREVdKTtcbiAgICAgICAgdGhpcy5fdGVybWluYWwudXBkYXRlUmFuZ2UodGhpcy5fdGVybWluYWwuYnVmZmVyLnkpO1xuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5zY3JvbGxVcCA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgdmFyIHBhcmFtID0gcGFyYW1zWzBdIHx8IDE7XG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLl90ZXJtaW5hbC5idWZmZXI7XG4gICAgICAgIHdoaWxlIChwYXJhbS0tKSB7XG4gICAgICAgICAgICBidWZmZXIubGluZXMuc3BsaWNlKGJ1ZmZlci55YmFzZSArIGJ1ZmZlci5zY3JvbGxUb3AsIDEpO1xuICAgICAgICAgICAgYnVmZmVyLmxpbmVzLnNwbGljZShidWZmZXIueWJhc2UgKyBidWZmZXIuc2Nyb2xsQm90dG9tLCAwLCBidWZmZXIuZ2V0QmxhbmtMaW5lKEJ1ZmZlcl8xLkRFRkFVTFRfQVRUUikpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLnVwZGF0ZVJhbmdlKGJ1ZmZlci5zY3JvbGxUb3ApO1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC51cGRhdGVSYW5nZShidWZmZXIuc2Nyb2xsQm90dG9tKTtcbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUuc2Nyb2xsRG93biA9IGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5sZW5ndGggPCAyICYmICFjb2xsZWN0KSB7XG4gICAgICAgICAgICB2YXIgcGFyYW0gPSBwYXJhbXNbMF0gfHwgMTtcbiAgICAgICAgICAgIHZhciBidWZmZXIgPSB0aGlzLl90ZXJtaW5hbC5idWZmZXI7XG4gICAgICAgICAgICB3aGlsZSAocGFyYW0tLSkge1xuICAgICAgICAgICAgICAgIGJ1ZmZlci5saW5lcy5zcGxpY2UoYnVmZmVyLnliYXNlICsgYnVmZmVyLnNjcm9sbEJvdHRvbSwgMSk7XG4gICAgICAgICAgICAgICAgYnVmZmVyLmxpbmVzLnNwbGljZShidWZmZXIueWJhc2UgKyBidWZmZXIuc2Nyb2xsQm90dG9tLCAwLCBidWZmZXIuZ2V0QmxhbmtMaW5lKEJ1ZmZlcl8xLkRFRkFVTFRfQVRUUikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwudXBkYXRlUmFuZ2UoYnVmZmVyLnNjcm9sbFRvcCk7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC51cGRhdGVSYW5nZShidWZmZXIuc2Nyb2xsQm90dG9tKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5lcmFzZUNoYXJzID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIubGluZXMuZ2V0KHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ICsgdGhpcy5fdGVybWluYWwuYnVmZmVyLnliYXNlKS5yZXBsYWNlQ2VsbHModGhpcy5fdGVybWluYWwuYnVmZmVyLngsIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci54ICsgKHBhcmFtc1swXSB8fCAxKSwgW3RoaXMuX3Rlcm1pbmFsLmVyYXNlQXR0cigpLCBCdWZmZXJfMS5OVUxMX0NFTExfQ0hBUiwgQnVmZmVyXzEuTlVMTF9DRUxMX1dJRFRILCBCdWZmZXJfMS5OVUxMX0NFTExfQ09ERV0pO1xuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5jdXJzb3JCYWNrd2FyZFRhYiA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgdmFyIHBhcmFtID0gcGFyYW1zWzBdIHx8IDE7XG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLl90ZXJtaW5hbC5idWZmZXI7XG4gICAgICAgIHdoaWxlIChwYXJhbS0tKSB7XG4gICAgICAgICAgICBidWZmZXIueCA9IGJ1ZmZlci5wcmV2U3RvcCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLmNoYXJQb3NBYnNvbHV0ZSA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgdmFyIHBhcmFtID0gcGFyYW1zWzBdO1xuICAgICAgICBpZiAocGFyYW0gPCAxKSB7XG4gICAgICAgICAgICBwYXJhbSA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnggPSBwYXJhbSAtIDE7XG4gICAgICAgIGlmICh0aGlzLl90ZXJtaW5hbC5idWZmZXIueCA+PSB0aGlzLl90ZXJtaW5hbC5jb2xzKSB7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIueCA9IHRoaXMuX3Rlcm1pbmFsLmNvbHMgLSAxO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLmhQb3NpdGlvblJlbGF0aXZlID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICB2YXIgcGFyYW0gPSBwYXJhbXNbMF07XG4gICAgICAgIGlmIChwYXJhbSA8IDEpIHtcbiAgICAgICAgICAgIHBhcmFtID0gMTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIueCArPSBwYXJhbTtcbiAgICAgICAgaWYgKHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci54ID49IHRoaXMuX3Rlcm1pbmFsLmNvbHMpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci54ID0gdGhpcy5fdGVybWluYWwuY29scyAtIDE7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUucmVwZWF0UHJlY2VkaW5nQ2hhcmFjdGVyID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5fdGVybWluYWwuYnVmZmVyO1xuICAgICAgICB2YXIgbGluZSA9IGJ1ZmZlci5saW5lcy5nZXQoYnVmZmVyLnliYXNlICsgYnVmZmVyLnkpO1xuICAgICAgICBsaW5lLnJlcGxhY2VDZWxscyhidWZmZXIueCwgYnVmZmVyLnggKyAocGFyYW1zWzBdIHx8IDEpLCBsaW5lLmdldChidWZmZXIueCAtIDEpIHx8IFtCdWZmZXJfMS5ERUZBVUxUX0FUVFIsIEJ1ZmZlcl8xLk5VTExfQ0VMTF9DSEFSLCBCdWZmZXJfMS5OVUxMX0NFTExfV0lEVEgsIEJ1ZmZlcl8xLk5VTExfQ0VMTF9DT0RFXSk7XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLnNlbmREZXZpY2VBdHRyaWJ1dGVzID0gZnVuY3Rpb24gKHBhcmFtcywgY29sbGVjdCkge1xuICAgICAgICBpZiAocGFyYW1zWzBdID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY29sbGVjdCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3Rlcm1pbmFsLmlzKCd4dGVybScpIHx8IHRoaXMuX3Rlcm1pbmFsLmlzKCdyeHZ0LXVuaWNvZGUnKSB8fCB0aGlzLl90ZXJtaW5hbC5pcygnc2NyZWVuJykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5oYW5kbGVyKEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbPzE7MmMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3Rlcm1pbmFsLmlzKCdsaW51eCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuaGFuZGxlcihFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnWz82YycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNvbGxlY3QgPT09ICc+Jykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3Rlcm1pbmFsLmlzKCd4dGVybScpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuaGFuZGxlcihFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnWz4wOzI3NjswYycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fdGVybWluYWwuaXMoJ3J4dnQtdW5pY29kZScpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuaGFuZGxlcihFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnWz44NTs5NTswYycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fdGVybWluYWwuaXMoJ2xpbnV4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5oYW5kbGVyKHBhcmFtc1swXSArICdjJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl90ZXJtaW5hbC5pcygnc2NyZWVuJykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5oYW5kbGVyKEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbPjgzOzQwMDAzOzBjJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUubGluZVBvc0Fic29sdXRlID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICB2YXIgcGFyYW0gPSBwYXJhbXNbMF07XG4gICAgICAgIGlmIChwYXJhbSA8IDEpIHtcbiAgICAgICAgICAgIHBhcmFtID0gMTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIueSA9IHBhcmFtIC0gMTtcbiAgICAgICAgaWYgKHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ID49IHRoaXMuX3Rlcm1pbmFsLnJvd3MpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ID0gdGhpcy5fdGVybWluYWwucm93cyAtIDE7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUudlBvc2l0aW9uUmVsYXRpdmUgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIHZhciBwYXJhbSA9IHBhcmFtc1swXTtcbiAgICAgICAgaWYgKHBhcmFtIDwgMSkge1xuICAgICAgICAgICAgcGFyYW0gPSAxO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ICs9IHBhcmFtO1xuICAgICAgICBpZiAodGhpcy5fdGVybWluYWwuYnVmZmVyLnkgPj0gdGhpcy5fdGVybWluYWwucm93cykge1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnkgPSB0aGlzLl90ZXJtaW5hbC5yb3dzIC0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fdGVybWluYWwuYnVmZmVyLnggPj0gdGhpcy5fdGVybWluYWwuY29scykge1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLngtLTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5oVlBvc2l0aW9uID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICBpZiAocGFyYW1zWzBdIDwgMSlcbiAgICAgICAgICAgIHBhcmFtc1swXSA9IDE7XG4gICAgICAgIGlmIChwYXJhbXNbMV0gPCAxKVxuICAgICAgICAgICAgcGFyYW1zWzFdID0gMTtcbiAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnkgPSBwYXJhbXNbMF0gLSAxO1xuICAgICAgICBpZiAodGhpcy5fdGVybWluYWwuYnVmZmVyLnkgPj0gdGhpcy5fdGVybWluYWwucm93cykge1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnkgPSB0aGlzLl90ZXJtaW5hbC5yb3dzIC0gMTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIueCA9IHBhcmFtc1sxXSAtIDE7XG4gICAgICAgIGlmICh0aGlzLl90ZXJtaW5hbC5idWZmZXIueCA+PSB0aGlzLl90ZXJtaW5hbC5jb2xzKSB7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIueCA9IHRoaXMuX3Rlcm1pbmFsLmNvbHMgLSAxO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLnRhYkNsZWFyID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICB2YXIgcGFyYW0gPSBwYXJhbXNbMF07XG4gICAgICAgIGlmIChwYXJhbSA8PSAwKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fdGVybWluYWwuYnVmZmVyLnRhYnNbdGhpcy5fdGVybWluYWwuYnVmZmVyLnhdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBhcmFtID09PSAzKSB7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIudGFicyA9IHt9O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLnNldE1vZGUgPSBmdW5jdGlvbiAocGFyYW1zLCBjb2xsZWN0KSB7XG4gICAgICAgIGlmIChwYXJhbXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJhbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldE1vZGUoW3BhcmFtc1tpXV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY29sbGVjdCkge1xuICAgICAgICAgICAgc3dpdGNoIChwYXJhbXNbMF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmluc2VydE1vZGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDIwOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb2xsZWN0ID09PSAnPycpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGFyYW1zWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5hcHBsaWNhdGlvbkN1cnNvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuc2V0Z0NoYXJzZXQoMCwgQ2hhcnNldHNfMS5ERUZBVUxUX0NIQVJTRVQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5zZXRnQ2hhcnNldCgxLCBDaGFyc2V0c18xLkRFRkFVTFRfQ0hBUlNFVCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLnNldGdDaGFyc2V0KDIsIENoYXJzZXRzXzEuREVGQVVMVF9DSEFSU0VUKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuc2V0Z0NoYXJzZXQoMywgQ2hhcnNldHNfMS5ERUZBVUxUX0NIQVJTRVQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLnNhdmVkQ29scyA9IHRoaXMuX3Rlcm1pbmFsLmNvbHM7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLnJlc2l6ZSgxMzIsIHRoaXMuX3Rlcm1pbmFsLnJvd3MpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLm9yaWdpbk1vZGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLndyYXBhcm91bmRNb2RlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA2NjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwubG9nKCdTZXJpYWwgcG9ydCByZXF1ZXN0ZWQgYXBwbGljYXRpb24ga2V5cGFkLicpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5hcHBsaWNhdGlvbktleXBhZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl90ZXJtaW5hbC52aWV3cG9ydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwudmlld3BvcnQuc3luY1Njcm9sbEFyZWEoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgY2FzZSAxMDAwOlxuICAgICAgICAgICAgICAgIGNhc2UgMTAwMjpcbiAgICAgICAgICAgICAgICBjYXNlIDEwMDM6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLngxME1vdXNlID0gcGFyYW1zWzBdID09PSA5O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC52dDIwME1vdXNlID0gcGFyYW1zWzBdID09PSAxMDAwO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5ub3JtYWxNb3VzZSA9IHBhcmFtc1swXSA+IDEwMDA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLm1vdXNlRXZlbnRzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdlbmFibGUtbW91c2UtZXZlbnRzJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLnNlbGVjdGlvbk1hbmFnZXIuZGlzYWJsZSgpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5sb2coJ0JpbmRpbmcgdG8gbW91c2UgZXZlbnRzLicpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEwMDQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLnNlbmRGb2N1cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTAwNTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwudXRmTW91c2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEwMDY6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLnNnck1vdXNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMDE1OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC51cnh2dE1vdXNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyNTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuY3Vyc29ySGlkZGVuID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTA0ODpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlQ3Vyc29yKHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTA0OTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlQ3Vyc29yKHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgICAgICBjYXNlIDEwNDc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlcnMuYWN0aXZhdGVBbHRCdWZmZXIodGhpcy5fdGVybWluYWwuZXJhc2VBdHRyKCkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5yZWZyZXNoKDAsIHRoaXMuX3Rlcm1pbmFsLnJvd3MgLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3Rlcm1pbmFsLnZpZXdwb3J0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC52aWV3cG9ydC5zeW5jU2Nyb2xsQXJlYSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLnNob3dDdXJzb3IoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyMDA0OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5icmFja2V0ZWRQYXN0ZU1vZGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5yZXNldE1vZGUgPSBmdW5jdGlvbiAocGFyYW1zLCBjb2xsZWN0KSB7XG4gICAgICAgIGlmIChwYXJhbXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJhbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0TW9kZShbcGFyYW1zW2ldXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjb2xsZWN0KSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBhcmFtc1swXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuaW5zZXJ0TW9kZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDIwOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb2xsZWN0ID09PSAnPycpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGFyYW1zWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5hcHBsaWNhdGlvbkN1cnNvciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl90ZXJtaW5hbC5jb2xzID09PSAxMzIgJiYgdGhpcy5fdGVybWluYWwuc2F2ZWRDb2xzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5yZXNpemUodGhpcy5fdGVybWluYWwuc2F2ZWRDb2xzLCB0aGlzLl90ZXJtaW5hbC5yb3dzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fdGVybWluYWwuc2F2ZWRDb2xzO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLm9yaWdpbk1vZGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC53cmFwYXJvdW5kTW9kZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDY2OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5sb2coJ1N3aXRjaGluZyBiYWNrIHRvIG5vcm1hbCBrZXlwYWQuJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmFwcGxpY2F0aW9uS2V5cGFkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl90ZXJtaW5hbC52aWV3cG9ydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwudmlld3BvcnQuc3luY1Njcm9sbEFyZWEoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgY2FzZSAxMDAwOlxuICAgICAgICAgICAgICAgIGNhc2UgMTAwMjpcbiAgICAgICAgICAgICAgICBjYXNlIDEwMDM6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLngxME1vdXNlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLnZ0MjAwTW91c2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwubm9ybWFsTW91c2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwubW91c2VFdmVudHMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdlbmFibGUtbW91c2UtZXZlbnRzJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLnNlbGVjdGlvbk1hbmFnZXIuZW5hYmxlKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTAwNDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuc2VuZEZvY3VzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTAwNTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwudXRmTW91c2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMDA2OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5zZ3JNb3VzZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEwMTU6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLnVyeHZ0TW91c2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyNTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuY3Vyc29ySGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMDQ4OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3RvcmVDdXJzb3IocGFyYW1zKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMDQ5OlxuICAgICAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgICAgY2FzZSAxMDQ3OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXJzLmFjdGl2YXRlTm9ybWFsQnVmZmVyKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbXNbMF0gPT09IDEwNDkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzdG9yZUN1cnNvcihwYXJhbXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLnJlZnJlc2goMCwgdGhpcy5fdGVybWluYWwucm93cyAtIDEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdGVybWluYWwudmlld3BvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLnZpZXdwb3J0LnN5bmNTY3JvbGxBcmVhKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuc2hvd0N1cnNvcigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDIwMDQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJyYWNrZXRlZFBhc3RlTW9kZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5jaGFyQXR0cmlidXRlcyA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5sZW5ndGggPT09IDEgJiYgcGFyYW1zWzBdID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5jdXJBdHRyID0gQnVmZmVyXzEuREVGQVVMVF9BVFRSO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsID0gcGFyYW1zLmxlbmd0aDtcbiAgICAgICAgdmFyIGZsYWdzID0gdGhpcy5fdGVybWluYWwuY3VyQXR0ciA+PiAxODtcbiAgICAgICAgdmFyIGZnID0gKHRoaXMuX3Rlcm1pbmFsLmN1ckF0dHIgPj4gOSkgJiAweDFmZjtcbiAgICAgICAgdmFyIGJnID0gdGhpcy5fdGVybWluYWwuY3VyQXR0ciAmIDB4MWZmO1xuICAgICAgICB2YXIgcDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIHAgPSBwYXJhbXNbaV07XG4gICAgICAgICAgICBpZiAocCA+PSAzMCAmJiBwIDw9IDM3KSB7XG4gICAgICAgICAgICAgICAgZmcgPSBwIC0gMzA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwID49IDQwICYmIHAgPD0gNDcpIHtcbiAgICAgICAgICAgICAgICBiZyA9IHAgLSA0MDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHAgPj0gOTAgJiYgcCA8PSA5Nykge1xuICAgICAgICAgICAgICAgIHAgKz0gODtcbiAgICAgICAgICAgICAgICBmZyA9IHAgLSA5MDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHAgPj0gMTAwICYmIHAgPD0gMTA3KSB7XG4gICAgICAgICAgICAgICAgcCArPSA4O1xuICAgICAgICAgICAgICAgIGJnID0gcCAtIDEwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHAgPT09IDApIHtcbiAgICAgICAgICAgICAgICBmbGFncyA9IEJ1ZmZlcl8xLkRFRkFVTFRfQVRUUiA+PiAxODtcbiAgICAgICAgICAgICAgICBmZyA9IChCdWZmZXJfMS5ERUZBVUxUX0FUVFIgPj4gOSkgJiAweDFmZjtcbiAgICAgICAgICAgICAgICBiZyA9IEJ1ZmZlcl8xLkRFRkFVTFRfQVRUUiAmIDB4MWZmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGZsYWdzIHw9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwID09PSAzKSB7XG4gICAgICAgICAgICAgICAgZmxhZ3MgfD0gNjQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwID09PSA0KSB7XG4gICAgICAgICAgICAgICAgZmxhZ3MgfD0gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHAgPT09IDUpIHtcbiAgICAgICAgICAgICAgICBmbGFncyB8PSA0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocCA9PT0gNykge1xuICAgICAgICAgICAgICAgIGZsYWdzIHw9IDg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwID09PSA4KSB7XG4gICAgICAgICAgICAgICAgZmxhZ3MgfD0gMTY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwID09PSAyKSB7XG4gICAgICAgICAgICAgICAgZmxhZ3MgfD0gMzI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwID09PSAyMikge1xuICAgICAgICAgICAgICAgIGZsYWdzICY9IH4xO1xuICAgICAgICAgICAgICAgIGZsYWdzICY9IH4zMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHAgPT09IDIzKSB7XG4gICAgICAgICAgICAgICAgZmxhZ3MgJj0gfjY0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocCA9PT0gMjQpIHtcbiAgICAgICAgICAgICAgICBmbGFncyAmPSB+MjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHAgPT09IDI1KSB7XG4gICAgICAgICAgICAgICAgZmxhZ3MgJj0gfjQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwID09PSAyNykge1xuICAgICAgICAgICAgICAgIGZsYWdzICY9IH44O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocCA9PT0gMjgpIHtcbiAgICAgICAgICAgICAgICBmbGFncyAmPSB+MTY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwID09PSAzOSkge1xuICAgICAgICAgICAgICAgIGZnID0gKEJ1ZmZlcl8xLkRFRkFVTFRfQVRUUiA+PiA5KSAmIDB4MWZmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocCA9PT0gNDkpIHtcbiAgICAgICAgICAgICAgICBiZyA9IEJ1ZmZlcl8xLkRFRkFVTFRfQVRUUiAmIDB4MWZmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocCA9PT0gMzgpIHtcbiAgICAgICAgICAgICAgICBpZiAocGFyYW1zW2kgKyAxXSA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICBpICs9IDI7XG4gICAgICAgICAgICAgICAgICAgIGZnID0gdGhpcy5fdGVybWluYWwubWF0Y2hDb2xvcihwYXJhbXNbaV0gJiAweGZmLCBwYXJhbXNbaSArIDFdICYgMHhmZiwgcGFyYW1zW2kgKyAyXSAmIDB4ZmYpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmcgPT09IC0xKVxuICAgICAgICAgICAgICAgICAgICAgICAgZmcgPSAweDFmZjtcbiAgICAgICAgICAgICAgICAgICAgaSArPSAyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChwYXJhbXNbaSArIDFdID09PSA1KSB7XG4gICAgICAgICAgICAgICAgICAgIGkgKz0gMjtcbiAgICAgICAgICAgICAgICAgICAgcCA9IHBhcmFtc1tpXSAmIDB4ZmY7XG4gICAgICAgICAgICAgICAgICAgIGZnID0gcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwID09PSA0OCkge1xuICAgICAgICAgICAgICAgIGlmIChwYXJhbXNbaSArIDFdID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIGkgKz0gMjtcbiAgICAgICAgICAgICAgICAgICAgYmcgPSB0aGlzLl90ZXJtaW5hbC5tYXRjaENvbG9yKHBhcmFtc1tpXSAmIDB4ZmYsIHBhcmFtc1tpICsgMV0gJiAweGZmLCBwYXJhbXNbaSArIDJdICYgMHhmZik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChiZyA9PT0gLTEpXG4gICAgICAgICAgICAgICAgICAgICAgICBiZyA9IDB4MWZmO1xuICAgICAgICAgICAgICAgICAgICBpICs9IDI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHBhcmFtc1tpICsgMV0gPT09IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgaSArPSAyO1xuICAgICAgICAgICAgICAgICAgICBwID0gcGFyYW1zW2ldICYgMHhmZjtcbiAgICAgICAgICAgICAgICAgICAgYmcgPSBwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHAgPT09IDEwMCkge1xuICAgICAgICAgICAgICAgIGZnID0gKEJ1ZmZlcl8xLkRFRkFVTFRfQVRUUiA+PiA5KSAmIDB4MWZmO1xuICAgICAgICAgICAgICAgIGJnID0gQnVmZmVyXzEuREVGQVVMVF9BVFRSICYgMHgxZmY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5lcnJvcignVW5rbm93biBTR1IgYXR0cmlidXRlOiAlZC4nLCBwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90ZXJtaW5hbC5jdXJBdHRyID0gKGZsYWdzIDw8IDE4KSB8IChmZyA8PCA5KSB8IGJnO1xuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5kZXZpY2VTdGF0dXMgPSBmdW5jdGlvbiAocGFyYW1zLCBjb2xsZWN0KSB7XG4gICAgICAgIGlmICghY29sbGVjdCkge1xuICAgICAgICAgICAgc3dpdGNoIChwYXJhbXNbMF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmVtaXQoJ2RhdGEnLCBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyBcIlswblwiKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHggPSB0aGlzLl90ZXJtaW5hbC5idWZmZXIueCArIDE7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmVtaXQoJ2RhdGEnLCBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyBcIltcIiArIHkgKyBcIjtcIiArIHggKyBcIlJcIik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNvbGxlY3QgPT09ICc/Jykge1xuICAgICAgICAgICAgc3dpdGNoIChwYXJhbXNbMF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIHZhciB5ID0gdGhpcy5fdGVybWluYWwuYnVmZmVyLnkgKyAxO1xuICAgICAgICAgICAgICAgICAgICB2YXIgeCA9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci54ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuZW1pdCgnZGF0YScsIEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArIFwiWz9cIiArIHkgKyBcIjtcIiArIHggKyBcIlJcIik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTU6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjU6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjY6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNTM6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLnNvZnRSZXNldCA9IGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHtcbiAgICAgICAgaWYgKGNvbGxlY3QgPT09ICchJykge1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuY3Vyc29ySGlkZGVuID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5pbnNlcnRNb2RlID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5vcmlnaW5Nb2RlID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC53cmFwYXJvdW5kTW9kZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5hcHBsaWNhdGlvbktleXBhZCA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKHRoaXMuX3Rlcm1pbmFsLnZpZXdwb3J0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwudmlld3BvcnQuc3luY1Njcm9sbEFyZWEoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmFwcGxpY2F0aW9uQ3Vyc29yID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIuc2Nyb2xsVG9wID0gMDtcbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci5zY3JvbGxCb3R0b20gPSB0aGlzLl90ZXJtaW5hbC5yb3dzIC0gMTtcbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmN1ckF0dHIgPSBCdWZmZXJfMS5ERUZBVUxUX0FUVFI7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIueCA9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ID0gMDtcbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmNoYXJzZXQgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuZ2xldmVsID0gMDtcbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmNoYXJzZXRzID0gW251bGxdO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLnNldEN1cnNvclN0eWxlID0gZnVuY3Rpb24gKHBhcmFtcywgY29sbGVjdCkge1xuICAgICAgICBpZiAoY29sbGVjdCA9PT0gJyAnKSB7XG4gICAgICAgICAgICB2YXIgcGFyYW0gPSBwYXJhbXNbMF0gPCAxID8gMSA6IHBhcmFtc1swXTtcbiAgICAgICAgICAgIHN3aXRjaCAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5zZXRPcHRpb24oJ2N1cnNvclN0eWxlJywgJ2Jsb2NrJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLnNldE9wdGlvbignY3Vyc29yU3R5bGUnLCAndW5kZXJsaW5lJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLnNldE9wdGlvbignY3Vyc29yU3R5bGUnLCAnYmFyJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGlzQmxpbmtpbmcgPSBwYXJhbSAlIDIgPT09IDE7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5zZXRPcHRpb24oJ2N1cnNvckJsaW5rJywgaXNCbGlua2luZyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUuc2V0U2Nyb2xsUmVnaW9uID0gZnVuY3Rpb24gKHBhcmFtcywgY29sbGVjdCkge1xuICAgICAgICBpZiAoY29sbGVjdClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnNjcm9sbFRvcCA9IChwYXJhbXNbMF0gfHwgMSkgLSAxO1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIuc2Nyb2xsQm90dG9tID0gKHBhcmFtc1sxXSAmJiBwYXJhbXNbMV0gPD0gdGhpcy5fdGVybWluYWwucm93cyA/IHBhcmFtc1sxXSA6IHRoaXMuX3Rlcm1pbmFsLnJvd3MpIC0gMTtcbiAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnggPSAwO1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIueSA9IDA7XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLnNhdmVDdXJzb3IgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci5zYXZlZFggPSB0aGlzLl90ZXJtaW5hbC5idWZmZXIueDtcbiAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnNhdmVkWSA9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55O1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIuc2F2ZWRDdXJBdHRyID0gdGhpcy5fdGVybWluYWwuY3VyQXR0cjtcbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUucmVzdG9yZUN1cnNvciA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnggPSB0aGlzLl90ZXJtaW5hbC5idWZmZXIuc2F2ZWRYIHx8IDA7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ID0gdGhpcy5fdGVybWluYWwuYnVmZmVyLnNhdmVkWSB8fCAwO1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5jdXJBdHRyID0gdGhpcy5fdGVybWluYWwuYnVmZmVyLnNhdmVkQ3VyQXR0ciB8fCBCdWZmZXJfMS5ERUZBVUxUX0FUVFI7XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLnNldFRpdGxlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdGhpcy5fdGVybWluYWwuaGFuZGxlVGl0bGUoZGF0YSk7XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLm5leHRMaW5lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIueCA9IDA7XG4gICAgICAgIHRoaXMuaW5kZXgoKTtcbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUua2V5cGFkQXBwbGljYXRpb25Nb2RlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5sb2coJ1NlcmlhbCBwb3J0IHJlcXVlc3RlZCBhcHBsaWNhdGlvbiBrZXlwYWQuJyk7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmFwcGxpY2F0aW9uS2V5cGFkID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuX3Rlcm1pbmFsLnZpZXdwb3J0KSB7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC52aWV3cG9ydC5zeW5jU2Nyb2xsQXJlYSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLmtleXBhZE51bWVyaWNNb2RlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5sb2coJ1N3aXRjaGluZyBiYWNrIHRvIG5vcm1hbCBrZXlwYWQuJyk7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmFwcGxpY2F0aW9uS2V5cGFkID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLl90ZXJtaW5hbC52aWV3cG9ydCkge1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwudmlld3BvcnQuc3luY1Njcm9sbEFyZWEoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5zZWxlY3REZWZhdWx0Q2hhcnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fdGVybWluYWwuc2V0Z0xldmVsKDApO1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5zZXRnQ2hhcnNldCgwLCBDaGFyc2V0c18xLkRFRkFVTFRfQ0hBUlNFVCk7XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLnNlbGVjdENoYXJzZXQgPSBmdW5jdGlvbiAoY29sbGVjdEFuZEZsYWcpIHtcbiAgICAgICAgaWYgKGNvbGxlY3RBbmRGbGFnLmxlbmd0aCAhPT0gMilcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbGVjdERlZmF1bHRDaGFyc2V0KCk7XG4gICAgICAgIGlmIChjb2xsZWN0QW5kRmxhZ1swXSA9PT0gJy8nKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5zZXRnQ2hhcnNldChHTEVWRUxbY29sbGVjdEFuZEZsYWdbMF1dLCBDaGFyc2V0c18xLkNIQVJTRVRTW2NvbGxlY3RBbmRGbGFnWzFdXSB8fCBDaGFyc2V0c18xLkRFRkFVTFRfQ0hBUlNFVCk7XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLmluZGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5pbmRleCgpO1xuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS50YWJTZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLnRhYlNldCgpO1xuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5yZXZlcnNlSW5kZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLnJldmVyc2VJbmRleCgpO1xuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fcGFyc2VyLnJlc2V0KCk7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLnJlc2V0KCk7XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLnNldGdMZXZlbCA9IGZ1bmN0aW9uIChsZXZlbCkge1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5zZXRnTGV2ZWwobGV2ZWwpO1xuICAgIH07XG4gICAgcmV0dXJuIElucHV0SGFuZGxlcjtcbn0oTGlmZWN5Y2xlXzEuRGlzcG9zYWJsZSkpO1xuZXhwb3J0cy5JbnB1dEhhbmRsZXIgPSBJbnB1dEhhbmRsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1JbnB1dEhhbmRsZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNIQVJTRVRTID0ge307XG5leHBvcnRzLkRFRkFVTFRfQ0hBUlNFVCA9IGV4cG9ydHMuQ0hBUlNFVFNbJ0InXTtcbmV4cG9ydHMuQ0hBUlNFVFNbJzAnXSA9IHtcbiAgICAnYCc6ICdcXHUyNWM2JyxcbiAgICAnYSc6ICdcXHUyNTkyJyxcbiAgICAnYic6ICdcXHUwMDA5JyxcbiAgICAnYyc6ICdcXHUwMDBjJyxcbiAgICAnZCc6ICdcXHUwMDBkJyxcbiAgICAnZSc6ICdcXHUwMDBhJyxcbiAgICAnZic6ICdcXHUwMGIwJyxcbiAgICAnZyc6ICdcXHUwMGIxJyxcbiAgICAnaCc6ICdcXHUyNDI0JyxcbiAgICAnaSc6ICdcXHUwMDBiJyxcbiAgICAnaic6ICdcXHUyNTE4JyxcbiAgICAnayc6ICdcXHUyNTEwJyxcbiAgICAnbCc6ICdcXHUyNTBjJyxcbiAgICAnbSc6ICdcXHUyNTE0JyxcbiAgICAnbic6ICdcXHUyNTNjJyxcbiAgICAnbyc6ICdcXHUyM2JhJyxcbiAgICAncCc6ICdcXHUyM2JiJyxcbiAgICAncSc6ICdcXHUyNTAwJyxcbiAgICAncic6ICdcXHUyM2JjJyxcbiAgICAncyc6ICdcXHUyM2JkJyxcbiAgICAndCc6ICdcXHUyNTFjJyxcbiAgICAndSc6ICdcXHUyNTI0JyxcbiAgICAndic6ICdcXHUyNTM0JyxcbiAgICAndyc6ICdcXHUyNTJjJyxcbiAgICAneCc6ICdcXHUyNTAyJyxcbiAgICAneSc6ICdcXHUyMjY0JyxcbiAgICAneic6ICdcXHUyMjY1JyxcbiAgICAneyc6ICdcXHUwM2MwJyxcbiAgICAnfCc6ICdcXHUyMjYwJyxcbiAgICAnfSc6ICdcXHUwMGEzJyxcbiAgICAnfic6ICdcXHUwMGI3J1xufTtcbmV4cG9ydHMuQ0hBUlNFVFNbJ0EnXSA9IHtcbiAgICAnIyc6ICfCoydcbn07XG5leHBvcnRzLkNIQVJTRVRTWydCJ10gPSBudWxsO1xuZXhwb3J0cy5DSEFSU0VUU1snNCddID0ge1xuICAgICcjJzogJ8KjJyxcbiAgICAnQCc6ICfCvicsXG4gICAgJ1snOiAnaWonLFxuICAgICdcXFxcJzogJ8K9JyxcbiAgICAnXSc6ICd8JyxcbiAgICAneyc6ICfCqCcsXG4gICAgJ3wnOiAnZicsXG4gICAgJ30nOiAnwrwnLFxuICAgICd+JzogJ8K0J1xufTtcbmV4cG9ydHMuQ0hBUlNFVFNbJ0MnXSA9XG4gICAgZXhwb3J0cy5DSEFSU0VUU1snNSddID0ge1xuICAgICAgICAnWyc6ICfDhCcsXG4gICAgICAgICdcXFxcJzogJ8OWJyxcbiAgICAgICAgJ10nOiAnw4UnLFxuICAgICAgICAnXic6ICfDnCcsXG4gICAgICAgICdgJzogJ8OpJyxcbiAgICAgICAgJ3snOiAnw6QnLFxuICAgICAgICAnfCc6ICfDticsXG4gICAgICAgICd9JzogJ8OlJyxcbiAgICAgICAgJ34nOiAnw7wnXG4gICAgfTtcbmV4cG9ydHMuQ0hBUlNFVFNbJ1InXSA9IHtcbiAgICAnIyc6ICfCoycsXG4gICAgJ0AnOiAnw6AnLFxuICAgICdbJzogJ8KwJyxcbiAgICAnXFxcXCc6ICfDpycsXG4gICAgJ10nOiAnwqcnLFxuICAgICd7JzogJ8OpJyxcbiAgICAnfCc6ICfDuScsXG4gICAgJ30nOiAnw6gnLFxuICAgICd+JzogJ8KoJ1xufTtcbmV4cG9ydHMuQ0hBUlNFVFNbJ1EnXSA9IHtcbiAgICAnQCc6ICfDoCcsXG4gICAgJ1snOiAnw6InLFxuICAgICdcXFxcJzogJ8OnJyxcbiAgICAnXSc6ICfDqicsXG4gICAgJ14nOiAnw64nLFxuICAgICdgJzogJ8O0JyxcbiAgICAneyc6ICfDqScsXG4gICAgJ3wnOiAnw7knLFxuICAgICd9JzogJ8OoJyxcbiAgICAnfic6ICfDuydcbn07XG5leHBvcnRzLkNIQVJTRVRTWydLJ10gPSB7XG4gICAgJ0AnOiAnwqcnLFxuICAgICdbJzogJ8OEJyxcbiAgICAnXFxcXCc6ICfDlicsXG4gICAgJ10nOiAnw5wnLFxuICAgICd7JzogJ8OkJyxcbiAgICAnfCc6ICfDticsXG4gICAgJ30nOiAnw7wnLFxuICAgICd+JzogJ8OfJ1xufTtcbmV4cG9ydHMuQ0hBUlNFVFNbJ1knXSA9IHtcbiAgICAnIyc6ICfCoycsXG4gICAgJ0AnOiAnwqcnLFxuICAgICdbJzogJ8KwJyxcbiAgICAnXFxcXCc6ICfDpycsXG4gICAgJ10nOiAnw6knLFxuICAgICdgJzogJ8O5JyxcbiAgICAneyc6ICfDoCcsXG4gICAgJ3wnOiAnw7InLFxuICAgICd9JzogJ8OoJyxcbiAgICAnfic6ICfDrCdcbn07XG5leHBvcnRzLkNIQVJTRVRTWydFJ10gPVxuICAgIGV4cG9ydHMuQ0hBUlNFVFNbJzYnXSA9IHtcbiAgICAgICAgJ0AnOiAnw4QnLFxuICAgICAgICAnWyc6ICfDhicsXG4gICAgICAgICdcXFxcJzogJ8OYJyxcbiAgICAgICAgJ10nOiAnw4UnLFxuICAgICAgICAnXic6ICfDnCcsXG4gICAgICAgICdgJzogJ8OkJyxcbiAgICAgICAgJ3snOiAnw6YnLFxuICAgICAgICAnfCc6ICfDuCcsXG4gICAgICAgICd9JzogJ8OlJyxcbiAgICAgICAgJ34nOiAnw7wnXG4gICAgfTtcbmV4cG9ydHMuQ0hBUlNFVFNbJ1onXSA9IHtcbiAgICAnIyc6ICfCoycsXG4gICAgJ0AnOiAnwqcnLFxuICAgICdbJzogJ8KhJyxcbiAgICAnXFxcXCc6ICfDkScsXG4gICAgJ10nOiAnwr8nLFxuICAgICd7JzogJ8KwJyxcbiAgICAnfCc6ICfDsScsXG4gICAgJ30nOiAnw6cnXG59O1xuZXhwb3J0cy5DSEFSU0VUU1snSCddID1cbiAgICBleHBvcnRzLkNIQVJTRVRTWyc3J10gPSB7XG4gICAgICAgICdAJzogJ8OJJyxcbiAgICAgICAgJ1snOiAnw4QnLFxuICAgICAgICAnXFxcXCc6ICfDlicsXG4gICAgICAgICddJzogJ8OFJyxcbiAgICAgICAgJ14nOiAnw5wnLFxuICAgICAgICAnYCc6ICfDqScsXG4gICAgICAgICd7JzogJ8OkJyxcbiAgICAgICAgJ3wnOiAnw7YnLFxuICAgICAgICAnfSc6ICfDpScsXG4gICAgICAgICd+JzogJ8O8J1xuICAgIH07XG5leHBvcnRzLkNIQVJTRVRTWyc9J10gPSB7XG4gICAgJyMnOiAnw7knLFxuICAgICdAJzogJ8OgJyxcbiAgICAnWyc6ICfDqScsXG4gICAgJ1xcXFwnOiAnw6cnLFxuICAgICddJzogJ8OqJyxcbiAgICAnXic6ICfDricsXG4gICAgJ18nOiAnw6gnLFxuICAgICdgJzogJ8O0JyxcbiAgICAneyc6ICfDpCcsXG4gICAgJ3wnOiAnw7YnLFxuICAgICd9JzogJ8O8JyxcbiAgICAnfic6ICfDuydcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DaGFyc2V0cy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIGZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgaWYgKGFycmF5LmZpbGwpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5LmZpbGwodmFsdWUsIHN0YXJ0LCBlbmQpO1xuICAgIH1cbiAgICByZXR1cm4gZmlsbEZhbGxiYWNrKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCk7XG59XG5leHBvcnRzLmZpbGwgPSBmaWxsO1xuZnVuY3Rpb24gZmlsbEZhbGxiYWNrKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICAgIGlmIChzdGFydCA9PT0gdm9pZCAwKSB7IHN0YXJ0ID0gMDsgfVxuICAgIGlmIChlbmQgPT09IHZvaWQgMCkgeyBlbmQgPSBhcnJheS5sZW5ndGg7IH1cbiAgICBpZiAoc3RhcnQgPj0gYXJyYXkubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG4gICAgc3RhcnQgPSAoYXJyYXkubGVuZ3RoICsgc3RhcnQpICUgYXJyYXkubGVuZ3RoO1xuICAgIGlmIChlbmQgPj0gYXJyYXkubGVuZ3RoKSB7XG4gICAgICAgIGVuZCA9IGFycmF5Lmxlbmd0aDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGVuZCA9IChhcnJheS5sZW5ndGggKyBlbmQpICUgYXJyYXkubGVuZ3RoO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgICBhcnJheVtpXSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG59XG5leHBvcnRzLmZpbGxGYWxsYmFjayA9IGZpbGxGYWxsYmFjaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVR5cGVkQXJyYXlVdGlscy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgTGlmZWN5Y2xlXzEgPSByZXF1aXJlKFwiLi9jb21tb24vTGlmZWN5Y2xlXCIpO1xuZnVuY3Rpb24gcihsb3csIGhpZ2gpIHtcbiAgICB2YXIgYyA9IGhpZ2ggLSBsb3c7XG4gICAgdmFyIGFyciA9IG5ldyBBcnJheShjKTtcbiAgICB3aGlsZSAoYy0tKSB7XG4gICAgICAgIGFycltjXSA9IC0taGlnaDtcbiAgICB9XG4gICAgcmV0dXJuIGFycjtcbn1cbnZhciBUcmFuc2l0aW9uVGFibGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRyYW5zaXRpb25UYWJsZShsZW5ndGgpIHtcbiAgICAgICAgdGhpcy50YWJsZSA9ICh0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcpXG4gICAgICAgICAgICA/IG5ldyBBcnJheShsZW5ndGgpXG4gICAgICAgICAgICA6IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gICAgfVxuICAgIFRyYW5zaXRpb25UYWJsZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGNvZGUsIHN0YXRlLCBhY3Rpb24sIG5leHQpIHtcbiAgICAgICAgdGhpcy50YWJsZVtzdGF0ZSA8PCA4IHwgY29kZV0gPSAoKGFjdGlvbiB8IDApIDw8IDQpIHwgKChuZXh0ID09PSB1bmRlZmluZWQpID8gc3RhdGUgOiBuZXh0KTtcbiAgICB9O1xuICAgIFRyYW5zaXRpb25UYWJsZS5wcm90b3R5cGUuYWRkTWFueSA9IGZ1bmN0aW9uIChjb2Rlcywgc3RhdGUsIGFjdGlvbiwgbmV4dCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmFkZChjb2Rlc1tpXSwgc3RhdGUsIGFjdGlvbiwgbmV4dCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBUcmFuc2l0aW9uVGFibGU7XG59KCkpO1xuZXhwb3J0cy5UcmFuc2l0aW9uVGFibGUgPSBUcmFuc2l0aW9uVGFibGU7XG52YXIgUFJJTlRBQkxFUyA9IHIoMHgyMCwgMHg3Zik7XG52YXIgRVhFQ1VUQUJMRVMgPSByKDB4MDAsIDB4MTgpO1xuRVhFQ1VUQUJMRVMucHVzaCgweDE5KTtcbkVYRUNVVEFCTEVTLnB1c2guYXBwbHkoRVhFQ1VUQUJMRVMsIHIoMHgxYywgMHgyMCkpO1xudmFyIERFRkFVTFRfVFJBTlNJVElPTiA9IDEgPDwgNCB8IDA7XG5leHBvcnRzLlZUNTAwX1RSQU5TSVRJT05fVEFCTEUgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciB0YWJsZSA9IG5ldyBUcmFuc2l0aW9uVGFibGUoNDA5NSk7XG4gICAgdmFyIHN0YXRlcyA9IHIoMCwgMTMgKyAxKTtcbiAgICB2YXIgc3RhdGU7XG4gICAgZm9yIChzdGF0ZSBpbiBzdGF0ZXMpIHtcbiAgICAgICAgZm9yICh2YXIgY29kZSA9IDA7IGNvZGUgPCAxNjA7ICsrY29kZSkge1xuICAgICAgICAgICAgdGFibGUuYWRkKGNvZGUsIHN0YXRlLCAxLCAwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0YWJsZS5hZGRNYW55KFBSSU5UQUJMRVMsIDAsIDIsIDApO1xuICAgIGZvciAoc3RhdGUgaW4gc3RhdGVzKSB7XG4gICAgICAgIHRhYmxlLmFkZE1hbnkoWzB4MTgsIDB4MWEsIDB4OTksIDB4OWFdLCBzdGF0ZSwgMywgMCk7XG4gICAgICAgIHRhYmxlLmFkZE1hbnkocigweDgwLCAweDkwKSwgc3RhdGUsIDMsIDApO1xuICAgICAgICB0YWJsZS5hZGRNYW55KHIoMHg5MCwgMHg5OCksIHN0YXRlLCAzLCAwKTtcbiAgICAgICAgdGFibGUuYWRkKDB4OWMsIHN0YXRlLCAwLCAwKTtcbiAgICAgICAgdGFibGUuYWRkKDB4MWIsIHN0YXRlLCAxMSwgMSk7XG4gICAgICAgIHRhYmxlLmFkZCgweDlkLCBzdGF0ZSwgNCwgOCk7XG4gICAgICAgIHRhYmxlLmFkZE1hbnkoWzB4OTgsIDB4OWUsIDB4OWZdLCBzdGF0ZSwgMCwgNyk7XG4gICAgICAgIHRhYmxlLmFkZCgweDliLCBzdGF0ZSwgMTEsIDMpO1xuICAgICAgICB0YWJsZS5hZGQoMHg5MCwgc3RhdGUsIDExLCA5KTtcbiAgICB9XG4gICAgdGFibGUuYWRkTWFueShFWEVDVVRBQkxFUywgMCwgMywgMCk7XG4gICAgdGFibGUuYWRkTWFueShFWEVDVVRBQkxFUywgMSwgMywgMSk7XG4gICAgdGFibGUuYWRkKDB4N2YsIDEsIDAsIDEpO1xuICAgIHRhYmxlLmFkZE1hbnkoRVhFQ1VUQUJMRVMsIDgsIDAsIDgpO1xuICAgIHRhYmxlLmFkZE1hbnkoRVhFQ1VUQUJMRVMsIDMsIDMsIDMpO1xuICAgIHRhYmxlLmFkZCgweDdmLCAzLCAwLCAzKTtcbiAgICB0YWJsZS5hZGRNYW55KEVYRUNVVEFCTEVTLCA0LCAzLCA0KTtcbiAgICB0YWJsZS5hZGQoMHg3ZiwgNCwgMCwgNCk7XG4gICAgdGFibGUuYWRkTWFueShFWEVDVVRBQkxFUywgNiwgMywgNik7XG4gICAgdGFibGUuYWRkTWFueShFWEVDVVRBQkxFUywgNSwgMywgNSk7XG4gICAgdGFibGUuYWRkKDB4N2YsIDUsIDAsIDUpO1xuICAgIHRhYmxlLmFkZE1hbnkoRVhFQ1VUQUJMRVMsIDIsIDMsIDIpO1xuICAgIHRhYmxlLmFkZCgweDdmLCAyLCAwLCAyKTtcbiAgICB0YWJsZS5hZGQoMHg1ZCwgMSwgNCwgOCk7XG4gICAgdGFibGUuYWRkTWFueShQUklOVEFCTEVTLCA4LCA1LCA4KTtcbiAgICB0YWJsZS5hZGQoMHg3ZiwgOCwgNSwgOCk7XG4gICAgdGFibGUuYWRkTWFueShbMHg5YywgMHgxYiwgMHgxOCwgMHgxYSwgMHgwN10sIDgsIDYsIDApO1xuICAgIHRhYmxlLmFkZE1hbnkocigweDFjLCAweDIwKSwgOCwgMCwgOCk7XG4gICAgdGFibGUuYWRkTWFueShbMHg1OCwgMHg1ZSwgMHg1Zl0sIDEsIDAsIDcpO1xuICAgIHRhYmxlLmFkZE1hbnkoUFJJTlRBQkxFUywgNywgMCwgNyk7XG4gICAgdGFibGUuYWRkTWFueShFWEVDVVRBQkxFUywgNywgMCwgNyk7XG4gICAgdGFibGUuYWRkKDB4OWMsIDcsIDAsIDApO1xuICAgIHRhYmxlLmFkZCgweDViLCAxLCAxMSwgMyk7XG4gICAgdGFibGUuYWRkTWFueShyKDB4NDAsIDB4N2YpLCAzLCA3LCAwKTtcbiAgICB0YWJsZS5hZGRNYW55KHIoMHgzMCwgMHgzYSksIDMsIDgsIDQpO1xuICAgIHRhYmxlLmFkZCgweDNiLCAzLCA4LCA0KTtcbiAgICB0YWJsZS5hZGRNYW55KFsweDNjLCAweDNkLCAweDNlLCAweDNmXSwgMywgOSwgNCk7XG4gICAgdGFibGUuYWRkTWFueShyKDB4MzAsIDB4M2EpLCA0LCA4LCA0KTtcbiAgICB0YWJsZS5hZGQoMHgzYiwgNCwgOCwgNCk7XG4gICAgdGFibGUuYWRkTWFueShyKDB4NDAsIDB4N2YpLCA0LCA3LCAwKTtcbiAgICB0YWJsZS5hZGRNYW55KFsweDNhLCAweDNjLCAweDNkLCAweDNlLCAweDNmXSwgNCwgMCwgNik7XG4gICAgdGFibGUuYWRkTWFueShyKDB4MjAsIDB4NDApLCA2LCAwLCA2KTtcbiAgICB0YWJsZS5hZGQoMHg3ZiwgNiwgMCwgNik7XG4gICAgdGFibGUuYWRkTWFueShyKDB4NDAsIDB4N2YpLCA2LCAwLCAwKTtcbiAgICB0YWJsZS5hZGQoMHgzYSwgMywgMCwgNik7XG4gICAgdGFibGUuYWRkTWFueShyKDB4MjAsIDB4MzApLCAzLCA5LCA1KTtcbiAgICB0YWJsZS5hZGRNYW55KHIoMHgyMCwgMHgzMCksIDUsIDksIDUpO1xuICAgIHRhYmxlLmFkZE1hbnkocigweDMwLCAweDQwKSwgNSwgMCwgNik7XG4gICAgdGFibGUuYWRkTWFueShyKDB4NDAsIDB4N2YpLCA1LCA3LCAwKTtcbiAgICB0YWJsZS5hZGRNYW55KHIoMHgyMCwgMHgzMCksIDQsIDksIDUpO1xuICAgIHRhYmxlLmFkZE1hbnkocigweDIwLCAweDMwKSwgMSwgOSwgMik7XG4gICAgdGFibGUuYWRkTWFueShyKDB4MjAsIDB4MzApLCAyLCA5LCAyKTtcbiAgICB0YWJsZS5hZGRNYW55KHIoMHgzMCwgMHg3ZiksIDIsIDEwLCAwKTtcbiAgICB0YWJsZS5hZGRNYW55KHIoMHgzMCwgMHg1MCksIDEsIDEwLCAwKTtcbiAgICB0YWJsZS5hZGRNYW55KHIoMHg1MSwgMHg1OCksIDEsIDEwLCAwKTtcbiAgICB0YWJsZS5hZGRNYW55KFsweDU5LCAweDVhLCAweDVjXSwgMSwgMTAsIDApO1xuICAgIHRhYmxlLmFkZE1hbnkocigweDYwLCAweDdmKSwgMSwgMTAsIDApO1xuICAgIHRhYmxlLmFkZCgweDUwLCAxLCAxMSwgOSk7XG4gICAgdGFibGUuYWRkTWFueShFWEVDVVRBQkxFUywgOSwgMCwgOSk7XG4gICAgdGFibGUuYWRkKDB4N2YsIDksIDAsIDkpO1xuICAgIHRhYmxlLmFkZE1hbnkocigweDFjLCAweDIwKSwgOSwgMCwgOSk7XG4gICAgdGFibGUuYWRkTWFueShyKDB4MjAsIDB4MzApLCA5LCA5LCAxMik7XG4gICAgdGFibGUuYWRkKDB4M2EsIDksIDAsIDExKTtcbiAgICB0YWJsZS5hZGRNYW55KHIoMHgzMCwgMHgzYSksIDksIDgsIDEwKTtcbiAgICB0YWJsZS5hZGQoMHgzYiwgOSwgOCwgMTApO1xuICAgIHRhYmxlLmFkZE1hbnkoWzB4M2MsIDB4M2QsIDB4M2UsIDB4M2ZdLCA5LCA5LCAxMCk7XG4gICAgdGFibGUuYWRkTWFueShFWEVDVVRBQkxFUywgMTEsIDAsIDExKTtcbiAgICB0YWJsZS5hZGRNYW55KHIoMHgyMCwgMHg4MCksIDExLCAwLCAxMSk7XG4gICAgdGFibGUuYWRkTWFueShyKDB4MWMsIDB4MjApLCAxMSwgMCwgMTEpO1xuICAgIHRhYmxlLmFkZE1hbnkoRVhFQ1VUQUJMRVMsIDEwLCAwLCAxMCk7XG4gICAgdGFibGUuYWRkKDB4N2YsIDEwLCAwLCAxMCk7XG4gICAgdGFibGUuYWRkTWFueShyKDB4MWMsIDB4MjApLCAxMCwgMCwgMTApO1xuICAgIHRhYmxlLmFkZE1hbnkocigweDMwLCAweDNhKSwgMTAsIDgsIDEwKTtcbiAgICB0YWJsZS5hZGQoMHgzYiwgMTAsIDgsIDEwKTtcbiAgICB0YWJsZS5hZGRNYW55KFsweDNhLCAweDNjLCAweDNkLCAweDNlLCAweDNmXSwgMTAsIDAsIDExKTtcbiAgICB0YWJsZS5hZGRNYW55KHIoMHgyMCwgMHgzMCksIDEwLCA5LCAxMik7XG4gICAgdGFibGUuYWRkTWFueShFWEVDVVRBQkxFUywgMTIsIDAsIDEyKTtcbiAgICB0YWJsZS5hZGQoMHg3ZiwgMTIsIDAsIDEyKTtcbiAgICB0YWJsZS5hZGRNYW55KHIoMHgxYywgMHgyMCksIDEyLCAwLCAxMik7XG4gICAgdGFibGUuYWRkTWFueShyKDB4MjAsIDB4MzApLCAxMiwgOSwgMTIpO1xuICAgIHRhYmxlLmFkZE1hbnkocigweDMwLCAweDQwKSwgMTIsIDAsIDExKTtcbiAgICB0YWJsZS5hZGRNYW55KHIoMHg0MCwgMHg3ZiksIDEyLCAxMiwgMTMpO1xuICAgIHRhYmxlLmFkZE1hbnkocigweDQwLCAweDdmKSwgMTAsIDEyLCAxMyk7XG4gICAgdGFibGUuYWRkTWFueShyKDB4NDAsIDB4N2YpLCA5LCAxMiwgMTMpO1xuICAgIHRhYmxlLmFkZE1hbnkoRVhFQ1VUQUJMRVMsIDEzLCAxMywgMTMpO1xuICAgIHRhYmxlLmFkZE1hbnkoUFJJTlRBQkxFUywgMTMsIDEzLCAxMyk7XG4gICAgdGFibGUuYWRkKDB4N2YsIDEzLCAwLCAxMyk7XG4gICAgdGFibGUuYWRkTWFueShbMHgxYiwgMHg5Y10sIDEzLCAxNCwgMCk7XG4gICAgcmV0dXJuIHRhYmxlO1xufSkoKTtcbnZhciBEY3NEdW1teSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGNzRHVtbXkoKSB7XG4gICAgfVxuICAgIERjc0R1bW15LnByb3RvdHlwZS5ob29rID0gZnVuY3Rpb24gKGNvbGxlY3QsIHBhcmFtcywgZmxhZykgeyB9O1xuICAgIERjc0R1bW15LnByb3RvdHlwZS5wdXQgPSBmdW5jdGlvbiAoZGF0YSwgc3RhcnQsIGVuZCkgeyB9O1xuICAgIERjc0R1bW15LnByb3RvdHlwZS51bmhvb2sgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgcmV0dXJuIERjc0R1bW15O1xufSgpKTtcbnZhciBFc2NhcGVTZXF1ZW5jZVBhcnNlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEVzY2FwZVNlcXVlbmNlUGFyc2VyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEVzY2FwZVNlcXVlbmNlUGFyc2VyKFRSQU5TSVRJT05TKSB7XG4gICAgICAgIGlmIChUUkFOU0lUSU9OUyA9PT0gdm9pZCAwKSB7IFRSQU5TSVRJT05TID0gZXhwb3J0cy5WVDUwMF9UUkFOU0lUSU9OX1RBQkxFOyB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLlRSQU5TSVRJT05TID0gVFJBTlNJVElPTlM7XG4gICAgICAgIF90aGlzLmluaXRpYWxTdGF0ZSA9IDA7XG4gICAgICAgIF90aGlzLmN1cnJlbnRTdGF0ZSA9IF90aGlzLmluaXRpYWxTdGF0ZTtcbiAgICAgICAgX3RoaXMuX29zYyA9ICcnO1xuICAgICAgICBfdGhpcy5fcGFyYW1zID0gWzBdO1xuICAgICAgICBfdGhpcy5fY29sbGVjdCA9ICcnO1xuICAgICAgICBfdGhpcy5fcHJpbnRIYW5kbGVyRmIgPSBmdW5jdGlvbiAoZGF0YSwgc3RhcnQsIGVuZCkgeyB9O1xuICAgICAgICBfdGhpcy5fZXhlY3V0ZUhhbmRsZXJGYiA9IGZ1bmN0aW9uIChjb2RlKSB7IH07XG4gICAgICAgIF90aGlzLl9jc2lIYW5kbGVyRmIgPSBmdW5jdGlvbiAoY29sbGVjdCwgcGFyYW1zLCBmbGFnKSB7IH07XG4gICAgICAgIF90aGlzLl9lc2NIYW5kbGVyRmIgPSBmdW5jdGlvbiAoY29sbGVjdCwgZmxhZykgeyB9O1xuICAgICAgICBfdGhpcy5fb3NjSGFuZGxlckZiID0gZnVuY3Rpb24gKGlkZW50aWZpZXIsIGRhdGEpIHsgfTtcbiAgICAgICAgX3RoaXMuX2Rjc0hhbmRsZXJGYiA9IG5ldyBEY3NEdW1teSgpO1xuICAgICAgICBfdGhpcy5fZXJyb3JIYW5kbGVyRmIgPSBmdW5jdGlvbiAoc3RhdGUpIHsgcmV0dXJuIHN0YXRlOyB9O1xuICAgICAgICBfdGhpcy5fcHJpbnRIYW5kbGVyID0gX3RoaXMuX3ByaW50SGFuZGxlckZiO1xuICAgICAgICBfdGhpcy5fZXhlY3V0ZUhhbmRsZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgX3RoaXMuX2NzaUhhbmRsZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgX3RoaXMuX2VzY0hhbmRsZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgX3RoaXMuX29zY0hhbmRsZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgX3RoaXMuX2Rjc0hhbmRsZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgX3RoaXMuX2FjdGl2ZURjc0hhbmRsZXIgPSBudWxsO1xuICAgICAgICBfdGhpcy5fZXJyb3JIYW5kbGVyID0gX3RoaXMuX2Vycm9ySGFuZGxlckZiO1xuICAgICAgICBfdGhpcy5zZXRFc2NIYW5kbGVyKCdcXFxcJywgZnVuY3Rpb24gKCkgeyB9KTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBFc2NhcGVTZXF1ZW5jZVBhcnNlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fcHJpbnRIYW5kbGVyRmIgPSBudWxsO1xuICAgICAgICB0aGlzLl9leGVjdXRlSGFuZGxlckZiID0gbnVsbDtcbiAgICAgICAgdGhpcy5fY3NpSGFuZGxlckZiID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZXNjSGFuZGxlckZiID0gbnVsbDtcbiAgICAgICAgdGhpcy5fb3NjSGFuZGxlckZiID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZGNzSGFuZGxlckZiID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZXJyb3JIYW5kbGVyRmIgPSBudWxsO1xuICAgICAgICB0aGlzLl9wcmludEhhbmRsZXIgPSBudWxsO1xuICAgICAgICB0aGlzLl9leGVjdXRlSGFuZGxlcnMgPSBudWxsO1xuICAgICAgICB0aGlzLl9jc2lIYW5kbGVycyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2VzY0hhbmRsZXJzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fb3NjSGFuZGxlcnMgPSBudWxsO1xuICAgICAgICB0aGlzLl9kY3NIYW5kbGVycyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2FjdGl2ZURjc0hhbmRsZXIgPSBudWxsO1xuICAgICAgICB0aGlzLl9lcnJvckhhbmRsZXIgPSBudWxsO1xuICAgIH07XG4gICAgRXNjYXBlU2VxdWVuY2VQYXJzZXIucHJvdG90eXBlLnNldFByaW50SGFuZGxlciA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9wcmludEhhbmRsZXIgPSBjYWxsYmFjaztcbiAgICB9O1xuICAgIEVzY2FwZVNlcXVlbmNlUGFyc2VyLnByb3RvdHlwZS5jbGVhclByaW50SGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fcHJpbnRIYW5kbGVyID0gdGhpcy5fcHJpbnRIYW5kbGVyRmI7XG4gICAgfTtcbiAgICBFc2NhcGVTZXF1ZW5jZVBhcnNlci5wcm90b3R5cGUuc2V0RXhlY3V0ZUhhbmRsZXIgPSBmdW5jdGlvbiAoZmxhZywgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fZXhlY3V0ZUhhbmRsZXJzW2ZsYWcuY2hhckNvZGVBdCgwKV0gPSBjYWxsYmFjaztcbiAgICB9O1xuICAgIEVzY2FwZVNlcXVlbmNlUGFyc2VyLnByb3RvdHlwZS5jbGVhckV4ZWN1dGVIYW5kbGVyID0gZnVuY3Rpb24gKGZsYWcpIHtcbiAgICAgICAgaWYgKHRoaXMuX2V4ZWN1dGVIYW5kbGVyc1tmbGFnLmNoYXJDb2RlQXQoMCldKVxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2V4ZWN1dGVIYW5kbGVyc1tmbGFnLmNoYXJDb2RlQXQoMCldO1xuICAgIH07XG4gICAgRXNjYXBlU2VxdWVuY2VQYXJzZXIucHJvdG90eXBlLnNldEV4ZWN1dGVIYW5kbGVyRmFsbGJhY2sgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fZXhlY3V0ZUhhbmRsZXJGYiA9IGNhbGxiYWNrO1xuICAgIH07XG4gICAgRXNjYXBlU2VxdWVuY2VQYXJzZXIucHJvdG90eXBlLnNldENzaUhhbmRsZXIgPSBmdW5jdGlvbiAoZmxhZywgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fY3NpSGFuZGxlcnNbZmxhZy5jaGFyQ29kZUF0KDApXSA9IGNhbGxiYWNrO1xuICAgIH07XG4gICAgRXNjYXBlU2VxdWVuY2VQYXJzZXIucHJvdG90eXBlLmNsZWFyQ3NpSGFuZGxlciA9IGZ1bmN0aW9uIChmbGFnKSB7XG4gICAgICAgIGlmICh0aGlzLl9jc2lIYW5kbGVyc1tmbGFnLmNoYXJDb2RlQXQoMCldKVxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2NzaUhhbmRsZXJzW2ZsYWcuY2hhckNvZGVBdCgwKV07XG4gICAgfTtcbiAgICBFc2NhcGVTZXF1ZW5jZVBhcnNlci5wcm90b3R5cGUuc2V0Q3NpSGFuZGxlckZhbGxiYWNrID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX2NzaUhhbmRsZXJGYiA9IGNhbGxiYWNrO1xuICAgIH07XG4gICAgRXNjYXBlU2VxdWVuY2VQYXJzZXIucHJvdG90eXBlLnNldEVzY0hhbmRsZXIgPSBmdW5jdGlvbiAoY29sbGVjdEFuZEZsYWcsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX2VzY0hhbmRsZXJzW2NvbGxlY3RBbmRGbGFnXSA9IGNhbGxiYWNrO1xuICAgIH07XG4gICAgRXNjYXBlU2VxdWVuY2VQYXJzZXIucHJvdG90eXBlLmNsZWFyRXNjSGFuZGxlciA9IGZ1bmN0aW9uIChjb2xsZWN0QW5kRmxhZykge1xuICAgICAgICBpZiAodGhpcy5fZXNjSGFuZGxlcnNbY29sbGVjdEFuZEZsYWddKVxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2VzY0hhbmRsZXJzW2NvbGxlY3RBbmRGbGFnXTtcbiAgICB9O1xuICAgIEVzY2FwZVNlcXVlbmNlUGFyc2VyLnByb3RvdHlwZS5zZXRFc2NIYW5kbGVyRmFsbGJhY2sgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fZXNjSGFuZGxlckZiID0gY2FsbGJhY2s7XG4gICAgfTtcbiAgICBFc2NhcGVTZXF1ZW5jZVBhcnNlci5wcm90b3R5cGUuc2V0T3NjSGFuZGxlciA9IGZ1bmN0aW9uIChpZGVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fb3NjSGFuZGxlcnNbaWRlbnRdID0gY2FsbGJhY2s7XG4gICAgfTtcbiAgICBFc2NhcGVTZXF1ZW5jZVBhcnNlci5wcm90b3R5cGUuY2xlYXJPc2NIYW5kbGVyID0gZnVuY3Rpb24gKGlkZW50KSB7XG4gICAgICAgIGlmICh0aGlzLl9vc2NIYW5kbGVyc1tpZGVudF0pXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fb3NjSGFuZGxlcnNbaWRlbnRdO1xuICAgIH07XG4gICAgRXNjYXBlU2VxdWVuY2VQYXJzZXIucHJvdG90eXBlLnNldE9zY0hhbmRsZXJGYWxsYmFjayA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9vc2NIYW5kbGVyRmIgPSBjYWxsYmFjaztcbiAgICB9O1xuICAgIEVzY2FwZVNlcXVlbmNlUGFyc2VyLnByb3RvdHlwZS5zZXREY3NIYW5kbGVyID0gZnVuY3Rpb24gKGNvbGxlY3RBbmRGbGFnLCBoYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuX2Rjc0hhbmRsZXJzW2NvbGxlY3RBbmRGbGFnXSA9IGhhbmRsZXI7XG4gICAgfTtcbiAgICBFc2NhcGVTZXF1ZW5jZVBhcnNlci5wcm90b3R5cGUuY2xlYXJEY3NIYW5kbGVyID0gZnVuY3Rpb24gKGNvbGxlY3RBbmRGbGFnKSB7XG4gICAgICAgIGlmICh0aGlzLl9kY3NIYW5kbGVyc1tjb2xsZWN0QW5kRmxhZ10pXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fZGNzSGFuZGxlcnNbY29sbGVjdEFuZEZsYWddO1xuICAgIH07XG4gICAgRXNjYXBlU2VxdWVuY2VQYXJzZXIucHJvdG90eXBlLnNldERjc0hhbmRsZXJGYWxsYmFjayA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHRoaXMuX2Rjc0hhbmRsZXJGYiA9IGhhbmRsZXI7XG4gICAgfTtcbiAgICBFc2NhcGVTZXF1ZW5jZVBhcnNlci5wcm90b3R5cGUuc2V0RXJyb3JIYW5kbGVyID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX2Vycm9ySGFuZGxlciA9IGNhbGxiYWNrO1xuICAgIH07XG4gICAgRXNjYXBlU2VxdWVuY2VQYXJzZXIucHJvdG90eXBlLmNsZWFyRXJyb3JIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9lcnJvckhhbmRsZXIgPSB0aGlzLl9lcnJvckhhbmRsZXJGYjtcbiAgICB9O1xuICAgIEVzY2FwZVNlcXVlbmNlUGFyc2VyLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50U3RhdGUgPSB0aGlzLmluaXRpYWxTdGF0ZTtcbiAgICAgICAgdGhpcy5fb3NjID0gJyc7XG4gICAgICAgIHRoaXMuX3BhcmFtcyA9IFswXTtcbiAgICAgICAgdGhpcy5fY29sbGVjdCA9ICcnO1xuICAgICAgICB0aGlzLl9hY3RpdmVEY3NIYW5kbGVyID0gbnVsbDtcbiAgICB9O1xuICAgIEVzY2FwZVNlcXVlbmNlUGFyc2VyLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHZhciBjb2RlID0gMDtcbiAgICAgICAgdmFyIHRyYW5zaXRpb24gPSAwO1xuICAgICAgICB2YXIgZXJyb3IgPSBmYWxzZTtcbiAgICAgICAgdmFyIGN1cnJlbnRTdGF0ZSA9IHRoaXMuY3VycmVudFN0YXRlO1xuICAgICAgICB2YXIgcHJpbnQgPSAtMTtcbiAgICAgICAgdmFyIGRjcyA9IC0xO1xuICAgICAgICB2YXIgb3NjID0gdGhpcy5fb3NjO1xuICAgICAgICB2YXIgY29sbGVjdCA9IHRoaXMuX2NvbGxlY3Q7XG4gICAgICAgIHZhciBwYXJhbXMgPSB0aGlzLl9wYXJhbXM7XG4gICAgICAgIHZhciB0YWJsZSA9IHRoaXMuVFJBTlNJVElPTlMudGFibGU7XG4gICAgICAgIHZhciBkY3NIYW5kbGVyID0gdGhpcy5fYWN0aXZlRGNzSGFuZGxlcjtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgdmFyIGwgPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyArK2kpIHtcbiAgICAgICAgICAgIGNvZGUgPSBkYXRhLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICBpZiAoY3VycmVudFN0YXRlID09PSAwICYmIGNvZGUgPiAweDFmICYmIGNvZGUgPCAweDgwKSB7XG4gICAgICAgICAgICAgICAgcHJpbnQgPSAofnByaW50KSA/IHByaW50IDogaTtcbiAgICAgICAgICAgICAgICBkb1xuICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGkgPCBsICYmIGRhdGEuY2hhckNvZGVBdChpKSA+IDB4MWYgJiYgZGF0YS5jaGFyQ29kZUF0KGkpIDwgMHg4MCk7XG4gICAgICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGN1cnJlbnRTdGF0ZSA9PT0gNCAmJiAoY29kZSA+IDB4MmYgJiYgY29kZSA8IDB4MzkpKSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zW3BhcmFtcy5sZW5ndGggLSAxXSA9IHBhcmFtc1twYXJhbXMubGVuZ3RoIC0gMV0gKiAxMCArIGNvZGUgLSA0ODtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyYW5zaXRpb24gPSAoY29kZSA8IDB4YTApID8gKHRhYmxlW2N1cnJlbnRTdGF0ZSA8PCA4IHwgY29kZV0pIDogREVGQVVMVF9UUkFOU0lUSU9OO1xuICAgICAgICAgICAgc3dpdGNoICh0cmFuc2l0aW9uID4+IDQpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHByaW50ID0gKH5wcmludCkgPyBwcmludCA6IGk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKH5wcmludCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJpbnRIYW5kbGVyKGRhdGEsIHByaW50LCBpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ID0gLTE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgPSB0aGlzLl9leGVjdXRlSGFuZGxlcnNbY29kZV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaylcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2V4ZWN1dGVIYW5kbGVyRmIoY29kZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKH5wcmludCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJpbnRIYW5kbGVyKGRhdGEsIHByaW50LCBpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ID0gLTE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAofmRjcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGNzSGFuZGxlci5wdXQoZGF0YSwgZGNzLCBpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRjcyA9IC0xO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvZGUgPiAweDlmKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGN1cnJlbnRTdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgPSAofnByaW50KSA/IHByaW50IDogaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvc2MgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbiB8PSA4O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb24gfD0gNjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbiB8PSAxMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGNzID0gKH5kY3MpID8gZGNzIDogaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbiB8PSAxMztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluamVjdCA9IHRoaXMuX2Vycm9ySGFuZGxlcih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogY29kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50U3RhdGU6IGN1cnJlbnRTdGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludDogcHJpbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGNzOiBkY3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3NjOiBvc2MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbGVjdDogY29sbGVjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYm9ydDogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluamVjdC5hYm9ydClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgPSB0aGlzLl9jc2lIYW5kbGVyc1tjb2RlXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2socGFyYW1zLCBjb2xsZWN0KTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3NpSGFuZGxlckZiKGNvbGxlY3QsIHBhcmFtcywgY29kZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvZGUgPT09IDB4M2IpXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMucHVzaCgwKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zW3BhcmFtcy5sZW5ndGggLSAxXSA9IHBhcmFtc1twYXJhbXMubGVuZ3RoIC0gMV0gKiAxMCArIGNvZGUgLSA0ODtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICBjb2xsZWN0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gdGhpcy5fZXNjSGFuZGxlcnNbY29sbGVjdCArIFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhjb2xsZWN0LCBjb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXNjSGFuZGxlckZiKGNvbGxlY3QsIGNvZGUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICAgICAgICBpZiAofnByaW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcmludEhhbmRsZXIoZGF0YSwgcHJpbnQsIGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBvc2MgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zID0gWzBdO1xuICAgICAgICAgICAgICAgICAgICBjb2xsZWN0ID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGRjcyA9IC0xO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICAgICAgICBkY3NIYW5kbGVyID0gdGhpcy5fZGNzSGFuZGxlcnNbY29sbGVjdCArIFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWRjc0hhbmRsZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICBkY3NIYW5kbGVyID0gdGhpcy5fZGNzSGFuZGxlckZiO1xuICAgICAgICAgICAgICAgICAgICBkY3NIYW5kbGVyLmhvb2soY29sbGVjdCwgcGFyYW1zLCBjb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgICAgICAgZGNzID0gKH5kY3MpID8gZGNzIDogaTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxNDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRjc0hhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh+ZGNzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRjc0hhbmRsZXIucHV0KGRhdGEsIGRjcywgaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkY3NIYW5kbGVyLnVuaG9vaygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGNzSGFuZGxlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvZGUgPT09IDB4MWIpXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uIHw9IDE7XG4gICAgICAgICAgICAgICAgICAgIG9zYyA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBwYXJhbXMgPSBbMF07XG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3QgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgZGNzID0gLTE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKH5wcmludCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJpbnRIYW5kbGVyKGRhdGEsIHByaW50LCBpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ID0gLTE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgb3NjID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgb3NjICs9IGRhdGEuY2hhckF0KGkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIGlmIChvc2MgJiYgY29kZSAhPT0gMHgxOCAmJiBjb2RlICE9PSAweDFhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaWR4ID0gb3NjLmluZGV4T2YoJzsnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpZHggPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3NjSGFuZGxlckZiKC0xLCBvc2MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkZW50aWZpZXIgPSBwYXJzZUludChvc2Muc3Vic3RyaW5nKDAsIGlkeCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50ID0gb3NjLnN1YnN0cmluZyhpZHggKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayA9IHRoaXMuX29zY0hhbmRsZXJzW2lkZW50aWZpZXJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soY29udGVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vc2NIYW5kbGVyRmIoaWRlbnRpZmllciwgY29udGVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvZGUgPT09IDB4MWIpXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uIHw9IDE7XG4gICAgICAgICAgICAgICAgICAgIG9zYyA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBwYXJhbXMgPSBbMF07XG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3QgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgZGNzID0gLTE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudFN0YXRlID0gdHJhbnNpdGlvbiAmIDE1O1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50U3RhdGUgPT09IDAgJiYgfnByaW50KSB7XG4gICAgICAgICAgICB0aGlzLl9wcmludEhhbmRsZXIoZGF0YSwgcHJpbnQsIGRhdGEubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjdXJyZW50U3RhdGUgPT09IDEzICYmIH5kY3MgJiYgZGNzSGFuZGxlcikge1xuICAgICAgICAgICAgZGNzSGFuZGxlci5wdXQoZGF0YSwgZGNzLCBkYXRhLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fb3NjID0gb3NjO1xuICAgICAgICB0aGlzLl9jb2xsZWN0ID0gY29sbGVjdDtcbiAgICAgICAgdGhpcy5fcGFyYW1zID0gcGFyYW1zO1xuICAgICAgICB0aGlzLl9hY3RpdmVEY3NIYW5kbGVyID0gZGNzSGFuZGxlcjtcbiAgICAgICAgdGhpcy5jdXJyZW50U3RhdGUgPSBjdXJyZW50U3RhdGU7XG4gICAgfTtcbiAgICByZXR1cm4gRXNjYXBlU2VxdWVuY2VQYXJzZXI7XG59KExpZmVjeWNsZV8xLkRpc3Bvc2FibGUpKTtcbmV4cG9ydHMuRXNjYXBlU2VxdWVuY2VQYXJzZXIgPSBFc2NhcGVTZXF1ZW5jZVBhcnNlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUVzY2FwZVNlcXVlbmNlUGFyc2VyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBUZXh0UmVuZGVyTGF5ZXJfMSA9IHJlcXVpcmUoXCIuL1RleHRSZW5kZXJMYXllclwiKTtcbnZhciBTZWxlY3Rpb25SZW5kZXJMYXllcl8xID0gcmVxdWlyZShcIi4vU2VsZWN0aW9uUmVuZGVyTGF5ZXJcIik7XG52YXIgQ3Vyc29yUmVuZGVyTGF5ZXJfMSA9IHJlcXVpcmUoXCIuL0N1cnNvclJlbmRlckxheWVyXCIpO1xudmFyIENvbG9yTWFuYWdlcl8xID0gcmVxdWlyZShcIi4vQ29sb3JNYW5hZ2VyXCIpO1xudmFyIExpbmtSZW5kZXJMYXllcl8xID0gcmVxdWlyZShcIi4vTGlua1JlbmRlckxheWVyXCIpO1xudmFyIEV2ZW50RW1pdHRlcl8xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9FdmVudEVtaXR0ZXJcIik7XG52YXIgUmVuZGVyRGVib3VuY2VyXzEgPSByZXF1aXJlKFwiLi4vdWkvUmVuZGVyRGVib3VuY2VyXCIpO1xudmFyIFNjcmVlbkRwck1vbml0b3JfMSA9IHJlcXVpcmUoXCIuLi91aS9TY3JlZW5EcHJNb25pdG9yXCIpO1xudmFyIENoYXJhY3RlckpvaW5lclJlZ2lzdHJ5XzEgPSByZXF1aXJlKFwiLi4vcmVuZGVyZXIvQ2hhcmFjdGVySm9pbmVyUmVnaXN0cnlcIik7XG52YXIgUmVuZGVyZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhSZW5kZXJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBSZW5kZXJlcihfdGVybWluYWwsIHRoZW1lKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl90ZXJtaW5hbCA9IF90ZXJtaW5hbDtcbiAgICAgICAgX3RoaXMuX2lzUGF1c2VkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLl9uZWVkc0Z1bGxSZWZyZXNoID0gZmFsc2U7XG4gICAgICAgIHZhciBhbGxvd1RyYW5zcGFyZW5jeSA9IF90aGlzLl90ZXJtaW5hbC5vcHRpb25zLmFsbG93VHJhbnNwYXJlbmN5O1xuICAgICAgICBfdGhpcy5jb2xvck1hbmFnZXIgPSBuZXcgQ29sb3JNYW5hZ2VyXzEuQ29sb3JNYW5hZ2VyKGRvY3VtZW50LCBhbGxvd1RyYW5zcGFyZW5jeSk7XG4gICAgICAgIF90aGlzLl9jaGFyYWN0ZXJKb2luZXJSZWdpc3RyeSA9IG5ldyBDaGFyYWN0ZXJKb2luZXJSZWdpc3RyeV8xLkNoYXJhY3RlckpvaW5lclJlZ2lzdHJ5KF90ZXJtaW5hbCk7XG4gICAgICAgIGlmICh0aGVtZSkge1xuICAgICAgICAgICAgX3RoaXMuY29sb3JNYW5hZ2VyLnNldFRoZW1lKHRoZW1lKTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5fcmVuZGVyTGF5ZXJzID0gW1xuICAgICAgICAgICAgbmV3IFRleHRSZW5kZXJMYXllcl8xLlRleHRSZW5kZXJMYXllcihfdGhpcy5fdGVybWluYWwuc2NyZWVuRWxlbWVudCwgMCwgX3RoaXMuY29sb3JNYW5hZ2VyLmNvbG9ycywgX3RoaXMuX2NoYXJhY3RlckpvaW5lclJlZ2lzdHJ5LCBhbGxvd1RyYW5zcGFyZW5jeSksXG4gICAgICAgICAgICBuZXcgU2VsZWN0aW9uUmVuZGVyTGF5ZXJfMS5TZWxlY3Rpb25SZW5kZXJMYXllcihfdGhpcy5fdGVybWluYWwuc2NyZWVuRWxlbWVudCwgMSwgX3RoaXMuY29sb3JNYW5hZ2VyLmNvbG9ycyksXG4gICAgICAgICAgICBuZXcgTGlua1JlbmRlckxheWVyXzEuTGlua1JlbmRlckxheWVyKF90aGlzLl90ZXJtaW5hbC5zY3JlZW5FbGVtZW50LCAyLCBfdGhpcy5jb2xvck1hbmFnZXIuY29sb3JzLCBfdGhpcy5fdGVybWluYWwpLFxuICAgICAgICAgICAgbmV3IEN1cnNvclJlbmRlckxheWVyXzEuQ3Vyc29yUmVuZGVyTGF5ZXIoX3RoaXMuX3Rlcm1pbmFsLnNjcmVlbkVsZW1lbnQsIDMsIF90aGlzLmNvbG9yTWFuYWdlci5jb2xvcnMpXG4gICAgICAgIF07XG4gICAgICAgIF90aGlzLmRpbWVuc2lvbnMgPSB7XG4gICAgICAgICAgICBzY2FsZWRDaGFyV2lkdGg6IG51bGwsXG4gICAgICAgICAgICBzY2FsZWRDaGFySGVpZ2h0OiBudWxsLFxuICAgICAgICAgICAgc2NhbGVkQ2VsbFdpZHRoOiBudWxsLFxuICAgICAgICAgICAgc2NhbGVkQ2VsbEhlaWdodDogbnVsbCxcbiAgICAgICAgICAgIHNjYWxlZENoYXJMZWZ0OiBudWxsLFxuICAgICAgICAgICAgc2NhbGVkQ2hhclRvcDogbnVsbCxcbiAgICAgICAgICAgIHNjYWxlZENhbnZhc1dpZHRoOiBudWxsLFxuICAgICAgICAgICAgc2NhbGVkQ2FudmFzSGVpZ2h0OiBudWxsLFxuICAgICAgICAgICAgY2FudmFzV2lkdGg6IG51bGwsXG4gICAgICAgICAgICBjYW52YXNIZWlnaHQ6IG51bGwsXG4gICAgICAgICAgICBhY3R1YWxDZWxsV2lkdGg6IG51bGwsXG4gICAgICAgICAgICBhY3R1YWxDZWxsSGVpZ2h0OiBudWxsXG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9kZXZpY2VQaXhlbFJhdGlvID0gd2luZG93LmRldmljZVBpeGVsUmF0aW87XG4gICAgICAgIF90aGlzLl91cGRhdGVEaW1lbnNpb25zKCk7XG4gICAgICAgIF90aGlzLm9uT3B0aW9uc0NoYW5nZWQoKTtcbiAgICAgICAgX3RoaXMuX3JlbmRlckRlYm91bmNlciA9IG5ldyBSZW5kZXJEZWJvdW5jZXJfMS5SZW5kZXJEZWJvdW5jZXIoX3RoaXMuX3Rlcm1pbmFsLCBfdGhpcy5fcmVuZGVyUm93cy5iaW5kKF90aGlzKSk7XG4gICAgICAgIF90aGlzLl9zY3JlZW5EcHJNb25pdG9yID0gbmV3IFNjcmVlbkRwck1vbml0b3JfMS5TY3JlZW5EcHJNb25pdG9yKCk7XG4gICAgICAgIF90aGlzLl9zY3JlZW5EcHJNb25pdG9yLnNldExpc3RlbmVyKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLm9uV2luZG93UmVzaXplKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTsgfSk7XG4gICAgICAgIF90aGlzLnJlZ2lzdGVyKF90aGlzLl9zY3JlZW5EcHJNb25pdG9yKTtcbiAgICAgICAgaWYgKCdJbnRlcnNlY3Rpb25PYnNlcnZlcicgaW4gd2luZG93KSB7XG4gICAgICAgICAgICB2YXIgb2JzZXJ2ZXJfMSA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihmdW5jdGlvbiAoZSkgeyByZXR1cm4gX3RoaXMub25JbnRlcnNlY3Rpb25DaGFuZ2UoZVswXSk7IH0sIHsgdGhyZXNob2xkOiAwIH0pO1xuICAgICAgICAgICAgb2JzZXJ2ZXJfMS5vYnNlcnZlKF90aGlzLl90ZXJtaW5hbC5lbGVtZW50KTtcbiAgICAgICAgICAgIF90aGlzLnJlZ2lzdGVyKHsgZGlzcG9zZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gb2JzZXJ2ZXJfMS5kaXNjb25uZWN0KCk7IH0gfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBSZW5kZXJlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuX3JlbmRlckxheWVycy5mb3JFYWNoKGZ1bmN0aW9uIChsKSB7IHJldHVybiBsLmRpc3Bvc2UoKTsgfSk7XG4gICAgfTtcbiAgICBSZW5kZXJlci5wcm90b3R5cGUub25JbnRlcnNlY3Rpb25DaGFuZ2UgPSBmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgdGhpcy5faXNQYXVzZWQgPSBlbnRyeS5pbnRlcnNlY3Rpb25SYXRpbyA9PT0gMDtcbiAgICAgICAgaWYgKCF0aGlzLl9pc1BhdXNlZCAmJiB0aGlzLl9uZWVkc0Z1bGxSZWZyZXNoKSB7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5yZWZyZXNoKDAsIHRoaXMuX3Rlcm1pbmFsLnJvd3MgLSAxKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUmVuZGVyZXIucHJvdG90eXBlLm9uV2luZG93UmVzaXplID0gZnVuY3Rpb24gKGRldmljZVBpeGVsUmF0aW8pIHtcbiAgICAgICAgaWYgKHRoaXMuX2RldmljZVBpeGVsUmF0aW8gIT09IGRldmljZVBpeGVsUmF0aW8pIHtcbiAgICAgICAgICAgIHRoaXMuX2RldmljZVBpeGVsUmF0aW8gPSBkZXZpY2VQaXhlbFJhdGlvO1xuICAgICAgICAgICAgdGhpcy5vblJlc2l6ZSh0aGlzLl90ZXJtaW5hbC5jb2xzLCB0aGlzLl90ZXJtaW5hbC5yb3dzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUmVuZGVyZXIucHJvdG90eXBlLnNldFRoZW1lID0gZnVuY3Rpb24gKHRoZW1lKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuY29sb3JNYW5hZ2VyLnNldFRoZW1lKHRoZW1lKTtcbiAgICAgICAgdGhpcy5fcmVuZGVyTGF5ZXJzLmZvckVhY2goZnVuY3Rpb24gKGwpIHtcbiAgICAgICAgICAgIGwub25UaGVtZUNoYW5nZWQoX3RoaXMuX3Rlcm1pbmFsLCBfdGhpcy5jb2xvck1hbmFnZXIuY29sb3JzKTtcbiAgICAgICAgICAgIGwucmVzZXQoX3RoaXMuX3Rlcm1pbmFsKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0aGlzLl9pc1BhdXNlZCkge1xuICAgICAgICAgICAgdGhpcy5fbmVlZHNGdWxsUmVmcmVzaCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5yZWZyZXNoKDAsIHRoaXMuX3Rlcm1pbmFsLnJvd3MgLSAxKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5jb2xvck1hbmFnZXIuY29sb3JzO1xuICAgIH07XG4gICAgUmVuZGVyZXIucHJvdG90eXBlLm9uUmVzaXplID0gZnVuY3Rpb24gKGNvbHMsIHJvd3MpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5fdXBkYXRlRGltZW5zaW9ucygpO1xuICAgICAgICB0aGlzLl9yZW5kZXJMYXllcnMuZm9yRWFjaChmdW5jdGlvbiAobCkgeyByZXR1cm4gbC5yZXNpemUoX3RoaXMuX3Rlcm1pbmFsLCBfdGhpcy5kaW1lbnNpb25zKTsgfSk7XG4gICAgICAgIGlmICh0aGlzLl9pc1BhdXNlZCkge1xuICAgICAgICAgICAgdGhpcy5fbmVlZHNGdWxsUmVmcmVzaCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5yZWZyZXNoKDAsIHRoaXMuX3Rlcm1pbmFsLnJvd3MgLSAxKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90ZXJtaW5hbC5zY3JlZW5FbGVtZW50LnN0eWxlLndpZHRoID0gdGhpcy5kaW1lbnNpb25zLmNhbnZhc1dpZHRoICsgXCJweFwiO1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5zY3JlZW5FbGVtZW50LnN0eWxlLmhlaWdodCA9IHRoaXMuZGltZW5zaW9ucy5jYW52YXNIZWlnaHQgKyBcInB4XCI7XG4gICAgICAgIHRoaXMuZW1pdCgncmVzaXplJywge1xuICAgICAgICAgICAgd2lkdGg6IHRoaXMuZGltZW5zaW9ucy5jYW52YXNXaWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogdGhpcy5kaW1lbnNpb25zLmNhbnZhc0hlaWdodFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFJlbmRlcmVyLnByb3RvdHlwZS5vbkNoYXJTaXplQ2hhbmdlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5vblJlc2l6ZSh0aGlzLl90ZXJtaW5hbC5jb2xzLCB0aGlzLl90ZXJtaW5hbC5yb3dzKTtcbiAgICB9O1xuICAgIFJlbmRlcmVyLnByb3RvdHlwZS5vbkJsdXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuX3J1bk9wZXJhdGlvbihmdW5jdGlvbiAobCkgeyByZXR1cm4gbC5vbkJsdXIoX3RoaXMuX3Rlcm1pbmFsKTsgfSk7XG4gICAgfTtcbiAgICBSZW5kZXJlci5wcm90b3R5cGUub25Gb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5fcnVuT3BlcmF0aW9uKGZ1bmN0aW9uIChsKSB7IHJldHVybiBsLm9uRm9jdXMoX3RoaXMuX3Rlcm1pbmFsKTsgfSk7XG4gICAgfTtcbiAgICBSZW5kZXJlci5wcm90b3R5cGUub25TZWxlY3Rpb25DaGFuZ2VkID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQsIGNvbHVtblNlbGVjdE1vZGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKGNvbHVtblNlbGVjdE1vZGUgPT09IHZvaWQgMCkgeyBjb2x1bW5TZWxlY3RNb2RlID0gZmFsc2U7IH1cbiAgICAgICAgdGhpcy5fcnVuT3BlcmF0aW9uKGZ1bmN0aW9uIChsKSB7IHJldHVybiBsLm9uU2VsZWN0aW9uQ2hhbmdlZChfdGhpcy5fdGVybWluYWwsIHN0YXJ0LCBlbmQsIGNvbHVtblNlbGVjdE1vZGUpOyB9KTtcbiAgICB9O1xuICAgIFJlbmRlcmVyLnByb3RvdHlwZS5vbkN1cnNvck1vdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuX3J1bk9wZXJhdGlvbihmdW5jdGlvbiAobCkgeyByZXR1cm4gbC5vbkN1cnNvck1vdmUoX3RoaXMuX3Rlcm1pbmFsKTsgfSk7XG4gICAgfTtcbiAgICBSZW5kZXJlci5wcm90b3R5cGUub25PcHRpb25zQ2hhbmdlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5jb2xvck1hbmFnZXIuYWxsb3dUcmFuc3BhcmVuY3kgPSB0aGlzLl90ZXJtaW5hbC5vcHRpb25zLmFsbG93VHJhbnNwYXJlbmN5O1xuICAgICAgICB0aGlzLl9ydW5PcGVyYXRpb24oZnVuY3Rpb24gKGwpIHsgcmV0dXJuIGwub25PcHRpb25zQ2hhbmdlZChfdGhpcy5fdGVybWluYWwpOyB9KTtcbiAgICB9O1xuICAgIFJlbmRlcmVyLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5fcnVuT3BlcmF0aW9uKGZ1bmN0aW9uIChsKSB7IHJldHVybiBsLnJlc2V0KF90aGlzLl90ZXJtaW5hbCk7IH0pO1xuICAgIH07XG4gICAgUmVuZGVyZXIucHJvdG90eXBlLl9ydW5PcGVyYXRpb24gPSBmdW5jdGlvbiAob3BlcmF0aW9uKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc1BhdXNlZCkge1xuICAgICAgICAgICAgdGhpcy5fbmVlZHNGdWxsUmVmcmVzaCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJMYXllcnMuZm9yRWFjaChmdW5jdGlvbiAobCkgeyByZXR1cm4gb3BlcmF0aW9uKGwpOyB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUmVuZGVyZXIucHJvdG90eXBlLnJlZnJlc2hSb3dzID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzUGF1c2VkKSB7XG4gICAgICAgICAgICB0aGlzLl9uZWVkc0Z1bGxSZWZyZXNoID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZW5kZXJEZWJvdW5jZXIucmVmcmVzaChzdGFydCwgZW5kKTtcbiAgICB9O1xuICAgIFJlbmRlcmVyLnByb3RvdHlwZS5fcmVuZGVyUm93cyA9IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuX3JlbmRlckxheWVycy5mb3JFYWNoKGZ1bmN0aW9uIChsKSB7IHJldHVybiBsLm9uR3JpZENoYW5nZWQoX3RoaXMuX3Rlcm1pbmFsLCBzdGFydCwgZW5kKTsgfSk7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmVtaXQoJ3JlZnJlc2gnLCB7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQgfSk7XG4gICAgfTtcbiAgICBSZW5kZXJlci5wcm90b3R5cGUuX3VwZGF0ZURpbWVuc2lvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5fdGVybWluYWwuY2hhck1lYXN1cmUud2lkdGggfHwgIXRoaXMuX3Rlcm1pbmFsLmNoYXJNZWFzdXJlLmhlaWdodCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGltZW5zaW9ucy5zY2FsZWRDaGFyV2lkdGggPSBNYXRoLmZsb29yKHRoaXMuX3Rlcm1pbmFsLmNoYXJNZWFzdXJlLndpZHRoICogd2luZG93LmRldmljZVBpeGVsUmF0aW8pO1xuICAgICAgICB0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2hhckhlaWdodCA9IE1hdGguY2VpbCh0aGlzLl90ZXJtaW5hbC5jaGFyTWVhc3VyZS5oZWlnaHQgKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XG4gICAgICAgIHRoaXMuZGltZW5zaW9ucy5zY2FsZWRDZWxsSGVpZ2h0ID0gTWF0aC5mbG9vcih0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2hhckhlaWdodCAqIHRoaXMuX3Rlcm1pbmFsLm9wdGlvbnMubGluZUhlaWdodCk7XG4gICAgICAgIHRoaXMuZGltZW5zaW9ucy5zY2FsZWRDaGFyVG9wID0gdGhpcy5fdGVybWluYWwub3B0aW9ucy5saW5lSGVpZ2h0ID09PSAxID8gMCA6IE1hdGgucm91bmQoKHRoaXMuZGltZW5zaW9ucy5zY2FsZWRDZWxsSGVpZ2h0IC0gdGhpcy5kaW1lbnNpb25zLnNjYWxlZENoYXJIZWlnaHQpIC8gMik7XG4gICAgICAgIHRoaXMuZGltZW5zaW9ucy5zY2FsZWRDZWxsV2lkdGggPSB0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2hhcldpZHRoICsgTWF0aC5yb3VuZCh0aGlzLl90ZXJtaW5hbC5vcHRpb25zLmxldHRlclNwYWNpbmcpO1xuICAgICAgICB0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2hhckxlZnQgPSBNYXRoLmZsb29yKHRoaXMuX3Rlcm1pbmFsLm9wdGlvbnMubGV0dGVyU3BhY2luZyAvIDIpO1xuICAgICAgICB0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2FudmFzSGVpZ2h0ID0gdGhpcy5fdGVybWluYWwucm93cyAqIHRoaXMuZGltZW5zaW9ucy5zY2FsZWRDZWxsSGVpZ2h0O1xuICAgICAgICB0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2FudmFzV2lkdGggPSB0aGlzLl90ZXJtaW5hbC5jb2xzICogdGhpcy5kaW1lbnNpb25zLnNjYWxlZENlbGxXaWR0aDtcbiAgICAgICAgdGhpcy5kaW1lbnNpb25zLmNhbnZhc0hlaWdodCA9IE1hdGgucm91bmQodGhpcy5kaW1lbnNpb25zLnNjYWxlZENhbnZhc0hlaWdodCAvIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTtcbiAgICAgICAgdGhpcy5kaW1lbnNpb25zLmNhbnZhc1dpZHRoID0gTWF0aC5yb3VuZCh0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2FudmFzV2lkdGggLyB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XG4gICAgICAgIHRoaXMuZGltZW5zaW9ucy5hY3R1YWxDZWxsSGVpZ2h0ID0gdGhpcy5kaW1lbnNpb25zLmNhbnZhc0hlaWdodCAvIHRoaXMuX3Rlcm1pbmFsLnJvd3M7XG4gICAgICAgIHRoaXMuZGltZW5zaW9ucy5hY3R1YWxDZWxsV2lkdGggPSB0aGlzLmRpbWVuc2lvbnMuY2FudmFzV2lkdGggLyB0aGlzLl90ZXJtaW5hbC5jb2xzO1xuICAgIH07XG4gICAgUmVuZGVyZXIucHJvdG90eXBlLnJlZ2lzdGVyQ2hhcmFjdGVySm9pbmVyID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoYXJhY3RlckpvaW5lclJlZ2lzdHJ5LnJlZ2lzdGVyQ2hhcmFjdGVySm9pbmVyKGhhbmRsZXIpO1xuICAgIH07XG4gICAgUmVuZGVyZXIucHJvdG90eXBlLmRlcmVnaXN0ZXJDaGFyYWN0ZXJKb2luZXIgPSBmdW5jdGlvbiAoam9pbmVySWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoYXJhY3RlckpvaW5lclJlZ2lzdHJ5LmRlcmVnaXN0ZXJDaGFyYWN0ZXJKb2luZXIoam9pbmVySWQpO1xuICAgIH07XG4gICAgcmV0dXJuIFJlbmRlcmVyO1xufShFdmVudEVtaXR0ZXJfMS5FdmVudEVtaXR0ZXIpKTtcbmV4cG9ydHMuUmVuZGVyZXIgPSBSZW5kZXJlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJlbmRlcmVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBCdWZmZXJfMSA9IHJlcXVpcmUoXCIuLi9CdWZmZXJcIik7XG52YXIgVHlwZXNfMSA9IHJlcXVpcmUoXCIuL2F0bGFzL1R5cGVzXCIpO1xudmFyIEdyaWRDYWNoZV8xID0gcmVxdWlyZShcIi4vR3JpZENhY2hlXCIpO1xudmFyIEJhc2VSZW5kZXJMYXllcl8xID0gcmVxdWlyZShcIi4vQmFzZVJlbmRlckxheWVyXCIpO1xudmFyIENoYXJBdGxhc1V0aWxzXzEgPSByZXF1aXJlKFwiLi9hdGxhcy9DaGFyQXRsYXNVdGlsc1wiKTtcbnZhciBUZXh0UmVuZGVyTGF5ZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhUZXh0UmVuZGVyTGF5ZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVGV4dFJlbmRlckxheWVyKGNvbnRhaW5lciwgekluZGV4LCBjb2xvcnMsIGNoYXJhY3RlckpvaW5lclJlZ2lzdHJ5LCBhbHBoYSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBjb250YWluZXIsICd0ZXh0JywgekluZGV4LCBhbHBoYSwgY29sb3JzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fY2hhcmFjdGVyT3ZlcmxhcENhY2hlID0ge307XG4gICAgICAgIF90aGlzLl9zdGF0ZSA9IG5ldyBHcmlkQ2FjaGVfMS5HcmlkQ2FjaGUoKTtcbiAgICAgICAgX3RoaXMuX2NoYXJhY3RlckpvaW5lclJlZ2lzdHJ5ID0gY2hhcmFjdGVySm9pbmVyUmVnaXN0cnk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgVGV4dFJlbmRlckxheWVyLnByb3RvdHlwZS5yZXNpemUgPSBmdW5jdGlvbiAodGVybWluYWwsIGRpbSkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLnJlc2l6ZS5jYWxsKHRoaXMsIHRlcm1pbmFsLCBkaW0pO1xuICAgICAgICB2YXIgdGVybWluYWxGb250ID0gdGhpcy5fZ2V0Rm9udCh0ZXJtaW5hbCwgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgaWYgKHRoaXMuX2NoYXJhY3RlcldpZHRoICE9PSBkaW0uc2NhbGVkQ2hhcldpZHRoIHx8IHRoaXMuX2NoYXJhY3RlckZvbnQgIT09IHRlcm1pbmFsRm9udCkge1xuICAgICAgICAgICAgdGhpcy5fY2hhcmFjdGVyV2lkdGggPSBkaW0uc2NhbGVkQ2hhcldpZHRoO1xuICAgICAgICAgICAgdGhpcy5fY2hhcmFjdGVyRm9udCA9IHRlcm1pbmFsRm9udDtcbiAgICAgICAgICAgIHRoaXMuX2NoYXJhY3Rlck92ZXJsYXBDYWNoZSA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3N0YXRlLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuX3N0YXRlLnJlc2l6ZSh0ZXJtaW5hbC5jb2xzLCB0ZXJtaW5hbC5yb3dzKTtcbiAgICB9O1xuICAgIFRleHRSZW5kZXJMYXllci5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAodGVybWluYWwpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5jbGVhckFsbCgpO1xuICAgIH07XG4gICAgVGV4dFJlbmRlckxheWVyLnByb3RvdHlwZS5fZm9yRWFjaENlbGwgPSBmdW5jdGlvbiAodGVybWluYWwsIGZpcnN0Um93LCBsYXN0Um93LCBqb2luZXJSZWdpc3RyeSwgY2FsbGJhY2spIHtcbiAgICAgICAgZm9yICh2YXIgeSA9IGZpcnN0Um93OyB5IDw9IGxhc3RSb3c7IHkrKykge1xuICAgICAgICAgICAgdmFyIHJvdyA9IHkgKyB0ZXJtaW5hbC5idWZmZXIueWRpc3A7XG4gICAgICAgICAgICB2YXIgbGluZSA9IHRlcm1pbmFsLmJ1ZmZlci5saW5lcy5nZXQocm93KTtcbiAgICAgICAgICAgIHZhciBqb2luZWRSYW5nZXMgPSBqb2luZXJSZWdpc3RyeSA/IGpvaW5lclJlZ2lzdHJ5LmdldEpvaW5lZENoYXJhY3RlcnMocm93KSA6IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCB0ZXJtaW5hbC5jb2xzOyB4KyspIHtcbiAgICAgICAgICAgICAgICB2YXIgY2hhckRhdGEgPSBsaW5lLmdldCh4KTtcbiAgICAgICAgICAgICAgICB2YXIgY29kZSA9IGNoYXJEYXRhW0J1ZmZlcl8xLkNIQVJfREFUQV9DT0RFX0lOREVYXTtcbiAgICAgICAgICAgICAgICB2YXIgY2hhcnMgPSBjaGFyRGF0YVtCdWZmZXJfMS5DSEFSX0RBVEFfQ0hBUl9JTkRFWF07XG4gICAgICAgICAgICAgICAgdmFyIGF0dHIgPSBjaGFyRGF0YVtCdWZmZXJfMS5DSEFSX0RBVEFfQVRUUl9JTkRFWF07XG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gY2hhckRhdGFbQnVmZmVyXzEuQ0hBUl9EQVRBX1dJRFRIX0lOREVYXTtcbiAgICAgICAgICAgICAgICB2YXIgaXNKb2luZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgbGFzdENoYXJYID0geDtcbiAgICAgICAgICAgICAgICBpZiAod2lkdGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChqb2luZWRSYW5nZXMubGVuZ3RoID4gMCAmJiB4ID09PSBqb2luZWRSYW5nZXNbMF1bMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgaXNKb2luZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmFuZ2UgPSBqb2luZWRSYW5nZXMuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgY2hhcnMgPSB0ZXJtaW5hbC5idWZmZXIudHJhbnNsYXRlQnVmZmVyTGluZVRvU3RyaW5nKHJvdywgdHJ1ZSwgcmFuZ2VbMF0sIHJhbmdlWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPSByYW5nZVsxXSAtIHJhbmdlWzBdO1xuICAgICAgICAgICAgICAgICAgICBjb2RlID0gSW5maW5pdHk7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RDaGFyWCA9IHJhbmdlWzFdIC0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFpc0pvaW5lZCAmJiB0aGlzLl9pc092ZXJsYXBwaW5nKGNoYXJEYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobGFzdENoYXJYIDwgbGluZS5sZW5ndGggLSAxICYmIGxpbmUuZ2V0KGxhc3RDaGFyWCArIDEpW0J1ZmZlcl8xLkNIQVJfREFUQV9DT0RFX0lOREVYXSA9PT0gQnVmZmVyXzEuTlVMTF9DRUxMX0NPREUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoID0gMjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZmxhZ3MgPSBhdHRyID4+IDE4O1xuICAgICAgICAgICAgICAgIHZhciBiZyA9IGF0dHIgJiAweDFmZjtcbiAgICAgICAgICAgICAgICB2YXIgZmcgPSAoYXR0ciA+PiA5KSAmIDB4MWZmO1xuICAgICAgICAgICAgICAgIGlmIChmbGFncyAmIDgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXAgPSBiZztcbiAgICAgICAgICAgICAgICAgICAgYmcgPSBmZztcbiAgICAgICAgICAgICAgICAgICAgZmcgPSB0ZW1wO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmcgPT09IFR5cGVzXzEuREVGQVVMVF9DT0xPUikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmcgPSBUeXBlc18xLklOVkVSVEVEX0RFRkFVTFRfQ09MT1I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGJnID09PSBUeXBlc18xLkRFRkFVTFRfQ09MT1IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJnID0gVHlwZXNfMS5JTlZFUlRFRF9ERUZBVUxUX0NPTE9SO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGNvZGUsIGNoYXJzLCB3aWR0aCwgeCwgeSwgZmcsIGJnLCBmbGFncyk7XG4gICAgICAgICAgICAgICAgeCA9IGxhc3RDaGFyWDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgVGV4dFJlbmRlckxheWVyLnByb3RvdHlwZS5fZHJhd0JhY2tncm91bmQgPSBmdW5jdGlvbiAodGVybWluYWwsIGZpcnN0Um93LCBsYXN0Um93KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBjdHggPSB0aGlzLl9jdHg7XG4gICAgICAgIHZhciBjb2xzID0gdGVybWluYWwuY29scztcbiAgICAgICAgdmFyIHN0YXJ0WCA9IDA7XG4gICAgICAgIHZhciBzdGFydFkgPSAwO1xuICAgICAgICB2YXIgcHJldkZpbGxTdHlsZSA9IG51bGw7XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIHRoaXMuX2ZvckVhY2hDZWxsKHRlcm1pbmFsLCBmaXJzdFJvdywgbGFzdFJvdywgbnVsbCwgZnVuY3Rpb24gKGNvZGUsIGNoYXJzLCB3aWR0aCwgeCwgeSwgZmcsIGJnLCBmbGFncykge1xuICAgICAgICAgICAgdmFyIG5leHRGaWxsU3R5bGUgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGJnID09PSBUeXBlc18xLklOVkVSVEVEX0RFRkFVTFRfQ09MT1IpIHtcbiAgICAgICAgICAgICAgICBuZXh0RmlsbFN0eWxlID0gX3RoaXMuX2NvbG9ycy5mb3JlZ3JvdW5kLmNzcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKENoYXJBdGxhc1V0aWxzXzEuaXMyNTZDb2xvcihiZykpIHtcbiAgICAgICAgICAgICAgICBuZXh0RmlsbFN0eWxlID0gX3RoaXMuX2NvbG9ycy5hbnNpW2JnXS5jc3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJldkZpbGxTdHlsZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHN0YXJ0WCA9IHg7XG4gICAgICAgICAgICAgICAgc3RhcnRZID0geTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh5ICE9PSBzdGFydFkpIHtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gcHJldkZpbGxTdHlsZTtcbiAgICAgICAgICAgICAgICBfdGhpcy5maWxsQ2VsbHMoc3RhcnRYLCBzdGFydFksIGNvbHMgLSBzdGFydFgsIDEpO1xuICAgICAgICAgICAgICAgIHN0YXJ0WCA9IHg7XG4gICAgICAgICAgICAgICAgc3RhcnRZID0geTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHByZXZGaWxsU3R5bGUgIT09IG5leHRGaWxsU3R5bGUpIHtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gcHJldkZpbGxTdHlsZTtcbiAgICAgICAgICAgICAgICBfdGhpcy5maWxsQ2VsbHMoc3RhcnRYLCBzdGFydFksIHggLSBzdGFydFgsIDEpO1xuICAgICAgICAgICAgICAgIHN0YXJ0WCA9IHg7XG4gICAgICAgICAgICAgICAgc3RhcnRZID0geTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZXZGaWxsU3R5bGUgPSBuZXh0RmlsbFN0eWxlO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHByZXZGaWxsU3R5bGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBwcmV2RmlsbFN0eWxlO1xuICAgICAgICAgICAgdGhpcy5maWxsQ2VsbHMoc3RhcnRYLCBzdGFydFksIGNvbHMgLSBzdGFydFgsIDEpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfTtcbiAgICBUZXh0UmVuZGVyTGF5ZXIucHJvdG90eXBlLl9kcmF3Rm9yZWdyb3VuZCA9IGZ1bmN0aW9uICh0ZXJtaW5hbCwgZmlyc3RSb3csIGxhc3RSb3cpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5fZm9yRWFjaENlbGwodGVybWluYWwsIGZpcnN0Um93LCBsYXN0Um93LCB0aGlzLl9jaGFyYWN0ZXJKb2luZXJSZWdpc3RyeSwgZnVuY3Rpb24gKGNvZGUsIGNoYXJzLCB3aWR0aCwgeCwgeSwgZmcsIGJnLCBmbGFncykge1xuICAgICAgICAgICAgaWYgKGZsYWdzICYgMTYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZmxhZ3MgJiAyKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2N0eC5zYXZlKCk7XG4gICAgICAgICAgICAgICAgaWYgKGZnID09PSBUeXBlc18xLklOVkVSVEVEX0RFRkFVTFRfQ09MT1IpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2N0eC5maWxsU3R5bGUgPSBfdGhpcy5fY29sb3JzLmJhY2tncm91bmQuY3NzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChDaGFyQXRsYXNVdGlsc18xLmlzMjU2Q29sb3IoZmcpKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9jdHguZmlsbFN0eWxlID0gX3RoaXMuX2NvbG9ycy5hbnNpW2ZnXS5jc3M7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fY3R4LmZpbGxTdHlsZSA9IF90aGlzLl9jb2xvcnMuZm9yZWdyb3VuZC5jc3M7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzLmZpbGxCb3R0b21MaW5lQXRDZWxscyh4LCB5LCB3aWR0aCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2N0eC5yZXN0b3JlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5kcmF3Q2hhcnModGVybWluYWwsIGNoYXJzLCBjb2RlLCB3aWR0aCwgeCwgeSwgZmcsIGJnLCAhIShmbGFncyAmIDEpLCAhIShmbGFncyAmIDMyKSwgISEoZmxhZ3MgJiA2NCkpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFRleHRSZW5kZXJMYXllci5wcm90b3R5cGUub25HcmlkQ2hhbmdlZCA9IGZ1bmN0aW9uICh0ZXJtaW5hbCwgZmlyc3RSb3csIGxhc3RSb3cpIHtcbiAgICAgICAgaWYgKHRoaXMuX3N0YXRlLmNhY2hlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9jaGFyQXRsYXMpIHtcbiAgICAgICAgICAgIHRoaXMuX2NoYXJBdGxhcy5iZWdpbkZyYW1lKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jbGVhckNlbGxzKDAsIGZpcnN0Um93LCB0ZXJtaW5hbC5jb2xzLCBsYXN0Um93IC0gZmlyc3RSb3cgKyAxKTtcbiAgICAgICAgdGhpcy5fZHJhd0JhY2tncm91bmQodGVybWluYWwsIGZpcnN0Um93LCBsYXN0Um93KTtcbiAgICAgICAgdGhpcy5fZHJhd0ZvcmVncm91bmQodGVybWluYWwsIGZpcnN0Um93LCBsYXN0Um93KTtcbiAgICB9O1xuICAgIFRleHRSZW5kZXJMYXllci5wcm90b3R5cGUub25PcHRpb25zQ2hhbmdlZCA9IGZ1bmN0aW9uICh0ZXJtaW5hbCkge1xuICAgICAgICB0aGlzLnNldFRyYW5zcGFyZW5jeSh0ZXJtaW5hbCwgdGVybWluYWwub3B0aW9ucy5hbGxvd1RyYW5zcGFyZW5jeSk7XG4gICAgfTtcbiAgICBUZXh0UmVuZGVyTGF5ZXIucHJvdG90eXBlLl9pc092ZXJsYXBwaW5nID0gZnVuY3Rpb24gKGNoYXJEYXRhKSB7XG4gICAgICAgIGlmIChjaGFyRGF0YVtCdWZmZXJfMS5DSEFSX0RBVEFfV0lEVEhfSU5ERVhdICE9PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvZGUgPSBjaGFyRGF0YVtCdWZmZXJfMS5DSEFSX0RBVEFfQ09ERV9JTkRFWF07XG4gICAgICAgIGlmIChjb2RlIDwgMjU2KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNoYXIgPSBjaGFyRGF0YVtCdWZmZXJfMS5DSEFSX0RBVEFfQ0hBUl9JTkRFWF07XG4gICAgICAgIGlmICh0aGlzLl9jaGFyYWN0ZXJPdmVybGFwQ2FjaGUuaGFzT3duUHJvcGVydHkoY2hhcikpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaGFyYWN0ZXJPdmVybGFwQ2FjaGVbY2hhcl07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY3R4LnNhdmUoKTtcbiAgICAgICAgdGhpcy5fY3R4LmZvbnQgPSB0aGlzLl9jaGFyYWN0ZXJGb250O1xuICAgICAgICB2YXIgb3ZlcmxhcHMgPSBNYXRoLmZsb29yKHRoaXMuX2N0eC5tZWFzdXJlVGV4dChjaGFyKS53aWR0aCkgPiB0aGlzLl9jaGFyYWN0ZXJXaWR0aDtcbiAgICAgICAgdGhpcy5fY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgdGhpcy5fY2hhcmFjdGVyT3ZlcmxhcENhY2hlW2NoYXJdID0gb3ZlcmxhcHM7XG4gICAgICAgIHJldHVybiBvdmVybGFwcztcbiAgICB9O1xuICAgIHJldHVybiBUZXh0UmVuZGVyTGF5ZXI7XG59KEJhc2VSZW5kZXJMYXllcl8xLkJhc2VSZW5kZXJMYXllcikpO1xuZXhwb3J0cy5UZXh0UmVuZGVyTGF5ZXIgPSBUZXh0UmVuZGVyTGF5ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1UZXh0UmVuZGVyTGF5ZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgR3JpZENhY2hlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBHcmlkQ2FjaGUoKSB7XG4gICAgICAgIHRoaXMuY2FjaGUgPSBbXTtcbiAgICB9XG4gICAgR3JpZENhY2hlLnByb3RvdHlwZS5yZXNpemUgPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCkge1xuICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHdpZHRoOyB4KyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNhY2hlLmxlbmd0aCA8PSB4KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYWNoZS5wdXNoKFtdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIHkgPSB0aGlzLmNhY2hlW3hdLmxlbmd0aDsgeSA8IGhlaWdodDsgeSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYWNoZVt4XS5wdXNoKG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jYWNoZVt4XS5sZW5ndGggPSBoZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jYWNoZS5sZW5ndGggPSB3aWR0aDtcbiAgICB9O1xuICAgIEdyaWRDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgdGhpcy5jYWNoZS5sZW5ndGg7IHgrKykge1xuICAgICAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCB0aGlzLmNhY2hlW3hdLmxlbmd0aDsgeSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYWNoZVt4XVt5XSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBHcmlkQ2FjaGU7XG59KCkpO1xuZXhwb3J0cy5HcmlkQ2FjaGUgPSBHcmlkQ2FjaGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HcmlkQ2FjaGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFR5cGVzXzEgPSByZXF1aXJlKFwiLi9UeXBlc1wiKTtcbnZhciBCYXNlQ2hhckF0bGFzXzEgPSByZXF1aXJlKFwiLi9CYXNlQ2hhckF0bGFzXCIpO1xudmFyIENvbG9yTWFuYWdlcl8xID0gcmVxdWlyZShcIi4uL0NvbG9yTWFuYWdlclwiKTtcbnZhciBDaGFyQXRsYXNHZW5lcmF0b3JfMSA9IHJlcXVpcmUoXCIuL0NoYXJBdGxhc0dlbmVyYXRvclwiKTtcbnZhciBMUlVNYXBfMSA9IHJlcXVpcmUoXCIuL0xSVU1hcFwiKTtcbnZhciBQbGF0Zm9ybV8xID0gcmVxdWlyZShcIi4uLy4uL2NvcmUvUGxhdGZvcm1cIik7XG52YXIgVEVYVFVSRV9XSURUSCA9IDEwMjQ7XG52YXIgVEVYVFVSRV9IRUlHSFQgPSAxMDI0O1xudmFyIFRSQU5TUEFSRU5UX0NPTE9SID0ge1xuICAgIGNzczogJ3JnYmEoMCwgMCwgMCwgMCknLFxuICAgIHJnYmE6IDBcbn07XG52YXIgRlJBTUVfQ0FDSEVfRFJBV19MSU1JVCA9IDEwMDtcbnZhciBHTFlQSF9CSVRNQVBfQ09NTUlUX0RFTEFZID0gMTAwO1xuZnVuY3Rpb24gZ2V0R2x5cGhDYWNoZUtleShnbHlwaCkge1xuICAgIHJldHVybiBnbHlwaC5jb2RlIDw8IDIxIHwgZ2x5cGguYmcgPDwgMTIgfCBnbHlwaC5mZyA8PCAzIHwgKGdseXBoLmJvbGQgPyAwIDogNCkgKyAoZ2x5cGguZGltID8gMCA6IDIpICsgKGdseXBoLml0YWxpYyA/IDAgOiAxKTtcbn1cbmV4cG9ydHMuZ2V0R2x5cGhDYWNoZUtleSA9IGdldEdseXBoQ2FjaGVLZXk7XG52YXIgRHluYW1pY0NoYXJBdGxhcyA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKER5bmFtaWNDaGFyQXRsYXMsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRHluYW1pY0NoYXJBdGxhcyhkb2N1bWVudCwgX2NvbmZpZykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fY29uZmlnID0gX2NvbmZpZztcbiAgICAgICAgX3RoaXMuX2RyYXdUb0NhY2hlQ291bnQgPSAwO1xuICAgICAgICBfdGhpcy5fZ2x5cGhzV2FpdGluZ09uQml0bWFwID0gW107XG4gICAgICAgIF90aGlzLl9iaXRtYXBDb21taXRUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgX3RoaXMuX2JpdG1hcCA9IG51bGw7XG4gICAgICAgIF90aGlzLl9jYWNoZUNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgICBfdGhpcy5fY2FjaGVDYW52YXMud2lkdGggPSBURVhUVVJFX1dJRFRIO1xuICAgICAgICBfdGhpcy5fY2FjaGVDYW52YXMuaGVpZ2h0ID0gVEVYVFVSRV9IRUlHSFQ7XG4gICAgICAgIF90aGlzLl9jYWNoZUN0eCA9IF90aGlzLl9jYWNoZUNhbnZhcy5nZXRDb250ZXh0KCcyZCcsIHsgYWxwaGE6IHRydWUgfSk7XG4gICAgICAgIHZhciB0bXBDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgdG1wQ2FudmFzLndpZHRoID0gX3RoaXMuX2NvbmZpZy5zY2FsZWRDaGFyV2lkdGg7XG4gICAgICAgIHRtcENhbnZhcy5oZWlnaHQgPSBfdGhpcy5fY29uZmlnLnNjYWxlZENoYXJIZWlnaHQ7XG4gICAgICAgIF90aGlzLl90bXBDdHggPSB0bXBDYW52YXMuZ2V0Q29udGV4dCgnMmQnLCB7IGFscGhhOiBfdGhpcy5fY29uZmlnLmFsbG93VHJhbnNwYXJlbmN5IH0pO1xuICAgICAgICBfdGhpcy5fd2lkdGggPSBNYXRoLmZsb29yKFRFWFRVUkVfV0lEVEggLyBfdGhpcy5fY29uZmlnLnNjYWxlZENoYXJXaWR0aCk7XG4gICAgICAgIF90aGlzLl9oZWlnaHQgPSBNYXRoLmZsb29yKFRFWFRVUkVfSEVJR0hUIC8gX3RoaXMuX2NvbmZpZy5zY2FsZWRDaGFySGVpZ2h0KTtcbiAgICAgICAgdmFyIGNhcGFjaXR5ID0gX3RoaXMuX3dpZHRoICogX3RoaXMuX2hlaWdodDtcbiAgICAgICAgX3RoaXMuX2NhY2hlTWFwID0gbmV3IExSVU1hcF8xLmRlZmF1bHQoY2FwYWNpdHkpO1xuICAgICAgICBfdGhpcy5fY2FjaGVNYXAucHJlYWxsb2MoY2FwYWNpdHkpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIER5bmFtaWNDaGFyQXRsYXMucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9iaXRtYXBDb21taXRUaW1lb3V0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMuX2JpdG1hcENvbW1pdFRpbWVvdXQpO1xuICAgICAgICAgICAgdGhpcy5fYml0bWFwQ29tbWl0VGltZW91dCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIER5bmFtaWNDaGFyQXRsYXMucHJvdG90eXBlLmJlZ2luRnJhbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2RyYXdUb0NhY2hlQ291bnQgPSAwO1xuICAgIH07XG4gICAgRHluYW1pY0NoYXJBdGxhcy5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uIChjdHgsIGdseXBoLCB4LCB5KSB7XG4gICAgICAgIGlmIChnbHlwaC5jb2RlID09PSAzMikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9jYW5DYWNoZShnbHlwaCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZ2x5cGhLZXkgPSBnZXRHbHlwaENhY2hlS2V5KGdseXBoKTtcbiAgICAgICAgdmFyIGNhY2hlVmFsdWUgPSB0aGlzLl9jYWNoZU1hcC5nZXQoZ2x5cGhLZXkpO1xuICAgICAgICBpZiAoY2FjaGVWYWx1ZSAhPT0gbnVsbCAmJiBjYWNoZVZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2RyYXdGcm9tQ2FjaGUoY3R4LCBjYWNoZVZhbHVlLCB4LCB5KTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX2RyYXdUb0NhY2hlQ291bnQgPCBGUkFNRV9DQUNIRV9EUkFXX0xJTUlUKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSB2b2lkIDA7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2FjaGVNYXAuc2l6ZSA8IHRoaXMuX2NhY2hlTWFwLmNhcGFjaXR5KSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSB0aGlzLl9jYWNoZU1hcC5zaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSB0aGlzLl9jYWNoZU1hcC5wZWVrKCkuaW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY2FjaGVWYWx1ZV8xID0gdGhpcy5fZHJhd1RvQ2FjaGUoZ2x5cGgsIGluZGV4KTtcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlTWFwLnNldChnbHlwaEtleSwgY2FjaGVWYWx1ZV8xKTtcbiAgICAgICAgICAgIHRoaXMuX2RyYXdGcm9tQ2FjaGUoY3R4LCBjYWNoZVZhbHVlXzEsIHgsIHkpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgRHluYW1pY0NoYXJBdGxhcy5wcm90b3R5cGUuX2NhbkNhY2hlID0gZnVuY3Rpb24gKGdseXBoKSB7XG4gICAgICAgIHJldHVybiBnbHlwaC5jb2RlIDwgMjU2O1xuICAgIH07XG4gICAgRHluYW1pY0NoYXJBdGxhcy5wcm90b3R5cGUuX3RvQ29vcmRpbmF0ZVggPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIChpbmRleCAlIHRoaXMuX3dpZHRoKSAqIHRoaXMuX2NvbmZpZy5zY2FsZWRDaGFyV2lkdGg7XG4gICAgfTtcbiAgICBEeW5hbWljQ2hhckF0bGFzLnByb3RvdHlwZS5fdG9Db29yZGluYXRlWSA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihpbmRleCAvIHRoaXMuX3dpZHRoKSAqIHRoaXMuX2NvbmZpZy5zY2FsZWRDaGFySGVpZ2h0O1xuICAgIH07XG4gICAgRHluYW1pY0NoYXJBdGxhcy5wcm90b3R5cGUuX2RyYXdGcm9tQ2FjaGUgPSBmdW5jdGlvbiAoY3R4LCBjYWNoZVZhbHVlLCB4LCB5KSB7XG4gICAgICAgIGlmIChjYWNoZVZhbHVlLmlzRW1wdHkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2FjaGVYID0gdGhpcy5fdG9Db29yZGluYXRlWChjYWNoZVZhbHVlLmluZGV4KTtcbiAgICAgICAgdmFyIGNhY2hlWSA9IHRoaXMuX3RvQ29vcmRpbmF0ZVkoY2FjaGVWYWx1ZS5pbmRleCk7XG4gICAgICAgIGN0eC5kcmF3SW1hZ2UoY2FjaGVWYWx1ZS5pbkJpdG1hcCA/IHRoaXMuX2JpdG1hcCA6IHRoaXMuX2NhY2hlQ2FudmFzLCBjYWNoZVgsIGNhY2hlWSwgdGhpcy5fY29uZmlnLnNjYWxlZENoYXJXaWR0aCwgdGhpcy5fY29uZmlnLnNjYWxlZENoYXJIZWlnaHQsIHgsIHksIHRoaXMuX2NvbmZpZy5zY2FsZWRDaGFyV2lkdGgsIHRoaXMuX2NvbmZpZy5zY2FsZWRDaGFySGVpZ2h0KTtcbiAgICB9O1xuICAgIER5bmFtaWNDaGFyQXRsYXMucHJvdG90eXBlLl9nZXRDb2xvckZyb21BbnNpSW5kZXggPSBmdW5jdGlvbiAoaWR4KSB7XG4gICAgICAgIGlmIChpZHggPCB0aGlzLl9jb25maWcuY29sb3JzLmFuc2kubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY29uZmlnLmNvbG9ycy5hbnNpW2lkeF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIENvbG9yTWFuYWdlcl8xLkRFRkFVTFRfQU5TSV9DT0xPUlNbaWR4XTtcbiAgICB9O1xuICAgIER5bmFtaWNDaGFyQXRsYXMucHJvdG90eXBlLl9nZXRCYWNrZ3JvdW5kQ29sb3IgPSBmdW5jdGlvbiAoZ2x5cGgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NvbmZpZy5hbGxvd1RyYW5zcGFyZW5jeSkge1xuICAgICAgICAgICAgcmV0dXJuIFRSQU5TUEFSRU5UX0NPTE9SO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGdseXBoLmJnID09PSBUeXBlc18xLklOVkVSVEVEX0RFRkFVTFRfQ09MT1IpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb25maWcuY29sb3JzLmZvcmVncm91bmQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZ2x5cGguYmcgPCAyNTYpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRDb2xvckZyb21BbnNpSW5kZXgoZ2x5cGguYmcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jb25maWcuY29sb3JzLmJhY2tncm91bmQ7XG4gICAgfTtcbiAgICBEeW5hbWljQ2hhckF0bGFzLnByb3RvdHlwZS5fZ2V0Rm9yZWdyb3VuZENvbG9yID0gZnVuY3Rpb24gKGdseXBoKSB7XG4gICAgICAgIGlmIChnbHlwaC5mZyA9PT0gVHlwZXNfMS5JTlZFUlRFRF9ERUZBVUxUX0NPTE9SKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY29uZmlnLmNvbG9ycy5iYWNrZ3JvdW5kO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGdseXBoLmZnIDwgMjU2KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0Q29sb3JGcm9tQW5zaUluZGV4KGdseXBoLmZnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY29uZmlnLmNvbG9ycy5mb3JlZ3JvdW5kO1xuICAgIH07XG4gICAgRHluYW1pY0NoYXJBdGxhcy5wcm90b3R5cGUuX2RyYXdUb0NhY2hlID0gZnVuY3Rpb24gKGdseXBoLCBpbmRleCkge1xuICAgICAgICB0aGlzLl9kcmF3VG9DYWNoZUNvdW50Kys7XG4gICAgICAgIHRoaXMuX3RtcEN0eC5zYXZlKCk7XG4gICAgICAgIHZhciBiYWNrZ3JvdW5kQ29sb3IgPSB0aGlzLl9nZXRCYWNrZ3JvdW5kQ29sb3IoZ2x5cGgpO1xuICAgICAgICB0aGlzLl90bXBDdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gJ2NvcHknO1xuICAgICAgICB0aGlzLl90bXBDdHguZmlsbFN0eWxlID0gYmFja2dyb3VuZENvbG9yLmNzcztcbiAgICAgICAgdGhpcy5fdG1wQ3R4LmZpbGxSZWN0KDAsIDAsIHRoaXMuX2NvbmZpZy5zY2FsZWRDaGFyV2lkdGgsIHRoaXMuX2NvbmZpZy5zY2FsZWRDaGFySGVpZ2h0KTtcbiAgICAgICAgdGhpcy5fdG1wQ3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdzb3VyY2Utb3Zlcic7XG4gICAgICAgIHZhciBmb250V2VpZ2h0ID0gZ2x5cGguYm9sZCA/IHRoaXMuX2NvbmZpZy5mb250V2VpZ2h0Qm9sZCA6IHRoaXMuX2NvbmZpZy5mb250V2VpZ2h0O1xuICAgICAgICB2YXIgZm9udFN0eWxlID0gZ2x5cGguaXRhbGljID8gJ2l0YWxpYycgOiAnJztcbiAgICAgICAgdGhpcy5fdG1wQ3R4LmZvbnQgPVxuICAgICAgICAgICAgZm9udFN0eWxlICsgXCIgXCIgKyBmb250V2VpZ2h0ICsgXCIgXCIgKyB0aGlzLl9jb25maWcuZm9udFNpemUgKiB0aGlzLl9jb25maWcuZGV2aWNlUGl4ZWxSYXRpbyArIFwicHggXCIgKyB0aGlzLl9jb25maWcuZm9udEZhbWlseTtcbiAgICAgICAgdGhpcy5fdG1wQ3R4LnRleHRCYXNlbGluZSA9ICd0b3AnO1xuICAgICAgICB0aGlzLl90bXBDdHguZmlsbFN0eWxlID0gdGhpcy5fZ2V0Rm9yZWdyb3VuZENvbG9yKGdseXBoKS5jc3M7XG4gICAgICAgIGlmIChnbHlwaC5kaW0pIHtcbiAgICAgICAgICAgIHRoaXMuX3RtcEN0eC5nbG9iYWxBbHBoYSA9IFR5cGVzXzEuRElNX09QQUNJVFk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdG1wQ3R4LmZpbGxUZXh0KGdseXBoLmNoYXJzLCAwLCAwKTtcbiAgICAgICAgdGhpcy5fdG1wQ3R4LnJlc3RvcmUoKTtcbiAgICAgICAgdmFyIGltYWdlRGF0YSA9IHRoaXMuX3RtcEN0eC5nZXRJbWFnZURhdGEoMCwgMCwgdGhpcy5fY29uZmlnLnNjYWxlZENoYXJXaWR0aCwgdGhpcy5fY29uZmlnLnNjYWxlZENoYXJIZWlnaHQpO1xuICAgICAgICB2YXIgaXNFbXB0eSA9IGZhbHNlO1xuICAgICAgICBpZiAoIXRoaXMuX2NvbmZpZy5hbGxvd1RyYW5zcGFyZW5jeSkge1xuICAgICAgICAgICAgaXNFbXB0eSA9IENoYXJBdGxhc0dlbmVyYXRvcl8xLmNsZWFyQ29sb3IoaW1hZ2VEYXRhLCBiYWNrZ3JvdW5kQ29sb3IpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB4ID0gdGhpcy5fdG9Db29yZGluYXRlWChpbmRleCk7XG4gICAgICAgIHZhciB5ID0gdGhpcy5fdG9Db29yZGluYXRlWShpbmRleCk7XG4gICAgICAgIHRoaXMuX2NhY2hlQ3R4LnB1dEltYWdlRGF0YShpbWFnZURhdGEsIHgsIHkpO1xuICAgICAgICB2YXIgY2FjaGVWYWx1ZSA9IHtcbiAgICAgICAgICAgIGluZGV4OiBpbmRleCxcbiAgICAgICAgICAgIGlzRW1wdHk6IGlzRW1wdHksXG4gICAgICAgICAgICBpbkJpdG1hcDogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fYWRkR2x5cGhUb0JpdG1hcChjYWNoZVZhbHVlKTtcbiAgICAgICAgcmV0dXJuIGNhY2hlVmFsdWU7XG4gICAgfTtcbiAgICBEeW5hbWljQ2hhckF0bGFzLnByb3RvdHlwZS5fYWRkR2x5cGhUb0JpdG1hcCA9IGZ1bmN0aW9uIChjYWNoZVZhbHVlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICghKCdjcmVhdGVJbWFnZUJpdG1hcCcgaW4gd2luZG93KSB8fCBQbGF0Zm9ybV8xLmlzRmlyZWZveCB8fCBQbGF0Zm9ybV8xLmlzU2FmYXJpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZ2x5cGhzV2FpdGluZ09uQml0bWFwLnB1c2goY2FjaGVWYWx1ZSk7XG4gICAgICAgIGlmICh0aGlzLl9iaXRtYXBDb21taXRUaW1lb3V0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYml0bWFwQ29tbWl0VGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLl9nZW5lcmF0ZUJpdG1hcCgpOyB9LCBHTFlQSF9CSVRNQVBfQ09NTUlUX0RFTEFZKTtcbiAgICB9O1xuICAgIER5bmFtaWNDaGFyQXRsYXMucHJvdG90eXBlLl9nZW5lcmF0ZUJpdG1hcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGdseXBoc01vdmluZ1RvQml0bWFwID0gdGhpcy5fZ2x5cGhzV2FpdGluZ09uQml0bWFwO1xuICAgICAgICB0aGlzLl9nbHlwaHNXYWl0aW5nT25CaXRtYXAgPSBbXTtcbiAgICAgICAgd2luZG93LmNyZWF0ZUltYWdlQml0bWFwKHRoaXMuX2NhY2hlQ2FudmFzKS50aGVuKGZ1bmN0aW9uIChiaXRtYXApIHtcbiAgICAgICAgICAgIF90aGlzLl9iaXRtYXAgPSBiaXRtYXA7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdseXBoc01vdmluZ1RvQml0bWFwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gZ2x5cGhzTW92aW5nVG9CaXRtYXBbaV07XG4gICAgICAgICAgICAgICAgdmFsdWUuaW5CaXRtYXAgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fYml0bWFwQ29tbWl0VGltZW91dCA9IG51bGw7XG4gICAgfTtcbiAgICByZXR1cm4gRHluYW1pY0NoYXJBdGxhcztcbn0oQmFzZUNoYXJBdGxhc18xLmRlZmF1bHQpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IER5bmFtaWNDaGFyQXRsYXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1EeW5hbWljQ2hhckF0bGFzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIExSVU1hcCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTFJVTWFwKGNhcGFjaXR5KSB7XG4gICAgICAgIHRoaXMuY2FwYWNpdHkgPSBjYXBhY2l0eTtcbiAgICAgICAgdGhpcy5fbWFwID0ge307XG4gICAgICAgIHRoaXMuX2hlYWQgPSBudWxsO1xuICAgICAgICB0aGlzLl90YWlsID0gbnVsbDtcbiAgICAgICAgdGhpcy5fbm9kZVBvb2wgPSBbXTtcbiAgICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG4gICAgTFJVTWFwLnByb3RvdHlwZS5fdW5saW5rTm9kZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHZhciBwcmV2ID0gbm9kZS5wcmV2O1xuICAgICAgICB2YXIgbmV4dCA9IG5vZGUubmV4dDtcbiAgICAgICAgaWYgKG5vZGUgPT09IHRoaXMuX2hlYWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2hlYWQgPSBuZXh0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChub2RlID09PSB0aGlzLl90YWlsKSB7XG4gICAgICAgICAgICB0aGlzLl90YWlsID0gcHJldjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJldiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcHJldi5uZXh0ID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV4dCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgbmV4dC5wcmV2ID0gcHJldjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTFJVTWFwLnByb3RvdHlwZS5fYXBwZW5kTm9kZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHZhciB0YWlsID0gdGhpcy5fdGFpbDtcbiAgICAgICAgaWYgKHRhaWwgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRhaWwubmV4dCA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgbm9kZS5wcmV2ID0gdGFpbDtcbiAgICAgICAgbm9kZS5uZXh0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fdGFpbCA9IG5vZGU7XG4gICAgICAgIGlmICh0aGlzLl9oZWFkID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9oZWFkID0gbm9kZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTFJVTWFwLnByb3RvdHlwZS5wcmVhbGxvYyA9IGZ1bmN0aW9uIChjb3VudCkge1xuICAgICAgICB2YXIgbm9kZVBvb2wgPSB0aGlzLl9ub2RlUG9vbDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBub2RlUG9vbC5wdXNoKHtcbiAgICAgICAgICAgICAgICBwcmV2OiBudWxsLFxuICAgICAgICAgICAgICAgIG5leHQ6IG51bGwsXG4gICAgICAgICAgICAgICAga2V5OiBudWxsLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBudWxsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTFJVTWFwLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciBub2RlID0gdGhpcy5fbWFwW2tleV07XG4gICAgICAgIGlmIChub2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3VubGlua05vZGUobm9kZSk7XG4gICAgICAgICAgICB0aGlzLl9hcHBlbmROb2RlKG5vZGUpO1xuICAgICAgICAgICAgcmV0dXJuIG5vZGUudmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBMUlVNYXAucHJvdG90eXBlLnBlZWtWYWx1ZSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLl9tYXBba2V5XTtcbiAgICAgICAgaWYgKG5vZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGUudmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBMUlVNYXAucHJvdG90eXBlLnBlZWsgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBoZWFkID0gdGhpcy5faGVhZDtcbiAgICAgICAgcmV0dXJuIGhlYWQgPT09IG51bGwgPyBudWxsIDogaGVhZC52YWx1ZTtcbiAgICB9O1xuICAgIExSVU1hcC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLl9tYXBba2V5XTtcbiAgICAgICAgaWYgKG5vZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbm9kZSA9IHRoaXMuX21hcFtrZXldO1xuICAgICAgICAgICAgdGhpcy5fdW5saW5rTm9kZShub2RlKTtcbiAgICAgICAgICAgIG5vZGUudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnNpemUgPj0gdGhpcy5jYXBhY2l0eSkge1xuICAgICAgICAgICAgbm9kZSA9IHRoaXMuX2hlYWQ7XG4gICAgICAgICAgICB0aGlzLl91bmxpbmtOb2RlKG5vZGUpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX21hcFtub2RlLmtleV07XG4gICAgICAgICAgICBub2RlLmtleSA9IGtleTtcbiAgICAgICAgICAgIG5vZGUudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuX21hcFtrZXldID0gbm9kZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBub2RlUG9vbCA9IHRoaXMuX25vZGVQb29sO1xuICAgICAgICAgICAgaWYgKG5vZGVQb29sLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBub2RlID0gbm9kZVBvb2wucG9wKCk7XG4gICAgICAgICAgICAgICAgbm9kZS5rZXkgPSBrZXk7XG4gICAgICAgICAgICAgICAgbm9kZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbm9kZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgcHJldjogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgbmV4dDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9tYXBba2V5XSA9IG5vZGU7XG4gICAgICAgICAgICB0aGlzLnNpemUrKztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9hcHBlbmROb2RlKG5vZGUpO1xuICAgIH07XG4gICAgcmV0dXJuIExSVU1hcDtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBMUlVNYXA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1MUlVNYXAuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEJhc2VDaGFyQXRsYXNfMSA9IHJlcXVpcmUoXCIuL0Jhc2VDaGFyQXRsYXNcIik7XG52YXIgTm9uZUNoYXJBdGxhcyA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE5vbmVDaGFyQXRsYXMsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTm9uZUNoYXJBdGxhcyhkb2N1bWVudCwgY29uZmlnKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBOb25lQ2hhckF0bGFzLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24gKGN0eCwgZ2x5cGgsIHgsIHkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgcmV0dXJuIE5vbmVDaGFyQXRsYXM7XG59KEJhc2VDaGFyQXRsYXNfMS5kZWZhdWx0KSk7XG5leHBvcnRzLmRlZmF1bHQgPSBOb25lQ2hhckF0bGFzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Tm9uZUNoYXJBdGxhcy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgVHlwZXNfMSA9IHJlcXVpcmUoXCIuL1R5cGVzXCIpO1xudmFyIENoYXJBdGxhc0dlbmVyYXRvcl8xID0gcmVxdWlyZShcIi4vQ2hhckF0bGFzR2VuZXJhdG9yXCIpO1xudmFyIEJhc2VDaGFyQXRsYXNfMSA9IHJlcXVpcmUoXCIuL0Jhc2VDaGFyQXRsYXNcIik7XG52YXIgQ2hhckF0bGFzVXRpbHNfMSA9IHJlcXVpcmUoXCIuL0NoYXJBdGxhc1V0aWxzXCIpO1xudmFyIFN0YXRpY0NoYXJBdGxhcyA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFN0YXRpY0NoYXJBdGxhcywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdGF0aWNDaGFyQXRsYXMoX2RvY3VtZW50LCBfY29uZmlnKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9kb2N1bWVudCA9IF9kb2N1bWVudDtcbiAgICAgICAgX3RoaXMuX2NvbmZpZyA9IF9jb25maWc7XG4gICAgICAgIF90aGlzLl9jYW52YXNGYWN0b3J5ID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgICAgIHZhciBjYW52YXMgPSBfdGhpcy5fZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgICAgICBjYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgICAgICByZXR1cm4gY2FudmFzO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFN0YXRpY0NoYXJBdGxhcy5wcm90b3R5cGUuX2RvV2FybVVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgcmVzdWx0ID0gQ2hhckF0bGFzR2VuZXJhdG9yXzEuZ2VuZXJhdGVTdGF0aWNDaGFyQXRsYXNUZXh0dXJlKHdpbmRvdywgdGhpcy5fY2FudmFzRmFjdG9yeSwgdGhpcy5fY29uZmlnKTtcbiAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIEhUTUxDYW52YXNFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLl90ZXh0dXJlID0gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0LnRoZW4oZnVuY3Rpb24gKHRleHR1cmUpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fdGV4dHVyZSA9IHRleHR1cmU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3RhdGljQ2hhckF0bGFzLnByb3RvdHlwZS5faXNDYWNoZWQgPSBmdW5jdGlvbiAoZ2x5cGgsIGNvbG9ySW5kZXgpIHtcbiAgICAgICAgdmFyIGlzQXNjaWkgPSBnbHlwaC5jb2RlIDwgMjU2O1xuICAgICAgICB2YXIgaXNCYXNpY0NvbG9yID0gZ2x5cGguZmcgPCAxNjtcbiAgICAgICAgdmFyIGlzRGVmYXVsdENvbG9yID0gZ2x5cGguZmcgPT09IFR5cGVzXzEuREVGQVVMVF9DT0xPUjtcbiAgICAgICAgdmFyIGlzRGVmYXVsdEJhY2tncm91bmQgPSBnbHlwaC5iZyA9PT0gVHlwZXNfMS5ERUZBVUxUX0NPTE9SO1xuICAgICAgICByZXR1cm4gaXNBc2NpaSAmJiAoaXNCYXNpY0NvbG9yIHx8IGlzRGVmYXVsdENvbG9yKSAmJiBpc0RlZmF1bHRCYWNrZ3JvdW5kICYmICFnbHlwaC5pdGFsaWM7XG4gICAgfTtcbiAgICBTdGF0aWNDaGFyQXRsYXMucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbiAoY3R4LCBnbHlwaCwgeCwgeSkge1xuICAgICAgICBpZiAodGhpcy5fdGV4dHVyZSA9PT0gbnVsbCB8fCB0aGlzLl90ZXh0dXJlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29sb3JJbmRleCA9IDA7XG4gICAgICAgIGlmIChDaGFyQXRsYXNVdGlsc18xLmlzMjU2Q29sb3IoZ2x5cGguZmcpKSB7XG4gICAgICAgICAgICBjb2xvckluZGV4ID0gMiArIGdseXBoLmZnICsgKGdseXBoLmJvbGQgPyAxNiA6IDApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGdseXBoLmZnID09PSBUeXBlc18xLkRFRkFVTFRfQ09MT1IpIHtcbiAgICAgICAgICAgIGlmIChnbHlwaC5ib2xkKSB7XG4gICAgICAgICAgICAgICAgY29sb3JJbmRleCA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9pc0NhY2hlZChnbHlwaCwgY29sb3JJbmRleCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICB2YXIgY2hhckF0bGFzQ2VsbFdpZHRoID0gdGhpcy5fY29uZmlnLnNjYWxlZENoYXJXaWR0aCArIFR5cGVzXzEuQ0hBUl9BVExBU19DRUxMX1NQQUNJTkc7XG4gICAgICAgIHZhciBjaGFyQXRsYXNDZWxsSGVpZ2h0ID0gdGhpcy5fY29uZmlnLnNjYWxlZENoYXJIZWlnaHQgKyBUeXBlc18xLkNIQVJfQVRMQVNfQ0VMTF9TUEFDSU5HO1xuICAgICAgICBpZiAoZ2x5cGguZGltKSB7XG4gICAgICAgICAgICBjdHguZ2xvYmFsQWxwaGEgPSBUeXBlc18xLkRJTV9PUEFDSVRZO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5fdGV4dHVyZSwgZ2x5cGguY29kZSAqIGNoYXJBdGxhc0NlbGxXaWR0aCwgY29sb3JJbmRleCAqIGNoYXJBdGxhc0NlbGxIZWlnaHQsIGNoYXJBdGxhc0NlbGxXaWR0aCwgdGhpcy5fY29uZmlnLnNjYWxlZENoYXJIZWlnaHQsIHgsIHksIGNoYXJBdGxhc0NlbGxXaWR0aCwgdGhpcy5fY29uZmlnLnNjYWxlZENoYXJIZWlnaHQpO1xuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIHJldHVybiBTdGF0aWNDaGFyQXRsYXM7XG59KEJhc2VDaGFyQXRsYXNfMS5kZWZhdWx0KSk7XG5leHBvcnRzLmRlZmF1bHQgPSBTdGF0aWNDaGFyQXRsYXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdGF0aWNDaGFyQXRsYXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEJhc2VSZW5kZXJMYXllcl8xID0gcmVxdWlyZShcIi4vQmFzZVJlbmRlckxheWVyXCIpO1xudmFyIFNlbGVjdGlvblJlbmRlckxheWVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU2VsZWN0aW9uUmVuZGVyTGF5ZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2VsZWN0aW9uUmVuZGVyTGF5ZXIoY29udGFpbmVyLCB6SW5kZXgsIGNvbG9ycykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBjb250YWluZXIsICdzZWxlY3Rpb24nLCB6SW5kZXgsIHRydWUsIGNvbG9ycykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX2NsZWFyU3RhdGUoKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTZWxlY3Rpb25SZW5kZXJMYXllci5wcm90b3R5cGUuX2NsZWFyU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0ge1xuICAgICAgICAgICAgc3RhcnQ6IG51bGwsXG4gICAgICAgICAgICBlbmQ6IG51bGwsXG4gICAgICAgICAgICBjb2x1bW5TZWxlY3RNb2RlOiBudWxsLFxuICAgICAgICAgICAgeWRpc3A6IG51bGxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIFNlbGVjdGlvblJlbmRlckxheWVyLnByb3RvdHlwZS5yZXNpemUgPSBmdW5jdGlvbiAodGVybWluYWwsIGRpbSkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLnJlc2l6ZS5jYWxsKHRoaXMsIHRlcm1pbmFsLCBkaW0pO1xuICAgICAgICB0aGlzLl9jbGVhclN0YXRlKCk7XG4gICAgfTtcbiAgICBTZWxlY3Rpb25SZW5kZXJMYXllci5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAodGVybWluYWwpIHtcbiAgICAgICAgaWYgKHRoaXMuX3N0YXRlLnN0YXJ0ICYmIHRoaXMuX3N0YXRlLmVuZCkge1xuICAgICAgICAgICAgdGhpcy5fY2xlYXJTdGF0ZSgpO1xuICAgICAgICAgICAgdGhpcy5jbGVhckFsbCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTZWxlY3Rpb25SZW5kZXJMYXllci5wcm90b3R5cGUub25TZWxlY3Rpb25DaGFuZ2VkID0gZnVuY3Rpb24gKHRlcm1pbmFsLCBzdGFydCwgZW5kLCBjb2x1bW5TZWxlY3RNb2RlKSB7XG4gICAgICAgIGlmICghdGhpcy5fZGlkU3RhdGVDaGFuZ2Uoc3RhcnQsIGVuZCwgY29sdW1uU2VsZWN0TW9kZSwgdGVybWluYWwuYnVmZmVyLnlkaXNwKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2xlYXJBbGwoKTtcbiAgICAgICAgaWYgKCFzdGFydCB8fCAhZW5kKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZpZXdwb3J0U3RhcnRSb3cgPSBzdGFydFsxXSAtIHRlcm1pbmFsLmJ1ZmZlci55ZGlzcDtcbiAgICAgICAgdmFyIHZpZXdwb3J0RW5kUm93ID0gZW5kWzFdIC0gdGVybWluYWwuYnVmZmVyLnlkaXNwO1xuICAgICAgICB2YXIgdmlld3BvcnRDYXBwZWRTdGFydFJvdyA9IE1hdGgubWF4KHZpZXdwb3J0U3RhcnRSb3csIDApO1xuICAgICAgICB2YXIgdmlld3BvcnRDYXBwZWRFbmRSb3cgPSBNYXRoLm1pbih2aWV3cG9ydEVuZFJvdywgdGVybWluYWwucm93cyAtIDEpO1xuICAgICAgICBpZiAodmlld3BvcnRDYXBwZWRTdGFydFJvdyA+PSB0ZXJtaW5hbC5yb3dzIHx8IHZpZXdwb3J0Q2FwcGVkRW5kUm93IDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2N0eC5maWxsU3R5bGUgPSB0aGlzLl9jb2xvcnMuc2VsZWN0aW9uLmNzcztcbiAgICAgICAgaWYgKGNvbHVtblNlbGVjdE1vZGUpIHtcbiAgICAgICAgICAgIHZhciBzdGFydENvbCA9IHN0YXJ0WzBdO1xuICAgICAgICAgICAgdmFyIHdpZHRoID0gZW5kWzBdIC0gc3RhcnRDb2w7XG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gdmlld3BvcnRDYXBwZWRFbmRSb3cgLSB2aWV3cG9ydENhcHBlZFN0YXJ0Um93ICsgMTtcbiAgICAgICAgICAgIHRoaXMuZmlsbENlbGxzKHN0YXJ0Q29sLCB2aWV3cG9ydENhcHBlZFN0YXJ0Um93LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBzdGFydENvbCA9IHZpZXdwb3J0U3RhcnRSb3cgPT09IHZpZXdwb3J0Q2FwcGVkU3RhcnRSb3cgPyBzdGFydFswXSA6IDA7XG4gICAgICAgICAgICB2YXIgc3RhcnRSb3dFbmRDb2wgPSB2aWV3cG9ydENhcHBlZFN0YXJ0Um93ID09PSB2aWV3cG9ydENhcHBlZEVuZFJvdyA/IGVuZFswXSA6IHRlcm1pbmFsLmNvbHM7XG4gICAgICAgICAgICB0aGlzLmZpbGxDZWxscyhzdGFydENvbCwgdmlld3BvcnRDYXBwZWRTdGFydFJvdywgc3RhcnRSb3dFbmRDb2wgLSBzdGFydENvbCwgMSk7XG4gICAgICAgICAgICB2YXIgbWlkZGxlUm93c0NvdW50ID0gTWF0aC5tYXgodmlld3BvcnRDYXBwZWRFbmRSb3cgLSB2aWV3cG9ydENhcHBlZFN0YXJ0Um93IC0gMSwgMCk7XG4gICAgICAgICAgICB0aGlzLmZpbGxDZWxscygwLCB2aWV3cG9ydENhcHBlZFN0YXJ0Um93ICsgMSwgdGVybWluYWwuY29scywgbWlkZGxlUm93c0NvdW50KTtcbiAgICAgICAgICAgIGlmICh2aWV3cG9ydENhcHBlZFN0YXJ0Um93ICE9PSB2aWV3cG9ydENhcHBlZEVuZFJvdykge1xuICAgICAgICAgICAgICAgIHZhciBlbmRDb2wgPSB2aWV3cG9ydEVuZFJvdyA9PT0gdmlld3BvcnRDYXBwZWRFbmRSb3cgPyBlbmRbMF0gOiB0ZXJtaW5hbC5jb2xzO1xuICAgICAgICAgICAgICAgIHRoaXMuZmlsbENlbGxzKDAsIHZpZXdwb3J0Q2FwcGVkRW5kUm93LCBlbmRDb2wsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3N0YXRlLnN0YXJ0ID0gW3N0YXJ0WzBdLCBzdGFydFsxXV07XG4gICAgICAgIHRoaXMuX3N0YXRlLmVuZCA9IFtlbmRbMF0sIGVuZFsxXV07XG4gICAgICAgIHRoaXMuX3N0YXRlLmNvbHVtblNlbGVjdE1vZGUgPSBjb2x1bW5TZWxlY3RNb2RlO1xuICAgICAgICB0aGlzLl9zdGF0ZS55ZGlzcCA9IHRlcm1pbmFsLmJ1ZmZlci55ZGlzcDtcbiAgICB9O1xuICAgIFNlbGVjdGlvblJlbmRlckxheWVyLnByb3RvdHlwZS5fZGlkU3RhdGVDaGFuZ2UgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgY29sdW1uU2VsZWN0TW9kZSwgeWRpc3ApIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLl9hcmVDb29yZGluYXRlc0VxdWFsKHN0YXJ0LCB0aGlzLl9zdGF0ZS5zdGFydCkgfHxcbiAgICAgICAgICAgICF0aGlzLl9hcmVDb29yZGluYXRlc0VxdWFsKGVuZCwgdGhpcy5fc3RhdGUuZW5kKSB8fFxuICAgICAgICAgICAgY29sdW1uU2VsZWN0TW9kZSAhPT0gdGhpcy5fc3RhdGUuY29sdW1uU2VsZWN0TW9kZSB8fFxuICAgICAgICAgICAgeWRpc3AgIT09IHRoaXMuX3N0YXRlLnlkaXNwO1xuICAgIH07XG4gICAgU2VsZWN0aW9uUmVuZGVyTGF5ZXIucHJvdG90eXBlLl9hcmVDb29yZGluYXRlc0VxdWFsID0gZnVuY3Rpb24gKGNvb3JkMSwgY29vcmQyKSB7XG4gICAgICAgIGlmICghY29vcmQxIHx8ICFjb29yZDIpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29vcmQxWzBdID09PSBjb29yZDJbMF0gJiYgY29vcmQxWzFdID09PSBjb29yZDJbMV07XG4gICAgfTtcbiAgICByZXR1cm4gU2VsZWN0aW9uUmVuZGVyTGF5ZXI7XG59KEJhc2VSZW5kZXJMYXllcl8xLkJhc2VSZW5kZXJMYXllcikpO1xuZXhwb3J0cy5TZWxlY3Rpb25SZW5kZXJMYXllciA9IFNlbGVjdGlvblJlbmRlckxheWVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2VsZWN0aW9uUmVuZGVyTGF5ZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEJ1ZmZlcl8xID0gcmVxdWlyZShcIi4uL0J1ZmZlclwiKTtcbnZhciBCYXNlUmVuZGVyTGF5ZXJfMSA9IHJlcXVpcmUoXCIuL0Jhc2VSZW5kZXJMYXllclwiKTtcbnZhciBCTElOS19JTlRFUlZBTCA9IDYwMDtcbnZhciBDdXJzb3JSZW5kZXJMYXllciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEN1cnNvclJlbmRlckxheWVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEN1cnNvclJlbmRlckxheWVyKGNvbnRhaW5lciwgekluZGV4LCBjb2xvcnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY29udGFpbmVyLCAnY3Vyc29yJywgekluZGV4LCB0cnVlLCBjb2xvcnMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9zdGF0ZSA9IHtcbiAgICAgICAgICAgIHg6IG51bGwsXG4gICAgICAgICAgICB5OiBudWxsLFxuICAgICAgICAgICAgaXNGb2N1c2VkOiBudWxsLFxuICAgICAgICAgICAgc3R5bGU6IG51bGwsXG4gICAgICAgICAgICB3aWR0aDogbnVsbFxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fY3Vyc29yUmVuZGVyZXJzID0ge1xuICAgICAgICAgICAgJ2Jhcic6IF90aGlzLl9yZW5kZXJCYXJDdXJzb3IuYmluZChfdGhpcyksXG4gICAgICAgICAgICAnYmxvY2snOiBfdGhpcy5fcmVuZGVyQmxvY2tDdXJzb3IuYmluZChfdGhpcyksXG4gICAgICAgICAgICAndW5kZXJsaW5lJzogX3RoaXMuX3JlbmRlclVuZGVybGluZUN1cnNvci5iaW5kKF90aGlzKVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEN1cnNvclJlbmRlckxheWVyLnByb3RvdHlwZS5yZXNpemUgPSBmdW5jdGlvbiAodGVybWluYWwsIGRpbSkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLnJlc2l6ZS5jYWxsKHRoaXMsIHRlcm1pbmFsLCBkaW0pO1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IHtcbiAgICAgICAgICAgIHg6IG51bGwsXG4gICAgICAgICAgICB5OiBudWxsLFxuICAgICAgICAgICAgaXNGb2N1c2VkOiBudWxsLFxuICAgICAgICAgICAgc3R5bGU6IG51bGwsXG4gICAgICAgICAgICB3aWR0aDogbnVsbFxuICAgICAgICB9O1xuICAgIH07XG4gICAgQ3Vyc29yUmVuZGVyTGF5ZXIucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKHRlcm1pbmFsKSB7XG4gICAgICAgIHRoaXMuX2NsZWFyQ3Vyc29yKCk7XG4gICAgICAgIGlmICh0aGlzLl9jdXJzb3JCbGlua1N0YXRlTWFuYWdlcikge1xuICAgICAgICAgICAgdGhpcy5fY3Vyc29yQmxpbmtTdGF0ZU1hbmFnZXIuZGlzcG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5fY3Vyc29yQmxpbmtTdGF0ZU1hbmFnZXIgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5vbk9wdGlvbnNDaGFuZ2VkKHRlcm1pbmFsKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ3Vyc29yUmVuZGVyTGF5ZXIucHJvdG90eXBlLm9uQmx1ciA9IGZ1bmN0aW9uICh0ZXJtaW5hbCkge1xuICAgICAgICBpZiAodGhpcy5fY3Vyc29yQmxpbmtTdGF0ZU1hbmFnZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2N1cnNvckJsaW5rU3RhdGVNYW5hZ2VyLnBhdXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGVybWluYWwucmVmcmVzaCh0ZXJtaW5hbC5idWZmZXIueSwgdGVybWluYWwuYnVmZmVyLnkpO1xuICAgIH07XG4gICAgQ3Vyc29yUmVuZGVyTGF5ZXIucHJvdG90eXBlLm9uRm9jdXMgPSBmdW5jdGlvbiAodGVybWluYWwpIHtcbiAgICAgICAgaWYgKHRoaXMuX2N1cnNvckJsaW5rU3RhdGVNYW5hZ2VyKSB7XG4gICAgICAgICAgICB0aGlzLl9jdXJzb3JCbGlua1N0YXRlTWFuYWdlci5yZXN1bWUodGVybWluYWwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGVybWluYWwucmVmcmVzaCh0ZXJtaW5hbC5idWZmZXIueSwgdGVybWluYWwuYnVmZmVyLnkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDdXJzb3JSZW5kZXJMYXllci5wcm90b3R5cGUub25PcHRpb25zQ2hhbmdlZCA9IGZ1bmN0aW9uICh0ZXJtaW5hbCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodGVybWluYWwub3B0aW9ucy5jdXJzb3JCbGluaykge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9jdXJzb3JCbGlua1N0YXRlTWFuYWdlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvckJsaW5rU3RhdGVNYW5hZ2VyID0gbmV3IEN1cnNvckJsaW5rU3RhdGVNYW5hZ2VyKHRlcm1pbmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9yZW5kZXIodGVybWluYWwsIHRydWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnNvckJsaW5rU3RhdGVNYW5hZ2VyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY3Vyc29yQmxpbmtTdGF0ZU1hbmFnZXIuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvckJsaW5rU3RhdGVNYW5hZ2VyID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRlcm1pbmFsLnJlZnJlc2godGVybWluYWwuYnVmZmVyLnksIHRlcm1pbmFsLmJ1ZmZlci55KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ3Vyc29yUmVuZGVyTGF5ZXIucHJvdG90eXBlLm9uQ3Vyc29yTW92ZSA9IGZ1bmN0aW9uICh0ZXJtaW5hbCkge1xuICAgICAgICBpZiAodGhpcy5fY3Vyc29yQmxpbmtTdGF0ZU1hbmFnZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2N1cnNvckJsaW5rU3RhdGVNYW5hZ2VyLnJlc3RhcnRCbGlua0FuaW1hdGlvbih0ZXJtaW5hbCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEN1cnNvclJlbmRlckxheWVyLnByb3RvdHlwZS5vbkdyaWRDaGFuZ2VkID0gZnVuY3Rpb24gKHRlcm1pbmFsLCBzdGFydFJvdywgZW5kUm93KSB7XG4gICAgICAgIGlmICghdGhpcy5fY3Vyc29yQmxpbmtTdGF0ZU1hbmFnZXIgfHwgdGhpcy5fY3Vyc29yQmxpbmtTdGF0ZU1hbmFnZXIuaXNQYXVzZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcih0ZXJtaW5hbCwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fY3Vyc29yQmxpbmtTdGF0ZU1hbmFnZXIucmVzdGFydEJsaW5rQW5pbWF0aW9uKHRlcm1pbmFsKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ3Vyc29yUmVuZGVyTGF5ZXIucHJvdG90eXBlLl9yZW5kZXIgPSBmdW5jdGlvbiAodGVybWluYWwsIHRyaWdnZXJlZEJ5QW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgICAgaWYgKCF0ZXJtaW5hbC5jdXJzb3JTdGF0ZSB8fCB0ZXJtaW5hbC5jdXJzb3JIaWRkZW4pIHtcbiAgICAgICAgICAgIHRoaXMuX2NsZWFyQ3Vyc29yKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGN1cnNvclkgPSB0ZXJtaW5hbC5idWZmZXIueWJhc2UgKyB0ZXJtaW5hbC5idWZmZXIueTtcbiAgICAgICAgdmFyIHZpZXdwb3J0UmVsYXRpdmVDdXJzb3JZID0gY3Vyc29yWSAtIHRlcm1pbmFsLmJ1ZmZlci55ZGlzcDtcbiAgICAgICAgaWYgKHZpZXdwb3J0UmVsYXRpdmVDdXJzb3JZIDwgMCB8fCB2aWV3cG9ydFJlbGF0aXZlQ3Vyc29yWSA+PSB0ZXJtaW5hbC5yb3dzKSB7XG4gICAgICAgICAgICB0aGlzLl9jbGVhckN1cnNvcigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjaGFyRGF0YSA9IHRlcm1pbmFsLmJ1ZmZlci5saW5lcy5nZXQoY3Vyc29yWSkuZ2V0KHRlcm1pbmFsLmJ1ZmZlci54KTtcbiAgICAgICAgaWYgKCFjaGFyRGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGVybWluYWwuaXNGb2N1c2VkKSB7XG4gICAgICAgICAgICB0aGlzLl9jbGVhckN1cnNvcigpO1xuICAgICAgICAgICAgdGhpcy5fY3R4LnNhdmUoKTtcbiAgICAgICAgICAgIHRoaXMuX2N0eC5maWxsU3R5bGUgPSB0aGlzLl9jb2xvcnMuY3Vyc29yLmNzcztcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlckJsdXJDdXJzb3IodGVybWluYWwsIHRlcm1pbmFsLmJ1ZmZlci54LCB2aWV3cG9ydFJlbGF0aXZlQ3Vyc29yWSwgY2hhckRhdGEpO1xuICAgICAgICAgICAgdGhpcy5fY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlLnggPSB0ZXJtaW5hbC5idWZmZXIueDtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlLnkgPSB2aWV3cG9ydFJlbGF0aXZlQ3Vyc29yWTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlLmlzRm9jdXNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUuc3R5bGUgPSB0ZXJtaW5hbC5vcHRpb25zLmN1cnNvclN0eWxlO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUud2lkdGggPSBjaGFyRGF0YVtCdWZmZXJfMS5DSEFSX0RBVEFfV0lEVEhfSU5ERVhdO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9jdXJzb3JCbGlua1N0YXRlTWFuYWdlciAmJiAhdGhpcy5fY3Vyc29yQmxpbmtTdGF0ZU1hbmFnZXIuaXNDdXJzb3JWaXNpYmxlKSB7XG4gICAgICAgICAgICB0aGlzLl9jbGVhckN1cnNvcigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9zdGF0ZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3N0YXRlLnggPT09IHRlcm1pbmFsLmJ1ZmZlci54ICYmXG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUueSA9PT0gdmlld3BvcnRSZWxhdGl2ZUN1cnNvclkgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZS5pc0ZvY3VzZWQgPT09IHRlcm1pbmFsLmlzRm9jdXNlZCAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlLnN0eWxlID09PSB0ZXJtaW5hbC5vcHRpb25zLmN1cnNvclN0eWxlICYmXG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUud2lkdGggPT09IGNoYXJEYXRhW0J1ZmZlcl8xLkNIQVJfREFUQV9XSURUSF9JTkRFWF0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9jbGVhckN1cnNvcigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2N0eC5zYXZlKCk7XG4gICAgICAgIHRoaXMuX2N1cnNvclJlbmRlcmVyc1t0ZXJtaW5hbC5vcHRpb25zLmN1cnNvclN0eWxlIHx8ICdibG9jayddKHRlcm1pbmFsLCB0ZXJtaW5hbC5idWZmZXIueCwgdmlld3BvcnRSZWxhdGl2ZUN1cnNvclksIGNoYXJEYXRhKTtcbiAgICAgICAgdGhpcy5fY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgdGhpcy5fc3RhdGUueCA9IHRlcm1pbmFsLmJ1ZmZlci54O1xuICAgICAgICB0aGlzLl9zdGF0ZS55ID0gdmlld3BvcnRSZWxhdGl2ZUN1cnNvclk7XG4gICAgICAgIHRoaXMuX3N0YXRlLmlzRm9jdXNlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9zdGF0ZS5zdHlsZSA9IHRlcm1pbmFsLm9wdGlvbnMuY3Vyc29yU3R5bGU7XG4gICAgICAgIHRoaXMuX3N0YXRlLndpZHRoID0gY2hhckRhdGFbQnVmZmVyXzEuQ0hBUl9EQVRBX1dJRFRIX0lOREVYXTtcbiAgICB9O1xuICAgIEN1cnNvclJlbmRlckxheWVyLnByb3RvdHlwZS5fY2xlYXJDdXJzb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9zdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5jbGVhckNlbGxzKHRoaXMuX3N0YXRlLngsIHRoaXMuX3N0YXRlLnksIHRoaXMuX3N0YXRlLndpZHRoLCAxKTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0ge1xuICAgICAgICAgICAgICAgIHg6IG51bGwsXG4gICAgICAgICAgICAgICAgeTogbnVsbCxcbiAgICAgICAgICAgICAgICBpc0ZvY3VzZWQ6IG51bGwsXG4gICAgICAgICAgICAgICAgc3R5bGU6IG51bGwsXG4gICAgICAgICAgICAgICAgd2lkdGg6IG51bGxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEN1cnNvclJlbmRlckxheWVyLnByb3RvdHlwZS5fcmVuZGVyQmFyQ3Vyc29yID0gZnVuY3Rpb24gKHRlcm1pbmFsLCB4LCB5LCBjaGFyRGF0YSkge1xuICAgICAgICB0aGlzLl9jdHguc2F2ZSgpO1xuICAgICAgICB0aGlzLl9jdHguZmlsbFN0eWxlID0gdGhpcy5fY29sb3JzLmN1cnNvci5jc3M7XG4gICAgICAgIHRoaXMuZmlsbExlZnRMaW5lQXRDZWxsKHgsIHkpO1xuICAgICAgICB0aGlzLl9jdHgucmVzdG9yZSgpO1xuICAgIH07XG4gICAgQ3Vyc29yUmVuZGVyTGF5ZXIucHJvdG90eXBlLl9yZW5kZXJCbG9ja0N1cnNvciA9IGZ1bmN0aW9uICh0ZXJtaW5hbCwgeCwgeSwgY2hhckRhdGEpIHtcbiAgICAgICAgdGhpcy5fY3R4LnNhdmUoKTtcbiAgICAgICAgdGhpcy5fY3R4LmZpbGxTdHlsZSA9IHRoaXMuX2NvbG9ycy5jdXJzb3IuY3NzO1xuICAgICAgICB0aGlzLmZpbGxDZWxscyh4LCB5LCBjaGFyRGF0YVtCdWZmZXJfMS5DSEFSX0RBVEFfV0lEVEhfSU5ERVhdLCAxKTtcbiAgICAgICAgdGhpcy5fY3R4LmZpbGxTdHlsZSA9IHRoaXMuX2NvbG9ycy5jdXJzb3JBY2NlbnQuY3NzO1xuICAgICAgICB0aGlzLmZpbGxDaGFyVHJ1ZUNvbG9yKHRlcm1pbmFsLCBjaGFyRGF0YSwgeCwgeSk7XG4gICAgICAgIHRoaXMuX2N0eC5yZXN0b3JlKCk7XG4gICAgfTtcbiAgICBDdXJzb3JSZW5kZXJMYXllci5wcm90b3R5cGUuX3JlbmRlclVuZGVybGluZUN1cnNvciA9IGZ1bmN0aW9uICh0ZXJtaW5hbCwgeCwgeSwgY2hhckRhdGEpIHtcbiAgICAgICAgdGhpcy5fY3R4LnNhdmUoKTtcbiAgICAgICAgdGhpcy5fY3R4LmZpbGxTdHlsZSA9IHRoaXMuX2NvbG9ycy5jdXJzb3IuY3NzO1xuICAgICAgICB0aGlzLmZpbGxCb3R0b21MaW5lQXRDZWxscyh4LCB5KTtcbiAgICAgICAgdGhpcy5fY3R4LnJlc3RvcmUoKTtcbiAgICB9O1xuICAgIEN1cnNvclJlbmRlckxheWVyLnByb3RvdHlwZS5fcmVuZGVyQmx1ckN1cnNvciA9IGZ1bmN0aW9uICh0ZXJtaW5hbCwgeCwgeSwgY2hhckRhdGEpIHtcbiAgICAgICAgdGhpcy5fY3R4LnNhdmUoKTtcbiAgICAgICAgdGhpcy5fY3R4LnN0cm9rZVN0eWxlID0gdGhpcy5fY29sb3JzLmN1cnNvci5jc3M7XG4gICAgICAgIHRoaXMuc3Ryb2tlUmVjdEF0Q2VsbCh4LCB5LCBjaGFyRGF0YVtCdWZmZXJfMS5DSEFSX0RBVEFfV0lEVEhfSU5ERVhdLCAxKTtcbiAgICAgICAgdGhpcy5fY3R4LnJlc3RvcmUoKTtcbiAgICB9O1xuICAgIHJldHVybiBDdXJzb3JSZW5kZXJMYXllcjtcbn0oQmFzZVJlbmRlckxheWVyXzEuQmFzZVJlbmRlckxheWVyKSk7XG5leHBvcnRzLkN1cnNvclJlbmRlckxheWVyID0gQ3Vyc29yUmVuZGVyTGF5ZXI7XG52YXIgQ3Vyc29yQmxpbmtTdGF0ZU1hbmFnZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEN1cnNvckJsaW5rU3RhdGVNYW5hZ2VyKHRlcm1pbmFsLCBfcmVuZGVyQ2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fcmVuZGVyQ2FsbGJhY2sgPSBfcmVuZGVyQ2FsbGJhY2s7XG4gICAgICAgIHRoaXMuaXNDdXJzb3JWaXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRlcm1pbmFsLmlzRm9jdXNlZCkge1xuICAgICAgICAgICAgdGhpcy5fcmVzdGFydEludGVydmFsKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEN1cnNvckJsaW5rU3RhdGVNYW5hZ2VyLnByb3RvdHlwZSwgXCJpc1BhdXNlZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gISh0aGlzLl9ibGlua1N0YXJ0VGltZW91dCB8fCB0aGlzLl9ibGlua0ludGVydmFsKTsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgQ3Vyc29yQmxpbmtTdGF0ZU1hbmFnZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9ibGlua0ludGVydmFsKSB7XG4gICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLl9ibGlua0ludGVydmFsKTtcbiAgICAgICAgICAgIHRoaXMuX2JsaW5rSW50ZXJ2YWwgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9ibGlua1N0YXJ0VGltZW91dCkge1xuICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLl9ibGlua1N0YXJ0VGltZW91dCk7XG4gICAgICAgICAgICB0aGlzLl9ibGlua1N0YXJ0VGltZW91dCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2FuaW1hdGlvbkZyYW1lKSB7XG4gICAgICAgICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5fYW5pbWF0aW9uRnJhbWUpO1xuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uRnJhbWUgPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDdXJzb3JCbGlua1N0YXRlTWFuYWdlci5wcm90b3R5cGUucmVzdGFydEJsaW5rQW5pbWF0aW9uID0gZnVuY3Rpb24gKHRlcm1pbmFsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLmlzUGF1c2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYW5pbWF0aW9uVGltZVJlc3RhcnRlZCA9IERhdGUubm93KCk7XG4gICAgICAgIHRoaXMuaXNDdXJzb3JWaXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKCF0aGlzLl9hbmltYXRpb25GcmFtZSkge1xuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uRnJhbWUgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fcmVuZGVyQ2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5fYW5pbWF0aW9uRnJhbWUgPSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEN1cnNvckJsaW5rU3RhdGVNYW5hZ2VyLnByb3RvdHlwZS5fcmVzdGFydEludGVydmFsID0gZnVuY3Rpb24gKHRpbWVUb1N0YXJ0KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aW1lVG9TdGFydCA9PT0gdm9pZCAwKSB7IHRpbWVUb1N0YXJ0ID0gQkxJTktfSU5URVJWQUw7IH1cbiAgICAgICAgaWYgKHRoaXMuX2JsaW5rSW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMuX2JsaW5rSW50ZXJ2YWwpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2JsaW5rU3RhcnRUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuX2FuaW1hdGlvblRpbWVSZXN0YXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGltZSA9IEJMSU5LX0lOVEVSVkFMIC0gKERhdGUubm93KCkgLSBfdGhpcy5fYW5pbWF0aW9uVGltZVJlc3RhcnRlZCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2FuaW1hdGlvblRpbWVSZXN0YXJ0ZWQgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmICh0aW1lID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fcmVzdGFydEludGVydmFsKHRpbWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMuaXNDdXJzb3JWaXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICBfdGhpcy5fYW5pbWF0aW9uRnJhbWUgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fcmVuZGVyQ2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5fYW5pbWF0aW9uRnJhbWUgPSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfdGhpcy5fYmxpbmtJbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2FuaW1hdGlvblRpbWVSZXN0YXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpbWUgPSBCTElOS19JTlRFUlZBTCAtIChEYXRlLm5vdygpIC0gX3RoaXMuX2FuaW1hdGlvblRpbWVSZXN0YXJ0ZWQpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fYW5pbWF0aW9uVGltZVJlc3RhcnRlZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9yZXN0YXJ0SW50ZXJ2YWwodGltZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RoaXMuaXNDdXJzb3JWaXNpYmxlID0gIV90aGlzLmlzQ3Vyc29yVmlzaWJsZTtcbiAgICAgICAgICAgICAgICBfdGhpcy5fYW5pbWF0aW9uRnJhbWUgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3JlbmRlckNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9hbmltYXRpb25GcmFtZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCBCTElOS19JTlRFUlZBTCk7XG4gICAgICAgIH0sIHRpbWVUb1N0YXJ0KTtcbiAgICB9O1xuICAgIEN1cnNvckJsaW5rU3RhdGVNYW5hZ2VyLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pc0N1cnNvclZpc2libGUgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5fYmxpbmtJbnRlcnZhbCkge1xuICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy5fYmxpbmtJbnRlcnZhbCk7XG4gICAgICAgICAgICB0aGlzLl9ibGlua0ludGVydmFsID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fYmxpbmtTdGFydFRpbWVvdXQpIHtcbiAgICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5fYmxpbmtTdGFydFRpbWVvdXQpO1xuICAgICAgICAgICAgdGhpcy5fYmxpbmtTdGFydFRpbWVvdXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9hbmltYXRpb25GcmFtZSkge1xuICAgICAgICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuX2FuaW1hdGlvbkZyYW1lKTtcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbkZyYW1lID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ3Vyc29yQmxpbmtTdGF0ZU1hbmFnZXIucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uICh0ZXJtaW5hbCkge1xuICAgICAgICB0aGlzLl9hbmltYXRpb25UaW1lUmVzdGFydGVkID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcmVzdGFydEludGVydmFsKCk7XG4gICAgICAgIHRoaXMucmVzdGFydEJsaW5rQW5pbWF0aW9uKHRlcm1pbmFsKTtcbiAgICB9O1xuICAgIHJldHVybiBDdXJzb3JCbGlua1N0YXRlTWFuYWdlcjtcbn0oKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DdXJzb3JSZW5kZXJMYXllci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQmFzZVJlbmRlckxheWVyXzEgPSByZXF1aXJlKFwiLi9CYXNlUmVuZGVyTGF5ZXJcIik7XG52YXIgVHlwZXNfMSA9IHJlcXVpcmUoXCIuL2F0bGFzL1R5cGVzXCIpO1xudmFyIENoYXJBdGxhc1V0aWxzXzEgPSByZXF1aXJlKFwiLi9hdGxhcy9DaGFyQXRsYXNVdGlsc1wiKTtcbnZhciBMaW5rUmVuZGVyTGF5ZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhMaW5rUmVuZGVyTGF5ZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTGlua1JlbmRlckxheWVyKGNvbnRhaW5lciwgekluZGV4LCBjb2xvcnMsIHRlcm1pbmFsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGNvbnRhaW5lciwgJ2xpbmsnLCB6SW5kZXgsIHRydWUsIGNvbG9ycykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX3N0YXRlID0gbnVsbDtcbiAgICAgICAgdGVybWluYWwubGlua2lmaWVyLm9uKFwibGlua2hvdmVyXCIsIGZ1bmN0aW9uIChlKSB7IHJldHVybiBfdGhpcy5fb25MaW5rSG92ZXIoZSk7IH0pO1xuICAgICAgICB0ZXJtaW5hbC5saW5raWZpZXIub24oXCJsaW5rbGVhdmVcIiwgZnVuY3Rpb24gKGUpIHsgcmV0dXJuIF90aGlzLl9vbkxpbmtMZWF2ZShlKTsgfSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgTGlua1JlbmRlckxheWVyLnByb3RvdHlwZS5yZXNpemUgPSBmdW5jdGlvbiAodGVybWluYWwsIGRpbSkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLnJlc2l6ZS5jYWxsKHRoaXMsIHRlcm1pbmFsLCBkaW0pO1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IG51bGw7XG4gICAgfTtcbiAgICBMaW5rUmVuZGVyTGF5ZXIucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKHRlcm1pbmFsKSB7XG4gICAgICAgIHRoaXMuX2NsZWFyQ3VycmVudExpbmsoKTtcbiAgICB9O1xuICAgIExpbmtSZW5kZXJMYXllci5wcm90b3R5cGUuX2NsZWFyQ3VycmVudExpbmsgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9zdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5jbGVhckNlbGxzKHRoaXMuX3N0YXRlLngxLCB0aGlzLl9zdGF0ZS55MSwgdGhpcy5fc3RhdGUuY29scyAtIHRoaXMuX3N0YXRlLngxLCAxKTtcbiAgICAgICAgICAgIHZhciBtaWRkbGVSb3dDb3VudCA9IHRoaXMuX3N0YXRlLnkyIC0gdGhpcy5fc3RhdGUueTEgLSAxO1xuICAgICAgICAgICAgaWYgKG1pZGRsZVJvd0NvdW50ID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJDZWxscygwLCB0aGlzLl9zdGF0ZS55MSArIDEsIHRoaXMuX3N0YXRlLmNvbHMsIG1pZGRsZVJvd0NvdW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY2xlYXJDZWxscygwLCB0aGlzLl9zdGF0ZS55MiwgdGhpcy5fc3RhdGUueDIsIDEpO1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBMaW5rUmVuZGVyTGF5ZXIucHJvdG90eXBlLl9vbkxpbmtIb3ZlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmIChlLmZnID09PSBUeXBlc18xLklOVkVSVEVEX0RFRkFVTFRfQ09MT1IpIHtcbiAgICAgICAgICAgIHRoaXMuX2N0eC5maWxsU3R5bGUgPSB0aGlzLl9jb2xvcnMuYmFja2dyb3VuZC5jc3M7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQ2hhckF0bGFzVXRpbHNfMS5pczI1NkNvbG9yKGUuZmcpKSB7XG4gICAgICAgICAgICB0aGlzLl9jdHguZmlsbFN0eWxlID0gdGhpcy5fY29sb3JzLmFuc2lbZS5mZ10uY3NzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fY3R4LmZpbGxTdHlsZSA9IHRoaXMuX2NvbG9ycy5mb3JlZ3JvdW5kLmNzcztcbiAgICAgICAgfVxuICAgICAgICBpZiAoZS55MSA9PT0gZS55Mikge1xuICAgICAgICAgICAgdGhpcy5maWxsQm90dG9tTGluZUF0Q2VsbHMoZS54MSwgZS55MSwgZS54MiAtIGUueDEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5maWxsQm90dG9tTGluZUF0Q2VsbHMoZS54MSwgZS55MSwgZS5jb2xzIC0gZS54MSk7XG4gICAgICAgICAgICBmb3IgKHZhciB5ID0gZS55MSArIDE7IHkgPCBlLnkyOyB5KyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpbGxCb3R0b21MaW5lQXRDZWxscygwLCB5LCBlLmNvbHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5maWxsQm90dG9tTGluZUF0Q2VsbHMoMCwgZS55MiwgZS54Mik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RhdGUgPSBlO1xuICAgIH07XG4gICAgTGlua1JlbmRlckxheWVyLnByb3RvdHlwZS5fb25MaW5rTGVhdmUgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICB0aGlzLl9jbGVhckN1cnJlbnRMaW5rKCk7XG4gICAgfTtcbiAgICByZXR1cm4gTGlua1JlbmRlckxheWVyO1xufShCYXNlUmVuZGVyTGF5ZXJfMS5CYXNlUmVuZGVyTGF5ZXIpKTtcbmV4cG9ydHMuTGlua1JlbmRlckxheWVyID0gTGlua1JlbmRlckxheWVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TGlua1JlbmRlckxheWVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEJ1ZmZlcl8xID0gcmVxdWlyZShcIi4uL0J1ZmZlclwiKTtcbnZhciBDaGFyYWN0ZXJKb2luZXJSZWdpc3RyeSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ2hhcmFjdGVySm9pbmVyUmVnaXN0cnkoX3Rlcm1pbmFsKSB7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsID0gX3Rlcm1pbmFsO1xuICAgICAgICB0aGlzLl9jaGFyYWN0ZXJKb2luZXJzID0gW107XG4gICAgICAgIHRoaXMuX25leHRDaGFyYWN0ZXJKb2luZXJJZCA9IDA7XG4gICAgfVxuICAgIENoYXJhY3RlckpvaW5lclJlZ2lzdHJ5LnByb3RvdHlwZS5yZWdpc3RlckNoYXJhY3RlckpvaW5lciA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHZhciBqb2luZXIgPSB7XG4gICAgICAgICAgICBpZDogdGhpcy5fbmV4dENoYXJhY3RlckpvaW5lcklkKyssXG4gICAgICAgICAgICBoYW5kbGVyOiBoYW5kbGVyXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2NoYXJhY3RlckpvaW5lcnMucHVzaChqb2luZXIpO1xuICAgICAgICByZXR1cm4gam9pbmVyLmlkO1xuICAgIH07XG4gICAgQ2hhcmFjdGVySm9pbmVyUmVnaXN0cnkucHJvdG90eXBlLmRlcmVnaXN0ZXJDaGFyYWN0ZXJKb2luZXIgPSBmdW5jdGlvbiAoam9pbmVySWQpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9jaGFyYWN0ZXJKb2luZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2hhcmFjdGVySm9pbmVyc1tpXS5pZCA9PT0gam9pbmVySWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGFyYWN0ZXJKb2luZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBDaGFyYWN0ZXJKb2luZXJSZWdpc3RyeS5wcm90b3R5cGUuZ2V0Sm9pbmVkQ2hhcmFjdGVycyA9IGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NoYXJhY3RlckpvaW5lcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxpbmUgPSB0aGlzLl90ZXJtaW5hbC5idWZmZXIubGluZXMuZ2V0KHJvdyk7XG4gICAgICAgIGlmIChsaW5lLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIHZhciByYW5nZXMgPSBbXTtcbiAgICAgICAgdmFyIGxpbmVTdHIgPSB0aGlzLl90ZXJtaW5hbC5idWZmZXIudHJhbnNsYXRlQnVmZmVyTGluZVRvU3RyaW5nKHJvdywgdHJ1ZSk7XG4gICAgICAgIHZhciByYW5nZVN0YXJ0Q29sdW1uID0gMDtcbiAgICAgICAgdmFyIGN1cnJlbnRTdHJpbmdJbmRleCA9IDA7XG4gICAgICAgIHZhciByYW5nZVN0YXJ0U3RyaW5nSW5kZXggPSAwO1xuICAgICAgICB2YXIgcmFuZ2VBdHRyID0gbGluZS5nZXQoMClbQnVmZmVyXzEuQ0hBUl9EQVRBX0FUVFJfSU5ERVhdID4+IDk7XG4gICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgdGhpcy5fdGVybWluYWwuY29sczsgeCsrKSB7XG4gICAgICAgICAgICB2YXIgY2hhckRhdGEgPSBsaW5lLmdldCh4KTtcbiAgICAgICAgICAgIHZhciBjaGFycyA9IGNoYXJEYXRhW0J1ZmZlcl8xLkNIQVJfREFUQV9DSEFSX0lOREVYXTtcbiAgICAgICAgICAgIHZhciB3aWR0aCA9IGNoYXJEYXRhW0J1ZmZlcl8xLkNIQVJfREFUQV9XSURUSF9JTkRFWF07XG4gICAgICAgICAgICB2YXIgYXR0ciA9IGNoYXJEYXRhW0J1ZmZlcl8xLkNIQVJfREFUQV9BVFRSX0lOREVYXSA+PiA5O1xuICAgICAgICAgICAgaWYgKHdpZHRoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYXR0ciAhPT0gcmFuZ2VBdHRyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHggLSByYW5nZVN0YXJ0Q29sdW1uID4gMSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgam9pbmVkUmFuZ2VzID0gdGhpcy5fZ2V0Sm9pbmVkUmFuZ2VzKGxpbmVTdHIsIHJhbmdlU3RhcnRTdHJpbmdJbmRleCwgY3VycmVudFN0cmluZ0luZGV4LCBsaW5lLCByYW5nZVN0YXJ0Q29sdW1uKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBqb2luZWRSYW5nZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlcy5wdXNoKGpvaW5lZFJhbmdlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmFuZ2VTdGFydENvbHVtbiA9IHg7XG4gICAgICAgICAgICAgICAgcmFuZ2VTdGFydFN0cmluZ0luZGV4ID0gY3VycmVudFN0cmluZ0luZGV4O1xuICAgICAgICAgICAgICAgIHJhbmdlQXR0ciA9IGF0dHI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyZW50U3RyaW5nSW5kZXggKz0gY2hhcnMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl90ZXJtaW5hbC5jb2xzIC0gcmFuZ2VTdGFydENvbHVtbiA+IDEpIHtcbiAgICAgICAgICAgIHZhciBqb2luZWRSYW5nZXMgPSB0aGlzLl9nZXRKb2luZWRSYW5nZXMobGluZVN0ciwgcmFuZ2VTdGFydFN0cmluZ0luZGV4LCBjdXJyZW50U3RyaW5nSW5kZXgsIGxpbmUsIHJhbmdlU3RhcnRDb2x1bW4pO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBqb2luZWRSYW5nZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICByYW5nZXMucHVzaChqb2luZWRSYW5nZXNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByYW5nZXM7XG4gICAgfTtcbiAgICBDaGFyYWN0ZXJKb2luZXJSZWdpc3RyeS5wcm90b3R5cGUuX2dldEpvaW5lZFJhbmdlcyA9IGZ1bmN0aW9uIChsaW5lLCBzdGFydEluZGV4LCBlbmRJbmRleCwgbGluZURhdGEsIHN0YXJ0Q29sKSB7XG4gICAgICAgIHZhciB0ZXh0ID0gbGluZS5zdWJzdHJpbmcoc3RhcnRJbmRleCwgZW5kSW5kZXgpO1xuICAgICAgICB2YXIgam9pbmVkUmFuZ2VzID0gdGhpcy5fY2hhcmFjdGVySm9pbmVyc1swXS5oYW5kbGVyKHRleHQpO1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IHRoaXMuX2NoYXJhY3RlckpvaW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBqb2luZXJSYW5nZXMgPSB0aGlzLl9jaGFyYWN0ZXJKb2luZXJzW2ldLmhhbmRsZXIodGV4dCk7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGpvaW5lclJhbmdlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIENoYXJhY3RlckpvaW5lclJlZ2lzdHJ5Ll9tZXJnZVJhbmdlcyhqb2luZWRSYW5nZXMsIGpvaW5lclJhbmdlc1tqXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RyaW5nUmFuZ2VzVG9DZWxsUmFuZ2VzKGpvaW5lZFJhbmdlcywgbGluZURhdGEsIHN0YXJ0Q29sKTtcbiAgICAgICAgcmV0dXJuIGpvaW5lZFJhbmdlcztcbiAgICB9O1xuICAgIENoYXJhY3RlckpvaW5lclJlZ2lzdHJ5LnByb3RvdHlwZS5fc3RyaW5nUmFuZ2VzVG9DZWxsUmFuZ2VzID0gZnVuY3Rpb24gKHJhbmdlcywgbGluZSwgc3RhcnRDb2wpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRSYW5nZUluZGV4ID0gMDtcbiAgICAgICAgdmFyIGN1cnJlbnRSYW5nZVN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGN1cnJlbnRTdHJpbmdJbmRleCA9IDA7XG4gICAgICAgIHZhciBjdXJyZW50UmFuZ2UgPSByYW5nZXNbY3VycmVudFJhbmdlSW5kZXhdO1xuICAgICAgICBpZiAoIWN1cnJlbnRSYW5nZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIHggPSBzdGFydENvbDsgeCA8IHRoaXMuX3Rlcm1pbmFsLmNvbHM7IHgrKykge1xuICAgICAgICAgICAgdmFyIGNoYXJEYXRhID0gbGluZS5nZXQoeCk7XG4gICAgICAgICAgICB2YXIgd2lkdGggPSBjaGFyRGF0YVtCdWZmZXJfMS5DSEFSX0RBVEFfV0lEVEhfSU5ERVhdO1xuICAgICAgICAgICAgdmFyIGxlbmd0aF8xID0gY2hhckRhdGFbQnVmZmVyXzEuQ0hBUl9EQVRBX0NIQVJfSU5ERVhdLmxlbmd0aDtcbiAgICAgICAgICAgIGlmICh3aWR0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFjdXJyZW50UmFuZ2VTdGFydGVkICYmIGN1cnJlbnRSYW5nZVswXSA8PSBjdXJyZW50U3RyaW5nSW5kZXgpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UmFuZ2VbMF0gPSB4O1xuICAgICAgICAgICAgICAgIGN1cnJlbnRSYW5nZVN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGN1cnJlbnRSYW5nZVsxXSA8PSBjdXJyZW50U3RyaW5nSW5kZXgpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UmFuZ2VbMV0gPSB4O1xuICAgICAgICAgICAgICAgIGN1cnJlbnRSYW5nZSA9IHJhbmdlc1srK2N1cnJlbnRSYW5nZUluZGV4XTtcbiAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnRSYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRSYW5nZVswXSA8PSBjdXJyZW50U3RyaW5nSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFJhbmdlWzBdID0geDtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFJhbmdlU3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50UmFuZ2VTdGFydGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudFN0cmluZ0luZGV4ICs9IGxlbmd0aF8xO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50UmFuZ2UpIHtcbiAgICAgICAgICAgIGN1cnJlbnRSYW5nZVsxXSA9IHRoaXMuX3Rlcm1pbmFsLmNvbHM7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENoYXJhY3RlckpvaW5lclJlZ2lzdHJ5Ll9tZXJnZVJhbmdlcyA9IGZ1bmN0aW9uIChyYW5nZXMsIG5ld1JhbmdlKSB7XG4gICAgICAgIHZhciBpblJhbmdlID0gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcmFuZ2UgPSByYW5nZXNbaV07XG4gICAgICAgICAgICBpZiAoIWluUmFuZ2UpIHtcbiAgICAgICAgICAgICAgICBpZiAobmV3UmFuZ2VbMV0gPD0gcmFuZ2VbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VzLnNwbGljZShpLCAwLCBuZXdSYW5nZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByYW5nZXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChuZXdSYW5nZVsxXSA8PSByYW5nZVsxXSkge1xuICAgICAgICAgICAgICAgICAgICByYW5nZVswXSA9IE1hdGgubWluKG5ld1JhbmdlWzBdLCByYW5nZVswXSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByYW5nZXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChuZXdSYW5nZVswXSA8IHJhbmdlWzFdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlWzBdID0gTWF0aC5taW4obmV3UmFuZ2VbMF0sIHJhbmdlWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgaW5SYW5nZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1JhbmdlWzFdIDw9IHJhbmdlWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlc1tpIC0gMV1bMV0gPSBuZXdSYW5nZVsxXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJhbmdlcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5ld1JhbmdlWzFdIDw9IHJhbmdlWzFdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlc1tpIC0gMV1bMV0gPSBNYXRoLm1heChuZXdSYW5nZVsxXSwgcmFuZ2VbMV0pO1xuICAgICAgICAgICAgICAgICAgICByYW5nZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICBpblJhbmdlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByYW5nZXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJhbmdlcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpblJhbmdlKSB7XG4gICAgICAgICAgICByYW5nZXNbcmFuZ2VzLmxlbmd0aCAtIDFdWzFdID0gbmV3UmFuZ2VbMV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByYW5nZXMucHVzaChuZXdSYW5nZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJhbmdlcztcbiAgICB9O1xuICAgIHJldHVybiBDaGFyYWN0ZXJKb2luZXJSZWdpc3RyeTtcbn0oKSk7XG5leHBvcnRzLkNoYXJhY3RlckpvaW5lclJlZ2lzdHJ5ID0gQ2hhcmFjdGVySm9pbmVyUmVnaXN0cnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DaGFyYWN0ZXJKb2luZXJSZWdpc3RyeS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgTW91c2Vab25lTWFuYWdlcl8xID0gcmVxdWlyZShcIi4vdWkvTW91c2Vab25lTWFuYWdlclwiKTtcbnZhciBFdmVudEVtaXR0ZXJfMSA9IHJlcXVpcmUoXCIuL2NvbW1vbi9FdmVudEVtaXR0ZXJcIik7XG52YXIgQnVmZmVyXzEgPSByZXF1aXJlKFwiLi9CdWZmZXJcIik7XG52YXIgQ2hhcldpZHRoXzEgPSByZXF1aXJlKFwiLi9DaGFyV2lkdGhcIik7XG52YXIgTGlua2lmaWVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTGlua2lmaWVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIExpbmtpZmllcihfdGVybWluYWwpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX3Rlcm1pbmFsID0gX3Rlcm1pbmFsO1xuICAgICAgICBfdGhpcy5fbGlua01hdGNoZXJzID0gW107XG4gICAgICAgIF90aGlzLl9uZXh0TGlua01hdGNoZXJJZCA9IDA7XG4gICAgICAgIF90aGlzLl9yb3dzVG9MaW5raWZ5ID0ge1xuICAgICAgICAgICAgc3RhcnQ6IG51bGwsXG4gICAgICAgICAgICBlbmQ6IG51bGxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBMaW5raWZpZXIucHJvdG90eXBlLmF0dGFjaFRvRG9tID0gZnVuY3Rpb24gKG1vdXNlWm9uZU1hbmFnZXIpIHtcbiAgICAgICAgdGhpcy5fbW91c2Vab25lTWFuYWdlciA9IG1vdXNlWm9uZU1hbmFnZXI7XG4gICAgfTtcbiAgICBMaW5raWZpZXIucHJvdG90eXBlLmxpbmtpZnlSb3dzID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLl9tb3VzZVpvbmVNYW5hZ2VyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3Jvd3NUb0xpbmtpZnkuc3RhcnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jvd3NUb0xpbmtpZnkuc3RhcnQgPSBzdGFydDtcbiAgICAgICAgICAgIHRoaXMuX3Jvd3NUb0xpbmtpZnkuZW5kID0gZW5kO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcm93c1RvTGlua2lmeS5zdGFydCA9IE1hdGgubWluKHRoaXMuX3Jvd3NUb0xpbmtpZnkuc3RhcnQsIHN0YXJ0KTtcbiAgICAgICAgICAgIHRoaXMuX3Jvd3NUb0xpbmtpZnkuZW5kID0gTWF0aC5tYXgodGhpcy5fcm93c1RvTGlua2lmeS5lbmQsIGVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbW91c2Vab25lTWFuYWdlci5jbGVhckFsbChzdGFydCwgZW5kKTtcbiAgICAgICAgaWYgKHRoaXMuX3Jvd3NUaW1lb3V0SWQpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9yb3dzVGltZW91dElkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yb3dzVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fbGlua2lmeVJvd3MoKTsgfSwgTGlua2lmaWVyLlRJTUVfQkVGT1JFX0xJTktJRlkpO1xuICAgIH07XG4gICAgTGlua2lmaWVyLnByb3RvdHlwZS5fbGlua2lmeVJvd3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3Jvd3NUaW1lb3V0SWQgPSBudWxsO1xuICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5fdGVybWluYWwuYnVmZmVyO1xuICAgICAgICB2YXIgYWJzb2x1dGVSb3dJbmRleFN0YXJ0ID0gYnVmZmVyLnlkaXNwICsgdGhpcy5fcm93c1RvTGlua2lmeS5zdGFydDtcbiAgICAgICAgaWYgKGFic29sdXRlUm93SW5kZXhTdGFydCA+PSBidWZmZXIubGluZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFic29sdXRlUm93SW5kZXhFbmQgPSBidWZmZXIueWRpc3AgKyBNYXRoLm1pbih0aGlzLl9yb3dzVG9MaW5raWZ5LmVuZCwgdGhpcy5fdGVybWluYWwucm93cykgKyAxO1xuICAgICAgICB2YXIgb3ZlcnNjYW5MaW5lTGltaXQgPSBNYXRoLmNlaWwoTGlua2lmaWVyLk9WRVJTQ0FOX0NIQVJfTElNSVQgLyB0aGlzLl90ZXJtaW5hbC5jb2xzKTtcbiAgICAgICAgdmFyIGl0ZXJhdG9yID0gdGhpcy5fdGVybWluYWwuYnVmZmVyLml0ZXJhdG9yKGZhbHNlLCBhYnNvbHV0ZVJvd0luZGV4U3RhcnQsIGFic29sdXRlUm93SW5kZXhFbmQsIG92ZXJzY2FuTGluZUxpbWl0LCBvdmVyc2NhbkxpbmVMaW1pdCk7XG4gICAgICAgIHdoaWxlIChpdGVyYXRvci5oYXNOZXh0KCkpIHtcbiAgICAgICAgICAgIHZhciBsaW5lRGF0YSA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fbGlua01hdGNoZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZG9MaW5raWZ5Um93KGxpbmVEYXRhLnJhbmdlLmZpcnN0LCBsaW5lRGF0YS5jb250ZW50LCB0aGlzLl9saW5rTWF0Y2hlcnNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Jvd3NUb0xpbmtpZnkuc3RhcnQgPSBudWxsO1xuICAgICAgICB0aGlzLl9yb3dzVG9MaW5raWZ5LmVuZCA9IG51bGw7XG4gICAgfTtcbiAgICBMaW5raWZpZXIucHJvdG90eXBlLnJlZ2lzdGVyTGlua01hdGNoZXIgPSBmdW5jdGlvbiAocmVnZXgsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgaWYgKCFoYW5kbGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2hhbmRsZXIgbXVzdCBiZSBkZWZpbmVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1hdGNoZXIgPSB7XG4gICAgICAgICAgICBpZDogdGhpcy5fbmV4dExpbmtNYXRjaGVySWQrKyxcbiAgICAgICAgICAgIHJlZ2V4OiByZWdleCxcbiAgICAgICAgICAgIGhhbmRsZXI6IGhhbmRsZXIsXG4gICAgICAgICAgICBtYXRjaEluZGV4OiBvcHRpb25zLm1hdGNoSW5kZXgsXG4gICAgICAgICAgICB2YWxpZGF0aW9uQ2FsbGJhY2s6IG9wdGlvbnMudmFsaWRhdGlvbkNhbGxiYWNrLFxuICAgICAgICAgICAgaG92ZXJUb29sdGlwQ2FsbGJhY2s6IG9wdGlvbnMudG9vbHRpcENhbGxiYWNrLFxuICAgICAgICAgICAgaG92ZXJMZWF2ZUNhbGxiYWNrOiBvcHRpb25zLmxlYXZlQ2FsbGJhY2ssXG4gICAgICAgICAgICB3aWxsTGlua0FjdGl2YXRlOiBvcHRpb25zLndpbGxMaW5rQWN0aXZhdGUsXG4gICAgICAgICAgICBwcmlvcml0eTogb3B0aW9ucy5wcmlvcml0eSB8fCAwXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2FkZExpbmtNYXRjaGVyVG9MaXN0KG1hdGNoZXIpO1xuICAgICAgICByZXR1cm4gbWF0Y2hlci5pZDtcbiAgICB9O1xuICAgIExpbmtpZmllci5wcm90b3R5cGUuX2FkZExpbmtNYXRjaGVyVG9MaXN0ID0gZnVuY3Rpb24gKG1hdGNoZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuX2xpbmtNYXRjaGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuX2xpbmtNYXRjaGVycy5wdXNoKG1hdGNoZXIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSB0aGlzLl9saW5rTWF0Y2hlcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGlmIChtYXRjaGVyLnByaW9yaXR5IDw9IHRoaXMuX2xpbmtNYXRjaGVyc1tpXS5wcmlvcml0eSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xpbmtNYXRjaGVycy5zcGxpY2UoaSArIDEsIDAsIG1hdGNoZXIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9saW5rTWF0Y2hlcnMuc3BsaWNlKDAsIDAsIG1hdGNoZXIpO1xuICAgIH07XG4gICAgTGlua2lmaWVyLnByb3RvdHlwZS5kZXJlZ2lzdGVyTGlua01hdGNoZXIgPSBmdW5jdGlvbiAobWF0Y2hlcklkKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fbGlua01hdGNoZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fbGlua01hdGNoZXJzW2ldLmlkID09PSBtYXRjaGVySWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9saW5rTWF0Y2hlcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIExpbmtpZmllci5wcm90b3R5cGUuX2RvTGlua2lmeVJvdyA9IGZ1bmN0aW9uIChyb3dJbmRleCwgdGV4dCwgbWF0Y2hlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgcmV4ID0gbmV3IFJlZ0V4cChtYXRjaGVyLnJlZ2V4LnNvdXJjZSwgbWF0Y2hlci5yZWdleC5mbGFncyArICdnJyk7XG4gICAgICAgIHZhciBtYXRjaDtcbiAgICAgICAgdmFyIHN0cmluZ0luZGV4ID0gLTE7XG4gICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHVyaSA9IG1hdGNoW3R5cGVvZiBtYXRjaGVyLm1hdGNoSW5kZXggIT09ICdudW1iZXInID8gMCA6IG1hdGNoZXIubWF0Y2hJbmRleF07XG4gICAgICAgICAgICBpZiAoIXVyaSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzXzEuX3Rlcm1pbmFsLmRlYnVnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHsgbWF0Y2g6IG1hdGNoLCBtYXRjaGVyOiBtYXRjaGVyIH0pO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ21hdGNoIGZvdW5kIHdpdGhvdXQgY29ycmVzcG9uZGluZyBtYXRjaEluZGV4Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBcImJyZWFrXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdHJpbmdJbmRleCA9IHRleHQuaW5kZXhPZih1cmksIHN0cmluZ0luZGV4ICsgMSk7XG4gICAgICAgICAgICByZXgubGFzdEluZGV4ID0gc3RyaW5nSW5kZXggKyB1cmkubGVuZ3RoO1xuICAgICAgICAgICAgdmFyIGJ1ZmZlckluZGV4ID0gdGhpc18xLl90ZXJtaW5hbC5idWZmZXIuc3RyaW5nSW5kZXhUb0J1ZmZlckluZGV4KHJvd0luZGV4LCBzdHJpbmdJbmRleCk7XG4gICAgICAgICAgICB2YXIgbGluZSA9IHRoaXNfMS5fdGVybWluYWwuYnVmZmVyLmxpbmVzLmdldChidWZmZXJJbmRleFswXSk7XG4gICAgICAgICAgICB2YXIgY2hhciA9IGxpbmUuZ2V0KGJ1ZmZlckluZGV4WzFdKTtcbiAgICAgICAgICAgIHZhciBmZztcbiAgICAgICAgICAgIGlmIChjaGFyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF0dHIgPSBjaGFyW0J1ZmZlcl8xLkNIQVJfREFUQV9BVFRSX0lOREVYXTtcbiAgICAgICAgICAgICAgICBmZyA9IChhdHRyID4+IDkpICYgMHgxZmY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWF0Y2hlci52YWxpZGF0aW9uQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBtYXRjaGVyLnZhbGlkYXRpb25DYWxsYmFjayh1cmksIGZ1bmN0aW9uIChpc1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5fcm93c1RpbWVvdXRJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fYWRkTGluayhidWZmZXJJbmRleFsxXSwgYnVmZmVySW5kZXhbMF0gLSBfdGhpcy5fdGVybWluYWwuYnVmZmVyLnlkaXNwLCB1cmksIG1hdGNoZXIsIGZnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpc18xLl9hZGRMaW5rKGJ1ZmZlckluZGV4WzFdLCBidWZmZXJJbmRleFswXSAtIHRoaXNfMS5fdGVybWluYWwuYnVmZmVyLnlkaXNwLCB1cmksIG1hdGNoZXIsIGZnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHRoaXNfMSA9IHRoaXM7XG4gICAgICAgIHdoaWxlICgobWF0Y2ggPSByZXguZXhlYyh0ZXh0KSkgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBzdGF0ZV8xID0gX2xvb3BfMSgpO1xuICAgICAgICAgICAgaWYgKHN0YXRlXzEgPT09IFwiYnJlYWtcIilcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH07XG4gICAgTGlua2lmaWVyLnByb3RvdHlwZS5fYWRkTGluayA9IGZ1bmN0aW9uICh4LCB5LCB1cmksIG1hdGNoZXIsIGZnKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciB3aWR0aCA9IENoYXJXaWR0aF8xLmdldFN0cmluZ0NlbGxXaWR0aCh1cmkpO1xuICAgICAgICB2YXIgeDEgPSB4ICUgdGhpcy5fdGVybWluYWwuY29scztcbiAgICAgICAgdmFyIHkxID0geSArIE1hdGguZmxvb3IoeCAvIHRoaXMuX3Rlcm1pbmFsLmNvbHMpO1xuICAgICAgICB2YXIgeDIgPSAoeDEgKyB3aWR0aCkgJSB0aGlzLl90ZXJtaW5hbC5jb2xzO1xuICAgICAgICB2YXIgeTIgPSB5MSArIE1hdGguZmxvb3IoKHgxICsgd2lkdGgpIC8gdGhpcy5fdGVybWluYWwuY29scyk7XG4gICAgICAgIGlmICh4MiA9PT0gMCkge1xuICAgICAgICAgICAgeDIgPSB0aGlzLl90ZXJtaW5hbC5jb2xzO1xuICAgICAgICAgICAgeTItLTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9tb3VzZVpvbmVNYW5hZ2VyLmFkZChuZXcgTW91c2Vab25lTWFuYWdlcl8xLk1vdXNlWm9uZSh4MSArIDEsIHkxICsgMSwgeDIgKyAxLCB5MiArIDEsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBpZiAobWF0Y2hlci5oYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXIuaGFuZGxlcihlLCB1cmkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2luZG93Lm9wZW4odXJpLCAnX2JsYW5rJyk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBfdGhpcy5lbWl0KFwibGlua2hvdmVyXCIsIF90aGlzLl9jcmVhdGVMaW5rSG92ZXJFdmVudCh4MSwgeTEsIHgyLCB5MiwgZmcpKTtcbiAgICAgICAgICAgIF90aGlzLl90ZXJtaW5hbC5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3h0ZXJtLWN1cnNvci1wb2ludGVyJyk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBfdGhpcy5lbWl0KFwibGlua3Rvb2x0aXBcIiwgX3RoaXMuX2NyZWF0ZUxpbmtIb3ZlckV2ZW50KHgxLCB5MSwgeDIsIHkyLCBmZykpO1xuICAgICAgICAgICAgaWYgKG1hdGNoZXIuaG92ZXJUb29sdGlwQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBtYXRjaGVyLmhvdmVyVG9vbHRpcENhbGxiYWNrKGUsIHVyaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmVtaXQoXCJsaW5rbGVhdmVcIiwgX3RoaXMuX2NyZWF0ZUxpbmtIb3ZlckV2ZW50KHgxLCB5MSwgeDIsIHkyLCBmZykpO1xuICAgICAgICAgICAgX3RoaXMuX3Rlcm1pbmFsLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgneHRlcm0tY3Vyc29yLXBvaW50ZXInKTtcbiAgICAgICAgICAgIGlmIChtYXRjaGVyLmhvdmVyTGVhdmVDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIG1hdGNoZXIuaG92ZXJMZWF2ZUNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBpZiAobWF0Y2hlci53aWxsTGlua0FjdGl2YXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXIud2lsbExpbmtBY3RpdmF0ZShlLCB1cmkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pKTtcbiAgICB9O1xuICAgIExpbmtpZmllci5wcm90b3R5cGUuX2NyZWF0ZUxpbmtIb3ZlckV2ZW50ID0gZnVuY3Rpb24gKHgxLCB5MSwgeDIsIHkyLCBmZykge1xuICAgICAgICByZXR1cm4geyB4MTogeDEsIHkxOiB5MSwgeDI6IHgyLCB5MjogeTIsIGNvbHM6IHRoaXMuX3Rlcm1pbmFsLmNvbHMsIGZnOiBmZyB9O1xuICAgIH07XG4gICAgTGlua2lmaWVyLlRJTUVfQkVGT1JFX0xJTktJRlkgPSAyMDA7XG4gICAgTGlua2lmaWVyLk9WRVJTQ0FOX0NIQVJfTElNSVQgPSAyMDAwO1xuICAgIHJldHVybiBMaW5raWZpZXI7XG59KEV2ZW50RW1pdHRlcl8xLkV2ZW50RW1pdHRlcikpO1xuZXhwb3J0cy5MaW5raWZpZXIgPSBMaW5raWZpZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1MaW5raWZpZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIE1vdXNlSGVscGVyXzEgPSByZXF1aXJlKFwiLi91dGlscy9Nb3VzZUhlbHBlclwiKTtcbnZhciBCcm93c2VyID0gcmVxdWlyZShcIi4vY29yZS9QbGF0Zm9ybVwiKTtcbnZhciBFdmVudEVtaXR0ZXJfMSA9IHJlcXVpcmUoXCIuL2NvbW1vbi9FdmVudEVtaXR0ZXJcIik7XG52YXIgU2VsZWN0aW9uTW9kZWxfMSA9IHJlcXVpcmUoXCIuL1NlbGVjdGlvbk1vZGVsXCIpO1xudmFyIEJ1ZmZlcl8xID0gcmVxdWlyZShcIi4vQnVmZmVyXCIpO1xudmFyIEFsdENsaWNrSGFuZGxlcl8xID0gcmVxdWlyZShcIi4vaGFuZGxlcnMvQWx0Q2xpY2tIYW5kbGVyXCIpO1xudmFyIERSQUdfU0NST0xMX01BWF9USFJFU0hPTEQgPSA1MDtcbnZhciBEUkFHX1NDUk9MTF9NQVhfU1BFRUQgPSAxNTtcbnZhciBEUkFHX1NDUk9MTF9JTlRFUlZBTCA9IDUwO1xudmFyIEFMVF9DTElDS19NT1ZFX0NVUlNPUl9USU1FID0gNTAwO1xudmFyIFdPUkRfU0VQQVJBVE9SUyA9ICcgKClbXXt9XFwnXCInO1xudmFyIE5PTl9CUkVBS0lOR19TUEFDRV9DSEFSID0gU3RyaW5nLmZyb21DaGFyQ29kZSgxNjApO1xudmFyIEFMTF9OT05fQlJFQUtJTkdfU1BBQ0VfUkVHRVggPSBuZXcgUmVnRXhwKE5PTl9CUkVBS0lOR19TUEFDRV9DSEFSLCAnZycpO1xudmFyIFNlbGVjdGlvbk1hbmFnZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTZWxlY3Rpb25NYW5hZ2VyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNlbGVjdGlvbk1hbmFnZXIoX3Rlcm1pbmFsLCBfY2hhck1lYXN1cmUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX3Rlcm1pbmFsID0gX3Rlcm1pbmFsO1xuICAgICAgICBfdGhpcy5fY2hhck1lYXN1cmUgPSBfY2hhck1lYXN1cmU7XG4gICAgICAgIF90aGlzLl9lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgX3RoaXMuX2luaXRMaXN0ZW5lcnMoKTtcbiAgICAgICAgX3RoaXMuZW5hYmxlKCk7XG4gICAgICAgIF90aGlzLl9tb2RlbCA9IG5ldyBTZWxlY3Rpb25Nb2RlbF8xLlNlbGVjdGlvbk1vZGVsKF90ZXJtaW5hbCk7XG4gICAgICAgIF90aGlzLl9hY3RpdmVTZWxlY3Rpb25Nb2RlID0gMDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTZWxlY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5fcmVtb3ZlTW91c2VEb3duTGlzdGVuZXJzKCk7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2VsZWN0aW9uTWFuYWdlci5wcm90b3R5cGUsIFwiX2J1ZmZlclwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlcnMuYWN0aXZlO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBTZWxlY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5faW5pdExpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5fbW91c2VNb3ZlTGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHsgcmV0dXJuIF90aGlzLl9vbk1vdXNlTW92ZShldmVudCk7IH07XG4gICAgICAgIHRoaXMuX21vdXNlVXBMaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkgeyByZXR1cm4gX3RoaXMuX29uTW91c2VVcChldmVudCk7IH07XG4gICAgICAgIHRoaXMuX3RyaW1MaXN0ZW5lciA9IGZ1bmN0aW9uIChhbW91bnQpIHsgcmV0dXJuIF90aGlzLl9vblRyaW0oYW1vdW50KTsgfTtcbiAgICAgICAgdGhpcy5pbml0QnVmZmVyc0xpc3RlbmVycygpO1xuICAgIH07XG4gICAgU2VsZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuaW5pdEJ1ZmZlcnNMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci5saW5lcy5vbigndHJpbScsIHRoaXMuX3RyaW1MaXN0ZW5lcik7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlcnMub24oJ2FjdGl2YXRlJywgZnVuY3Rpb24gKGUpIHsgcmV0dXJuIF90aGlzLl9vbkJ1ZmZlckFjdGl2YXRlKGUpOyB9KTtcbiAgICB9O1xuICAgIFNlbGVjdGlvbk1hbmFnZXIucHJvdG90eXBlLmRpc2FibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY2xlYXJTZWxlY3Rpb24oKTtcbiAgICAgICAgdGhpcy5fZW5hYmxlZCA9IGZhbHNlO1xuICAgIH07XG4gICAgU2VsZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuZW5hYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9lbmFibGVkID0gdHJ1ZTtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTZWxlY3Rpb25NYW5hZ2VyLnByb3RvdHlwZSwgXCJzZWxlY3Rpb25TdGFydFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fbW9kZWwuZmluYWxTZWxlY3Rpb25TdGFydDsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNlbGVjdGlvbk1hbmFnZXIucHJvdG90eXBlLCBcInNlbGVjdGlvbkVuZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fbW9kZWwuZmluYWxTZWxlY3Rpb25FbmQ7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTZWxlY3Rpb25NYW5hZ2VyLnByb3RvdHlwZSwgXCJoYXNTZWxlY3Rpb25cIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzdGFydCA9IHRoaXMuX21vZGVsLmZpbmFsU2VsZWN0aW9uU3RhcnQ7XG4gICAgICAgICAgICB2YXIgZW5kID0gdGhpcy5fbW9kZWwuZmluYWxTZWxlY3Rpb25FbmQ7XG4gICAgICAgICAgICBpZiAoIXN0YXJ0IHx8ICFlbmQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3RhcnRbMF0gIT09IGVuZFswXSB8fCBzdGFydFsxXSAhPT0gZW5kWzFdO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2VsZWN0aW9uTWFuYWdlci5wcm90b3R5cGUsIFwic2VsZWN0aW9uVGV4dFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5fbW9kZWwuZmluYWxTZWxlY3Rpb25TdGFydDtcbiAgICAgICAgICAgIHZhciBlbmQgPSB0aGlzLl9tb2RlbC5maW5hbFNlbGVjdGlvbkVuZDtcbiAgICAgICAgICAgIGlmICghc3RhcnQgfHwgIWVuZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9hY3RpdmVTZWxlY3Rpb25Nb2RlID09PSAzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0WzBdID09PSBlbmRbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gc3RhcnRbMV07IGkgPD0gZW5kWzFdOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxpbmVUZXh0ID0gdGhpcy5fYnVmZmVyLnRyYW5zbGF0ZUJ1ZmZlckxpbmVUb1N0cmluZyhpLCB0cnVlLCBzdGFydFswXSwgZW5kWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobGluZVRleHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBzdGFydFJvd0VuZENvbCA9IHN0YXJ0WzFdID09PSBlbmRbMV0gPyBlbmRbMF0gOiBudWxsO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRoaXMuX2J1ZmZlci50cmFuc2xhdGVCdWZmZXJMaW5lVG9TdHJpbmcoc3RhcnRbMV0sIHRydWUsIHN0YXJ0WzBdLCBzdGFydFJvd0VuZENvbCkpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSBzdGFydFsxXSArIDE7IGkgPD0gZW5kWzFdIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXJMaW5lID0gdGhpcy5fYnVmZmVyLmxpbmVzLmdldChpKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxpbmVUZXh0ID0gdGhpcy5fYnVmZmVyLnRyYW5zbGF0ZUJ1ZmZlckxpbmVUb1N0cmluZyhpLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1ZmZlckxpbmUuaXNXcmFwcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdICs9IGxpbmVUZXh0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobGluZVRleHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzdGFydFsxXSAhPT0gZW5kWzFdKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXJMaW5lID0gdGhpcy5fYnVmZmVyLmxpbmVzLmdldChlbmRbMV0pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGluZVRleHQgPSB0aGlzLl9idWZmZXIudHJhbnNsYXRlQnVmZmVyTGluZVRvU3RyaW5nKGVuZFsxXSwgdHJ1ZSwgMCwgZW5kWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1ZmZlckxpbmUuaXNXcmFwcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdICs9IGxpbmVUZXh0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobGluZVRleHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGZvcm1hdHRlZFJlc3VsdCA9IHJlc3VsdC5tYXAoZnVuY3Rpb24gKGxpbmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGluZS5yZXBsYWNlKEFMTF9OT05fQlJFQUtJTkdfU1BBQ0VfUkVHRVgsICcgJyk7XG4gICAgICAgICAgICB9KS5qb2luKEJyb3dzZXIuaXNNU1dpbmRvd3MgPyAnXFxyXFxuJyA6ICdcXG4nKTtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXR0ZWRSZXN1bHQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIFNlbGVjdGlvbk1hbmFnZXIucHJvdG90eXBlLmNsZWFyU2VsZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9tb2RlbC5jbGVhclNlbGVjdGlvbigpO1xuICAgICAgICB0aGlzLl9yZW1vdmVNb3VzZURvd25MaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgfTtcbiAgICBTZWxlY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24gKGlzTmV3U2VsZWN0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICghdGhpcy5fcmVmcmVzaEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICAgICAgICB0aGlzLl9yZWZyZXNoQW5pbWF0aW9uRnJhbWUgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLl9yZWZyZXNoKCk7IH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChCcm93c2VyLmlzTGludXggJiYgaXNOZXdTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIHZhciBzZWxlY3Rpb25UZXh0ID0gdGhpcy5zZWxlY3Rpb25UZXh0O1xuICAgICAgICAgICAgaWYgKHNlbGVjdGlvblRleHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0KCduZXdzZWxlY3Rpb24nLCB0aGlzLnNlbGVjdGlvblRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTZWxlY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5fcmVmcmVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fcmVmcmVzaEFuaW1hdGlvbkZyYW1lID0gbnVsbDtcbiAgICAgICAgdGhpcy5lbWl0KCdyZWZyZXNoJywge1xuICAgICAgICAgICAgc3RhcnQ6IHRoaXMuX21vZGVsLmZpbmFsU2VsZWN0aW9uU3RhcnQsXG4gICAgICAgICAgICBlbmQ6IHRoaXMuX21vZGVsLmZpbmFsU2VsZWN0aW9uRW5kLFxuICAgICAgICAgICAgY29sdW1uU2VsZWN0TW9kZTogdGhpcy5fYWN0aXZlU2VsZWN0aW9uTW9kZSA9PT0gM1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFNlbGVjdGlvbk1hbmFnZXIucHJvdG90eXBlLmlzQ2xpY2tJblNlbGVjdGlvbiA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgY29vcmRzID0gdGhpcy5fZ2V0TW91c2VCdWZmZXJDb29yZHMoZXZlbnQpO1xuICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLl9tb2RlbC5maW5hbFNlbGVjdGlvblN0YXJ0O1xuICAgICAgICB2YXIgZW5kID0gdGhpcy5fbW9kZWwuZmluYWxTZWxlY3Rpb25FbmQ7XG4gICAgICAgIGlmICghc3RhcnQgfHwgIWVuZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9hcmVDb29yZHNJblNlbGVjdGlvbihjb29yZHMsIHN0YXJ0LCBlbmQpO1xuICAgIH07XG4gICAgU2VsZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuX2FyZUNvb3Jkc0luU2VsZWN0aW9uID0gZnVuY3Rpb24gKGNvb3Jkcywgc3RhcnQsIGVuZCkge1xuICAgICAgICByZXR1cm4gKGNvb3Jkc1sxXSA+IHN0YXJ0WzFdICYmIGNvb3Jkc1sxXSA8IGVuZFsxXSkgfHxcbiAgICAgICAgICAgIChzdGFydFsxXSA9PT0gZW5kWzFdICYmIGNvb3Jkc1sxXSA9PT0gc3RhcnRbMV0gJiYgY29vcmRzWzBdID49IHN0YXJ0WzBdICYmIGNvb3Jkc1swXSA8IGVuZFswXSkgfHxcbiAgICAgICAgICAgIChzdGFydFsxXSA8IGVuZFsxXSAmJiBjb29yZHNbMV0gPT09IGVuZFsxXSAmJiBjb29yZHNbMF0gPCBlbmRbMF0pIHx8XG4gICAgICAgICAgICAoc3RhcnRbMV0gPCBlbmRbMV0gJiYgY29vcmRzWzFdID09PSBzdGFydFsxXSAmJiBjb29yZHNbMF0gPj0gc3RhcnRbMF0pO1xuICAgIH07XG4gICAgU2VsZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuc2VsZWN0V29yZEF0Q3Vyc29yID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBjb29yZHMgPSB0aGlzLl9nZXRNb3VzZUJ1ZmZlckNvb3JkcyhldmVudCk7XG4gICAgICAgIGlmIChjb29yZHMpIHtcbiAgICAgICAgICAgIHRoaXMuX3NlbGVjdFdvcmRBdChjb29yZHMsIGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMuX21vZGVsLnNlbGVjdGlvbkVuZCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2godHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNlbGVjdGlvbk1hbmFnZXIucHJvdG90eXBlLnNlbGVjdEFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fbW9kZWwuaXNTZWxlY3RBbGxBY3RpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICAgICAgdGhpcy5fdGVybWluYWwuZW1pdCgnc2VsZWN0aW9uJyk7XG4gICAgfTtcbiAgICBTZWxlY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5zZWxlY3RMaW5lcyA9IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgICAgIHRoaXMuX21vZGVsLmNsZWFyU2VsZWN0aW9uKCk7XG4gICAgICAgIHN0YXJ0ID0gTWF0aC5tYXgoc3RhcnQsIDApO1xuICAgICAgICBlbmQgPSBNYXRoLm1pbihlbmQsIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci5saW5lcy5sZW5ndGggLSAxKTtcbiAgICAgICAgdGhpcy5fbW9kZWwuc2VsZWN0aW9uU3RhcnQgPSBbMCwgc3RhcnRdO1xuICAgICAgICB0aGlzLl9tb2RlbC5zZWxlY3Rpb25FbmQgPSBbdGhpcy5fdGVybWluYWwuY29scywgZW5kXTtcbiAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmVtaXQoJ3NlbGVjdGlvbicpO1xuICAgIH07XG4gICAgU2VsZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuX29uVHJpbSA9IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgdmFyIG5lZWRzUmVmcmVzaCA9IHRoaXMuX21vZGVsLm9uVHJpbShhbW91bnQpO1xuICAgICAgICBpZiAobmVlZHNSZWZyZXNoKSB7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2VsZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuX2dldE1vdXNlQnVmZmVyQ29vcmRzID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBjb29yZHMgPSB0aGlzLl90ZXJtaW5hbC5tb3VzZUhlbHBlci5nZXRDb29yZHMoZXZlbnQsIHRoaXMuX3Rlcm1pbmFsLnNjcmVlbkVsZW1lbnQsIHRoaXMuX2NoYXJNZWFzdXJlLCB0aGlzLl90ZXJtaW5hbC5jb2xzLCB0aGlzLl90ZXJtaW5hbC5yb3dzLCB0cnVlKTtcbiAgICAgICAgaWYgKCFjb29yZHMpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvb3Jkc1swXS0tO1xuICAgICAgICBjb29yZHNbMV0tLTtcbiAgICAgICAgY29vcmRzWzFdICs9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ZGlzcDtcbiAgICAgICAgcmV0dXJuIGNvb3JkcztcbiAgICB9O1xuICAgIFNlbGVjdGlvbk1hbmFnZXIucHJvdG90eXBlLl9nZXRNb3VzZUV2ZW50U2Nyb2xsQW1vdW50ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBvZmZzZXQgPSBNb3VzZUhlbHBlcl8xLk1vdXNlSGVscGVyLmdldENvb3Jkc1JlbGF0aXZlVG9FbGVtZW50KGV2ZW50LCB0aGlzLl90ZXJtaW5hbC5zY3JlZW5FbGVtZW50KVsxXTtcbiAgICAgICAgdmFyIHRlcm1pbmFsSGVpZ2h0ID0gdGhpcy5fdGVybWluYWwucm93cyAqIE1hdGguY2VpbCh0aGlzLl9jaGFyTWVhc3VyZS5oZWlnaHQgKiB0aGlzLl90ZXJtaW5hbC5vcHRpb25zLmxpbmVIZWlnaHQpO1xuICAgICAgICBpZiAob2Zmc2V0ID49IDAgJiYgb2Zmc2V0IDw9IHRlcm1pbmFsSGVpZ2h0KSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2Zmc2V0ID4gdGVybWluYWxIZWlnaHQpIHtcbiAgICAgICAgICAgIG9mZnNldCAtPSB0ZXJtaW5hbEhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICBvZmZzZXQgPSBNYXRoLm1pbihNYXRoLm1heChvZmZzZXQsIC1EUkFHX1NDUk9MTF9NQVhfVEhSRVNIT0xEKSwgRFJBR19TQ1JPTExfTUFYX1RIUkVTSE9MRCk7XG4gICAgICAgIG9mZnNldCAvPSBEUkFHX1NDUk9MTF9NQVhfVEhSRVNIT0xEO1xuICAgICAgICByZXR1cm4gKG9mZnNldCAvIE1hdGguYWJzKG9mZnNldCkpICsgTWF0aC5yb3VuZChvZmZzZXQgKiAoRFJBR19TQ1JPTExfTUFYX1NQRUVEIC0gMSkpO1xuICAgIH07XG4gICAgU2VsZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuc2hvdWxkRm9yY2VTZWxlY3Rpb24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKEJyb3dzZXIuaXNNYWMpIHtcbiAgICAgICAgICAgIHJldHVybiBldmVudC5hbHRLZXkgJiYgdGhpcy5fdGVybWluYWwub3B0aW9ucy5tYWNPcHRpb25DbGlja0ZvcmNlc1NlbGVjdGlvbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXZlbnQuc2hpZnRLZXk7XG4gICAgfTtcbiAgICBTZWxlY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5vbk1vdXNlRG93biA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB0aGlzLl9tb3VzZURvd25UaW1lU3RhbXAgPSBldmVudC50aW1lU3RhbXA7XG4gICAgICAgIGlmIChldmVudC5idXR0b24gPT09IDIgJiYgdGhpcy5oYXNTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnQuYnV0dG9uICE9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9lbmFibGVkKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuc2hvdWxkRm9yY2VTZWxlY3Rpb24oZXZlbnQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5fZHJhZ1Njcm9sbEFtb3VudCA9IDA7XG4gICAgICAgIGlmICh0aGlzLl9lbmFibGVkICYmIGV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICB0aGlzLl9vbkluY3JlbWVudGFsQ2xpY2soZXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmRldGFpbCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX29uU2luZ2xlQ2xpY2soZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZXZlbnQuZGV0YWlsID09PSAyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb25Eb3VibGVDbGljayhldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChldmVudC5kZXRhaWwgPT09IDMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vblRyaXBsZUNsaWNrKGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9hZGRNb3VzZURvd25MaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5yZWZyZXNoKHRydWUpO1xuICAgIH07XG4gICAgU2VsZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuX2FkZE1vdXNlRG93bkxpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5fdGVybWluYWwuZWxlbWVudC5vd25lckRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuX21vdXNlTW92ZUxpc3RlbmVyKTtcbiAgICAgICAgdGhpcy5fdGVybWluYWwuZWxlbWVudC5vd25lckRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLl9tb3VzZVVwTGlzdGVuZXIpO1xuICAgICAgICB0aGlzLl9kcmFnU2Nyb2xsSW50ZXJ2YWxUaW1lciA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLl9kcmFnU2Nyb2xsKCk7IH0sIERSQUdfU0NST0xMX0lOVEVSVkFMKTtcbiAgICB9O1xuICAgIFNlbGVjdGlvbk1hbmFnZXIucHJvdG90eXBlLl9yZW1vdmVNb3VzZURvd25MaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl90ZXJtaW5hbC5lbGVtZW50Lm93bmVyRG9jdW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmVsZW1lbnQub3duZXJEb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLl9tb3VzZU1vdmVMaXN0ZW5lcik7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5lbGVtZW50Lm93bmVyRG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuX21vdXNlVXBMaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9kcmFnU2Nyb2xsSW50ZXJ2YWxUaW1lcik7XG4gICAgICAgIHRoaXMuX2RyYWdTY3JvbGxJbnRlcnZhbFRpbWVyID0gbnVsbDtcbiAgICB9O1xuICAgIFNlbGVjdGlvbk1hbmFnZXIucHJvdG90eXBlLl9vbkluY3JlbWVudGFsQ2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuX21vZGVsLnNlbGVjdGlvblN0YXJ0KSB7XG4gICAgICAgICAgICB0aGlzLl9tb2RlbC5zZWxlY3Rpb25FbmQgPSB0aGlzLl9nZXRNb3VzZUJ1ZmZlckNvb3JkcyhldmVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNlbGVjdGlvbk1hbmFnZXIucHJvdG90eXBlLl9vblNpbmdsZUNsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuX21vZGVsLnNlbGVjdGlvblN0YXJ0TGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5fbW9kZWwuaXNTZWxlY3RBbGxBY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fYWN0aXZlU2VsZWN0aW9uTW9kZSA9IHRoaXMuc2hvdWxkQ29sdW1uU2VsZWN0KGV2ZW50KSA/IDMgOiAwO1xuICAgICAgICB0aGlzLl9tb2RlbC5zZWxlY3Rpb25TdGFydCA9IHRoaXMuX2dldE1vdXNlQnVmZmVyQ29vcmRzKGV2ZW50KTtcbiAgICAgICAgaWYgKCF0aGlzLl9tb2RlbC5zZWxlY3Rpb25TdGFydCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX21vZGVsLnNlbGVjdGlvbkVuZCA9IG51bGw7XG4gICAgICAgIHZhciBsaW5lID0gdGhpcy5fYnVmZmVyLmxpbmVzLmdldCh0aGlzLl9tb2RlbC5zZWxlY3Rpb25TdGFydFsxXSk7XG4gICAgICAgIGlmICghbGluZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsaW5lLmxlbmd0aCA+PSB0aGlzLl9tb2RlbC5zZWxlY3Rpb25TdGFydFswXSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjaGFyID0gbGluZS5nZXQodGhpcy5fbW9kZWwuc2VsZWN0aW9uU3RhcnRbMF0pO1xuICAgICAgICBpZiAoY2hhcltCdWZmZXJfMS5DSEFSX0RBVEFfV0lEVEhfSU5ERVhdID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9tb2RlbC5zZWxlY3Rpb25TdGFydFswXSsrO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTZWxlY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5fb25Eb3VibGVDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgY29vcmRzID0gdGhpcy5fZ2V0TW91c2VCdWZmZXJDb29yZHMoZXZlbnQpO1xuICAgICAgICBpZiAoY29vcmRzKSB7XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmVTZWxlY3Rpb25Nb2RlID0gMTtcbiAgICAgICAgICAgIHRoaXMuX3NlbGVjdFdvcmRBdChjb29yZHMsIHRydWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTZWxlY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5fb25UcmlwbGVDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgY29vcmRzID0gdGhpcy5fZ2V0TW91c2VCdWZmZXJDb29yZHMoZXZlbnQpO1xuICAgICAgICBpZiAoY29vcmRzKSB7XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmVTZWxlY3Rpb25Nb2RlID0gMjtcbiAgICAgICAgICAgIHRoaXMuX3NlbGVjdExpbmVBdChjb29yZHNbMV0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTZWxlY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5zaG91bGRDb2x1bW5TZWxlY3QgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIGV2ZW50LmFsdEtleSAmJiAhKEJyb3dzZXIuaXNNYWMgJiYgdGhpcy5fdGVybWluYWwub3B0aW9ucy5tYWNPcHRpb25DbGlja0ZvcmNlc1NlbGVjdGlvbik7XG4gICAgfTtcbiAgICBTZWxlY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5fb25Nb3VzZU1vdmUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHZhciBwcmV2aW91c1NlbGVjdGlvbkVuZCA9IHRoaXMuX21vZGVsLnNlbGVjdGlvbkVuZCA/IFt0aGlzLl9tb2RlbC5zZWxlY3Rpb25FbmRbMF0sIHRoaXMuX21vZGVsLnNlbGVjdGlvbkVuZFsxXV0gOiBudWxsO1xuICAgICAgICB0aGlzLl9tb2RlbC5zZWxlY3Rpb25FbmQgPSB0aGlzLl9nZXRNb3VzZUJ1ZmZlckNvb3JkcyhldmVudCk7XG4gICAgICAgIGlmICghdGhpcy5fbW9kZWwuc2VsZWN0aW9uRW5kKSB7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2godHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZVNlbGVjdGlvbk1vZGUgPT09IDIpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9tb2RlbC5zZWxlY3Rpb25FbmRbMV0gPCB0aGlzLl9tb2RlbC5zZWxlY3Rpb25TdGFydFsxXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21vZGVsLnNlbGVjdGlvbkVuZFswXSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb2RlbC5zZWxlY3Rpb25FbmRbMF0gPSB0aGlzLl90ZXJtaW5hbC5jb2xzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX2FjdGl2ZVNlbGVjdGlvbk1vZGUgPT09IDEpIHtcbiAgICAgICAgICAgIHRoaXMuX3NlbGVjdFRvV29yZEF0KHRoaXMuX21vZGVsLnNlbGVjdGlvbkVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZHJhZ1Njcm9sbEFtb3VudCA9IHRoaXMuX2dldE1vdXNlRXZlbnRTY3JvbGxBbW91bnQoZXZlbnQpO1xuICAgICAgICBpZiAodGhpcy5fYWN0aXZlU2VsZWN0aW9uTW9kZSAhPT0gMykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2RyYWdTY3JvbGxBbW91bnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9kZWwuc2VsZWN0aW9uRW5kWzBdID0gdGhpcy5fdGVybWluYWwuY29scztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX2RyYWdTY3JvbGxBbW91bnQgPCAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9kZWwuc2VsZWN0aW9uRW5kWzBdID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fbW9kZWwuc2VsZWN0aW9uRW5kWzFdIDwgdGhpcy5fYnVmZmVyLmxpbmVzLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGNoYXIgPSB0aGlzLl9idWZmZXIubGluZXMuZ2V0KHRoaXMuX21vZGVsLnNlbGVjdGlvbkVuZFsxXSkuZ2V0KHRoaXMuX21vZGVsLnNlbGVjdGlvbkVuZFswXSk7XG4gICAgICAgICAgICBpZiAoY2hhciAmJiBjaGFyW0J1ZmZlcl8xLkNIQVJfREFUQV9XSURUSF9JTkRFWF0gPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb2RlbC5zZWxlY3Rpb25FbmRbMF0rKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXByZXZpb3VzU2VsZWN0aW9uRW5kIHx8XG4gICAgICAgICAgICBwcmV2aW91c1NlbGVjdGlvbkVuZFswXSAhPT0gdGhpcy5fbW9kZWwuc2VsZWN0aW9uRW5kWzBdIHx8XG4gICAgICAgICAgICBwcmV2aW91c1NlbGVjdGlvbkVuZFsxXSAhPT0gdGhpcy5fbW9kZWwuc2VsZWN0aW9uRW5kWzFdKSB7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2godHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNlbGVjdGlvbk1hbmFnZXIucHJvdG90eXBlLl9kcmFnU2Nyb2xsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fZHJhZ1Njcm9sbEFtb3VudCkge1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuc2Nyb2xsTGluZXModGhpcy5fZHJhZ1Njcm9sbEFtb3VudCwgZmFsc2UpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2RyYWdTY3JvbGxBbW91bnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZVNlbGVjdGlvbk1vZGUgIT09IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW9kZWwuc2VsZWN0aW9uRW5kWzBdID0gdGhpcy5fdGVybWluYWwuY29scztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9kZWwuc2VsZWN0aW9uRW5kWzFdID0gTWF0aC5taW4odGhpcy5fdGVybWluYWwuYnVmZmVyLnlkaXNwICsgdGhpcy5fdGVybWluYWwucm93cywgdGhpcy5fdGVybWluYWwuYnVmZmVyLmxpbmVzLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZVNlbGVjdGlvbk1vZGUgIT09IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW9kZWwuc2VsZWN0aW9uRW5kWzBdID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9kZWwuc2VsZWN0aW9uRW5kWzFdID0gdGhpcy5fdGVybWluYWwuYnVmZmVyLnlkaXNwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNlbGVjdGlvbk1hbmFnZXIucHJvdG90eXBlLl9vbk1vdXNlVXAgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIHRpbWVFbGFwc2VkID0gZXZlbnQudGltZVN0YW1wIC0gdGhpcy5fbW91c2VEb3duVGltZVN0YW1wO1xuICAgICAgICB0aGlzLl9yZW1vdmVNb3VzZURvd25MaXN0ZW5lcnMoKTtcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uVGV4dC5sZW5ndGggPD0gMSAmJiB0aW1lRWxhcHNlZCA8IEFMVF9DTElDS19NT1ZFX0NVUlNPUl9USU1FKSB7XG4gICAgICAgICAgICAobmV3IEFsdENsaWNrSGFuZGxlcl8xLkFsdENsaWNrSGFuZGxlcihldmVudCwgdGhpcy5fdGVybWluYWwpKS5tb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5oYXNTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmVtaXQoJ3NlbGVjdGlvbicpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTZWxlY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5fb25CdWZmZXJBY3RpdmF0ZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHRoaXMuY2xlYXJTZWxlY3Rpb24oKTtcbiAgICAgICAgZS5pbmFjdGl2ZUJ1ZmZlci5saW5lcy5vZmYoJ3RyaW0nLCB0aGlzLl90cmltTGlzdGVuZXIpO1xuICAgICAgICBlLmFjdGl2ZUJ1ZmZlci5saW5lcy5vbigndHJpbScsIHRoaXMuX3RyaW1MaXN0ZW5lcik7XG4gICAgfTtcbiAgICBTZWxlY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5fY29udmVydFZpZXdwb3J0Q29sVG9DaGFyYWN0ZXJJbmRleCA9IGZ1bmN0aW9uIChidWZmZXJMaW5lLCBjb29yZHMpIHtcbiAgICAgICAgdmFyIGNoYXJJbmRleCA9IGNvb3Jkc1swXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGNvb3Jkc1swXSA+PSBpOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjaGFyID0gYnVmZmVyTGluZS5nZXQoaSk7XG4gICAgICAgICAgICBpZiAoY2hhcltCdWZmZXJfMS5DSEFSX0RBVEFfV0lEVEhfSU5ERVhdID09PSAwKSB7XG4gICAgICAgICAgICAgICAgY2hhckluZGV4LS07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGFyW0J1ZmZlcl8xLkNIQVJfREFUQV9DSEFSX0lOREVYXS5sZW5ndGggPiAxICYmIGNvb3Jkc1swXSAhPT0gaSkge1xuICAgICAgICAgICAgICAgIGNoYXJJbmRleCArPSBjaGFyW0J1ZmZlcl8xLkNIQVJfREFUQV9DSEFSX0lOREVYXS5sZW5ndGggLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGFySW5kZXg7XG4gICAgfTtcbiAgICBTZWxlY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5zZXRTZWxlY3Rpb24gPSBmdW5jdGlvbiAoY29sLCByb3csIGxlbmd0aCkge1xuICAgICAgICB0aGlzLl9tb2RlbC5jbGVhclNlbGVjdGlvbigpO1xuICAgICAgICB0aGlzLl9yZW1vdmVNb3VzZURvd25MaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5fbW9kZWwuc2VsZWN0aW9uU3RhcnQgPSBbY29sLCByb3ddO1xuICAgICAgICB0aGlzLl9tb2RlbC5zZWxlY3Rpb25TdGFydExlbmd0aCA9IGxlbmd0aDtcbiAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgfTtcbiAgICBTZWxlY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5fZ2V0V29yZEF0ID0gZnVuY3Rpb24gKGNvb3JkcywgYWxsb3dXaGl0ZXNwYWNlT25seVNlbGVjdGlvbiwgZm9sbG93V3JhcHBlZExpbmVzQWJvdmUsIGZvbGxvd1dyYXBwZWRMaW5lc0JlbG93KSB7XG4gICAgICAgIGlmIChmb2xsb3dXcmFwcGVkTGluZXNBYm92ZSA9PT0gdm9pZCAwKSB7IGZvbGxvd1dyYXBwZWRMaW5lc0Fib3ZlID0gdHJ1ZTsgfVxuICAgICAgICBpZiAoZm9sbG93V3JhcHBlZExpbmVzQmVsb3cgPT09IHZvaWQgMCkgeyBmb2xsb3dXcmFwcGVkTGluZXNCZWxvdyA9IHRydWU7IH1cbiAgICAgICAgaWYgKGNvb3Jkc1swXSA+PSB0aGlzLl90ZXJtaW5hbC5jb2xzKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYnVmZmVyTGluZSA9IHRoaXMuX2J1ZmZlci5saW5lcy5nZXQoY29vcmRzWzFdKTtcbiAgICAgICAgaWYgKCFidWZmZXJMaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGluZSA9IHRoaXMuX2J1ZmZlci50cmFuc2xhdGVCdWZmZXJMaW5lVG9TdHJpbmcoY29vcmRzWzFdLCBmYWxzZSk7XG4gICAgICAgIHZhciBzdGFydEluZGV4ID0gdGhpcy5fY29udmVydFZpZXdwb3J0Q29sVG9DaGFyYWN0ZXJJbmRleChidWZmZXJMaW5lLCBjb29yZHMpO1xuICAgICAgICB2YXIgZW5kSW5kZXggPSBzdGFydEluZGV4O1xuICAgICAgICB2YXIgY2hhck9mZnNldCA9IGNvb3Jkc1swXSAtIHN0YXJ0SW5kZXg7XG4gICAgICAgIHZhciBsZWZ0V2lkZUNoYXJDb3VudCA9IDA7XG4gICAgICAgIHZhciByaWdodFdpZGVDaGFyQ291bnQgPSAwO1xuICAgICAgICB2YXIgbGVmdExvbmdDaGFyT2Zmc2V0ID0gMDtcbiAgICAgICAgdmFyIHJpZ2h0TG9uZ0NoYXJPZmZzZXQgPSAwO1xuICAgICAgICBpZiAobGluZS5jaGFyQXQoc3RhcnRJbmRleCkgPT09ICcgJykge1xuICAgICAgICAgICAgd2hpbGUgKHN0YXJ0SW5kZXggPiAwICYmIGxpbmUuY2hhckF0KHN0YXJ0SW5kZXggLSAxKSA9PT0gJyAnKSB7XG4gICAgICAgICAgICAgICAgc3RhcnRJbmRleC0tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKGVuZEluZGV4IDwgbGluZS5sZW5ndGggJiYgbGluZS5jaGFyQXQoZW5kSW5kZXggKyAxKSA9PT0gJyAnKSB7XG4gICAgICAgICAgICAgICAgZW5kSW5kZXgrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBzdGFydENvbCA9IGNvb3Jkc1swXTtcbiAgICAgICAgICAgIHZhciBlbmRDb2wgPSBjb29yZHNbMF07XG4gICAgICAgICAgICBpZiAoYnVmZmVyTGluZS5nZXQoc3RhcnRDb2wpW0J1ZmZlcl8xLkNIQVJfREFUQV9XSURUSF9JTkRFWF0gPT09IDApIHtcbiAgICAgICAgICAgICAgICBsZWZ0V2lkZUNoYXJDb3VudCsrO1xuICAgICAgICAgICAgICAgIHN0YXJ0Q29sLS07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYnVmZmVyTGluZS5nZXQoZW5kQ29sKVtCdWZmZXJfMS5DSEFSX0RBVEFfV0lEVEhfSU5ERVhdID09PSAyKSB7XG4gICAgICAgICAgICAgICAgcmlnaHRXaWRlQ2hhckNvdW50Kys7XG4gICAgICAgICAgICAgICAgZW5kQ29sKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYnVmZmVyTGluZS5nZXQoZW5kQ29sKVtCdWZmZXJfMS5DSEFSX0RBVEFfQ0hBUl9JTkRFWF0ubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIHJpZ2h0TG9uZ0NoYXJPZmZzZXQgKz0gYnVmZmVyTGluZS5nZXQoZW5kQ29sKVtCdWZmZXJfMS5DSEFSX0RBVEFfQ0hBUl9JTkRFWF0ubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICBlbmRJbmRleCArPSBidWZmZXJMaW5lLmdldChlbmRDb2wpW0J1ZmZlcl8xLkNIQVJfREFUQV9DSEFSX0lOREVYXS5sZW5ndGggLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKHN0YXJ0Q29sID4gMCAmJiBzdGFydEluZGV4ID4gMCAmJiAhdGhpcy5faXNDaGFyV29yZFNlcGFyYXRvcihidWZmZXJMaW5lLmdldChzdGFydENvbCAtIDEpKSkge1xuICAgICAgICAgICAgICAgIHZhciBjaGFyID0gYnVmZmVyTGluZS5nZXQoc3RhcnRDb2wgLSAxKTtcbiAgICAgICAgICAgICAgICBpZiAoY2hhcltCdWZmZXJfMS5DSEFSX0RBVEFfV0lEVEhfSU5ERVhdID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGxlZnRXaWRlQ2hhckNvdW50Kys7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0Q29sLS07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNoYXJbQnVmZmVyXzEuQ0hBUl9EQVRBX0NIQVJfSU5ERVhdLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdExvbmdDaGFyT2Zmc2V0ICs9IGNoYXJbQnVmZmVyXzEuQ0hBUl9EQVRBX0NIQVJfSU5ERVhdLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0SW5kZXggLT0gY2hhcltCdWZmZXJfMS5DSEFSX0RBVEFfQ0hBUl9JTkRFWF0ubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3RhcnRJbmRleC0tO1xuICAgICAgICAgICAgICAgIHN0YXJ0Q29sLS07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAoZW5kQ29sIDwgYnVmZmVyTGluZS5sZW5ndGggJiYgZW5kSW5kZXggKyAxIDwgbGluZS5sZW5ndGggJiYgIXRoaXMuX2lzQ2hhcldvcmRTZXBhcmF0b3IoYnVmZmVyTGluZS5nZXQoZW5kQ29sICsgMSkpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoYXIgPSBidWZmZXJMaW5lLmdldChlbmRDb2wgKyAxKTtcbiAgICAgICAgICAgICAgICBpZiAoY2hhcltCdWZmZXJfMS5DSEFSX0RBVEFfV0lEVEhfSU5ERVhdID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0V2lkZUNoYXJDb3VudCsrO1xuICAgICAgICAgICAgICAgICAgICBlbmRDb2wrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2hhcltCdWZmZXJfMS5DSEFSX0RBVEFfQ0hBUl9JTkRFWF0ubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICByaWdodExvbmdDaGFyT2Zmc2V0ICs9IGNoYXJbQnVmZmVyXzEuQ0hBUl9EQVRBX0NIQVJfSU5ERVhdLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgIGVuZEluZGV4ICs9IGNoYXJbQnVmZmVyXzEuQ0hBUl9EQVRBX0NIQVJfSU5ERVhdLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVuZEluZGV4Kys7XG4gICAgICAgICAgICAgICAgZW5kQ29sKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZW5kSW5kZXgrKztcbiAgICAgICAgdmFyIHN0YXJ0ID0gc3RhcnRJbmRleFxuICAgICAgICAgICAgKyBjaGFyT2Zmc2V0XG4gICAgICAgICAgICAtIGxlZnRXaWRlQ2hhckNvdW50XG4gICAgICAgICAgICArIGxlZnRMb25nQ2hhck9mZnNldDtcbiAgICAgICAgdmFyIGxlbmd0aCA9IE1hdGgubWluKHRoaXMuX3Rlcm1pbmFsLmNvbHMsIGVuZEluZGV4XG4gICAgICAgICAgICAtIHN0YXJ0SW5kZXhcbiAgICAgICAgICAgICsgbGVmdFdpZGVDaGFyQ291bnRcbiAgICAgICAgICAgICsgcmlnaHRXaWRlQ2hhckNvdW50XG4gICAgICAgICAgICAtIGxlZnRMb25nQ2hhck9mZnNldFxuICAgICAgICAgICAgLSByaWdodExvbmdDaGFyT2Zmc2V0KTtcbiAgICAgICAgaWYgKCFhbGxvd1doaXRlc3BhY2VPbmx5U2VsZWN0aW9uICYmIGxpbmUuc2xpY2Uoc3RhcnRJbmRleCwgZW5kSW5kZXgpLnRyaW0oKSA9PT0gJycpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmb2xsb3dXcmFwcGVkTGluZXNBYm92ZSkge1xuICAgICAgICAgICAgaWYgKHN0YXJ0ID09PSAwICYmIGJ1ZmZlckxpbmUuZ2V0KDApW0J1ZmZlcl8xLkNIQVJfREFUQV9DT0RFX0lOREVYXSAhPT0gMzIpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJldmlvdXNCdWZmZXJMaW5lID0gdGhpcy5fYnVmZmVyLmxpbmVzLmdldChjb29yZHNbMV0gLSAxKTtcbiAgICAgICAgICAgICAgICBpZiAocHJldmlvdXNCdWZmZXJMaW5lICYmIGJ1ZmZlckxpbmUuaXNXcmFwcGVkICYmIHByZXZpb3VzQnVmZmVyTGluZS5nZXQodGhpcy5fdGVybWluYWwuY29scyAtIDEpW0J1ZmZlcl8xLkNIQVJfREFUQV9DT0RFX0lOREVYXSAhPT0gMzIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByZXZpb3VzTGluZVdvcmRQb3NpdGlvbiA9IHRoaXMuX2dldFdvcmRBdChbdGhpcy5fdGVybWluYWwuY29scyAtIDEsIGNvb3Jkc1sxXSAtIDFdLCBmYWxzZSwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocHJldmlvdXNMaW5lV29yZFBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy5fdGVybWluYWwuY29scyAtIHByZXZpb3VzTGluZVdvcmRQb3NpdGlvbi5zdGFydDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0IC09IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aCArPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvbGxvd1dyYXBwZWRMaW5lc0JlbG93KSB7XG4gICAgICAgICAgICBpZiAoc3RhcnQgKyBsZW5ndGggPT09IHRoaXMuX3Rlcm1pbmFsLmNvbHMgJiYgYnVmZmVyTGluZS5nZXQodGhpcy5fdGVybWluYWwuY29scyAtIDEpW0J1ZmZlcl8xLkNIQVJfREFUQV9DT0RFX0lOREVYXSAhPT0gMzIpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV4dEJ1ZmZlckxpbmUgPSB0aGlzLl9idWZmZXIubGluZXMuZ2V0KGNvb3Jkc1sxXSArIDEpO1xuICAgICAgICAgICAgICAgIGlmIChuZXh0QnVmZmVyTGluZSAmJiBuZXh0QnVmZmVyTGluZS5pc1dyYXBwZWQgJiYgbmV4dEJ1ZmZlckxpbmUuZ2V0KDApW0J1ZmZlcl8xLkNIQVJfREFUQV9DT0RFX0lOREVYXSAhPT0gMzIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5leHRMaW5lV29yZFBvc2l0aW9uID0gdGhpcy5fZ2V0V29yZEF0KFswLCBjb29yZHNbMV0gKyAxXSwgZmFsc2UsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRMaW5lV29yZFBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZW5ndGggKz0gbmV4dExpbmVXb3JkUG9zaXRpb24ubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHN0YXJ0OiBzdGFydCwgbGVuZ3RoOiBsZW5ndGggfTtcbiAgICB9O1xuICAgIFNlbGVjdGlvbk1hbmFnZXIucHJvdG90eXBlLl9zZWxlY3RXb3JkQXQgPSBmdW5jdGlvbiAoY29vcmRzLCBhbGxvd1doaXRlc3BhY2VPbmx5U2VsZWN0aW9uKSB7XG4gICAgICAgIHZhciB3b3JkUG9zaXRpb24gPSB0aGlzLl9nZXRXb3JkQXQoY29vcmRzLCBhbGxvd1doaXRlc3BhY2VPbmx5U2VsZWN0aW9uKTtcbiAgICAgICAgaWYgKHdvcmRQb3NpdGlvbikge1xuICAgICAgICAgICAgd2hpbGUgKHdvcmRQb3NpdGlvbi5zdGFydCA8IDApIHtcbiAgICAgICAgICAgICAgICB3b3JkUG9zaXRpb24uc3RhcnQgKz0gdGhpcy5fdGVybWluYWwuY29scztcbiAgICAgICAgICAgICAgICBjb29yZHNbMV0tLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX21vZGVsLnNlbGVjdGlvblN0YXJ0ID0gW3dvcmRQb3NpdGlvbi5zdGFydCwgY29vcmRzWzFdXTtcbiAgICAgICAgICAgIHRoaXMuX21vZGVsLnNlbGVjdGlvblN0YXJ0TGVuZ3RoID0gd29yZFBvc2l0aW9uLmxlbmd0aDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2VsZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuX3NlbGVjdFRvV29yZEF0ID0gZnVuY3Rpb24gKGNvb3Jkcykge1xuICAgICAgICB2YXIgd29yZFBvc2l0aW9uID0gdGhpcy5fZ2V0V29yZEF0KGNvb3JkcywgdHJ1ZSk7XG4gICAgICAgIGlmICh3b3JkUG9zaXRpb24pIHtcbiAgICAgICAgICAgIHZhciBlbmRSb3cgPSBjb29yZHNbMV07XG4gICAgICAgICAgICB3aGlsZSAod29yZFBvc2l0aW9uLnN0YXJ0IDwgMCkge1xuICAgICAgICAgICAgICAgIHdvcmRQb3NpdGlvbi5zdGFydCArPSB0aGlzLl90ZXJtaW5hbC5jb2xzO1xuICAgICAgICAgICAgICAgIGVuZFJvdy0tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLl9tb2RlbC5hcmVTZWxlY3Rpb25WYWx1ZXNSZXZlcnNlZCgpKSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHdvcmRQb3NpdGlvbi5zdGFydCArIHdvcmRQb3NpdGlvbi5sZW5ndGggPiB0aGlzLl90ZXJtaW5hbC5jb2xzKSB7XG4gICAgICAgICAgICAgICAgICAgIHdvcmRQb3NpdGlvbi5sZW5ndGggLT0gdGhpcy5fdGVybWluYWwuY29scztcbiAgICAgICAgICAgICAgICAgICAgZW5kUm93Kys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fbW9kZWwuc2VsZWN0aW9uRW5kID0gW3RoaXMuX21vZGVsLmFyZVNlbGVjdGlvblZhbHVlc1JldmVyc2VkKCkgPyB3b3JkUG9zaXRpb24uc3RhcnQgOiB3b3JkUG9zaXRpb24uc3RhcnQgKyB3b3JkUG9zaXRpb24ubGVuZ3RoLCBlbmRSb3ddO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTZWxlY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5faXNDaGFyV29yZFNlcGFyYXRvciA9IGZ1bmN0aW9uIChjaGFyRGF0YSkge1xuICAgICAgICBpZiAoY2hhckRhdGFbQnVmZmVyXzEuQ0hBUl9EQVRBX1dJRFRIX0lOREVYXSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBXT1JEX1NFUEFSQVRPUlMuaW5kZXhPZihjaGFyRGF0YVtCdWZmZXJfMS5DSEFSX0RBVEFfQ0hBUl9JTkRFWF0pID49IDA7XG4gICAgfTtcbiAgICBTZWxlY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5fc2VsZWN0TGluZUF0ID0gZnVuY3Rpb24gKGxpbmUpIHtcbiAgICAgICAgdmFyIHdyYXBwZWRSYW5nZSA9IHRoaXMuX2J1ZmZlci5nZXRXcmFwcGVkUmFuZ2VGb3JMaW5lKGxpbmUpO1xuICAgICAgICB0aGlzLl9tb2RlbC5zZWxlY3Rpb25TdGFydCA9IFswLCB3cmFwcGVkUmFuZ2UuZmlyc3RdO1xuICAgICAgICB0aGlzLl9tb2RlbC5zZWxlY3Rpb25FbmQgPSBbdGhpcy5fdGVybWluYWwuY29scywgd3JhcHBlZFJhbmdlLmxhc3RdO1xuICAgICAgICB0aGlzLl9tb2RlbC5zZWxlY3Rpb25TdGFydExlbmd0aCA9IDA7XG4gICAgfTtcbiAgICByZXR1cm4gU2VsZWN0aW9uTWFuYWdlcjtcbn0oRXZlbnRFbWl0dGVyXzEuRXZlbnRFbWl0dGVyKSk7XG5leHBvcnRzLlNlbGVjdGlvbk1hbmFnZXIgPSBTZWxlY3Rpb25NYW5hZ2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2VsZWN0aW9uTWFuYWdlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBTZWxlY3Rpb25Nb2RlbCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2VsZWN0aW9uTW9kZWwoX3Rlcm1pbmFsKSB7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsID0gX3Rlcm1pbmFsO1xuICAgICAgICB0aGlzLmNsZWFyU2VsZWN0aW9uKCk7XG4gICAgfVxuICAgIFNlbGVjdGlvbk1vZGVsLnByb3RvdHlwZS5jbGVhclNlbGVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25TdGFydCA9IG51bGw7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uRW5kID0gbnVsbDtcbiAgICAgICAgdGhpcy5pc1NlbGVjdEFsbEFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLnNlbGVjdGlvblN0YXJ0TGVuZ3RoID0gMDtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTZWxlY3Rpb25Nb2RlbC5wcm90b3R5cGUsIFwiZmluYWxTZWxlY3Rpb25TdGFydFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNTZWxlY3RBbGxBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzAsIDBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLnNlbGVjdGlvbkVuZCB8fCAhdGhpcy5zZWxlY3Rpb25TdGFydCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGlvblN0YXJ0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXJlU2VsZWN0aW9uVmFsdWVzUmV2ZXJzZWQoKSA/IHRoaXMuc2VsZWN0aW9uRW5kIDogdGhpcy5zZWxlY3Rpb25TdGFydDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNlbGVjdGlvbk1vZGVsLnByb3RvdHlwZSwgXCJmaW5hbFNlbGVjdGlvbkVuZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNTZWxlY3RBbGxBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW3RoaXMuX3Rlcm1pbmFsLmNvbHMsIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55YmFzZSArIHRoaXMuX3Rlcm1pbmFsLnJvd3MgLSAxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5zZWxlY3Rpb25TdGFydCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLnNlbGVjdGlvbkVuZCB8fCB0aGlzLmFyZVNlbGVjdGlvblZhbHVlc1JldmVyc2VkKCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRQbHVzTGVuZ3RoID0gdGhpcy5zZWxlY3Rpb25TdGFydFswXSArIHRoaXMuc2VsZWN0aW9uU3RhcnRMZW5ndGg7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0UGx1c0xlbmd0aCA+IHRoaXMuX3Rlcm1pbmFsLmNvbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtzdGFydFBsdXNMZW5ndGggJSB0aGlzLl90ZXJtaW5hbC5jb2xzLCB0aGlzLnNlbGVjdGlvblN0YXJ0WzFdICsgTWF0aC5mbG9vcihzdGFydFBsdXNMZW5ndGggLyB0aGlzLl90ZXJtaW5hbC5jb2xzKV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBbc3RhcnRQbHVzTGVuZ3RoLCB0aGlzLnNlbGVjdGlvblN0YXJ0WzFdXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGlvblN0YXJ0TGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uRW5kWzFdID09PSB0aGlzLnNlbGVjdGlvblN0YXJ0WzFdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbTWF0aC5tYXgodGhpcy5zZWxlY3Rpb25TdGFydFswXSArIHRoaXMuc2VsZWN0aW9uU3RhcnRMZW5ndGgsIHRoaXMuc2VsZWN0aW9uRW5kWzBdKSwgdGhpcy5zZWxlY3Rpb25FbmRbMV1dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGlvbkVuZDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgU2VsZWN0aW9uTW9kZWwucHJvdG90eXBlLmFyZVNlbGVjdGlvblZhbHVlc1JldmVyc2VkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLnNlbGVjdGlvblN0YXJ0O1xuICAgICAgICB2YXIgZW5kID0gdGhpcy5zZWxlY3Rpb25FbmQ7XG4gICAgICAgIGlmICghc3RhcnQgfHwgIWVuZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGFydFsxXSA+IGVuZFsxXSB8fCAoc3RhcnRbMV0gPT09IGVuZFsxXSAmJiBzdGFydFswXSA+IGVuZFswXSk7XG4gICAgfTtcbiAgICBTZWxlY3Rpb25Nb2RlbC5wcm90b3R5cGUub25UcmltID0gZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb25TdGFydCkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25TdGFydFsxXSAtPSBhbW91bnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uRW5kKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGlvbkVuZFsxXSAtPSBhbW91bnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uRW5kICYmIHRoaXMuc2VsZWN0aW9uRW5kWzFdIDwgMCkge1xuICAgICAgICAgICAgdGhpcy5jbGVhclNlbGVjdGlvbigpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uU3RhcnQgJiYgdGhpcy5zZWxlY3Rpb25TdGFydFsxXSA8IDApIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uU3RhcnRbMV0gPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIHJldHVybiBTZWxlY3Rpb25Nb2RlbDtcbn0oKSk7XG5leHBvcnRzLlNlbGVjdGlvbk1vZGVsID0gU2VsZWN0aW9uTW9kZWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TZWxlY3Rpb25Nb2RlbC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBFc2NhcGVTZXF1ZW5jZXNfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vZGF0YS9Fc2NhcGVTZXF1ZW5jZXNcIik7XG52YXIgQWx0Q2xpY2tIYW5kbGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBbHRDbGlja0hhbmRsZXIoX21vdXNlRXZlbnQsIF90ZXJtaW5hbCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRoaXMuX21vdXNlRXZlbnQgPSBfbW91c2VFdmVudDtcbiAgICAgICAgdGhpcy5fdGVybWluYWwgPSBfdGVybWluYWw7XG4gICAgICAgIHRoaXMuX2xpbmVzID0gdGhpcy5fdGVybWluYWwuYnVmZmVyLmxpbmVzO1xuICAgICAgICB0aGlzLl9zdGFydENvbCA9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci54O1xuICAgICAgICB0aGlzLl9zdGFydFJvdyA9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55O1xuICAgICAgICB2YXIgY29vcmRpbmF0ZXMgPSB0aGlzLl90ZXJtaW5hbC5tb3VzZUhlbHBlci5nZXRDb29yZHModGhpcy5fbW91c2VFdmVudCwgdGhpcy5fdGVybWluYWwuZWxlbWVudCwgdGhpcy5fdGVybWluYWwuY2hhck1lYXN1cmUsIHRoaXMuX3Rlcm1pbmFsLmNvbHMsIHRoaXMuX3Rlcm1pbmFsLnJvd3MsIGZhbHNlKTtcbiAgICAgICAgaWYgKGNvb3JkaW5hdGVzKSB7XG4gICAgICAgICAgICBfYSA9IGNvb3JkaW5hdGVzLm1hcChmdW5jdGlvbiAoY29vcmRpbmF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb29yZGluYXRlIC0gMTtcbiAgICAgICAgICAgIH0pLCB0aGlzLl9lbmRDb2wgPSBfYVswXSwgdGhpcy5fZW5kUm93ID0gX2FbMV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgQWx0Q2xpY2tIYW5kbGVyLnByb3RvdHlwZS5tb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fbW91c2VFdmVudC5hbHRLZXkgJiYgdGhpcy5fZW5kQ29sICE9PSB1bmRlZmluZWQgJiYgdGhpcy5fZW5kUm93ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmhhbmRsZXIodGhpcy5fYXJyb3dTZXF1ZW5jZXMoKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFsdENsaWNrSGFuZGxlci5wcm90b3R5cGUuX2Fycm93U2VxdWVuY2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci5oYXNTY3JvbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVzZXRTdGFydGluZ1JvdygpICsgdGhpcy5fbW92ZVRvUmVxdWVzdGVkUm93KCkgKyB0aGlzLl9tb3ZlVG9SZXF1ZXN0ZWRDb2woKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fbW92ZUhvcml6b250YWxseU9ubHkoKTtcbiAgICB9O1xuICAgIEFsdENsaWNrSGFuZGxlci5wcm90b3R5cGUuX3Jlc2V0U3RhcnRpbmdSb3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9tb3ZlVG9SZXF1ZXN0ZWRSb3coKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVwZWF0KHRoaXMuX2J1ZmZlckxpbmUodGhpcy5fc3RhcnRDb2wsIHRoaXMuX3N0YXJ0Um93LCB0aGlzLl9zdGFydENvbCwgdGhpcy5fc3RhcnRSb3cgLSB0aGlzLl93cmFwcGVkUm93c0ZvclJvdyh0aGlzLl9zdGFydFJvdyksIGZhbHNlKS5sZW5ndGgsIHRoaXMuX3NlcXVlbmNlKFwiRFwiKSk7XG4gICAgfTtcbiAgICBBbHRDbGlja0hhbmRsZXIucHJvdG90eXBlLl9tb3ZlVG9SZXF1ZXN0ZWRSb3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzdGFydFJvdyA9IHRoaXMuX3N0YXJ0Um93IC0gdGhpcy5fd3JhcHBlZFJvd3NGb3JSb3codGhpcy5fc3RhcnRSb3cpO1xuICAgICAgICB2YXIgZW5kUm93ID0gdGhpcy5fZW5kUm93IC0gdGhpcy5fd3JhcHBlZFJvd3NGb3JSb3codGhpcy5fZW5kUm93KTtcbiAgICAgICAgdmFyIHJvd3NUb01vdmUgPSBNYXRoLmFicyhzdGFydFJvdyAtIGVuZFJvdykgLSB0aGlzLl93cmFwcGVkUm93c0NvdW50KCk7XG4gICAgICAgIHJldHVybiByZXBlYXQocm93c1RvTW92ZSwgdGhpcy5fc2VxdWVuY2UodGhpcy5fdmVydGljYWxEaXJlY3Rpb24oKSkpO1xuICAgIH07XG4gICAgQWx0Q2xpY2tIYW5kbGVyLnByb3RvdHlwZS5fbW92ZVRvUmVxdWVzdGVkQ29sID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3RhcnRSb3c7XG4gICAgICAgIGlmICh0aGlzLl9tb3ZlVG9SZXF1ZXN0ZWRSb3coKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBzdGFydFJvdyA9IHRoaXMuX2VuZFJvdyAtIHRoaXMuX3dyYXBwZWRSb3dzRm9yUm93KHRoaXMuX2VuZFJvdyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdGFydFJvdyA9IHRoaXMuX3N0YXJ0Um93O1xuICAgICAgICB9XG4gICAgICAgIHZhciBlbmRSb3cgPSB0aGlzLl9lbmRSb3c7XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSB0aGlzLl9ob3Jpem9udGFsRGlyZWN0aW9uKCk7XG4gICAgICAgIHJldHVybiByZXBlYXQodGhpcy5fYnVmZmVyTGluZSh0aGlzLl9zdGFydENvbCwgc3RhcnRSb3csIHRoaXMuX2VuZENvbCwgZW5kUm93LCBkaXJlY3Rpb24gPT09IFwiQ1wiKS5sZW5ndGgsIHRoaXMuX3NlcXVlbmNlKGRpcmVjdGlvbikpO1xuICAgIH07XG4gICAgQWx0Q2xpY2tIYW5kbGVyLnByb3RvdHlwZS5fbW92ZUhvcml6b250YWxseU9ubHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSB0aGlzLl9ob3Jpem9udGFsRGlyZWN0aW9uKCk7XG4gICAgICAgIHJldHVybiByZXBlYXQoTWF0aC5hYnModGhpcy5fc3RhcnRDb2wgLSB0aGlzLl9lbmRDb2wpLCB0aGlzLl9zZXF1ZW5jZShkaXJlY3Rpb24pKTtcbiAgICB9O1xuICAgIEFsdENsaWNrSGFuZGxlci5wcm90b3R5cGUuX3dyYXBwZWRSb3dzQ291bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVkUm93cyA9IDA7XG4gICAgICAgIHZhciBzdGFydFJvdyA9IHRoaXMuX3N0YXJ0Um93IC0gdGhpcy5fd3JhcHBlZFJvd3NGb3JSb3codGhpcy5fc3RhcnRSb3cpO1xuICAgICAgICB2YXIgZW5kUm93ID0gdGhpcy5fZW5kUm93IC0gdGhpcy5fd3JhcHBlZFJvd3NGb3JSb3codGhpcy5fZW5kUm93KTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBNYXRoLmFicyhzdGFydFJvdyAtIGVuZFJvdyk7IGkrKykge1xuICAgICAgICAgICAgdmFyIGRpcmVjdGlvbiA9IHRoaXMuX3ZlcnRpY2FsRGlyZWN0aW9uKCkgPT09IFwiQVwiID8gLTEgOiAxO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2xpbmVzLmdldChzdGFydFJvdyArIChkaXJlY3Rpb24gKiBpKSkuaXNXcmFwcGVkKSB7XG4gICAgICAgICAgICAgICAgd3JhcHBlZFJvd3MrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JhcHBlZFJvd3M7XG4gICAgfTtcbiAgICBBbHRDbGlja0hhbmRsZXIucHJvdG90eXBlLl93cmFwcGVkUm93c0ZvclJvdyA9IGZ1bmN0aW9uIChjdXJyZW50Um93KSB7XG4gICAgICAgIHZhciByb3dDb3VudCA9IDA7XG4gICAgICAgIHZhciBsaW5lV3JhcHMgPSB0aGlzLl9saW5lcy5nZXQoY3VycmVudFJvdykuaXNXcmFwcGVkO1xuICAgICAgICB3aGlsZSAobGluZVdyYXBzICYmIGN1cnJlbnRSb3cgPj0gMCAmJiBjdXJyZW50Um93IDwgdGhpcy5fdGVybWluYWwucm93cykge1xuICAgICAgICAgICAgcm93Q291bnQrKztcbiAgICAgICAgICAgIGN1cnJlbnRSb3ctLTtcbiAgICAgICAgICAgIGxpbmVXcmFwcyA9IHRoaXMuX2xpbmVzLmdldChjdXJyZW50Um93KS5pc1dyYXBwZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJvd0NvdW50O1xuICAgIH07XG4gICAgQWx0Q2xpY2tIYW5kbGVyLnByb3RvdHlwZS5faG9yaXpvbnRhbERpcmVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN0YXJ0Um93O1xuICAgICAgICBpZiAodGhpcy5fbW92ZVRvUmVxdWVzdGVkUm93KCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc3RhcnRSb3cgPSB0aGlzLl9lbmRSb3cgLSB0aGlzLl93cmFwcGVkUm93c0ZvclJvdyh0aGlzLl9lbmRSb3cpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3RhcnRSb3cgPSB0aGlzLl9zdGFydFJvdztcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHRoaXMuX3N0YXJ0Q29sIDwgdGhpcy5fZW5kQ29sICYmXG4gICAgICAgICAgICBzdGFydFJvdyA8PSB0aGlzLl9lbmRSb3cpIHx8XG4gICAgICAgICAgICAodGhpcy5fc3RhcnRDb2wgPj0gdGhpcy5fZW5kQ29sICYmXG4gICAgICAgICAgICAgICAgc3RhcnRSb3cgPCB0aGlzLl9lbmRSb3cpKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJDXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFwiRFwiO1xuICAgIH07XG4gICAgQWx0Q2xpY2tIYW5kbGVyLnByb3RvdHlwZS5fdmVydGljYWxEaXJlY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9zdGFydFJvdyA+IHRoaXMuX2VuZFJvdykge1xuICAgICAgICAgICAgcmV0dXJuIFwiQVwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIkJcIjtcbiAgICB9O1xuICAgIEFsdENsaWNrSGFuZGxlci5wcm90b3R5cGUuX2J1ZmZlckxpbmUgPSBmdW5jdGlvbiAoc3RhcnRDb2wsIHN0YXJ0Um93LCBlbmRDb2wsIGVuZFJvdywgZm9yd2FyZCkge1xuICAgICAgICB2YXIgY3VycmVudENvbCA9IHN0YXJ0Q29sO1xuICAgICAgICB2YXIgY3VycmVudFJvdyA9IHN0YXJ0Um93O1xuICAgICAgICB2YXIgYnVmZmVyU3RyID0gJyc7XG4gICAgICAgIHdoaWxlIChjdXJyZW50Q29sICE9PSBlbmRDb2wgfHwgY3VycmVudFJvdyAhPT0gZW5kUm93KSB7XG4gICAgICAgICAgICBjdXJyZW50Q29sICs9IGZvcndhcmQgPyAxIDogLTE7XG4gICAgICAgICAgICBpZiAoZm9yd2FyZCAmJiBjdXJyZW50Q29sID4gdGhpcy5fdGVybWluYWwuY29scyAtIDEpIHtcbiAgICAgICAgICAgICAgICBidWZmZXJTdHIgKz0gdGhpcy5fdGVybWluYWwuYnVmZmVyLnRyYW5zbGF0ZUJ1ZmZlckxpbmVUb1N0cmluZyhjdXJyZW50Um93LCBmYWxzZSwgc3RhcnRDb2wsIGN1cnJlbnRDb2wpO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRDb2wgPSAwO1xuICAgICAgICAgICAgICAgIHN0YXJ0Q29sID0gMDtcbiAgICAgICAgICAgICAgICBjdXJyZW50Um93Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghZm9yd2FyZCAmJiBjdXJyZW50Q29sIDwgMCkge1xuICAgICAgICAgICAgICAgIGJ1ZmZlclN0ciArPSB0aGlzLl90ZXJtaW5hbC5idWZmZXIudHJhbnNsYXRlQnVmZmVyTGluZVRvU3RyaW5nKGN1cnJlbnRSb3csIGZhbHNlLCAwLCBzdGFydENvbCArIDEpO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRDb2wgPSB0aGlzLl90ZXJtaW5hbC5jb2xzIC0gMTtcbiAgICAgICAgICAgICAgICBzdGFydENvbCA9IGN1cnJlbnRDb2w7XG4gICAgICAgICAgICAgICAgY3VycmVudFJvdy0tO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBidWZmZXJTdHIgKyB0aGlzLl90ZXJtaW5hbC5idWZmZXIudHJhbnNsYXRlQnVmZmVyTGluZVRvU3RyaW5nKGN1cnJlbnRSb3csIGZhbHNlLCBzdGFydENvbCwgY3VycmVudENvbCk7XG4gICAgfTtcbiAgICBBbHRDbGlja0hhbmRsZXIucHJvdG90eXBlLl9zZXF1ZW5jZSA9IGZ1bmN0aW9uIChkaXJlY3Rpb24pIHtcbiAgICAgICAgdmFyIG1vZCA9IHRoaXMuX3Rlcm1pbmFsLmFwcGxpY2F0aW9uQ3Vyc29yID8gJ08nIDogJ1snO1xuICAgICAgICByZXR1cm4gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgbW9kICsgZGlyZWN0aW9uO1xuICAgIH07XG4gICAgcmV0dXJuIEFsdENsaWNrSGFuZGxlcjtcbn0oKSk7XG5leHBvcnRzLkFsdENsaWNrSGFuZGxlciA9IEFsdENsaWNrSGFuZGxlcjtcbmZ1bmN0aW9uIHJlcGVhdChjb3VudCwgc3RyKSB7XG4gICAgY291bnQgPSBNYXRoLmZsb29yKGNvdW50KTtcbiAgICB2YXIgcnB0ID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgIHJwdCArPSBzdHI7XG4gICAgfVxuICAgIHJldHVybiBycHQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BbHRDbGlja0hhbmRsZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEV2ZW50RW1pdHRlcl8xID0gcmVxdWlyZShcIi4uL2NvbW1vbi9FdmVudEVtaXR0ZXJcIik7XG52YXIgQ2hhck1lYXN1cmUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhDaGFyTWVhc3VyZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDaGFyTWVhc3VyZShkb2N1bWVudCwgcGFyZW50RWxlbWVudCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fZG9jdW1lbnQgPSBkb2N1bWVudDtcbiAgICAgICAgX3RoaXMuX3BhcmVudEVsZW1lbnQgPSBwYXJlbnRFbGVtZW50O1xuICAgICAgICBfdGhpcy5fbWVhc3VyZUVsZW1lbnQgPSBfdGhpcy5fZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICBfdGhpcy5fbWVhc3VyZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCgneHRlcm0tY2hhci1tZWFzdXJlLWVsZW1lbnQnKTtcbiAgICAgICAgX3RoaXMuX21lYXN1cmVFbGVtZW50LnRleHRDb250ZW50ID0gJ1cnO1xuICAgICAgICBfdGhpcy5fbWVhc3VyZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgICAgIF90aGlzLl9wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKF90aGlzLl9tZWFzdXJlRWxlbWVudCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENoYXJNZWFzdXJlLnByb3RvdHlwZSwgXCJ3aWR0aFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dpZHRoO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ2hhck1lYXN1cmUucHJvdG90eXBlLCBcImhlaWdodFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hlaWdodDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgQ2hhck1lYXN1cmUucHJvdG90eXBlLm1lYXN1cmUgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICB0aGlzLl9tZWFzdXJlRWxlbWVudC5zdHlsZS5mb250RmFtaWx5ID0gb3B0aW9ucy5mb250RmFtaWx5O1xuICAgICAgICB0aGlzLl9tZWFzdXJlRWxlbWVudC5zdHlsZS5mb250U2l6ZSA9IG9wdGlvbnMuZm9udFNpemUgKyBcInB4XCI7XG4gICAgICAgIHZhciBnZW9tZXRyeSA9IHRoaXMuX21lYXN1cmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBpZiAoZ2VvbWV0cnkud2lkdGggPT09IDAgfHwgZ2VvbWV0cnkuaGVpZ2h0ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3dpZHRoICE9PSBnZW9tZXRyeS53aWR0aCB8fCB0aGlzLl9oZWlnaHQgIT09IGdlb21ldHJ5LmhlaWdodCkge1xuICAgICAgICAgICAgdGhpcy5fd2lkdGggPSBnZW9tZXRyeS53aWR0aDtcbiAgICAgICAgICAgIHRoaXMuX2hlaWdodCA9IE1hdGguY2VpbChnZW9tZXRyeS5oZWlnaHQpO1xuICAgICAgICAgICAgdGhpcy5lbWl0KCdjaGFyc2l6ZWNoYW5nZWQnKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIENoYXJNZWFzdXJlO1xufShFdmVudEVtaXR0ZXJfMS5FdmVudEVtaXR0ZXIpKTtcbmV4cG9ydHMuQ2hhck1lYXN1cmUgPSBDaGFyTWVhc3VyZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNoYXJNZWFzdXJlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jbG9uZSA9IGZ1bmN0aW9uICh2YWwsIGRlcHRoKSB7XG4gICAgaWYgKGRlcHRoID09PSB2b2lkIDApIHsgZGVwdGggPSA1OyB9XG4gICAgaWYgKHR5cGVvZiB2YWwgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICAgIGlmICh2YWwgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBjbG9uZWRPYmplY3QgPSBBcnJheS5pc0FycmF5KHZhbCkgPyBbXSA6IHt9O1xuICAgIGZvciAodmFyIGtleSBpbiB2YWwpIHtcbiAgICAgICAgY2xvbmVkT2JqZWN0W2tleV0gPSBkZXB0aCA8PSAxID8gdmFsW2tleV0gOiBleHBvcnRzLmNsb25lKHZhbFtrZXldLCBkZXB0aCAtIDEpO1xuICAgIH1cbiAgICByZXR1cm4gY2xvbmVkT2JqZWN0O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNsb25lLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ERUZBVUxUX0JFTExfU09VTkQgPSAnZGF0YTphdWRpby93YXY7YmFzZTY0LFVrbEdSaWdCQUFCWFFWWkZabTEwSUJBQUFBQUJBQUVBUkt3QUFJaFlBUUFDQUJBQVpHRjBZUVFCQUFEcEFGZ0N3QU1sQlpvRy93ZG1DY29LUkF5cERROFBiUkRCRVFRVE94UnRGWWNXbEJlUEdJVVpYaG9pRzg4YmNCejdISElkemgwV0hsTWVaeDUxSG1rZVV4NFdIczhkYWgwQUhYd2MzaHM5RzRzYXhSbnlHQklZR0JjUUZ2OFU0UlBBRW9ZUlFCQUNENzBOV3d3SEM2Z0pPd2pXQmxvRjdnT0JBaEFCa2Y4Yi9xdjhSL3ZlK1hmNElmZTc5Vy8wSmZQWjhaL3dkZTlON2lqdEUrd1U2eHZxTStsYjZIN253K1lYNW1ybHh1UXo1TXpqZStNYTQ5ZmlvZUtENG5YaVllSnk0cEhpdE9MMDRqL2puK01ONUlQa0ZPV3M1VTNtRGVmTTU1L29nT2wzNm03cmRPeUU3YWJ1eXU4RDhVbnlqL1BnOUQvMnFmY2IrWW42L3Z1Sy9Rai9sQUFsQWc9PSc7XG52YXIgU291bmRNYW5hZ2VyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTb3VuZE1hbmFnZXIoX3Rlcm1pbmFsKSB7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsID0gX3Rlcm1pbmFsO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU291bmRNYW5hZ2VyLCBcImF1ZGlvQ29udGV4dFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFTb3VuZE1hbmFnZXIuX2F1ZGlvQ29udGV4dCkge1xuICAgICAgICAgICAgICAgIHZhciBhdWRpb0NvbnRleHRDdG9yID0gd2luZG93LkF1ZGlvQ29udGV4dCB8fCB3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0O1xuICAgICAgICAgICAgICAgIGlmICghYXVkaW9Db250ZXh0Q3Rvcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1dlYiBBdWRpbyBBUEkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIGJyb3dzZXIuIENvbnNpZGVyIHVwZ3JhZGluZyB0byB0aGUgbGF0ZXN0IHZlcnNpb24nKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFNvdW5kTWFuYWdlci5fYXVkaW9Db250ZXh0ID0gbmV3IGF1ZGlvQ29udGV4dEN0b3IoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBTb3VuZE1hbmFnZXIuX2F1ZGlvQ29udGV4dDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgU291bmRNYW5hZ2VyLnByb3RvdHlwZS5wbGF5QmVsbFNvdW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY3R4ID0gU291bmRNYW5hZ2VyLmF1ZGlvQ29udGV4dDtcbiAgICAgICAgaWYgKCFjdHgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYmVsbEF1ZGlvU291cmNlID0gY3R4LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xuICAgICAgICBjdHguZGVjb2RlQXVkaW9EYXRhKHRoaXMuX2Jhc2U2NFRvQXJyYXlCdWZmZXIodGhpcy5fcmVtb3ZlTWltZVR5cGUodGhpcy5fdGVybWluYWwub3B0aW9ucy5iZWxsU291bmQpKSwgZnVuY3Rpb24gKGJ1ZmZlcikge1xuICAgICAgICAgICAgYmVsbEF1ZGlvU291cmNlLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICAgICAgICAgIGJlbGxBdWRpb1NvdXJjZS5jb25uZWN0KGN0eC5kZXN0aW5hdGlvbik7XG4gICAgICAgICAgICBiZWxsQXVkaW9Tb3VyY2Uuc3RhcnQoMCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgU291bmRNYW5hZ2VyLnByb3RvdHlwZS5fYmFzZTY0VG9BcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIChiYXNlNjQpIHtcbiAgICAgICAgdmFyIGJpbmFyeVN0cmluZyA9IHdpbmRvdy5hdG9iKGJhc2U2NCk7XG4gICAgICAgIHZhciBsZW4gPSBiaW5hcnlTdHJpbmcubGVuZ3RoO1xuICAgICAgICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheShsZW4pO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBieXRlc1tpXSA9IGJpbmFyeVN0cmluZy5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBieXRlcy5idWZmZXI7XG4gICAgfTtcbiAgICBTb3VuZE1hbmFnZXIucHJvdG90eXBlLl9yZW1vdmVNaW1lVHlwZSA9IGZ1bmN0aW9uIChkYXRhVVJJKSB7XG4gICAgICAgIHZhciBzcGxpdFVyaSA9IGRhdGFVUkkuc3BsaXQoJywnKTtcbiAgICAgICAgcmV0dXJuIHNwbGl0VXJpWzFdO1xuICAgIH07XG4gICAgcmV0dXJuIFNvdW5kTWFuYWdlcjtcbn0oKSk7XG5leHBvcnRzLlNvdW5kTWFuYWdlciA9IFNvdW5kTWFuYWdlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNvdW5kTWFuYWdlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgU3RyaW5ncyA9IHJlcXVpcmUoXCIuL1N0cmluZ3NcIik7XG52YXIgUGxhdGZvcm1fMSA9IHJlcXVpcmUoXCIuL2NvcmUvUGxhdGZvcm1cIik7XG52YXIgUmVuZGVyRGVib3VuY2VyXzEgPSByZXF1aXJlKFwiLi91aS9SZW5kZXJEZWJvdW5jZXJcIik7XG52YXIgTGlmZWN5Y2xlXzEgPSByZXF1aXJlKFwiLi91aS9MaWZlY3ljbGVcIik7XG52YXIgTGlmZWN5Y2xlXzIgPSByZXF1aXJlKFwiLi9jb21tb24vTGlmZWN5Y2xlXCIpO1xudmFyIE1BWF9ST1dTX1RPX1JFQUQgPSAyMDtcbnZhciBBY2Nlc3NpYmlsaXR5TWFuYWdlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFjY2Vzc2liaWxpdHlNYW5hZ2VyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFjY2Vzc2liaWxpdHlNYW5hZ2VyKF90ZXJtaW5hbCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fdGVybWluYWwgPSBfdGVybWluYWw7XG4gICAgICAgIF90aGlzLl9saXZlUmVnaW9uTGluZUNvdW50ID0gMDtcbiAgICAgICAgX3RoaXMuX2NoYXJzVG9Db25zdW1lID0gW107XG4gICAgICAgIF90aGlzLl9hY2Nlc3NpYmlsaXR5VHJlZVJvb3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgX3RoaXMuX2FjY2Vzc2liaWxpdHlUcmVlUm9vdC5jbGFzc0xpc3QuYWRkKCd4dGVybS1hY2Nlc3NpYmlsaXR5Jyk7XG4gICAgICAgIF90aGlzLl9yb3dDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgX3RoaXMuX3Jvd0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCd4dGVybS1hY2Nlc3NpYmlsaXR5LXRyZWUnKTtcbiAgICAgICAgX3RoaXMuX3Jvd0VsZW1lbnRzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX3RoaXMuX3Rlcm1pbmFsLnJvd3M7IGkrKykge1xuICAgICAgICAgICAgX3RoaXMuX3Jvd0VsZW1lbnRzW2ldID0gX3RoaXMuX2NyZWF0ZUFjY2Vzc2liaWxpdHlUcmVlTm9kZSgpO1xuICAgICAgICAgICAgX3RoaXMuX3Jvd0NvbnRhaW5lci5hcHBlbmRDaGlsZChfdGhpcy5fcm93RWxlbWVudHNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLl90b3BCb3VuZGFyeUZvY3VzTGlzdGVuZXIgPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gX3RoaXMuX29uQm91bmRhcnlGb2N1cyhlLCAwKTsgfTtcbiAgICAgICAgX3RoaXMuX2JvdHRvbUJvdW5kYXJ5Rm9jdXNMaXN0ZW5lciA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiBfdGhpcy5fb25Cb3VuZGFyeUZvY3VzKGUsIDEpOyB9O1xuICAgICAgICBfdGhpcy5fcm93RWxlbWVudHNbMF0uYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBfdGhpcy5fdG9wQm91bmRhcnlGb2N1c0xpc3RlbmVyKTtcbiAgICAgICAgX3RoaXMuX3Jvd0VsZW1lbnRzW190aGlzLl9yb3dFbGVtZW50cy5sZW5ndGggLSAxXS5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIF90aGlzLl9ib3R0b21Cb3VuZGFyeUZvY3VzTGlzdGVuZXIpO1xuICAgICAgICBfdGhpcy5fcmVmcmVzaFJvd3NEaW1lbnNpb25zKCk7XG4gICAgICAgIF90aGlzLl9hY2Nlc3NpYmlsaXR5VHJlZVJvb3QuYXBwZW5kQ2hpbGQoX3RoaXMuX3Jvd0NvbnRhaW5lcik7XG4gICAgICAgIF90aGlzLl9yZW5kZXJSb3dzRGVib3VuY2VyID0gbmV3IFJlbmRlckRlYm91bmNlcl8xLlJlbmRlckRlYm91bmNlcihfdGhpcy5fdGVybWluYWwsIF90aGlzLl9yZW5kZXJSb3dzLmJpbmQoX3RoaXMpKTtcbiAgICAgICAgX3RoaXMuX3JlZnJlc2hSb3dzKCk7XG4gICAgICAgIF90aGlzLl9saXZlUmVnaW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIF90aGlzLl9saXZlUmVnaW9uLmNsYXNzTGlzdC5hZGQoJ2xpdmUtcmVnaW9uJyk7XG4gICAgICAgIF90aGlzLl9saXZlUmVnaW9uLnNldEF0dHJpYnV0ZSgnYXJpYS1saXZlJywgJ2Fzc2VydGl2ZScpO1xuICAgICAgICBfdGhpcy5fYWNjZXNzaWJpbGl0eVRyZWVSb290LmFwcGVuZENoaWxkKF90aGlzLl9saXZlUmVnaW9uKTtcbiAgICAgICAgX3RoaXMuX3Rlcm1pbmFsLmVsZW1lbnQuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdhZnRlcmJlZ2luJywgX3RoaXMuX2FjY2Vzc2liaWxpdHlUcmVlUm9vdCk7XG4gICAgICAgIF90aGlzLnJlZ2lzdGVyKF90aGlzLl9yZW5kZXJSb3dzRGVib3VuY2VyKTtcbiAgICAgICAgX3RoaXMucmVnaXN0ZXIoX3RoaXMuX3Rlcm1pbmFsLmFkZERpc3Bvc2FibGVMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIF90aGlzLl9vblJlc2l6ZShkYXRhLnJvd3MpOyB9KSk7XG4gICAgICAgIF90aGlzLnJlZ2lzdGVyKF90aGlzLl90ZXJtaW5hbC5hZGREaXNwb3NhYmxlTGlzdGVuZXIoJ3JlZnJlc2gnLCBmdW5jdGlvbiAoZGF0YSkgeyByZXR1cm4gX3RoaXMuX3JlZnJlc2hSb3dzKGRhdGEuc3RhcnQsIGRhdGEuZW5kKTsgfSkpO1xuICAgICAgICBfdGhpcy5yZWdpc3RlcihfdGhpcy5fdGVybWluYWwuYWRkRGlzcG9zYWJsZUxpc3RlbmVyKCdzY3JvbGwnLCBmdW5jdGlvbiAoZGF0YSkgeyByZXR1cm4gX3RoaXMuX3JlZnJlc2hSb3dzKCk7IH0pKTtcbiAgICAgICAgX3RoaXMucmVnaXN0ZXIoX3RoaXMuX3Rlcm1pbmFsLmFkZERpc3Bvc2FibGVMaXN0ZW5lcignYTExeS5jaGFyJywgZnVuY3Rpb24gKGNoYXIpIHsgcmV0dXJuIF90aGlzLl9vbkNoYXIoY2hhcik7IH0pKTtcbiAgICAgICAgX3RoaXMucmVnaXN0ZXIoX3RoaXMuX3Rlcm1pbmFsLmFkZERpc3Bvc2FibGVMaXN0ZW5lcignbGluZWZlZWQnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fb25DaGFyKCdcXG4nKTsgfSkpO1xuICAgICAgICBfdGhpcy5yZWdpc3RlcihfdGhpcy5fdGVybWluYWwuYWRkRGlzcG9zYWJsZUxpc3RlbmVyKCdhMTF5LnRhYicsIGZ1bmN0aW9uIChzcGFjZUNvdW50KSB7IHJldHVybiBfdGhpcy5fb25UYWIoc3BhY2VDb3VudCk7IH0pKTtcbiAgICAgICAgX3RoaXMucmVnaXN0ZXIoX3RoaXMuX3Rlcm1pbmFsLmFkZERpc3Bvc2FibGVMaXN0ZW5lcigna2V5JywgZnVuY3Rpb24gKGtleUNoYXIpIHsgcmV0dXJuIF90aGlzLl9vbktleShrZXlDaGFyKTsgfSkpO1xuICAgICAgICBfdGhpcy5yZWdpc3RlcihfdGhpcy5fdGVybWluYWwuYWRkRGlzcG9zYWJsZUxpc3RlbmVyKCdibHVyJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX2NsZWFyTGl2ZVJlZ2lvbigpOyB9KSk7XG4gICAgICAgIF90aGlzLnJlZ2lzdGVyKF90aGlzLl90ZXJtaW5hbC5hZGREaXNwb3NhYmxlTGlzdGVuZXIoJ2RwcmNoYW5nZScsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLl9yZWZyZXNoUm93c0RpbWVuc2lvbnMoKTsgfSkpO1xuICAgICAgICBfdGhpcy5yZWdpc3RlcihfdGhpcy5fdGVybWluYWwucmVuZGVyZXIuYWRkRGlzcG9zYWJsZUxpc3RlbmVyKCdyZXNpemUnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fcmVmcmVzaFJvd3NEaW1lbnNpb25zKCk7IH0pKTtcbiAgICAgICAgX3RoaXMucmVnaXN0ZXIoTGlmZWN5Y2xlXzEuYWRkRGlzcG9zYWJsZURvbUxpc3RlbmVyKHdpbmRvdywgJ3Jlc2l6ZScsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLl9yZWZyZXNoUm93c0RpbWVuc2lvbnMoKTsgfSkpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEFjY2Vzc2liaWxpdHlNYW5hZ2VyLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5fdGVybWluYWwuZWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLl9hY2Nlc3NpYmlsaXR5VHJlZVJvb3QpO1xuICAgICAgICB0aGlzLl9yb3dFbGVtZW50cy5sZW5ndGggPSAwO1xuICAgIH07XG4gICAgQWNjZXNzaWJpbGl0eU1hbmFnZXIucHJvdG90eXBlLl9vbkJvdW5kYXJ5Rm9jdXMgPSBmdW5jdGlvbiAoZSwgcG9zaXRpb24pIHtcbiAgICAgICAgdmFyIGJvdW5kYXJ5RWxlbWVudCA9IGUudGFyZ2V0O1xuICAgICAgICB2YXIgYmVmb3JlQm91bmRhcnlFbGVtZW50ID0gdGhpcy5fcm93RWxlbWVudHNbcG9zaXRpb24gPT09IDAgPyAxIDogdGhpcy5fcm93RWxlbWVudHMubGVuZ3RoIC0gMl07XG4gICAgICAgIHZhciBwb3NJblNldCA9IGJvdW5kYXJ5RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FyaWEtcG9zaW5zZXQnKTtcbiAgICAgICAgdmFyIGxhc3RSb3dQb3MgPSBwb3NpdGlvbiA9PT0gMCA/ICcxJyA6IFwiXCIgKyB0aGlzLl90ZXJtaW5hbC5idWZmZXIubGluZXMubGVuZ3RoO1xuICAgICAgICBpZiAocG9zSW5TZXQgPT09IGxhc3RSb3dQb3MpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZS5yZWxhdGVkVGFyZ2V0ICE9PSBiZWZvcmVCb3VuZGFyeUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdG9wQm91bmRhcnlFbGVtZW50O1xuICAgICAgICB2YXIgYm90dG9tQm91bmRhcnlFbGVtZW50O1xuICAgICAgICBpZiAocG9zaXRpb24gPT09IDApIHtcbiAgICAgICAgICAgIHRvcEJvdW5kYXJ5RWxlbWVudCA9IGJvdW5kYXJ5RWxlbWVudDtcbiAgICAgICAgICAgIGJvdHRvbUJvdW5kYXJ5RWxlbWVudCA9IHRoaXMuX3Jvd0VsZW1lbnRzLnBvcCgpO1xuICAgICAgICAgICAgdGhpcy5fcm93Q29udGFpbmVyLnJlbW92ZUNoaWxkKGJvdHRvbUJvdW5kYXJ5RWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0b3BCb3VuZGFyeUVsZW1lbnQgPSB0aGlzLl9yb3dFbGVtZW50cy5zaGlmdCgpO1xuICAgICAgICAgICAgYm90dG9tQm91bmRhcnlFbGVtZW50ID0gYm91bmRhcnlFbGVtZW50O1xuICAgICAgICAgICAgdGhpcy5fcm93Q29udGFpbmVyLnJlbW92ZUNoaWxkKHRvcEJvdW5kYXJ5RWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgdG9wQm91bmRhcnlFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgdGhpcy5fdG9wQm91bmRhcnlGb2N1c0xpc3RlbmVyKTtcbiAgICAgICAgYm90dG9tQm91bmRhcnlFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgdGhpcy5fYm90dG9tQm91bmRhcnlGb2N1c0xpc3RlbmVyKTtcbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKSB7XG4gICAgICAgICAgICB2YXIgbmV3RWxlbWVudCA9IHRoaXMuX2NyZWF0ZUFjY2Vzc2liaWxpdHlUcmVlTm9kZSgpO1xuICAgICAgICAgICAgdGhpcy5fcm93RWxlbWVudHMudW5zaGlmdChuZXdFbGVtZW50KTtcbiAgICAgICAgICAgIHRoaXMuX3Jvd0NvbnRhaW5lci5pbnNlcnRBZGphY2VudEVsZW1lbnQoJ2FmdGVyYmVnaW4nLCBuZXdFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBuZXdFbGVtZW50ID0gdGhpcy5fY3JlYXRlQWNjZXNzaWJpbGl0eVRyZWVOb2RlKCk7XG4gICAgICAgICAgICB0aGlzLl9yb3dFbGVtZW50cy5wdXNoKG5ld0VsZW1lbnQpO1xuICAgICAgICAgICAgdGhpcy5fcm93Q29udGFpbmVyLmFwcGVuZENoaWxkKG5ld0VsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Jvd0VsZW1lbnRzWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgdGhpcy5fdG9wQm91bmRhcnlGb2N1c0xpc3RlbmVyKTtcbiAgICAgICAgdGhpcy5fcm93RWxlbWVudHNbdGhpcy5fcm93RWxlbWVudHMubGVuZ3RoIC0gMV0uYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzLl9ib3R0b21Cb3VuZGFyeUZvY3VzTGlzdGVuZXIpO1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5zY3JvbGxMaW5lcyhwb3NpdGlvbiA9PT0gMCA/IC0xIDogMSk7XG4gICAgICAgIHRoaXMuX3Jvd0VsZW1lbnRzW3Bvc2l0aW9uID09PSAwID8gMSA6IHRoaXMuX3Jvd0VsZW1lbnRzLmxlbmd0aCAtIDJdLmZvY3VzKCk7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICB9O1xuICAgIEFjY2Vzc2liaWxpdHlNYW5hZ2VyLnByb3RvdHlwZS5fb25SZXNpemUgPSBmdW5jdGlvbiAocm93cykge1xuICAgICAgICB0aGlzLl9yb3dFbGVtZW50c1t0aGlzLl9yb3dFbGVtZW50cy5sZW5ndGggLSAxXS5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1cycsIHRoaXMuX2JvdHRvbUJvdW5kYXJ5Rm9jdXNMaXN0ZW5lcik7XG4gICAgICAgIGZvciAodmFyIGkgPSB0aGlzLl9yb3dDb250YWluZXIuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgdGhpcy5fdGVybWluYWwucm93czsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLl9yb3dFbGVtZW50c1tpXSA9IHRoaXMuX2NyZWF0ZUFjY2Vzc2liaWxpdHlUcmVlTm9kZSgpO1xuICAgICAgICAgICAgdGhpcy5fcm93Q29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuX3Jvd0VsZW1lbnRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAodGhpcy5fcm93RWxlbWVudHMubGVuZ3RoID4gcm93cykge1xuICAgICAgICAgICAgdGhpcy5fcm93Q29udGFpbmVyLnJlbW92ZUNoaWxkKHRoaXMuX3Jvd0VsZW1lbnRzLnBvcCgpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yb3dFbGVtZW50c1t0aGlzLl9yb3dFbGVtZW50cy5sZW5ndGggLSAxXS5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIHRoaXMuX2JvdHRvbUJvdW5kYXJ5Rm9jdXNMaXN0ZW5lcik7XG4gICAgICAgIHRoaXMuX3JlZnJlc2hSb3dzRGltZW5zaW9ucygpO1xuICAgIH07XG4gICAgQWNjZXNzaWJpbGl0eU1hbmFnZXIucHJvdG90eXBlLl9jcmVhdGVBY2Nlc3NpYmlsaXR5VHJlZU5vZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdyb2xlJywgJ2xpc3RpdGVtJyk7XG4gICAgICAgIGVsZW1lbnQudGFiSW5kZXggPSAtMTtcbiAgICAgICAgdGhpcy5fcmVmcmVzaFJvd0RpbWVuc2lvbnMoZWxlbWVudCk7XG4gICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH07XG4gICAgQWNjZXNzaWJpbGl0eU1hbmFnZXIucHJvdG90eXBlLl9vblRhYiA9IGZ1bmN0aW9uIChzcGFjZUNvdW50KSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3BhY2VDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLl9vbkNoYXIoJyAnKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQWNjZXNzaWJpbGl0eU1hbmFnZXIucHJvdG90eXBlLl9vbkNoYXIgPSBmdW5jdGlvbiAoY2hhcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5fbGl2ZVJlZ2lvbkxpbmVDb3VudCA8IE1BWF9ST1dTX1RPX1JFQUQgKyAxKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2hhcnNUb0NvbnN1bWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHZhciBzaGlmdGVkQ2hhciA9IHRoaXMuX2NoYXJzVG9Db25zdW1lLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgaWYgKHNoaWZ0ZWRDaGFyICE9PSBjaGFyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Fubm91bmNlQ2hhcmFjdGVyKGNoYXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Fubm91bmNlQ2hhcmFjdGVyKGNoYXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNoYXIgPT09ICdcXG4nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGl2ZVJlZ2lvbkxpbmVDb3VudCsrO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9saXZlUmVnaW9uTGluZUNvdW50ID09PSBNQVhfUk9XU19UT19SRUFEICsgMSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9saXZlUmVnaW9uLnRleHRDb250ZW50ICs9IFN0cmluZ3MudG9vTXVjaE91dHB1dDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoUGxhdGZvcm1fMS5pc01hYykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9saXZlUmVnaW9uLnRleHRDb250ZW50ICYmIHRoaXMuX2xpdmVSZWdpb24udGV4dENvbnRlbnQubGVuZ3RoID4gMCAmJiAhdGhpcy5fbGl2ZVJlZ2lvbi5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2FjY2Vzc2liaWxpdHlUcmVlUm9vdC5hcHBlbmRDaGlsZChfdGhpcy5fbGl2ZVJlZ2lvbik7XG4gICAgICAgICAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgQWNjZXNzaWJpbGl0eU1hbmFnZXIucHJvdG90eXBlLl9jbGVhckxpdmVSZWdpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2xpdmVSZWdpb24udGV4dENvbnRlbnQgPSAnJztcbiAgICAgICAgdGhpcy5fbGl2ZVJlZ2lvbkxpbmVDb3VudCA9IDA7XG4gICAgICAgIGlmIChQbGF0Zm9ybV8xLmlzTWFjKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fbGl2ZVJlZ2lvbi5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYWNjZXNzaWJpbGl0eVRyZWVSb290LnJlbW92ZUNoaWxkKHRoaXMuX2xpdmVSZWdpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBBY2Nlc3NpYmlsaXR5TWFuYWdlci5wcm90b3R5cGUuX29uS2V5ID0gZnVuY3Rpb24gKGtleUNoYXIpIHtcbiAgICAgICAgdGhpcy5fY2xlYXJMaXZlUmVnaW9uKCk7XG4gICAgICAgIHRoaXMuX2NoYXJzVG9Db25zdW1lLnB1c2goa2V5Q2hhcik7XG4gICAgfTtcbiAgICBBY2Nlc3NpYmlsaXR5TWFuYWdlci5wcm90b3R5cGUuX3JlZnJlc2hSb3dzID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgdGhpcy5fcmVuZGVyUm93c0RlYm91bmNlci5yZWZyZXNoKHN0YXJ0LCBlbmQpO1xuICAgIH07XG4gICAgQWNjZXNzaWJpbGl0eU1hbmFnZXIucHJvdG90eXBlLl9yZW5kZXJSb3dzID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlcjtcbiAgICAgICAgdmFyIHNldFNpemUgPSBidWZmZXIubGluZXMubGVuZ3RoLnRvU3RyaW5nKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8PSBlbmQ7IGkrKykge1xuICAgICAgICAgICAgdmFyIGxpbmVEYXRhID0gYnVmZmVyLnRyYW5zbGF0ZUJ1ZmZlckxpbmVUb1N0cmluZyhidWZmZXIueWRpc3AgKyBpLCB0cnVlKTtcbiAgICAgICAgICAgIHZhciBwb3NJblNldCA9IChidWZmZXIueWRpc3AgKyBpICsgMSkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5fcm93RWxlbWVudHNbaV07XG4gICAgICAgICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gbGluZURhdGEubGVuZ3RoID09PSAwID8gU3RyaW5ncy5ibGFua0xpbmUgOiBsaW5lRGF0YTtcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLXBvc2luc2V0JywgcG9zSW5TZXQpO1xuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2V0c2l6ZScsIHNldFNpemUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBY2Nlc3NpYmlsaXR5TWFuYWdlci5wcm90b3R5cGUuX3JlZnJlc2hSb3dzRGltZW5zaW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl90ZXJtaW5hbC5yZW5kZXJlci5kaW1lbnNpb25zLmFjdHVhbENlbGxIZWlnaHQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcm93RWxlbWVudHMubGVuZ3RoICE9PSB0aGlzLl90ZXJtaW5hbC5yb3dzKSB7XG4gICAgICAgICAgICB0aGlzLl9vblJlc2l6ZSh0aGlzLl90ZXJtaW5hbC5yb3dzKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3Rlcm1pbmFsLnJvd3M7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5fcmVmcmVzaFJvd0RpbWVuc2lvbnModGhpcy5fcm93RWxlbWVudHNbaV0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBY2Nlc3NpYmlsaXR5TWFuYWdlci5wcm90b3R5cGUuX3JlZnJlc2hSb3dEaW1lbnNpb25zID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5oZWlnaHQgPSB0aGlzLl90ZXJtaW5hbC5yZW5kZXJlci5kaW1lbnNpb25zLmFjdHVhbENlbGxIZWlnaHQgKyBcInB4XCI7XG4gICAgfTtcbiAgICBBY2Nlc3NpYmlsaXR5TWFuYWdlci5wcm90b3R5cGUuX2Fubm91bmNlQ2hhcmFjdGVyID0gZnVuY3Rpb24gKGNoYXIpIHtcbiAgICAgICAgaWYgKGNoYXIgPT09ICcgJykge1xuICAgICAgICAgICAgdGhpcy5fbGl2ZVJlZ2lvbi5pbm5lckhUTUwgKz0gJyZuYnNwOyc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9saXZlUmVnaW9uLnRleHRDb250ZW50ICs9IGNoYXI7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBBY2Nlc3NpYmlsaXR5TWFuYWdlcjtcbn0oTGlmZWN5Y2xlXzIuRGlzcG9zYWJsZSkpO1xuZXhwb3J0cy5BY2Nlc3NpYmlsaXR5TWFuYWdlciA9IEFjY2Vzc2liaWxpdHlNYW5hZ2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWNjZXNzaWJpbGl0eU1hbmFnZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEV2ZW50RW1pdHRlcl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbW1vbi9FdmVudEVtaXR0ZXJcIik7XG52YXIgQ29sb3JNYW5hZ2VyXzEgPSByZXF1aXJlKFwiLi4vQ29sb3JNYW5hZ2VyXCIpO1xudmFyIFJlbmRlckRlYm91bmNlcl8xID0gcmVxdWlyZShcIi4uLy4uL3VpL1JlbmRlckRlYm91bmNlclwiKTtcbnZhciBEb21SZW5kZXJlclJvd0ZhY3RvcnlfMSA9IHJlcXVpcmUoXCIuL0RvbVJlbmRlcmVyUm93RmFjdG9yeVwiKTtcbnZhciBUeXBlc18xID0gcmVxdWlyZShcIi4uL2F0bGFzL1R5cGVzXCIpO1xudmFyIFRFUk1JTkFMX0NMQVNTX1BSRUZJWCA9ICd4dGVybS1kb20tcmVuZGVyZXItb3duZXItJztcbnZhciBST1dfQ09OVEFJTkVSX0NMQVNTID0gJ3h0ZXJtLXJvd3MnO1xudmFyIEZHX0NMQVNTX1BSRUZJWCA9ICd4dGVybS1mZy0nO1xudmFyIEJHX0NMQVNTX1BSRUZJWCA9ICd4dGVybS1iZy0nO1xudmFyIEZPQ1VTX0NMQVNTID0gJ3h0ZXJtLWZvY3VzJztcbnZhciBTRUxFQ1RJT05fQ0xBU1MgPSAneHRlcm0tc2VsZWN0aW9uJztcbnZhciBuZXh0VGVybWluYWxJZCA9IDE7XG52YXIgRG9tUmVuZGVyZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhEb21SZW5kZXJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEb21SZW5kZXJlcihfdGVybWluYWwsIHRoZW1lKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl90ZXJtaW5hbCA9IF90ZXJtaW5hbDtcbiAgICAgICAgX3RoaXMuX3Rlcm1pbmFsQ2xhc3MgPSBuZXh0VGVybWluYWxJZCsrO1xuICAgICAgICBfdGhpcy5fcm93RWxlbWVudHMgPSBbXTtcbiAgICAgICAgdmFyIGFsbG93VHJhbnNwYXJlbmN5ID0gX3RoaXMuX3Rlcm1pbmFsLm9wdGlvbnMuYWxsb3dUcmFuc3BhcmVuY3k7XG4gICAgICAgIF90aGlzLmNvbG9yTWFuYWdlciA9IG5ldyBDb2xvck1hbmFnZXJfMS5Db2xvck1hbmFnZXIoZG9jdW1lbnQsIGFsbG93VHJhbnNwYXJlbmN5KTtcbiAgICAgICAgX3RoaXMuc2V0VGhlbWUodGhlbWUpO1xuICAgICAgICBfdGhpcy5fcm93Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIF90aGlzLl9yb3dDb250YWluZXIuY2xhc3NMaXN0LmFkZChST1dfQ09OVEFJTkVSX0NMQVNTKTtcbiAgICAgICAgX3RoaXMuX3Jvd0NvbnRhaW5lci5zdHlsZS5saW5lSGVpZ2h0ID0gJ25vcm1hbCc7XG4gICAgICAgIF90aGlzLl9yb3dDb250YWluZXIuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgICAgIF90aGlzLl9yZWZyZXNoUm93RWxlbWVudHMoX3RoaXMuX3Rlcm1pbmFsLmNvbHMsIF90aGlzLl90ZXJtaW5hbC5yb3dzKTtcbiAgICAgICAgX3RoaXMuX3NlbGVjdGlvbkNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBfdGhpcy5fc2VsZWN0aW9uQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoU0VMRUNUSU9OX0NMQVNTKTtcbiAgICAgICAgX3RoaXMuX3NlbGVjdGlvbkNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgICAgICAgX3RoaXMuZGltZW5zaW9ucyA9IHtcbiAgICAgICAgICAgIHNjYWxlZENoYXJXaWR0aDogbnVsbCxcbiAgICAgICAgICAgIHNjYWxlZENoYXJIZWlnaHQ6IG51bGwsXG4gICAgICAgICAgICBzY2FsZWRDZWxsV2lkdGg6IG51bGwsXG4gICAgICAgICAgICBzY2FsZWRDZWxsSGVpZ2h0OiBudWxsLFxuICAgICAgICAgICAgc2NhbGVkQ2hhckxlZnQ6IG51bGwsXG4gICAgICAgICAgICBzY2FsZWRDaGFyVG9wOiBudWxsLFxuICAgICAgICAgICAgc2NhbGVkQ2FudmFzV2lkdGg6IG51bGwsXG4gICAgICAgICAgICBzY2FsZWRDYW52YXNIZWlnaHQ6IG51bGwsXG4gICAgICAgICAgICBjYW52YXNXaWR0aDogbnVsbCxcbiAgICAgICAgICAgIGNhbnZhc0hlaWdodDogbnVsbCxcbiAgICAgICAgICAgIGFjdHVhbENlbGxXaWR0aDogbnVsbCxcbiAgICAgICAgICAgIGFjdHVhbENlbGxIZWlnaHQ6IG51bGxcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX3VwZGF0ZURpbWVuc2lvbnMoKTtcbiAgICAgICAgX3RoaXMuX3JlbmRlckRlYm91bmNlciA9IG5ldyBSZW5kZXJEZWJvdW5jZXJfMS5SZW5kZXJEZWJvdW5jZXIoX3RoaXMuX3Rlcm1pbmFsLCBfdGhpcy5fcmVuZGVyUm93cy5iaW5kKF90aGlzKSk7XG4gICAgICAgIF90aGlzLl9yb3dGYWN0b3J5ID0gbmV3IERvbVJlbmRlcmVyUm93RmFjdG9yeV8xLkRvbVJlbmRlcmVyUm93RmFjdG9yeShkb2N1bWVudCk7XG4gICAgICAgIF90aGlzLl90ZXJtaW5hbC5lbGVtZW50LmNsYXNzTGlzdC5hZGQoVEVSTUlOQUxfQ0xBU1NfUFJFRklYICsgX3RoaXMuX3Rlcm1pbmFsQ2xhc3MpO1xuICAgICAgICBfdGhpcy5fdGVybWluYWwuc2NyZWVuRWxlbWVudC5hcHBlbmRDaGlsZChfdGhpcy5fcm93Q29udGFpbmVyKTtcbiAgICAgICAgX3RoaXMuX3Rlcm1pbmFsLnNjcmVlbkVsZW1lbnQuYXBwZW5kQ2hpbGQoX3RoaXMuX3NlbGVjdGlvbkNvbnRhaW5lcik7XG4gICAgICAgIF90aGlzLl90ZXJtaW5hbC5saW5raWZpZXIub24oXCJsaW5raG92ZXJcIiwgZnVuY3Rpb24gKGUpIHsgcmV0dXJuIF90aGlzLl9vbkxpbmtIb3ZlcihlKTsgfSk7XG4gICAgICAgIF90aGlzLl90ZXJtaW5hbC5saW5raWZpZXIub24oXCJsaW5rbGVhdmVcIiwgZnVuY3Rpb24gKGUpIHsgcmV0dXJuIF90aGlzLl9vbkxpbmtMZWF2ZShlKTsgfSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRG9tUmVuZGVyZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShURVJNSU5BTF9DTEFTU19QUkVGSVggKyB0aGlzLl90ZXJtaW5hbENsYXNzKTtcbiAgICAgICAgdGhpcy5fdGVybWluYWwuc2NyZWVuRWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLl9yb3dDb250YWluZXIpO1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5zY3JlZW5FbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMuX3NlbGVjdGlvbkNvbnRhaW5lcik7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLnNjcmVlbkVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5fdGhlbWVTdHlsZUVsZW1lbnQpO1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5zY3JlZW5FbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMuX2RpbWVuc2lvbnNTdHlsZUVsZW1lbnQpO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIERvbVJlbmRlcmVyLnByb3RvdHlwZS5fdXBkYXRlRGltZW5zaW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5kaW1lbnNpb25zLnNjYWxlZENoYXJXaWR0aCA9IE1hdGguZmxvb3IodGhpcy5fdGVybWluYWwuY2hhck1lYXN1cmUud2lkdGggKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XG4gICAgICAgIHRoaXMuZGltZW5zaW9ucy5zY2FsZWRDaGFySGVpZ2h0ID0gTWF0aC5jZWlsKHRoaXMuX3Rlcm1pbmFsLmNoYXJNZWFzdXJlLmhlaWdodCAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTtcbiAgICAgICAgdGhpcy5kaW1lbnNpb25zLnNjYWxlZENlbGxXaWR0aCA9IHRoaXMuZGltZW5zaW9ucy5zY2FsZWRDaGFyV2lkdGggKyBNYXRoLnJvdW5kKHRoaXMuX3Rlcm1pbmFsLm9wdGlvbnMubGV0dGVyU3BhY2luZyk7XG4gICAgICAgIHRoaXMuZGltZW5zaW9ucy5zY2FsZWRDZWxsSGVpZ2h0ID0gTWF0aC5mbG9vcih0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2hhckhlaWdodCAqIHRoaXMuX3Rlcm1pbmFsLm9wdGlvbnMubGluZUhlaWdodCk7XG4gICAgICAgIHRoaXMuZGltZW5zaW9ucy5zY2FsZWRDaGFyTGVmdCA9IDA7XG4gICAgICAgIHRoaXMuZGltZW5zaW9ucy5zY2FsZWRDaGFyVG9wID0gMDtcbiAgICAgICAgdGhpcy5kaW1lbnNpb25zLnNjYWxlZENhbnZhc1dpZHRoID0gdGhpcy5kaW1lbnNpb25zLnNjYWxlZENlbGxXaWR0aCAqIHRoaXMuX3Rlcm1pbmFsLmNvbHM7XG4gICAgICAgIHRoaXMuZGltZW5zaW9ucy5zY2FsZWRDYW52YXNIZWlnaHQgPSB0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2VsbEhlaWdodCAqIHRoaXMuX3Rlcm1pbmFsLnJvd3M7XG4gICAgICAgIHRoaXMuZGltZW5zaW9ucy5jYW52YXNXaWR0aCA9IE1hdGgucm91bmQodGhpcy5kaW1lbnNpb25zLnNjYWxlZENhbnZhc1dpZHRoIC8gd2luZG93LmRldmljZVBpeGVsUmF0aW8pO1xuICAgICAgICB0aGlzLmRpbWVuc2lvbnMuY2FudmFzSGVpZ2h0ID0gTWF0aC5yb3VuZCh0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2FudmFzSGVpZ2h0IC8gd2luZG93LmRldmljZVBpeGVsUmF0aW8pO1xuICAgICAgICB0aGlzLmRpbWVuc2lvbnMuYWN0dWFsQ2VsbFdpZHRoID0gdGhpcy5kaW1lbnNpb25zLmNhbnZhc1dpZHRoIC8gdGhpcy5fdGVybWluYWwuY29scztcbiAgICAgICAgdGhpcy5kaW1lbnNpb25zLmFjdHVhbENlbGxIZWlnaHQgPSB0aGlzLmRpbWVuc2lvbnMuY2FudmFzSGVpZ2h0IC8gdGhpcy5fdGVybWluYWwucm93cztcbiAgICAgICAgdGhpcy5fcm93RWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZS53aWR0aCA9IF90aGlzLmRpbWVuc2lvbnMuY2FudmFzV2lkdGggKyBcInB4XCI7XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLmhlaWdodCA9IF90aGlzLmRpbWVuc2lvbnMuYWN0dWFsQ2VsbEhlaWdodCArIFwicHhcIjtcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUubGluZUhlaWdodCA9IF90aGlzLmRpbWVuc2lvbnMuYWN0dWFsQ2VsbEhlaWdodCArIFwicHhcIjtcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghdGhpcy5fZGltZW5zaW9uc1N0eWxlRWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5fZGltZW5zaW9uc1N0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5zY3JlZW5FbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuX2RpbWVuc2lvbnNTdHlsZUVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdHlsZXMgPSB0aGlzLl90ZXJtaW5hbFNlbGVjdG9yICsgXCIgLlwiICsgUk9XX0NPTlRBSU5FUl9DTEFTUyArIFwiIHNwYW4ge1wiICtcbiAgICAgICAgICAgIFwiIGRpc3BsYXk6IGlubGluZS1ibG9jaztcIiArXG4gICAgICAgICAgICBcIiBoZWlnaHQ6IDEwMCU7XCIgK1xuICAgICAgICAgICAgXCIgdmVydGljYWwtYWxpZ246IHRvcDtcIiArXG4gICAgICAgICAgICAoXCIgd2lkdGg6IFwiICsgdGhpcy5kaW1lbnNpb25zLmFjdHVhbENlbGxXaWR0aCArIFwicHhcIikgK1xuICAgICAgICAgICAgXCJ9XCI7XG4gICAgICAgIHRoaXMuX2RpbWVuc2lvbnNTdHlsZUVsZW1lbnQuaW5uZXJIVE1MID0gc3R5bGVzO1xuICAgICAgICB0aGlzLl9zZWxlY3Rpb25Db250YWluZXIuc3R5bGUuaGVpZ2h0ID0gdGhpcy5fdGVybWluYWwuX3ZpZXdwb3J0RWxlbWVudC5zdHlsZS5oZWlnaHQ7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLnNjcmVlbkVsZW1lbnQuc3R5bGUud2lkdGggPSB0aGlzLmRpbWVuc2lvbnMuY2FudmFzV2lkdGggKyBcInB4XCI7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLnNjcmVlbkVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gdGhpcy5kaW1lbnNpb25zLmNhbnZhc0hlaWdodCArIFwicHhcIjtcbiAgICB9O1xuICAgIERvbVJlbmRlcmVyLnByb3RvdHlwZS5zZXRUaGVtZSA9IGZ1bmN0aW9uICh0aGVtZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodGhlbWUpIHtcbiAgICAgICAgICAgIHRoaXMuY29sb3JNYW5hZ2VyLnNldFRoZW1lKHRoZW1lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX3RoZW1lU3R5bGVFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLl90aGVtZVN0eWxlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5zY3JlZW5FbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuX3RoZW1lU3R5bGVFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3R5bGVzID0gdGhpcy5fdGVybWluYWxTZWxlY3RvciArIFwiIC5cIiArIFJPV19DT05UQUlORVJfQ0xBU1MgKyBcIiB7XCIgK1xuICAgICAgICAgICAgKFwiIGNvbG9yOiBcIiArIHRoaXMuY29sb3JNYW5hZ2VyLmNvbG9ycy5mb3JlZ3JvdW5kLmNzcyArIFwiO1wiKSArXG4gICAgICAgICAgICAoXCIgYmFja2dyb3VuZC1jb2xvcjogXCIgKyB0aGlzLmNvbG9yTWFuYWdlci5jb2xvcnMuYmFja2dyb3VuZC5jc3MgKyBcIjtcIikgK1xuICAgICAgICAgICAgKFwiIGZvbnQtZmFtaWx5OiBcIiArIHRoaXMuX3Rlcm1pbmFsLmdldE9wdGlvbignZm9udEZhbWlseScpICsgXCI7XCIpICtcbiAgICAgICAgICAgIChcIiBmb250LXNpemU6IFwiICsgdGhpcy5fdGVybWluYWwuZ2V0T3B0aW9uKCdmb250U2l6ZScpICsgXCJweDtcIikgK1xuICAgICAgICAgICAgXCJ9XCI7XG4gICAgICAgIHN0eWxlcyArPVxuICAgICAgICAgICAgdGhpcy5fdGVybWluYWxTZWxlY3RvciArIFwiIHNwYW46bm90KC5cIiArIERvbVJlbmRlcmVyUm93RmFjdG9yeV8xLkJPTERfQ0xBU1MgKyBcIikge1wiICtcbiAgICAgICAgICAgICAgICAoXCIgZm9udC13ZWlnaHQ6IFwiICsgdGhpcy5fdGVybWluYWwub3B0aW9ucy5mb250V2VpZ2h0ICsgXCI7XCIpICtcbiAgICAgICAgICAgICAgICBcIn1cIiArXG4gICAgICAgICAgICAgICAgKHRoaXMuX3Rlcm1pbmFsU2VsZWN0b3IgKyBcIiBzcGFuLlwiICsgRG9tUmVuZGVyZXJSb3dGYWN0b3J5XzEuQk9MRF9DTEFTUyArIFwiIHtcIikgK1xuICAgICAgICAgICAgICAgIChcIiBmb250LXdlaWdodDogXCIgKyB0aGlzLl90ZXJtaW5hbC5vcHRpb25zLmZvbnRXZWlnaHRCb2xkICsgXCI7XCIpICtcbiAgICAgICAgICAgICAgICBcIn1cIiArXG4gICAgICAgICAgICAgICAgKHRoaXMuX3Rlcm1pbmFsU2VsZWN0b3IgKyBcIiBzcGFuLlwiICsgRG9tUmVuZGVyZXJSb3dGYWN0b3J5XzEuSVRBTElDX0NMQVNTICsgXCIge1wiKSArXG4gICAgICAgICAgICAgICAgXCIgZm9udC1zdHlsZTogaXRhbGljO1wiICtcbiAgICAgICAgICAgICAgICBcIn1cIjtcbiAgICAgICAgc3R5bGVzICs9XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbFNlbGVjdG9yICsgXCIgLlwiICsgUk9XX0NPTlRBSU5FUl9DTEFTUyArIFwiOm5vdCguXCIgKyBGT0NVU19DTEFTUyArIFwiKSAuXCIgKyBEb21SZW5kZXJlclJvd0ZhY3RvcnlfMS5DVVJTT1JfQ0xBU1MgKyBcIiB7XCIgK1xuICAgICAgICAgICAgICAgIChcIiBvdXRsaW5lOiAxcHggc29saWQgXCIgKyB0aGlzLmNvbG9yTWFuYWdlci5jb2xvcnMuY3Vyc29yLmNzcyArIFwiO1wiKSArXG4gICAgICAgICAgICAgICAgXCIgb3V0bGluZS1vZmZzZXQ6IC0xcHg7XCIgK1xuICAgICAgICAgICAgICAgIFwifVwiICtcbiAgICAgICAgICAgICAgICAodGhpcy5fdGVybWluYWxTZWxlY3RvciArIFwiIC5cIiArIFJPV19DT05UQUlORVJfQ0xBU1MgKyBcIi5cIiArIEZPQ1VTX0NMQVNTICsgXCIgLlwiICsgRG9tUmVuZGVyZXJSb3dGYWN0b3J5XzEuQ1VSU09SX0NMQVNTICsgXCIuXCIgKyBEb21SZW5kZXJlclJvd0ZhY3RvcnlfMS5DVVJTT1JfU1RZTEVfQkxPQ0tfQ0xBU1MgKyBcIiB7XCIpICtcbiAgICAgICAgICAgICAgICAoXCIgYmFja2dyb3VuZC1jb2xvcjogXCIgKyB0aGlzLmNvbG9yTWFuYWdlci5jb2xvcnMuY3Vyc29yLmNzcyArIFwiO1wiKSArXG4gICAgICAgICAgICAgICAgKFwiIGNvbG9yOiBcIiArIHRoaXMuY29sb3JNYW5hZ2VyLmNvbG9ycy5jdXJzb3JBY2NlbnQuY3NzICsgXCI7XCIpICtcbiAgICAgICAgICAgICAgICBcIn1cIiArXG4gICAgICAgICAgICAgICAgKHRoaXMuX3Rlcm1pbmFsU2VsZWN0b3IgKyBcIiAuXCIgKyBST1dfQ09OVEFJTkVSX0NMQVNTICsgXCIuXCIgKyBGT0NVU19DTEFTUyArIFwiIC5cIiArIERvbVJlbmRlcmVyUm93RmFjdG9yeV8xLkNVUlNPUl9DTEFTUyArIFwiLlwiICsgRG9tUmVuZGVyZXJSb3dGYWN0b3J5XzEuQ1VSU09SX1NUWUxFX0JBUl9DTEFTUyArIFwiIHtcIikgK1xuICAgICAgICAgICAgICAgIChcIiBib3gtc2hhZG93OiAxcHggMCAwIFwiICsgdGhpcy5jb2xvck1hbmFnZXIuY29sb3JzLmN1cnNvci5jc3MgKyBcIiBpbnNldDtcIikgK1xuICAgICAgICAgICAgICAgIFwifVwiICtcbiAgICAgICAgICAgICAgICAodGhpcy5fdGVybWluYWxTZWxlY3RvciArIFwiIC5cIiArIFJPV19DT05UQUlORVJfQ0xBU1MgKyBcIi5cIiArIEZPQ1VTX0NMQVNTICsgXCIgLlwiICsgRG9tUmVuZGVyZXJSb3dGYWN0b3J5XzEuQ1VSU09SX0NMQVNTICsgXCIuXCIgKyBEb21SZW5kZXJlclJvd0ZhY3RvcnlfMS5DVVJTT1JfU1RZTEVfVU5ERVJMSU5FX0NMQVNTICsgXCIge1wiKSArXG4gICAgICAgICAgICAgICAgKFwiIGJveC1zaGFkb3c6IDAgLTFweCAwIFwiICsgdGhpcy5jb2xvck1hbmFnZXIuY29sb3JzLmN1cnNvci5jc3MgKyBcIiBpbnNldDtcIikgK1xuICAgICAgICAgICAgICAgIFwifVwiO1xuICAgICAgICBzdHlsZXMgKz1cbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsU2VsZWN0b3IgKyBcIiAuXCIgKyBTRUxFQ1RJT05fQ0xBU1MgKyBcIiB7XCIgK1xuICAgICAgICAgICAgICAgIFwiIHBvc2l0aW9uOiBhYnNvbHV0ZTtcIiArXG4gICAgICAgICAgICAgICAgXCIgdG9wOiAwO1wiICtcbiAgICAgICAgICAgICAgICBcIiBsZWZ0OiAwO1wiICtcbiAgICAgICAgICAgICAgICBcIiB6LWluZGV4OiAxO1wiICtcbiAgICAgICAgICAgICAgICBcIiBwb2ludGVyLWV2ZW50czogbm9uZTtcIiArXG4gICAgICAgICAgICAgICAgXCJ9XCIgK1xuICAgICAgICAgICAgICAgICh0aGlzLl90ZXJtaW5hbFNlbGVjdG9yICsgXCIgLlwiICsgU0VMRUNUSU9OX0NMQVNTICsgXCIgZGl2IHtcIikgK1xuICAgICAgICAgICAgICAgIFwiIHBvc2l0aW9uOiBhYnNvbHV0ZTtcIiArXG4gICAgICAgICAgICAgICAgKFwiIGJhY2tncm91bmQtY29sb3I6IFwiICsgdGhpcy5jb2xvck1hbmFnZXIuY29sb3JzLnNlbGVjdGlvbi5jc3MgKyBcIjtcIikgK1xuICAgICAgICAgICAgICAgIFwifVwiO1xuICAgICAgICB0aGlzLmNvbG9yTWFuYWdlci5jb2xvcnMuYW5zaS5mb3JFYWNoKGZ1bmN0aW9uIChjLCBpKSB7XG4gICAgICAgICAgICBzdHlsZXMgKz1cbiAgICAgICAgICAgICAgICBfdGhpcy5fdGVybWluYWxTZWxlY3RvciArIFwiIC5cIiArIEZHX0NMQVNTX1BSRUZJWCArIGkgKyBcIiB7IGNvbG9yOiBcIiArIGMuY3NzICsgXCI7IH1cIiArXG4gICAgICAgICAgICAgICAgICAgIChfdGhpcy5fdGVybWluYWxTZWxlY3RvciArIFwiIC5cIiArIEJHX0NMQVNTX1BSRUZJWCArIGkgKyBcIiB7IGJhY2tncm91bmQtY29sb3I6IFwiICsgYy5jc3MgKyBcIjsgfVwiKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHN0eWxlcyArPVxuICAgICAgICAgICAgdGhpcy5fdGVybWluYWxTZWxlY3RvciArIFwiIC5cIiArIEZHX0NMQVNTX1BSRUZJWCArIFR5cGVzXzEuSU5WRVJURURfREVGQVVMVF9DT0xPUiArIFwiIHsgY29sb3I6IFwiICsgdGhpcy5jb2xvck1hbmFnZXIuY29sb3JzLmJhY2tncm91bmQuY3NzICsgXCI7IH1cIiArXG4gICAgICAgICAgICAgICAgKHRoaXMuX3Rlcm1pbmFsU2VsZWN0b3IgKyBcIiAuXCIgKyBCR19DTEFTU19QUkVGSVggKyBUeXBlc18xLklOVkVSVEVEX0RFRkFVTFRfQ09MT1IgKyBcIiB7IGJhY2tncm91bmQtY29sb3I6IFwiICsgdGhpcy5jb2xvck1hbmFnZXIuY29sb3JzLmZvcmVncm91bmQuY3NzICsgXCI7IH1cIik7XG4gICAgICAgIHRoaXMuX3RoZW1lU3R5bGVFbGVtZW50LmlubmVySFRNTCA9IHN0eWxlcztcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sb3JNYW5hZ2VyLmNvbG9ycztcbiAgICB9O1xuICAgIERvbVJlbmRlcmVyLnByb3RvdHlwZS5vbldpbmRvd1Jlc2l6ZSA9IGZ1bmN0aW9uIChkZXZpY2VQaXhlbFJhdGlvKSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZURpbWVuc2lvbnMoKTtcbiAgICB9O1xuICAgIERvbVJlbmRlcmVyLnByb3RvdHlwZS5fcmVmcmVzaFJvd0VsZW1lbnRzID0gZnVuY3Rpb24gKGNvbHMsIHJvd3MpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMuX3Jvd0VsZW1lbnRzLmxlbmd0aDsgaSA8PSByb3dzOyBpKyspIHtcbiAgICAgICAgICAgIHZhciByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIHRoaXMuX3Jvd0NvbnRhaW5lci5hcHBlbmRDaGlsZChyb3cpO1xuICAgICAgICAgICAgdGhpcy5fcm93RWxlbWVudHMucHVzaChyb3cpO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlICh0aGlzLl9yb3dFbGVtZW50cy5sZW5ndGggPiByb3dzKSB7XG4gICAgICAgICAgICB0aGlzLl9yb3dDb250YWluZXIucmVtb3ZlQ2hpbGQodGhpcy5fcm93RWxlbWVudHMucG9wKCkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBEb21SZW5kZXJlci5wcm90b3R5cGUub25SZXNpemUgPSBmdW5jdGlvbiAoY29scywgcm93cykge1xuICAgICAgICB0aGlzLl9yZWZyZXNoUm93RWxlbWVudHMoY29scywgcm93cyk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZURpbWVuc2lvbnMoKTtcbiAgICB9O1xuICAgIERvbVJlbmRlcmVyLnByb3RvdHlwZS5vbkNoYXJTaXplQ2hhbmdlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlRGltZW5zaW9ucygpO1xuICAgIH07XG4gICAgRG9tUmVuZGVyZXIucHJvdG90eXBlLm9uQmx1ciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fcm93Q29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoRk9DVVNfQ0xBU1MpO1xuICAgIH07XG4gICAgRG9tUmVuZGVyZXIucHJvdG90eXBlLm9uRm9jdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3Jvd0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKEZPQ1VTX0NMQVNTKTtcbiAgICB9O1xuICAgIERvbVJlbmRlcmVyLnByb3RvdHlwZS5vblNlbGVjdGlvbkNoYW5nZWQgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgY29sdW1uU2VsZWN0TW9kZSkge1xuICAgICAgICB3aGlsZSAodGhpcy5fc2VsZWN0aW9uQ29udGFpbmVyLmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5fc2VsZWN0aW9uQ29udGFpbmVyLnJlbW92ZUNoaWxkKHRoaXMuX3NlbGVjdGlvbkNvbnRhaW5lci5jaGlsZHJlblswXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzdGFydCB8fCAhZW5kKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZpZXdwb3J0U3RhcnRSb3cgPSBzdGFydFsxXSAtIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ZGlzcDtcbiAgICAgICAgdmFyIHZpZXdwb3J0RW5kUm93ID0gZW5kWzFdIC0gdGhpcy5fdGVybWluYWwuYnVmZmVyLnlkaXNwO1xuICAgICAgICB2YXIgdmlld3BvcnRDYXBwZWRTdGFydFJvdyA9IE1hdGgubWF4KHZpZXdwb3J0U3RhcnRSb3csIDApO1xuICAgICAgICB2YXIgdmlld3BvcnRDYXBwZWRFbmRSb3cgPSBNYXRoLm1pbih2aWV3cG9ydEVuZFJvdywgdGhpcy5fdGVybWluYWwucm93cyAtIDEpO1xuICAgICAgICBpZiAodmlld3BvcnRDYXBwZWRTdGFydFJvdyA+PSB0aGlzLl90ZXJtaW5hbC5yb3dzIHx8IHZpZXdwb3J0Q2FwcGVkRW5kUm93IDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkb2N1bWVudEZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgICBpZiAoY29sdW1uU2VsZWN0TW9kZSkge1xuICAgICAgICAgICAgZG9jdW1lbnRGcmFnbWVudC5hcHBlbmRDaGlsZCh0aGlzLl9jcmVhdGVTZWxlY3Rpb25FbGVtZW50KHZpZXdwb3J0Q2FwcGVkU3RhcnRSb3csIHN0YXJ0WzBdLCBlbmRbMF0sIHZpZXdwb3J0Q2FwcGVkRW5kUm93IC0gdmlld3BvcnRDYXBwZWRTdGFydFJvdyArIDEpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBzdGFydENvbCA9IHZpZXdwb3J0U3RhcnRSb3cgPT09IHZpZXdwb3J0Q2FwcGVkU3RhcnRSb3cgPyBzdGFydFswXSA6IDA7XG4gICAgICAgICAgICB2YXIgZW5kQ29sID0gdmlld3BvcnRDYXBwZWRTdGFydFJvdyA9PT0gdmlld3BvcnRDYXBwZWRFbmRSb3cgPyBlbmRbMF0gOiB0aGlzLl90ZXJtaW5hbC5jb2xzO1xuICAgICAgICAgICAgZG9jdW1lbnRGcmFnbWVudC5hcHBlbmRDaGlsZCh0aGlzLl9jcmVhdGVTZWxlY3Rpb25FbGVtZW50KHZpZXdwb3J0Q2FwcGVkU3RhcnRSb3csIHN0YXJ0Q29sLCBlbmRDb2wpKTtcbiAgICAgICAgICAgIHZhciBtaWRkbGVSb3dzQ291bnQgPSB2aWV3cG9ydENhcHBlZEVuZFJvdyAtIHZpZXdwb3J0Q2FwcGVkU3RhcnRSb3cgLSAxO1xuICAgICAgICAgICAgZG9jdW1lbnRGcmFnbWVudC5hcHBlbmRDaGlsZCh0aGlzLl9jcmVhdGVTZWxlY3Rpb25FbGVtZW50KHZpZXdwb3J0Q2FwcGVkU3RhcnRSb3cgKyAxLCAwLCB0aGlzLl90ZXJtaW5hbC5jb2xzLCBtaWRkbGVSb3dzQ291bnQpKTtcbiAgICAgICAgICAgIGlmICh2aWV3cG9ydENhcHBlZFN0YXJ0Um93ICE9PSB2aWV3cG9ydENhcHBlZEVuZFJvdykge1xuICAgICAgICAgICAgICAgIHZhciBlbmRDb2xfMSA9IHZpZXdwb3J0RW5kUm93ID09PSB2aWV3cG9ydENhcHBlZEVuZFJvdyA/IGVuZFswXSA6IHRoaXMuX3Rlcm1pbmFsLmNvbHM7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnRGcmFnbWVudC5hcHBlbmRDaGlsZCh0aGlzLl9jcmVhdGVTZWxlY3Rpb25FbGVtZW50KHZpZXdwb3J0Q2FwcGVkRW5kUm93LCAwLCBlbmRDb2xfMSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3NlbGVjdGlvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChkb2N1bWVudEZyYWdtZW50KTtcbiAgICB9O1xuICAgIERvbVJlbmRlcmVyLnByb3RvdHlwZS5fY3JlYXRlU2VsZWN0aW9uRWxlbWVudCA9IGZ1bmN0aW9uIChyb3csIGNvbFN0YXJ0LCBjb2xFbmQsIHJvd0NvdW50KSB7XG4gICAgICAgIGlmIChyb3dDb3VudCA9PT0gdm9pZCAwKSB7IHJvd0NvdW50ID0gMTsgfVxuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBlbGVtZW50LnN0eWxlLmhlaWdodCA9IHJvd0NvdW50ICogdGhpcy5kaW1lbnNpb25zLmFjdHVhbENlbGxIZWlnaHQgKyBcInB4XCI7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUudG9wID0gcm93ICogdGhpcy5kaW1lbnNpb25zLmFjdHVhbENlbGxIZWlnaHQgKyBcInB4XCI7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUubGVmdCA9IGNvbFN0YXJ0ICogdGhpcy5kaW1lbnNpb25zLmFjdHVhbENlbGxXaWR0aCArIFwicHhcIjtcbiAgICAgICAgZWxlbWVudC5zdHlsZS53aWR0aCA9IHRoaXMuZGltZW5zaW9ucy5hY3R1YWxDZWxsV2lkdGggKiAoY29sRW5kIC0gY29sU3RhcnQpICsgXCJweFwiO1xuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9O1xuICAgIERvbVJlbmRlcmVyLnByb3RvdHlwZS5vbkN1cnNvck1vdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgfTtcbiAgICBEb21SZW5kZXJlci5wcm90b3R5cGUub25PcHRpb25zQ2hhbmdlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlRGltZW5zaW9ucygpO1xuICAgICAgICB0aGlzLnNldFRoZW1lKHVuZGVmaW5lZCk7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLnJlZnJlc2goMCwgdGhpcy5fdGVybWluYWwucm93cyAtIDEpO1xuICAgIH07XG4gICAgRG9tUmVuZGVyZXIucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9yb3dFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLmlubmVySFRNTCA9ICcnOyB9KTtcbiAgICB9O1xuICAgIERvbVJlbmRlcmVyLnByb3RvdHlwZS5yZWZyZXNoUm93cyA9IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgICAgIHRoaXMuX3JlbmRlckRlYm91bmNlci5yZWZyZXNoKHN0YXJ0LCBlbmQpO1xuICAgIH07XG4gICAgRG9tUmVuZGVyZXIucHJvdG90eXBlLl9yZW5kZXJSb3dzID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgdmFyIHRlcm1pbmFsID0gdGhpcy5fdGVybWluYWw7XG4gICAgICAgIHZhciBjdXJzb3JBYnNvbHV0ZVkgPSB0ZXJtaW5hbC5idWZmZXIueWJhc2UgKyB0ZXJtaW5hbC5idWZmZXIueTtcbiAgICAgICAgdmFyIGN1cnNvclggPSB0aGlzLl90ZXJtaW5hbC5idWZmZXIueDtcbiAgICAgICAgZm9yICh2YXIgeSA9IHN0YXJ0OyB5IDw9IGVuZDsgeSsrKSB7XG4gICAgICAgICAgICB2YXIgcm93RWxlbWVudCA9IHRoaXMuX3Jvd0VsZW1lbnRzW3ldO1xuICAgICAgICAgICAgcm93RWxlbWVudC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgIHZhciByb3cgPSB5ICsgdGVybWluYWwuYnVmZmVyLnlkaXNwO1xuICAgICAgICAgICAgdmFyIGxpbmVEYXRhID0gdGVybWluYWwuYnVmZmVyLmxpbmVzLmdldChyb3cpO1xuICAgICAgICAgICAgdmFyIGN1cnNvclN0eWxlID0gdGVybWluYWwub3B0aW9ucy5jdXJzb3JTdHlsZTtcbiAgICAgICAgICAgIHJvd0VsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5fcm93RmFjdG9yeS5jcmVhdGVSb3cobGluZURhdGEsIHJvdyA9PT0gY3Vyc29yQWJzb2x1dGVZLCBjdXJzb3JTdHlsZSwgY3Vyc29yWCwgdGhpcy5kaW1lbnNpb25zLmFjdHVhbENlbGxXaWR0aCwgdGVybWluYWwuY29scykpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmVtaXQoJ3JlZnJlc2gnLCB7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQgfSk7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRG9tUmVuZGVyZXIucHJvdG90eXBlLCBcIl90ZXJtaW5hbFNlbGVjdG9yXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gXCIuXCIgKyBURVJNSU5BTF9DTEFTU19QUkVGSVggKyB0aGlzLl90ZXJtaW5hbENsYXNzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBEb21SZW5kZXJlci5wcm90b3R5cGUucmVnaXN0ZXJDaGFyYWN0ZXJKb2luZXIgPSBmdW5jdGlvbiAoaGFuZGxlcikgeyByZXR1cm4gLTE7IH07XG4gICAgRG9tUmVuZGVyZXIucHJvdG90eXBlLmRlcmVnaXN0ZXJDaGFyYWN0ZXJKb2luZXIgPSBmdW5jdGlvbiAoam9pbmVySWQpIHsgcmV0dXJuIGZhbHNlOyB9O1xuICAgIERvbVJlbmRlcmVyLnByb3RvdHlwZS5fb25MaW5rSG92ZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICB0aGlzLl9zZXRDZWxsVW5kZXJsaW5lKGUueDEsIGUueDIsIGUueTEsIGUueTIsIGUuY29scywgdHJ1ZSk7XG4gICAgfTtcbiAgICBEb21SZW5kZXJlci5wcm90b3R5cGUuX29uTGlua0xlYXZlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdGhpcy5fc2V0Q2VsbFVuZGVybGluZShlLngxLCBlLngyLCBlLnkxLCBlLnkyLCBlLmNvbHMsIGZhbHNlKTtcbiAgICB9O1xuICAgIERvbVJlbmRlcmVyLnByb3RvdHlwZS5fc2V0Q2VsbFVuZGVybGluZSA9IGZ1bmN0aW9uICh4LCB4MiwgeSwgeTIsIGNvbHMsIGVuYWJsZWQpIHtcbiAgICAgICAgd2hpbGUgKHggIT09IHgyIHx8IHkgIT09IHkyKSB7XG4gICAgICAgICAgICB2YXIgcm93ID0gdGhpcy5fcm93RWxlbWVudHNbeV07XG4gICAgICAgICAgICBpZiAoIXJvdykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBzcGFuID0gcm93LmNoaWxkcmVuW3hdO1xuICAgICAgICAgICAgc3Bhbi5zdHlsZS50ZXh0RGVjb3JhdGlvbiA9IGVuYWJsZWQgPyAndW5kZXJsaW5lJyA6ICdub25lJztcbiAgICAgICAgICAgIHggPSAoeCArIDEpICUgY29scztcbiAgICAgICAgICAgIGlmICh4ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgeSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gRG9tUmVuZGVyZXI7XG59KEV2ZW50RW1pdHRlcl8xLkV2ZW50RW1pdHRlcikpO1xuZXhwb3J0cy5Eb21SZW5kZXJlciA9IERvbVJlbmRlcmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RG9tUmVuZGVyZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQnVmZmVyXzEgPSByZXF1aXJlKFwiLi4vLi4vQnVmZmVyXCIpO1xudmFyIFR5cGVzXzEgPSByZXF1aXJlKFwiLi4vYXRsYXMvVHlwZXNcIik7XG5leHBvcnRzLkJPTERfQ0xBU1MgPSAneHRlcm0tYm9sZCc7XG5leHBvcnRzLklUQUxJQ19DTEFTUyA9ICd4dGVybS1pdGFsaWMnO1xuZXhwb3J0cy5DVVJTT1JfQ0xBU1MgPSAneHRlcm0tY3Vyc29yJztcbmV4cG9ydHMuQ1VSU09SX1NUWUxFX0JMT0NLX0NMQVNTID0gJ3h0ZXJtLWN1cnNvci1ibG9jayc7XG5leHBvcnRzLkNVUlNPUl9TVFlMRV9CQVJfQ0xBU1MgPSAneHRlcm0tY3Vyc29yLWJhcic7XG5leHBvcnRzLkNVUlNPUl9TVFlMRV9VTkRFUkxJTkVfQ0xBU1MgPSAneHRlcm0tY3Vyc29yLXVuZGVybGluZSc7XG52YXIgRG9tUmVuZGVyZXJSb3dGYWN0b3J5ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEb21SZW5kZXJlclJvd0ZhY3RvcnkoX2RvY3VtZW50KSB7XG4gICAgICAgIHRoaXMuX2RvY3VtZW50ID0gX2RvY3VtZW50O1xuICAgIH1cbiAgICBEb21SZW5kZXJlclJvd0ZhY3RvcnkucHJvdG90eXBlLmNyZWF0ZVJvdyA9IGZ1bmN0aW9uIChsaW5lRGF0YSwgaXNDdXJzb3JSb3csIGN1cnNvclN0eWxlLCBjdXJzb3JYLCBjZWxsV2lkdGgsIGNvbHMpIHtcbiAgICAgICAgdmFyIGZyYWdtZW50ID0gdGhpcy5fZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgICB2YXIgbGluZUxlbmd0aCA9IDA7XG4gICAgICAgIGZvciAodmFyIHggPSBNYXRoLm1pbihsaW5lRGF0YS5sZW5ndGgsIGNvbHMpIC0gMTsgeCA+PSAwOyB4LS0pIHtcbiAgICAgICAgICAgIHZhciBjaGFyRGF0YSA9IGxpbmVEYXRhLmdldCh4KTtcbiAgICAgICAgICAgIHZhciBjb2RlID0gY2hhckRhdGFbQnVmZmVyXzEuQ0hBUl9EQVRBX0NPREVfSU5ERVhdO1xuICAgICAgICAgICAgaWYgKGNvZGUgIT09IEJ1ZmZlcl8xLk5VTExfQ0VMTF9DT0RFIHx8IChpc0N1cnNvclJvdyAmJiB4ID09PSBjdXJzb3JYKSkge1xuICAgICAgICAgICAgICAgIGxpbmVMZW5ndGggPSB4ICsgMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IGxpbmVMZW5ndGg7IHgrKykge1xuICAgICAgICAgICAgdmFyIGNoYXJEYXRhID0gbGluZURhdGEuZ2V0KHgpO1xuICAgICAgICAgICAgdmFyIGNoYXIgPSBjaGFyRGF0YVtCdWZmZXJfMS5DSEFSX0RBVEFfQ0hBUl9JTkRFWF07XG4gICAgICAgICAgICB2YXIgYXR0ciA9IGNoYXJEYXRhW0J1ZmZlcl8xLkNIQVJfREFUQV9BVFRSX0lOREVYXTtcbiAgICAgICAgICAgIHZhciB3aWR0aCA9IGNoYXJEYXRhW0J1ZmZlcl8xLkNIQVJfREFUQV9XSURUSF9JTkRFWF07XG4gICAgICAgICAgICBpZiAod2lkdGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjaGFyRWxlbWVudCA9IHRoaXMuX2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgICAgIGlmICh3aWR0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBjaGFyRWxlbWVudC5zdHlsZS53aWR0aCA9IGNlbGxXaWR0aCAqIHdpZHRoICsgXCJweFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGZsYWdzID0gYXR0ciA+PiAxODtcbiAgICAgICAgICAgIHZhciBiZyA9IGF0dHIgJiAweDFmZjtcbiAgICAgICAgICAgIHZhciBmZyA9IChhdHRyID4+IDkpICYgMHgxZmY7XG4gICAgICAgICAgICBpZiAoaXNDdXJzb3JSb3cgJiYgeCA9PT0gY3Vyc29yWCkge1xuICAgICAgICAgICAgICAgIGNoYXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoZXhwb3J0cy5DVVJTT1JfQ0xBU1MpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoY3Vyc29yU3R5bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYmFyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoZXhwb3J0cy5DVVJTT1JfU1RZTEVfQkFSX0NMQVNTKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICd1bmRlcmxpbmUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhckVsZW1lbnQuY2xhc3NMaXN0LmFkZChleHBvcnRzLkNVUlNPUl9TVFlMRV9VTkRFUkxJTkVfQ0xBU1MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFyRWxlbWVudC5jbGFzc0xpc3QuYWRkKGV4cG9ydHMuQ1VSU09SX1NUWUxFX0JMT0NLX0NMQVNTKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmbGFncyAmIDgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGVtcCA9IGJnO1xuICAgICAgICAgICAgICAgIGJnID0gZmc7XG4gICAgICAgICAgICAgICAgZmcgPSB0ZW1wO1xuICAgICAgICAgICAgICAgIGlmIChmZyA9PT0gVHlwZXNfMS5ERUZBVUxUX0NPTE9SKSB7XG4gICAgICAgICAgICAgICAgICAgIGZnID0gVHlwZXNfMS5JTlZFUlRFRF9ERUZBVUxUX0NPTE9SO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYmcgPT09IFR5cGVzXzEuREVGQVVMVF9DT0xPUikge1xuICAgICAgICAgICAgICAgICAgICBiZyA9IFR5cGVzXzEuSU5WRVJURURfREVGQVVMVF9DT0xPUjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZmxhZ3MgJiAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZnIDwgOCkge1xuICAgICAgICAgICAgICAgICAgICBmZyArPSA4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjaGFyRWxlbWVudC5jbGFzc0xpc3QuYWRkKGV4cG9ydHMuQk9MRF9DTEFTUyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZmxhZ3MgJiA2NCkge1xuICAgICAgICAgICAgICAgIGNoYXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoZXhwb3J0cy5JVEFMSUNfQ0xBU1MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2hhckVsZW1lbnQudGV4dENvbnRlbnQgPSBjaGFyO1xuICAgICAgICAgICAgaWYgKGZnICE9PSBUeXBlc18xLkRFRkFVTFRfQ09MT1IpIHtcbiAgICAgICAgICAgICAgICBjaGFyRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwieHRlcm0tZmctXCIgKyBmZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYmcgIT09IFR5cGVzXzEuREVGQVVMVF9DT0xPUikge1xuICAgICAgICAgICAgICAgIGNoYXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ4dGVybS1iZy1cIiArIGJnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKGNoYXJFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnJhZ21lbnQ7XG4gICAgfTtcbiAgICByZXR1cm4gRG9tUmVuZGVyZXJSb3dGYWN0b3J5O1xufSgpKTtcbmV4cG9ydHMuRG9tUmVuZGVyZXJSb3dGYWN0b3J5ID0gRG9tUmVuZGVyZXJSb3dGYWN0b3J5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RG9tUmVuZGVyZXJSb3dGYWN0b3J5LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEVzY2FwZVNlcXVlbmNlc18xID0gcmVxdWlyZShcIi4uLy4uL2NvbW1vbi9kYXRhL0VzY2FwZVNlcXVlbmNlc1wiKTtcbnZhciBLRVlDT0RFX0tFWV9NQVBQSU5HUyA9IHtcbiAgICA0ODogWycwJywgJyknXSxcbiAgICA0OTogWycxJywgJyEnXSxcbiAgICA1MDogWycyJywgJ0AnXSxcbiAgICA1MTogWyczJywgJyMnXSxcbiAgICA1MjogWyc0JywgJyQnXSxcbiAgICA1MzogWyc1JywgJyUnXSxcbiAgICA1NDogWyc2JywgJ14nXSxcbiAgICA1NTogWyc3JywgJyYnXSxcbiAgICA1NjogWyc4JywgJyonXSxcbiAgICA1NzogWyc5JywgJygnXSxcbiAgICAxODY6IFsnOycsICc6J10sXG4gICAgMTg3OiBbJz0nLCAnKyddLFxuICAgIDE4ODogWycsJywgJzwnXSxcbiAgICAxODk6IFsnLScsICdfJ10sXG4gICAgMTkwOiBbJy4nLCAnPiddLFxuICAgIDE5MTogWycvJywgJz8nXSxcbiAgICAxOTI6IFsnYCcsICd+J10sXG4gICAgMjE5OiBbJ1snLCAneyddLFxuICAgIDIyMDogWydcXFxcJywgJ3wnXSxcbiAgICAyMjE6IFsnXScsICd9J10sXG4gICAgMjIyOiBbJ1xcJycsICdcIiddXG59O1xuZnVuY3Rpb24gZXZhbHVhdGVLZXlib2FyZEV2ZW50KGV2LCBhcHBsaWNhdGlvbkN1cnNvck1vZGUsIGlzTWFjLCBtYWNPcHRpb25Jc01ldGEpIHtcbiAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICB0eXBlOiAwLFxuICAgICAgICBjYW5jZWw6IGZhbHNlLFxuICAgICAgICBrZXk6IHVuZGVmaW5lZFxuICAgIH07XG4gICAgdmFyIG1vZGlmaWVycyA9IChldi5zaGlmdEtleSA/IDEgOiAwKSB8IChldi5hbHRLZXkgPyAyIDogMCkgfCAoZXYuY3RybEtleSA/IDQgOiAwKSB8IChldi5tZXRhS2V5ID8gOCA6IDApO1xuICAgIHN3aXRjaCAoZXYua2V5Q29kZSkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBpZiAoZXYua2V5ID09PSAnVUlLZXlJbnB1dFVwQXJyb3cnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFwcGxpY2F0aW9uQ3Vyc29yTW9kZSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ09BJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnW0EnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGV2LmtleSA9PT0gJ1VJS2V5SW5wdXRMZWZ0QXJyb3cnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFwcGxpY2F0aW9uQ3Vyc29yTW9kZSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ09EJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnW0QnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGV2LmtleSA9PT0gJ1VJS2V5SW5wdXRSaWdodEFycm93Jykge1xuICAgICAgICAgICAgICAgIGlmIChhcHBsaWNhdGlvbkN1cnNvck1vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdPQyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1tDJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChldi5rZXkgPT09ICdVSUtleUlucHV0RG93bkFycm93Jykge1xuICAgICAgICAgICAgICAgIGlmIChhcHBsaWNhdGlvbkN1cnNvck1vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdPQic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1tCJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgaWYgKGV2LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkJTO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZXYuYWx0S2V5KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArIEVzY2FwZVNlcXVlbmNlc18xLkMwLkRFTDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5ERUw7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgaWYgKGV2LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbWic7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuSFQ7XG4gICAgICAgICAgICByZXN1bHQuY2FuY2VsID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkNSO1xuICAgICAgICAgICAgcmVzdWx0LmNhbmNlbCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0M7XG4gICAgICAgICAgICByZXN1bHQuY2FuY2VsID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM3OlxuICAgICAgICAgICAgaWYgKG1vZGlmaWVycykge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnWzE7JyArIChtb2RpZmllcnMgKyAxKSArICdEJztcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmtleSA9PT0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1sxOzNEJykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gaXNNYWMgPyBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnYicgOiBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnWzE7NUQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGFwcGxpY2F0aW9uQ3Vyc29yTW9kZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnT0QnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbRCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOTpcbiAgICAgICAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1sxOycgKyAobW9kaWZpZXJzICsgMSkgKyAnQyc7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5rZXkgPT09IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbMTszQycpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IGlzTWFjID8gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ2YnIDogRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1sxOzVDJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhcHBsaWNhdGlvbkN1cnNvck1vZGUpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ09DJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnW0MnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzg6XG4gICAgICAgICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbMTsnICsgKG1vZGlmaWVycyArIDEpICsgJ0EnO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQua2V5ID09PSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnWzE7M0EnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnWzE7NUEnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGFwcGxpY2F0aW9uQ3Vyc29yTW9kZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnT0EnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbQSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1sxOycgKyAobW9kaWZpZXJzICsgMSkgKyAnQic7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5rZXkgPT09IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbMTszQicpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbMTs1Qic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYXBwbGljYXRpb25DdXJzb3JNb2RlKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdPQic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1tCJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQ1OlxuICAgICAgICAgICAgaWYgKCFldi5zaGlmdEtleSAmJiAhZXYuY3RybEtleSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnWzJ+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQ2OlxuICAgICAgICAgICAgaWYgKG1vZGlmaWVycykge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnWzM7JyArIChtb2RpZmllcnMgKyAxKSArICd+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnWzN+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM2OlxuICAgICAgICAgICAgaWYgKG1vZGlmaWVycykge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnWzE7JyArIChtb2RpZmllcnMgKyAxKSArICdIJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGFwcGxpY2F0aW9uQ3Vyc29yTW9kZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnT0gnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbSCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzNTpcbiAgICAgICAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1sxOycgKyAobW9kaWZpZXJzICsgMSkgKyAnRic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhcHBsaWNhdGlvbkN1cnNvck1vZGUpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ09GJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnW0YnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzM6XG4gICAgICAgICAgICBpZiAoZXYuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQudHlwZSA9IDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1s1fic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICAgIGlmIChldi5zaGlmdEtleSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC50eXBlID0gMztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnWzZ+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDExMjpcbiAgICAgICAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1sxOycgKyAobW9kaWZpZXJzICsgMSkgKyAnUCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ09QJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDExMzpcbiAgICAgICAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1sxOycgKyAobW9kaWZpZXJzICsgMSkgKyAnUSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ09RJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDExNDpcbiAgICAgICAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1sxOycgKyAobW9kaWZpZXJzICsgMSkgKyAnUic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ09SJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1sxOycgKyAobW9kaWZpZXJzICsgMSkgKyAnUyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ09TJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDExNjpcbiAgICAgICAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1sxNTsnICsgKG1vZGlmaWVycyArIDEpICsgJ34nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbMTV+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDExNzpcbiAgICAgICAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1sxNzsnICsgKG1vZGlmaWVycyArIDEpICsgJ34nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbMTd+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDExODpcbiAgICAgICAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1sxODsnICsgKG1vZGlmaWVycyArIDEpICsgJ34nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbMTh+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDExOTpcbiAgICAgICAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1sxOTsnICsgKG1vZGlmaWVycyArIDEpICsgJ34nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbMTl+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDEyMDpcbiAgICAgICAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1syMDsnICsgKG1vZGlmaWVycyArIDEpICsgJ34nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbMjB+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDEyMTpcbiAgICAgICAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1syMTsnICsgKG1vZGlmaWVycyArIDEpICsgJ34nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbMjF+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDEyMjpcbiAgICAgICAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1syMzsnICsgKG1vZGlmaWVycyArIDEpICsgJ34nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbMjN+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDEyMzpcbiAgICAgICAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1syNDsnICsgKG1vZGlmaWVycyArIDEpICsgJ34nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbMjR+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgaWYgKGV2LmN0cmxLZXkgJiYgIWV2LnNoaWZ0S2V5ICYmICFldi5hbHRLZXkgJiYgIWV2Lm1ldGFLZXkpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXYua2V5Q29kZSA+PSA2NSAmJiBldi5rZXlDb2RlIDw9IDkwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGV2LmtleUNvZGUgLSA2NCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGV2LmtleUNvZGUgPT09IDMyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChldi5rZXlDb2RlID49IDUxICYmIGV2LmtleUNvZGUgPD0gNTUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoZXYua2V5Q29kZSAtIDUxICsgMjcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChldi5rZXlDb2RlID09PSA1Nikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gU3RyaW5nLmZyb21DaGFyQ29kZSgxMjcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChldi5rZXlDb2RlID09PSAyMTkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMjcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChldi5rZXlDb2RlID09PSAyMjApIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMjgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChldi5rZXlDb2RlID09PSAyMjEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMjkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCghaXNNYWMgfHwgbWFjT3B0aW9uSXNNZXRhKSAmJiBldi5hbHRLZXkgJiYgIWV2Lm1ldGFLZXkpIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5TWFwcGluZyA9IEtFWUNPREVfS0VZX01BUFBJTkdTW2V2LmtleUNvZGVdO1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBrZXlNYXBwaW5nICYmIGtleU1hcHBpbmdbIWV2LnNoaWZ0S2V5ID8gMCA6IDFdO1xuICAgICAgICAgICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArIGtleTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZXYua2V5Q29kZSA+PSA2NSAmJiBldi5rZXlDb2RlIDw9IDkwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXlDb2RlID0gZXYuY3RybEtleSA/IGV2LmtleUNvZGUgLSA2NCA6IGV2LmtleUNvZGUgKyAzMjtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArIFN0cmluZy5mcm9tQ2hhckNvZGUoa2V5Q29kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNNYWMgJiYgIWV2LmFsdEtleSAmJiAhZXYuY3RybEtleSAmJiBldi5tZXRhS2V5KSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2LmtleUNvZGUgPT09IDY1KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC50eXBlID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuZXZhbHVhdGVLZXlib2FyZEV2ZW50ID0gZXZhbHVhdGVLZXlib2FyZEV2ZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9S2V5Ym9hcmQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgVGVybWluYWxfMSA9IHJlcXVpcmUoXCIuL3B1YmxpYy9UZXJtaW5hbFwiKTtcbm1vZHVsZS5leHBvcnRzID0gVGVybWluYWxfMS5UZXJtaW5hbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXh0ZXJtLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=