!function(t){var e={};function r(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=t,r.c=e,r.d=function(t,e,i){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)r.d(i,n,function(e){return t[e]}.bind(null,n));return i},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=47)}([function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var s=r(74),o=r(2),a=r(75),l=r(1);e.DEFAULT_ATTR=256|l.DEFAULT_COLOR<<9,e.CHAR_DATA_ATTR_INDEX=0,e.CHAR_DATA_CHAR_INDEX=1,e.CHAR_DATA_WIDTH_INDEX=2,e.CHAR_DATA_CODE_INDEX=3,e.MAX_BUFFER_SIZE=4294967295,e.NULL_CELL_CHAR=" ",e.NULL_CELL_WIDTH=1,e.NULL_CELL_CODE=32;var c=function(){function t(t,e){this._terminal=t,this._hasScrollback=e,this.markers=[],this.clear()}return t.prototype.setBufferLineFactory=function(t){"JsArray"===t?this._bufferLineConstructor!==a.BufferLineJSArray&&(this._bufferLineConstructor=a.BufferLineJSArray,this._recreateLines()):this._bufferLineConstructor!==a.BufferLine&&(this._bufferLineConstructor=a.BufferLine,this._recreateLines())},t.prototype._recreateLines=function(){if(this.lines)for(var t=0;t<this.lines.length;++t){for(var e=this.lines.get(t),r=new this._bufferLineConstructor(e.length),i=0;i<e.length;++i)r.set(i,e.get(i));this.lines.set(t,r)}},t.prototype.getBlankLine=function(t,r){var i=[t,e.NULL_CELL_CHAR,e.NULL_CELL_WIDTH,e.NULL_CELL_CODE];return new this._bufferLineConstructor(this._terminal.cols,i,r)},Object.defineProperty(t.prototype,"hasScrollback",{get:function(){return this._hasScrollback&&this.lines.maxLength>this._terminal.rows},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isCursorInViewport",{get:function(){var t=this.ybase+this.y-this.ydisp;return t>=0&&t<this._terminal.rows},enumerable:!0,configurable:!0}),t.prototype._getCorrectBufferLength=function(t){if(!this._hasScrollback)return t;var r=t+this._terminal.options.scrollback;return r>e.MAX_BUFFER_SIZE?e.MAX_BUFFER_SIZE:r},t.prototype.fillViewportRows=function(t){if(0===this.lines.length){void 0===t&&(t=e.DEFAULT_ATTR);for(var r=this._terminal.rows;r--;)this.lines.push(this.getBlankLine(t))}},t.prototype.clear=function(){this.setBufferLineFactory(this._terminal.options.experimentalBufferLineImpl),this.ydisp=0,this.ybase=0,this.y=0,this.x=0,this.lines=new s.CircularList(this._getCorrectBufferLength(this._terminal.rows)),this.scrollTop=0,this.scrollBottom=this._terminal.rows-1,this.setupTabStops()},t.prototype.resize=function(t,r){var i=this._getCorrectBufferLength(r);if(i>this.lines.maxLength&&(this.lines.maxLength=i),this.lines.length>0){if(this._terminal.cols<t)for(var n=[e.DEFAULT_ATTR,e.NULL_CELL_CHAR,e.NULL_CELL_WIDTH,e.NULL_CELL_CODE],s=0;s<this.lines.length;s++)this.lines.get(s).resize(t,n);var o=0;if(this._terminal.rows<r){for(var a=this._terminal.rows;a<r;a++)if(this.lines.length<r+this.ybase)if(this.ybase>0&&this.lines.length<=this.ybase+this.y+o+1)this.ybase--,o++,this.ydisp>0&&this.ydisp--;else{var l=[e.DEFAULT_ATTR,e.NULL_CELL_CHAR,e.NULL_CELL_WIDTH,e.NULL_CELL_CODE];this.lines.push(new this._bufferLineConstructor(t,l))}}else for(a=this._terminal.rows;a>r;a--)this.lines.length>r+this.ybase&&(this.lines.length>this.ybase+this.y+1?this.lines.pop():(this.ybase++,this.ydisp++));if(i<this.lines.maxLength){var c=this.lines.length-i;c>0&&(this.lines.trimStart(c),this.ybase=Math.max(this.ybase-c,0),this.ydisp=Math.max(this.ydisp-c,0)),this.lines.maxLength=i}this.x=Math.min(this.x,t-1),this.y=Math.min(this.y,r-1),o&&(this.y+=o),this.savedY=Math.min(this.savedY,r-1),this.savedX=Math.min(this.savedX,t-1),this.scrollTop=0}this.scrollBottom=r-1},t.prototype.stringIndexToBufferIndex=function(t,r){for(;r;){for(var i=this.lines.get(t),n=0;n<i.length;++n)if((r-=i.get(n)[e.CHAR_DATA_CHAR_INDEX].length)<0)return[t,n];t++}return[t,0]},t.prototype.translateBufferLineToString=function(t,r,i,n){void 0===i&&(i=0),void 0===n&&(n=null);var s="",o=this.lines.get(t);if(!o)return"";var a=i;null===n&&(n=o.length);for(var l=n,c=0;c<o.length;c++){var h=o.get(c);s+=h[e.CHAR_DATA_CHAR_INDEX],0===h[e.CHAR_DATA_WIDTH_INDEX]?(i>=c&&a--,n>c&&l--):h[e.CHAR_DATA_CHAR_INDEX].length>1&&(i>c&&(a+=h[e.CHAR_DATA_CHAR_INDEX].length-1),n>c&&(l+=h[e.CHAR_DATA_CHAR_INDEX].length-1))}if(r){var u=s.search(/\s+$/);if(-1!==u&&(l=Math.min(l,u)),l<=a)return""}return s.substring(a,l)},t.prototype.getWrappedRangeForLine=function(t){for(var e=t,r=t;e>0&&this.lines.get(e).isWrapped;)e--;for(;r+1<this.lines.length&&this.lines.get(r+1).isWrapped;)r++;return{first:e,last:r}},t.prototype.setupTabStops=function(t){for(null!=t?this.tabs[t]||(t=this.prevStop(t)):(this.tabs={},t=0);t<this._terminal.cols;t+=this._terminal.options.tabStopWidth)this.tabs[t]=!0},t.prototype.prevStop=function(t){for(null==t&&(t=this.x);!this.tabs[--t]&&t>0;);return t>=this._terminal.cols?this._terminal.cols-1:t<0?0:t},t.prototype.nextStop=function(t){for(null==t&&(t=this.x);!this.tabs[++t]&&t<this._terminal.cols;);return t>=this._terminal.cols?this._terminal.cols-1:t<0?0:t},t.prototype.addMarker=function(t){var e=this,r=new h(t);return this.markers.push(r),r.register(this.lines.addDisposableListener("trim",function(t){r.line-=t,r.line<0&&r.dispose()})),r.register(r.addDisposableListener("dispose",function(){return e._removeMarker(r)})),r},t.prototype._removeMarker=function(t){this.markers.splice(this.markers.indexOf(t),1)},t.prototype.iterator=function(t,e,r,i,n){return new u(this,t,e,r,i,n)},t}();e.Buffer=c;var h=function(t){function e(r){var i=t.call(this)||this;return i.line=r,i._id=e._nextId++,i.isDisposed=!1,i}return n(e,t),Object.defineProperty(e.prototype,"id",{get:function(){return this._id},enumerable:!0,configurable:!0}),e.prototype.dispose=function(){this.isDisposed||(this.isDisposed=!0,this.emit("dispose"),t.prototype.dispose.call(this))},e._nextId=1,e}(o.EventEmitter);e.Marker=h;var u=function(){function t(t,e,r,i,n,s){void 0===r&&(r=0),void 0===i&&(i=t.lines.length),void 0===n&&(n=0),void 0===s&&(s=0),this._buffer=t,this._trimRight=e,this._startIndex=r,this._endIndex=i,this._startOverscan=n,this._endOverscan=s,this._startIndex<0&&(this._startIndex=0),this._endIndex>this._buffer.lines.length&&(this._endIndex=this._buffer.lines.length),this._current=this._startIndex}return t.prototype.hasNext=function(){return this._current<this._endIndex},t.prototype.next=function(){var t=this._buffer.getWrappedRangeForLine(this._current);t.first<this._startIndex-this._startOverscan&&(t.first=this._startIndex-this._startOverscan),t.last>this._endIndex+this._endOverscan&&(t.last=this._endIndex+this._endOverscan),t.first=Math.max(t.first,0),t.last=Math.min(t.last,this._buffer.lines.length);for(var e="",r=t.first;r<=t.last;++r)e+=this._buffer.translateBufferLineToString(r,!!this._trimRight&&r===t.last);return this._current=t.last+1,{range:t,content:e}},t}();e.BufferStringIterator=u},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DEFAULT_COLOR=256,e.INVERTED_DEFAULT_COLOR=257,e.DIM_OPACITY=.5,e.CHAR_ATLAS_CELL_SPACING=1},function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var s=function(t){function e(){var e=t.call(this)||this;return e._events=e._events||{},e}return n(e,t),e.prototype.on=function(t,e){this._events[t]=this._events[t]||[],this._events[t].push(e)},e.prototype.addDisposableListener=function(t,e){var r=this;this.on(t,e);var i=!1;return{dispose:function(){i||(r.off(t,e),i=!0)}}},e.prototype.off=function(t,e){if(this._events[t])for(var r=this._events[t],i=r.length;i--;)if(r[i]===e)return void r.splice(i,1)},e.prototype.removeAllListeners=function(t){this._events[t]&&delete this._events[t]},e.prototype.emit=function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];if(this._events[t])for(var i=this._events[t],n=0;n<i.length;n++)i[n].apply(this,e)},e.prototype.listeners=function(t){return this._events[t]||[]},e.prototype.dispose=function(){t.prototype.dispose.call(this),this._events={}},e}(r(3).Disposable);e.EventEmitter=s},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(){this._disposables=[],this._isDisposed=!1}return t.prototype.dispose=function(){this._isDisposed=!0,this._disposables.forEach(function(t){return t.dispose()}),this._disposables.length=0},t.prototype.register=function(t){this._disposables.push(t)},t.prototype.unregister=function(t){var e=this._disposables.indexOf(t);-1!==e&&this._disposables.splice(e,1)},t}();e.Disposable=i},function(t,e,r){function i(t){if(t)return function(t){for(var e in i.prototype)t[e]=i.prototype[e];return t}(t)}t.exports=i,i.prototype.on=i.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},i.prototype.once=function(t,e){function r(){this.off(t,r),e.apply(this,arguments)}return r.fn=e,this.on(t,r),this},i.prototype.off=i.prototype.removeListener=i.prototype.removeAllListeners=i.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var r,i=this._callbacks["$"+t];if(!i)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var n=0;n<i.length;n++)if((r=i[n])===e||r.fn===e){i.splice(n,1);break}return this},i.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),r=this._callbacks["$"+t];if(r)for(var i=0,n=(r=r.slice(0)).length;i<n;++i)r[i].apply(this,e);return this},i.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},i.prototype.hasListeners=function(t){return!!this.listeners(t).length}},function(t,e,r){var i,n=r(60),s=r(33),o=r(61),a=r(62),l=r(63);"undefined"!=typeof ArrayBuffer&&(i=r(64));var c="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),h="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),u=c||h;e.protocol=3;var f=e.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},p=n(f),d={type:"error",data:"parser error"},_=r(65);function m(t,e,r){for(var i=new Array(t.length),n=a(t.length,r),s=function(t,r,n){e(r,function(e,r){i[t]=r,n(e,i)})},o=0;o<t.length;o++)s(o,t[o],n)}e.encodePacket=function(t,r,i,n){"function"==typeof r&&(n=r,r=!1),"function"==typeof i&&(n=i,i=null);var s=void 0===t.data?void 0:t.data.buffer||t.data;if("undefined"!=typeof ArrayBuffer&&s instanceof ArrayBuffer)return function(t,r,i){if(!r)return e.encodeBase64Packet(t,i);var n=t.data,s=new Uint8Array(n),o=new Uint8Array(1+n.byteLength);o[0]=f[t.type];for(var a=0;a<s.length;a++)o[a+1]=s[a];return i(o.buffer)}(t,r,n);if(void 0!==_&&s instanceof _)return function(t,r,i){if(!r)return e.encodeBase64Packet(t,i);if(u)return function(t,r,i){if(!r)return e.encodeBase64Packet(t,i);var n=new FileReader;return n.onload=function(){e.encodePacket({type:t.type,data:n.result},r,!0,i)},n.readAsArrayBuffer(t.data)}(t,r,i);var n=new Uint8Array(1);n[0]=f[t.type];var s=new _([n.buffer,t.data]);return i(s)}(t,r,n);if(s&&s.base64)return function(t,r){var i="b"+e.packets[t.type]+t.data.data;return r(i)}(t,n);var o=f[t.type];return void 0!==t.data&&(o+=i?l.encode(String(t.data),{strict:!1}):String(t.data)),n(""+o)},e.encodeBase64Packet=function(t,r){var i,n="b"+e.packets[t.type];if(void 0!==_&&t.data instanceof _){var s=new FileReader;return s.onload=function(){var t=s.result.split(",")[1];r(n+t)},s.readAsDataURL(t.data)}try{i=String.fromCharCode.apply(null,new Uint8Array(t.data))}catch(e){for(var o=new Uint8Array(t.data),a=new Array(o.length),l=0;l<o.length;l++)a[l]=o[l];i=String.fromCharCode.apply(null,a)}return n+=btoa(i),r(n)},e.decodePacket=function(t,r,i){if(void 0===t)return d;if("string"==typeof t){if("b"===t.charAt(0))return e.decodeBase64Packet(t.substr(1),r);if(i&&!1===(t=function(t){try{t=l.decode(t,{strict:!1})}catch(t){return!1}return t}(t)))return d;var n=t.charAt(0);return Number(n)==n&&p[n]?t.length>1?{type:p[n],data:t.substring(1)}:{type:p[n]}:d}n=new Uint8Array(t)[0];var s=o(t,1);return _&&"blob"===r&&(s=new _([s])),{type:p[n],data:s}},e.decodeBase64Packet=function(t,e){var r=p[t.charAt(0)];if(!i)return{type:r,data:{base64:!0,data:t.substr(1)}};var n=i.decode(t.substr(1));return"blob"===e&&_&&(n=new _([n])),{type:r,data:n}},e.encodePayload=function(t,r,i){"function"==typeof r&&(i=r,r=null);var n=s(t);if(r&&n)return _&&!u?e.encodePayloadAsBlob(t,i):e.encodePayloadAsArrayBuffer(t,i);if(!t.length)return i("0:");m(t,function(t,i){e.encodePacket(t,!!n&&r,!1,function(t){i(null,function(t){return t.length+":"+t}(t))})},function(t,e){return i(e.join(""))})},e.decodePayload=function(t,r,i){if("string"!=typeof t)return e.decodePayloadAsBinary(t,r,i);var n;if("function"==typeof r&&(i=r,r=null),""===t)return i(d,0,1);for(var s,o,a="",l=0,c=t.length;l<c;l++){var h=t.charAt(l);if(":"===h){if(""===a||a!=(s=Number(a)))return i(d,0,1);if(a!=(o=t.substr(l+1,s)).length)return i(d,0,1);if(o.length){if(n=e.decodePacket(o,r,!1),d.type===n.type&&d.data===n.data)return i(d,0,1);if(!1===i(n,l+s,c))return}l+=s,a=""}else a+=h}return""!==a?i(d,0,1):void 0},e.encodePayloadAsArrayBuffer=function(t,r){if(!t.length)return r(new ArrayBuffer(0));m(t,function(t,r){e.encodePacket(t,!0,!0,function(t){return r(null,t)})},function(t,e){var i=e.reduce(function(t,e){var r;return t+(r="string"==typeof e?e.length:e.byteLength).toString().length+r+2},0),n=new Uint8Array(i),s=0;return e.forEach(function(t){var e="string"==typeof t,r=t;if(e){for(var i=new Uint8Array(t.length),o=0;o<t.length;o++)i[o]=t.charCodeAt(o);r=i.buffer}n[s++]=e?0:1;var a=r.byteLength.toString();for(o=0;o<a.length;o++)n[s++]=parseInt(a[o]);n[s++]=255;for(i=new Uint8Array(r),o=0;o<i.length;o++)n[s++]=i[o]}),r(n.buffer)})},e.encodePayloadAsBlob=function(t,r){m(t,function(t,r){e.encodePacket(t,!0,!0,function(t){var e=new Uint8Array(1);if(e[0]=1,"string"==typeof t){for(var i=new Uint8Array(t.length),n=0;n<t.length;n++)i[n]=t.charCodeAt(n);t=i.buffer,e[0]=0}var s=(t instanceof ArrayBuffer?t.byteLength:t.size).toString(),o=new Uint8Array(s.length+1);for(n=0;n<s.length;n++)o[n]=parseInt(s[n]);if(o[s.length]=255,_){var a=new _([e.buffer,o.buffer,t]);r(null,a)}})},function(t,e){return r(new _(e))})},e.decodePayloadAsBinary=function(t,r,i){"function"==typeof r&&(i=r,r=null);for(var n=t,s=[];n.byteLength>0;){for(var a=new Uint8Array(n),l=0===a[0],c="",h=1;255!==a[h];h++){if(c.length>310)return i(d,0,1);c+=a[h]}n=o(n,2+c.length),c=parseInt(c);var u=o(n,0,c);if(l)try{u=String.fromCharCode.apply(null,new Uint8Array(u))}catch(t){var f=new Uint8Array(u);u="";for(h=0;h<f.length;h++)u+=String.fromCharCode(f[h])}s.push(u),n=o(n,c)}var p=s.length;s.forEach(function(t,n){i(e.decodePacket(t,r,!0),n,p)})}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(1);e.generateConfig=function(t,e,r,i){var n={foreground:i.foreground,background:i.background,cursor:null,cursorAccent:null,selection:null,ansi:i.ansi.slice(0,16)};return{type:r.options.experimentalCharAtlas,devicePixelRatio:window.devicePixelRatio,scaledCharWidth:t,scaledCharHeight:e,fontFamily:r.options.fontFamily,fontSize:r.options.fontSize,fontWeight:r.options.fontWeight,fontWeightBold:r.options.fontWeightBold,allowTransparency:r.options.allowTransparency,colors:n}},e.configEquals=function(t,e){for(var r=0;r<t.colors.ansi.length;r++)if(t.colors.ansi[r].rgba!==e.colors.ansi[r].rgba)return!1;return t.type===e.type&&t.devicePixelRatio===e.devicePixelRatio&&t.fontFamily===e.fontFamily&&t.fontSize===e.fontSize&&t.fontWeight===e.fontWeight&&t.fontWeightBold===e.fontWeightBold&&t.allowTransparency===e.allowTransparency&&t.scaledCharWidth===e.scaledCharWidth&&t.scaledCharHeight===e.scaledCharHeight&&t.colors.foreground===e.colors.foreground&&t.colors.background===e.colors.background},e.is256Color=function(t){return t<i.DEFAULT_COLOR}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i="undefined"==typeof navigator,n=i?"node":navigator.userAgent,s=i?"node":navigator.platform;function o(t,e){return t.indexOf(e)>=0}e.isFirefox=!!~n.indexOf("Firefox"),e.isSafari=/^((?!chrome|android).)*safari/i.test(n),e.isMSIE=!!~n.indexOf("MSIE")||!!~n.indexOf("Trident"),e.isMac=o(["Macintosh","MacIntel","MacPPC","Mac68K"],s),e.isIpad="iPad"===s,e.isIphone="iPhone"===s,e.isMSWindows=o(["Windows","Win16","Win32","WinCE"],s),e.isLinux=s.indexOf("Linux")>=0},function(t,e,r){(function(i){function n(){var t;try{t=e.storage.debug}catch(t){}return!t&&void 0!==i&&"env"in i&&(t=i.env.DEBUG),t}(e=t.exports=r(49)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},e.formatArgs=function(t){var r=this.useColors;if(t[0]=(r?"%c":"")+this.namespace+(r?" %c":" ")+t[0]+(r?"%c ":" ")+"+"+e.humanize(this.diff),!r)return;var i="color: "+this.color;t.splice(1,0,i,"color: inherit");var n=0,s=0;t[0].replace(/%[a-zA-Z%]/g,function(t){"%%"!==t&&(n++,"%c"===t&&(s=n))}),t.splice(s,0,i)},e.save=function(t){try{null==t?e.storage.removeItem("debug"):e.storage.debug=t}catch(t){}},e.load=n,e.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.formatters.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}},e.enable(n())}).call(this,r(16))},function(t,e){e.encode=function(t){var e="";for(var r in t)t.hasOwnProperty(r)&&(e.length&&(e+="&"),e+=encodeURIComponent(r)+"="+encodeURIComponent(t[r]));return e},e.decode=function(t){for(var e={},r=t.split("&"),i=0,n=r.length;i<n;i++){var s=r[i].split("=");e[decodeURIComponent(s[0])]=decodeURIComponent(s[1])}return e}},function(t,e){t.exports=function(t,e){var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}},function(t,e,r){(function(i){function n(){var t;try{t=e.storage.debug}catch(t){}return!t&&void 0!==i&&"env"in i&&(t=i.env.DEBUG),t}(e=t.exports=r(66)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},e.formatArgs=function(t){var r=this.useColors;if(t[0]=(r?"%c":"")+this.namespace+(r?" %c":" ")+t[0]+(r?"%c ":" ")+"+"+e.humanize(this.diff),!r)return;var i="color: "+this.color;t.splice(1,0,i,"color: inherit");var n=0,s=0;t[0].replace(/%[a-zA-Z%]/g,function(t){"%%"!==t&&(n++,"%c"===t&&(s=n))}),t.splice(s,0,i)},e.save=function(t){try{null==t?e.storage.removeItem("debug"):e.storage.debug=t}catch(t){}},e.load=n,e.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.formatters.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}},e.enable(n())}).call(this,r(16))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.addDisposableDomListener=function(t,e,r,i){return t.addEventListener(e,r,i),{dispose:function(){r&&(t.removeEventListener(e,r,i),t=null,r=null)}}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t.NUL="\0",t.SOH="",t.STX="",t.ETX="",t.EOT="",t.ENQ="",t.ACK="",t.BEL="",t.BS="\b",t.HT="\t",t.LF="\n",t.VT="\v",t.FF="\f",t.CR="\r",t.SO="",t.SI="",t.DLE="",t.DC1="",t.DC2="",t.DC3="",t.DC4="",t.NAK="",t.SYN="",t.ETB="",t.CAN="",t.EM="",t.SUB="",t.ESC="",t.FS="",t.GS="",t.RS="",t.US="",t.SP=" ",t.DEL=""}(e.C0||(e.C0={})),function(t){t.PAD="",t.HOP="",t.BPH="",t.NBH="",t.IND="",t.NEL="",t.SSA="",t.ESA="",t.HTS="",t.HTJ="",t.VTS="",t.PLD="",t.PLU="",t.RI="",t.SS2="",t.SS3="",t.DCS="",t.PU1="",t.PU2="",t.STS="",t.CCH="",t.MW="",t.SPA="",t.EPA="",t.SOS="",t.SGCI="",t.SCI="",t.CSI="",t.ST="",t.OSC="",t.PM="",t.APC=""}(e.C1||(e.C1={}))},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(1),n=r(40),s=r(0),o=r(6),a=function(){function t(t,e,r,i,n){this._container=t,this._alpha=i,this._colors=n,this._scaledCharWidth=0,this._scaledCharHeight=0,this._scaledCellWidth=0,this._scaledCellHeight=0,this._scaledCharLeft=0,this._scaledCharTop=0,this._currentGlyphIdentifier={chars:"",code:0,bg:0,fg:0,bold:!1,dim:!1,italic:!1},this._canvas=document.createElement("canvas"),this._canvas.classList.add("xterm-"+e+"-layer"),this._canvas.style.zIndex=r.toString(),this._initCanvas(),this._container.appendChild(this._canvas)}return t.prototype.dispose=function(){this._container.removeChild(this._canvas),this._charAtlas&&this._charAtlas.dispose()},t.prototype._initCanvas=function(){this._ctx=this._canvas.getContext("2d",{alpha:this._alpha}),this._alpha||this.clearAll()},t.prototype.onOptionsChanged=function(t){},t.prototype.onBlur=function(t){},t.prototype.onFocus=function(t){},t.prototype.onCursorMove=function(t){},t.prototype.onGridChanged=function(t,e,r){},t.prototype.onSelectionChanged=function(t,e,r,i){void 0===i&&(i=!1)},t.prototype.onThemeChanged=function(t,e){this._refreshCharAtlas(t,e)},t.prototype.setTransparency=function(t,e){if(e!==this._alpha){var r=this._canvas;this._alpha=e,this._canvas=this._canvas.cloneNode(),this._initCanvas(),this._container.replaceChild(this._canvas,r),this._refreshCharAtlas(t,this._colors),this.onGridChanged(t,0,t.rows-1)}},t.prototype._refreshCharAtlas=function(t,e){this._scaledCharWidth<=0&&this._scaledCharHeight<=0||(this._charAtlas=n.acquireCharAtlas(t,e,this._scaledCharWidth,this._scaledCharHeight),this._charAtlas.warmUp())},t.prototype.resize=function(t,e){this._scaledCellWidth=e.scaledCellWidth,this._scaledCellHeight=e.scaledCellHeight,this._scaledCharWidth=e.scaledCharWidth,this._scaledCharHeight=e.scaledCharHeight,this._scaledCharLeft=e.scaledCharLeft,this._scaledCharTop=e.scaledCharTop,this._canvas.width=e.scaledCanvasWidth,this._canvas.height=e.scaledCanvasHeight,this._canvas.style.width=e.canvasWidth+"px",this._canvas.style.height=e.canvasHeight+"px",this._alpha||this.clearAll(),this._refreshCharAtlas(t,this._colors)},t.prototype.fillCells=function(t,e,r,i){this._ctx.fillRect(t*this._scaledCellWidth,e*this._scaledCellHeight,r*this._scaledCellWidth,i*this._scaledCellHeight)},t.prototype.fillBottomLineAtCells=function(t,e,r){void 0===r&&(r=1),this._ctx.fillRect(t*this._scaledCellWidth,(e+1)*this._scaledCellHeight-window.devicePixelRatio-1,r*this._scaledCellWidth,window.devicePixelRatio)},t.prototype.fillLeftLineAtCell=function(t,e){this._ctx.fillRect(t*this._scaledCellWidth,e*this._scaledCellHeight,window.devicePixelRatio,this._scaledCellHeight)},t.prototype.strokeRectAtCell=function(t,e,r,i){this._ctx.lineWidth=window.devicePixelRatio,this._ctx.strokeRect(t*this._scaledCellWidth+window.devicePixelRatio/2,e*this._scaledCellHeight+window.devicePixelRatio/2,r*this._scaledCellWidth-window.devicePixelRatio,i*this._scaledCellHeight-window.devicePixelRatio)},t.prototype.clearAll=function(){this._alpha?this._ctx.clearRect(0,0,this._canvas.width,this._canvas.height):(this._ctx.fillStyle=this._colors.background.css,this._ctx.fillRect(0,0,this._canvas.width,this._canvas.height))},t.prototype.clearCells=function(t,e,r,i){this._alpha?this._ctx.clearRect(t*this._scaledCellWidth,e*this._scaledCellHeight,r*this._scaledCellWidth,i*this._scaledCellHeight):(this._ctx.fillStyle=this._colors.background.css,this._ctx.fillRect(t*this._scaledCellWidth,e*this._scaledCellHeight,r*this._scaledCellWidth,i*this._scaledCellHeight))},t.prototype.fillCharTrueColor=function(t,e,r,i){this._ctx.font=this._getFont(t,!1,!1),this._ctx.textBaseline="top",this._clipRow(t,i),this._ctx.fillText(e[s.CHAR_DATA_CHAR_INDEX],r*this._scaledCellWidth+this._scaledCharLeft,i*this._scaledCellHeight+this._scaledCharTop)},t.prototype.drawChars=function(t,e,r,n,s,o,a,l,c,h,u){a+=t.options.drawBoldTextInBrightColors&&c&&a<8&&a!==i.INVERTED_DEFAULT_COLOR?8:0,this._currentGlyphIdentifier.chars=e,this._currentGlyphIdentifier.code=r,this._currentGlyphIdentifier.bg=l,this._currentGlyphIdentifier.fg=a,this._currentGlyphIdentifier.bold=c&&t.options.enableBold,this._currentGlyphIdentifier.dim=h,this._currentGlyphIdentifier.italic=u,this._charAtlas&&this._charAtlas.draw(this._ctx,this._currentGlyphIdentifier,s*this._scaledCellWidth+this._scaledCharLeft,o*this._scaledCellHeight+this._scaledCharTop)||this._drawUncachedChars(t,e,n,a,s,o,c&&t.options.enableBold,h,u)},t.prototype._drawUncachedChars=function(t,e,r,n,s,a,l,c,h){this._ctx.save(),this._ctx.font=this._getFont(t,l,h),this._ctx.textBaseline="top",n===i.INVERTED_DEFAULT_COLOR?this._ctx.fillStyle=this._colors.background.css:o.is256Color(n)?this._ctx.fillStyle=this._colors.ansi[n].css:this._ctx.fillStyle=this._colors.foreground.css,this._clipRow(t,a),c&&(this._ctx.globalAlpha=i.DIM_OPACITY),this._ctx.fillText(e,s*this._scaledCellWidth+this._scaledCharLeft,a*this._scaledCellHeight+this._scaledCharTop),this._ctx.restore()},t.prototype._clipRow=function(t,e){this._ctx.beginPath(),this._ctx.rect(0,e*this._scaledCellHeight,t.cols*this._scaledCellWidth,this._scaledCellHeight),this._ctx.clip()},t.prototype._getFont=function(t,e,r){return(r?"italic":"")+" "+(e?t.options.fontWeightBold:t.options.fontWeight)+" "+t.options.fontSize*window.devicePixelRatio+"px "+t.options.fontFamily},t}();e.BaseRenderLayer=a},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=l("#ffffff"),n=l("#000000"),s=l("#ffffff"),o=l("#000000"),a={css:"rgba(255, 255, 255, 0.3)",rgba:4294967159};function l(t){return{css:t,rgba:parseInt(t.slice(1),16)<<8|255}}function c(t){var e=t.toString(16);return e.length<2?"0"+e:e}e.DEFAULT_ANSI_COLORS=function(){for(var t=[l("#2e3436"),l("#cc0000"),l("#4e9a06"),l("#c4a000"),l("#3465a4"),l("#75507b"),l("#06989a"),l("#d3d7cf"),l("#555753"),l("#ef2929"),l("#8ae234"),l("#fce94f"),l("#729fcf"),l("#ad7fa8"),l("#34e2e2"),l("#eeeeec")],e=[0,95,135,175,215,255],r=0;r<216;r++){var i=e[r/36%6|0],n=e[r/6%6|0],s=e[r%6];t.push({css:"#"+c(i)+c(n)+c(s),rgba:(i<<24|n<<16|s<<8|255)>>>0})}for(r=0;r<24;r++){var o=8+10*r,a=c(o);t.push({css:"#"+a+a+a,rgba:(o<<24|o<<16|o<<8|255)>>>0})}return t}();var h=function(){function t(t,r){this.allowTransparency=r;var l=t.createElement("canvas");l.width=1,l.height=1,this._ctx=l.getContext("2d"),this._ctx.globalCompositeOperation="copy",this._litmusColor=this._ctx.createLinearGradient(0,0,1,1),this.colors={foreground:i,background:n,cursor:s,cursorAccent:o,selection:a,ansi:e.DEFAULT_ANSI_COLORS.slice()}}return t.prototype.setTheme=function(t){this.colors.foreground=this._parseColor(t.foreground,i),this.colors.background=this._parseColor(t.background,n),this.colors.cursor=this._parseColor(t.cursor,s,!0),this.colors.cursorAccent=this._parseColor(t.cursorAccent,o,!0),this.colors.selection=this._parseColor(t.selection,a,!0),this.colors.ansi[0]=this._parseColor(t.black,e.DEFAULT_ANSI_COLORS[0]),this.colors.ansi[1]=this._parseColor(t.red,e.DEFAULT_ANSI_COLORS[1]),this.colors.ansi[2]=this._parseColor(t.green,e.DEFAULT_ANSI_COLORS[2]),this.colors.ansi[3]=this._parseColor(t.yellow,e.DEFAULT_ANSI_COLORS[3]),this.colors.ansi[4]=this._parseColor(t.blue,e.DEFAULT_ANSI_COLORS[4]),this.colors.ansi[5]=this._parseColor(t.magenta,e.DEFAULT_ANSI_COLORS[5]),this.colors.ansi[6]=this._parseColor(t.cyan,e.DEFAULT_ANSI_COLORS[6]),this.colors.ansi[7]=this._parseColor(t.white,e.DEFAULT_ANSI_COLORS[7]),this.colors.ansi[8]=this._parseColor(t.brightBlack,e.DEFAULT_ANSI_COLORS[8]),this.colors.ansi[9]=this._parseColor(t.brightRed,e.DEFAULT_ANSI_COLORS[9]),this.colors.ansi[10]=this._parseColor(t.brightGreen,e.DEFAULT_ANSI_COLORS[10]),this.colors.ansi[11]=this._parseColor(t.brightYellow,e.DEFAULT_ANSI_COLORS[11]),this.colors.ansi[12]=this._parseColor(t.brightBlue,e.DEFAULT_ANSI_COLORS[12]),this.colors.ansi[13]=this._parseColor(t.brightMagenta,e.DEFAULT_ANSI_COLORS[13]),this.colors.ansi[14]=this._parseColor(t.brightCyan,e.DEFAULT_ANSI_COLORS[14]),this.colors.ansi[15]=this._parseColor(t.brightWhite,e.DEFAULT_ANSI_COLORS[15])},t.prototype._parseColor=function(t,e,r){if(void 0===r&&(r=this.allowTransparency),!t)return e;if(this._ctx.fillStyle=this._litmusColor,this._ctx.fillStyle=t,"string"!=typeof this._ctx.fillStyle)return console.warn("Color: "+t+" is invalid using fallback "+e.css),e;this._ctx.fillRect(0,0,1,1);var i=this._ctx.getImageData(0,0,1,1).data;return r||255===i[3]?{css:t,rgba:(i[0]<<24|i[1]<<16|i[2]<<8|i[3])>>>0}:(console.warn("Color: "+t+" is using transparency, but allowTransparency is false. Using fallback "+e.css+"."),e)},t}();e.ColorManager=h},function(t,e){var r,i,n=t.exports={};function s(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function a(t){if(r===setTimeout)return setTimeout(t,0);if((r===s||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:s}catch(t){r=s}try{i="function"==typeof clearTimeout?clearTimeout:o}catch(t){i=o}}();var l,c=[],h=!1,u=-1;function f(){h&&l&&(h=!1,l.length?c=l.concat(c):u=-1,c.length&&p())}function p(){if(!h){var t=a(f);h=!0;for(var e=c.length;e;){for(l=c,c=[];++u<e;)l&&l[u].run();u=-1,e=c.length}l=null,h=!1,function(t){if(i===clearTimeout)return clearTimeout(t);if((i===o||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(t);try{i(t)}catch(e){try{return i.call(null,t)}catch(e){return i.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function _(){}n.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];c.push(new d(t,e)),1!==c.length||h||a(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},n.title="browser",n.browser=!0,n.env={},n.argv=[],n.version="",n.versions={},n.on=_,n.addListener=_,n.once=_,n.off=_,n.removeListener=_,n.removeAllListeners=_,n.emit=_,n.prependListener=_,n.prependOnceListener=_,n.listeners=function(t){return[]},n.binding=function(t){throw new Error("process.binding is not supported")},n.cwd=function(){return"/"},n.chdir=function(t){throw new Error("process.chdir is not supported")},n.umask=function(){return 0}},function(t,e){var r=1e3,i=60*r,n=60*i,s=24*n,o=365.25*s;function a(t,e,r){if(!(t<e))return t<1.5*e?Math.floor(t/e)+" "+r:Math.ceil(t/e)+" "+r+"s"}t.exports=function(t,e){e=e||{};var l,c=typeof t;if("string"===c&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if(!e)return;var a=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return a*o;case"days":case"day":case"d":return a*s;case"hours":case"hour":case"hrs":case"hr":case"h":return a*n;case"minutes":case"minute":case"mins":case"min":case"m":return a*i;case"seconds":case"second":case"secs":case"sec":case"s":return a*r;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}(t);if("number"===c&&!1===isNaN(t))return e.long?a(l=t,s,"day")||a(l,n,"hour")||a(l,i,"minute")||a(l,r,"second")||l+" ms":function(t){if(t>=s)return Math.round(t/s)+"d";if(t>=n)return Math.round(t/n)+"h";if(t>=i)return Math.round(t/i)+"m";if(t>=r)return Math.round(t/r)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,r){var i=r(50)("socket.io-parser"),n=r(4),s=r(52),o=r(19),a=r(28);function l(){}e.protocol=4,e.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],e.CONNECT=0,e.DISCONNECT=1,e.EVENT=2,e.ACK=3,e.ERROR=4,e.BINARY_EVENT=5,e.BINARY_ACK=6,e.Encoder=l,e.Decoder=u;var c=e.ERROR+'"encode error"';function h(t){var r=""+t.type;if(e.BINARY_EVENT!==t.type&&e.BINARY_ACK!==t.type||(r+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(r+=t.nsp+","),null!=t.id&&(r+=t.id),null!=t.data){var n=function(t){try{return JSON.stringify(t)}catch(t){return!1}}(t.data);if(!1===n)return c;r+=n}return i("encoded %j as %s",t,r),r}function u(){this.reconstructor=null}function f(t){this.reconPack=t,this.buffers=[]}function p(t){return{type:e.ERROR,data:"parser error: "+t}}l.prototype.encode=function(t,r){(i("encoding packet %j",t),e.BINARY_EVENT===t.type||e.BINARY_ACK===t.type)?function(t,e){s.removeBlobs(t,function(t){var r=s.deconstructPacket(t),i=h(r.packet),n=r.buffers;n.unshift(i),e(n)})}(t,r):r([h(t)])},n(u.prototype),u.prototype.add=function(t){var r;if("string"==typeof t)r=function(t){var r=0,n={type:Number(t.charAt(0))};if(null==e.types[n.type])return p("unknown packet type "+n.type);if(e.BINARY_EVENT===n.type||e.BINARY_ACK===n.type){for(var s="";"-"!==t.charAt(++r)&&(s+=t.charAt(r),r!=t.length););if(s!=Number(s)||"-"!==t.charAt(r))throw new Error("Illegal attachments");n.attachments=Number(s)}if("/"===t.charAt(r+1))for(n.nsp="";++r;){var a=t.charAt(r);if(","===a)break;if(n.nsp+=a,r===t.length)break}else n.nsp="/";var l=t.charAt(r+1);if(""!==l&&Number(l)==l){for(n.id="";++r;){var a=t.charAt(r);if(null==a||Number(a)!=a){--r;break}if(n.id+=t.charAt(r),r===t.length)break}n.id=Number(n.id)}if(t.charAt(++r)){var c=function(t){try{return JSON.parse(t)}catch(t){return!1}}(t.substr(r)),h=!1!==c&&(n.type===e.ERROR||o(c));if(!h)return p("invalid payload");n.data=c}return i("decoded %s as %j",t,n),n}(t),e.BINARY_EVENT===r.type||e.BINARY_ACK===r.type?(this.reconstructor=new f(r),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",r)):this.emit("decoded",r);else{if(!a(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(r=this.reconstructor.takeBinaryData(t))&&(this.reconstructor=null,this.emit("decoded",r))}},u.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},f.prototype.takeBinaryData=function(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){var e=s.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null},f.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}},function(t,e){var r={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==r.call(t)}},function(t,e,r){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var i=r(53),n=r(54),s=r(55);function o(){return l.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(t,e){if(o()<e)throw new RangeError("Invalid typed array length");return l.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=l.prototype:(null===t&&(t=new l(e)),t.length=e),t}function l(t,e,r){if(!(l.TYPED_ARRAY_SUPPORT||this instanceof l))return new l(t,e,r);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return u(this,t)}return c(this,t,e,r)}function c(t,e,r,i){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,r,i){if(e.byteLength,r<0||e.byteLength<r)throw new RangeError("'offset' is out of bounds");if(e.byteLength<r+(i||0))throw new RangeError("'length' is out of bounds");e=void 0===r&&void 0===i?new Uint8Array(e):void 0===i?new Uint8Array(e,r):new Uint8Array(e,r,i);l.TYPED_ARRAY_SUPPORT?(t=e).__proto__=l.prototype:t=f(t,e);return t}(t,e,r,i):"string"==typeof e?function(t,e,r){"string"==typeof r&&""!==r||(r="utf8");if(!l.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var i=0|d(e,r),n=(t=a(t,i)).write(e,r);n!==i&&(t=t.slice(0,n));return t}(t,e,r):function(t,e){if(l.isBuffer(e)){var r=0|p(e.length);return 0===(t=a(t,r)).length?t:(e.copy(t,0,0,r),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(i=e.length)!=i?a(t,0):f(t,e);if("Buffer"===e.type&&s(e.data))return f(t,e.data)}var i;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function h(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function u(t,e){if(h(e),t=a(t,e<0?0:0|p(e)),!l.TYPED_ARRAY_SUPPORT)for(var r=0;r<e;++r)t[r]=0;return t}function f(t,e){var r=e.length<0?0:0|p(e.length);t=a(t,r);for(var i=0;i<r;i+=1)t[i]=255&e[i];return t}function p(t){if(t>=o())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o().toString(16)+" bytes");return 0|t}function d(t,e){if(l.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var r=t.length;if(0===r)return 0;for(var i=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return U(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return W(t).length;default:if(i)return U(t).length;e=(""+e).toLowerCase(),i=!0}}function _(t,e,r){var i=t[e];t[e]=t[r],t[r]=i}function m(t,e,r,i,n){if(0===t.length)return-1;if("string"==typeof r?(i=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=n?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(n)return-1;r=t.length-1}else if(r<0){if(!n)return-1;r=0}if("string"==typeof e&&(e=l.from(e,i)),l.isBuffer(e))return 0===e.length?-1:y(t,e,r,i,n);if("number"==typeof e)return e&=255,l.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?n?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):y(t,[e],r,i,n);throw new TypeError("val must be string, number or Buffer")}function y(t,e,r,i,n){var s,o=1,a=t.length,l=e.length;if(void 0!==i&&("ucs2"===(i=String(i).toLowerCase())||"ucs-2"===i||"utf16le"===i||"utf-16le"===i)){if(t.length<2||e.length<2)return-1;o=2,a/=2,l/=2,r/=2}function c(t,e){return 1===o?t[e]:t.readUInt16BE(e*o)}if(n){var h=-1;for(s=r;s<a;s++)if(c(t,s)===c(e,-1===h?0:s-h)){if(-1===h&&(h=s),s-h+1===l)return h*o}else-1!==h&&(s-=s-h),h=-1}else for(r+l>a&&(r=a-l),s=r;s>=0;s--){for(var u=!0,f=0;f<l;f++)if(c(t,s+f)!==c(e,f)){u=!1;break}if(u)return s}return-1}function g(t,e,r,i){r=Number(r)||0;var n=t.length-r;i?(i=Number(i))>n&&(i=n):i=n;var s=e.length;if(s%2!=0)throw new TypeError("Invalid hex string");i>s/2&&(i=s/2);for(var o=0;o<i;++o){var a=parseInt(e.substr(2*o,2),16);if(isNaN(a))return o;t[r+o]=a}return o}function C(t,e,r,i){return j(U(e,t.length-r),t,r,i)}function v(t,e,r,i){return j(function(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,i)}function b(t,e,r,i){return v(t,e,r,i)}function w(t,e,r,i){return j(W(e),t,r,i)}function A(t,e,r,i){return j(function(t,e){for(var r,i,n,s=[],o=0;o<t.length&&!((e-=2)<0);++o)r=t.charCodeAt(o),i=r>>8,n=r%256,s.push(n),s.push(i);return s}(e,t.length-r),t,r,i)}function E(t,e,r){return 0===e&&r===t.length?i.fromByteArray(t):i.fromByteArray(t.slice(e,r))}function S(t,e,r){r=Math.min(t.length,r);for(var i=[],n=e;n<r;){var s,o,a,l,c=t[n],h=null,u=c>239?4:c>223?3:c>191?2:1;if(n+u<=r)switch(u){case 1:c<128&&(h=c);break;case 2:128==(192&(s=t[n+1]))&&(l=(31&c)<<6|63&s)>127&&(h=l);break;case 3:s=t[n+1],o=t[n+2],128==(192&s)&&128==(192&o)&&(l=(15&c)<<12|(63&s)<<6|63&o)>2047&&(l<55296||l>57343)&&(h=l);break;case 4:s=t[n+1],o=t[n+2],a=t[n+3],128==(192&s)&&128==(192&o)&&128==(192&a)&&(l=(15&c)<<18|(63&s)<<12|(63&o)<<6|63&a)>65535&&l<1114112&&(h=l)}null===h?(h=65533,u=1):h>65535&&(h-=65536,i.push(h>>>10&1023|55296),h=56320|1023&h),i.push(h),n+=u}return function(t){var e=t.length;if(e<=L)return String.fromCharCode.apply(String,t);var r="",i=0;for(;i<e;)r+=String.fromCharCode.apply(String,t.slice(i,i+=L));return r}(i)}e.Buffer=l,e.SlowBuffer=function(t){+t!=t&&(t=0);return l.alloc(+t)},e.INSPECT_MAX_BYTES=50,l.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=o(),l.poolSize=8192,l._augment=function(t){return t.__proto__=l.prototype,t},l.from=function(t,e,r){return c(null,t,e,r)},l.TYPED_ARRAY_SUPPORT&&(l.prototype.__proto__=Uint8Array.prototype,l.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&l[Symbol.species]===l&&Object.defineProperty(l,Symbol.species,{value:null,configurable:!0})),l.alloc=function(t,e,r){return function(t,e,r,i){return h(e),e<=0?a(t,e):void 0!==r?"string"==typeof i?a(t,e).fill(r,i):a(t,e).fill(r):a(t,e)}(null,t,e,r)},l.allocUnsafe=function(t){return u(null,t)},l.allocUnsafeSlow=function(t){return u(null,t)},l.isBuffer=function(t){return!(null==t||!t._isBuffer)},l.compare=function(t,e){if(!l.isBuffer(t)||!l.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var r=t.length,i=e.length,n=0,s=Math.min(r,i);n<s;++n)if(t[n]!==e[n]){r=t[n],i=e[n];break}return r<i?-1:i<r?1:0},l.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},l.concat=function(t,e){if(!s(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return l.alloc(0);var r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;var i=l.allocUnsafe(e),n=0;for(r=0;r<t.length;++r){var o=t[r];if(!l.isBuffer(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(i,n),n+=o.length}return i},l.byteLength=d,l.prototype._isBuffer=!0,l.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)_(this,e,e+1);return this},l.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)_(this,e,e+3),_(this,e+1,e+2);return this},l.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)_(this,e,e+7),_(this,e+1,e+6),_(this,e+2,e+5),_(this,e+3,e+4);return this},l.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?S(this,0,t):function(t,e,r){var i=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return R(this,e,r);case"utf8":case"utf-8":return S(this,e,r);case"ascii":return x(this,e,r);case"latin1":case"binary":return T(this,e,r);case"base64":return E(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return k(this,e,r);default:if(i)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),i=!0}}.apply(this,arguments)},l.prototype.equals=function(t){if(!l.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===l.compare(this,t)},l.prototype.inspect=function(){var t="",r=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(t+=" ... ")),"<Buffer "+t+">"},l.prototype.compare=function(t,e,r,i,n){if(!l.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===i&&(i=0),void 0===n&&(n=this.length),e<0||r>t.length||i<0||n>this.length)throw new RangeError("out of range index");if(i>=n&&e>=r)return 0;if(i>=n)return-1;if(e>=r)return 1;if(this===t)return 0;for(var s=(n>>>=0)-(i>>>=0),o=(r>>>=0)-(e>>>=0),a=Math.min(s,o),c=this.slice(i,n),h=t.slice(e,r),u=0;u<a;++u)if(c[u]!==h[u]){s=c[u],o=h[u];break}return s<o?-1:o<s?1:0},l.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},l.prototype.indexOf=function(t,e,r){return m(this,t,e,r,!0)},l.prototype.lastIndexOf=function(t,e,r){return m(this,t,e,r,!1)},l.prototype.write=function(t,e,r,i){if(void 0===e)i="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)i=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(r)?(r|=0,void 0===i&&(i="utf8")):(i=r,r=void 0)}var n=this.length-e;if((void 0===r||r>n)&&(r=n),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");i||(i="utf8");for(var s=!1;;)switch(i){case"hex":return g(this,t,e,r);case"utf8":case"utf-8":return C(this,t,e,r);case"ascii":return v(this,t,e,r);case"latin1":case"binary":return b(this,t,e,r);case"base64":return w(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,t,e,r);default:if(s)throw new TypeError("Unknown encoding: "+i);i=(""+i).toLowerCase(),s=!0}},l.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var L=4096;function x(t,e,r){var i="";r=Math.min(t.length,r);for(var n=e;n<r;++n)i+=String.fromCharCode(127&t[n]);return i}function T(t,e,r){var i="";r=Math.min(t.length,r);for(var n=e;n<r;++n)i+=String.fromCharCode(t[n]);return i}function R(t,e,r){var i=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>i)&&(r=i);for(var n="",s=e;s<r;++s)n+=N(t[s]);return n}function k(t,e,r){for(var i=t.slice(e,r),n="",s=0;s<i.length;s+=2)n+=String.fromCharCode(i[s]+256*i[s+1]);return n}function M(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function D(t,e,r,i,n,s){if(!l.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>n||e<s)throw new RangeError('"value" argument is out of bounds');if(r+i>t.length)throw new RangeError("Index out of range")}function H(t,e,r,i){e<0&&(e=65535+e+1);for(var n=0,s=Math.min(t.length-r,2);n<s;++n)t[r+n]=(e&255<<8*(i?n:1-n))>>>8*(i?n:1-n)}function O(t,e,r,i){e<0&&(e=4294967295+e+1);for(var n=0,s=Math.min(t.length-r,4);n<s;++n)t[r+n]=e>>>8*(i?n:3-n)&255}function F(t,e,r,i,n,s){if(r+i>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function B(t,e,r,i,s){return s||F(t,0,r,4),n.write(t,e,r,i,23,4),r+4}function I(t,e,r,i,s){return s||F(t,0,r,8),n.write(t,e,r,i,52,8),r+8}l.prototype.slice=function(t,e){var r,i=this.length;if((t=~~t)<0?(t+=i)<0&&(t=0):t>i&&(t=i),(e=void 0===e?i:~~e)<0?(e+=i)<0&&(e=0):e>i&&(e=i),e<t&&(e=t),l.TYPED_ARRAY_SUPPORT)(r=this.subarray(t,e)).__proto__=l.prototype;else{var n=e-t;r=new l(n,void 0);for(var s=0;s<n;++s)r[s]=this[s+t]}return r},l.prototype.readUIntLE=function(t,e,r){t|=0,e|=0,r||M(t,e,this.length);for(var i=this[t],n=1,s=0;++s<e&&(n*=256);)i+=this[t+s]*n;return i},l.prototype.readUIntBE=function(t,e,r){t|=0,e|=0,r||M(t,e,this.length);for(var i=this[t+--e],n=1;e>0&&(n*=256);)i+=this[t+--e]*n;return i},l.prototype.readUInt8=function(t,e){return e||M(t,1,this.length),this[t]},l.prototype.readUInt16LE=function(t,e){return e||M(t,2,this.length),this[t]|this[t+1]<<8},l.prototype.readUInt16BE=function(t,e){return e||M(t,2,this.length),this[t]<<8|this[t+1]},l.prototype.readUInt32LE=function(t,e){return e||M(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},l.prototype.readUInt32BE=function(t,e){return e||M(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},l.prototype.readIntLE=function(t,e,r){t|=0,e|=0,r||M(t,e,this.length);for(var i=this[t],n=1,s=0;++s<e&&(n*=256);)i+=this[t+s]*n;return i>=(n*=128)&&(i-=Math.pow(2,8*e)),i},l.prototype.readIntBE=function(t,e,r){t|=0,e|=0,r||M(t,e,this.length);for(var i=e,n=1,s=this[t+--i];i>0&&(n*=256);)s+=this[t+--i]*n;return s>=(n*=128)&&(s-=Math.pow(2,8*e)),s},l.prototype.readInt8=function(t,e){return e||M(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},l.prototype.readInt16LE=function(t,e){e||M(t,2,this.length);var r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},l.prototype.readInt16BE=function(t,e){e||M(t,2,this.length);var r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},l.prototype.readInt32LE=function(t,e){return e||M(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},l.prototype.readInt32BE=function(t,e){return e||M(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},l.prototype.readFloatLE=function(t,e){return e||M(t,4,this.length),n.read(this,t,!0,23,4)},l.prototype.readFloatBE=function(t,e){return e||M(t,4,this.length),n.read(this,t,!1,23,4)},l.prototype.readDoubleLE=function(t,e){return e||M(t,8,this.length),n.read(this,t,!0,52,8)},l.prototype.readDoubleBE=function(t,e){return e||M(t,8,this.length),n.read(this,t,!1,52,8)},l.prototype.writeUIntLE=function(t,e,r,i){(t=+t,e|=0,r|=0,i)||D(this,t,e,r,Math.pow(2,8*r)-1,0);var n=1,s=0;for(this[e]=255&t;++s<r&&(n*=256);)this[e+s]=t/n&255;return e+r},l.prototype.writeUIntBE=function(t,e,r,i){(t=+t,e|=0,r|=0,i)||D(this,t,e,r,Math.pow(2,8*r)-1,0);var n=r-1,s=1;for(this[e+n]=255&t;--n>=0&&(s*=256);)this[e+n]=t/s&255;return e+r},l.prototype.writeUInt8=function(t,e,r){return t=+t,e|=0,r||D(this,t,e,1,255,0),l.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},l.prototype.writeUInt16LE=function(t,e,r){return t=+t,e|=0,r||D(this,t,e,2,65535,0),l.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):H(this,t,e,!0),e+2},l.prototype.writeUInt16BE=function(t,e,r){return t=+t,e|=0,r||D(this,t,e,2,65535,0),l.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):H(this,t,e,!1),e+2},l.prototype.writeUInt32LE=function(t,e,r){return t=+t,e|=0,r||D(this,t,e,4,4294967295,0),l.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):O(this,t,e,!0),e+4},l.prototype.writeUInt32BE=function(t,e,r){return t=+t,e|=0,r||D(this,t,e,4,4294967295,0),l.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):O(this,t,e,!1),e+4},l.prototype.writeIntLE=function(t,e,r,i){if(t=+t,e|=0,!i){var n=Math.pow(2,8*r-1);D(this,t,e,r,n-1,-n)}var s=0,o=1,a=0;for(this[e]=255&t;++s<r&&(o*=256);)t<0&&0===a&&0!==this[e+s-1]&&(a=1),this[e+s]=(t/o>>0)-a&255;return e+r},l.prototype.writeIntBE=function(t,e,r,i){if(t=+t,e|=0,!i){var n=Math.pow(2,8*r-1);D(this,t,e,r,n-1,-n)}var s=r-1,o=1,a=0;for(this[e+s]=255&t;--s>=0&&(o*=256);)t<0&&0===a&&0!==this[e+s+1]&&(a=1),this[e+s]=(t/o>>0)-a&255;return e+r},l.prototype.writeInt8=function(t,e,r){return t=+t,e|=0,r||D(this,t,e,1,127,-128),l.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},l.prototype.writeInt16LE=function(t,e,r){return t=+t,e|=0,r||D(this,t,e,2,32767,-32768),l.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):H(this,t,e,!0),e+2},l.prototype.writeInt16BE=function(t,e,r){return t=+t,e|=0,r||D(this,t,e,2,32767,-32768),l.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):H(this,t,e,!1),e+2},l.prototype.writeInt32LE=function(t,e,r){return t=+t,e|=0,r||D(this,t,e,4,2147483647,-2147483648),l.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):O(this,t,e,!0),e+4},l.prototype.writeInt32BE=function(t,e,r){return t=+t,e|=0,r||D(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),l.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):O(this,t,e,!1),e+4},l.prototype.writeFloatLE=function(t,e,r){return B(this,t,e,!0,r)},l.prototype.writeFloatBE=function(t,e,r){return B(this,t,e,!1,r)},l.prototype.writeDoubleLE=function(t,e,r){return I(this,t,e,!0,r)},l.prototype.writeDoubleBE=function(t,e,r){return I(this,t,e,!1,r)},l.prototype.copy=function(t,e,r,i){if(r||(r=0),i||0===i||(i=this.length),e>=t.length&&(e=t.length),e||(e=0),i>0&&i<r&&(i=r),i===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(i<0)throw new RangeError("sourceEnd out of bounds");i>this.length&&(i=this.length),t.length-e<i-r&&(i=t.length-e+r);var n,s=i-r;if(this===t&&r<e&&e<i)for(n=s-1;n>=0;--n)t[n+e]=this[n+r];else if(s<1e3||!l.TYPED_ARRAY_SUPPORT)for(n=0;n<s;++n)t[n+e]=this[n+r];else Uint8Array.prototype.set.call(t,this.subarray(r,r+s),e);return s},l.prototype.fill=function(t,e,r,i){if("string"==typeof t){if("string"==typeof e?(i=e,e=0,r=this.length):"string"==typeof r&&(i=r,r=this.length),1===t.length){var n=t.charCodeAt(0);n<256&&(t=n)}if(void 0!==i&&"string"!=typeof i)throw new TypeError("encoding must be a string");if("string"==typeof i&&!l.isEncoding(i))throw new TypeError("Unknown encoding: "+i)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;var s;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(s=e;s<r;++s)this[s]=t;else{var o=l.isBuffer(t)?t:U(new l(t,i).toString()),a=o.length;for(s=0;s<r-e;++s)this[s+e]=o[s%a]}return this};var P=/[^+\/0-9A-Za-z-_]/g;function N(t){return t<16?"0"+t.toString(16):t.toString(16)}function U(t,e){var r;e=e||1/0;for(var i=t.length,n=null,s=[],o=0;o<i;++o){if((r=t.charCodeAt(o))>55295&&r<57344){if(!n){if(r>56319){(e-=3)>-1&&s.push(239,191,189);continue}if(o+1===i){(e-=3)>-1&&s.push(239,191,189);continue}n=r;continue}if(r<56320){(e-=3)>-1&&s.push(239,191,189),n=r;continue}r=65536+(n-55296<<10|r-56320)}else n&&(e-=3)>-1&&s.push(239,191,189);if(n=null,r<128){if((e-=1)<0)break;s.push(r)}else if(r<2048){if((e-=2)<0)break;s.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;s.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;s.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return s}function W(t){return i.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(P,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function j(t,e,r,i){for(var n=0;n<i&&!(n+r>=e.length||n>=t.length);++n)e[n+r]=t[n];return n}}).call(this,r(29))},function(t,e,r){var i=r(58);t.exports=function(t){var e=t.xdomain,r=t.xscheme,n=t.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!e||i))return new XMLHttpRequest}catch(t){}try{if("undefined"!=typeof XDomainRequest&&!r&&n)return new XDomainRequest}catch(t){}if(!e)try{return new(self[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}}},function(t,e,r){var i=r(5),n=r(4);function s(t){this.path=t.path,this.hostname=t.hostname,this.port=t.port,this.secure=t.secure,this.query=t.query,this.timestampParam=t.timestampParam,this.timestampRequests=t.timestampRequests,this.readyState="",this.agent=t.agent||!1,this.socket=t.socket,this.enablesXDR=t.enablesXDR,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.forceNode=t.forceNode,this.isReactNative=t.isReactNative,this.extraHeaders=t.extraHeaders,this.localAddress=t.localAddress}t.exports=s,n(s.prototype),s.prototype.onError=function(t,e){var r=new Error(t);return r.type="TransportError",r.description=e,this.emit("error",r),this},s.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},s.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},s.prototype.send=function(t){if("open"!==this.readyState)throw new Error("Transport not open");this.write(t)},s.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},s.prototype.onData=function(t){var e=i.decodePacket(t,this.socket.binaryType);this.onPacket(e)},s.prototype.onPacket=function(t){this.emit("packet",t)},s.prototype.onClose=function(){this.readyState="closed",this.emit("close")}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(){this._didWarmUp=!1}return t.prototype.dispose=function(){},t.prototype.warmUp=function(){this._didWarmUp||(this._doWarmUp(),this._didWarmUp=!0)},t.prototype._doWarmUp=function(){},t.prototype.beginFrame=function(){},t}();e.default=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){this._terminal=t,this._callback=e,this._animationFrame=null}return t.prototype.dispose=function(){this._animationFrame&&(window.cancelAnimationFrame(this._animationFrame),this._animationFrame=null)},t.prototype.refresh=function(t,e){var r=this;t=null!=t?t:0,e=null!=e?e:this._terminal.rows-1;var i=void 0!==this._rowStart&&null!==this._rowStart,n=void 0!==this._rowEnd&&null!==this._rowEnd;this._rowStart=i?Math.min(this._rowStart,t):t,this._rowEnd=n?Math.max(this._rowEnd,e):e,this._animationFrame||(this._animationFrame=window.requestAnimationFrame(function(){return r._innerRefresh()}))},t.prototype._innerRefresh=function(){this._rowStart=Math.max(this._rowStart,0),this._rowEnd=Math.min(this._rowEnd,this._terminal.rows-1),this._callback(this._rowStart,this._rowEnd),this._rowStart=null,this._rowEnd=null,this._animationFrame=null},t}();e.RenderDebouncer=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.blankLine="Blank line",e.promptLabel="Terminal input",e.tooMuchOutput="Too much output to announce, navigate to rows manually to read"},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(72),n=r(25),s=function(){function t(t){this._core=new i.Terminal(t)}return Object.defineProperty(t.prototype,"element",{get:function(){return this._core.element},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"textarea",{get:function(){return this._core.textarea},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"rows",{get:function(){return this._core.rows},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"cols",{get:function(){return this._core.cols},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"markers",{get:function(){return this._core.markers},enumerable:!0,configurable:!0}),t.prototype.blur=function(){this._core.blur()},t.prototype.focus=function(){this._core.focus()},t.prototype.on=function(t,e){this._core.on(t,e)},t.prototype.off=function(t,e){this._core.off(t,e)},t.prototype.emit=function(t,e){this._core.emit(t,e)},t.prototype.addDisposableListener=function(t,e){return this._core.addDisposableListener(t,e)},t.prototype.resize=function(t,e){this._core.resize(t,e)},t.prototype.writeln=function(t){this._core.writeln(t)},t.prototype.open=function(t){this._core.open(t)},t.prototype.attachCustomKeyEventHandler=function(t){this._core.attachCustomKeyEventHandler(t)},t.prototype.registerLinkMatcher=function(t,e,r){return this._core.registerLinkMatcher(t,e,r)},t.prototype.deregisterLinkMatcher=function(t){this._core.deregisterLinkMatcher(t)},t.prototype.registerCharacterJoiner=function(t){return this._core.registerCharacterJoiner(t)},t.prototype.deregisterCharacterJoiner=function(t){this._core.deregisterCharacterJoiner(t)},t.prototype.addMarker=function(t){return this._core.addMarker(t)},t.prototype.hasSelection=function(){return this._core.hasSelection()},t.prototype.getSelection=function(){return this._core.getSelection()},t.prototype.clearSelection=function(){this._core.clearSelection()},t.prototype.selectAll=function(){this._core.selectAll()},t.prototype.selectLines=function(t,e){this._core.selectLines(t,e)},t.prototype.dispose=function(){this._core.dispose()},t.prototype.destroy=function(){this._core.destroy()},t.prototype.scrollLines=function(t){this._core.scrollLines(t)},t.prototype.scrollPages=function(t){this._core.scrollPages(t)},t.prototype.scrollToTop=function(){this._core.scrollToTop()},t.prototype.scrollToBottom=function(){this._core.scrollToBottom()},t.prototype.scrollToLine=function(t){this._core.scrollToLine(t)},t.prototype.clear=function(){this._core.clear()},t.prototype.write=function(t){this._core.write(t)},t.prototype.getOption=function(t){return this._core.getOption(t)},t.prototype.setOption=function(t,e){this._core.setOption(t,e)},t.prototype.refresh=function(t,e){this._core.refresh(t,e)},t.prototype.reset=function(){this._core.reset()},t.applyAddon=function(e){e.apply(t)},Object.defineProperty(t,"strings",{get:function(){return n},enumerable:!0,configurable:!0}),t}();e.Terminal=s},function(t,e){var r=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,i=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.exports=function(t){var e=t,n=t.indexOf("["),s=t.indexOf("]");-1!=n&&-1!=s&&(t=t.substring(0,n)+t.substring(n,s).replace(/:/g,";")+t.substring(s,t.length));for(var o=r.exec(t||""),a={},l=14;l--;)a[i[l]]=o[l]||"";return-1!=n&&-1!=s&&(a.source=e,a.host=a.host.substring(1,a.host.length-1).replace(/;/g,":"),a.authority=a.authority.replace("[","").replace("]","").replace(/;/g,":"),a.ipv6uri=!0),a}},function(t,e,r){(function(e){t.exports=function(t){return r&&e.isBuffer(t)||i&&(t instanceof ArrayBuffer||n(t))};var r="function"==typeof e&&"function"==typeof e.isBuffer,i="function"==typeof ArrayBuffer,n=function(t){return"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer}}).call(this,r(20).Buffer)},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){var i=r(56),n=r(36),s=r(4),o=r(18),a=r(37),l=r(38),c=r(8)("socket.io-client:manager"),h=r(35),u=r(71),f=Object.prototype.hasOwnProperty;function p(t,e){if(!(this instanceof p))return new p(t,e);t&&"object"==typeof t&&(e=t,t=void 0),(e=e||{}).path=e.path||"/socket.io",this.nsps={},this.subs=[],this.opts=e,this.reconnection(!1!==e.reconnection),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(e.randomizationFactor||.5),this.backoff=new u({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this.readyState="closed",this.uri=t,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var r=e.parser||o;this.encoder=new r.Encoder,this.decoder=new r.Decoder,this.autoConnect=!1!==e.autoConnect,this.autoConnect&&this.open()}t.exports=p,p.prototype.emitAll=function(){for(var t in this.emit.apply(this,arguments),this.nsps)f.call(this.nsps,t)&&this.nsps[t].emit.apply(this.nsps[t],arguments)},p.prototype.updateSocketIds=function(){for(var t in this.nsps)f.call(this.nsps,t)&&(this.nsps[t].id=this.generateId(t))},p.prototype.generateId=function(t){return("/"===t?"":t+"#")+this.engine.id},s(p.prototype),p.prototype.reconnection=function(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection},p.prototype.reconnectionAttempts=function(t){return arguments.length?(this._reconnectionAttempts=t,this):this._reconnectionAttempts},p.prototype.reconnectionDelay=function(t){return arguments.length?(this._reconnectionDelay=t,this.backoff&&this.backoff.setMin(t),this):this._reconnectionDelay},p.prototype.randomizationFactor=function(t){return arguments.length?(this._randomizationFactor=t,this.backoff&&this.backoff.setJitter(t),this):this._randomizationFactor},p.prototype.reconnectionDelayMax=function(t){return arguments.length?(this._reconnectionDelayMax=t,this.backoff&&this.backoff.setMax(t),this):this._reconnectionDelayMax},p.prototype.timeout=function(t){return arguments.length?(this._timeout=t,this):this._timeout},p.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},p.prototype.open=p.prototype.connect=function(t,e){if(c("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;c("opening %s",this.uri),this.engine=i(this.uri,this.opts);var r=this.engine,n=this;this.readyState="opening",this.skipReconnect=!1;var s=a(r,"open",function(){n.onopen(),t&&t()}),o=a(r,"error",function(e){if(c("connect_error"),n.cleanup(),n.readyState="closed",n.emitAll("connect_error",e),t){var r=new Error("Connection error");r.data=e,t(r)}else n.maybeReconnectOnOpen()});if(!1!==this._timeout){var l=this._timeout;c("connect attempt will timeout after %d",l);var h=setTimeout(function(){c("connect attempt timed out after %d",l),s.destroy(),r.close(),r.emit("error","timeout"),n.emitAll("connect_timeout",l)},l);this.subs.push({destroy:function(){clearTimeout(h)}})}return this.subs.push(s),this.subs.push(o),this},p.prototype.onopen=function(){c("open"),this.cleanup(),this.readyState="open",this.emit("open");var t=this.engine;this.subs.push(a(t,"data",l(this,"ondata"))),this.subs.push(a(t,"ping",l(this,"onping"))),this.subs.push(a(t,"pong",l(this,"onpong"))),this.subs.push(a(t,"error",l(this,"onerror"))),this.subs.push(a(t,"close",l(this,"onclose"))),this.subs.push(a(this.decoder,"decoded",l(this,"ondecoded")))},p.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},p.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},p.prototype.ondata=function(t){this.decoder.add(t)},p.prototype.ondecoded=function(t){this.emit("packet",t)},p.prototype.onerror=function(t){c("error",t),this.emitAll("error",t)},p.prototype.socket=function(t,e){var r=this.nsps[t];if(!r){r=new n(this,t,e),this.nsps[t]=r;var i=this;r.on("connecting",s),r.on("connect",function(){r.id=i.generateId(t)}),this.autoConnect&&s()}function s(){~h(i.connecting,r)||i.connecting.push(r)}return r},p.prototype.destroy=function(t){var e=h(this.connecting,t);~e&&this.connecting.splice(e,1),this.connecting.length||this.close()},p.prototype.packet=function(t){c("writing packet %j",t);var e=this;t.query&&0===t.type&&(t.nsp+="?"+t.query),e.encoding?e.packetBuffer.push(t):(e.encoding=!0,this.encoder.encode(t,function(r){for(var i=0;i<r.length;i++)e.engine.write(r[i],t.options);e.encoding=!1,e.processPacketQueue()}))},p.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var t=this.packetBuffer.shift();this.packet(t)}},p.prototype.cleanup=function(){c("cleanup");for(var t=this.subs.length,e=0;e<t;e++){this.subs.shift().destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},p.prototype.close=p.prototype.disconnect=function(){c("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},p.prototype.onclose=function(t){c("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",t),this._reconnection&&!this.skipReconnect&&this.reconnect()},p.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var t=this;if(this.backoff.attempts>=this._reconnectionAttempts)c("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var e=this.backoff.duration();c("will wait %dms before reconnect attempt",e),this.reconnecting=!0;var r=setTimeout(function(){t.skipReconnect||(c("attempting reconnect"),t.emitAll("reconnect_attempt",t.backoff.attempts),t.emitAll("reconnecting",t.backoff.attempts),t.skipReconnect||t.open(function(e){e?(c("reconnect attempt error"),t.reconnecting=!1,t.reconnect(),t.emitAll("reconnect_error",e.data)):(c("reconnect success"),t.onreconnect())}))},e);this.subs.push({destroy:function(){clearTimeout(r)}})}},p.prototype.onreconnect=function(){var t=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",t)}},function(t,e,r){var i=r(21),n=r(59),s=r(67),o=r(68);e.polling=function(t){var e=!1,r=!1,o=!1!==t.jsonp;if("undefined"!=typeof location){var a="https:"===location.protocol,l=location.port;l||(l=a?443:80),e=t.hostname!==location.hostname||l!==t.port,r=t.secure!==a}if(t.xdomain=e,t.xscheme=r,"open"in new i(t)&&!t.forceJSONP)return new n(t);if(!o)throw new Error("JSONP disabled");return new s(t)},e.websocket=o},function(t,e,r){var i=r(22),n=r(9),s=r(5),o=r(10),a=r(34),l=r(11)("engine.io-client:polling");t.exports=h;var c=null!=new(r(21))({xdomain:!1}).responseType;function h(t){var e=t&&t.forceBase64;c&&!e||(this.supportsBinary=!1),i.call(this,t)}o(h,i),h.prototype.name="polling",h.prototype.doOpen=function(){this.poll()},h.prototype.pause=function(t){var e=this;function r(){l("paused"),e.readyState="paused",t()}if(this.readyState="pausing",this.polling||!this.writable){var i=0;this.polling&&(l("we are currently polling - waiting to pause"),i++,this.once("pollComplete",function(){l("pre-pause polling complete"),--i||r()})),this.writable||(l("we are currently writing - waiting to pause"),i++,this.once("drain",function(){l("pre-pause writing complete"),--i||r()}))}else r()},h.prototype.poll=function(){l("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},h.prototype.onData=function(t){var e=this;l("polling got data %s",t);s.decodePayload(t,this.socket.binaryType,function(t,r,i){if("opening"===e.readyState&&e.onOpen(),"close"===t.type)return e.onClose(),!1;e.onPacket(t)}),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():l('ignoring poll - transport state "%s"',this.readyState))},h.prototype.doClose=function(){var t=this;function e(){l("writing close packet"),t.write([{type:"close"}])}"open"===this.readyState?(l("transport open - closing"),e()):(l("transport not open - deferring close"),this.once("open",e))},h.prototype.write=function(t){var e=this;this.writable=!1;var r=function(){e.writable=!0,e.emit("drain")};s.encodePayload(t,this.supportsBinary,function(t){e.doWrite(t,r)})},h.prototype.uri=function(){var t=this.query||{},e=this.secure?"https":"http",r="";return!1!==this.timestampRequests&&(t[this.timestampParam]=a()),this.supportsBinary||t.sid||(t.b64=1),t=n.encode(t),this.port&&("https"===e&&443!==Number(this.port)||"http"===e&&80!==Number(this.port))&&(r=":"+this.port),t.length&&(t="?"+t),e+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+r+this.path+t}},function(t,e,r){(function(e){var i=r(19),n=Object.prototype.toString,s="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===n.call(Blob),o="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===n.call(File);t.exports=function t(r){if(!r||"object"!=typeof r)return!1;if(i(r)){for(var n=0,a=r.length;n<a;n++)if(t(r[n]))return!0;return!1}if("function"==typeof e&&e.isBuffer&&e.isBuffer(r)||"function"==typeof ArrayBuffer&&r instanceof ArrayBuffer||s&&r instanceof Blob||o&&r instanceof File)return!0;if(r.toJSON&&"function"==typeof r.toJSON&&1===arguments.length)return t(r.toJSON(),!0);for(var l in r)if(Object.prototype.hasOwnProperty.call(r,l)&&t(r[l]))return!0;return!1}}).call(this,r(20).Buffer)},function(t,e,r){"use strict";var i,n="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),s=64,o={},a=0,l=0;function c(t){var e="";do{e=n[t%s]+e,t=Math.floor(t/s)}while(t>0);return e}function h(){var t=c(+new Date);return t!==i?(a=0,i=t):t+"."+c(a++)}for(;l<s;l++)o[n[l]]=l;h.encode=c,h.decode=function(t){var e=0;for(l=0;l<t.length;l++)e=e*s+o[t.charAt(l)];return e},t.exports=h},function(t,e){var r=[].indexOf;t.exports=function(t,e){if(r)return t.indexOf(e);for(var i=0;i<t.length;++i)if(t[i]===e)return i;return-1}},function(t,e,r){var i=r(18),n=r(4),s=r(70),o=r(37),a=r(38),l=r(8)("socket.io-client:socket"),c=r(9),h=r(33);t.exports=p;var u={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},f=n.prototype.emit;function p(t,e,r){this.io=t,this.nsp=e,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},r&&r.query&&(this.query=r.query),this.io.autoConnect&&this.open()}n(p.prototype),p.prototype.subEvents=function(){if(!this.subs){var t=this.io;this.subs=[o(t,"open",a(this,"onopen")),o(t,"packet",a(this,"onpacket")),o(t,"close",a(this,"onclose"))]}},p.prototype.open=p.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting"),this)},p.prototype.send=function(){var t=s(arguments);return t.unshift("message"),this.emit.apply(this,t),this},p.prototype.emit=function(t){if(u.hasOwnProperty(t))return f.apply(this,arguments),this;var e=s(arguments),r={type:(void 0!==this.flags.binary?this.flags.binary:h(e))?i.BINARY_EVENT:i.EVENT,data:e,options:{}};return r.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof e[e.length-1]&&(l("emitting packet with ack id %d",this.ids),this.acks[this.ids]=e.pop(),r.id=this.ids++),this.connected?this.packet(r):this.sendBuffer.push(r),this.flags={},this},p.prototype.packet=function(t){t.nsp=this.nsp,this.io.packet(t)},p.prototype.onopen=function(){if(l("transport is open - connecting"),"/"!==this.nsp)if(this.query){var t="object"==typeof this.query?c.encode(this.query):this.query;l("sending connect packet with query %s",t),this.packet({type:i.CONNECT,query:t})}else this.packet({type:i.CONNECT})},p.prototype.onclose=function(t){l("close (%s)",t),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",t)},p.prototype.onpacket=function(t){var e=t.nsp===this.nsp,r=t.type===i.ERROR&&"/"===t.nsp;if(e||r)switch(t.type){case i.CONNECT:this.onconnect();break;case i.EVENT:case i.BINARY_EVENT:this.onevent(t);break;case i.ACK:case i.BINARY_ACK:this.onack(t);break;case i.DISCONNECT:this.ondisconnect();break;case i.ERROR:this.emit("error",t.data)}},p.prototype.onevent=function(t){var e=t.data||[];l("emitting event %j",e),null!=t.id&&(l("attaching ack callback to event"),e.push(this.ack(t.id))),this.connected?f.apply(this,e):this.receiveBuffer.push(e)},p.prototype.ack=function(t){var e=this,r=!1;return function(){if(!r){r=!0;var n=s(arguments);l("sending ack %j",n),e.packet({type:h(n)?i.BINARY_ACK:i.ACK,id:t,data:n})}}},p.prototype.onack=function(t){var e=this.acks[t.id];"function"==typeof e?(l("calling ack %s with %j",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):l("bad ack %s",t.id)},p.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},p.prototype.emitBuffered=function(){var t;for(t=0;t<this.receiveBuffer.length;t++)f.apply(this,this.receiveBuffer[t]);for(this.receiveBuffer=[],t=0;t<this.sendBuffer.length;t++)this.packet(this.sendBuffer[t]);this.sendBuffer=[]},p.prototype.ondisconnect=function(){l("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},p.prototype.destroy=function(){if(this.subs){for(var t=0;t<this.subs.length;t++)this.subs[t].destroy();this.subs=null}this.io.destroy(this)},p.prototype.close=p.prototype.disconnect=function(){return this.connected&&(l("performing disconnect (%s)",this.nsp),this.packet({type:i.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},p.prototype.compress=function(t){return this.flags.compress=t,this},p.prototype.binary=function(t){return this.flags.binary=t,this}},function(t,e){t.exports=function(t,e,r){return t.on(e,r),{destroy:function(){t.removeListener(e,r)}}}},function(t,e){var r=[].slice;t.exports=function(t,e){if("string"==typeof e&&(e=t[e]),"function"!=typeof e)throw new Error("bind() requires a function");var i=r.call(arguments,2);return function(){return e.apply(t,i.concat(r.call(arguments)))}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(81);e.wcwidth=function(t){var e=[[768,879],[1155,1158],[1160,1161],[1425,1469],[1471,1471],[1473,1474],[1476,1477],[1479,1479],[1536,1539],[1552,1557],[1611,1630],[1648,1648],[1750,1764],[1767,1768],[1770,1773],[1807,1807],[1809,1809],[1840,1866],[1958,1968],[2027,2035],[2305,2306],[2364,2364],[2369,2376],[2381,2381],[2385,2388],[2402,2403],[2433,2433],[2492,2492],[2497,2500],[2509,2509],[2530,2531],[2561,2562],[2620,2620],[2625,2626],[2631,2632],[2635,2637],[2672,2673],[2689,2690],[2748,2748],[2753,2757],[2759,2760],[2765,2765],[2786,2787],[2817,2817],[2876,2876],[2879,2879],[2881,2883],[2893,2893],[2902,2902],[2946,2946],[3008,3008],[3021,3021],[3134,3136],[3142,3144],[3146,3149],[3157,3158],[3260,3260],[3263,3263],[3270,3270],[3276,3277],[3298,3299],[3393,3395],[3405,3405],[3530,3530],[3538,3540],[3542,3542],[3633,3633],[3636,3642],[3655,3662],[3761,3761],[3764,3769],[3771,3772],[3784,3789],[3864,3865],[3893,3893],[3895,3895],[3897,3897],[3953,3966],[3968,3972],[3974,3975],[3984,3991],[3993,4028],[4038,4038],[4141,4144],[4146,4146],[4150,4151],[4153,4153],[4184,4185],[4448,4607],[4959,4959],[5906,5908],[5938,5940],[5970,5971],[6002,6003],[6068,6069],[6071,6077],[6086,6086],[6089,6099],[6109,6109],[6155,6157],[6313,6313],[6432,6434],[6439,6440],[6450,6450],[6457,6459],[6679,6680],[6912,6915],[6964,6964],[6966,6970],[6972,6972],[6978,6978],[7019,7027],[7616,7626],[7678,7679],[8203,8207],[8234,8238],[8288,8291],[8298,8303],[8400,8431],[12330,12335],[12441,12442],[43014,43014],[43019,43019],[43045,43046],[64286,64286],[65024,65039],[65056,65059],[65279,65279],[65529,65531]],r=[[68097,68099],[68101,68102],[68108,68111],[68152,68154],[68159,68159],[119143,119145],[119155,119170],[119173,119179],[119210,119213],[119362,119364],[917505,917505],[917536,917631],[917760,917999]];var n=0|t.control,s=new Uint8Array(65536);i.fill(s,1),s[0]=t.nul,i.fill(s,t.control,1,32),i.fill(s,t.control,127,160),i.fill(s,2,4352,4448),s[9001]=2,s[9002]=2,i.fill(s,2,11904,42192),s[12351]=1,i.fill(s,2,44032,55204),i.fill(s,2,63744,64256),i.fill(s,2,65040,65050),i.fill(s,2,65072,65136),i.fill(s,2,65280,65377),i.fill(s,2,65504,65511);for(var o=0;o<e.length;++o)i.fill(s,0,e[o][0],e[o][1]+1);return function(t){return t<32?0|n:t<127?1:t<65536?s[t]:function(t,e){var r,i=0,n=e.length-1;if(t<e[0][0]||t>e[n][1])return!1;for(;n>=i;)if(t>e[r=i+n>>1][1])i=r+1;else{if(!(t<e[r][0]))return!0;n=r-1}return!1}(e=t,r)?0:e>=131072&&e<=196605||e>=196608&&e<=262141?2:1;var e}}({nul:0,control:0}),e.getStringCellWidth=function(t){for(var r=0,i=t.length,n=0;n<i;++n){var s=t.charCodeAt(n);if(55296<=s&&s<=56319){if(++n>=i)return r+e.wcwidth(s);var o=t.charCodeAt(n);56320<=o&&o<=57343?s=1024*(s-55296)+o-56320+65536:r+=e.wcwidth(o)}r+=e.wcwidth(s)}return r}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(6),n=r(86),s=r(88),o=r(89),a={none:s.default,static:o.default,dynamic:n.default},l=[];e.acquireCharAtlas=function(t,e,r,n){for(var s=i.generateConfig(r,n,t,e),o=0;o<l.length;o++){var c=(h=l[o]).ownedBy.indexOf(t);if(c>=0){if(i.configEquals(h.config,s))return h.atlas;1===h.ownedBy.length?l.splice(o,1):h.ownedBy.splice(c,1);break}}for(o=0;o<l.length;o++){var h=l[o];if(i.configEquals(h.config,s))return h.ownedBy.push(t),h.atlas}var u={atlas:new a[t.options.experimentalCharAtlas](document,s),config:s,ownedBy:[t]};return l.push(u),u.atlas},e.removeTerminalFromCache=function(t){for(var e=0;e<l.length;e++){var r=l[e].ownedBy.indexOf(t);if(-1!==r){1===l[e].ownedBy.length?l.splice(e,1):l[e].ownedBy.splice(r,1);break}}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(7),n=r(1);function s(t,e){for(var r=!0,i=e.rgba>>>24,n=e.rgba>>>16&255,s=e.rgba>>>8&255,o=0;o<t.data.length;o+=4)t.data[o]===i&&t.data[o+1]===n&&t.data[o+2]===s?t.data[o+3]=0:r=!1;return r}function o(t,e){return t+" "+e.fontSize*e.devicePixelRatio+"px "+e.fontFamily}e.generateStaticCharAtlasTexture=function(t,e,r){var a=r.scaledCharWidth+n.CHAR_ATLAS_CELL_SPACING,l=r.scaledCharHeight+n.CHAR_ATLAS_CELL_SPACING,c=e(255*a,34*l),h=c.getContext("2d",{alpha:r.allowTransparency});h.fillStyle=r.colors.background.css,h.fillRect(0,0,c.width,c.height),h.save(),h.fillStyle=r.colors.foreground.css,h.font=o(r.fontWeight,r),h.textBaseline="top";for(var u=0;u<256;u++)h.save(),h.beginPath(),h.rect(u*a,0,a,l),h.clip(),h.fillText(String.fromCharCode(u),u*a,0),h.restore();for(h.save(),h.font=o(r.fontWeightBold,r),u=0;u<256;u++)h.save(),h.beginPath(),h.rect(u*a,l,a,l),h.clip(),h.fillText(String.fromCharCode(u),u*a,l),h.restore();h.restore(),h.font=o(r.fontWeight,r);for(var f=0;f<16;f++){var p=(f+2)*l;for(u=0;u<256;u++)h.save(),h.beginPath(),h.rect(u*a,p,a,l),h.clip(),h.fillStyle=r.colors.ansi[f].css,h.fillText(String.fromCharCode(u),u*a,p),h.restore()}for(h.font=o(r.fontWeightBold,r),f=0;f<16;f++)for(p=(f+2+16)*l,u=0;u<256;u++)h.save(),h.beginPath(),h.rect(u*a,p,a,l),h.clip(),h.fillStyle=r.colors.ansi[f].css,h.fillText(String.fromCharCode(u),u*a,p),h.restore();if(h.restore(),!("createImageBitmap"in t)||i.isFirefox||i.isSafari)return c;var d=h.getImageData(0,0,c.width,c.height);return s(d,r.colors.background),t.createImageBitmap(d)},e.clearColor=s},function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return n(e,t),e.prototype.setListener=function(t){var e=this;this._listener&&this.clearListener(),this._listener=t,this._outerListener=function(){e._listener(window.devicePixelRatio,e._currentDevicePixelRatio),e._updateDpr()},this._updateDpr()},e.prototype.dispose=function(){t.prototype.dispose.call(this),this.clearListener()},e.prototype._updateDpr=function(){this._resolutionMediaMatchList&&this._resolutionMediaMatchList.removeListener(this._outerListener),this._currentDevicePixelRatio=window.devicePixelRatio,this._resolutionMediaMatchList=window.matchMedia("screen and (resolution: "+window.devicePixelRatio+"dppx)"),this._resolutionMediaMatchList.addListener(this._outerListener)},e.prototype.clearListener=function(){this._listener&&(this._resolutionMediaMatchList.removeListener(this._outerListener),this._listener=null,this._outerListener=null)},e}(r(3).Disposable);e.ScreenDprMonitor=s},function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var s=r(3),o=r(12),a=function(t){function e(e){var r=t.call(this)||this;return r._terminal=e,r._zones=[],r._areZonesActive=!1,r._tooltipTimeout=null,r._currentZone=null,r._lastHoverCoords=[null,null],r.register(o.addDisposableDomListener(r._terminal.element,"mousedown",function(t){return r._onMouseDown(t)})),r._mouseMoveListener=function(t){return r._onMouseMove(t)},r._clickListener=function(t){return r._onClick(t)},r}return n(e,t),e.prototype.dispose=function(){t.prototype.dispose.call(this),this._deactivate()},e.prototype.add=function(t){this._zones.push(t),1===this._zones.length&&this._activate()},e.prototype.clearAll=function(t,e){if(0!==this._zones.length){e||(t=0,e=this._terminal.rows-1);for(var r=0;r<this._zones.length;r++){var i=this._zones[r];(i.y1>t&&i.y1<=e+1||i.y2>t&&i.y2<=e+1||i.y1<t&&i.y2>e+1)&&(this._currentZone&&this._currentZone===i&&(this._currentZone.leaveCallback(),this._currentZone=null),this._zones.splice(r--,1))}0===this._zones.length&&this._deactivate()}},e.prototype._activate=function(){this._areZonesActive||(this._areZonesActive=!0,this._terminal.element.addEventListener("mousemove",this._mouseMoveListener),this._terminal.element.addEventListener("click",this._clickListener))},e.prototype._deactivate=function(){this._areZonesActive&&(this._areZonesActive=!1,this._terminal.element.removeEventListener("mousemove",this._mouseMoveListener),this._terminal.element.removeEventListener("click",this._clickListener))},e.prototype._onMouseMove=function(t){this._lastHoverCoords[0]===t.pageX&&this._lastHoverCoords[1]===t.pageY||(this._onHover(t),this._lastHoverCoords=[t.pageX,t.pageY])},e.prototype._onHover=function(t){var e=this,r=this._findZoneEventAt(t);r!==this._currentZone&&(this._currentZone&&(this._currentZone.leaveCallback(),this._currentZone=null,this._tooltipTimeout&&clearTimeout(this._tooltipTimeout)),r&&(this._currentZone=r,r.hoverCallback&&r.hoverCallback(t),this._tooltipTimeout=setTimeout(function(){return e._onTooltip(t)},500)))},e.prototype._onTooltip=function(t){this._tooltipTimeout=null;var e=this._findZoneEventAt(t);e&&e.tooltipCallback&&e.tooltipCallback(t)},e.prototype._onMouseDown=function(t){if(this._areZonesActive){var e=this._findZoneEventAt(t);e&&e.willLinkActivate(t)&&(t.preventDefault(),t.stopImmediatePropagation())}},e.prototype._onClick=function(t){var e=this._findZoneEventAt(t);e&&(e.clickCallback(t),t.preventDefault(),t.stopImmediatePropagation())},e.prototype._findZoneEventAt=function(t){var e=this._terminal.mouseHelper.getCoords(t,this._terminal.screenElement,this._terminal.charMeasure,this._terminal.cols,this._terminal.rows);if(!e)return null;for(var r=e[0],i=e[1],n=0;n<this._zones.length;n++){var s=this._zones[n];if(s.y1===s.y2){if(i===s.y1&&r>=s.x1&&r<s.x2)return s}else if(i===s.y1&&r>=s.x1||i===s.y2&&r<s.x2||i>s.y1&&i<s.y2)return s}return null},e}(s.Disposable);e.MouseZoneManager=a;var l=function(){return function(t,e,r,i,n,s,o,a,l){this.x1=t,this.y1=e,this.x2=r,this.y2=i,this.clickCallback=n,this.hoverCallback=s,this.tooltipCallback=o,this.leaveCallback=a,this.willLinkActivate=l}}();e.MouseZone=l},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t){this._renderer=t}return t.prototype.setRenderer=function(t){this._renderer=t},t.getCoordsRelativeToElement=function(t,e){if(null===t.pageX||void 0===t.pageX)return null;for(var r=e,i=t.pageX,n=t.pageY;e;)i-=e.offsetLeft,n-=e.offsetTop,e=e.offsetParent;for(e=r;e&&e!==e.ownerDocument.body;)i+=e.scrollLeft,n+=e.scrollTop,e=e.parentElement;return[i,n]},t.prototype.getCoords=function(e,r,i,n,s,o){if(!i.width||!i.height)return null;var a=t.getCoordsRelativeToElement(e,r);return a?(a[0]=Math.ceil((a[0]+(o?this._renderer.dimensions.actualCellWidth/2:0))/this._renderer.dimensions.actualCellWidth),a[1]=Math.ceil(a[1]/this._renderer.dimensions.actualCellHeight),a[0]=Math.min(Math.max(a[0],1),n+(o?1:0)),a[1]=Math.min(Math.max(a[1],1),s),a):null},t.prototype.getRawByteCoords=function(t,e,r,i,n){var s=this.getCoords(t,e,r,i,n),o=s[0],a=s[1];return{x:o+=32,y:a+=32}},t}();e.MouseHelper=i},function(t,e,r){var i=r(48),n=r(18),s=r(30),o=r(8)("socket.io-client");t.exports=e=l;var a=e.managers={};function l(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var r,n=i(t),l=n.source,c=n.id,h=n.path,u=a[c]&&h in a[c].nsps;return e.forceNew||e["force new connection"]||!1===e.multiplex||u?(o("ignoring socket cache for %s",l),r=s(l,e)):(a[c]||(o("new io instance for %s",l),a[c]=s(l,e)),r=a[c]),n.query&&!e.query&&(e.query=n.query),r.socket(n.path,e)}e.protocol=n.protocol,e.connect=l,e.Manager=r(30),e.Socket=r(36)},function(t,e,r){"use strict";function i(t){if(!t.element.parentElement)return null;var e=window.getComputedStyle(t.element.parentElement),r=parseInt(e.getPropertyValue("height")),i=Math.max(0,parseInt(e.getPropertyValue("width"))),n=window.getComputedStyle(t.element),s=r-(parseInt(n.getPropertyValue("padding-top"))+parseInt(n.getPropertyValue("padding-bottom"))),o=i-(parseInt(n.getPropertyValue("padding-right"))+parseInt(n.getPropertyValue("padding-left")))-t._core.viewport.scrollBarWidth;return{cols:Math.floor(o/t._core.renderer.dimensions.actualCellWidth),rows:Math.floor(s/t._core.renderer.dimensions.actualCellHeight)}}function n(t){var e=i(t);e&&(t.rows===e.rows&&t.cols===e.cols||(t._core.renderer.clear(),t.resize(e.cols,e.rows)))}Object.defineProperty(e,"__esModule",{value:!0}),e.proposeGeometry=i,e.fit=n,e.apply=function(t){t.prototype.proposeGeometry=function(){return i(this)},t.prototype.fit=function(){n(this)}}},function(t,e,r){"use strict";r.r(e);var i=r(45),n=r.n(i),s=r(26),o=r(46);r(106),r(105),r(111);const a=document.getElementById("terminal"),l=new s.Terminal;l.open(a),l.setOption("lineHeight",1.5),Object(o.fit)(l);const c=n()();c.on("connect",function(){c.emit("standby",l.cols,l.rows),l.clear(),l.writeln("请输入用户名和密码进行登录。")});const h=document.getElementsByClassName("submit")[0];h.onclick=function(){h.blur();const t=document.getElementsByClassName("account")[0].value,e=document.getElementsByClassName("password")[0].value;t&&e?(l.writeln("请稍后，正在登录..."),c.emit("login",t,e)):alert("请输入用户名和密码进行登录")},c.on("invalidateIP",function(){l.writeln("请检查IP地址或者端口是否设置正确。")}),c.on("login",function(t){t&&(console.log("login success!"),l.setOption("cursorBlink",!0),l.focus(),h.disabled=!0)}),c.on("SSH-ERROR",function(t){l.writeln("连接出现错误，请尝试重新登录。"),l.writeln(t)}),c.on("SSH-END",function(){l.writeln("连接已经断开。")}),c.on("SSH-CLOSE",function(t){l.writeln("连接已经关闭。")}),c.on("data",function(t){l.write(t)}),l.on("data",function(t){c.emit("data",t)})},function(t,e,r){var i=r(27),n=r(8)("socket.io-client:url");t.exports=function(t,e){var r=t;e=e||"undefined"!=typeof location&&location,null==t&&(t=e.protocol+"//"+e.host);"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?e.protocol+t:e.host+t),/^(https?|wss?):\/\//.test(t)||(n("protocol-less url %s",t),t=void 0!==e?e.protocol+"//"+t:"https://"+t),n("parse %s",t),r=i(t));r.port||(/^(http|ws)$/.test(r.protocol)?r.port="80":/^(http|ws)s$/.test(r.protocol)&&(r.port="443"));r.path=r.path||"/";var s=-1!==r.host.indexOf(":")?"["+r.host+"]":r.host;return r.id=r.protocol+"://"+s+":"+r.port,r.href=r.protocol+"://"+s+(e&&e.port===r.port?"":":"+r.port),r}},function(t,e,r){function i(t){var r;function i(){if(i.enabled){var t=i,n=+new Date,s=n-(r||n);t.diff=s,t.prev=r,t.curr=n,r=n;for(var o=new Array(arguments.length),a=0;a<o.length;a++)o[a]=arguments[a];o[0]=e.coerce(o[0]),"string"!=typeof o[0]&&o.unshift("%O");var l=0;o[0]=o[0].replace(/%([a-zA-Z%])/g,function(r,i){if("%%"===r)return r;l++;var n=e.formatters[i];if("function"==typeof n){var s=o[l];r=n.call(t,s),o.splice(l,1),l--}return r}),e.formatArgs.call(t,o),(i.log||e.log||console.log.bind(console)).apply(t,o)}}return i.namespace=t,i.enabled=e.enabled(t),i.useColors=e.useColors(),i.color=function(t){var r,i=0;for(r in t)i=(i<<5)-i+t.charCodeAt(r),i|=0;return e.colors[Math.abs(i)%e.colors.length]}(t),i.destroy=n,"function"==typeof e.init&&e.init(i),e.instances.push(i),i}function n(){var t=e.instances.indexOf(this);return-1!==t&&(e.instances.splice(t,1),!0)}(e=t.exports=i.debug=i.default=i).coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){e.enable("")},e.enable=function(t){var r;e.save(t),e.names=[],e.skips=[];var i=("string"==typeof t?t:"").split(/[\s,]+/),n=i.length;for(r=0;r<n;r++)i[r]&&("-"===(t=i[r].replace(/\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")));for(r=0;r<e.instances.length;r++){var s=e.instances[r];s.enabled=e.enabled(s.namespace)}},e.enabled=function(t){if("*"===t[t.length-1])return!0;var r,i;for(r=0,i=e.skips.length;r<i;r++)if(e.skips[r].test(t))return!1;for(r=0,i=e.names.length;r<i;r++)if(e.names[r].test(t))return!0;return!1},e.humanize=r(17),e.instances=[],e.names=[],e.skips=[],e.formatters={}},function(t,e,r){(function(i){function n(){var t;try{t=e.storage.debug}catch(t){}return!t&&void 0!==i&&"env"in i&&(t=i.env.DEBUG),t}(e=t.exports=r(51)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},e.formatArgs=function(t){var r=this.useColors;if(t[0]=(r?"%c":"")+this.namespace+(r?" %c":" ")+t[0]+(r?"%c ":" ")+"+"+e.humanize(this.diff),!r)return;var i="color: "+this.color;t.splice(1,0,i,"color: inherit");var n=0,s=0;t[0].replace(/%[a-zA-Z%]/g,function(t){"%%"!==t&&(n++,"%c"===t&&(s=n))}),t.splice(s,0,i)},e.save=function(t){try{null==t?e.storage.removeItem("debug"):e.storage.debug=t}catch(t){}},e.load=n,e.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.formatters.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}},e.enable(n())}).call(this,r(16))},function(t,e,r){function i(t){var r;function i(){if(i.enabled){var t=i,n=+new Date,s=n-(r||n);t.diff=s,t.prev=r,t.curr=n,r=n;for(var o=new Array(arguments.length),a=0;a<o.length;a++)o[a]=arguments[a];o[0]=e.coerce(o[0]),"string"!=typeof o[0]&&o.unshift("%O");var l=0;o[0]=o[0].replace(/%([a-zA-Z%])/g,function(r,i){if("%%"===r)return r;l++;var n=e.formatters[i];if("function"==typeof n){var s=o[l];r=n.call(t,s),o.splice(l,1),l--}return r}),e.formatArgs.call(t,o),(i.log||e.log||console.log.bind(console)).apply(t,o)}}return i.namespace=t,i.enabled=e.enabled(t),i.useColors=e.useColors(),i.color=function(t){var r,i=0;for(r in t)i=(i<<5)-i+t.charCodeAt(r),i|=0;return e.colors[Math.abs(i)%e.colors.length]}(t),i.destroy=n,"function"==typeof e.init&&e.init(i),e.instances.push(i),i}function n(){var t=e.instances.indexOf(this);return-1!==t&&(e.instances.splice(t,1),!0)}(e=t.exports=i.debug=i.default=i).coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){e.enable("")},e.enable=function(t){var r;e.save(t),e.names=[],e.skips=[];var i=("string"==typeof t?t:"").split(/[\s,]+/),n=i.length;for(r=0;r<n;r++)i[r]&&("-"===(t=i[r].replace(/\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")));for(r=0;r<e.instances.length;r++){var s=e.instances[r];s.enabled=e.enabled(s.namespace)}},e.enabled=function(t){if("*"===t[t.length-1])return!0;var r,i;for(r=0,i=e.skips.length;r<i;r++)if(e.skips[r].test(t))return!1;for(r=0,i=e.names.length;r<i;r++)if(e.names[r].test(t))return!0;return!1},e.humanize=r(17),e.instances=[],e.names=[],e.skips=[],e.formatters={}},function(t,e,r){var i=r(19),n=r(28),s=Object.prototype.toString,o="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===s.call(Blob),a="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===s.call(File);e.deconstructPacket=function(t){var e=[],r=t.data,s=t;return s.data=function t(e,r){if(!e)return e;if(n(e)){var s={_placeholder:!0,num:r.length};return r.push(e),s}if(i(e)){for(var o=new Array(e.length),a=0;a<e.length;a++)o[a]=t(e[a],r);return o}if("object"==typeof e&&!(e instanceof Date)){var o={};for(var l in e)o[l]=t(e[l],r);return o}return e}(r,e),s.attachments=e.length,{packet:s,buffers:e}},e.reconstructPacket=function(t,e){return t.data=function t(e,r){if(!e)return e;if(e&&e._placeholder)return r[e.num];if(i(e))for(var n=0;n<e.length;n++)e[n]=t(e[n],r);else if("object"==typeof e)for(var s in e)e[s]=t(e[s],r);return e}(t.data,e),t.attachments=void 0,t},e.removeBlobs=function(t,e){var r=0,s=t;!function t(l,c,h){if(!l)return l;if(o&&l instanceof Blob||a&&l instanceof File){r++;var u=new FileReader;u.onload=function(){h?h[c]=this.result:s=this.result,--r||e(s)},u.readAsArrayBuffer(l)}else if(i(l))for(var f=0;f<l.length;f++)t(l[f],f,l);else if("object"==typeof l&&!n(l))for(var p in l)t(l[p],p,l)}(s),r||e(s)}},function(t,e,r){"use strict";e.byteLength=function(t){var e=c(t),r=e[0],i=e[1];return 3*(r+i)/4-i},e.toByteArray=function(t){for(var e,r=c(t),i=r[0],o=r[1],a=new s(function(t,e,r){return 3*(e+r)/4-r}(0,i,o)),l=0,h=o>0?i-4:i,u=0;u<h;u+=4)e=n[t.charCodeAt(u)]<<18|n[t.charCodeAt(u+1)]<<12|n[t.charCodeAt(u+2)]<<6|n[t.charCodeAt(u+3)],a[l++]=e>>16&255,a[l++]=e>>8&255,a[l++]=255&e;2===o&&(e=n[t.charCodeAt(u)]<<2|n[t.charCodeAt(u+1)]>>4,a[l++]=255&e);1===o&&(e=n[t.charCodeAt(u)]<<10|n[t.charCodeAt(u+1)]<<4|n[t.charCodeAt(u+2)]>>2,a[l++]=e>>8&255,a[l++]=255&e);return a},e.fromByteArray=function(t){for(var e,r=t.length,n=r%3,s=[],o=0,a=r-n;o<a;o+=16383)s.push(h(t,o,o+16383>a?a:o+16383));1===n?(e=t[r-1],s.push(i[e>>2]+i[e<<4&63]+"==")):2===n&&(e=(t[r-2]<<8)+t[r-1],s.push(i[e>>10]+i[e>>4&63]+i[e<<2&63]+"="));return s.join("")};for(var i=[],n=[],s="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,l=o.length;a<l;++a)i[a]=o[a],n[o.charCodeAt(a)]=a;function c(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return-1===r&&(r=e),[r,r===e?0:4-r%4]}function h(t,e,r){for(var n,s,o=[],a=e;a<r;a+=3)n=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),o.push(i[(s=n)>>18&63]+i[s>>12&63]+i[s>>6&63]+i[63&s]);return o.join("")}n["-".charCodeAt(0)]=62,n["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,r,i,n){var s,o,a=8*n-i-1,l=(1<<a)-1,c=l>>1,h=-7,u=r?n-1:0,f=r?-1:1,p=t[e+u];for(u+=f,s=p&(1<<-h)-1,p>>=-h,h+=a;h>0;s=256*s+t[e+u],u+=f,h-=8);for(o=s&(1<<-h)-1,s>>=-h,h+=i;h>0;o=256*o+t[e+u],u+=f,h-=8);if(0===s)s=1-c;else{if(s===l)return o?NaN:1/0*(p?-1:1);o+=Math.pow(2,i),s-=c}return(p?-1:1)*o*Math.pow(2,s-i)},e.write=function(t,e,r,i,n,s){var o,a,l,c=8*s-n-1,h=(1<<c)-1,u=h>>1,f=23===n?Math.pow(2,-24)-Math.pow(2,-77):0,p=i?0:s-1,d=i?1:-1,_=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,o=h):(o=Math.floor(Math.log(e)/Math.LN2),e*(l=Math.pow(2,-o))<1&&(o--,l*=2),(e+=o+u>=1?f/l:f*Math.pow(2,1-u))*l>=2&&(o++,l/=2),o+u>=h?(a=0,o=h):o+u>=1?(a=(e*l-1)*Math.pow(2,n),o+=u):(a=e*Math.pow(2,u-1)*Math.pow(2,n),o=0));n>=8;t[r+p]=255&a,p+=d,a/=256,n-=8);for(o=o<<n|a,c+=n;c>0;t[r+p]=255&o,p+=d,o/=256,c-=8);t[r+p-d]|=128*_}},function(t,e){var r={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==r.call(t)}},function(t,e,r){t.exports=r(57),t.exports.parser=r(5)},function(t,e,r){var i=r(31),n=r(4),s=r(11)("engine.io-client:socket"),o=r(35),a=r(5),l=r(27),c=r(9);function h(t,e){if(!(this instanceof h))return new h(t,e);e=e||{},t&&"object"==typeof t&&(e=t,t=null),t?(t=l(t),e.hostname=t.host,e.secure="https"===t.protocol||"wss"===t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=l(e.host).host),this.secure=null!=e.secure?e.secure:"undefined"!=typeof location&&"https:"===location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.agent=e.agent||!1,this.hostname=e.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=e.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.query=e.query||{},"string"==typeof this.query&&(this.query=c.decode(this.query)),this.upgrade=!1!==e.upgrade,this.path=(e.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!e.forceJSONP,this.jsonp=!1!==e.jsonp,this.forceBase64=!!e.forceBase64,this.enablesXDR=!!e.enablesXDR,this.timestampParam=e.timestampParam||"t",this.timestampRequests=e.timestampRequests,this.transports=e.transports||["polling","websocket"],this.transportOptions=e.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=e.policyPort||843,this.rememberUpgrade=e.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=e.onlyBinaryUpgrades,this.perMessageDeflate=!1!==e.perMessageDeflate&&(e.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=e.pfx||null,this.key=e.key||null,this.passphrase=e.passphrase||null,this.cert=e.cert||null,this.ca=e.ca||null,this.ciphers=e.ciphers||null,this.rejectUnauthorized=void 0===e.rejectUnauthorized||e.rejectUnauthorized,this.forceNode=!!e.forceNode,this.isReactNative="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase(),("undefined"==typeof self||this.isReactNative)&&(e.extraHeaders&&Object.keys(e.extraHeaders).length>0&&(this.extraHeaders=e.extraHeaders),e.localAddress&&(this.localAddress=e.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}t.exports=h,h.priorWebsocketSuccess=!1,n(h.prototype),h.protocol=a.protocol,h.Socket=h,h.Transport=r(22),h.transports=r(31),h.parser=r(5),h.prototype.createTransport=function(t){s('creating transport "%s"',t);var e=function(t){var e={};for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r]);return e}(this.query);e.EIO=a.protocol,e.transport=t;var r=this.transportOptions[t]||{};return this.id&&(e.sid=this.id),new i[t]({query:e,socket:this,agent:r.agent||this.agent,hostname:r.hostname||this.hostname,port:r.port||this.port,secure:r.secure||this.secure,path:r.path||this.path,forceJSONP:r.forceJSONP||this.forceJSONP,jsonp:r.jsonp||this.jsonp,forceBase64:r.forceBase64||this.forceBase64,enablesXDR:r.enablesXDR||this.enablesXDR,timestampRequests:r.timestampRequests||this.timestampRequests,timestampParam:r.timestampParam||this.timestampParam,policyPort:r.policyPort||this.policyPort,pfx:r.pfx||this.pfx,key:r.key||this.key,passphrase:r.passphrase||this.passphrase,cert:r.cert||this.cert,ca:r.ca||this.ca,ciphers:r.ciphers||this.ciphers,rejectUnauthorized:r.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:r.perMessageDeflate||this.perMessageDeflate,extraHeaders:r.extraHeaders||this.extraHeaders,forceNode:r.forceNode||this.forceNode,localAddress:r.localAddress||this.localAddress,requestTimeout:r.requestTimeout||this.requestTimeout,protocols:r.protocols||void 0,isReactNative:this.isReactNative})},h.prototype.open=function(){var t;if(this.rememberUpgrade&&h.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))t="websocket";else{if(0===this.transports.length){var e=this;return void setTimeout(function(){e.emit("error","No transports available")},0)}t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(t){return this.transports.shift(),void this.open()}t.open(),this.setTransport(t)},h.prototype.setTransport=function(t){s("setting transport %s",t.name);var e=this;this.transport&&(s("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=t,t.on("drain",function(){e.onDrain()}).on("packet",function(t){e.onPacket(t)}).on("error",function(t){e.onError(t)}).on("close",function(){e.onClose("transport close")})},h.prototype.probe=function(t){s('probing transport "%s"',t);var e=this.createTransport(t,{probe:1}),r=!1,i=this;function n(){if(i.onlyBinaryUpgrades){var n=!this.supportsBinary&&i.transport.supportsBinary;r=r||n}r||(s('probe transport "%s" opened',t),e.send([{type:"ping",data:"probe"}]),e.once("packet",function(n){if(!r)if("pong"===n.type&&"probe"===n.data){if(s('probe transport "%s" pong',t),i.upgrading=!0,i.emit("upgrading",e),!e)return;h.priorWebsocketSuccess="websocket"===e.name,s('pausing current transport "%s"',i.transport.name),i.transport.pause(function(){r||"closed"!==i.readyState&&(s("changing transport and sending upgrade packet"),f(),i.setTransport(e),e.send([{type:"upgrade"}]),i.emit("upgrade",e),e=null,i.upgrading=!1,i.flush())})}else{s('probe transport "%s" failed',t);var o=new Error("probe error");o.transport=e.name,i.emit("upgradeError",o)}}))}function o(){r||(r=!0,f(),e.close(),e=null)}function a(r){var n=new Error("probe error: "+r);n.transport=e.name,o(),s('probe transport "%s" failed because of error: %s',t,r),i.emit("upgradeError",n)}function l(){a("transport closed")}function c(){a("socket closed")}function u(t){e&&t.name!==e.name&&(s('"%s" works - aborting "%s"',t.name,e.name),o())}function f(){e.removeListener("open",n),e.removeListener("error",a),e.removeListener("close",l),i.removeListener("close",c),i.removeListener("upgrading",u)}h.priorWebsocketSuccess=!1,e.once("open",n),e.once("error",a),e.once("close",l),this.once("close",c),this.once("upgrading",u),e.open()},h.prototype.onOpen=function(){if(s("socket open"),this.readyState="open",h.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){s("starting upgrade probes");for(var t=0,e=this.upgrades.length;t<e;t++)this.probe(this.upgrades[t])}},h.prototype.onPacket=function(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(s('socket receive: type "%s", data "%s"',t.type,t.data),this.emit("packet",t),this.emit("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emit("data",t.data),this.emit("message",t.data)}else s('packet received with socket readyState "%s"',this.readyState)},h.prototype.onHandshake=function(t){this.emit("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},h.prototype.onHeartbeat=function(t){clearTimeout(this.pingTimeoutTimer);var e=this;e.pingTimeoutTimer=setTimeout(function(){"closed"!==e.readyState&&e.onClose("ping timeout")},t||e.pingInterval+e.pingTimeout)},h.prototype.setPing=function(){var t=this;clearTimeout(t.pingIntervalTimer),t.pingIntervalTimer=setTimeout(function(){s("writing ping packet - expecting pong within %sms",t.pingTimeout),t.ping(),t.onHeartbeat(t.pingTimeout)},t.pingInterval)},h.prototype.ping=function(){var t=this;this.sendPacket("ping",function(){t.emit("ping")})},h.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},h.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(s("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},h.prototype.write=h.prototype.send=function(t,e,r){return this.sendPacket("message",t,e,r),this},h.prototype.sendPacket=function(t,e,r,i){if("function"==typeof e&&(i=e,e=void 0),"function"==typeof r&&(i=r,r=null),"closing"!==this.readyState&&"closed"!==this.readyState){(r=r||{}).compress=!1!==r.compress;var n={type:t,data:e,options:r};this.emit("packetCreate",n),this.writeBuffer.push(n),i&&this.once("flush",i),this.flush()}},h.prototype.close=function(){if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var t=this;this.writeBuffer.length?this.once("drain",function(){this.upgrading?i():e()}):this.upgrading?i():e()}function e(){t.onClose("forced close"),s("socket closing - telling transport to close"),t.transport.close()}function r(){t.removeListener("upgrade",r),t.removeListener("upgradeError",r),e()}function i(){t.once("upgrade",r),t.once("upgradeError",r)}return this},h.prototype.onError=function(t){s("socket error %j",t),h.priorWebsocketSuccess=!1,this.emit("error",t),this.onClose("transport error",t)},h.prototype.onClose=function(t,e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){s('socket close with reason: "%s"',t);clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",t,e),this.writeBuffer=[],this.prevBufferLen=0}},h.prototype.filterUpgrades=function(t){for(var e=[],r=0,i=t.length;r<i;r++)~o(this.transports,t[r])&&e.push(t[r]);return e}},function(t,e){try{t.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){t.exports=!1}},function(t,e,r){var i=r(21),n=r(32),s=r(4),o=r(10),a=r(11)("engine.io-client:polling-xhr");function l(){}function c(t){if(n.call(this,t),this.requestTimeout=t.requestTimeout,this.extraHeaders=t.extraHeaders,"undefined"!=typeof location){var e="https:"===location.protocol,r=location.port;r||(r=e?443:80),this.xd="undefined"!=typeof location&&t.hostname!==location.hostname||r!==t.port,this.xs=t.secure!==e}}function h(t){this.method=t.method||"GET",this.uri=t.uri,this.xd=!!t.xd,this.xs=!!t.xs,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.agent=t.agent,this.isBinary=t.isBinary,this.supportsBinary=t.supportsBinary,this.enablesXDR=t.enablesXDR,this.requestTimeout=t.requestTimeout,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.extraHeaders=t.extraHeaders,this.create()}if(t.exports=c,t.exports.Request=h,o(c,n),c.prototype.supportsBinary=!0,c.prototype.request=function(t){return(t=t||{}).uri=this.uri(),t.xd=this.xd,t.xs=this.xs,t.agent=this.agent||!1,t.supportsBinary=this.supportsBinary,t.enablesXDR=this.enablesXDR,t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized,t.requestTimeout=this.requestTimeout,t.extraHeaders=this.extraHeaders,new h(t)},c.prototype.doWrite=function(t,e){var r="string"!=typeof t&&void 0!==t,i=this.request({method:"POST",data:t,isBinary:r}),n=this;i.on("success",e),i.on("error",function(t){n.onError("xhr post error",t)}),this.sendXhr=i},c.prototype.doPoll=function(){a("xhr poll");var t=this.request(),e=this;t.on("data",function(t){e.onData(t)}),t.on("error",function(t){e.onError("xhr poll error",t)}),this.pollXhr=t},s(h.prototype),h.prototype.create=function(){var t={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized;var e=this.xhr=new i(t),r=this;try{a("xhr open %s: %s",this.method,this.uri),e.open(this.method,this.uri,this.async);try{if(this.extraHeaders)for(var n in e.setDisableHeaderCheck&&e.setDisableHeaderCheck(!0),this.extraHeaders)this.extraHeaders.hasOwnProperty(n)&&e.setRequestHeader(n,this.extraHeaders[n])}catch(t){}if("POST"===this.method)try{this.isBinary?e.setRequestHeader("Content-type","application/octet-stream"):e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{e.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in e&&(e.withCredentials=!0),this.requestTimeout&&(e.timeout=this.requestTimeout),this.hasXDR()?(e.onload=function(){r.onLoad()},e.onerror=function(){r.onError(e.responseText)}):e.onreadystatechange=function(){if(2===e.readyState)try{var t=e.getResponseHeader("Content-Type");r.supportsBinary&&"application/octet-stream"===t&&(e.responseType="arraybuffer")}catch(t){}4===e.readyState&&(200===e.status||1223===e.status?r.onLoad():setTimeout(function(){r.onError(e.status)},0))},a("xhr data %s",this.data),e.send(this.data)}catch(t){return void setTimeout(function(){r.onError(t)},0)}"undefined"!=typeof document&&(this.index=h.requestsCount++,h.requests[this.index]=this)},h.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},h.prototype.onData=function(t){this.emit("data",t),this.onSuccess()},h.prototype.onError=function(t){this.emit("error",t),this.cleanup(!0)},h.prototype.cleanup=function(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=l:this.xhr.onreadystatechange=l,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete h.requests[this.index],this.xhr=null}},h.prototype.onLoad=function(){var t;try{var e;try{e=this.xhr.getResponseHeader("Content-Type")}catch(t){}t="application/octet-stream"===e&&this.xhr.response||this.xhr.responseText}catch(t){this.onError(t)}null!=t&&this.onData(t)},h.prototype.hasXDR=function(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR},h.prototype.abort=function(){this.cleanup()},h.requestsCount=0,h.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",f);else if("function"==typeof addEventListener){var u="onpagehide"in self?"pagehide":"unload";addEventListener(u,f,!1)}function f(){for(var t in h.requests)h.requests.hasOwnProperty(t)&&h.requests[t].abort()}},function(t,e){t.exports=Object.keys||function(t){var e=[],r=Object.prototype.hasOwnProperty;for(var i in t)r.call(t,i)&&e.push(i);return e}},function(t,e){t.exports=function(t,e,r){var i=t.byteLength;if(e=e||0,r=r||i,t.slice)return t.slice(e,r);if(e<0&&(e+=i),r<0&&(r+=i),r>i&&(r=i),e>=i||e>=r||0===i)return new ArrayBuffer(0);for(var n=new Uint8Array(t),s=new Uint8Array(r-e),o=e,a=0;o<r;o++,a++)s[a]=n[o];return s.buffer}},function(t,e){function r(){}t.exports=function(t,e,i){var n=!1;return i=i||r,s.count=t,0===t?e():s;function s(t,r){if(s.count<=0)throw new Error("after called too many times");--s.count,t?(n=!0,e(t),e=i):0!==s.count||n||e(null,r)}}},function(t,e){
/*! https://mths.be/utf8js v2.1.2 by @mathias */
var r,i,n,s=String.fromCharCode;function o(t){for(var e,r,i=[],n=0,s=t.length;n<s;)(e=t.charCodeAt(n++))>=55296&&e<=56319&&n<s?56320==(64512&(r=t.charCodeAt(n++)))?i.push(((1023&e)<<10)+(1023&r)+65536):(i.push(e),n--):i.push(e);return i}function a(t,e){if(t>=55296&&t<=57343){if(e)throw Error("Lone surrogate U+"+t.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function l(t,e){return s(t>>e&63|128)}function c(t,e){if(0==(4294967168&t))return s(t);var r="";return 0==(4294965248&t)?r=s(t>>6&31|192):0==(4294901760&t)?(a(t,e)||(t=65533),r=s(t>>12&15|224),r+=l(t,6)):0==(4292870144&t)&&(r=s(t>>18&7|240),r+=l(t,12),r+=l(t,6)),r+=s(63&t|128)}function h(){if(n>=i)throw Error("Invalid byte index");var t=255&r[n];if(n++,128==(192&t))return 63&t;throw Error("Invalid continuation byte")}function u(t){var e,s;if(n>i)throw Error("Invalid byte index");if(n==i)return!1;if(e=255&r[n],n++,0==(128&e))return e;if(192==(224&e)){if((s=(31&e)<<6|h())>=128)return s;throw Error("Invalid continuation byte")}if(224==(240&e)){if((s=(15&e)<<12|h()<<6|h())>=2048)return a(s,t)?s:65533;throw Error("Invalid continuation byte")}if(240==(248&e)&&(s=(7&e)<<18|h()<<12|h()<<6|h())>=65536&&s<=1114111)return s;throw Error("Invalid UTF-8 detected")}t.exports={version:"2.1.2",encode:function(t,e){for(var r=!1!==(e=e||{}).strict,i=o(t),n=i.length,s=-1,a="";++s<n;)a+=c(i[s],r);return a},decode:function(t,e){var a=!1!==(e=e||{}).strict;r=o(t),i=r.length,n=0;for(var l,c=[];!1!==(l=u(a));)c.push(l);return function(t){for(var e,r=t.length,i=-1,n="";++i<r;)(e=t[i])>65535&&(n+=s((e-=65536)>>>10&1023|55296),e=56320|1023&e),n+=s(e);return n}(c)}}},function(t,e){!function(){"use strict";for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",r=new Uint8Array(256),i=0;i<t.length;i++)r[t.charCodeAt(i)]=i;e.encode=function(e){var r,i=new Uint8Array(e),n=i.length,s="";for(r=0;r<n;r+=3)s+=t[i[r]>>2],s+=t[(3&i[r])<<4|i[r+1]>>4],s+=t[(15&i[r+1])<<2|i[r+2]>>6],s+=t[63&i[r+2]];return n%3==2?s=s.substring(0,s.length-1)+"=":n%3==1&&(s=s.substring(0,s.length-2)+"=="),s},e.decode=function(t){var e,i,n,s,o,a=.75*t.length,l=t.length,c=0;"="===t[t.length-1]&&(a--,"="===t[t.length-2]&&a--);var h=new ArrayBuffer(a),u=new Uint8Array(h);for(e=0;e<l;e+=4)i=r[t.charCodeAt(e)],n=r[t.charCodeAt(e+1)],s=r[t.charCodeAt(e+2)],o=r[t.charCodeAt(e+3)],u[c++]=i<<2|n>>4,u[c++]=(15&n)<<4|s>>2,u[c++]=(3&s)<<6|63&o;return h}}()},function(t,e){var r=void 0!==r?r:"undefined"!=typeof WebKitBlobBuilder?WebKitBlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder&&MozBlobBuilder,i=function(){try{return 2===new Blob(["hi"]).size}catch(t){return!1}}(),n=i&&function(){try{return 2===new Blob([new Uint8Array([1,2])]).size}catch(t){return!1}}(),s=r&&r.prototype.append&&r.prototype.getBlob;function o(t){return t.map(function(t){if(t.buffer instanceof ArrayBuffer){var e=t.buffer;if(t.byteLength!==e.byteLength){var r=new Uint8Array(t.byteLength);r.set(new Uint8Array(e,t.byteOffset,t.byteLength)),e=r.buffer}return e}return t})}function a(t,e){e=e||{};var i=new r;return o(t).forEach(function(t){i.append(t)}),e.type?i.getBlob(e.type):i.getBlob()}function l(t,e){return new Blob(o(t),e||{})}"undefined"!=typeof Blob&&(a.prototype=Blob.prototype,l.prototype=Blob.prototype),t.exports=i?n?Blob:l:s?a:void 0},function(t,e,r){function i(t){var r;function i(){if(i.enabled){var t=i,n=+new Date,s=n-(r||n);t.diff=s,t.prev=r,t.curr=n,r=n;for(var o=new Array(arguments.length),a=0;a<o.length;a++)o[a]=arguments[a];o[0]=e.coerce(o[0]),"string"!=typeof o[0]&&o.unshift("%O");var l=0;o[0]=o[0].replace(/%([a-zA-Z%])/g,function(r,i){if("%%"===r)return r;l++;var n=e.formatters[i];if("function"==typeof n){var s=o[l];r=n.call(t,s),o.splice(l,1),l--}return r}),e.formatArgs.call(t,o),(i.log||e.log||console.log.bind(console)).apply(t,o)}}return i.namespace=t,i.enabled=e.enabled(t),i.useColors=e.useColors(),i.color=function(t){var r,i=0;for(r in t)i=(i<<5)-i+t.charCodeAt(r),i|=0;return e.colors[Math.abs(i)%e.colors.length]}(t),i.destroy=n,"function"==typeof e.init&&e.init(i),e.instances.push(i),i}function n(){var t=e.instances.indexOf(this);return-1!==t&&(e.instances.splice(t,1),!0)}(e=t.exports=i.debug=i.default=i).coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){e.enable("")},e.enable=function(t){var r;e.save(t),e.names=[],e.skips=[];var i=("string"==typeof t?t:"").split(/[\s,]+/),n=i.length;for(r=0;r<n;r++)i[r]&&("-"===(t=i[r].replace(/\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")));for(r=0;r<e.instances.length;r++){var s=e.instances[r];s.enabled=e.enabled(s.namespace)}},e.enabled=function(t){if("*"===t[t.length-1])return!0;var r,i;for(r=0,i=e.skips.length;r<i;r++)if(e.skips[r].test(t))return!1;for(r=0,i=e.names.length;r<i;r++)if(e.names[r].test(t))return!0;return!1},e.humanize=r(17),e.instances=[],e.names=[],e.skips=[],e.formatters={}},function(t,e,r){(function(e){var i=r(32),n=r(10);t.exports=h;var s,o=/\n/g,a=/\\n/g;function l(){}function c(){return"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:{}}function h(t){if(i.call(this,t),this.query=this.query||{},!s){var e=c();s=e.___eio=e.___eio||[]}this.index=s.length;var r=this;s.push(function(t){r.onData(t)}),this.query.j=this.index,"function"==typeof addEventListener&&addEventListener("beforeunload",function(){r.script&&(r.script.onerror=l)},!1)}n(h,i),h.prototype.supportsBinary=!1,h.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),i.prototype.doClose.call(this)},h.prototype.doPoll=function(){var t=this,e=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),e.async=!0,e.src=this.uri(),e.onerror=function(e){t.onError("jsonp poll error",e)};var r=document.getElementsByTagName("script")[0];r?r.parentNode.insertBefore(e,r):(document.head||document.body).appendChild(e),this.script=e,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout(function(){var t=document.createElement("iframe");document.body.appendChild(t),document.body.removeChild(t)},100)},h.prototype.doWrite=function(t,e){var r=this;if(!this.form){var i,n=document.createElement("form"),s=document.createElement("textarea"),l=this.iframeId="eio_iframe_"+this.index;n.className="socketio",n.style.position="absolute",n.style.top="-1000px",n.style.left="-1000px",n.target=l,n.method="POST",n.setAttribute("accept-charset","utf-8"),s.name="d",n.appendChild(s),document.body.appendChild(n),this.form=n,this.area=s}function c(){h(),e()}function h(){if(r.iframe)try{r.form.removeChild(r.iframe)}catch(t){r.onError("jsonp polling iframe removal error",t)}try{var t='<iframe src="javascript:0" name="'+r.iframeId+'">';i=document.createElement(t)}catch(t){(i=document.createElement("iframe")).name=r.iframeId,i.src="javascript:0"}i.id=r.iframeId,r.form.appendChild(i),r.iframe=i}this.form.action=this.uri(),h(),t=t.replace(a,"\\\n"),this.area.value=t.replace(o,"\\n");try{this.form.submit()}catch(t){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===r.iframe.readyState&&c()}:this.iframe.onload=c}}).call(this,r(29))},function(t,e,r){(function(e){var i,n,s=r(22),o=r(5),a=r(9),l=r(10),c=r(34),h=r(11)("engine.io-client:websocket");if("undefined"==typeof self)try{n=r(69)}catch(t){}else i=self.WebSocket||self.MozWebSocket;var u=i||n;function f(t){t&&t.forceBase64&&(this.supportsBinary=!1),this.perMessageDeflate=t.perMessageDeflate,this.usingBrowserWebSocket=i&&!t.forceNode,this.protocols=t.protocols,this.usingBrowserWebSocket||(u=n),s.call(this,t)}t.exports=f,l(f,s),f.prototype.name="websocket",f.prototype.supportsBinary=!0,f.prototype.doOpen=function(){if(this.check()){var t=this.uri(),e=this.protocols,r={agent:this.agent,perMessageDeflate:this.perMessageDeflate};r.pfx=this.pfx,r.key=this.key,r.passphrase=this.passphrase,r.cert=this.cert,r.ca=this.ca,r.ciphers=this.ciphers,r.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(r.headers=this.extraHeaders),this.localAddress&&(r.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket&&!this.isReactNative?e?new u(t,e):new u(t):new u(t,e,r)}catch(t){return this.emit("error",t)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},f.prototype.addEventListeners=function(){var t=this;this.ws.onopen=function(){t.onOpen()},this.ws.onclose=function(){t.onClose()},this.ws.onmessage=function(e){t.onData(e.data)},this.ws.onerror=function(e){t.onError("websocket error",e)}},f.prototype.write=function(t){var r=this;this.writable=!1;for(var i=t.length,n=0,s=i;n<s;n++)!function(t){o.encodePacket(t,r.supportsBinary,function(n){if(!r.usingBrowserWebSocket){var s={};if(t.options&&(s.compress=t.options.compress),r.perMessageDeflate)("string"==typeof n?e.byteLength(n):n.length)<r.perMessageDeflate.threshold&&(s.compress=!1)}try{r.usingBrowserWebSocket?r.ws.send(n):r.ws.send(n,s)}catch(t){h("websocket closed before onclose event")}--i||a()})}(t[n]);function a(){r.emit("flush"),setTimeout(function(){r.writable=!0,r.emit("drain")},0)}},f.prototype.onClose=function(){s.prototype.onClose.call(this)},f.prototype.doClose=function(){void 0!==this.ws&&this.ws.close()},f.prototype.uri=function(){var t=this.query||{},e=this.secure?"wss":"ws",r="";return this.port&&("wss"===e&&443!==Number(this.port)||"ws"===e&&80!==Number(this.port))&&(r=":"+this.port),this.timestampRequests&&(t[this.timestampParam]=c()),this.supportsBinary||(t.b64=1),(t=a.encode(t)).length&&(t="?"+t),e+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+r+this.path+t},f.prototype.check=function(){return!(!u||"__initialize"in u&&this.name===f.prototype.name)}}).call(this,r(20).Buffer)},function(t,e){},function(t,e){t.exports=function(t,e){for(var r=[],i=(e=e||0)||0;i<t.length;i++)r[i-e]=t[i];return r}},function(t,e){function r(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}t.exports=r,r.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),r=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-r:t+r}return 0|Math.min(t,this.max)},r.prototype.reset=function(){this.attempts=0},r.prototype.setMin=function(t){this.ms=t},r.prototype.setMax=function(t){this.max=t},r.prototype.setJitter=function(t){this.jitter=t}},function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var s=r(73),o=r(0),a=r(76),l=r(2),c=r(77),h=r(78),u=r(13),f=r(79),p=r(83),d=r(94),_=r(95),m=r(98),y=r(7),g=r(12),C=r(25),v=r(44),b=r(99),w=r(100),A=r(15),E=r(43),S=r(101),L=r(42),x=r(40),T=r(102),R=r(104),k="undefined"!=typeof window?window.document:null,M=["cols","rows"],D={cols:80,rows:24,convertEol:!1,termName:"xterm",cursorBlink:!1,cursorStyle:"block",bellSound:w.DEFAULT_BELL_SOUND,bellStyle:"none",drawBoldTextInBrightColors:!0,enableBold:!0,experimentalCharAtlas:"static",fontFamily:"courier-new, courier, monospace",fontSize:15,fontWeight:"normal",fontWeightBold:"bold",lineHeight:1,letterSpacing:0,scrollback:1e3,screenKeys:!1,screenReaderMode:!1,debug:!1,macOptionIsMeta:!1,macOptionClickForcesSelection:!1,cancelEvents:!1,disableStdin:!1,useFlowControl:!1,allowTransparency:!1,tabStopWidth:8,theme:null,rightClickSelectsWord:y.isMac,rendererType:"canvas",experimentalBufferLineImpl:"TypedArray"},H=function(t){function e(e){void 0===e&&(e={});var r=t.call(this)||this;return r.browser=y,r._blankLine=null,r.options=b.clone(e),r._setup(),r}return n(e,t),e.prototype.dispose=function(){t.prototype.dispose.call(this),this._customKeyEventHandler=null,x.removeTerminalFromCache(this),this.handler=function(){},this.write=function(){},this.element&&this.element.parentNode&&this.element.parentNode.removeChild(this.element)},e.prototype.destroy=function(){this.dispose()},e.prototype._setup=function(){var t=this;Object.keys(D).forEach(function(e){null!==t.options[e]&&void 0!==t.options[e]||(t.options[e]=D[e])}),this._parent=k?k.body:null,this.cols=this.options.cols,this.rows=this.options.rows,this.options.handler&&this.on("data",this.options.handler),this.cursorState=0,this.cursorHidden=!1,this._customKeyEventHandler=null,this.applicationKeypad=!1,this.applicationCursor=!1,this.originMode=!1,this.insertMode=!1,this.wraparoundMode=!0,this.bracketedPasteMode=!1,this.charset=null,this.gcharset=null,this.glevel=0,this.charsets=[null],this.curAttr=o.DEFAULT_ATTR,this.params=[],this.currentParam=0,this.writeBuffer=[],this._writeInProgress=!1,this._xoffSentToCatchUp=!1,this._userScrolling=!1,this._inputHandler=new f.InputHandler(this),this.register(this._inputHandler),this.renderer=this.renderer||null,this.selectionManager=this.selectionManager||null,this.linkifier=this.linkifier||new d.Linkifier(this),this._mouseZoneManager=this._mouseZoneManager||null,this.soundManager=this.soundManager||new w.SoundManager(this),this.buffers=new s.BufferSet(this),this.selectionManager&&(this.selectionManager.clearSelection(),this.selectionManager.initBuffersListeners())},Object.defineProperty(e.prototype,"buffer",{get:function(){return this.buffers.active},enumerable:!0,configurable:!0}),e.prototype.eraseAttr=function(){return-512&o.DEFAULT_ATTR|511&this.curAttr},e.prototype.focus=function(){this.textarea&&this.textarea.focus()},Object.defineProperty(e.prototype,"isFocused",{get:function(){return k.activeElement===this.textarea&&k.hasFocus()},enumerable:!0,configurable:!0}),e.prototype.getOption=function(t){if(!(t in D))throw new Error('No option with key "'+t+'"');return this.options[t]},e.prototype.setOption=function(t,e){if(!(t in D))throw new Error('No option with key "'+t+'"');if(-1!==M.indexOf(t)&&console.error('Option "'+t+'" can only be set in the constructor'),this.options[t]!==e){switch(t){case"bellStyle":e||(e="none");break;case"cursorStyle":e||(e="block");break;case"fontWeight":e||(e="normal");break;case"fontWeightBold":e||(e="bold");break;case"lineHeight":if(e<1)return void console.warn(t+" cannot be less than 1, value: "+e);case"rendererType":e||(e="canvas");break;case"tabStopWidth":if(e<1)return void console.warn(t+" cannot be less than 1, value: "+e);break;case"theme":if(this.renderer)return void this._setTheme(e);break;case"scrollback":if((e=Math.min(e,o.MAX_BUFFER_SIZE))<0)return void console.warn(t+" cannot be less than 0, value: "+e);if(this.options[t]!==e){var r=this.rows+e;if(this.buffer.lines.length>r){var i=this.buffer.lines.length-r,n=this.buffer.ydisp-i<0;this.buffer.lines.trimStart(i),this.buffer.ybase=Math.max(this.buffer.ybase-i,0),this.buffer.ydisp=Math.max(this.buffer.ydisp-i,0),n&&this.refresh(0,this.rows-1)}}}switch(this.options[t]=e,t){case"fontFamily":case"fontSize":this.renderer&&(this.renderer.clear(),this.charMeasure.measure(this.options));break;case"drawBoldTextInBrightColors":case"experimentalCharAtlas":case"enableBold":case"letterSpacing":case"lineHeight":case"fontWeight":case"fontWeightBold":this.renderer&&(this.renderer.clear(),this.renderer.onResize(this.cols,this.rows),this.refresh(0,this.rows-1));case"rendererType":this.renderer&&(this.unregister(this.renderer),this.renderer.dispose(),this.renderer=null),this._setupRenderer(),this.renderer.onCharSizeChanged(),this._theme&&this.renderer.setTheme(this._theme),this.mouseHelper.setRenderer(this.renderer);break;case"scrollback":this.buffers.resize(this.cols,this.rows),this.viewport&&this.viewport.syncScrollArea();break;case"screenReaderMode":e?this._accessibilityManager||(this._accessibilityManager=new S.AccessibilityManager(this)):this._accessibilityManager&&(this._accessibilityManager.dispose(),this._accessibilityManager=null);break;case"tabStopWidth":this.buffers.setupTabStops();break;case"experimentalBufferLineImpl":this.buffers.normal.setBufferLineFactory(e),this.buffers.alt.setBufferLineFactory(e),this._blankLine=null}this.renderer&&this.renderer.onOptionsChanged()}},e.prototype._onTextAreaFocus=function(t){this.sendFocus&&this.handler(u.C0.ESC+"[I"),this.updateCursorStyle(t),this.element.classList.add("focus"),this.showCursor(),this.emit("focus")},e.prototype.blur=function(){return this.textarea.blur()},e.prototype._onTextAreaBlur=function(){this.textarea.value="",this.refresh(this.buffer.y,this.buffer.y),this.sendFocus&&this.handler(u.C0.ESC+"[O"),this.element.classList.remove("focus"),this.emit("blur")},e.prototype._initGlobal=function(){var t=this;this._bindKeys(),this.register(g.addDisposableDomListener(this.element,"copy",function(e){t.hasSelection()&&h.copyHandler(e,t,t.selectionManager)}));var e=function(e){return h.pasteHandler(e,t)};this.register(g.addDisposableDomListener(this.textarea,"paste",e)),this.register(g.addDisposableDomListener(this.element,"paste",e)),y.isFirefox?this.register(g.addDisposableDomListener(this.element,"mousedown",function(e){2===e.button&&h.rightClickHandler(e,t.textarea,t.selectionManager,t.options.rightClickSelectsWord)})):this.register(g.addDisposableDomListener(this.element,"contextmenu",function(e){h.rightClickHandler(e,t.textarea,t.selectionManager,t.options.rightClickSelectsWord)})),y.isLinux&&this.register(g.addDisposableDomListener(this.element,"auxclick",function(e){1===e.button&&h.moveTextAreaUnderMouseCursor(e,t.textarea)}))},e.prototype._bindKeys=function(){var t=this,e=this;this.register(g.addDisposableDomListener(this.element,"keydown",function(t){k.activeElement===this&&e._keyDown(t)},!0)),this.register(g.addDisposableDomListener(this.element,"keypress",function(t){k.activeElement===this&&e._keyPress(t)},!0)),this.register(g.addDisposableDomListener(this.element,"keyup",function(r){(function(t){return 16===t.keyCode||17===t.keyCode||18===t.keyCode})(r)||t.focus(),e._keyUp(r)},!0)),this.register(g.addDisposableDomListener(this.textarea,"keydown",function(e){return t._keyDown(e)},!0)),this.register(g.addDisposableDomListener(this.textarea,"keypress",function(e){return t._keyPress(e)},!0)),this.register(g.addDisposableDomListener(this.textarea,"compositionstart",function(){return t._compositionHelper.compositionstart()})),this.register(g.addDisposableDomListener(this.textarea,"compositionupdate",function(e){return t._compositionHelper.compositionupdate(e)})),this.register(g.addDisposableDomListener(this.textarea,"compositionend",function(){return t._compositionHelper.compositionend()})),this.register(this.addDisposableListener("refresh",function(){return t._compositionHelper.updateCompositionElements()})),this.register(this.addDisposableListener("refresh",function(e){return t._queueLinkification(e.start,e.end)}))},e.prototype.open=function(t){var e=this;if(this._parent=t||this._parent,!this._parent)throw new Error("Terminal requires a parent element.");this._context=this._parent.ownerDocument.defaultView,this._document=this._parent.ownerDocument,this._screenDprMonitor=new L.ScreenDprMonitor,this._screenDprMonitor.setListener(function(){return e.emit("dprchange",window.devicePixelRatio)}),this.register(this._screenDprMonitor),this.element=this._document.createElement("div"),this.element.dir="ltr",this.element.classList.add("terminal"),this.element.classList.add("xterm"),this.element.setAttribute("tabindex","0"),this._parent.appendChild(this.element);var r=k.createDocumentFragment();this._viewportElement=k.createElement("div"),this._viewportElement.classList.add("xterm-viewport"),r.appendChild(this._viewportElement),this._viewportScrollArea=k.createElement("div"),this._viewportScrollArea.classList.add("xterm-scroll-area"),this._viewportElement.appendChild(this._viewportScrollArea),this.screenElement=k.createElement("div"),this.screenElement.classList.add("xterm-screen"),this._helperContainer=k.createElement("div"),this._helperContainer.classList.add("xterm-helpers"),this.screenElement.appendChild(this._helperContainer),r.appendChild(this.screenElement),this._mouseZoneManager=new E.MouseZoneManager(this),this.register(this._mouseZoneManager),this.register(this.addDisposableListener("scroll",function(){return e._mouseZoneManager.clearAll()})),this.linkifier.attachToDom(this._mouseZoneManager),this.textarea=k.createElement("textarea"),this.textarea.classList.add("xterm-helper-textarea"),this.textarea.setAttribute("aria-label",C.promptLabel),this.textarea.setAttribute("aria-multiline","false"),this.textarea.setAttribute("autocorrect","off"),this.textarea.setAttribute("autocapitalize","off"),this.textarea.setAttribute("spellcheck","false"),this.textarea.tabIndex=0,this.register(g.addDisposableDomListener(this.textarea,"focus",function(t){return e._onTextAreaFocus(t)})),this.register(g.addDisposableDomListener(this.textarea,"blur",function(){return e._onTextAreaBlur()})),this._helperContainer.appendChild(this.textarea),this._compositionView=k.createElement("div"),this._compositionView.classList.add("composition-view"),this._compositionHelper=new a.CompositionHelper(this.textarea,this._compositionView,this),this._helperContainer.appendChild(this._compositionView),this.charMeasure=new m.CharMeasure(k,this._helperContainer),this.element.appendChild(r),this._setupRenderer(),this._theme=this.options.theme,this.options.theme=null,this.viewport=new c.Viewport(this,this._viewportElement,this._viewportScrollArea,this.charMeasure),this.viewport.onThemeChanged(this.renderer.colorManager.colors),this.register(this.viewport),this.register(this.addDisposableListener("cursormove",function(){return e.renderer.onCursorMove()})),this.register(this.addDisposableListener("resize",function(){return e.renderer.onResize(e.cols,e.rows)})),this.register(this.addDisposableListener("blur",function(){return e.renderer.onBlur()})),this.register(this.addDisposableListener("focus",function(){return e.renderer.onFocus()})),this.register(this.addDisposableListener("dprchange",function(){return e.renderer.onWindowResize(window.devicePixelRatio)})),this.register(g.addDisposableDomListener(window,"resize",function(){return e.renderer.onWindowResize(window.devicePixelRatio)})),this.register(this.charMeasure.addDisposableListener("charsizechanged",function(){return e.renderer.onCharSizeChanged()})),this.register(this.renderer.addDisposableListener("resize",function(t){return e.viewport.syncScrollArea()})),this.selectionManager=new _.SelectionManager(this,this.charMeasure),this.register(g.addDisposableDomListener(this.element,"mousedown",function(t){return e.selectionManager.onMouseDown(t)})),this.register(this.selectionManager.addDisposableListener("refresh",function(t){return e.renderer.onSelectionChanged(t.start,t.end,t.columnSelectMode)})),this.register(this.selectionManager.addDisposableListener("newselection",function(t){e.textarea.value=t,e.textarea.focus(),e.textarea.select()})),this.register(this.addDisposableListener("scroll",function(){e.viewport.syncScrollArea(),e.selectionManager.refresh()})),this.register(g.addDisposableDomListener(this._viewportElement,"scroll",function(){return e.selectionManager.refresh()})),this.mouseHelper=new v.MouseHelper(this.renderer),this.options.screenReaderMode&&(this._accessibilityManager=new S.AccessibilityManager(this)),this.charMeasure.measure(this.options),this.refresh(0,this.rows-1),this._initGlobal(),this.bindMouse()},e.prototype._setupRenderer=function(){switch(this.options.rendererType){case"canvas":this.renderer=new p.Renderer(this,this.options.theme);break;case"dom":this.renderer=new T.DomRenderer(this,this.options.theme);break;default:throw new Error('Unrecognized rendererType "'+this.options.rendererType+'"')}this.register(this.renderer)},e.prototype._setTheme=function(t){this._theme=t;var e=this.renderer.setTheme(t);this.viewport&&this.viewport.onThemeChanged(e)},e.prototype.bindMouse=function(){var t=this,e=this.element,r=this,i=32;function n(t){var e,n;if(e=function(t){var e,i,n,s,o;switch(t.overrideType||t.type){case"mousedown":e=null!==t.button&&void 0!==t.button?+t.button:null!==t.which&&void 0!==t.which?t.which-1:null,y.isMSIE&&(e=1===e?0:4===e?1:e);break;case"mouseup":e=3;break;case"DOMMouseScroll":e=t.detail<0?64:65;break;case"wheel":e=t.deltaY<0?64:65}i=t.shiftKey?4:0,n=t.metaKey?8:0,s=t.ctrlKey?16:0,o=i|n|s,r.vt200Mouse?o&=s:r.normalMouse||(o=0);return e=32+(o<<2)+e}(t),n=r.mouseHelper.getRawByteCoords(t,r.screenElement,r.charMeasure,r.cols,r.rows))switch(o(e,n),t.overrideType||t.type){case"mousedown":i=e;break;case"mouseup":i=32}}function s(t,e){if(r.utfMouse){if(2047===e)return void t.push(0);e<127?t.push(e):(e>2047&&(e=2047),t.push(192|e>>6),t.push(128|63&e))}else{if(255===e)return void t.push(0);e>127&&(e=127),t.push(e)}}function o(t,e){if(r._vt300Mouse){t&=3,e.x-=32,e.y-=32;var i=u.C0.ESC+"[24";if(0===t)i+="1";else if(1===t)i+="3";else if(2===t)i+="5";else{if(3===t)return;i+="0"}return i+="~["+e.x+","+e.y+"]\r",void r.handler(i)}if(r._decLocator)return t&=3,e.x-=32,e.y-=32,0===t?t=2:1===t?t=4:2===t?t=6:3===t&&(t=3),void r.handler(u.C0.ESC+"["+t+";"+(3===t?4:0)+";"+e.y+";"+e.x+";"+e.page||"0&w");if(r.urxvtMouse)return e.x-=32,e.y-=32,e.x++,e.y++,void r.handler(u.C0.ESC+"["+t+";"+e.x+";"+e.y+"M");if(r.sgrMouse)return e.x-=32,e.y-=32,void r.handler(u.C0.ESC+"[<"+((3==(3&t)?-4&t:t)-32)+";"+e.x+";"+e.y+(3==(3&t)?"m":"M"));var n=[];s(n,t),s(n,e.x),s(n,e.y),r.handler(u.C0.ESC+"[M"+String.fromCharCode.apply(String,n))}this.register(g.addDisposableDomListener(e,"mousedown",function(e){if(e.preventDefault(),t.focus(),t.mouseEvents&&!t.selectionManager.shouldForceSelection(e)){if(n(e),t.vt200Mouse)return e.overrideType="mouseup",n(e),t.cancel(e);var s;t.normalMouse&&(s=function(e){var n,s,a;t.normalMouse&&(n=e,s=i,(a=r.mouseHelper.getRawByteCoords(n,r.screenElement,r.charMeasure,r.cols,r.rows))&&o(s+=32,a))},t._document.addEventListener("mousemove",s));var a=function(e){return t.normalMouse&&!t.x10Mouse&&n(e),s&&(t._document.removeEventListener("mousemove",s),s=null),t._document.removeEventListener("mouseup",a),t.cancel(e)};return t._document.addEventListener("mouseup",a),t.cancel(e)}})),this.register(g.addDisposableDomListener(e,"wheel",function(e){if(t.mouseEvents)t.x10Mouse||t._vt300Mouse||t._decLocator||(n(e),e.preventDefault());else if(!t.buffer.hasScrollback){var r=t.viewport.getLinesScrolled(e);if(0===r)return;for(var i=u.C0.ESC+(t.applicationCursor?"O":"[")+(e.deltaY<0?"A":"B"),s="",o=0;o<Math.abs(r);o++)s+=i;t.handler(s)}})),this.register(g.addDisposableDomListener(e,"wheel",function(e){if(!t.mouseEvents)return t.viewport.onWheel(e),t.cancel(e)})),this.register(g.addDisposableDomListener(e,"touchstart",function(e){if(!t.mouseEvents)return t.viewport.onTouchStart(e),t.cancel(e)})),this.register(g.addDisposableDomListener(e,"touchmove",function(e){if(!t.mouseEvents)return t.viewport.onTouchMove(e),t.cancel(e)}))},e.prototype.refresh=function(t,e){this.renderer&&this.renderer.refreshRows(t,e)},e.prototype._queueLinkification=function(t,e){this.linkifier&&this.linkifier.linkifyRows(t,e)},e.prototype.updateCursorStyle=function(t){this.selectionManager&&this.selectionManager.shouldColumnSelect(t)?this.element.classList.add("column-select"):this.element.classList.remove("column-select")},e.prototype.showCursor=function(){this.cursorState||(this.cursorState=1,this.refresh(this.buffer.y,this.buffer.y))},e.prototype.scroll=function(t){var e;void 0===t&&(t=!1);var r="JsArray"!==this.options.experimentalBufferLineImpl;r?((e=this._blankLine)&&e.length===this.cols&&e.get(0)[o.CHAR_DATA_ATTR_INDEX]===this.eraseAttr()||(e=this.buffer.getBlankLine(this.eraseAttr(),t),this._blankLine=e),e.isWrapped=t):e=this.buffer.getBlankLine(this.eraseAttr(),t);var i=this.buffer.ybase+this.buffer.scrollTop,n=this.buffer.ybase+this.buffer.scrollBottom;if(0===this.buffer.scrollTop){var s=this.buffer.lines.isFull;n===this.buffer.lines.length-1?r?s?this.buffer.lines.recycle().copyFrom(e):this.buffer.lines.push(e.clone()):this.buffer.lines.push(e):this.buffer.lines.splice(n+1,0,r?e.clone():e),s?this._userScrolling&&(this.buffer.ydisp=Math.max(this.buffer.ydisp-1,0)):(this.buffer.ybase++,this._userScrolling||this.buffer.ydisp++)}else{var a=n-i+1;this.buffer.lines.shiftElements(i+1,a-1,-1),this.buffer.lines.set(n,r?e.clone():e)}this._userScrolling||(this.buffer.ydisp=this.buffer.ybase),this.updateRange(this.buffer.scrollTop),this.updateRange(this.buffer.scrollBottom),this.emit("scroll",this.buffer.ydisp)},e.prototype.scrollLines=function(t,e){if(t<0){if(0===this.buffer.ydisp)return;this._userScrolling=!0}else t+this.buffer.ydisp>=this.buffer.ybase&&(this._userScrolling=!1);var r=this.buffer.ydisp;this.buffer.ydisp=Math.max(Math.min(this.buffer.ydisp+t,this.buffer.ybase),0),r!==this.buffer.ydisp&&(e||this.emit("scroll",this.buffer.ydisp),this.refresh(0,this.rows-1))},e.prototype.scrollPages=function(t){this.scrollLines(t*(this.rows-1))},e.prototype.scrollToTop=function(){this.scrollLines(-this.buffer.ydisp)},e.prototype.scrollToBottom=function(){this.scrollLines(this.buffer.ybase-this.buffer.ydisp)},e.prototype.scrollToLine=function(t){var e=t-this.buffer.ydisp;0!==e&&this.scrollLines(e)},e.prototype.write=function(t){var e=this;this._isDisposed||t&&(this.writeBuffer.push(t),this.options.useFlowControl&&!this._xoffSentToCatchUp&&this.writeBuffer.length>=5&&(this.handler(u.C0.DC3),this._xoffSentToCatchUp=!0),!this._writeInProgress&&this.writeBuffer.length>0&&(this._writeInProgress=!0,setTimeout(function(){e._innerWrite()})))},e.prototype._innerWrite=function(){var t=this;this._isDisposed&&(this.writeBuffer=[]);for(var e=this.writeBuffer.splice(0,300);e.length>0;){var r=e.shift();this._xoffSentToCatchUp&&0===e.length&&0===this.writeBuffer.length&&(this.handler(u.C0.DC1),this._xoffSentToCatchUp=!1),this._refreshStart=this.buffer.y,this._refreshEnd=this.buffer.y,this._inputHandler.parse(r),this.updateRange(this.buffer.y),this.refresh(this._refreshStart,this._refreshEnd)}this.writeBuffer.length>0?setTimeout(function(){return t._innerWrite()},0):this._writeInProgress=!1},e.prototype.writeln=function(t){this.write(t+"\r\n")},e.prototype.attachCustomKeyEventHandler=function(t){this._customKeyEventHandler=t},e.prototype.registerLinkMatcher=function(t,e,r){var i=this.linkifier.registerLinkMatcher(t,e,r);return this.refresh(0,this.rows-1),i},e.prototype.deregisterLinkMatcher=function(t){this.linkifier.deregisterLinkMatcher(t)&&this.refresh(0,this.rows-1)},e.prototype.registerCharacterJoiner=function(t){var e=this.renderer.registerCharacterJoiner(t);return this.refresh(0,this.rows-1),e},e.prototype.deregisterCharacterJoiner=function(t){this.renderer.deregisterCharacterJoiner(t)&&this.refresh(0,this.rows-1)},Object.defineProperty(e.prototype,"markers",{get:function(){return this.buffer.markers},enumerable:!0,configurable:!0}),e.prototype.addMarker=function(t){if(this.buffer===this.buffers.normal)return this.buffer.addMarker(this.buffer.ybase+this.buffer.y+t)},e.prototype.hasSelection=function(){return!!this.selectionManager&&this.selectionManager.hasSelection},e.prototype.getSelection=function(){return this.selectionManager?this.selectionManager.selectionText:""},e.prototype.clearSelection=function(){this.selectionManager&&this.selectionManager.clearSelection()},e.prototype.selectAll=function(){this.selectionManager&&this.selectionManager.selectAll()},e.prototype.selectLines=function(t,e){this.selectionManager&&this.selectionManager.selectLines(t,e)},e.prototype._keyDown=function(t){if(this._customKeyEventHandler&&!1===this._customKeyEventHandler(t))return!1;if(!this._compositionHelper.keydown(t))return this.buffer.ybase!==this.buffer.ydisp&&this.scrollToBottom(),!1;var e=R.evaluateKeyboardEvent(t,this.applicationCursor,this.browser.isMac,this.options.macOptionIsMeta);if(this.updateCursorStyle(t),3===e.type||2===e.type){var r=this.rows-1;return this.scrollLines(2===e.type?-r:r),this.cancel(t,!0)}return 1===e.type&&this.selectAll(),!!this._isThirdLevelShift(this.browser,t)||(e.cancel&&this.cancel(t,!0),!e.key||(this.emit("keydown",t),this.emit("key",e.key,t),this.showCursor(),this.handler(e.key),this.cancel(t,!0)))},e.prototype._isThirdLevelShift=function(t,e){var r=t.isMac&&!this.options.macOptionIsMeta&&e.altKey&&!e.ctrlKey&&!e.metaKey||t.isMSWindows&&e.altKey&&e.ctrlKey&&!e.metaKey;return"keypress"===e.type?r:r&&(!e.keyCode||e.keyCode>47)},e.prototype.setgLevel=function(t){this.glevel=t,this.charset=this.charsets[t]},e.prototype.setgCharset=function(t,e){this.charsets[t]=e,this.glevel===t&&(this.charset=e)},e.prototype._keyUp=function(t){this.updateCursorStyle(t)},e.prototype._keyPress=function(t){var e;if(this._customKeyEventHandler&&!1===this._customKeyEventHandler(t))return!1;if(this.cancel(t),t.charCode)e=t.charCode;else if(null===t.which||void 0===t.which)e=t.keyCode;else{if(0===t.which||0===t.charCode)return!1;e=t.which}return!(!e||(t.altKey||t.ctrlKey||t.metaKey)&&!this._isThirdLevelShift(this.browser,t))&&(e=String.fromCharCode(e),this.emit("keypress",e,t),this.emit("key",e,t),this.showCursor(),this.handler(e),!0)},e.prototype.bell=function(){var t=this;this.emit("bell"),this._soundBell()&&this.soundManager.playBellSound(),this._visualBell()&&(this.element.classList.add("visual-bell-active"),clearTimeout(this._visualBellTimer),this._visualBellTimer=window.setTimeout(function(){t.element.classList.remove("visual-bell-active")},200))},e.prototype.log=function(t,e){this.options.debug&&this._context.console&&this._context.console.log&&this._context.console.log(t,e)},e.prototype.error=function(t,e){this.options.debug&&this._context.console&&this._context.console.error&&this._context.console.error(t,e)},e.prototype.resize=function(t,e){isNaN(t)||isNaN(e)||(t!==this.cols||e!==this.rows?(t<1&&(t=1),e<1&&(e=1),this.buffers.resize(t,e),this.cols=t,this.rows=e,this.buffers.setupTabStops(this.cols),this.charMeasure&&this.charMeasure.measure(this.options),this.refresh(0,this.rows-1),this.emit("resize",{cols:t,rows:e})):!this.charMeasure||this.charMeasure.width&&this.charMeasure.height||this.charMeasure.measure(this.options))},e.prototype.updateRange=function(t){t<this._refreshStart&&(this._refreshStart=t),t>this._refreshEnd&&(this._refreshEnd=t)},e.prototype.maxRange=function(){this._refreshStart=0,this._refreshEnd=this.rows-1},e.prototype.clear=function(){if(0!==this.buffer.ybase||0!==this.buffer.y){this.buffer.lines.set(0,this.buffer.lines.get(this.buffer.ybase+this.buffer.y)),this.buffer.lines.length=1,this.buffer.ydisp=0,this.buffer.ybase=0,this.buffer.y=0;for(var t=1;t<this.rows;t++)this.buffer.lines.push(this.buffer.getBlankLine(o.DEFAULT_ATTR));this.refresh(0,this.rows-1),this.emit("scroll",this.buffer.ydisp)}},e.prototype.ch=function(t){return t?[this.eraseAttr(),o.NULL_CELL_CHAR,o.NULL_CELL_WIDTH,o.NULL_CELL_CODE]:[o.DEFAULT_ATTR,o.NULL_CELL_CHAR,o.NULL_CELL_WIDTH,o.NULL_CELL_CODE]},e.prototype.is=function(t){return 0===(this.options.termName+"").indexOf(t)},e.prototype.handler=function(t){this.options.disableStdin||(this.selectionManager&&this.selectionManager.hasSelection&&this.selectionManager.clearSelection(),this.buffer.ybase!==this.buffer.ydisp&&this.scrollToBottom(),this.emit("data",t))},e.prototype.handleTitle=function(t){this.emit("title",t)},e.prototype.index=function(){this.buffer.y++,this.buffer.y>this.buffer.scrollBottom&&(this.buffer.y--,this.scroll()),this.buffer.x>=this.cols&&this.buffer.x--},e.prototype.reverseIndex=function(){if(this.buffer.y===this.buffer.scrollTop){var t=this.buffer.scrollBottom-this.buffer.scrollTop;this.buffer.lines.shiftElements(this.buffer.y+this.buffer.ybase,t,1),this.buffer.lines.set(this.buffer.y+this.buffer.ybase,this.buffer.getBlankLine(this.eraseAttr())),this.updateRange(this.buffer.scrollTop),this.updateRange(this.buffer.scrollBottom)}else this.buffer.y--},e.prototype.reset=function(){this.options.rows=this.rows,this.options.cols=this.cols;var t=this._customKeyEventHandler,e=this._inputHandler,r=this.cursorState;this._setup(),this._customKeyEventHandler=t,this._inputHandler=e,this.cursorState=r,this.refresh(0,this.rows-1),this.viewport&&this.viewport.syncScrollArea()},e.prototype.tabSet=function(){this.buffer.tabs[this.buffer.x]=!0},e.prototype.cancel=function(t,e){if(this.options.cancelEvents||e)return t.preventDefault(),t.stopPropagation(),!1},e.prototype.matchColor=function(t,e,r){var i=t<<16|e<<8|r;if(null!==O[i]&&void 0!==O[i])return O[i];for(var n,s,o=1/0,a=-1,l=0;l<A.DEFAULT_ANSI_COLORS.length;l++){if(0===(s=F(t,e,r,(n=A.DEFAULT_ANSI_COLORS[l].rgba)>>>24,n>>>16&255,n>>>8&255))){a=l;break}s<o&&(o=s,a=l)}return O[i]=a},e.prototype._visualBell=function(){return!1},e.prototype._soundBell=function(){return"sound"===this.options.bellStyle},e}(l.EventEmitter);e.Terminal=H;var O={};function F(t,e,r,i,n,s){return Math.pow(30*(t-i),2)+Math.pow(59*(e-n),2)+Math.pow(11*(r-s),2)}},function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var s=r(0),o=function(t){function e(e){var r=t.call(this)||this;return r._terminal=e,r._normal=new s.Buffer(r._terminal,!0),r._normal.fillViewportRows(),r._alt=new s.Buffer(r._terminal,!1),r._activeBuffer=r._normal,r.setupTabStops(),r}return n(e,t),Object.defineProperty(e.prototype,"alt",{get:function(){return this._alt},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"active",{get:function(){return this._activeBuffer},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"normal",{get:function(){return this._normal},enumerable:!0,configurable:!0}),e.prototype.activateNormalBuffer=function(){this._activeBuffer!==this._normal&&(this._normal.x=this._alt.x,this._normal.y=this._alt.y,this._alt.clear(),this._activeBuffer=this._normal,this.emit("activate",{activeBuffer:this._normal,inactiveBuffer:this._alt}))},e.prototype.activateAltBuffer=function(t){this._activeBuffer!==this._alt&&(this._alt.fillViewportRows(t),this._alt.x=this._normal.x,this._alt.y=this._normal.y,this._activeBuffer=this._alt,this.emit("activate",{activeBuffer:this._alt,inactiveBuffer:this._normal}))},e.prototype.resize=function(t,e){this._normal.resize(t,e),this._alt.resize(t,e)},e.prototype.setupTabStops=function(t){this._normal.setupTabStops(t),this._alt.setupTabStops(t)},e}(r(2).EventEmitter);e.BufferSet=o},function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var s=function(t){function e(e){var r=t.call(this)||this;return r._maxLength=e,r._array=new Array(r._maxLength),r._startIndex=0,r._length=0,r}return n(e,t),Object.defineProperty(e.prototype,"maxLength",{get:function(){return this._maxLength},set:function(t){if(this._maxLength!==t){for(var e=new Array(t),r=0;r<Math.min(t,this.length);r++)e[r]=this._array[this._getCyclicIndex(r)];this._array=e,this._maxLength=t,this._startIndex=0}},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"length",{get:function(){return this._length},set:function(t){if(t>this._length)for(var e=this._length;e<t;e++)this._array[e]=void 0;this._length=t},enumerable:!0,configurable:!0}),e.prototype.get=function(t){return this._array[this._getCyclicIndex(t)]},e.prototype.set=function(t,e){this._array[this._getCyclicIndex(t)]=e},e.prototype.push=function(t){this._array[this._getCyclicIndex(this._length)]=t,this._length===this._maxLength?(this._startIndex=++this._startIndex%this._maxLength,this.emit("trim",1)):this._length++},e.prototype.recycle=function(){if(this._length!==this._maxLength)throw new Error("Can only recycle when the buffer is full");return this._startIndex=++this._startIndex%this._maxLength,this.emit("trim",1),this._array[this._getCyclicIndex(this._length-1)]},Object.defineProperty(e.prototype,"isFull",{get:function(){return this._length===this._maxLength},enumerable:!0,configurable:!0}),e.prototype.pop=function(){return this._array[this._getCyclicIndex(this._length---1)]},e.prototype.splice=function(t,e){for(var r=[],i=2;i<arguments.length;i++)r[i-2]=arguments[i];if(e){for(var n=t;n<this._length-e;n++)this._array[this._getCyclicIndex(n)]=this._array[this._getCyclicIndex(n+e)];this._length-=e}if(r&&r.length){for(n=this._length-1;n>=t;n--)this._array[this._getCyclicIndex(n+r.length)]=this._array[this._getCyclicIndex(n)];for(n=0;n<r.length;n++)this._array[this._getCyclicIndex(t+n)]=r[n];if(this._length+r.length>this._maxLength){var s=this._length+r.length-this._maxLength;this._startIndex+=s,this._length=this._maxLength,this.emit("trim",s)}else this._length+=r.length}},e.prototype.trimStart=function(t){t>this._length&&(t=this._length),this._startIndex+=t,this._length-=t,this.emit("trim",t)},e.prototype.shiftElements=function(t,e,r){if(!(e<=0)){if(t<0||t>=this._length)throw new Error("start argument out of range");if(t+r<0)throw new Error("Cannot shift elements in list beyond index 0");if(r>0){for(var i=e-1;i>=0;i--)this.set(t+i+r,this.get(t+i));var n=t+e+r-this._length;if(n>0)for(this._length+=n;this._length>this._maxLength;)this._length--,this._startIndex++,this.emit("trim",1)}else for(i=0;i<e;i++)this.set(t+i+r,this.get(t+i))}},e.prototype._getCyclicIndex=function(t){return(this._startIndex+t)%this._maxLength},e}(r(2).EventEmitter);e.CircularList=s},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(0),n=function(){function t(t,e,r){this.isWrapped=!1,this._data=[],e||(e=[0,i.NULL_CELL_CHAR,i.NULL_CELL_WIDTH,i.NULL_CELL_CODE]);for(var n=0;n<t;n++)this._push(e);r&&(this.isWrapped=!0),this.length=this._data.length}return t.prototype._pop=function(){var t=this._data.pop();return this.length=this._data.length,t},t.prototype._push=function(t){this._data.push(t),this.length=this._data.length},t.prototype._splice=function(t,e){for(var r,i=[],n=2;n<arguments.length;n++)i[n-2]=arguments[n];var s=(r=this._data).splice.apply(r,[t,e].concat(i));return this.length=this._data.length,s},t.prototype.get=function(t){return this._data[t]},t.prototype.set=function(t,e){this._data[t]=e},t.prototype.insertCells=function(t,e,r){for(;e--;)this._splice(t,0,r),this._pop()},t.prototype.deleteCells=function(t,e,r){for(;e--;)this._splice(t,1),this._push(r)},t.prototype.replaceCells=function(t,e,r){for(;t<e&&t<this.length;)this.set(t++,r)},t.prototype.resize=function(t,e,r){for(void 0===r&&(r=!1);this._data.length<t;)this._data.push(e);if(r)for(;this._data.length>t;)this._data.pop();this.length=this._data.length},t.prototype.fill=function(t){for(var e=0;e<this.length;++e)this.set(e,t)},t.prototype.copyFrom=function(t){this._data=t._data.slice(0),this.length=t.length,this.isWrapped=t.isWrapped},t.prototype.clone=function(){var e=new t(0);return e.copyFrom(this),e},t}();e.BufferLineJSArray=n;var s=3,o=function(){function t(t,e,r){if(void 0===r&&(r=!1),this.isWrapped=r,this._data=null,this._combined={},e||(e=[0,i.NULL_CELL_CHAR,i.NULL_CELL_WIDTH,i.NULL_CELL_CODE]),t){this._data=new Uint32Array(t*s);for(var n=0;n<t;++n)this.set(n,e)}this.length=t}return t.prototype.get=function(t){var e=this._data[t*s+1];return[this._data[t*s+0],2147483648&e?this._combined[t]:e?String.fromCharCode(e):"",this._data[t*s+2],2147483648&e?this._combined[t].charCodeAt(this._combined[t].length-1):e]},t.prototype.set=function(t,e){this._data[t*s+0]=e[0],e[1].length>1?(this._combined[t]=e[1],this._data[t*s+1]=2147483648|t):this._data[t*s+1]=e[1].charCodeAt(0),this._data[t*s+2]=e[2]},t.prototype.insertCells=function(t,e,r){if(t%=this.length,e<this.length-t){for(var i=this.length-t-e-1;i>=0;--i)this.set(t+e+i,this.get(t+i));for(i=0;i<e;++i)this.set(t+i,r)}else for(i=t;i<this.length;++i)this.set(i,r)},t.prototype.deleteCells=function(t,e,r){if(t%=this.length,e<this.length-t){for(var i=0;i<this.length-t-e;++i)this.set(t+i,this.get(t+e+i));for(i=this.length-e;i<this.length;++i)this.set(i,r)}else for(i=t;i<this.length;++i)this.set(i,r)},t.prototype.replaceCells=function(t,e,r){for(;t<e&&t<this.length;)this.set(t++,r)},t.prototype.resize=function(t,e,r){if(void 0===r&&(r=!1),!(t===this.length||!r&&t<this.length)){if(t>this.length){var i=new Uint32Array(t*s);this.length&&(t*s<this._data.length?i.set(this._data.subarray(0,t*s)):i.set(this._data)),this._data=i;for(var n=this.length;n<t;++n)this.set(n,e)}else if(r){if(t)(i=new Uint32Array(t*s)).set(this._data.subarray(0,t*s)),this._data=i;else this._data=null}this.length=t}},t.prototype.fill=function(t){this._combined={};for(var e=0;e<this.length;++e)this.set(e,t)},t.prototype.copyFrom=function(t){for(var e in this.length!==t.length?this._data=new Uint32Array(t._data):this._data.set(t._data),this.length=t.length,this._combined={},t._combined)this._combined[e]=t._combined[e];this.isWrapped=t.isWrapped},t.prototype.clone=function(){var e=new t(0);for(var r in e._data=new Uint32Array(this._data),e.length=this.length,this._combined)e._combined[r]=this._combined[r];return e.isWrapped=this.isWrapped,e},t}();e.BufferLine=o},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e,r){this._textarea=t,this._compositionView=e,this._terminal=r,this._isComposing=!1,this._isSendingComposition=!1,this._compositionPosition={start:null,end:null}}return t.prototype.compositionstart=function(){this._isComposing=!0,this._compositionPosition.start=this._textarea.value.length,this._compositionView.textContent="",this._compositionView.classList.add("active")},t.prototype.compositionupdate=function(t){var e=this;this._compositionView.textContent=t.data,this.updateCompositionElements(),setTimeout(function(){e._compositionPosition.end=e._textarea.value.length},0)},t.prototype.compositionend=function(){this._finalizeComposition(!0)},t.prototype.keydown=function(t){if(this._isComposing||this._isSendingComposition){if(229===t.keyCode)return!1;if(16===t.keyCode||17===t.keyCode||18===t.keyCode)return!1;this._finalizeComposition(!1)}return 229!==t.keyCode||(this._handleAnyTextareaChanges(),!1)},t.prototype._finalizeComposition=function(t){var e=this;if(this._compositionView.classList.remove("active"),this._isComposing=!1,this._clearTextareaPosition(),t){var r={start:this._compositionPosition.start,end:this._compositionPosition.end};this._isSendingComposition=!0,setTimeout(function(){if(e._isSendingComposition){e._isSendingComposition=!1;var t=void 0;t=e._isComposing?e._textarea.value.substring(r.start,r.end):e._textarea.value.substring(r.start),e._terminal.handler(t)}},0)}else{this._isSendingComposition=!1;var i=this._textarea.value.substring(this._compositionPosition.start,this._compositionPosition.end);this._terminal.handler(i)}},t.prototype._handleAnyTextareaChanges=function(){var t=this,e=this._textarea.value;setTimeout(function(){if(!t._isComposing){var r=t._textarea.value.replace(e,"");r.length>0&&t._terminal.handler(r)}},0)},t.prototype.updateCompositionElements=function(t){var e=this;if(this._isComposing){if(this._terminal.buffer.isCursorInViewport){var r=Math.ceil(this._terminal.charMeasure.height*this._terminal.options.lineHeight),i=this._terminal.buffer.y*r,n=this._terminal.buffer.x*this._terminal.charMeasure.width;this._compositionView.style.left=n+"px",this._compositionView.style.top=i+"px",this._compositionView.style.height=r+"px",this._compositionView.style.lineHeight=r+"px";var s=this._compositionView.getBoundingClientRect();this._textarea.style.left=n+"px",this._textarea.style.top=i+"px",this._textarea.style.width=s.width+"px",this._textarea.style.height=s.height+"px",this._textarea.style.lineHeight=s.height+"px"}t||setTimeout(function(){return e.updateCompositionElements(!0)},0)}},t.prototype._clearTextareaPosition=function(){this._textarea.style.left="",this._textarea.style.top=""},t}();e.CompositionHelper=i},function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var s=r(3),o=r(12),a=15,l=function(t){function e(e,r,i,n){var s=t.call(this)||this;return s._terminal=e,s._viewportElement=r,s._scrollArea=i,s._charMeasure=n,s.scrollBarWidth=0,s._currentRowHeight=0,s._lastRecordedBufferLength=0,s._lastRecordedViewportHeight=0,s._lastRecordedBufferHeight=0,s._lastScrollTop=0,s._wheelPartialScroll=0,s._refreshAnimationFrame=null,s._ignoreNextScrollEvent=!1,s.scrollBarWidth=s._viewportElement.offsetWidth-s._scrollArea.offsetWidth||a,s.register(o.addDisposableDomListener(s._viewportElement,"scroll",s._onScroll.bind(s))),setTimeout(function(){return s.syncScrollArea()},0),s}return n(e,t),e.prototype.onThemeChanged=function(t){this._viewportElement.style.backgroundColor=t.background.css},e.prototype._refresh=function(){var t=this;null===this._refreshAnimationFrame&&(this._refreshAnimationFrame=requestAnimationFrame(function(){return t._innerRefresh()}))},e.prototype._innerRefresh=function(){if(this._charMeasure.height>0){this._currentRowHeight=this._terminal.renderer.dimensions.scaledCellHeight/window.devicePixelRatio,this._lastRecordedViewportHeight=this._viewportElement.offsetHeight;var t=Math.round(this._currentRowHeight*this._lastRecordedBufferLength)+(this._lastRecordedViewportHeight-this._terminal.renderer.dimensions.canvasHeight);this._lastRecordedBufferHeight!==t&&(this._lastRecordedBufferHeight=t,this._scrollArea.style.height=this._lastRecordedBufferHeight+"px")}var e=this._terminal.buffer.ydisp*this._currentRowHeight;this._viewportElement.scrollTop!==e&&(this._ignoreNextScrollEvent=!0,this._viewportElement.scrollTop=e),this._refreshAnimationFrame=null},e.prototype.syncScrollArea=function(){if(this._lastRecordedBufferLength!==this._terminal.buffer.lines.length)return this._lastRecordedBufferLength=this._terminal.buffer.lines.length,void this._refresh();if(this._lastRecordedViewportHeight===this._terminal.renderer.dimensions.canvasHeight){var t=this._terminal.buffer.ydisp*this._currentRowHeight;this._lastScrollTop===t&&this._lastScrollTop===this._viewportElement.scrollTop&&this._terminal.renderer.dimensions.scaledCellHeight/window.devicePixelRatio===this._currentRowHeight||this._refresh()}else this._refresh()},e.prototype._onScroll=function(t){if(this._lastScrollTop=this._viewportElement.scrollTop,this._viewportElement.offsetParent)if(this._ignoreNextScrollEvent)this._ignoreNextScrollEvent=!1;else{var e=Math.round(this._lastScrollTop/this._currentRowHeight)-this._terminal.buffer.ydisp;this._terminal.scrollLines(e,!0)}},e.prototype.onWheel=function(t){var e=this._getPixelsScrolled(t);0!==e&&(this._viewportElement.scrollTop+=e,t.preventDefault())},e.prototype._getPixelsScrolled=function(t){if(0===t.deltaY)return 0;var e=t.deltaY;return t.deltaMode===WheelEvent.DOM_DELTA_LINE?e*=this._currentRowHeight:t.deltaMode===WheelEvent.DOM_DELTA_PAGE&&(e*=this._currentRowHeight*this._terminal.rows),e},e.prototype.getLinesScrolled=function(t){if(0===t.deltaY)return 0;var e=t.deltaY;return t.deltaMode===WheelEvent.DOM_DELTA_PIXEL?(e/=this._currentRowHeight+0,this._wheelPartialScroll+=e,e=Math.floor(Math.abs(this._wheelPartialScroll))*(this._wheelPartialScroll>0?1:-1),this._wheelPartialScroll%=1):t.deltaMode===WheelEvent.DOM_DELTA_PAGE&&(e*=this._terminal.rows),e},e.prototype.onTouchStart=function(t){this._lastTouchY=t.touches[0].pageY},e.prototype.onTouchMove=function(t){var e=this._lastTouchY-t.touches[0].pageY;this._lastTouchY=t.touches[0].pageY,0!==e&&(this._viewportElement.scrollTop+=e,t.preventDefault())},e}(s.Disposable);e.Viewport=l},function(t,e,r){"use strict";function i(t){return t.replace(/\r?\n/g,"\r")}function n(t,e){return e?"[200~"+t+"[201~":t}function s(t,e){e.style.position="fixed",e.style.width="20px",e.style.height="20px",e.style.left=t.clientX-10+"px",e.style.top=t.clientY-10+"px",e.style.zIndex="1000",e.focus(),setTimeout(function(){e.style.position=null,e.style.width=null,e.style.height=null,e.style.left=null,e.style.top=null,e.style.zIndex=null},200)}Object.defineProperty(e,"__esModule",{value:!0}),e.prepareTextForTerminal=i,e.bracketTextForPaste=n,e.copyHandler=function(t,e,r){e.browser.isMSIE?window.clipboardData.setData("Text",r.selectionText):t.clipboardData.setData("text/plain",r.selectionText),t.preventDefault()},e.pasteHandler=function(t,e){t.stopPropagation();var r=function(r){r=n(r=i(r),e.bracketedPasteMode),e.handler(r),e.textarea.value="",e.emit("paste",r),e.cancel(t)};e.browser.isMSIE?window.clipboardData&&r(window.clipboardData.getData("Text")):t.clipboardData&&r(t.clipboardData.getData("text/plain"))},e.moveTextAreaUnderMouseCursor=s,e.rightClickHandler=function(t,e,r,i){s(t,e),i&&!r.isClickInSelection(t)&&r.selectWordAtCursor(t),e.value=r.selectionText,e.select()}},function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var s=r(13),o=r(80),a=r(0),l=r(39),c=r(82),h=r(3),u={"(":0,")":1,"*":2,"+":3,"-":1,".":2},f=function(){function t(t){this._terminal=t}return t.prototype.hook=function(t,e,r){this._data=""},t.prototype.put=function(t,e,r){this._data+=t.substring(e,r)},t.prototype.unhook=function(){this._terminal.handler(s.C0.ESC+"P0+r"+this._data+s.C0.ESC+"\\")},t}(),p=function(){function t(t){this._terminal=t}return t.prototype.hook=function(t,e,r){this._data=""},t.prototype.put=function(t,e,r){this._data+=t.substring(e,r)},t.prototype.unhook=function(){switch(this._data){case'"q':return this._terminal.handler(s.C0.ESC+'P1$r0"q'+s.C0.ESC+"\\");case'"p':return this._terminal.handler(s.C0.ESC+'P1$r61"p'+s.C0.ESC+"\\");case"r":var t=this._terminal.buffer.scrollTop+1+";"+(this._terminal.buffer.scrollBottom+1)+"r";return this._terminal.handler(s.C0.ESC+"P1$r"+t+s.C0.ESC+"\\");case"m":return this._terminal.handler(s.C0.ESC+"P1$r0m"+s.C0.ESC+"\\");case" q":var e={block:2,underline:4,bar:6}[this._terminal.getOption("cursorStyle")];return e-=this._terminal.getOption("cursorBlink"),this._terminal.handler(s.C0.ESC+"P1$r"+e+" q"+s.C0.ESC+"\\");default:this._terminal.error("Unknown DCS $q %s",this._data),this._terminal.handler(s.C0.ESC+"P0$r"+this._data+s.C0.ESC+"\\")}},t}(),d=function(t){function e(e,r){void 0===r&&(r=new c.EscapeSequenceParser);var i=t.call(this)||this;i._terminal=e,i._parser=r,i.register(i._parser),i._surrogateFirst="",i._parser.setCsiHandlerFallback(function(t,e,r){i._terminal.error("Unknown CSI code: ",{collect:t,params:e,flag:String.fromCharCode(r)})}),i._parser.setEscHandlerFallback(function(t,e){i._terminal.error("Unknown ESC code: ",{collect:t,flag:String.fromCharCode(e)})}),i._parser.setExecuteHandlerFallback(function(t){i._terminal.error("Unknown EXECUTE code: ",{code:t})}),i._parser.setOscHandlerFallback(function(t,e){i._terminal.error("Unknown OSC code: ",{identifier:t,data:e})}),i._parser.setPrintHandler(function(t,e,r){return i.print(t,e,r)}),i._parser.setCsiHandler("@",function(t,e){return i.insertChars(t)}),i._parser.setCsiHandler("A",function(t,e){return i.cursorUp(t)}),i._parser.setCsiHandler("B",function(t,e){return i.cursorDown(t)}),i._parser.setCsiHandler("C",function(t,e){return i.cursorForward(t)}),i._parser.setCsiHandler("D",function(t,e){return i.cursorBackward(t)}),i._parser.setCsiHandler("E",function(t,e){return i.cursorNextLine(t)}),i._parser.setCsiHandler("F",function(t,e){return i.cursorPrecedingLine(t)}),i._parser.setCsiHandler("G",function(t,e){return i.cursorCharAbsolute(t)}),i._parser.setCsiHandler("H",function(t,e){return i.cursorPosition(t)}),i._parser.setCsiHandler("I",function(t,e){return i.cursorForwardTab(t)}),i._parser.setCsiHandler("J",function(t,e){return i.eraseInDisplay(t)}),i._parser.setCsiHandler("K",function(t,e){return i.eraseInLine(t)}),i._parser.setCsiHandler("L",function(t,e){return i.insertLines(t)}),i._parser.setCsiHandler("M",function(t,e){return i.deleteLines(t)}),i._parser.setCsiHandler("P",function(t,e){return i.deleteChars(t)}),i._parser.setCsiHandler("S",function(t,e){return i.scrollUp(t)}),i._parser.setCsiHandler("T",function(t,e){return i.scrollDown(t,e)}),i._parser.setCsiHandler("X",function(t,e){return i.eraseChars(t)}),i._parser.setCsiHandler("Z",function(t,e){return i.cursorBackwardTab(t)}),i._parser.setCsiHandler("`",function(t,e){return i.charPosAbsolute(t)}),i._parser.setCsiHandler("a",function(t,e){return i.hPositionRelative(t)}),i._parser.setCsiHandler("b",function(t,e){return i.repeatPrecedingCharacter(t)}),i._parser.setCsiHandler("c",function(t,e){return i.sendDeviceAttributes(t,e)}),i._parser.setCsiHandler("d",function(t,e){return i.linePosAbsolute(t)}),i._parser.setCsiHandler("e",function(t,e){return i.vPositionRelative(t)}),i._parser.setCsiHandler("f",function(t,e){return i.hVPosition(t)}),i._parser.setCsiHandler("g",function(t,e){return i.tabClear(t)}),i._parser.setCsiHandler("h",function(t,e){return i.setMode(t,e)}),i._parser.setCsiHandler("l",function(t,e){return i.resetMode(t,e)}),i._parser.setCsiHandler("m",function(t,e){return i.charAttributes(t)}),i._parser.setCsiHandler("n",function(t,e){return i.deviceStatus(t,e)}),i._parser.setCsiHandler("p",function(t,e){return i.softReset(t,e)}),i._parser.setCsiHandler("q",function(t,e){return i.setCursorStyle(t,e)}),i._parser.setCsiHandler("r",function(t,e){return i.setScrollRegion(t,e)}),i._parser.setCsiHandler("s",function(t,e){return i.saveCursor(t)}),i._parser.setCsiHandler("u",function(t,e){return i.restoreCursor(t)}),i._parser.setExecuteHandler(s.C0.BEL,function(){return i.bell()}),i._parser.setExecuteHandler(s.C0.LF,function(){return i.lineFeed()}),i._parser.setExecuteHandler(s.C0.VT,function(){return i.lineFeed()}),i._parser.setExecuteHandler(s.C0.FF,function(){return i.lineFeed()}),i._parser.setExecuteHandler(s.C0.CR,function(){return i.carriageReturn()}),i._parser.setExecuteHandler(s.C0.BS,function(){return i.backspace()}),i._parser.setExecuteHandler(s.C0.HT,function(){return i.tab()}),i._parser.setExecuteHandler(s.C0.SO,function(){return i.shiftOut()}),i._parser.setExecuteHandler(s.C0.SI,function(){return i.shiftIn()}),i._parser.setExecuteHandler(s.C1.IND,function(){return i.index()}),i._parser.setExecuteHandler(s.C1.NEL,function(){return i.nextLine()}),i._parser.setExecuteHandler(s.C1.HTS,function(){return i.tabSet()}),i._parser.setOscHandler(0,function(t){return i.setTitle(t)}),i._parser.setOscHandler(2,function(t){return i.setTitle(t)}),i._parser.setEscHandler("7",function(){return i.saveCursor([])}),i._parser.setEscHandler("8",function(){return i.restoreCursor([])}),i._parser.setEscHandler("D",function(){return i.index()}),i._parser.setEscHandler("E",function(){return i.nextLine()}),i._parser.setEscHandler("H",function(){return i.tabSet()}),i._parser.setEscHandler("M",function(){return i.reverseIndex()}),i._parser.setEscHandler("=",function(){return i.keypadApplicationMode()}),i._parser.setEscHandler(">",function(){return i.keypadNumericMode()}),i._parser.setEscHandler("c",function(){return i.reset()}),i._parser.setEscHandler("n",function(){return i.setgLevel(2)}),i._parser.setEscHandler("o",function(){return i.setgLevel(3)}),i._parser.setEscHandler("|",function(){return i.setgLevel(3)}),i._parser.setEscHandler("}",function(){return i.setgLevel(2)}),i._parser.setEscHandler("~",function(){return i.setgLevel(1)}),i._parser.setEscHandler("%@",function(){return i.selectDefaultCharset()}),i._parser.setEscHandler("%G",function(){return i.selectDefaultCharset()});var n=function(t){a._parser.setEscHandler("("+t,function(){return i.selectCharset("("+t)}),a._parser.setEscHandler(")"+t,function(){return i.selectCharset(")"+t)}),a._parser.setEscHandler("*"+t,function(){return i.selectCharset("*"+t)}),a._parser.setEscHandler("+"+t,function(){return i.selectCharset("+"+t)}),a._parser.setEscHandler("-"+t,function(){return i.selectCharset("-"+t)}),a._parser.setEscHandler("."+t,function(){return i.selectCharset("."+t)}),a._parser.setEscHandler("/"+t,function(){return i.selectCharset("/"+t)})},a=this;for(var l in o.CHARSETS)n(l);return i._parser.setErrorHandler(function(t){return i._terminal.error("Parsing error: ",t),t}),i._parser.setDcsHandler("$q",new p(i._terminal)),i._parser.setDcsHandler("+q",new f(i._terminal)),i}return n(e,t),e.prototype.dispose=function(){t.prototype.dispose.call(this),this._terminal=null},e.prototype.parse=function(t){if(this._terminal){var e=this._terminal.buffer,r=e.x,i=e.y;this._terminal.debug&&this._terminal.log("data: "+t),this._surrogateFirst&&(t=this._surrogateFirst+t,this._surrogateFirst=""),this._parser.parse(t),(e=this._terminal.buffer).x===r&&e.y===i||this._terminal.emit("cursormove")}},e.prototype.print=function(t,e,r){var i,n,s,o=this._terminal.buffer,c=this._terminal.charset,h=this._terminal.options.screenReaderMode,u=this._terminal.cols,f=this._terminal.wraparoundMode,p=this._terminal.insertMode,d=this._terminal.curAttr,_=o.lines.get(o.y+o.ybase);this._terminal.updateRange(o.y);for(var m=e;m<r;++m){if(i=t.charAt(m),55296<=(n=t.charCodeAt(m))&&n<=56319){if(++m>=r){this._surrogateFirst=i;continue}var y=t.charCodeAt(m);56320<=y&&y<=57343?(n=1024*(n-55296)+y-56320+65536,i+=t.charAt(m)):m--}if(s=l.wcwidth(n),c&&(n=(i=c[i]||i).charCodeAt(0)),h&&this._terminal.emit("a11y.char",i),s||!o.x){if(o.x+s-1>=u)if(f)o.x=0,o.y++,o.y>o.scrollBottom?(o.y--,this._terminal.scroll(!0)):o.lines.get(o.y).isWrapped=!0,_=o.lines.get(o.y+o.ybase);else if(2===s)continue;if(p)_.insertCells(o.x,s,[d,a.NULL_CELL_CHAR,a.NULL_CELL_WIDTH,a.NULL_CELL_CODE]),2===_.get(u-1)[a.CHAR_DATA_WIDTH_INDEX]&&_.set(u-1,[d,a.NULL_CELL_CHAR,a.NULL_CELL_WIDTH,a.NULL_CELL_CODE]);if(_.set(o.x++,[d,i,s,n]),s>0)for(;--s;)_.set(o.x++,[d,"",0,void 0])}else{var g=_.get(o.x-1);if(g)if(g[a.CHAR_DATA_WIDTH_INDEX])g[a.CHAR_DATA_CHAR_INDEX]+=i,g[a.CHAR_DATA_CODE_INDEX]=n,_.set(o.x-1,g);else{var C=_.get(o.x-2);C&&(C[a.CHAR_DATA_CHAR_INDEX]+=i,C[a.CHAR_DATA_CODE_INDEX]=n,_.set(o.x-2,C))}}}this._terminal.updateRange(o.y)},e.prototype.bell=function(){this._terminal.bell()},e.prototype.lineFeed=function(){var t=this._terminal.buffer;this._terminal.options.convertEol&&(t.x=0),t.y++,t.y>t.scrollBottom&&(t.y--,this._terminal.scroll()),t.x>=this._terminal.cols&&t.x--,this._terminal.emit("linefeed")},e.prototype.carriageReturn=function(){this._terminal.buffer.x=0},e.prototype.backspace=function(){this._terminal.buffer.x>0&&this._terminal.buffer.x--},e.prototype.tab=function(){var t=this._terminal.buffer.x;this._terminal.buffer.x=this._terminal.buffer.nextStop(),this._terminal.options.screenReaderMode&&this._terminal.emit("a11y.tab",this._terminal.buffer.x-t)},e.prototype.shiftOut=function(){this._terminal.setgLevel(1)},e.prototype.shiftIn=function(){this._terminal.setgLevel(0)},e.prototype.insertChars=function(t){this._terminal.buffer.lines.get(this._terminal.buffer.y+this._terminal.buffer.ybase).insertCells(this._terminal.buffer.x,t[0]||1,[this._terminal.eraseAttr(),a.NULL_CELL_CHAR,a.NULL_CELL_WIDTH,a.NULL_CELL_CODE]),this._terminal.updateRange(this._terminal.buffer.y)},e.prototype.cursorUp=function(t){var e=t[0];e<1&&(e=1),this._terminal.buffer.y-=e,this._terminal.buffer.y<0&&(this._terminal.buffer.y=0)},e.prototype.cursorDown=function(t){var e=t[0];e<1&&(e=1),this._terminal.buffer.y+=e,this._terminal.buffer.y>=this._terminal.rows&&(this._terminal.buffer.y=this._terminal.rows-1),this._terminal.buffer.x>=this._terminal.cols&&this._terminal.buffer.x--},e.prototype.cursorForward=function(t){var e=t[0];e<1&&(e=1),this._terminal.buffer.x+=e,this._terminal.buffer.x>=this._terminal.cols&&(this._terminal.buffer.x=this._terminal.cols-1)},e.prototype.cursorBackward=function(t){var e=t[0];e<1&&(e=1),this._terminal.buffer.x>=this._terminal.cols&&this._terminal.buffer.x--,this._terminal.buffer.x-=e,this._terminal.buffer.x<0&&(this._terminal.buffer.x=0)},e.prototype.cursorNextLine=function(t){var e=t[0];e<1&&(e=1),this._terminal.buffer.y+=e,this._terminal.buffer.y>=this._terminal.rows&&(this._terminal.buffer.y=this._terminal.rows-1),this._terminal.buffer.x=0},e.prototype.cursorPrecedingLine=function(t){var e=t[0];e<1&&(e=1),this._terminal.buffer.y-=e,this._terminal.buffer.y<0&&(this._terminal.buffer.y=0),this._terminal.buffer.x=0},e.prototype.cursorCharAbsolute=function(t){var e=t[0];e<1&&(e=1),this._terminal.buffer.x=e-1},e.prototype.cursorPosition=function(t){var e,r=t[0]-1;e=t.length>=2?t[1]-1:0,r<0?r=0:r>=this._terminal.rows&&(r=this._terminal.rows-1),e<0?e=0:e>=this._terminal.cols&&(e=this._terminal.cols-1),this._terminal.buffer.x=e,this._terminal.buffer.y=r},e.prototype.cursorForwardTab=function(t){for(var e=t[0]||1;e--;)this._terminal.buffer.x=this._terminal.buffer.nextStop()},e.prototype._eraseInBufferLine=function(t,e,r,i){void 0===i&&(i=!1);var n=this._terminal.buffer.lines.get(this._terminal.buffer.ybase+t);n.replaceCells(e,r,[this._terminal.eraseAttr(),a.NULL_CELL_CHAR,a.NULL_CELL_WIDTH,a.NULL_CELL_CODE]),i&&(n.isWrapped=!1)},e.prototype._resetBufferLine=function(t){this._eraseInBufferLine(t,0,this._terminal.cols,!0)},e.prototype.eraseInDisplay=function(t){var e;switch(t[0]){case 0:for(e=this._terminal.buffer.y,this._terminal.updateRange(e),this._eraseInBufferLine(e++,this._terminal.buffer.x,this._terminal.cols,0===this._terminal.buffer.x);e<this._terminal.rows;e++)this._resetBufferLine(e);this._terminal.updateRange(e);break;case 1:for(e=this._terminal.buffer.y,this._terminal.updateRange(e),this._eraseInBufferLine(e,0,this._terminal.buffer.x+1,!0),this._terminal.buffer.x+1>=this._terminal.cols&&(this._terminal.buffer.lines.get(e+1).isWrapped=!1);e--;)this._resetBufferLine(e);this._terminal.updateRange(0);break;case 2:for(e=this._terminal.rows,this._terminal.updateRange(e-1);e--;)this._resetBufferLine(e);this._terminal.updateRange(0);break;case 3:var r=this._terminal.buffer.lines.length-this._terminal.rows;r>0&&(this._terminal.buffer.lines.trimStart(r),this._terminal.buffer.ybase=Math.max(this._terminal.buffer.ybase-r,0),this._terminal.buffer.ydisp=Math.max(this._terminal.buffer.ydisp-r,0),this._terminal.emit("scroll",0))}},e.prototype.eraseInLine=function(t){switch(t[0]){case 0:this._eraseInBufferLine(this._terminal.buffer.y,this._terminal.buffer.x,this._terminal.cols);break;case 1:this._eraseInBufferLine(this._terminal.buffer.y,0,this._terminal.buffer.x+1);break;case 2:this._eraseInBufferLine(this._terminal.buffer.y,0,this._terminal.cols)}this._terminal.updateRange(this._terminal.buffer.y)},e.prototype.insertLines=function(t){var e=t[0];e<1&&(e=1);for(var r=this._terminal.buffer,i=r.y+r.ybase,n=this._terminal.rows-1-r.scrollBottom,s=this._terminal.rows-1+r.ybase-n+1;e--;)r.lines.splice(s-1,1),r.lines.splice(i,0,r.getBlankLine(this._terminal.eraseAttr()));this._terminal.updateRange(r.y),this._terminal.updateRange(r.scrollBottom)},e.prototype.deleteLines=function(t){var e=t[0];e<1&&(e=1);var r,i=this._terminal.buffer,n=i.y+i.ybase;for(r=this._terminal.rows-1-i.scrollBottom,r=this._terminal.rows-1+i.ybase-r;e--;)i.lines.splice(n,1),i.lines.splice(r,0,i.getBlankLine(this._terminal.eraseAttr()));this._terminal.updateRange(i.y),this._terminal.updateRange(i.scrollBottom)},e.prototype.deleteChars=function(t){this._terminal.buffer.lines.get(this._terminal.buffer.y+this._terminal.buffer.ybase).deleteCells(this._terminal.buffer.x,t[0]||1,[this._terminal.eraseAttr(),a.NULL_CELL_CHAR,a.NULL_CELL_WIDTH,a.NULL_CELL_CODE]),this._terminal.updateRange(this._terminal.buffer.y)},e.prototype.scrollUp=function(t){for(var e=t[0]||1,r=this._terminal.buffer;e--;)r.lines.splice(r.ybase+r.scrollTop,1),r.lines.splice(r.ybase+r.scrollBottom,0,r.getBlankLine(a.DEFAULT_ATTR));this._terminal.updateRange(r.scrollTop),this._terminal.updateRange(r.scrollBottom)},e.prototype.scrollDown=function(t,e){if(t.length<2&&!e){for(var r=t[0]||1,i=this._terminal.buffer;r--;)i.lines.splice(i.ybase+i.scrollBottom,1),i.lines.splice(i.ybase+i.scrollBottom,0,i.getBlankLine(a.DEFAULT_ATTR));this._terminal.updateRange(i.scrollTop),this._terminal.updateRange(i.scrollBottom)}},e.prototype.eraseChars=function(t){this._terminal.buffer.lines.get(this._terminal.buffer.y+this._terminal.buffer.ybase).replaceCells(this._terminal.buffer.x,this._terminal.buffer.x+(t[0]||1),[this._terminal.eraseAttr(),a.NULL_CELL_CHAR,a.NULL_CELL_WIDTH,a.NULL_CELL_CODE])},e.prototype.cursorBackwardTab=function(t){for(var e=t[0]||1,r=this._terminal.buffer;e--;)r.x=r.prevStop()},e.prototype.charPosAbsolute=function(t){var e=t[0];e<1&&(e=1),this._terminal.buffer.x=e-1,this._terminal.buffer.x>=this._terminal.cols&&(this._terminal.buffer.x=this._terminal.cols-1)},e.prototype.hPositionRelative=function(t){var e=t[0];e<1&&(e=1),this._terminal.buffer.x+=e,this._terminal.buffer.x>=this._terminal.cols&&(this._terminal.buffer.x=this._terminal.cols-1)},e.prototype.repeatPrecedingCharacter=function(t){var e=this._terminal.buffer,r=e.lines.get(e.ybase+e.y);r.replaceCells(e.x,e.x+(t[0]||1),r.get(e.x-1)||[a.DEFAULT_ATTR,a.NULL_CELL_CHAR,a.NULL_CELL_WIDTH,a.NULL_CELL_CODE])},e.prototype.sendDeviceAttributes=function(t,e){t[0]>0||(e?">"===e&&(this._terminal.is("xterm")?this._terminal.handler(s.C0.ESC+"[>0;276;0c"):this._terminal.is("rxvt-unicode")?this._terminal.handler(s.C0.ESC+"[>85;95;0c"):this._terminal.is("linux")?this._terminal.handler(t[0]+"c"):this._terminal.is("screen")&&this._terminal.handler(s.C0.ESC+"[>83;40003;0c")):this._terminal.is("xterm")||this._terminal.is("rxvt-unicode")||this._terminal.is("screen")?this._terminal.handler(s.C0.ESC+"[?1;2c"):this._terminal.is("linux")&&this._terminal.handler(s.C0.ESC+"[?6c"))},e.prototype.linePosAbsolute=function(t){var e=t[0];e<1&&(e=1),this._terminal.buffer.y=e-1,this._terminal.buffer.y>=this._terminal.rows&&(this._terminal.buffer.y=this._terminal.rows-1)},e.prototype.vPositionRelative=function(t){var e=t[0];e<1&&(e=1),this._terminal.buffer.y+=e,this._terminal.buffer.y>=this._terminal.rows&&(this._terminal.buffer.y=this._terminal.rows-1),this._terminal.buffer.x>=this._terminal.cols&&this._terminal.buffer.x--},e.prototype.hVPosition=function(t){t[0]<1&&(t[0]=1),t[1]<1&&(t[1]=1),this._terminal.buffer.y=t[0]-1,this._terminal.buffer.y>=this._terminal.rows&&(this._terminal.buffer.y=this._terminal.rows-1),this._terminal.buffer.x=t[1]-1,this._terminal.buffer.x>=this._terminal.cols&&(this._terminal.buffer.x=this._terminal.cols-1)},e.prototype.tabClear=function(t){var e=t[0];e<=0?delete this._terminal.buffer.tabs[this._terminal.buffer.x]:3===e&&(this._terminal.buffer.tabs={})},e.prototype.setMode=function(t,e){if(t.length>1)for(var r=0;r<t.length;r++)this.setMode([t[r]]);else if(e){if("?"===e)switch(t[0]){case 1:this._terminal.applicationCursor=!0;break;case 2:this._terminal.setgCharset(0,o.DEFAULT_CHARSET),this._terminal.setgCharset(1,o.DEFAULT_CHARSET),this._terminal.setgCharset(2,o.DEFAULT_CHARSET),this._terminal.setgCharset(3,o.DEFAULT_CHARSET);break;case 3:this._terminal.savedCols=this._terminal.cols,this._terminal.resize(132,this._terminal.rows);break;case 6:this._terminal.originMode=!0;break;case 7:this._terminal.wraparoundMode=!0;break;case 12:break;case 66:this._terminal.log("Serial port requested application keypad."),this._terminal.applicationKeypad=!0,this._terminal.viewport&&this._terminal.viewport.syncScrollArea();break;case 9:case 1e3:case 1002:case 1003:this._terminal.x10Mouse=9===t[0],this._terminal.vt200Mouse=1e3===t[0],this._terminal.normalMouse=t[0]>1e3,this._terminal.mouseEvents=!0,this._terminal.element.classList.add("enable-mouse-events"),this._terminal.selectionManager.disable(),this._terminal.log("Binding to mouse events.");break;case 1004:this._terminal.sendFocus=!0;break;case 1005:this._terminal.utfMouse=!0;break;case 1006:this._terminal.sgrMouse=!0;break;case 1015:this._terminal.urxvtMouse=!0;break;case 25:this._terminal.cursorHidden=!1;break;case 1048:this.saveCursor(t);break;case 1049:this.saveCursor(t);case 47:case 1047:this._terminal.buffers.activateAltBuffer(this._terminal.eraseAttr()),this._terminal.refresh(0,this._terminal.rows-1),this._terminal.viewport&&this._terminal.viewport.syncScrollArea(),this._terminal.showCursor();break;case 2004:this._terminal.bracketedPasteMode=!0}}else switch(t[0]){case 4:this._terminal.insertMode=!0}},e.prototype.resetMode=function(t,e){if(t.length>1)for(var r=0;r<t.length;r++)this.resetMode([t[r]]);else if(e){if("?"===e)switch(t[0]){case 1:this._terminal.applicationCursor=!1;break;case 3:132===this._terminal.cols&&this._terminal.savedCols&&this._terminal.resize(this._terminal.savedCols,this._terminal.rows),delete this._terminal.savedCols;break;case 6:this._terminal.originMode=!1;break;case 7:this._terminal.wraparoundMode=!1;break;case 12:break;case 66:this._terminal.log("Switching back to normal keypad."),this._terminal.applicationKeypad=!1,this._terminal.viewport&&this._terminal.viewport.syncScrollArea();break;case 9:case 1e3:case 1002:case 1003:this._terminal.x10Mouse=!1,this._terminal.vt200Mouse=!1,this._terminal.normalMouse=!1,this._terminal.mouseEvents=!1,this._terminal.element.classList.remove("enable-mouse-events"),this._terminal.selectionManager.enable();break;case 1004:this._terminal.sendFocus=!1;break;case 1005:this._terminal.utfMouse=!1;break;case 1006:this._terminal.sgrMouse=!1;break;case 1015:this._terminal.urxvtMouse=!1;break;case 25:this._terminal.cursorHidden=!0;break;case 1048:this.restoreCursor(t);break;case 1049:case 47:case 1047:this._terminal.buffers.activateNormalBuffer(),1049===t[0]&&this.restoreCursor(t),this._terminal.refresh(0,this._terminal.rows-1),this._terminal.viewport&&this._terminal.viewport.syncScrollArea(),this._terminal.showCursor();break;case 2004:this._terminal.bracketedPasteMode=!1}}else switch(t[0]){case 4:this._terminal.insertMode=!1}},e.prototype.charAttributes=function(t){if(1!==t.length||0!==t[0]){for(var e,r=t.length,i=this._terminal.curAttr>>18,n=this._terminal.curAttr>>9&511,s=511&this._terminal.curAttr,o=0;o<r;o++)(e=t[o])>=30&&e<=37?n=e-30:e>=40&&e<=47?s=e-40:e>=90&&e<=97?n=(e+=8)-90:e>=100&&e<=107?s=(e+=8)-100:0===e?(i=a.DEFAULT_ATTR>>18,n=a.DEFAULT_ATTR>>9&511,s=511&a.DEFAULT_ATTR):1===e?i|=1:3===e?i|=64:4===e?i|=2:5===e?i|=4:7===e?i|=8:8===e?i|=16:2===e?i|=32:22===e?(i&=-2,i&=-33):23===e?i&=-65:24===e?i&=-3:25===e?i&=-5:27===e?i&=-9:28===e?i&=-17:39===e?n=a.DEFAULT_ATTR>>9&511:49===e?s=511&a.DEFAULT_ATTR:38===e?2===t[o+1]?(o+=2,-1===(n=this._terminal.matchColor(255&t[o],255&t[o+1],255&t[o+2]))&&(n=511),o+=2):5===t[o+1]&&(n=e=255&t[o+=2]):48===e?2===t[o+1]?(o+=2,-1===(s=this._terminal.matchColor(255&t[o],255&t[o+1],255&t[o+2]))&&(s=511),o+=2):5===t[o+1]&&(s=e=255&t[o+=2]):100===e?(n=a.DEFAULT_ATTR>>9&511,s=511&a.DEFAULT_ATTR):this._terminal.error("Unknown SGR attribute: %d.",e);this._terminal.curAttr=i<<18|n<<9|s}else this._terminal.curAttr=a.DEFAULT_ATTR},e.prototype.deviceStatus=function(t,e){if(e){if("?"===e)switch(t[0]){case 6:r=this._terminal.buffer.y+1,i=this._terminal.buffer.x+1;this._terminal.emit("data",s.C0.ESC+"[?"+r+";"+i+"R")}}else switch(t[0]){case 5:this._terminal.emit("data",s.C0.ESC+"[0n");break;case 6:var r=this._terminal.buffer.y+1,i=this._terminal.buffer.x+1;this._terminal.emit("data",s.C0.ESC+"["+r+";"+i+"R")}},e.prototype.softReset=function(t,e){"!"===e&&(this._terminal.cursorHidden=!1,this._terminal.insertMode=!1,this._terminal.originMode=!1,this._terminal.wraparoundMode=!0,this._terminal.applicationKeypad=!1,this._terminal.viewport&&this._terminal.viewport.syncScrollArea(),this._terminal.applicationCursor=!1,this._terminal.buffer.scrollTop=0,this._terminal.buffer.scrollBottom=this._terminal.rows-1,this._terminal.curAttr=a.DEFAULT_ATTR,this._terminal.buffer.x=this._terminal.buffer.y=0,this._terminal.charset=null,this._terminal.glevel=0,this._terminal.charsets=[null])},e.prototype.setCursorStyle=function(t,e){if(" "===e){var r=t[0]<1?1:t[0];switch(r){case 1:case 2:this._terminal.setOption("cursorStyle","block");break;case 3:case 4:this._terminal.setOption("cursorStyle","underline");break;case 5:case 6:this._terminal.setOption("cursorStyle","bar")}var i=r%2==1;this._terminal.setOption("cursorBlink",i)}},e.prototype.setScrollRegion=function(t,e){e||(this._terminal.buffer.scrollTop=(t[0]||1)-1,this._terminal.buffer.scrollBottom=(t[1]&&t[1]<=this._terminal.rows?t[1]:this._terminal.rows)-1,this._terminal.buffer.x=0,this._terminal.buffer.y=0)},e.prototype.saveCursor=function(t){this._terminal.buffer.savedX=this._terminal.buffer.x,this._terminal.buffer.savedY=this._terminal.buffer.y,this._terminal.buffer.savedCurAttr=this._terminal.curAttr},e.prototype.restoreCursor=function(t){this._terminal.buffer.x=this._terminal.buffer.savedX||0,this._terminal.buffer.y=this._terminal.buffer.savedY||0,this._terminal.curAttr=this._terminal.buffer.savedCurAttr||a.DEFAULT_ATTR},e.prototype.setTitle=function(t){this._terminal.handleTitle(t)},e.prototype.nextLine=function(){this._terminal.buffer.x=0,this.index()},e.prototype.keypadApplicationMode=function(){this._terminal.log("Serial port requested application keypad."),this._terminal.applicationKeypad=!0,this._terminal.viewport&&this._terminal.viewport.syncScrollArea()},e.prototype.keypadNumericMode=function(){this._terminal.log("Switching back to normal keypad."),this._terminal.applicationKeypad=!1,this._terminal.viewport&&this._terminal.viewport.syncScrollArea()},e.prototype.selectDefaultCharset=function(){this._terminal.setgLevel(0),this._terminal.setgCharset(0,o.DEFAULT_CHARSET)},e.prototype.selectCharset=function(t){if(2!==t.length)return this.selectDefaultCharset();"/"!==t[0]&&this._terminal.setgCharset(u[t[0]],o.CHARSETS[t[1]]||o.DEFAULT_CHARSET)},e.prototype.index=function(){this._terminal.index()},e.prototype.tabSet=function(){this._terminal.tabSet()},e.prototype.reverseIndex=function(){this._terminal.reverseIndex()},e.prototype.reset=function(){this._parser.reset(),this._terminal.reset()},e.prototype.setgLevel=function(t){this._terminal.setgLevel(t)},e}(h.Disposable);e.InputHandler=d},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CHARSETS={},e.DEFAULT_CHARSET=e.CHARSETS.B,e.CHARSETS[0]={"`":"◆",a:"▒",b:"\t",c:"\f",d:"\r",e:"\n",f:"°",g:"±",h:"␤",i:"\v",j:"┘",k:"┐",l:"┌",m:"└",n:"┼",o:"⎺",p:"⎻",q:"─",r:"⎼",s:"⎽",t:"├",u:"┤",v:"┴",w:"┬",x:"│",y:"≤",z:"≥","{":"π","|":"≠","}":"£","~":"·"},e.CHARSETS.A={"#":"£"},e.CHARSETS.B=null,e.CHARSETS[4]={"#":"£","@":"¾","[":"ij","\\":"½","]":"|","{":"¨","|":"f","}":"¼","~":"´"},e.CHARSETS.C=e.CHARSETS[5]={"[":"Ä","\\":"Ö","]":"Å","^":"Ü","`":"é","{":"ä","|":"ö","}":"å","~":"ü"},e.CHARSETS.R={"#":"£","@":"à","[":"°","\\":"ç","]":"§","{":"é","|":"ù","}":"è","~":"¨"},e.CHARSETS.Q={"@":"à","[":"â","\\":"ç","]":"ê","^":"î","`":"ô","{":"é","|":"ù","}":"è","~":"û"},e.CHARSETS.K={"@":"§","[":"Ä","\\":"Ö","]":"Ü","{":"ä","|":"ö","}":"ü","~":"ß"},e.CHARSETS.Y={"#":"£","@":"§","[":"°","\\":"ç","]":"é","`":"ù","{":"à","|":"ò","}":"è","~":"ì"},e.CHARSETS.E=e.CHARSETS[6]={"@":"Ä","[":"Æ","\\":"Ø","]":"Å","^":"Ü","`":"ä","{":"æ","|":"ø","}":"å","~":"ü"},e.CHARSETS.Z={"#":"£","@":"§","[":"¡","\\":"Ñ","]":"¿","{":"°","|":"ñ","}":"ç"},e.CHARSETS.H=e.CHARSETS[7]={"@":"É","[":"Ä","\\":"Ö","]":"Å","^":"Ü","`":"é","{":"ä","|":"ö","}":"å","~":"ü"},e.CHARSETS["="]={"#":"ù","@":"à","[":"é","\\":"ç","]":"ê","^":"î",_:"è","`":"ô","{":"ä","|":"ö","}":"ü","~":"û"}},function(t,e,r){"use strict";function i(t,e,r,i){if(void 0===r&&(r=0),void 0===i&&(i=t.length),r>=t.length)return t;r=(t.length+r)%t.length,i=i>=t.length?t.length:(t.length+i)%t.length;for(var n=r;n<i;++n)t[n]=e;return t}Object.defineProperty(e,"__esModule",{value:!0}),e.fill=function(t,e,r,n){return t.fill?t.fill(e,r,n):i(t,e,r,n)},e.fillFallback=i},function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var s=r(3);function o(t,e){for(var r=e-t,i=new Array(r);r--;)i[r]=--e;return i}var a=function(){function t(t){this.table="undefined"==typeof Uint8Array?new Array(t):new Uint8Array(t)}return t.prototype.add=function(t,e,r,i){this.table[e<<8|t]=(0|r)<<4|(void 0===i?e:i)},t.prototype.addMany=function(t,e,r,i){for(var n=0;n<t.length;n++)this.add(t[n],e,r,i)},t}();e.TransitionTable=a;var l=o(32,127),c=o(0,24);c.push(25),c.push.apply(c,o(28,32));e.VT500_TRANSITION_TABLE=function(){var t,e=new a(4095),r=o(0,14);for(t in r)for(var i=0;i<160;++i)e.add(i,t,1,0);for(t in e.addMany(l,0,2,0),r)e.addMany([24,26,153,154],t,3,0),e.addMany(o(128,144),t,3,0),e.addMany(o(144,152),t,3,0),e.add(156,t,0,0),e.add(27,t,11,1),e.add(157,t,4,8),e.addMany([152,158,159],t,0,7),e.add(155,t,11,3),e.add(144,t,11,9);return e.addMany(c,0,3,0),e.addMany(c,1,3,1),e.add(127,1,0,1),e.addMany(c,8,0,8),e.addMany(c,3,3,3),e.add(127,3,0,3),e.addMany(c,4,3,4),e.add(127,4,0,4),e.addMany(c,6,3,6),e.addMany(c,5,3,5),e.add(127,5,0,5),e.addMany(c,2,3,2),e.add(127,2,0,2),e.add(93,1,4,8),e.addMany(l,8,5,8),e.add(127,8,5,8),e.addMany([156,27,24,26,7],8,6,0),e.addMany(o(28,32),8,0,8),e.addMany([88,94,95],1,0,7),e.addMany(l,7,0,7),e.addMany(c,7,0,7),e.add(156,7,0,0),e.add(91,1,11,3),e.addMany(o(64,127),3,7,0),e.addMany(o(48,58),3,8,4),e.add(59,3,8,4),e.addMany([60,61,62,63],3,9,4),e.addMany(o(48,58),4,8,4),e.add(59,4,8,4),e.addMany(o(64,127),4,7,0),e.addMany([58,60,61,62,63],4,0,6),e.addMany(o(32,64),6,0,6),e.add(127,6,0,6),e.addMany(o(64,127),6,0,0),e.add(58,3,0,6),e.addMany(o(32,48),3,9,5),e.addMany(o(32,48),5,9,5),e.addMany(o(48,64),5,0,6),e.addMany(o(64,127),5,7,0),e.addMany(o(32,48),4,9,5),e.addMany(o(32,48),1,9,2),e.addMany(o(32,48),2,9,2),e.addMany(o(48,127),2,10,0),e.addMany(o(48,80),1,10,0),e.addMany(o(81,88),1,10,0),e.addMany([89,90,92],1,10,0),e.addMany(o(96,127),1,10,0),e.add(80,1,11,9),e.addMany(c,9,0,9),e.add(127,9,0,9),e.addMany(o(28,32),9,0,9),e.addMany(o(32,48),9,9,12),e.add(58,9,0,11),e.addMany(o(48,58),9,8,10),e.add(59,9,8,10),e.addMany([60,61,62,63],9,9,10),e.addMany(c,11,0,11),e.addMany(o(32,128),11,0,11),e.addMany(o(28,32),11,0,11),e.addMany(c,10,0,10),e.add(127,10,0,10),e.addMany(o(28,32),10,0,10),e.addMany(o(48,58),10,8,10),e.add(59,10,8,10),e.addMany([58,60,61,62,63],10,0,11),e.addMany(o(32,48),10,9,12),e.addMany(c,12,0,12),e.add(127,12,0,12),e.addMany(o(28,32),12,0,12),e.addMany(o(32,48),12,9,12),e.addMany(o(48,64),12,0,11),e.addMany(o(64,127),12,12,13),e.addMany(o(64,127),10,12,13),e.addMany(o(64,127),9,12,13),e.addMany(c,13,13,13),e.addMany(l,13,13,13),e.add(127,13,0,13),e.addMany([27,156],13,14,0),e}();var h=function(){function t(){}return t.prototype.hook=function(t,e,r){},t.prototype.put=function(t,e,r){},t.prototype.unhook=function(){},t}(),u=function(t){function r(r){void 0===r&&(r=e.VT500_TRANSITION_TABLE);var i=t.call(this)||this;return i.TRANSITIONS=r,i.initialState=0,i.currentState=i.initialState,i._osc="",i._params=[0],i._collect="",i._printHandlerFb=function(t,e,r){},i._executeHandlerFb=function(t){},i._csiHandlerFb=function(t,e,r){},i._escHandlerFb=function(t,e){},i._oscHandlerFb=function(t,e){},i._dcsHandlerFb=new h,i._errorHandlerFb=function(t){return t},i._printHandler=i._printHandlerFb,i._executeHandlers=Object.create(null),i._csiHandlers=Object.create(null),i._escHandlers=Object.create(null),i._oscHandlers=Object.create(null),i._dcsHandlers=Object.create(null),i._activeDcsHandler=null,i._errorHandler=i._errorHandlerFb,i.setEscHandler("\\",function(){}),i}return n(r,t),r.prototype.dispose=function(){this._printHandlerFb=null,this._executeHandlerFb=null,this._csiHandlerFb=null,this._escHandlerFb=null,this._oscHandlerFb=null,this._dcsHandlerFb=null,this._errorHandlerFb=null,this._printHandler=null,this._executeHandlers=null,this._csiHandlers=null,this._escHandlers=null,this._oscHandlers=null,this._dcsHandlers=null,this._activeDcsHandler=null,this._errorHandler=null},r.prototype.setPrintHandler=function(t){this._printHandler=t},r.prototype.clearPrintHandler=function(){this._printHandler=this._printHandlerFb},r.prototype.setExecuteHandler=function(t,e){this._executeHandlers[t.charCodeAt(0)]=e},r.prototype.clearExecuteHandler=function(t){this._executeHandlers[t.charCodeAt(0)]&&delete this._executeHandlers[t.charCodeAt(0)]},r.prototype.setExecuteHandlerFallback=function(t){this._executeHandlerFb=t},r.prototype.setCsiHandler=function(t,e){this._csiHandlers[t.charCodeAt(0)]=e},r.prototype.clearCsiHandler=function(t){this._csiHandlers[t.charCodeAt(0)]&&delete this._csiHandlers[t.charCodeAt(0)]},r.prototype.setCsiHandlerFallback=function(t){this._csiHandlerFb=t},r.prototype.setEscHandler=function(t,e){this._escHandlers[t]=e},r.prototype.clearEscHandler=function(t){this._escHandlers[t]&&delete this._escHandlers[t]},r.prototype.setEscHandlerFallback=function(t){this._escHandlerFb=t},r.prototype.setOscHandler=function(t,e){this._oscHandlers[t]=e},r.prototype.clearOscHandler=function(t){this._oscHandlers[t]&&delete this._oscHandlers[t]},r.prototype.setOscHandlerFallback=function(t){this._oscHandlerFb=t},r.prototype.setDcsHandler=function(t,e){this._dcsHandlers[t]=e},r.prototype.clearDcsHandler=function(t){this._dcsHandlers[t]&&delete this._dcsHandlers[t]},r.prototype.setDcsHandlerFallback=function(t){this._dcsHandlerFb=t},r.prototype.setErrorHandler=function(t){this._errorHandler=t},r.prototype.clearErrorHandler=function(){this._errorHandler=this._errorHandlerFb},r.prototype.reset=function(){this.currentState=this.initialState,this._osc="",this._params=[0],this._collect="",this._activeDcsHandler=null},r.prototype.parse=function(t){for(var e=0,r=0,i=!1,n=this.currentState,s=-1,o=-1,a=this._osc,l=this._collect,c=this._params,h=this.TRANSITIONS.table,u=this._activeDcsHandler,f=null,p=t.length,d=0;d<p;++d)if(e=t.charCodeAt(d),0===n&&e>31&&e<128){s=~s?s:d;do{d++}while(d<p&&t.charCodeAt(d)>31&&t.charCodeAt(d)<128);d--}else if(4===n&&e>47&&e<57)c[c.length-1]=10*c[c.length-1]+e-48;else{switch((r=e<160?h[n<<8|e]:16)>>4){case 2:s=~s?s:d;break;case 3:~s&&(this._printHandler(t,s,d),s=-1),(f=this._executeHandlers[e])?f():this._executeHandlerFb(e);break;case 0:~s?(this._printHandler(t,s,d),s=-1):~o&&(u.put(t,o,d),o=-1);break;case 1:if(e>159)switch(n){case 0:s=~s?s:d;break;case 8:a+=String.fromCharCode(e),r|=8;break;case 6:r|=6;break;case 11:r|=11;break;case 13:o=~o?o:d,r|=13;break;default:i=!0}else i=!0;if(i){if(this._errorHandler({position:d,code:e,currentState:n,print:s,dcs:o,osc:a,collect:l,params:c,abort:!1}).abort)return;i=!1}break;case 7:(f=this._csiHandlers[e])?f(c,l):this._csiHandlerFb(l,c,e);break;case 8:59===e?c.push(0):c[c.length-1]=10*c[c.length-1]+e-48;break;case 9:l+=String.fromCharCode(e);break;case 10:(f=this._escHandlers[l+String.fromCharCode(e)])?f(l,e):this._escHandlerFb(l,e);break;case 11:~s&&(this._printHandler(t,s,d),s=-1),a="",c=[0],l="",o=-1;break;case 12:(u=this._dcsHandlers[l+String.fromCharCode(e)])||(u=this._dcsHandlerFb),u.hook(l,c,e);break;case 13:o=~o?o:d;break;case 14:u&&(~o&&u.put(t,o,d),u.unhook(),u=null),27===e&&(r|=1),a="",c=[0],l="",o=-1;break;case 4:~s&&(this._printHandler(t,s,d),s=-1),a="";break;case 5:a+=t.charAt(d);break;case 6:if(a&&24!==e&&26!==e){var _=a.indexOf(";");if(-1===_)this._oscHandlerFb(-1,a);else{var m=parseInt(a.substring(0,_)),y=a.substring(_+1);(f=this._oscHandlers[m])?f(y):this._oscHandlerFb(m,y)}}27===e&&(r|=1),a="",c=[0],l="",o=-1}n=15&r}0===n&&~s?this._printHandler(t,s,t.length):13===n&&~o&&u&&u.put(t,o,t.length),this._osc=a,this._collect=l,this._params=c,this._activeDcsHandler=u,this.currentState=n},r}(s.Disposable);e.EscapeSequenceParser=u},function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var s=r(84),o=r(90),a=r(91),l=r(15),c=r(92),h=r(2),u=r(24),f=r(42),p=r(93),d=function(t){function e(e,r){var i=t.call(this)||this;i._terminal=e,i._isPaused=!1,i._needsFullRefresh=!1;var n=i._terminal.options.allowTransparency;if(i.colorManager=new l.ColorManager(document,n),i._characterJoinerRegistry=new p.CharacterJoinerRegistry(e),r&&i.colorManager.setTheme(r),i._renderLayers=[new s.TextRenderLayer(i._terminal.screenElement,0,i.colorManager.colors,i._characterJoinerRegistry,n),new o.SelectionRenderLayer(i._terminal.screenElement,1,i.colorManager.colors),new c.LinkRenderLayer(i._terminal.screenElement,2,i.colorManager.colors,i._terminal),new a.CursorRenderLayer(i._terminal.screenElement,3,i.colorManager.colors)],i.dimensions={scaledCharWidth:null,scaledCharHeight:null,scaledCellWidth:null,scaledCellHeight:null,scaledCharLeft:null,scaledCharTop:null,scaledCanvasWidth:null,scaledCanvasHeight:null,canvasWidth:null,canvasHeight:null,actualCellWidth:null,actualCellHeight:null},i._devicePixelRatio=window.devicePixelRatio,i._updateDimensions(),i.onOptionsChanged(),i._renderDebouncer=new u.RenderDebouncer(i._terminal,i._renderRows.bind(i)),i._screenDprMonitor=new f.ScreenDprMonitor,i._screenDprMonitor.setListener(function(){return i.onWindowResize(window.devicePixelRatio)}),i.register(i._screenDprMonitor),"IntersectionObserver"in window){var h=new IntersectionObserver(function(t){return i.onIntersectionChange(t[0])},{threshold:0});h.observe(i._terminal.element),i.register({dispose:function(){return h.disconnect()}})}return i}return n(e,t),e.prototype.dispose=function(){t.prototype.dispose.call(this),this._renderLayers.forEach(function(t){return t.dispose()})},e.prototype.onIntersectionChange=function(t){this._isPaused=0===t.intersectionRatio,!this._isPaused&&this._needsFullRefresh&&this._terminal.refresh(0,this._terminal.rows-1)},e.prototype.onWindowResize=function(t){this._devicePixelRatio!==t&&(this._devicePixelRatio=t,this.onResize(this._terminal.cols,this._terminal.rows))},e.prototype.setTheme=function(t){var e=this;return this.colorManager.setTheme(t),this._renderLayers.forEach(function(t){t.onThemeChanged(e._terminal,e.colorManager.colors),t.reset(e._terminal)}),this._isPaused?this._needsFullRefresh=!0:this._terminal.refresh(0,this._terminal.rows-1),this.colorManager.colors},e.prototype.onResize=function(t,e){var r=this;this._updateDimensions(),this._renderLayers.forEach(function(t){return t.resize(r._terminal,r.dimensions)}),this._isPaused?this._needsFullRefresh=!0:this._terminal.refresh(0,this._terminal.rows-1),this._terminal.screenElement.style.width=this.dimensions.canvasWidth+"px",this._terminal.screenElement.style.height=this.dimensions.canvasHeight+"px",this.emit("resize",{width:this.dimensions.canvasWidth,height:this.dimensions.canvasHeight})},e.prototype.onCharSizeChanged=function(){this.onResize(this._terminal.cols,this._terminal.rows)},e.prototype.onBlur=function(){var t=this;this._runOperation(function(e){return e.onBlur(t._terminal)})},e.prototype.onFocus=function(){var t=this;this._runOperation(function(e){return e.onFocus(t._terminal)})},e.prototype.onSelectionChanged=function(t,e,r){var i=this;void 0===r&&(r=!1),this._runOperation(function(n){return n.onSelectionChanged(i._terminal,t,e,r)})},e.prototype.onCursorMove=function(){var t=this;this._runOperation(function(e){return e.onCursorMove(t._terminal)})},e.prototype.onOptionsChanged=function(){var t=this;this.colorManager.allowTransparency=this._terminal.options.allowTransparency,this._runOperation(function(e){return e.onOptionsChanged(t._terminal)})},e.prototype.clear=function(){var t=this;this._runOperation(function(e){return e.reset(t._terminal)})},e.prototype._runOperation=function(t){this._isPaused?this._needsFullRefresh=!0:this._renderLayers.forEach(function(e){return t(e)})},e.prototype.refreshRows=function(t,e){this._isPaused?this._needsFullRefresh=!0:this._renderDebouncer.refresh(t,e)},e.prototype._renderRows=function(t,e){var r=this;this._renderLayers.forEach(function(i){return i.onGridChanged(r._terminal,t,e)}),this._terminal.emit("refresh",{start:t,end:e})},e.prototype._updateDimensions=function(){this._terminal.charMeasure.width&&this._terminal.charMeasure.height&&(this.dimensions.scaledCharWidth=Math.floor(this._terminal.charMeasure.width*window.devicePixelRatio),this.dimensions.scaledCharHeight=Math.ceil(this._terminal.charMeasure.height*window.devicePixelRatio),this.dimensions.scaledCellHeight=Math.floor(this.dimensions.scaledCharHeight*this._terminal.options.lineHeight),this.dimensions.scaledCharTop=1===this._terminal.options.lineHeight?0:Math.round((this.dimensions.scaledCellHeight-this.dimensions.scaledCharHeight)/2),this.dimensions.scaledCellWidth=this.dimensions.scaledCharWidth+Math.round(this._terminal.options.letterSpacing),this.dimensions.scaledCharLeft=Math.floor(this._terminal.options.letterSpacing/2),this.dimensions.scaledCanvasHeight=this._terminal.rows*this.dimensions.scaledCellHeight,this.dimensions.scaledCanvasWidth=this._terminal.cols*this.dimensions.scaledCellWidth,this.dimensions.canvasHeight=Math.round(this.dimensions.scaledCanvasHeight/window.devicePixelRatio),this.dimensions.canvasWidth=Math.round(this.dimensions.scaledCanvasWidth/window.devicePixelRatio),this.dimensions.actualCellHeight=this.dimensions.canvasHeight/this._terminal.rows,this.dimensions.actualCellWidth=this.dimensions.canvasWidth/this._terminal.cols)},e.prototype.registerCharacterJoiner=function(t){return this._characterJoinerRegistry.registerCharacterJoiner(t)},e.prototype.deregisterCharacterJoiner=function(t){return this._characterJoinerRegistry.deregisterCharacterJoiner(t)},e}(h.EventEmitter);e.Renderer=d},function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var s=r(0),o=r(1),a=r(85),l=r(14),c=r(6),h=function(t){function e(e,r,i,n,s){var o=t.call(this,e,"text",r,s,i)||this;return o._characterOverlapCache={},o._state=new a.GridCache,o._characterJoinerRegistry=n,o}return n(e,t),e.prototype.resize=function(e,r){t.prototype.resize.call(this,e,r);var i=this._getFont(e,!1,!1);this._characterWidth===r.scaledCharWidth&&this._characterFont===i||(this._characterWidth=r.scaledCharWidth,this._characterFont=i,this._characterOverlapCache={}),this._state.clear(),this._state.resize(e.cols,e.rows)},e.prototype.reset=function(t){this._state.clear(),this.clearAll()},e.prototype._forEachCell=function(t,e,r,i,n){for(var a=e;a<=r;a++)for(var l=a+t.buffer.ydisp,c=t.buffer.lines.get(l),h=i?i.getJoinedCharacters(l):[],u=0;u<t.cols;u++){var f=c.get(u),p=f[s.CHAR_DATA_CODE_INDEX],d=f[s.CHAR_DATA_CHAR_INDEX],_=f[s.CHAR_DATA_ATTR_INDEX],m=f[s.CHAR_DATA_WIDTH_INDEX],y=!1,g=u;if(0!==m){if(h.length>0&&u===h[0][0]){y=!0;var C=h.shift();d=t.buffer.translateBufferLineToString(l,!0,C[0],C[1]),m=C[1]-C[0],p=1/0,g=C[1]-1}!y&&this._isOverlapping(f)&&g<c.length-1&&c.get(g+1)[s.CHAR_DATA_CODE_INDEX]===s.NULL_CELL_CODE&&(m=2);var v=_>>18,b=511&_,w=_>>9&511;if(8&v){var A=b;b=w,(w=A)===o.DEFAULT_COLOR&&(w=o.INVERTED_DEFAULT_COLOR),b===o.DEFAULT_COLOR&&(b=o.INVERTED_DEFAULT_COLOR)}n(p,d,m,u,a,w,b,v),u=g}}},e.prototype._drawBackground=function(t,e,r){var i=this,n=this._ctx,s=t.cols,a=0,l=0,h=null;n.save(),this._forEachCell(t,e,r,null,function(t,e,r,u,f,p,d,_){var m=null;d===o.INVERTED_DEFAULT_COLOR?m=i._colors.foreground.css:c.is256Color(d)&&(m=i._colors.ansi[d].css),null===h&&(a=u,l=f),f!==l?(n.fillStyle=h,i.fillCells(a,l,s-a,1),a=u,l=f):h!==m&&(n.fillStyle=h,i.fillCells(a,l,u-a,1),a=u,l=f),h=m}),null!==h&&(n.fillStyle=h,this.fillCells(a,l,s-a,1)),n.restore()},e.prototype._drawForeground=function(t,e,r){var i=this;this._forEachCell(t,e,r,this._characterJoinerRegistry,function(e,r,n,s,a,l,h,u){16&u||(2&u&&(i._ctx.save(),l===o.INVERTED_DEFAULT_COLOR?i._ctx.fillStyle=i._colors.background.css:c.is256Color(l)?i._ctx.fillStyle=i._colors.ansi[l].css:i._ctx.fillStyle=i._colors.foreground.css,i.fillBottomLineAtCells(s,a,n),i._ctx.restore()),i.drawChars(t,r,e,n,s,a,l,h,!!(1&u),!!(32&u),!!(64&u)))})},e.prototype.onGridChanged=function(t,e,r){0!==this._state.cache.length&&(this._charAtlas&&this._charAtlas.beginFrame(),this.clearCells(0,e,t.cols,r-e+1),this._drawBackground(t,e,r),this._drawForeground(t,e,r))},e.prototype.onOptionsChanged=function(t){this.setTransparency(t,t.options.allowTransparency)},e.prototype._isOverlapping=function(t){if(1!==t[s.CHAR_DATA_WIDTH_INDEX])return!1;if(t[s.CHAR_DATA_CODE_INDEX]<256)return!1;var e=t[s.CHAR_DATA_CHAR_INDEX];if(this._characterOverlapCache.hasOwnProperty(e))return this._characterOverlapCache[e];this._ctx.save(),this._ctx.font=this._characterFont;var r=Math.floor(this._ctx.measureText(e).width)>this._characterWidth;return this._ctx.restore(),this._characterOverlapCache[e]=r,r},e}(l.BaseRenderLayer);e.TextRenderLayer=h},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(){this.cache=[]}return t.prototype.resize=function(t,e){for(var r=0;r<t;r++){this.cache.length<=r&&this.cache.push([]);for(var i=this.cache[r].length;i<e;i++)this.cache[r].push(null);this.cache[r].length=e}this.cache.length=t},t.prototype.clear=function(){for(var t=0;t<this.cache.length;t++)for(var e=0;e<this.cache[t].length;e++)this.cache[t][e]=null},t}();e.GridCache=i},function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var s=r(1),o=r(23),a=r(15),l=r(41),c=r(87),h=r(7),u=1024,f=1024,p={css:"rgba(0, 0, 0, 0)",rgba:0};function d(t){return t.code<<21|t.bg<<12|t.fg<<3|(t.bold?0:4)+(t.dim?0:2)+(t.italic?0:1)}e.getGlyphCacheKey=d;var _=function(t){function e(e,r){var i=t.call(this)||this;i._config=r,i._drawToCacheCount=0,i._glyphsWaitingOnBitmap=[],i._bitmapCommitTimeout=null,i._bitmap=null,i._cacheCanvas=e.createElement("canvas"),i._cacheCanvas.width=u,i._cacheCanvas.height=f,i._cacheCtx=i._cacheCanvas.getContext("2d",{alpha:!0});var n=e.createElement("canvas");n.width=i._config.scaledCharWidth,n.height=i._config.scaledCharHeight,i._tmpCtx=n.getContext("2d",{alpha:i._config.allowTransparency}),i._width=Math.floor(u/i._config.scaledCharWidth),i._height=Math.floor(f/i._config.scaledCharHeight);var s=i._width*i._height;return i._cacheMap=new c.default(s),i._cacheMap.prealloc(s),i}return n(e,t),e.prototype.dispose=function(){null!==this._bitmapCommitTimeout&&(window.clearTimeout(this._bitmapCommitTimeout),this._bitmapCommitTimeout=null)},e.prototype.beginFrame=function(){this._drawToCacheCount=0},e.prototype.draw=function(t,e,r,i){if(32===e.code)return!0;if(!this._canCache(e))return!1;var n=d(e),s=this._cacheMap.get(n);if(null!=s)return this._drawFromCache(t,s,r,i),!0;if(this._drawToCacheCount<100){var o=void 0;o=this._cacheMap.size<this._cacheMap.capacity?this._cacheMap.size:this._cacheMap.peek().index;var a=this._drawToCache(e,o);return this._cacheMap.set(n,a),this._drawFromCache(t,a,r,i),!0}return!1},e.prototype._canCache=function(t){return t.code<256},e.prototype._toCoordinateX=function(t){return t%this._width*this._config.scaledCharWidth},e.prototype._toCoordinateY=function(t){return Math.floor(t/this._width)*this._config.scaledCharHeight},e.prototype._drawFromCache=function(t,e,r,i){if(!e.isEmpty){var n=this._toCoordinateX(e.index),s=this._toCoordinateY(e.index);t.drawImage(e.inBitmap?this._bitmap:this._cacheCanvas,n,s,this._config.scaledCharWidth,this._config.scaledCharHeight,r,i,this._config.scaledCharWidth,this._config.scaledCharHeight)}},e.prototype._getColorFromAnsiIndex=function(t){return t<this._config.colors.ansi.length?this._config.colors.ansi[t]:a.DEFAULT_ANSI_COLORS[t]},e.prototype._getBackgroundColor=function(t){return this._config.allowTransparency?p:t.bg===s.INVERTED_DEFAULT_COLOR?this._config.colors.foreground:t.bg<256?this._getColorFromAnsiIndex(t.bg):this._config.colors.background},e.prototype._getForegroundColor=function(t){return t.fg===s.INVERTED_DEFAULT_COLOR?this._config.colors.background:t.fg<256?this._getColorFromAnsiIndex(t.fg):this._config.colors.foreground},e.prototype._drawToCache=function(t,e){this._drawToCacheCount++,this._tmpCtx.save();var r=this._getBackgroundColor(t);this._tmpCtx.globalCompositeOperation="copy",this._tmpCtx.fillStyle=r.css,this._tmpCtx.fillRect(0,0,this._config.scaledCharWidth,this._config.scaledCharHeight),this._tmpCtx.globalCompositeOperation="source-over";var i=t.bold?this._config.fontWeightBold:this._config.fontWeight,n=t.italic?"italic":"";this._tmpCtx.font=n+" "+i+" "+this._config.fontSize*this._config.devicePixelRatio+"px "+this._config.fontFamily,this._tmpCtx.textBaseline="top",this._tmpCtx.fillStyle=this._getForegroundColor(t).css,t.dim&&(this._tmpCtx.globalAlpha=s.DIM_OPACITY),this._tmpCtx.fillText(t.chars,0,0),this._tmpCtx.restore();var o=this._tmpCtx.getImageData(0,0,this._config.scaledCharWidth,this._config.scaledCharHeight),a=!1;this._config.allowTransparency||(a=l.clearColor(o,r));var c=this._toCoordinateX(e),h=this._toCoordinateY(e);this._cacheCtx.putImageData(o,c,h);var u={index:e,isEmpty:a,inBitmap:!1};return this._addGlyphToBitmap(u),u},e.prototype._addGlyphToBitmap=function(t){var e=this;"createImageBitmap"in window&&!h.isFirefox&&!h.isSafari&&(this._glyphsWaitingOnBitmap.push(t),null===this._bitmapCommitTimeout&&(this._bitmapCommitTimeout=window.setTimeout(function(){return e._generateBitmap()},100)))},e.prototype._generateBitmap=function(){var t=this,e=this._glyphsWaitingOnBitmap;this._glyphsWaitingOnBitmap=[],window.createImageBitmap(this._cacheCanvas).then(function(r){t._bitmap=r;for(var i=0;i<e.length;i++){e[i].inBitmap=!0}}),this._bitmapCommitTimeout=null},e}(o.default);e.default=_},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t){this.capacity=t,this._map={},this._head=null,this._tail=null,this._nodePool=[],this.size=0}return t.prototype._unlinkNode=function(t){var e=t.prev,r=t.next;t===this._head&&(this._head=r),t===this._tail&&(this._tail=e),null!==e&&(e.next=r),null!==r&&(r.prev=e)},t.prototype._appendNode=function(t){var e=this._tail;null!==e&&(e.next=t),t.prev=e,t.next=null,this._tail=t,null===this._head&&(this._head=t)},t.prototype.prealloc=function(t){for(var e=this._nodePool,r=0;r<t;r++)e.push({prev:null,next:null,key:null,value:null})},t.prototype.get=function(t){var e=this._map[t];return void 0!==e?(this._unlinkNode(e),this._appendNode(e),e.value):null},t.prototype.peekValue=function(t){var e=this._map[t];return void 0!==e?e.value:null},t.prototype.peek=function(){var t=this._head;return null===t?null:t.value},t.prototype.set=function(t,e){var r=this._map[t];if(void 0!==r)r=this._map[t],this._unlinkNode(r),r.value=e;else if(this.size>=this.capacity)r=this._head,this._unlinkNode(r),delete this._map[r.key],r.key=t,r.value=e,this._map[t]=r;else{var i=this._nodePool;i.length>0?((r=i.pop()).key=t,r.value=e):r={prev:null,next:null,key:t,value:e},this._map[t]=r,this.size++}this._appendNode(r)},t}();e.default=i},function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var s=function(t){function e(e,r){return t.call(this)||this}return n(e,t),e.prototype.draw=function(t,e,r,i){return!1},e}(r(23).default);e.default=s},function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var s=r(1),o=r(41),a=r(23),l=r(6),c=function(t){function e(e,r){var i=t.call(this)||this;return i._document=e,i._config=r,i._canvasFactory=function(t,e){var r=i._document.createElement("canvas");return r.width=t,r.height=e,r},i}return n(e,t),e.prototype._doWarmUp=function(){var t=this,e=o.generateStaticCharAtlasTexture(window,this._canvasFactory,this._config);e instanceof HTMLCanvasElement?this._texture=e:e.then(function(e){t._texture=e})},e.prototype._isCached=function(t,e){var r=t.code<256,i=t.fg<16,n=t.fg===s.DEFAULT_COLOR,o=t.bg===s.DEFAULT_COLOR;return r&&(i||n)&&o&&!t.italic},e.prototype.draw=function(t,e,r,i){if(null===this._texture||void 0===this._texture)return!1;var n=0;if(l.is256Color(e.fg)?n=2+e.fg+(e.bold?16:0):e.fg===s.DEFAULT_COLOR&&e.bold&&(n=1),!this._isCached(e,n))return!1;t.save();var o=this._config.scaledCharWidth+s.CHAR_ATLAS_CELL_SPACING,a=this._config.scaledCharHeight+s.CHAR_ATLAS_CELL_SPACING;return e.dim&&(t.globalAlpha=s.DIM_OPACITY),t.drawImage(this._texture,e.code*o,n*a,o,this._config.scaledCharHeight,r,i,o,this._config.scaledCharHeight),t.restore(),!0},e}(a.default);e.default=c},function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var s=function(t){function e(e,r,i){var n=t.call(this,e,"selection",r,!0,i)||this;return n._clearState(),n}return n(e,t),e.prototype._clearState=function(){this._state={start:null,end:null,columnSelectMode:null,ydisp:null}},e.prototype.resize=function(e,r){t.prototype.resize.call(this,e,r),this._clearState()},e.prototype.reset=function(t){this._state.start&&this._state.end&&(this._clearState(),this.clearAll())},e.prototype.onSelectionChanged=function(t,e,r,i){if(this._didStateChange(e,r,i,t.buffer.ydisp)&&(this.clearAll(),e&&r)){var n=e[1]-t.buffer.ydisp,s=r[1]-t.buffer.ydisp,o=Math.max(n,0),a=Math.min(s,t.rows-1);if(!(o>=t.rows||a<0)){if(this._ctx.fillStyle=this._colors.selection.css,i){var l=e[0],c=r[0]-l,h=a-o+1;this.fillCells(l,o,c,h)}else{l=n===o?e[0]:0;var u=o===a?r[0]:t.cols;this.fillCells(l,o,u-l,1);var f=Math.max(a-o-1,0);if(this.fillCells(0,o+1,t.cols,f),o!==a){var p=s===a?r[0]:t.cols;this.fillCells(0,a,p,1)}}this._state.start=[e[0],e[1]],this._state.end=[r[0],r[1]],this._state.columnSelectMode=i,this._state.ydisp=t.buffer.ydisp}}},e.prototype._didStateChange=function(t,e,r,i){return!this._areCoordinatesEqual(t,this._state.start)||!this._areCoordinatesEqual(e,this._state.end)||r!==this._state.columnSelectMode||i!==this._state.ydisp},e.prototype._areCoordinatesEqual=function(t,e){return!(!t||!e)&&(t[0]===e[0]&&t[1]===e[1])},e}(r(14).BaseRenderLayer);e.SelectionRenderLayer=s},function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var s=r(0),o=r(14),a=function(t){function e(e,r,i){var n=t.call(this,e,"cursor",r,!0,i)||this;return n._state={x:null,y:null,isFocused:null,style:null,width:null},n._cursorRenderers={bar:n._renderBarCursor.bind(n),block:n._renderBlockCursor.bind(n),underline:n._renderUnderlineCursor.bind(n)},n}return n(e,t),e.prototype.resize=function(e,r){t.prototype.resize.call(this,e,r),this._state={x:null,y:null,isFocused:null,style:null,width:null}},e.prototype.reset=function(t){this._clearCursor(),this._cursorBlinkStateManager&&(this._cursorBlinkStateManager.dispose(),this._cursorBlinkStateManager=null,this.onOptionsChanged(t))},e.prototype.onBlur=function(t){this._cursorBlinkStateManager&&this._cursorBlinkStateManager.pause(),t.refresh(t.buffer.y,t.buffer.y)},e.prototype.onFocus=function(t){this._cursorBlinkStateManager?this._cursorBlinkStateManager.resume(t):t.refresh(t.buffer.y,t.buffer.y)},e.prototype.onOptionsChanged=function(t){var e=this;t.options.cursorBlink?this._cursorBlinkStateManager||(this._cursorBlinkStateManager=new l(t,function(){e._render(t,!0)})):(this._cursorBlinkStateManager&&(this._cursorBlinkStateManager.dispose(),this._cursorBlinkStateManager=null),t.refresh(t.buffer.y,t.buffer.y))},e.prototype.onCursorMove=function(t){this._cursorBlinkStateManager&&this._cursorBlinkStateManager.restartBlinkAnimation(t)},e.prototype.onGridChanged=function(t,e,r){!this._cursorBlinkStateManager||this._cursorBlinkStateManager.isPaused?this._render(t,!1):this._cursorBlinkStateManager.restartBlinkAnimation(t)},e.prototype._render=function(t,e){if(t.cursorState&&!t.cursorHidden){var r=t.buffer.ybase+t.buffer.y,i=r-t.buffer.ydisp;if(i<0||i>=t.rows)this._clearCursor();else{var n=t.buffer.lines.get(r).get(t.buffer.x);if(n){if(!t.isFocused)return this._clearCursor(),this._ctx.save(),this._ctx.fillStyle=this._colors.cursor.css,this._renderBlurCursor(t,t.buffer.x,i,n),this._ctx.restore(),this._state.x=t.buffer.x,this._state.y=i,this._state.isFocused=!1,this._state.style=t.options.cursorStyle,void(this._state.width=n[s.CHAR_DATA_WIDTH_INDEX]);if(!this._cursorBlinkStateManager||this._cursorBlinkStateManager.isCursorVisible){if(this._state){if(this._state.x===t.buffer.x&&this._state.y===i&&this._state.isFocused===t.isFocused&&this._state.style===t.options.cursorStyle&&this._state.width===n[s.CHAR_DATA_WIDTH_INDEX])return;this._clearCursor()}this._ctx.save(),this._cursorRenderers[t.options.cursorStyle||"block"](t,t.buffer.x,i,n),this._ctx.restore(),this._state.x=t.buffer.x,this._state.y=i,this._state.isFocused=!1,this._state.style=t.options.cursorStyle,this._state.width=n[s.CHAR_DATA_WIDTH_INDEX]}else this._clearCursor()}}}else this._clearCursor()},e.prototype._clearCursor=function(){this._state&&(this.clearCells(this._state.x,this._state.y,this._state.width,1),this._state={x:null,y:null,isFocused:null,style:null,width:null})},e.prototype._renderBarCursor=function(t,e,r,i){this._ctx.save(),this._ctx.fillStyle=this._colors.cursor.css,this.fillLeftLineAtCell(e,r),this._ctx.restore()},e.prototype._renderBlockCursor=function(t,e,r,i){this._ctx.save(),this._ctx.fillStyle=this._colors.cursor.css,this.fillCells(e,r,i[s.CHAR_DATA_WIDTH_INDEX],1),this._ctx.fillStyle=this._colors.cursorAccent.css,this.fillCharTrueColor(t,i,e,r),this._ctx.restore()},e.prototype._renderUnderlineCursor=function(t,e,r,i){this._ctx.save(),this._ctx.fillStyle=this._colors.cursor.css,this.fillBottomLineAtCells(e,r),this._ctx.restore()},e.prototype._renderBlurCursor=function(t,e,r,i){this._ctx.save(),this._ctx.strokeStyle=this._colors.cursor.css,this.strokeRectAtCell(e,r,i[s.CHAR_DATA_WIDTH_INDEX],1),this._ctx.restore()},e}(o.BaseRenderLayer);e.CursorRenderLayer=a;var l=function(){function t(t,e){this._renderCallback=e,this.isCursorVisible=!0,t.isFocused&&this._restartInterval()}return Object.defineProperty(t.prototype,"isPaused",{get:function(){return!(this._blinkStartTimeout||this._blinkInterval)},enumerable:!0,configurable:!0}),t.prototype.dispose=function(){this._blinkInterval&&(window.clearInterval(this._blinkInterval),this._blinkInterval=null),this._blinkStartTimeout&&(window.clearTimeout(this._blinkStartTimeout),this._blinkStartTimeout=null),this._animationFrame&&(window.cancelAnimationFrame(this._animationFrame),this._animationFrame=null)},t.prototype.restartBlinkAnimation=function(t){var e=this;this.isPaused||(this._animationTimeRestarted=Date.now(),this.isCursorVisible=!0,this._animationFrame||(this._animationFrame=window.requestAnimationFrame(function(){e._renderCallback(),e._animationFrame=null})))},t.prototype._restartInterval=function(t){var e=this;void 0===t&&(t=600),this._blinkInterval&&window.clearInterval(this._blinkInterval),this._blinkStartTimeout=setTimeout(function(){if(e._animationTimeRestarted){var t=600-(Date.now()-e._animationTimeRestarted);if(e._animationTimeRestarted=null,t>0)return void e._restartInterval(t)}e.isCursorVisible=!1,e._animationFrame=window.requestAnimationFrame(function(){e._renderCallback(),e._animationFrame=null}),e._blinkInterval=setInterval(function(){if(e._animationTimeRestarted){var t=600-(Date.now()-e._animationTimeRestarted);return e._animationTimeRestarted=null,void e._restartInterval(t)}e.isCursorVisible=!e.isCursorVisible,e._animationFrame=window.requestAnimationFrame(function(){e._renderCallback(),e._animationFrame=null})},600)},t)},t.prototype.pause=function(){this.isCursorVisible=!0,this._blinkInterval&&(window.clearInterval(this._blinkInterval),this._blinkInterval=null),this._blinkStartTimeout&&(window.clearTimeout(this._blinkStartTimeout),this._blinkStartTimeout=null),this._animationFrame&&(window.cancelAnimationFrame(this._animationFrame),this._animationFrame=null)},t.prototype.resume=function(t){this._animationTimeRestarted=null,this._restartInterval(),this.restartBlinkAnimation(t)},t}()},function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var s=r(14),o=r(1),a=r(6),l=function(t){function e(e,r,i,n){var s=t.call(this,e,"link",r,!0,i)||this;return s._state=null,n.linkifier.on("linkhover",function(t){return s._onLinkHover(t)}),n.linkifier.on("linkleave",function(t){return s._onLinkLeave(t)}),s}return n(e,t),e.prototype.resize=function(e,r){t.prototype.resize.call(this,e,r),this._state=null},e.prototype.reset=function(t){this._clearCurrentLink()},e.prototype._clearCurrentLink=function(){if(this._state){this.clearCells(this._state.x1,this._state.y1,this._state.cols-this._state.x1,1);var t=this._state.y2-this._state.y1-1;t>0&&this.clearCells(0,this._state.y1+1,this._state.cols,t),this.clearCells(0,this._state.y2,this._state.x2,1),this._state=null}},e.prototype._onLinkHover=function(t){if(t.fg===o.INVERTED_DEFAULT_COLOR?this._ctx.fillStyle=this._colors.background.css:a.is256Color(t.fg)?this._ctx.fillStyle=this._colors.ansi[t.fg].css:this._ctx.fillStyle=this._colors.foreground.css,t.y1===t.y2)this.fillBottomLineAtCells(t.x1,t.y1,t.x2-t.x1);else{this.fillBottomLineAtCells(t.x1,t.y1,t.cols-t.x1);for(var e=t.y1+1;e<t.y2;e++)this.fillBottomLineAtCells(0,e,t.cols);this.fillBottomLineAtCells(0,t.y2,t.x2)}this._state=t},e.prototype._onLinkLeave=function(t){this._clearCurrentLink()},e}(s.BaseRenderLayer);e.LinkRenderLayer=l},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(0),n=function(){function t(t){this._terminal=t,this._characterJoiners=[],this._nextCharacterJoinerId=0}return t.prototype.registerCharacterJoiner=function(t){var e={id:this._nextCharacterJoinerId++,handler:t};return this._characterJoiners.push(e),e.id},t.prototype.deregisterCharacterJoiner=function(t){for(var e=0;e<this._characterJoiners.length;e++)if(this._characterJoiners[e].id===t)return this._characterJoiners.splice(e,1),!0;return!1},t.prototype.getJoinedCharacters=function(t){if(0===this._characterJoiners.length)return[];var e=this._terminal.buffer.lines.get(t);if(0===e.length)return[];for(var r=[],n=this._terminal.buffer.translateBufferLineToString(t,!0),s=0,o=0,a=0,l=e.get(0)[i.CHAR_DATA_ATTR_INDEX]>>9,c=0;c<this._terminal.cols;c++){var h=e.get(c),u=h[i.CHAR_DATA_CHAR_INDEX],f=h[i.CHAR_DATA_WIDTH_INDEX],p=h[i.CHAR_DATA_ATTR_INDEX]>>9;if(0!==f){if(p!==l){if(c-s>1)for(var d=this._getJoinedRanges(n,a,o,e,s),_=0;_<d.length;_++)r.push(d[_]);s=c,a=o,l=p}o+=u.length}}if(this._terminal.cols-s>1)for(d=this._getJoinedRanges(n,a,o,e,s),_=0;_<d.length;_++)r.push(d[_]);return r},t.prototype._getJoinedRanges=function(e,r,i,n,s){for(var o=e.substring(r,i),a=this._characterJoiners[0].handler(o),l=1;l<this._characterJoiners.length;l++)for(var c=this._characterJoiners[l].handler(o),h=0;h<c.length;h++)t._mergeRanges(a,c[h]);return this._stringRangesToCellRanges(a,n,s),a},t.prototype._stringRangesToCellRanges=function(t,e,r){var n=0,s=!1,o=0,a=t[n];if(a){for(var l=r;l<this._terminal.cols;l++){var c=e.get(l),h=c[i.CHAR_DATA_WIDTH_INDEX],u=c[i.CHAR_DATA_CHAR_INDEX].length;if(0!==h){if(!s&&a[0]<=o&&(a[0]=l,s=!0),a[1]<=o){if(a[1]=l,!(a=t[++n]))break;a[0]<=o?(a[0]=l,s=!0):s=!1}o+=u}}a&&(a[1]=this._terminal.cols)}},t._mergeRanges=function(t,e){for(var r=!1,i=0;i<t.length;i++){var n=t[i];if(r){if(e[1]<=n[0])return t[i-1][1]=e[1],t;if(e[1]<=n[1])return t[i-1][1]=Math.max(e[1],n[1]),t.splice(i,1),r=!1,t;t.splice(i,1),i--}else{if(e[1]<=n[0])return t.splice(i,0,e),t;if(e[1]<=n[1])return n[0]=Math.min(e[0],n[0]),t;e[0]<n[1]&&(n[0]=Math.min(e[0],n[0]),r=!0)}}return r?t[t.length-1][1]=e[1]:t.push(e),t},t}();e.CharacterJoinerRegistry=n},function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var s=r(43),o=r(2),a=r(0),l=r(39),c=function(t){function e(e){var r=t.call(this)||this;return r._terminal=e,r._linkMatchers=[],r._nextLinkMatcherId=0,r._rowsToLinkify={start:null,end:null},r}return n(e,t),e.prototype.attachToDom=function(t){this._mouseZoneManager=t},e.prototype.linkifyRows=function(t,r){var i=this;this._mouseZoneManager&&(null===this._rowsToLinkify.start?(this._rowsToLinkify.start=t,this._rowsToLinkify.end=r):(this._rowsToLinkify.start=Math.min(this._rowsToLinkify.start,t),this._rowsToLinkify.end=Math.max(this._rowsToLinkify.end,r)),this._mouseZoneManager.clearAll(t,r),this._rowsTimeoutId&&clearTimeout(this._rowsTimeoutId),this._rowsTimeoutId=setTimeout(function(){return i._linkifyRows()},e.TIME_BEFORE_LINKIFY))},e.prototype._linkifyRows=function(){this._rowsTimeoutId=null;var t=this._terminal.buffer,r=t.ydisp+this._rowsToLinkify.start;if(!(r>=t.lines.length)){for(var i=t.ydisp+Math.min(this._rowsToLinkify.end,this._terminal.rows)+1,n=Math.ceil(e.OVERSCAN_CHAR_LIMIT/this._terminal.cols),s=this._terminal.buffer.iterator(!1,r,i,n,n);s.hasNext();)for(var o=s.next(),a=0;a<this._linkMatchers.length;a++)this._doLinkifyRow(o.range.first,o.content,this._linkMatchers[a]);this._rowsToLinkify.start=null,this._rowsToLinkify.end=null}},e.prototype.registerLinkMatcher=function(t,e,r){if(void 0===r&&(r={}),!e)throw new Error("handler must be defined");var i={id:this._nextLinkMatcherId++,regex:t,handler:e,matchIndex:r.matchIndex,validationCallback:r.validationCallback,hoverTooltipCallback:r.tooltipCallback,hoverLeaveCallback:r.leaveCallback,willLinkActivate:r.willLinkActivate,priority:r.priority||0};return this._addLinkMatcherToList(i),i.id},e.prototype._addLinkMatcherToList=function(t){if(0!==this._linkMatchers.length){for(var e=this._linkMatchers.length-1;e>=0;e--)if(t.priority<=this._linkMatchers[e].priority)return void this._linkMatchers.splice(e+1,0,t);this._linkMatchers.splice(0,0,t)}else this._linkMatchers.push(t)},e.prototype.deregisterLinkMatcher=function(t){for(var e=0;e<this._linkMatchers.length;e++)if(this._linkMatchers[e].id===t)return this._linkMatchers.splice(e,1),!0;return!1},e.prototype._doLinkifyRow=function(t,e,r){for(var i,n=this,s=new RegExp(r.regex.source,r.regex.flags+"g"),o=-1,l=function(){var l=i["number"!=typeof r.matchIndex?0:r.matchIndex];if(!l){if(c._terminal.debug)throw console.log({match:i,matcher:r}),new Error("match found without corresponding matchIndex");return"break"}o=e.indexOf(l,o+1),s.lastIndex=o+l.length;var h,u=c._terminal.buffer.stringIndexToBufferIndex(t,o),f=c._terminal.buffer.lines.get(u[0]).get(u[1]);if(f){var p=f[a.CHAR_DATA_ATTR_INDEX];h=p>>9&511}r.validationCallback?r.validationCallback(l,function(t){n._rowsTimeoutId||t&&n._addLink(u[1],u[0]-n._terminal.buffer.ydisp,l,r,h)}):c._addLink(u[1],u[0]-c._terminal.buffer.ydisp,l,r,h)},c=this;null!==(i=s.exec(e));){if("break"===l())break}},e.prototype._addLink=function(t,e,r,i,n){var o=this,a=l.getStringCellWidth(r),c=t%this._terminal.cols,h=e+Math.floor(t/this._terminal.cols),u=(c+a)%this._terminal.cols,f=h+Math.floor((c+a)/this._terminal.cols);0===u&&(u=this._terminal.cols,f--),this._mouseZoneManager.add(new s.MouseZone(c+1,h+1,u+1,f+1,function(t){if(i.handler)return i.handler(t,r);window.open(r,"_blank")},function(t){o.emit("linkhover",o._createLinkHoverEvent(c,h,u,f,n)),o._terminal.element.classList.add("xterm-cursor-pointer")},function(t){o.emit("linktooltip",o._createLinkHoverEvent(c,h,u,f,n)),i.hoverTooltipCallback&&i.hoverTooltipCallback(t,r)},function(){o.emit("linkleave",o._createLinkHoverEvent(c,h,u,f,n)),o._terminal.element.classList.remove("xterm-cursor-pointer"),i.hoverLeaveCallback&&i.hoverLeaveCallback()},function(t){return!i.willLinkActivate||i.willLinkActivate(t,r)}))},e.prototype._createLinkHoverEvent=function(t,e,r,i,n){return{x1:t,y1:e,x2:r,y2:i,cols:this._terminal.cols,fg:n}},e.TIME_BEFORE_LINKIFY=200,e.OVERSCAN_CHAR_LIMIT=2e3,e}(o.EventEmitter);e.Linkifier=c},function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var s=r(44),o=r(7),a=r(2),l=r(96),c=r(0),h=r(97),u=String.fromCharCode(160),f=new RegExp(u,"g"),p=function(t){function e(e,r){var i=t.call(this)||this;return i._terminal=e,i._charMeasure=r,i._enabled=!0,i._initListeners(),i.enable(),i._model=new l.SelectionModel(e),i._activeSelectionMode=0,i}return n(e,t),e.prototype.dispose=function(){t.prototype.dispose.call(this),this._removeMouseDownListeners()},Object.defineProperty(e.prototype,"_buffer",{get:function(){return this._terminal.buffers.active},enumerable:!0,configurable:!0}),e.prototype._initListeners=function(){var t=this;this._mouseMoveListener=function(e){return t._onMouseMove(e)},this._mouseUpListener=function(e){return t._onMouseUp(e)},this._trimListener=function(e){return t._onTrim(e)},this.initBuffersListeners()},e.prototype.initBuffersListeners=function(){var t=this;this._terminal.buffer.lines.on("trim",this._trimListener),this._terminal.buffers.on("activate",function(e){return t._onBufferActivate(e)})},e.prototype.disable=function(){this.clearSelection(),this._enabled=!1},e.prototype.enable=function(){this._enabled=!0},Object.defineProperty(e.prototype,"selectionStart",{get:function(){return this._model.finalSelectionStart},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"selectionEnd",{get:function(){return this._model.finalSelectionEnd},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"hasSelection",{get:function(){var t=this._model.finalSelectionStart,e=this._model.finalSelectionEnd;return!(!t||!e)&&(t[0]!==e[0]||t[1]!==e[1])},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"selectionText",{get:function(){var t=this._model.finalSelectionStart,e=this._model.finalSelectionEnd;if(!t||!e)return"";var r=[];if(3===this._activeSelectionMode){if(t[0]===e[0])return"";for(var i=t[1];i<=e[1];i++){var n=this._buffer.translateBufferLineToString(i,!0,t[0],e[0]);r.push(n)}}else{var s=t[1]===e[1]?e[0]:null;r.push(this._buffer.translateBufferLineToString(t[1],!0,t[0],s));for(i=t[1]+1;i<=e[1]-1;i++){var a=this._buffer.lines.get(i);n=this._buffer.translateBufferLineToString(i,!0);a.isWrapped?r[r.length-1]+=n:r.push(n)}if(t[1]!==e[1]){a=this._buffer.lines.get(e[1]),n=this._buffer.translateBufferLineToString(e[1],!0,0,e[0]);a.isWrapped?r[r.length-1]+=n:r.push(n)}}return r.map(function(t){return t.replace(f," ")}).join(o.isMSWindows?"\r\n":"\n")},enumerable:!0,configurable:!0}),e.prototype.clearSelection=function(){this._model.clearSelection(),this._removeMouseDownListeners(),this.refresh()},e.prototype.refresh=function(t){var e=this;(this._refreshAnimationFrame||(this._refreshAnimationFrame=window.requestAnimationFrame(function(){return e._refresh()})),o.isLinux&&t)&&(this.selectionText.length&&this.emit("newselection",this.selectionText))},e.prototype._refresh=function(){this._refreshAnimationFrame=null,this.emit("refresh",{start:this._model.finalSelectionStart,end:this._model.finalSelectionEnd,columnSelectMode:3===this._activeSelectionMode})},e.prototype.isClickInSelection=function(t){var e=this._getMouseBufferCoords(t),r=this._model.finalSelectionStart,i=this._model.finalSelectionEnd;return!(!r||!i)&&this._areCoordsInSelection(e,r,i)},e.prototype._areCoordsInSelection=function(t,e,r){return t[1]>e[1]&&t[1]<r[1]||e[1]===r[1]&&t[1]===e[1]&&t[0]>=e[0]&&t[0]<r[0]||e[1]<r[1]&&t[1]===r[1]&&t[0]<r[0]||e[1]<r[1]&&t[1]===e[1]&&t[0]>=e[0]},e.prototype.selectWordAtCursor=function(t){var e=this._getMouseBufferCoords(t);e&&(this._selectWordAt(e,!1),this._model.selectionEnd=null,this.refresh(!0))},e.prototype.selectAll=function(){this._model.isSelectAllActive=!0,this.refresh(),this._terminal.emit("selection")},e.prototype.selectLines=function(t,e){this._model.clearSelection(),t=Math.max(t,0),e=Math.min(e,this._terminal.buffer.lines.length-1),this._model.selectionStart=[0,t],this._model.selectionEnd=[this._terminal.cols,e],this.refresh(),this._terminal.emit("selection")},e.prototype._onTrim=function(t){this._model.onTrim(t)&&this.refresh()},e.prototype._getMouseBufferCoords=function(t){var e=this._terminal.mouseHelper.getCoords(t,this._terminal.screenElement,this._charMeasure,this._terminal.cols,this._terminal.rows,!0);return e?(e[0]--,e[1]--,e[1]+=this._terminal.buffer.ydisp,e):null},e.prototype._getMouseEventScrollAmount=function(t){var e=s.MouseHelper.getCoordsRelativeToElement(t,this._terminal.screenElement)[1],r=this._terminal.rows*Math.ceil(this._charMeasure.height*this._terminal.options.lineHeight);return e>=0&&e<=r?0:(e>r&&(e-=r),e=Math.min(Math.max(e,-50),50),(e/=50)/Math.abs(e)+Math.round(14*e))},e.prototype.shouldForceSelection=function(t){return o.isMac?t.altKey&&this._terminal.options.macOptionClickForcesSelection:t.shiftKey},e.prototype.onMouseDown=function(t){if(this._mouseDownTimeStamp=t.timeStamp,(2!==t.button||!this.hasSelection)&&0===t.button){if(!this._enabled){if(!this.shouldForceSelection(t))return;t.stopPropagation()}t.preventDefault(),this._dragScrollAmount=0,this._enabled&&t.shiftKey?this._onIncrementalClick(t):1===t.detail?this._onSingleClick(t):2===t.detail?this._onDoubleClick(t):3===t.detail&&this._onTripleClick(t),this._addMouseDownListeners(),this.refresh(!0)}},e.prototype._addMouseDownListeners=function(){var t=this;this._terminal.element.ownerDocument.addEventListener("mousemove",this._mouseMoveListener),this._terminal.element.ownerDocument.addEventListener("mouseup",this._mouseUpListener),this._dragScrollIntervalTimer=setInterval(function(){return t._dragScroll()},50)},e.prototype._removeMouseDownListeners=function(){this._terminal.element.ownerDocument&&(this._terminal.element.ownerDocument.removeEventListener("mousemove",this._mouseMoveListener),this._terminal.element.ownerDocument.removeEventListener("mouseup",this._mouseUpListener)),clearInterval(this._dragScrollIntervalTimer),this._dragScrollIntervalTimer=null},e.prototype._onIncrementalClick=function(t){this._model.selectionStart&&(this._model.selectionEnd=this._getMouseBufferCoords(t))},e.prototype._onSingleClick=function(t){if(this._model.selectionStartLength=0,this._model.isSelectAllActive=!1,this._activeSelectionMode=this.shouldColumnSelect(t)?3:0,this._model.selectionStart=this._getMouseBufferCoords(t),this._model.selectionStart){this._model.selectionEnd=null;var e=this._buffer.lines.get(this._model.selectionStart[1]);if(e)if(!(e.length>=this._model.selectionStart[0]))0===e.get(this._model.selectionStart[0])[c.CHAR_DATA_WIDTH_INDEX]&&this._model.selectionStart[0]++}},e.prototype._onDoubleClick=function(t){var e=this._getMouseBufferCoords(t);e&&(this._activeSelectionMode=1,this._selectWordAt(e,!0))},e.prototype._onTripleClick=function(t){var e=this._getMouseBufferCoords(t);e&&(this._activeSelectionMode=2,this._selectLineAt(e[1]))},e.prototype.shouldColumnSelect=function(t){return t.altKey&&!(o.isMac&&this._terminal.options.macOptionClickForcesSelection)},e.prototype._onMouseMove=function(t){t.stopImmediatePropagation();var e=this._model.selectionEnd?[this._model.selectionEnd[0],this._model.selectionEnd[1]]:null;if(this._model.selectionEnd=this._getMouseBufferCoords(t),this._model.selectionEnd){if(2===this._activeSelectionMode?this._model.selectionEnd[1]<this._model.selectionStart[1]?this._model.selectionEnd[0]=0:this._model.selectionEnd[0]=this._terminal.cols:1===this._activeSelectionMode&&this._selectToWordAt(this._model.selectionEnd),this._dragScrollAmount=this._getMouseEventScrollAmount(t),3!==this._activeSelectionMode&&(this._dragScrollAmount>0?this._model.selectionEnd[0]=this._terminal.cols:this._dragScrollAmount<0&&(this._model.selectionEnd[0]=0)),this._model.selectionEnd[1]<this._buffer.lines.length){var r=this._buffer.lines.get(this._model.selectionEnd[1]).get(this._model.selectionEnd[0]);r&&0===r[c.CHAR_DATA_WIDTH_INDEX]&&this._model.selectionEnd[0]++}e&&e[0]===this._model.selectionEnd[0]&&e[1]===this._model.selectionEnd[1]||this.refresh(!0)}else this.refresh(!0)},e.prototype._dragScroll=function(){this._dragScrollAmount&&(this._terminal.scrollLines(this._dragScrollAmount,!1),this._dragScrollAmount>0?(3!==this._activeSelectionMode&&(this._model.selectionEnd[0]=this._terminal.cols),this._model.selectionEnd[1]=Math.min(this._terminal.buffer.ydisp+this._terminal.rows,this._terminal.buffer.lines.length-1)):(3!==this._activeSelectionMode&&(this._model.selectionEnd[0]=0),this._model.selectionEnd[1]=this._terminal.buffer.ydisp),this.refresh())},e.prototype._onMouseUp=function(t){var e=t.timeStamp-this._mouseDownTimeStamp;this._removeMouseDownListeners(),this.selectionText.length<=1&&e<500?new h.AltClickHandler(t,this._terminal).move():this.hasSelection&&this._terminal.emit("selection")},e.prototype._onBufferActivate=function(t){this.clearSelection(),t.inactiveBuffer.lines.off("trim",this._trimListener),t.activeBuffer.lines.on("trim",this._trimListener)},e.prototype._convertViewportColToCharacterIndex=function(t,e){for(var r=e[0],i=0;e[0]>=i;i++){var n=t.get(i);0===n[c.CHAR_DATA_WIDTH_INDEX]?r--:n[c.CHAR_DATA_CHAR_INDEX].length>1&&e[0]!==i&&(r+=n[c.CHAR_DATA_CHAR_INDEX].length-1)}return r},e.prototype.setSelection=function(t,e,r){this._model.clearSelection(),this._removeMouseDownListeners(),this._model.selectionStart=[t,e],this._model.selectionStartLength=r,this.refresh()},e.prototype._getWordAt=function(t,e,r,i){if(void 0===r&&(r=!0),void 0===i&&(i=!0),t[0]>=this._terminal.cols)return null;var n=this._buffer.lines.get(t[1]);if(!n)return null;var s=this._buffer.translateBufferLineToString(t[1],!1),o=this._convertViewportColToCharacterIndex(n,t),a=o,l=t[0]-o,h=0,u=0,f=0,p=0;if(" "===s.charAt(o)){for(;o>0&&" "===s.charAt(o-1);)o--;for(;a<s.length&&" "===s.charAt(a+1);)a++}else{var d=t[0],_=t[0];for(0===n.get(d)[c.CHAR_DATA_WIDTH_INDEX]&&(h++,d--),2===n.get(_)[c.CHAR_DATA_WIDTH_INDEX]&&(u++,_++),n.get(_)[c.CHAR_DATA_CHAR_INDEX].length>1&&(p+=n.get(_)[c.CHAR_DATA_CHAR_INDEX].length-1,a+=n.get(_)[c.CHAR_DATA_CHAR_INDEX].length-1);d>0&&o>0&&!this._isCharWordSeparator(n.get(d-1));){0===(m=n.get(d-1))[c.CHAR_DATA_WIDTH_INDEX]?(h++,d--):m[c.CHAR_DATA_CHAR_INDEX].length>1&&(f+=m[c.CHAR_DATA_CHAR_INDEX].length-1,o-=m[c.CHAR_DATA_CHAR_INDEX].length-1),o--,d--}for(;_<n.length&&a+1<s.length&&!this._isCharWordSeparator(n.get(_+1));){var m;2===(m=n.get(_+1))[c.CHAR_DATA_WIDTH_INDEX]?(u++,_++):m[c.CHAR_DATA_CHAR_INDEX].length>1&&(p+=m[c.CHAR_DATA_CHAR_INDEX].length-1,a+=m[c.CHAR_DATA_CHAR_INDEX].length-1),a++,_++}}a++;var y=o+l-h+f,g=Math.min(this._terminal.cols,a-o+h+u-f-p);if(!e&&""===s.slice(o,a).trim())return null;if(r&&0===y&&32!==n.get(0)[c.CHAR_DATA_CODE_INDEX]){var C=this._buffer.lines.get(t[1]-1);if(C&&n.isWrapped&&32!==C.get(this._terminal.cols-1)[c.CHAR_DATA_CODE_INDEX]){var v=this._getWordAt([this._terminal.cols-1,t[1]-1],!1,!0,!1);if(v){var b=this._terminal.cols-v.start;y-=b,g+=b}}}if(i&&y+g===this._terminal.cols&&32!==n.get(this._terminal.cols-1)[c.CHAR_DATA_CODE_INDEX]){var w=this._buffer.lines.get(t[1]+1);if(w&&w.isWrapped&&32!==w.get(0)[c.CHAR_DATA_CODE_INDEX]){var A=this._getWordAt([0,t[1]+1],!1,!1,!0);A&&(g+=A.length)}}return{start:y,length:g}},e.prototype._selectWordAt=function(t,e){var r=this._getWordAt(t,e);if(r){for(;r.start<0;)r.start+=this._terminal.cols,t[1]--;this._model.selectionStart=[r.start,t[1]],this._model.selectionStartLength=r.length}},e.prototype._selectToWordAt=function(t){var e=this._getWordAt(t,!0);if(e){for(var r=t[1];e.start<0;)e.start+=this._terminal.cols,r--;if(!this._model.areSelectionValuesReversed())for(;e.start+e.length>this._terminal.cols;)e.length-=this._terminal.cols,r++;this._model.selectionEnd=[this._model.areSelectionValuesReversed()?e.start:e.start+e.length,r]}},e.prototype._isCharWordSeparator=function(t){return 0!==t[c.CHAR_DATA_WIDTH_INDEX]&&" ()[]{}'\"".indexOf(t[c.CHAR_DATA_CHAR_INDEX])>=0},e.prototype._selectLineAt=function(t){var e=this._buffer.getWrappedRangeForLine(t);this._model.selectionStart=[0,e.first],this._model.selectionEnd=[this._terminal.cols,e.last],this._model.selectionStartLength=0},e}(a.EventEmitter);e.SelectionManager=p},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t){this._terminal=t,this.clearSelection()}return t.prototype.clearSelection=function(){this.selectionStart=null,this.selectionEnd=null,this.isSelectAllActive=!1,this.selectionStartLength=0},Object.defineProperty(t.prototype,"finalSelectionStart",{get:function(){return this.isSelectAllActive?[0,0]:this.selectionEnd&&this.selectionStart&&this.areSelectionValuesReversed()?this.selectionEnd:this.selectionStart},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"finalSelectionEnd",{get:function(){if(this.isSelectAllActive)return[this._terminal.cols,this._terminal.buffer.ybase+this._terminal.rows-1];if(!this.selectionStart)return null;if(!this.selectionEnd||this.areSelectionValuesReversed()){var t=this.selectionStart[0]+this.selectionStartLength;return t>this._terminal.cols?[t%this._terminal.cols,this.selectionStart[1]+Math.floor(t/this._terminal.cols)]:[t,this.selectionStart[1]]}return this.selectionStartLength&&this.selectionEnd[1]===this.selectionStart[1]?[Math.max(this.selectionStart[0]+this.selectionStartLength,this.selectionEnd[0]),this.selectionEnd[1]]:this.selectionEnd},enumerable:!0,configurable:!0}),t.prototype.areSelectionValuesReversed=function(){var t=this.selectionStart,e=this.selectionEnd;return!(!t||!e)&&(t[1]>e[1]||t[1]===e[1]&&t[0]>e[0])},t.prototype.onTrim=function(t){return this.selectionStart&&(this.selectionStart[1]-=t),this.selectionEnd&&(this.selectionEnd[1]-=t),this.selectionEnd&&this.selectionEnd[1]<0?(this.clearSelection(),!0):(this.selectionStart&&this.selectionStart[1]<0&&(this.selectionStart[1]=0),!1)},t}();e.SelectionModel=i},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(13),n=function(){function t(t,e){var r;this._mouseEvent=t,this._terminal=e,this._lines=this._terminal.buffer.lines,this._startCol=this._terminal.buffer.x,this._startRow=this._terminal.buffer.y;var i=this._terminal.mouseHelper.getCoords(this._mouseEvent,this._terminal.element,this._terminal.charMeasure,this._terminal.cols,this._terminal.rows,!1);i&&(r=i.map(function(t){return t-1}),this._endCol=r[0],this._endRow=r[1])}return t.prototype.move=function(){this._mouseEvent.altKey&&void 0!==this._endCol&&void 0!==this._endRow&&this._terminal.handler(this._arrowSequences())},t.prototype._arrowSequences=function(){return this._terminal.buffer.hasScrollback?this._moveHorizontallyOnly():this._resetStartingRow()+this._moveToRequestedRow()+this._moveToRequestedCol()},t.prototype._resetStartingRow=function(){return 0===this._moveToRequestedRow().length?"":s(this._bufferLine(this._startCol,this._startRow,this._startCol,this._startRow-this._wrappedRowsForRow(this._startRow),!1).length,this._sequence("D"))},t.prototype._moveToRequestedRow=function(){var t=this._startRow-this._wrappedRowsForRow(this._startRow),e=this._endRow-this._wrappedRowsForRow(this._endRow);return s(Math.abs(t-e)-this._wrappedRowsCount(),this._sequence(this._verticalDirection()))},t.prototype._moveToRequestedCol=function(){var t;t=this._moveToRequestedRow().length>0?this._endRow-this._wrappedRowsForRow(this._endRow):this._startRow;var e=this._endRow,r=this._horizontalDirection();return s(this._bufferLine(this._startCol,t,this._endCol,e,"C"===r).length,this._sequence(r))},t.prototype._moveHorizontallyOnly=function(){var t=this._horizontalDirection();return s(Math.abs(this._startCol-this._endCol),this._sequence(t))},t.prototype._wrappedRowsCount=function(){for(var t=0,e=this._startRow-this._wrappedRowsForRow(this._startRow),r=this._endRow-this._wrappedRowsForRow(this._endRow),i=0;i<Math.abs(e-r);i++){var n="A"===this._verticalDirection()?-1:1;this._lines.get(e+n*i).isWrapped&&t++}return t},t.prototype._wrappedRowsForRow=function(t){for(var e=0,r=this._lines.get(t).isWrapped;r&&t>=0&&t<this._terminal.rows;)e++,t--,r=this._lines.get(t).isWrapped;return e},t.prototype._horizontalDirection=function(){var t;return t=this._moveToRequestedRow().length>0?this._endRow-this._wrappedRowsForRow(this._endRow):this._startRow,this._startCol<this._endCol&&t<=this._endRow||this._startCol>=this._endCol&&t<this._endRow?"C":"D"},t.prototype._verticalDirection=function(){return this._startRow>this._endRow?"A":"B"},t.prototype._bufferLine=function(t,e,r,i,n){for(var s=t,o=e,a="";s!==r||o!==i;)s+=n?1:-1,n&&s>this._terminal.cols-1?(a+=this._terminal.buffer.translateBufferLineToString(o,!1,t,s),s=0,t=0,o++):!n&&s<0&&(a+=this._terminal.buffer.translateBufferLineToString(o,!1,0,t+1),t=s=this._terminal.cols-1,o--);return a+this._terminal.buffer.translateBufferLineToString(o,!1,t,s)},t.prototype._sequence=function(t){var e=this._terminal.applicationCursor?"O":"[";return i.C0.ESC+e+t},t}();function s(t,e){t=Math.floor(t);for(var r="",i=0;i<t;i++)r+=e;return r}e.AltClickHandler=n},function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var s=function(t){function e(e,r){var i=t.call(this)||this;return i._document=e,i._parentElement=r,i._measureElement=i._document.createElement("span"),i._measureElement.classList.add("xterm-char-measure-element"),i._measureElement.textContent="W",i._measureElement.setAttribute("aria-hidden","true"),i._parentElement.appendChild(i._measureElement),i}return n(e,t),Object.defineProperty(e.prototype,"width",{get:function(){return this._width},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this._height},enumerable:!0,configurable:!0}),e.prototype.measure=function(t){this._measureElement.style.fontFamily=t.fontFamily,this._measureElement.style.fontSize=t.fontSize+"px";var e=this._measureElement.getBoundingClientRect();0!==e.width&&0!==e.height&&(this._width===e.width&&this._height===e.height||(this._width=e.width,this._height=Math.ceil(e.height),this.emit("charsizechanged")))},e}(r(2).EventEmitter);e.CharMeasure=s},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.clone=function(t,r){if(void 0===r&&(r=5),"object"!=typeof t)return t;if(null===t)return null;var i=Array.isArray(t)?[]:{};for(var n in t)i[n]=r<=1?t[n]:e.clone(t[n],r-1);return i}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DEFAULT_BELL_SOUND="data:audio/wav;base64,UklGRigBAABXQVZFZm10IBAAAAABAAEARKwAAIhYAQACABAAZGF0YQQBAADpAFgCwAMlBZoG/wdmCcoKRAypDQ8PbRDBEQQTOxRtFYcWlBePGIUZXhoiG88bcBz7HHIdzh0WHlMeZx51HmkeUx4WHs8dah0AHXwc3hs9G4saxRnyGBIYGBcQFv8U4RPAEoYRQBACD70NWwwHC6gJOwjWBloF7gOBAhABkf8b/qv8R/ve+Xf4Ife79W/0JfPZ8Z/wde9N7ijtE+wU6xvqM+lb6H7nw+YX5mrlxuQz5Mzje+Ma49fioeKD4nXiYeJy4pHitOL04j/jn+MN5IPkFOWs5U3mDefM55/ogOl36m7rdOyE7abuyu8D8Unyj/Pg9D/2qfcb+Yn6/vuK/Qj/lAAlAg==";var i=function(){function t(t){this._terminal=t}return Object.defineProperty(t,"audioContext",{get:function(){if(!t._audioContext){var e=window.AudioContext||window.webkitAudioContext;if(!e)return console.warn("Web Audio API is not supported by this browser. Consider upgrading to the latest version"),null;t._audioContext=new e}return t._audioContext},enumerable:!0,configurable:!0}),t.prototype.playBellSound=function(){var e=t.audioContext;if(e){var r=e.createBufferSource();e.decodeAudioData(this._base64ToArrayBuffer(this._removeMimeType(this._terminal.options.bellSound)),function(t){r.buffer=t,r.connect(e.destination),r.start(0)})}},t.prototype._base64ToArrayBuffer=function(t){for(var e=window.atob(t),r=e.length,i=new Uint8Array(r),n=0;n<r;n++)i[n]=e.charCodeAt(n);return i.buffer},t.prototype._removeMimeType=function(t){return t.split(",")[1]},t}();e.SoundManager=i},function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var s=r(25),o=r(7),a=r(24),l=r(12),c=r(3),h=function(t){function e(e){var r=t.call(this)||this;r._terminal=e,r._liveRegionLineCount=0,r._charsToConsume=[],r._accessibilityTreeRoot=document.createElement("div"),r._accessibilityTreeRoot.classList.add("xterm-accessibility"),r._rowContainer=document.createElement("div"),r._rowContainer.classList.add("xterm-accessibility-tree"),r._rowElements=[];for(var i=0;i<r._terminal.rows;i++)r._rowElements[i]=r._createAccessibilityTreeNode(),r._rowContainer.appendChild(r._rowElements[i]);return r._topBoundaryFocusListener=function(t){return r._onBoundaryFocus(t,0)},r._bottomBoundaryFocusListener=function(t){return r._onBoundaryFocus(t,1)},r._rowElements[0].addEventListener("focus",r._topBoundaryFocusListener),r._rowElements[r._rowElements.length-1].addEventListener("focus",r._bottomBoundaryFocusListener),r._refreshRowsDimensions(),r._accessibilityTreeRoot.appendChild(r._rowContainer),r._renderRowsDebouncer=new a.RenderDebouncer(r._terminal,r._renderRows.bind(r)),r._refreshRows(),r._liveRegion=document.createElement("div"),r._liveRegion.classList.add("live-region"),r._liveRegion.setAttribute("aria-live","assertive"),r._accessibilityTreeRoot.appendChild(r._liveRegion),r._terminal.element.insertAdjacentElement("afterbegin",r._accessibilityTreeRoot),r.register(r._renderRowsDebouncer),r.register(r._terminal.addDisposableListener("resize",function(t){return r._onResize(t.rows)})),r.register(r._terminal.addDisposableListener("refresh",function(t){return r._refreshRows(t.start,t.end)})),r.register(r._terminal.addDisposableListener("scroll",function(t){return r._refreshRows()})),r.register(r._terminal.addDisposableListener("a11y.char",function(t){return r._onChar(t)})),r.register(r._terminal.addDisposableListener("linefeed",function(){return r._onChar("\n")})),r.register(r._terminal.addDisposableListener("a11y.tab",function(t){return r._onTab(t)})),r.register(r._terminal.addDisposableListener("key",function(t){return r._onKey(t)})),r.register(r._terminal.addDisposableListener("blur",function(){return r._clearLiveRegion()})),r.register(r._terminal.addDisposableListener("dprchange",function(){return r._refreshRowsDimensions()})),r.register(r._terminal.renderer.addDisposableListener("resize",function(){return r._refreshRowsDimensions()})),r.register(l.addDisposableDomListener(window,"resize",function(){return r._refreshRowsDimensions()})),r}return n(e,t),e.prototype.dispose=function(){t.prototype.dispose.call(this),this._terminal.element.removeChild(this._accessibilityTreeRoot),this._rowElements.length=0},e.prototype._onBoundaryFocus=function(t,e){var r=t.target,i=this._rowElements[0===e?1:this._rowElements.length-2];if(r.getAttribute("aria-posinset")!==(0===e?"1":""+this._terminal.buffer.lines.length)&&t.relatedTarget===i){var n,s;if(0===e?(n=r,s=this._rowElements.pop(),this._rowContainer.removeChild(s)):(n=this._rowElements.shift(),s=r,this._rowContainer.removeChild(n)),n.removeEventListener("focus",this._topBoundaryFocusListener),s.removeEventListener("focus",this._bottomBoundaryFocusListener),0===e){var o=this._createAccessibilityTreeNode();this._rowElements.unshift(o),this._rowContainer.insertAdjacentElement("afterbegin",o)}else{o=this._createAccessibilityTreeNode();this._rowElements.push(o),this._rowContainer.appendChild(o)}this._rowElements[0].addEventListener("focus",this._topBoundaryFocusListener),this._rowElements[this._rowElements.length-1].addEventListener("focus",this._bottomBoundaryFocusListener),this._terminal.scrollLines(0===e?-1:1),this._rowElements[0===e?1:this._rowElements.length-2].focus(),t.preventDefault(),t.stopImmediatePropagation()}},e.prototype._onResize=function(t){this._rowElements[this._rowElements.length-1].removeEventListener("focus",this._bottomBoundaryFocusListener);for(var e=this._rowContainer.children.length;e<this._terminal.rows;e++)this._rowElements[e]=this._createAccessibilityTreeNode(),this._rowContainer.appendChild(this._rowElements[e]);for(;this._rowElements.length>t;)this._rowContainer.removeChild(this._rowElements.pop());this._rowElements[this._rowElements.length-1].addEventListener("focus",this._bottomBoundaryFocusListener),this._refreshRowsDimensions()},e.prototype._createAccessibilityTreeNode=function(){var t=document.createElement("div");return t.setAttribute("role","listitem"),t.tabIndex=-1,this._refreshRowDimensions(t),t},e.prototype._onTab=function(t){for(var e=0;e<t;e++)this._onChar(" ")},e.prototype._onChar=function(t){var e=this;if(this._liveRegionLineCount<21){if(this._charsToConsume.length>0)this._charsToConsume.shift()!==t&&this._announceCharacter(t);else this._announceCharacter(t);"\n"===t&&(this._liveRegionLineCount++,21===this._liveRegionLineCount&&(this._liveRegion.textContent+=s.tooMuchOutput)),o.isMac&&this._liveRegion.textContent&&this._liveRegion.textContent.length>0&&!this._liveRegion.parentNode&&setTimeout(function(){e._accessibilityTreeRoot.appendChild(e._liveRegion)},0)}},e.prototype._clearLiveRegion=function(){this._liveRegion.textContent="",this._liveRegionLineCount=0,o.isMac&&this._liveRegion.parentNode&&this._accessibilityTreeRoot.removeChild(this._liveRegion)},e.prototype._onKey=function(t){this._clearLiveRegion(),this._charsToConsume.push(t)},e.prototype._refreshRows=function(t,e){this._renderRowsDebouncer.refresh(t,e)},e.prototype._renderRows=function(t,e){for(var r=this._terminal.buffer,i=r.lines.length.toString(),n=t;n<=e;n++){var o=r.translateBufferLineToString(r.ydisp+n,!0),a=(r.ydisp+n+1).toString(),l=this._rowElements[n];l.textContent=0===o.length?s.blankLine:o,l.setAttribute("aria-posinset",a),l.setAttribute("aria-setsize",i)}},e.prototype._refreshRowsDimensions=function(){if(this._terminal.renderer.dimensions.actualCellHeight){this._rowElements.length!==this._terminal.rows&&this._onResize(this._terminal.rows);for(var t=0;t<this._terminal.rows;t++)this._refreshRowDimensions(this._rowElements[t])}},e.prototype._refreshRowDimensions=function(t){t.style.height=this._terminal.renderer.dimensions.actualCellHeight+"px"},e.prototype._announceCharacter=function(t){" "===t?this._liveRegion.innerHTML+="&nbsp;":this._liveRegion.textContent+=t},e}(c.Disposable);e.AccessibilityManager=h},function(t,e,r){"use strict";var i,n=this&&this.__extends||(i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(t,e)},function(t,e){function r(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var s=r(2),o=r(15),a=r(24),l=r(103),c=r(1),h="xterm-dom-renderer-owner-",u="xterm-rows",f="xterm-selection",p=1,d=function(t){function e(e,r){var i=t.call(this)||this;i._terminal=e,i._terminalClass=p++,i._rowElements=[];var n=i._terminal.options.allowTransparency;return i.colorManager=new o.ColorManager(document,n),i.setTheme(r),i._rowContainer=document.createElement("div"),i._rowContainer.classList.add(u),i._rowContainer.style.lineHeight="normal",i._rowContainer.setAttribute("aria-hidden","true"),i._refreshRowElements(i._terminal.cols,i._terminal.rows),i._selectionContainer=document.createElement("div"),i._selectionContainer.classList.add(f),i._selectionContainer.setAttribute("aria-hidden","true"),i.dimensions={scaledCharWidth:null,scaledCharHeight:null,scaledCellWidth:null,scaledCellHeight:null,scaledCharLeft:null,scaledCharTop:null,scaledCanvasWidth:null,scaledCanvasHeight:null,canvasWidth:null,canvasHeight:null,actualCellWidth:null,actualCellHeight:null},i._updateDimensions(),i._renderDebouncer=new a.RenderDebouncer(i._terminal,i._renderRows.bind(i)),i._rowFactory=new l.DomRendererRowFactory(document),i._terminal.element.classList.add(h+i._terminalClass),i._terminal.screenElement.appendChild(i._rowContainer),i._terminal.screenElement.appendChild(i._selectionContainer),i._terminal.linkifier.on("linkhover",function(t){return i._onLinkHover(t)}),i._terminal.linkifier.on("linkleave",function(t){return i._onLinkLeave(t)}),i}return n(e,t),e.prototype.dispose=function(){this._terminal.element.classList.remove(h+this._terminalClass),this._terminal.screenElement.removeChild(this._rowContainer),this._terminal.screenElement.removeChild(this._selectionContainer),this._terminal.screenElement.removeChild(this._themeStyleElement),this._terminal.screenElement.removeChild(this._dimensionsStyleElement),t.prototype.dispose.call(this)},e.prototype._updateDimensions=function(){var t=this;this.dimensions.scaledCharWidth=Math.floor(this._terminal.charMeasure.width*window.devicePixelRatio),this.dimensions.scaledCharHeight=Math.ceil(this._terminal.charMeasure.height*window.devicePixelRatio),this.dimensions.scaledCellWidth=this.dimensions.scaledCharWidth+Math.round(this._terminal.options.letterSpacing),this.dimensions.scaledCellHeight=Math.floor(this.dimensions.scaledCharHeight*this._terminal.options.lineHeight),this.dimensions.scaledCharLeft=0,this.dimensions.scaledCharTop=0,this.dimensions.scaledCanvasWidth=this.dimensions.scaledCellWidth*this._terminal.cols,this.dimensions.scaledCanvasHeight=this.dimensions.scaledCellHeight*this._terminal.rows,this.dimensions.canvasWidth=Math.round(this.dimensions.scaledCanvasWidth/window.devicePixelRatio),this.dimensions.canvasHeight=Math.round(this.dimensions.scaledCanvasHeight/window.devicePixelRatio),this.dimensions.actualCellWidth=this.dimensions.canvasWidth/this._terminal.cols,this.dimensions.actualCellHeight=this.dimensions.canvasHeight/this._terminal.rows,this._rowElements.forEach(function(e){e.style.width=t.dimensions.canvasWidth+"px",e.style.height=t.dimensions.actualCellHeight+"px",e.style.lineHeight=t.dimensions.actualCellHeight+"px",e.style.overflow="hidden"}),this._dimensionsStyleElement||(this._dimensionsStyleElement=document.createElement("style"),this._terminal.screenElement.appendChild(this._dimensionsStyleElement));var e=this._terminalSelector+" ."+u+" span { display: inline-block; height: 100%; vertical-align: top; width: "+this.dimensions.actualCellWidth+"px}";this._dimensionsStyleElement.innerHTML=e,this._selectionContainer.style.height=this._terminal._viewportElement.style.height,this._terminal.screenElement.style.width=this.dimensions.canvasWidth+"px",this._terminal.screenElement.style.height=this.dimensions.canvasHeight+"px"},e.prototype.setTheme=function(t){var e=this;t&&this.colorManager.setTheme(t),this._themeStyleElement||(this._themeStyleElement=document.createElement("style"),this._terminal.screenElement.appendChild(this._themeStyleElement));var r=this._terminalSelector+" ."+u+" { color: "+this.colorManager.colors.foreground.css+"; background-color: "+this.colorManager.colors.background.css+"; font-family: "+this._terminal.getOption("fontFamily")+"; font-size: "+this._terminal.getOption("fontSize")+"px;}";return r+=this._terminalSelector+" span:not(."+l.BOLD_CLASS+") { font-weight: "+this._terminal.options.fontWeight+";}"+this._terminalSelector+" span."+l.BOLD_CLASS+" { font-weight: "+this._terminal.options.fontWeightBold+";}"+this._terminalSelector+" span."+l.ITALIC_CLASS+" { font-style: italic;}",r+=this._terminalSelector+" ."+u+":not(.xterm-focus) ."+l.CURSOR_CLASS+" { outline: 1px solid "+this.colorManager.colors.cursor.css+"; outline-offset: -1px;}"+this._terminalSelector+" ."+u+".xterm-focus ."+l.CURSOR_CLASS+"."+l.CURSOR_STYLE_BLOCK_CLASS+" { background-color: "+this.colorManager.colors.cursor.css+"; color: "+this.colorManager.colors.cursorAccent.css+";}"+this._terminalSelector+" ."+u+".xterm-focus ."+l.CURSOR_CLASS+"."+l.CURSOR_STYLE_BAR_CLASS+" { box-shadow: 1px 0 0 "+this.colorManager.colors.cursor.css+" inset;}"+this._terminalSelector+" ."+u+".xterm-focus ."+l.CURSOR_CLASS+"."+l.CURSOR_STYLE_UNDERLINE_CLASS+" { box-shadow: 0 -1px 0 "+this.colorManager.colors.cursor.css+" inset;}",r+=this._terminalSelector+" ."+f+" { position: absolute; top: 0; left: 0; z-index: 1; pointer-events: none;}"+this._terminalSelector+" ."+f+" div { position: absolute; background-color: "+this.colorManager.colors.selection.css+";}",this.colorManager.colors.ansi.forEach(function(t,i){r+=e._terminalSelector+" .xterm-fg-"+i+" { color: "+t.css+"; }"+e._terminalSelector+" .xterm-bg-"+i+" { background-color: "+t.css+"; }"}),r+=this._terminalSelector+" .xterm-fg-"+c.INVERTED_DEFAULT_COLOR+" { color: "+this.colorManager.colors.background.css+"; }"+this._terminalSelector+" .xterm-bg-"+c.INVERTED_DEFAULT_COLOR+" { background-color: "+this.colorManager.colors.foreground.css+"; }",this._themeStyleElement.innerHTML=r,this.colorManager.colors},e.prototype.onWindowResize=function(t){this._updateDimensions()},e.prototype._refreshRowElements=function(t,e){for(var r=this._rowElements.length;r<=e;r++){var i=document.createElement("div");this._rowContainer.appendChild(i),this._rowElements.push(i)}for(;this._rowElements.length>e;)this._rowContainer.removeChild(this._rowElements.pop())},e.prototype.onResize=function(t,e){this._refreshRowElements(t,e),this._updateDimensions()},e.prototype.onCharSizeChanged=function(){this._updateDimensions()},e.prototype.onBlur=function(){this._rowContainer.classList.remove("xterm-focus")},e.prototype.onFocus=function(){this._rowContainer.classList.add("xterm-focus")},e.prototype.onSelectionChanged=function(t,e,r){for(;this._selectionContainer.children.length;)this._selectionContainer.removeChild(this._selectionContainer.children[0]);if(t&&e){var i=t[1]-this._terminal.buffer.ydisp,n=e[1]-this._terminal.buffer.ydisp,s=Math.max(i,0),o=Math.min(n,this._terminal.rows-1);if(!(s>=this._terminal.rows||o<0)){var a=document.createDocumentFragment();if(r)a.appendChild(this._createSelectionElement(s,t[0],e[0],o-s+1));else{var l=i===s?t[0]:0,c=s===o?e[0]:this._terminal.cols;a.appendChild(this._createSelectionElement(s,l,c));var h=o-s-1;if(a.appendChild(this._createSelectionElement(s+1,0,this._terminal.cols,h)),s!==o){var u=n===o?e[0]:this._terminal.cols;a.appendChild(this._createSelectionElement(o,0,u))}}this._selectionContainer.appendChild(a)}}},e.prototype._createSelectionElement=function(t,e,r,i){void 0===i&&(i=1);var n=document.createElement("div");return n.style.height=i*this.dimensions.actualCellHeight+"px",n.style.top=t*this.dimensions.actualCellHeight+"px",n.style.left=e*this.dimensions.actualCellWidth+"px",n.style.width=this.dimensions.actualCellWidth*(r-e)+"px",n},e.prototype.onCursorMove=function(){},e.prototype.onOptionsChanged=function(){this._updateDimensions(),this.setTheme(void 0),this._terminal.refresh(0,this._terminal.rows-1)},e.prototype.clear=function(){this._rowElements.forEach(function(t){return t.innerHTML=""})},e.prototype.refreshRows=function(t,e){this._renderDebouncer.refresh(t,e)},e.prototype._renderRows=function(t,e){for(var r=this._terminal,i=r.buffer.ybase+r.buffer.y,n=this._terminal.buffer.x,s=t;s<=e;s++){var o=this._rowElements[s];o.innerHTML="";var a=s+r.buffer.ydisp,l=r.buffer.lines.get(a),c=r.options.cursorStyle;o.appendChild(this._rowFactory.createRow(l,a===i,c,n,this.dimensions.actualCellWidth,r.cols))}this._terminal.emit("refresh",{start:t,end:e})},Object.defineProperty(e.prototype,"_terminalSelector",{get:function(){return"."+h+this._terminalClass},enumerable:!0,configurable:!0}),e.prototype.registerCharacterJoiner=function(t){return-1},e.prototype.deregisterCharacterJoiner=function(t){return!1},e.prototype._onLinkHover=function(t){this._setCellUnderline(t.x1,t.x2,t.y1,t.y2,t.cols,!0)},e.prototype._onLinkLeave=function(t){this._setCellUnderline(t.x1,t.x2,t.y1,t.y2,t.cols,!1)},e.prototype._setCellUnderline=function(t,e,r,i,n,s){for(;t!==e||r!==i;){var o=this._rowElements[r];if(!o)return;o.children[t].style.textDecoration=s?"underline":"none",0===(t=(t+1)%n)&&r++}},e}(s.EventEmitter);e.DomRenderer=d},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(0),n=r(1);e.BOLD_CLASS="xterm-bold",e.ITALIC_CLASS="xterm-italic",e.CURSOR_CLASS="xterm-cursor",e.CURSOR_STYLE_BLOCK_CLASS="xterm-cursor-block",e.CURSOR_STYLE_BAR_CLASS="xterm-cursor-bar",e.CURSOR_STYLE_UNDERLINE_CLASS="xterm-cursor-underline";var s=function(){function t(t){this._document=t}return t.prototype.createRow=function(t,r,s,o,a,l){for(var c=this._document.createDocumentFragment(),h=0,u=Math.min(t.length,l)-1;u>=0;u--){if((f=t.get(u))[i.CHAR_DATA_CODE_INDEX]!==i.NULL_CELL_CODE||r&&u===o){h=u+1;break}}for(u=0;u<h;u++){var f,p=(f=t.get(u))[i.CHAR_DATA_CHAR_INDEX],d=f[i.CHAR_DATA_ATTR_INDEX],_=f[i.CHAR_DATA_WIDTH_INDEX];if(0!==_){var m=this._document.createElement("span");_>1&&(m.style.width=a*_+"px");var y=d>>18,g=511&d,C=d>>9&511;if(r&&u===o)switch(m.classList.add(e.CURSOR_CLASS),s){case"bar":m.classList.add(e.CURSOR_STYLE_BAR_CLASS);break;case"underline":m.classList.add(e.CURSOR_STYLE_UNDERLINE_CLASS);break;default:m.classList.add(e.CURSOR_STYLE_BLOCK_CLASS)}if(8&y){var v=g;g=C,(C=v)===n.DEFAULT_COLOR&&(C=n.INVERTED_DEFAULT_COLOR),g===n.DEFAULT_COLOR&&(g=n.INVERTED_DEFAULT_COLOR)}1&y&&(C<8&&(C+=8),m.classList.add(e.BOLD_CLASS)),64&y&&m.classList.add(e.ITALIC_CLASS),m.textContent=p,C!==n.DEFAULT_COLOR&&m.classList.add("xterm-fg-"+C),g!==n.DEFAULT_COLOR&&m.classList.add("xterm-bg-"+g),c.appendChild(m)}}return c},t}();e.DomRendererRowFactory=s},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(13),n={48:["0",")"],49:["1","!"],50:["2","@"],51:["3","#"],52:["4","$"],53:["5","%"],54:["6","^"],55:["7","&"],56:["8","*"],57:["9","("],186:[";",":"],187:["=","+"],188:[",","<"],189:["-","_"],190:[".",">"],191:["/","?"],192:["`","~"],219:["[","{"],220:["\\","|"],221:["]","}"],222:["'",'"']};e.evaluateKeyboardEvent=function(t,e,r,s){var o={type:0,cancel:!1,key:void 0},a=(t.shiftKey?1:0)|(t.altKey?2:0)|(t.ctrlKey?4:0)|(t.metaKey?8:0);switch(t.keyCode){case 0:"UIKeyInputUpArrow"===t.key?o.key=e?i.C0.ESC+"OA":i.C0.ESC+"[A":"UIKeyInputLeftArrow"===t.key?o.key=e?i.C0.ESC+"OD":i.C0.ESC+"[D":"UIKeyInputRightArrow"===t.key?o.key=e?i.C0.ESC+"OC":i.C0.ESC+"[C":"UIKeyInputDownArrow"===t.key&&(o.key=e?i.C0.ESC+"OB":i.C0.ESC+"[B");break;case 8:if(t.shiftKey){o.key=i.C0.BS;break}if(t.altKey){o.key=i.C0.ESC+i.C0.DEL;break}o.key=i.C0.DEL;break;case 9:if(t.shiftKey){o.key=i.C0.ESC+"[Z";break}o.key=i.C0.HT,o.cancel=!0;break;case 13:o.key=i.C0.CR,o.cancel=!0;break;case 27:o.key=i.C0.ESC,o.cancel=!0;break;case 37:a?(o.key=i.C0.ESC+"[1;"+(a+1)+"D",o.key===i.C0.ESC+"[1;3D"&&(o.key=r?i.C0.ESC+"b":i.C0.ESC+"[1;5D")):o.key=e?i.C0.ESC+"OD":i.C0.ESC+"[D";break;case 39:a?(o.key=i.C0.ESC+"[1;"+(a+1)+"C",o.key===i.C0.ESC+"[1;3C"&&(o.key=r?i.C0.ESC+"f":i.C0.ESC+"[1;5C")):o.key=e?i.C0.ESC+"OC":i.C0.ESC+"[C";break;case 38:a?(o.key=i.C0.ESC+"[1;"+(a+1)+"A",o.key===i.C0.ESC+"[1;3A"&&(o.key=i.C0.ESC+"[1;5A")):o.key=e?i.C0.ESC+"OA":i.C0.ESC+"[A";break;case 40:a?(o.key=i.C0.ESC+"[1;"+(a+1)+"B",o.key===i.C0.ESC+"[1;3B"&&(o.key=i.C0.ESC+"[1;5B")):o.key=e?i.C0.ESC+"OB":i.C0.ESC+"[B";break;case 45:t.shiftKey||t.ctrlKey||(o.key=i.C0.ESC+"[2~");break;case 46:o.key=a?i.C0.ESC+"[3;"+(a+1)+"~":i.C0.ESC+"[3~";break;case 36:o.key=a?i.C0.ESC+"[1;"+(a+1)+"H":e?i.C0.ESC+"OH":i.C0.ESC+"[H";break;case 35:o.key=a?i.C0.ESC+"[1;"+(a+1)+"F":e?i.C0.ESC+"OF":i.C0.ESC+"[F";break;case 33:t.shiftKey?o.type=2:o.key=i.C0.ESC+"[5~";break;case 34:t.shiftKey?o.type=3:o.key=i.C0.ESC+"[6~";break;case 112:o.key=a?i.C0.ESC+"[1;"+(a+1)+"P":i.C0.ESC+"OP";break;case 113:o.key=a?i.C0.ESC+"[1;"+(a+1)+"Q":i.C0.ESC+"OQ";break;case 114:o.key=a?i.C0.ESC+"[1;"+(a+1)+"R":i.C0.ESC+"OR";break;case 115:o.key=a?i.C0.ESC+"[1;"+(a+1)+"S":i.C0.ESC+"OS";break;case 116:o.key=a?i.C0.ESC+"[15;"+(a+1)+"~":i.C0.ESC+"[15~";break;case 117:o.key=a?i.C0.ESC+"[17;"+(a+1)+"~":i.C0.ESC+"[17~";break;case 118:o.key=a?i.C0.ESC+"[18;"+(a+1)+"~":i.C0.ESC+"[18~";break;case 119:o.key=a?i.C0.ESC+"[19;"+(a+1)+"~":i.C0.ESC+"[19~";break;case 120:o.key=a?i.C0.ESC+"[20;"+(a+1)+"~":i.C0.ESC+"[20~";break;case 121:o.key=a?i.C0.ESC+"[21;"+(a+1)+"~":i.C0.ESC+"[21~";break;case 122:o.key=a?i.C0.ESC+"[23;"+(a+1)+"~":i.C0.ESC+"[23~";break;case 123:o.key=a?i.C0.ESC+"[24;"+(a+1)+"~":i.C0.ESC+"[24~";break;default:if(!t.ctrlKey||t.shiftKey||t.altKey||t.metaKey)if(r&&!s||!t.altKey||t.metaKey)r&&!t.altKey&&!t.ctrlKey&&t.metaKey&&65===t.keyCode&&(o.type=1);else{var l=n[t.keyCode],c=l&&l[t.shiftKey?1:0];if(c)o.key=i.C0.ESC+c;else if(t.keyCode>=65&&t.keyCode<=90){var h=t.ctrlKey?t.keyCode-64:t.keyCode+32;o.key=i.C0.ESC+String.fromCharCode(h)}}else t.keyCode>=65&&t.keyCode<=90?o.key=String.fromCharCode(t.keyCode-64):32===t.keyCode?o.key=String.fromCharCode(0):t.keyCode>=51&&t.keyCode<=55?o.key=String.fromCharCode(t.keyCode-51+27):56===t.keyCode?o.key=String.fromCharCode(127):219===t.keyCode?o.key=String.fromCharCode(27):220===t.keyCode?o.key=String.fromCharCode(28):221===t.keyCode&&(o.key=String.fromCharCode(29))}return o}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=r(26);t.exports=i.Terminal},function(t,e){},,,,,function(t,e){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9CdWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9yZW5kZXJlci9hdGxhcy9UeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL2NvbW1vbi9FdmVudEVtaXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9jb21tb24vTGlmZWN5Y2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb21wb25lbnQtZW1pdHRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9saWIvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3JlbmRlcmVyL2F0bGFzL0NoYXJBdGxhc1V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIvY29yZS9QbGF0Zm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhcnNlcXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudC1pbmhlcml0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3VpL0xpZmVjeWNsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL2NvbW1vbi9kYXRhL0VzY2FwZVNlcXVlbmNlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3JlbmRlcmVyL0Jhc2VSZW5kZXJMYXllci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3JlbmRlcmVyL0NvbG9yTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi94bWxodHRwcmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIvcmVuZGVyZXIvYXRsYXMvQmFzZUNoYXJBdGxhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3VpL1JlbmRlckRlYm91bmNlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL1N0cmluZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9wdWJsaWMvVGVybWluYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhcnNldXJpL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL2lzLWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi9tYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3BvbGxpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhcy1iaW5hcnkyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95ZWFzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5kZXhvZi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9saWIvc29ja2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2xpYi9vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29tcG9uZW50LWJpbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9DaGFyV2lkdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9yZW5kZXJlci9hdGxhcy9DaGFyQXRsYXNDYWNoZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3JlbmRlcmVyL2F0bGFzL0NoYXJBdGxhc0dlbmVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3VpL1NjcmVlbkRwck1vbml0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi91aS9Nb3VzZVpvbmVNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIvdXRpbHMvTW91c2VIZWxwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIvYWRkb25zL2ZpdC9maXQuanMiLCJ3ZWJwYWNrOi8vLy4vY2xpZW50L3NyYy9jbGllbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvbGliL3VybC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2RlYnVnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2RlYnVnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tcGFyc2VyL2JpbmFyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWZmZXIvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi9zb2NrZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hhcy1jb3JzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3BvbGxpbmcteGhyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi9rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcnJheWJ1ZmZlci5zbGljZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWZ0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1wYXJzZXIvbGliL3V0ZjguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1hcnJheWJ1ZmZlci9saWIvYmFzZTY0LWFycmF5YnVmZmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ibG9iL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvZGVidWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvcG9sbGluZy1qc29ucC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0cy93ZWJzb2NrZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RvLWFycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYWNrbzIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9UZXJtaW5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL0J1ZmZlclNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL2NvbW1vbi9DaXJjdWxhckxpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9CdWZmZXJMaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIvQ29tcG9zaXRpb25IZWxwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9WaWV3cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3VpL0NsaXBib2FyZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL0lucHV0SGFuZGxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL2NvcmUvZGF0YS9DaGFyc2V0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL2NvbW1vbi9UeXBlZEFycmF5VXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9Fc2NhcGVTZXF1ZW5jZVBhcnNlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3JlbmRlcmVyL1JlbmRlcmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIvcmVuZGVyZXIvVGV4dFJlbmRlckxheWVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIvcmVuZGVyZXIvR3JpZENhY2hlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIvcmVuZGVyZXIvYXRsYXMvRHluYW1pY0NoYXJBdGxhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3JlbmRlcmVyL2F0bGFzL0xSVU1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3JlbmRlcmVyL2F0bGFzL05vbmVDaGFyQXRsYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9yZW5kZXJlci9hdGxhcy9TdGF0aWNDaGFyQXRsYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9yZW5kZXJlci9TZWxlY3Rpb25SZW5kZXJMYXllci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3JlbmRlcmVyL0N1cnNvclJlbmRlckxheWVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIvcmVuZGVyZXIvTGlua1JlbmRlckxheWVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIvcmVuZGVyZXIvQ2hhcmFjdGVySm9pbmVyUmVnaXN0cnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9MaW5raWZpZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9TZWxlY3Rpb25NYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIvU2VsZWN0aW9uTW9kZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9oYW5kbGVycy9BbHRDbGlja0hhbmRsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi91aS9DaGFyTWVhc3VyZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3V0aWxzL0Nsb25lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIvU291bmRNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIvQWNjZXNzaWJpbGl0eU1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9yZW5kZXJlci9kb20vRG9tUmVuZGVyZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3h0ZXJtL2xpYi9yZW5kZXJlci9kb20vRG9tUmVuZGVyZXJSb3dGYWN0b3J5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy94dGVybS9saWIvY29yZS9pbnB1dC9LZXlib2FyZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveHRlcm0vbGliL3h0ZXJtLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZXh0ZW5kU3RhdGljcyIsIl9fZXh0ZW5kcyIsInRoaXMiLCJiIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsIl9fIiwiY29uc3RydWN0b3IiLCJDaXJjdWxhckxpc3RfMSIsIkV2ZW50RW1pdHRlcl8xIiwiQnVmZmVyTGluZV8xIiwiVHlwZXNfMSIsIkRFRkFVTFRfQVRUUiIsIkRFRkFVTFRfQ09MT1IiLCJDSEFSX0RBVEFfQVRUUl9JTkRFWCIsIkNIQVJfREFUQV9DSEFSX0lOREVYIiwiQ0hBUl9EQVRBX1dJRFRIX0lOREVYIiwiQ0hBUl9EQVRBX0NPREVfSU5ERVgiLCJNQVhfQlVGRkVSX1NJWkUiLCJOVUxMX0NFTExfQ0hBUiIsIk5VTExfQ0VMTF9XSURUSCIsIk5VTExfQ0VMTF9DT0RFIiwiQnVmZmVyIiwiX3Rlcm1pbmFsIiwiX2hhc1Njcm9sbGJhY2siLCJtYXJrZXJzIiwiY2xlYXIiLCJzZXRCdWZmZXJMaW5lRmFjdG9yeSIsInR5cGUiLCJfYnVmZmVyTGluZUNvbnN0cnVjdG9yIiwiQnVmZmVyTGluZUpTQXJyYXkiLCJfcmVjcmVhdGVMaW5lcyIsIkJ1ZmZlckxpbmUiLCJsaW5lcyIsImxlbmd0aCIsIm9sZExpbmUiLCJuZXdMaW5lIiwiaiIsInNldCIsImdldEJsYW5rTGluZSIsImF0dHIiLCJpc1dyYXBwZWQiLCJmaWxsQ2hhckRhdGEiLCJjb2xzIiwibWF4TGVuZ3RoIiwicm93cyIsImNvbmZpZ3VyYWJsZSIsInJlbGF0aXZlWSIsInliYXNlIiwieSIsInlkaXNwIiwiX2dldENvcnJlY3RCdWZmZXJMZW5ndGgiLCJjb3JyZWN0QnVmZmVyTGVuZ3RoIiwib3B0aW9ucyIsInNjcm9sbGJhY2siLCJmaWxsVmlld3BvcnRSb3dzIiwiZmlsbEF0dHIiLCJ1bmRlZmluZWQiLCJwdXNoIiwiZXhwZXJpbWVudGFsQnVmZmVyTGluZUltcGwiLCJ4IiwiQ2lyY3VsYXJMaXN0Iiwic2Nyb2xsVG9wIiwic2Nyb2xsQm90dG9tIiwic2V0dXBUYWJTdG9wcyIsInJlc2l6ZSIsIm5ld0NvbHMiLCJuZXdSb3dzIiwibmV3TWF4TGVuZ3RoIiwiY2giLCJhZGRUb1kiLCJwb3AiLCJhbW91bnRUb1RyaW0iLCJ0cmltU3RhcnQiLCJNYXRoIiwibWF4IiwibWluIiwic2F2ZWRZIiwic2F2ZWRYIiwic3RyaW5nSW5kZXhUb0J1ZmZlckluZGV4IiwibGluZUluZGV4Iiwic3RyaW5nSW5kZXgiLCJsaW5lIiwidHJhbnNsYXRlQnVmZmVyTGluZVRvU3RyaW5nIiwidHJpbVJpZ2h0Iiwic3RhcnRDb2wiLCJlbmRDb2wiLCJsaW5lU3RyaW5nIiwic3RhcnRJbmRleCIsImVuZEluZGV4IiwiY2hhciIsInJpZ2h0V2hpdGVzcGFjZUluZGV4Iiwic2VhcmNoIiwic3Vic3RyaW5nIiwiZ2V0V3JhcHBlZFJhbmdlRm9yTGluZSIsImZpcnN0IiwibGFzdCIsInRhYnMiLCJwcmV2U3RvcCIsInRhYlN0b3BXaWR0aCIsIm5leHRTdG9wIiwiYWRkTWFya2VyIiwiX3RoaXMiLCJtYXJrZXIiLCJNYXJrZXIiLCJyZWdpc3RlciIsImFkZERpc3Bvc2FibGVMaXN0ZW5lciIsImFtb3VudCIsImRpc3Bvc2UiLCJfcmVtb3ZlTWFya2VyIiwic3BsaWNlIiwiaW5kZXhPZiIsIml0ZXJhdG9yIiwic3RhcnRPdmVyc2NhbiIsImVuZE92ZXJzY2FuIiwiQnVmZmVyU3RyaW5nSXRlcmF0b3IiLCJfc3VwZXIiLCJfaWQiLCJfbmV4dElkIiwiaXNEaXNwb3NlZCIsImVtaXQiLCJFdmVudEVtaXR0ZXIiLCJfYnVmZmVyIiwiX3RyaW1SaWdodCIsIl9zdGFydEluZGV4IiwiX2VuZEluZGV4IiwiX3N0YXJ0T3ZlcnNjYW4iLCJfZW5kT3ZlcnNjYW4iLCJfY3VycmVudCIsImhhc05leHQiLCJuZXh0IiwicmFuZ2UiLCJyZXN1bHQiLCJjb250ZW50IiwiSU5WRVJURURfREVGQVVMVF9DT0xPUiIsIkRJTV9PUEFDSVRZIiwiQ0hBUl9BVExBU19DRUxMX1NQQUNJTkciLCJfZXZlbnRzIiwib24iLCJsaXN0ZW5lciIsImhhbmRsZXIiLCJkaXNwb3NlZCIsIm9mZiIsIm9iaiIsInJlbW92ZUFsbExpc3RlbmVycyIsImFyZ3MiLCJfaSIsImFyZ3VtZW50cyIsImFwcGx5IiwibGlzdGVuZXJzIiwiRGlzcG9zYWJsZSIsIl9kaXNwb3NhYmxlcyIsIl9pc0Rpc3Bvc2VkIiwiZm9yRWFjaCIsInVucmVnaXN0ZXIiLCJpbmRleCIsIkVtaXR0ZXIiLCJtaXhpbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsImZuIiwiX2NhbGxiYWNrcyIsIm9uY2UiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjYiIsImNhbGxiYWNrcyIsInNsaWNlIiwibGVuIiwiaGFzTGlzdGVuZXJzIiwiYmFzZTY0ZW5jb2RlciIsImtleXMiLCJoYXNCaW5hcnkiLCJzbGljZUJ1ZmZlciIsImFmdGVyIiwidXRmOCIsIkFycmF5QnVmZmVyIiwiaXNBbmRyb2lkIiwibmF2aWdhdG9yIiwidGVzdCIsInVzZXJBZ2VudCIsImlzUGhhbnRvbUpTIiwiZG9udFNlbmRCbG9icyIsInByb3RvY29sIiwicGFja2V0cyIsIm9wZW4iLCJjbG9zZSIsInBpbmciLCJwb25nIiwibWVzc2FnZSIsInVwZ3JhZGUiLCJub29wIiwicGFja2V0c2xpc3QiLCJlcnIiLCJkYXRhIiwiQmxvYiIsIm1hcCIsImFyeSIsImVhY2giLCJkb25lIiwiZWFjaFdpdGhJbmRleCIsImVsIiwiZXJyb3IiLCJtc2ciLCJlbmNvZGVQYWNrZXQiLCJwYWNrZXQiLCJzdXBwb3J0c0JpbmFyeSIsInV0ZjhlbmNvZGUiLCJjYWxsYmFjayIsImJ1ZmZlciIsImVuY29kZUJhc2U2NFBhY2tldCIsImNvbnRlbnRBcnJheSIsIlVpbnQ4QXJyYXkiLCJyZXN1bHRCdWZmZXIiLCJieXRlTGVuZ3RoIiwiZW5jb2RlQXJyYXlCdWZmZXIiLCJmciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJyZWFkQXNBcnJheUJ1ZmZlciIsImVuY29kZUJsb2JBc0FycmF5QnVmZmVyIiwiYmxvYiIsImVuY29kZUJsb2IiLCJiYXNlNjQiLCJlbmNvZGVCYXNlNjRPYmplY3QiLCJlbmNvZGVkIiwiZW5jb2RlIiwiU3RyaW5nIiwic3RyaWN0IiwiYjY0ZGF0YSIsImI2NCIsInNwbGl0IiwicmVhZEFzRGF0YVVSTCIsImZyb21DaGFyQ29kZSIsImUiLCJ0eXBlZCIsImJhc2ljIiwiYnRvYSIsImRlY29kZVBhY2tldCIsImJpbmFyeVR5cGUiLCJ1dGY4ZGVjb2RlIiwiY2hhckF0IiwiZGVjb2RlQmFzZTY0UGFja2V0Iiwic3Vic3RyIiwiZGVjb2RlIiwidHJ5RGVjb2RlIiwiTnVtYmVyIiwicmVzdCIsImVuY29kZVBheWxvYWQiLCJpc0JpbmFyeSIsImVuY29kZVBheWxvYWRBc0Jsb2IiLCJlbmNvZGVQYXlsb2FkQXNBcnJheUJ1ZmZlciIsImRvbmVDYWxsYmFjayIsInNldExlbmd0aEhlYWRlciIsInJlc3VsdHMiLCJqb2luIiwiZGVjb2RlUGF5bG9hZCIsImRlY29kZVBheWxvYWRBc0JpbmFyeSIsImNociIsImVuY29kZWRQYWNrZXRzIiwidG90YWxMZW5ndGgiLCJyZWR1Y2UiLCJhY2MiLCJ0b1N0cmluZyIsInJlc3VsdEFycmF5IiwiYnVmZmVySW5kZXgiLCJpc1N0cmluZyIsImFiIiwidmlldyIsImNoYXJDb2RlQXQiLCJsZW5TdHIiLCJwYXJzZUludCIsImJpbmFyeUlkZW50aWZpZXIiLCJzaXplIiwibGVuZ3RoQXJ5IiwiYnVmZmVyVGFpbCIsImJ1ZmZlcnMiLCJ0YWlsQXJyYXkiLCJtc2dMZW5ndGgiLCJ0b3RhbCIsImdlbmVyYXRlQ29uZmlnIiwic2NhbGVkQ2hhcldpZHRoIiwic2NhbGVkQ2hhckhlaWdodCIsInRlcm1pbmFsIiwiY29sb3JzIiwiY2xvbmVkQ29sb3JzIiwiZm9yZWdyb3VuZCIsImJhY2tncm91bmQiLCJjdXJzb3IiLCJjdXJzb3JBY2NlbnQiLCJzZWxlY3Rpb24iLCJhbnNpIiwiZXhwZXJpbWVudGFsQ2hhckF0bGFzIiwiZGV2aWNlUGl4ZWxSYXRpbyIsIndpbmRvdyIsImZvbnRGYW1pbHkiLCJmb250U2l6ZSIsImZvbnRXZWlnaHQiLCJmb250V2VpZ2h0Qm9sZCIsImFsbG93VHJhbnNwYXJlbmN5IiwiY29uZmlnRXF1YWxzIiwiYSIsInJnYmEiLCJpczI1NkNvbG9yIiwiY29sb3JDb2RlIiwiaXNOb2RlIiwicGxhdGZvcm0iLCJjb250YWlucyIsImFyciIsImlzRmlyZWZveCIsImlzU2FmYXJpIiwiaXNNU0lFIiwiaXNNYWMiLCJpc0lwYWQiLCJpc0lwaG9uZSIsImlzTVNXaW5kb3dzIiwiaXNMaW51eCIsInByb2Nlc3MiLCJsb2FkIiwic3RvcmFnZSIsImRlYnVnIiwiZW52IiwiREVCVUciLCJsb2ciLCJjb25zb2xlIiwiRnVuY3Rpb24iLCJmb3JtYXRBcmdzIiwidXNlQ29sb3JzIiwibmFtZXNwYWNlIiwiaHVtYW5pemUiLCJkaWZmIiwiY29sb3IiLCJsYXN0QyIsInJlcGxhY2UiLCJtYXRjaCIsInNhdmUiLCJuYW1lc3BhY2VzIiwicmVtb3ZlSXRlbSIsInRvTG93ZXJDYXNlIiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJzdHlsZSIsIldlYmtpdEFwcGVhcmFuY2UiLCJmaXJlYnVnIiwiZXhjZXB0aW9uIiwidGFibGUiLCJSZWdFeHAiLCIkMSIsImNocm9tZSIsImxvY2FsIiwibG9jYWxTdG9yYWdlIiwibG9jYWxzdG9yYWdlIiwiZm9ybWF0dGVycyIsInYiLCJKU09OIiwic3RyaW5naWZ5IiwiZW5hYmxlIiwic3RyIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicXMiLCJxcnkiLCJwYWlycyIsInBhaXIiLCJkZWNvZGVVUklDb21wb25lbnQiLCJhZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIiLCJub2RlIiwidXNlQ2FwdHVyZSIsIkMwIiwiTlVMIiwiU09IIiwiU1RYIiwiRVRYIiwiRU9UIiwiRU5RIiwiQUNLIiwiQkVMIiwiQlMiLCJIVCIsIkxGIiwiVlQiLCJGRiIsIkNSIiwiU08iLCJTSSIsIkRMRSIsIkRDMSIsIkRDMiIsIkRDMyIsIkRDNCIsIk5BSyIsIlNZTiIsIkVUQiIsIkNBTiIsIkVNIiwiU1VCIiwiRVNDIiwiRlMiLCJHUyIsIlJTIiwiVVMiLCJTUCIsIkRFTCIsIkMxIiwiUEFEIiwiSE9QIiwiQlBIIiwiTkJIIiwiSU5EIiwiTkVMIiwiU1NBIiwiRVNBIiwiSFRTIiwiSFRKIiwiVlRTIiwiUExEIiwiUExVIiwiUkkiLCJTUzIiLCJTUzMiLCJEQ1MiLCJQVTEiLCJQVTIiLCJTVFMiLCJDQ0giLCJNVyIsIlNQQSIsIkVQQSIsIlNPUyIsIlNHQ0kiLCJTQ0kiLCJDU0kiLCJTVCIsIk9TQyIsIlBNIiwiQVBDIiwiQ2hhckF0bGFzQ2FjaGVfMSIsIkJ1ZmZlcl8xIiwiQ2hhckF0bGFzVXRpbHNfMSIsIkJhc2VSZW5kZXJMYXllciIsIl9jb250YWluZXIiLCJpZCIsInpJbmRleCIsIl9hbHBoYSIsIl9jb2xvcnMiLCJfc2NhbGVkQ2hhcldpZHRoIiwiX3NjYWxlZENoYXJIZWlnaHQiLCJfc2NhbGVkQ2VsbFdpZHRoIiwiX3NjYWxlZENlbGxIZWlnaHQiLCJfc2NhbGVkQ2hhckxlZnQiLCJfc2NhbGVkQ2hhclRvcCIsIl9jdXJyZW50R2x5cGhJZGVudGlmaWVyIiwiY2hhcnMiLCJjb2RlIiwiYmciLCJmZyIsImJvbGQiLCJkaW0iLCJpdGFsaWMiLCJfY2FudmFzIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsIl9pbml0Q2FudmFzIiwiYXBwZW5kQ2hpbGQiLCJyZW1vdmVDaGlsZCIsIl9jaGFyQXRsYXMiLCJfY3R4IiwiZ2V0Q29udGV4dCIsImFscGhhIiwiY2xlYXJBbGwiLCJvbk9wdGlvbnNDaGFuZ2VkIiwib25CbHVyIiwib25Gb2N1cyIsIm9uQ3Vyc29yTW92ZSIsIm9uR3JpZENoYW5nZWQiLCJzdGFydFJvdyIsImVuZFJvdyIsIm9uU2VsZWN0aW9uQ2hhbmdlZCIsInN0YXJ0IiwiZW5kIiwiY29sdW1uU2VsZWN0TW9kZSIsIm9uVGhlbWVDaGFuZ2VkIiwiY29sb3JTZXQiLCJfcmVmcmVzaENoYXJBdGxhcyIsInNldFRyYW5zcGFyZW5jeSIsIm9sZENhbnZhcyIsImNsb25lTm9kZSIsInJlcGxhY2VDaGlsZCIsImFjcXVpcmVDaGFyQXRsYXMiLCJ3YXJtVXAiLCJzY2FsZWRDZWxsV2lkdGgiLCJzY2FsZWRDZWxsSGVpZ2h0Iiwic2NhbGVkQ2hhckxlZnQiLCJzY2FsZWRDaGFyVG9wIiwid2lkdGgiLCJzY2FsZWRDYW52YXNXaWR0aCIsImhlaWdodCIsInNjYWxlZENhbnZhc0hlaWdodCIsImNhbnZhc1dpZHRoIiwiY2FudmFzSGVpZ2h0IiwiZmlsbENlbGxzIiwiZmlsbFJlY3QiLCJmaWxsQm90dG9tTGluZUF0Q2VsbHMiLCJmaWxsTGVmdExpbmVBdENlbGwiLCJzdHJva2VSZWN0QXRDZWxsIiwibGluZVdpZHRoIiwic3Ryb2tlUmVjdCIsImNsZWFyUmVjdCIsImZpbGxTdHlsZSIsImNzcyIsImNsZWFyQ2VsbHMiLCJmaWxsQ2hhclRydWVDb2xvciIsImNoYXJEYXRhIiwiZm9udCIsIl9nZXRGb250IiwidGV4dEJhc2VsaW5lIiwiX2NsaXBSb3ciLCJmaWxsVGV4dCIsImRyYXdDaGFycyIsImRyYXdCb2xkVGV4dEluQnJpZ2h0Q29sb3JzIiwiZW5hYmxlQm9sZCIsImRyYXciLCJfZHJhd1VuY2FjaGVkQ2hhcnMiLCJnbG9iYWxBbHBoYSIsInJlc3RvcmUiLCJiZWdpblBhdGgiLCJyZWN0IiwiY2xpcCIsImlzQm9sZCIsImlzSXRhbGljIiwiREVGQVVMVF9GT1JFR1JPVU5EIiwiZnJvbUhleCIsIkRFRkFVTFRfQkFDS0dST1VORCIsIkRFRkFVTFRfQ1VSU09SIiwiREVGQVVMVF9DVVJTT1JfQUNDRU5UIiwiREVGQVVMVF9TRUxFQ1RJT04iLCJ0b1BhZGRlZEhleCIsIkRFRkFVTFRfQU5TSV9DT0xPUlMiLCJnIiwiQ29sb3JNYW5hZ2VyIiwiY2FudmFzIiwiZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIiwiX2xpdG11c0NvbG9yIiwiY3JlYXRlTGluZWFyR3JhZGllbnQiLCJzZXRUaGVtZSIsInRoZW1lIiwiX3BhcnNlQ29sb3IiLCJibGFjayIsInJlZCIsImdyZWVuIiwieWVsbG93IiwiYmx1ZSIsIm1hZ2VudGEiLCJjeWFuIiwid2hpdGUiLCJicmlnaHRCbGFjayIsImJyaWdodFJlZCIsImJyaWdodEdyZWVuIiwiYnJpZ2h0WWVsbG93IiwiYnJpZ2h0Qmx1ZSIsImJyaWdodE1hZ2VudGEiLCJicmlnaHRDeWFuIiwiYnJpZ2h0V2hpdGUiLCJmYWxsYmFjayIsIndhcm4iLCJnZXRJbWFnZURhdGEiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsIkVycm9yIiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY3VycmVudFF1ZXVlIiwicXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJjb25jYXQiLCJkcmFpblF1ZXVlIiwidGltZW91dCIsInJ1biIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJhcnJheSIsIm5leHRUaWNrIiwidGl0bGUiLCJicm93c2VyIiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsImFkZExpc3RlbmVyIiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwiaCIsInBsdXJhbCIsIm1zIiwiZmxvb3IiLCJjZWlsIiwidmFsIiwiZXhlYyIsInBhcnNlRmxvYXQiLCJwYXJzZSIsImlzTmFOIiwibG9uZyIsInJvdW5kIiwiZm10U2hvcnQiLCJiaW5hcnkiLCJpc0FycmF5IiwiaXNCdWYiLCJFbmNvZGVyIiwidHlwZXMiLCJDT05ORUNUIiwiRElTQ09OTkVDVCIsIkVWRU5UIiwiRVJST1IiLCJCSU5BUllfRVZFTlQiLCJCSU5BUllfQUNLIiwiRGVjb2RlciIsIkVSUk9SX1BBQ0tFVCIsImVuY29kZUFzU3RyaW5nIiwiYXR0YWNobWVudHMiLCJuc3AiLCJwYXlsb2FkIiwidHJ5U3RyaW5naWZ5IiwicmVjb25zdHJ1Y3RvciIsIkJpbmFyeVJlY29uc3RydWN0b3IiLCJyZWNvblBhY2siLCJyZW1vdmVCbG9icyIsImJsb2JsZXNzRGF0YSIsImRlY29uc3RydWN0aW9uIiwiZGVjb25zdHJ1Y3RQYWNrZXQiLCJwYWNrIiwidW5zaGlmdCIsImVuY29kZUFzQmluYXJ5IiwiYnVmIiwidHJ5UGFyc2UiLCJpc1BheWxvYWRWYWxpZCIsImRlY29kZVN0cmluZyIsInRha2VCaW5hcnlEYXRhIiwiZGVzdHJveSIsImZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24iLCJiaW5EYXRhIiwicmVjb25zdHJ1Y3RQYWNrZXQiLCJnbG9iYWwiLCJpZWVlNzU0Iiwia01heExlbmd0aCIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJjcmVhdGVCdWZmZXIiLCJ0aGF0IiwiUmFuZ2VFcnJvciIsImFyZyIsImVuY29kaW5nT3JPZmZzZXQiLCJhbGxvY1Vuc2FmZSIsImZyb20iLCJUeXBlRXJyb3IiLCJieXRlT2Zmc2V0IiwiZnJvbUFycmF5TGlrZSIsImZyb21BcnJheUJ1ZmZlciIsInN0cmluZyIsImVuY29kaW5nIiwiaXNFbmNvZGluZyIsImFjdHVhbCIsIndyaXRlIiwiZnJvbVN0cmluZyIsImlzQnVmZmVyIiwiY2hlY2tlZCIsImNvcHkiLCJmcm9tT2JqZWN0IiwiYXNzZXJ0U2l6ZSIsImlzVmlldyIsImxvd2VyZWRDYXNlIiwidXRmOFRvQnl0ZXMiLCJiYXNlNjRUb0J5dGVzIiwic3dhcCIsImJpZGlyZWN0aW9uYWxJbmRleE9mIiwiYXJyYXlJbmRleE9mIiwibGFzdEluZGV4T2YiLCJpbmRleFNpemUiLCJhcnJMZW5ndGgiLCJ2YWxMZW5ndGgiLCJyZWFkIiwicmVhZFVJbnQxNkJFIiwiZm91bmRJbmRleCIsImZvdW5kIiwiaGV4V3JpdGUiLCJvZmZzZXQiLCJyZW1haW5pbmciLCJzdHJMZW4iLCJwYXJzZWQiLCJ1dGY4V3JpdGUiLCJibGl0QnVmZmVyIiwiYXNjaWlXcml0ZSIsImJ5dGVBcnJheSIsImFzY2lpVG9CeXRlcyIsImxhdGluMVdyaXRlIiwiYmFzZTY0V3JpdGUiLCJ1Y3MyV3JpdGUiLCJ1bml0cyIsImhpIiwibG8iLCJ1dGYxNmxlVG9CeXRlcyIsImJhc2U2NFNsaWNlIiwiZnJvbUJ5dGVBcnJheSIsInV0ZjhTbGljZSIsInJlcyIsInNlY29uZEJ5dGUiLCJ0aGlyZEJ5dGUiLCJmb3VydGhCeXRlIiwidGVtcENvZGVQb2ludCIsImZpcnN0Qnl0ZSIsImNvZGVQb2ludCIsImJ5dGVzUGVyU2VxdWVuY2UiLCJjb2RlUG9pbnRzIiwiTUFYX0FSR1VNRU5UU19MRU5HVEgiLCJkZWNvZGVDb2RlUG9pbnRzQXJyYXkiLCJTbG93QnVmZmVyIiwiYWxsb2MiLCJJTlNQRUNUX01BWF9CWVRFUyIsImZvbyIsInN1YmFycmF5IiwidHlwZWRBcnJheVN1cHBvcnQiLCJwb29sU2l6ZSIsIl9hdWdtZW50Iiwic3BlY2llcyIsImZpbGwiLCJhbGxvY1Vuc2FmZVNsb3ciLCJfaXNCdWZmZXIiLCJjb21wYXJlIiwibGlzdCIsInBvcyIsInN3YXAxNiIsInN3YXAzMiIsInN3YXA2NCIsImhleFNsaWNlIiwiYXNjaWlTbGljZSIsImxhdGluMVNsaWNlIiwidXRmMTZsZVNsaWNlIiwiZXF1YWxzIiwiaW5zcGVjdCIsInRhcmdldCIsInRoaXNTdGFydCIsInRoaXNFbmQiLCJ0aGlzQ29weSIsInRhcmdldENvcHkiLCJpbmNsdWRlcyIsImlzRmluaXRlIiwidG9KU09OIiwiX2FyciIsInJldCIsIm91dCIsInRvSGV4IiwiYnl0ZXMiLCJjaGVja09mZnNldCIsImV4dCIsImNoZWNrSW50Iiwib2JqZWN0V3JpdGVVSW50MTYiLCJsaXR0bGVFbmRpYW4iLCJvYmplY3RXcml0ZVVJbnQzMiIsImNoZWNrSUVFRTc1NCIsIndyaXRlRmxvYXQiLCJub0Fzc2VydCIsIndyaXRlRG91YmxlIiwibmV3QnVmIiwic2xpY2VMZW4iLCJyZWFkVUludExFIiwibXVsIiwicmVhZFVJbnRCRSIsInJlYWRVSW50OCIsInJlYWRVSW50MTZMRSIsInJlYWRVSW50MzJMRSIsInJlYWRVSW50MzJCRSIsInJlYWRJbnRMRSIsInBvdyIsInJlYWRJbnRCRSIsInJlYWRJbnQ4IiwicmVhZEludDE2TEUiLCJyZWFkSW50MTZCRSIsInJlYWRJbnQzMkxFIiwicmVhZEludDMyQkUiLCJyZWFkRmxvYXRMRSIsInJlYWRGbG9hdEJFIiwicmVhZERvdWJsZUxFIiwicmVhZERvdWJsZUJFIiwid3JpdGVVSW50TEUiLCJ3cml0ZVVJbnRCRSIsIndyaXRlVUludDgiLCJ3cml0ZVVJbnQxNkxFIiwid3JpdGVVSW50MTZCRSIsIndyaXRlVUludDMyTEUiLCJ3cml0ZVVJbnQzMkJFIiwid3JpdGVJbnRMRSIsImxpbWl0Iiwic3ViIiwid3JpdGVJbnRCRSIsIndyaXRlSW50OCIsIndyaXRlSW50MTZMRSIsIndyaXRlSW50MTZCRSIsIndyaXRlSW50MzJMRSIsIndyaXRlSW50MzJCRSIsIndyaXRlRmxvYXRMRSIsIndyaXRlRmxvYXRCRSIsIndyaXRlRG91YmxlTEUiLCJ3cml0ZURvdWJsZUJFIiwidGFyZ2V0U3RhcnQiLCJJTlZBTElEX0JBU0U2NF9SRSIsIkluZmluaXR5IiwibGVhZFN1cnJvZ2F0ZSIsInRvQnl0ZUFycmF5IiwidHJpbSIsInN0cmluZ3RyaW0iLCJiYXNlNjRjbGVhbiIsInNyYyIsImRzdCIsImhhc0NPUlMiLCJvcHRzIiwieGRvbWFpbiIsInhzY2hlbWUiLCJlbmFibGVzWERSIiwiWE1MSHR0cFJlcXVlc3QiLCJYRG9tYWluUmVxdWVzdCIsInNlbGYiLCJwYXJzZXIiLCJUcmFuc3BvcnQiLCJwYXRoIiwiaG9zdG5hbWUiLCJwb3J0Iiwic2VjdXJlIiwicXVlcnkiLCJ0aW1lc3RhbXBQYXJhbSIsInRpbWVzdGFtcFJlcXVlc3RzIiwicmVhZHlTdGF0ZSIsImFnZW50Iiwic29ja2V0IiwicGZ4IiwicGFzc3BocmFzZSIsImNlcnQiLCJjYSIsImNpcGhlcnMiLCJyZWplY3RVbmF1dGhvcml6ZWQiLCJmb3JjZU5vZGUiLCJpc1JlYWN0TmF0aXZlIiwiZXh0cmFIZWFkZXJzIiwibG9jYWxBZGRyZXNzIiwib25FcnJvciIsImRlc2MiLCJkZXNjcmlwdGlvbiIsImRvT3BlbiIsImRvQ2xvc2UiLCJvbkNsb3NlIiwic2VuZCIsIm9uT3BlbiIsIndyaXRhYmxlIiwib25EYXRhIiwib25QYWNrZXQiLCJCYXNlQ2hhckF0bGFzIiwiX2RpZFdhcm1VcCIsIl9kb1dhcm1VcCIsImJlZ2luRnJhbWUiLCJkZWZhdWx0IiwiUmVuZGVyRGVib3VuY2VyIiwiX2NhbGxiYWNrIiwiX2FuaW1hdGlvbkZyYW1lIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZWZyZXNoIiwicm93U3RhcnQiLCJyb3dFbmQiLCJpc1Jvd1N0YXJ0U2V0IiwiX3Jvd1N0YXJ0IiwiaXNSb3dFbmRTZXQiLCJfcm93RW5kIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiX2lubmVyUmVmcmVzaCIsImJsYW5rTGluZSIsInByb21wdExhYmVsIiwidG9vTXVjaE91dHB1dCIsIlRlcm1pbmFsXzEiLCJTdHJpbmdzIiwiVGVybWluYWwiLCJfY29yZSIsImVsZW1lbnQiLCJ0ZXh0YXJlYSIsImJsdXIiLCJmb2N1cyIsImNvbHVtbnMiLCJ3cml0ZWxuIiwicGFyZW50IiwiYXR0YWNoQ3VzdG9tS2V5RXZlbnRIYW5kbGVyIiwiY3VzdG9tS2V5RXZlbnRIYW5kbGVyIiwicmVnaXN0ZXJMaW5rTWF0Y2hlciIsInJlZ2V4IiwiZGVyZWdpc3RlckxpbmtNYXRjaGVyIiwibWF0Y2hlcklkIiwicmVnaXN0ZXJDaGFyYWN0ZXJKb2luZXIiLCJkZXJlZ2lzdGVyQ2hhcmFjdGVySm9pbmVyIiwiam9pbmVySWQiLCJjdXJzb3JZT2Zmc2V0IiwiaGFzU2VsZWN0aW9uIiwiZ2V0U2VsZWN0aW9uIiwiY2xlYXJTZWxlY3Rpb24iLCJzZWxlY3RBbGwiLCJzZWxlY3RMaW5lcyIsInNjcm9sbExpbmVzIiwic2Nyb2xsUGFnZXMiLCJwYWdlQ291bnQiLCJzY3JvbGxUb1RvcCIsInNjcm9sbFRvQm90dG9tIiwic2Nyb2xsVG9MaW5lIiwiZ2V0T3B0aW9uIiwic2V0T3B0aW9uIiwicmVzZXQiLCJhcHBseUFkZG9uIiwiYWRkb24iLCJyZSIsInBhcnRzIiwidXJpIiwic291cmNlIiwiaG9zdCIsImF1dGhvcml0eSIsImlwdjZ1cmkiLCJ3aXRoTmF0aXZlQnVmZmVyIiwid2l0aE5hdGl2ZUFycmF5QnVmZmVyIiwiZWlvIiwiU29ja2V0IiwiQmFja29mZiIsImhhcyIsIk1hbmFnZXIiLCJuc3BzIiwic3VicyIsInJlY29ubmVjdGlvbiIsInJlY29ubmVjdGlvbkF0dGVtcHRzIiwicmVjb25uZWN0aW9uRGVsYXkiLCJyZWNvbm5lY3Rpb25EZWxheU1heCIsInJhbmRvbWl6YXRpb25GYWN0b3IiLCJiYWNrb2ZmIiwiaml0dGVyIiwiY29ubmVjdGluZyIsImxhc3RQaW5nIiwicGFja2V0QnVmZmVyIiwiX3BhcnNlciIsImVuY29kZXIiLCJkZWNvZGVyIiwiYXV0b0Nvbm5lY3QiLCJlbWl0QWxsIiwidXBkYXRlU29ja2V0SWRzIiwiZ2VuZXJhdGVJZCIsImVuZ2luZSIsIl9yZWNvbm5lY3Rpb24iLCJfcmVjb25uZWN0aW9uQXR0ZW1wdHMiLCJfcmVjb25uZWN0aW9uRGVsYXkiLCJzZXRNaW4iLCJfcmFuZG9taXphdGlvbkZhY3RvciIsInNldEppdHRlciIsIl9yZWNvbm5lY3Rpb25EZWxheU1heCIsInNldE1heCIsIl90aW1lb3V0IiwibWF5YmVSZWNvbm5lY3RPbk9wZW4iLCJyZWNvbm5lY3RpbmciLCJhdHRlbXB0cyIsInJlY29ubmVjdCIsImNvbm5lY3QiLCJza2lwUmVjb25uZWN0Iiwib3BlblN1YiIsIm9ub3BlbiIsImVycm9yU3ViIiwiY2xlYW51cCIsInRpbWVyIiwib25waW5nIiwiRGF0ZSIsIm9ucG9uZyIsIm9uZGF0YSIsIm9uZGVjb2RlZCIsIm9uZXJyb3IiLCJvbkNvbm5lY3RpbmciLCJwcm9jZXNzUGFja2V0UXVldWUiLCJzaGlmdCIsInN1YnNMZW5ndGgiLCJkaXNjb25uZWN0Iiwib25jbG9zZSIsInJlYXNvbiIsImRlbGF5IiwiZHVyYXRpb24iLCJvbnJlY29ubmVjdCIsImF0dGVtcHQiLCJYSFIiLCJKU09OUCIsIndlYnNvY2tldCIsInBvbGxpbmciLCJ4ZCIsInhzIiwianNvbnAiLCJsb2NhdGlvbiIsImlzU1NMIiwiZm9yY2VKU09OUCIsInBhcnNlcXMiLCJpbmhlcml0IiwieWVhc3QiLCJQb2xsaW5nIiwiaGFzWEhSMiIsInJlc3BvbnNlVHlwZSIsImZvcmNlQmFzZTY0IiwicG9sbCIsInBhdXNlIiwib25QYXVzZSIsImRvUG9sbCIsImNhbGxiYWNrZm4iLCJkb1dyaXRlIiwic2NoZW1hIiwic2lkIiwid2l0aE5hdGl2ZUJsb2IiLCJ3aXRoTmF0aXZlRmlsZSIsIkZpbGUiLCJwcmV2IiwiYWxwaGFiZXQiLCJzZWVkIiwibnVtIiwibm93IiwiZGVjb2RlZCIsInRvQXJyYXkiLCJoYXNCaW4iLCJldmVudHMiLCJjb25uZWN0X2Vycm9yIiwiY29ubmVjdF90aW1lb3V0IiwicmVjb25uZWN0X2F0dGVtcHQiLCJyZWNvbm5lY3RfZmFpbGVkIiwicmVjb25uZWN0X2Vycm9yIiwiaW8iLCJqc29uIiwiaWRzIiwiYWNrcyIsInJlY2VpdmVCdWZmZXIiLCJzZW5kQnVmZmVyIiwiY29ubmVjdGVkIiwiZGlzY29ubmVjdGVkIiwiZmxhZ3MiLCJzdWJFdmVudHMiLCJldiIsImNvbXByZXNzIiwib25wYWNrZXQiLCJzYW1lTmFtZXNwYWNlIiwicm9vdE5hbWVzcGFjZUVycm9yIiwib25jb25uZWN0Iiwib25ldmVudCIsIm9uYWNrIiwib25kaXNjb25uZWN0IiwiYWNrIiwic2VudCIsImVtaXRCdWZmZXJlZCIsIlR5cGVkQXJyYXlVdGlsc18xIiwid2N3aWR0aCIsIkNPTUJJTklOR19CTVAiLCJDT01CSU5JTkdfSElHSCIsImNvbnRyb2wiLCJudWwiLCJ1Y3MiLCJtaWQiLCJiaXNlYXJjaCIsImdldFN0cmluZ0NlbGxXaWR0aCIsInNlY29uZCIsIkR5bmFtaWNDaGFyQXRsYXNfMSIsIk5vbmVDaGFyQXRsYXNfMSIsIlN0YXRpY0NoYXJBdGxhc18xIiwiY2hhckF0bGFzSW1wbGVtZW50YXRpb25zIiwibm9uZSIsInN0YXRpYyIsImR5bmFtaWMiLCJjaGFyQXRsYXNDYWNoZSIsIm5ld0NvbmZpZyIsIm93bmVkQnlJbmRleCIsImVudHJ5Iiwib3duZWRCeSIsImNvbmZpZyIsImF0bGFzIiwibmV3RW50cnkiLCJyZW1vdmVUZXJtaW5hbEZyb21DYWNoZSIsIlBsYXRmb3JtXzEiLCJjbGVhckNvbG9yIiwiaW1hZ2VEYXRhIiwiaXNFbXB0eSIsImdldEZvbnQiLCJnZW5lcmF0ZVN0YXRpY0NoYXJBdGxhc1RleHR1cmUiLCJjb250ZXh0IiwiY2FudmFzRmFjdG9yeSIsImNlbGxXaWR0aCIsImNlbGxIZWlnaHQiLCJjdHgiLCJjb2xvckluZGV4IiwiY2hhckF0bGFzSW1hZ2VEYXRhIiwiY3JlYXRlSW1hZ2VCaXRtYXAiLCJTY3JlZW5EcHJNb25pdG9yIiwic2V0TGlzdGVuZXIiLCJfbGlzdGVuZXIiLCJjbGVhckxpc3RlbmVyIiwiX291dGVyTGlzdGVuZXIiLCJfY3VycmVudERldmljZVBpeGVsUmF0aW8iLCJfdXBkYXRlRHByIiwiX3Jlc29sdXRpb25NZWRpYU1hdGNoTGlzdCIsIm1hdGNoTWVkaWEiLCJMaWZlY3ljbGVfMSIsIkxpZmVjeWNsZV8yIiwiTW91c2Vab25lTWFuYWdlciIsIl96b25lcyIsIl9hcmVab25lc0FjdGl2ZSIsIl90b29sdGlwVGltZW91dCIsIl9jdXJyZW50Wm9uZSIsIl9sYXN0SG92ZXJDb29yZHMiLCJfb25Nb3VzZURvd24iLCJfbW91c2VNb3ZlTGlzdGVuZXIiLCJfb25Nb3VzZU1vdmUiLCJfY2xpY2tMaXN0ZW5lciIsIl9vbkNsaWNrIiwiX2RlYWN0aXZhdGUiLCJ6b25lIiwiX2FjdGl2YXRlIiwieTEiLCJ5MiIsImxlYXZlQ2FsbGJhY2siLCJwYWdlWCIsInBhZ2VZIiwiX29uSG92ZXIiLCJfZmluZFpvbmVFdmVudEF0IiwiaG92ZXJDYWxsYmFjayIsIl9vblRvb2x0aXAiLCJ0b29sdGlwQ2FsbGJhY2siLCJ3aWxsTGlua0FjdGl2YXRlIiwicHJldmVudERlZmF1bHQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJjbGlja0NhbGxiYWNrIiwiY29vcmRzIiwibW91c2VIZWxwZXIiLCJnZXRDb29yZHMiLCJzY3JlZW5FbGVtZW50IiwiY2hhck1lYXN1cmUiLCJ4MSIsIngyIiwiTW91c2Vab25lIiwiTW91c2VIZWxwZXIiLCJfcmVuZGVyZXIiLCJzZXRSZW5kZXJlciIsInJlbmRlcmVyIiwiZ2V0Q29vcmRzUmVsYXRpdmVUb0VsZW1lbnQiLCJvcmlnaW5hbEVsZW1lbnQiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwib2Zmc2V0UGFyZW50Iiwib3duZXJEb2N1bWVudCIsImJvZHkiLCJzY3JvbGxMZWZ0IiwicGFyZW50RWxlbWVudCIsImNvbENvdW50Iiwicm93Q291bnQiLCJpc1NlbGVjdGlvbiIsImRpbWVuc2lvbnMiLCJhY3R1YWxDZWxsV2lkdGgiLCJhY3R1YWxDZWxsSGVpZ2h0IiwiZ2V0UmF3Qnl0ZUNvb3JkcyIsInVybCIsImxvb2t1cCIsImNhY2hlIiwibWFuYWdlcnMiLCJmb3JjZU5ldyIsIm11bHRpcGxleCIsInByb3Bvc2VHZW9tZXRyeSIsInRlcm0iLCJwYXJlbnRFbGVtZW50U3R5bGUiLCJnZXRDb21wdXRlZFN0eWxlIiwicGFyZW50RWxlbWVudEhlaWdodCIsImdldFByb3BlcnR5VmFsdWUiLCJwYXJlbnRFbGVtZW50V2lkdGgiLCJlbGVtZW50U3R5bGUiLCJhdmFpbGFibGVIZWlnaHQiLCJhdmFpbGFibGVXaWR0aCIsInZpZXdwb3J0Iiwic2Nyb2xsQmFyV2lkdGgiLCJmaXQiLCJnZW9tZXRyeSIsInRlcm1pbmFsQ29uc3RydWN0b3IiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwic29ja2V0X2lvX2NsaWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwic29ja2V0X2lvX2NsaWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJ4dGVybV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwieHRlcm1fbGliX2FkZG9uc19maXRfZml0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJ0ZXJtaW5hbF9kb20iLCJnZXRFbGVtZW50QnlJZCIsInh0ZXJtIiwibG9naW5CdG4iLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwib25jbGljayIsImFjY291bnQiLCJwdyIsImFsZXJ0Iiwic3VjY2VzcyIsImRpc2FibGVkIiwiaGFkRXJyb3IiLCJwYXJzZXVyaSIsImxvYyIsImhyZWYiLCJjcmVhdGVEZWJ1ZyIsInByZXZUaW1lIiwiZW5hYmxlZCIsImN1cnIiLCJjb2VyY2UiLCJmb3JtYXQiLCJmb3JtYXR0ZXIiLCJoYXNoIiwiYWJzIiwic2VsZWN0Q29sb3IiLCJpbml0IiwiaW5zdGFuY2VzIiwic3RhY2siLCJkaXNhYmxlIiwibmFtZXMiLCJza2lwcyIsImluc3RhbmNlIiwicGFja2V0RGF0YSIsIl9kZWNvbnN0cnVjdFBhY2tldCIsInBsYWNlaG9sZGVyIiwiX3BsYWNlaG9sZGVyIiwibmV3RGF0YSIsIl9yZWNvbnN0cnVjdFBhY2tldCIsInBlbmRpbmdCbG9icyIsIl9yZW1vdmVCbG9icyIsImN1cktleSIsImNvbnRhaW5pbmdPYmplY3QiLCJmaWxlUmVhZGVyIiwibGVucyIsImdldExlbnMiLCJ2YWxpZExlbiIsInBsYWNlSG9sZGVyc0xlbiIsInRtcCIsIkFyciIsIl9ieXRlTGVuZ3RoIiwiY3VyQnl0ZSIsInJldkxvb2t1cCIsInVpbnQ4IiwiZXh0cmFCeXRlcyIsImxlbjIiLCJlbmNvZGVDaHVuayIsIm91dHB1dCIsImlzTEUiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsIm5CaXRzIiwiTmFOIiwicnQiLCJMTjIiLCJ0cmFuc3BvcnRzIiwidHJhbnNwb3J0T3B0aW9ucyIsIndyaXRlQnVmZmVyIiwicHJldkJ1ZmZlckxlbiIsInBvbGljeVBvcnQiLCJyZW1lbWJlclVwZ3JhZGUiLCJvbmx5QmluYXJ5VXBncmFkZXMiLCJwZXJNZXNzYWdlRGVmbGF0ZSIsInRocmVzaG9sZCIsInByb2R1Y3QiLCJ1cGdyYWRlcyIsInBpbmdJbnRlcnZhbCIsInBpbmdUaW1lb3V0IiwicGluZ0ludGVydmFsVGltZXIiLCJwaW5nVGltZW91dFRpbWVyIiwicHJpb3JXZWJzb2NrZXRTdWNjZXNzIiwiY3JlYXRlVHJhbnNwb3J0IiwiY2xvbmUiLCJFSU8iLCJ0cmFuc3BvcnQiLCJyZXF1ZXN0VGltZW91dCIsInByb3RvY29scyIsInNldFRyYW5zcG9ydCIsIm9uRHJhaW4iLCJwcm9iZSIsImZhaWxlZCIsIm9uVHJhbnNwb3J0T3BlbiIsInVwZ3JhZGVMb3Nlc0JpbmFyeSIsInVwZ3JhZGluZyIsImZsdXNoIiwiZnJlZXplVHJhbnNwb3J0Iiwib25UcmFuc3BvcnRDbG9zZSIsIm9udXBncmFkZSIsInRvIiwib25IYW5kc2hha2UiLCJzZXRQaW5nIiwiZmlsdGVyVXBncmFkZXMiLCJvbkhlYXJ0YmVhdCIsInNlbmRQYWNrZXQiLCJ3YWl0Rm9yVXBncmFkZSIsImNsZWFudXBBbmRDbG9zZSIsImZpbHRlcmVkVXBncmFkZXMiLCJlbXB0eSIsIlJlcXVlc3QiLCJtZXRob2QiLCJhc3luYyIsInJlcXVlc3QiLCJyZXEiLCJzZW5kWGhyIiwicG9sbFhociIsInhociIsInNldERpc2FibGVIZWFkZXJDaGVjayIsInNldFJlcXVlc3RIZWFkZXIiLCJ3aXRoQ3JlZGVudGlhbHMiLCJoYXNYRFIiLCJvbkxvYWQiLCJyZXNwb25zZVRleHQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJjb250ZW50VHlwZSIsImdldFJlc3BvbnNlSGVhZGVyIiwic3RhdHVzIiwicmVxdWVzdHNDb3VudCIsInJlcXVlc3RzIiwib25TdWNjZXNzIiwiZnJvbUVycm9yIiwiYWJvcnQiLCJyZXNwb25zZSIsImF0dGFjaEV2ZW50IiwidW5sb2FkSGFuZGxlciIsInRlcm1pbmF0aW9uRXZlbnQiLCJhcnJheWJ1ZmZlciIsImFidiIsImlpIiwiY291bnQiLCJlcnJfY2IiLCJiYWlsIiwicHJveHkiLCJieXRlQ291bnQiLCJieXRlSW5kZXgiLCJzdHJpbmdGcm9tQ2hhckNvZGUiLCJ1Y3MyZGVjb2RlIiwiZXh0cmEiLCJjb3VudGVyIiwiY2hlY2tTY2FsYXJWYWx1ZSIsInRvVXBwZXJDYXNlIiwiY3JlYXRlQnl0ZSIsImVuY29kZUNvZGVQb2ludCIsInN5bWJvbCIsInJlYWRDb250aW51YXRpb25CeXRlIiwiY29udGludWF0aW9uQnl0ZSIsImRlY29kZVN5bWJvbCIsImJ5dGUxIiwiYnl0ZVN0cmluZyIsInVjczJlbmNvZGUiLCJlbmNvZGVkMSIsImVuY29kZWQyIiwiZW5jb2RlZDMiLCJlbmNvZGVkNCIsImJ1ZmZlckxlbmd0aCIsIkJsb2JCdWlsZGVyIiwiV2ViS2l0QmxvYkJ1aWxkZXIiLCJNU0Jsb2JCdWlsZGVyIiwiTW96QmxvYkJ1aWxkZXIiLCJibG9iU3VwcG9ydGVkIiwiYmxvYlN1cHBvcnRzQXJyYXlCdWZmZXJWaWV3IiwiYmxvYkJ1aWxkZXJTdXBwb3J0ZWQiLCJhcHBlbmQiLCJnZXRCbG9iIiwibWFwQXJyYXlCdWZmZXJWaWV3cyIsImNodW5rIiwiQmxvYkJ1aWxkZXJDb25zdHJ1Y3RvciIsImJiIiwicGFydCIsIkJsb2JDb25zdHJ1Y3RvciIsIkpTT05QUG9sbGluZyIsInJOZXdsaW5lIiwickVzY2FwZWROZXdsaW5lIiwiZ2xvYiIsIl9fX2VpbyIsInNjcmlwdCIsInBhcmVudE5vZGUiLCJmb3JtIiwiaWZyYW1lIiwiaW5zZXJ0QXQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImluc2VydEJlZm9yZSIsImhlYWQiLCJhcmVhIiwiaWZyYW1lSWQiLCJjbGFzc05hbWUiLCJwb3NpdGlvbiIsInRvcCIsImxlZnQiLCJzZXRBdHRyaWJ1dGUiLCJjb21wbGV0ZSIsImluaXRJZnJhbWUiLCJodG1sIiwiYWN0aW9uIiwic3VibWl0IiwiQnJvd3NlcldlYlNvY2tldCIsIk5vZGVXZWJTb2NrZXQiLCJXZWJTb2NrZXQiLCJNb3pXZWJTb2NrZXQiLCJXUyIsInVzaW5nQnJvd3NlcldlYlNvY2tldCIsImNoZWNrIiwiaGVhZGVycyIsIndzIiwic3VwcG9ydHMiLCJhZGRFdmVudExpc3RlbmVycyIsIm9ubWVzc2FnZSIsImZhY3RvciIsInJhbmQiLCJyYW5kb20iLCJkZXZpYXRpb24iLCJCdWZmZXJTZXRfMSIsIkNvbXBvc2l0aW9uSGVscGVyXzEiLCJWaWV3cG9ydF8xIiwiQ2xpcGJvYXJkXzEiLCJFc2NhcGVTZXF1ZW5jZXNfMSIsIklucHV0SGFuZGxlcl8xIiwiUmVuZGVyZXJfMSIsIkxpbmtpZmllcl8xIiwiU2VsZWN0aW9uTWFuYWdlcl8xIiwiQ2hhck1lYXN1cmVfMSIsIkJyb3dzZXIiLCJNb3VzZUhlbHBlcl8xIiwiQ2xvbmVfMSIsIlNvdW5kTWFuYWdlcl8xIiwiQ29sb3JNYW5hZ2VyXzEiLCJNb3VzZVpvbmVNYW5hZ2VyXzEiLCJBY2Nlc3NpYmlsaXR5TWFuYWdlcl8xIiwiU2NyZWVuRHByTW9uaXRvcl8xIiwiRG9tUmVuZGVyZXJfMSIsIktleWJvYXJkXzEiLCJDT05TVFJVQ1RPUl9PTkxZX09QVElPTlMiLCJERUZBVUxUX09QVElPTlMiLCJjb252ZXJ0RW9sIiwidGVybU5hbWUiLCJjdXJzb3JCbGluayIsImN1cnNvclN0eWxlIiwiYmVsbFNvdW5kIiwiREVGQVVMVF9CRUxMX1NPVU5EIiwiYmVsbFN0eWxlIiwibGluZUhlaWdodCIsImxldHRlclNwYWNpbmciLCJzY3JlZW5LZXlzIiwic2NyZWVuUmVhZGVyTW9kZSIsIm1hY09wdGlvbklzTWV0YSIsIm1hY09wdGlvbkNsaWNrRm9yY2VzU2VsZWN0aW9uIiwiY2FuY2VsRXZlbnRzIiwiZGlzYWJsZVN0ZGluIiwidXNlRmxvd0NvbnRyb2wiLCJyaWdodENsaWNrU2VsZWN0c1dvcmQiLCJyZW5kZXJlclR5cGUiLCJfYmxhbmtMaW5lIiwiX3NldHVwIiwiX2N1c3RvbUtleUV2ZW50SGFuZGxlciIsIl9wYXJlbnQiLCJjdXJzb3JTdGF0ZSIsImN1cnNvckhpZGRlbiIsImFwcGxpY2F0aW9uS2V5cGFkIiwiYXBwbGljYXRpb25DdXJzb3IiLCJvcmlnaW5Nb2RlIiwiaW5zZXJ0TW9kZSIsIndyYXBhcm91bmRNb2RlIiwiYnJhY2tldGVkUGFzdGVNb2RlIiwiY2hhcnNldCIsImdjaGFyc2V0IiwiZ2xldmVsIiwiY2hhcnNldHMiLCJjdXJBdHRyIiwicGFyYW1zIiwiY3VycmVudFBhcmFtIiwiX3dyaXRlSW5Qcm9ncmVzcyIsIl94b2ZmU2VudFRvQ2F0Y2hVcCIsIl91c2VyU2Nyb2xsaW5nIiwiX2lucHV0SGFuZGxlciIsIklucHV0SGFuZGxlciIsInNlbGVjdGlvbk1hbmFnZXIiLCJsaW5raWZpZXIiLCJMaW5raWZpZXIiLCJfbW91c2Vab25lTWFuYWdlciIsInNvdW5kTWFuYWdlciIsIlNvdW5kTWFuYWdlciIsIkJ1ZmZlclNldCIsImluaXRCdWZmZXJzTGlzdGVuZXJzIiwiYWN0aXZlIiwiZXJhc2VBdHRyIiwiYWN0aXZlRWxlbWVudCIsImhhc0ZvY3VzIiwiX3NldFRoZW1lIiwibmV3QnVmZmVyTGVuZ3RoIiwibmVlZHNSZWZyZXNoIiwibWVhc3VyZSIsIm9uUmVzaXplIiwiX3NldHVwUmVuZGVyZXIiLCJvbkNoYXJTaXplQ2hhbmdlZCIsIl90aGVtZSIsInN5bmNTY3JvbGxBcmVhIiwiX2FjY2Vzc2liaWxpdHlNYW5hZ2VyIiwiQWNjZXNzaWJpbGl0eU1hbmFnZXIiLCJub3JtYWwiLCJhbHQiLCJfb25UZXh0QXJlYUZvY3VzIiwic2VuZEZvY3VzIiwidXBkYXRlQ3Vyc29yU3R5bGUiLCJzaG93Q3Vyc29yIiwiX29uVGV4dEFyZWFCbHVyIiwicmVtb3ZlIiwiX2luaXRHbG9iYWwiLCJfYmluZEtleXMiLCJjb3B5SGFuZGxlciIsInBhc3RlSGFuZGxlcldyYXBwZXIiLCJwYXN0ZUhhbmRsZXIiLCJidXR0b24iLCJyaWdodENsaWNrSGFuZGxlciIsIm1vdmVUZXh0QXJlYVVuZGVyTW91c2VDdXJzb3IiLCJfa2V5RG93biIsIl9rZXlQcmVzcyIsImtleUNvZGUiLCJ3YXNNb2RpZmllcktleU9ubHlFdmVudCIsIl9rZXlVcCIsIl9jb21wb3NpdGlvbkhlbHBlciIsImNvbXBvc2l0aW9uc3RhcnQiLCJjb21wb3NpdGlvbnVwZGF0ZSIsImNvbXBvc2l0aW9uZW5kIiwidXBkYXRlQ29tcG9zaXRpb25FbGVtZW50cyIsIl9xdWV1ZUxpbmtpZmljYXRpb24iLCJfY29udGV4dCIsImRlZmF1bHRWaWV3IiwiX2RvY3VtZW50IiwiX3NjcmVlbkRwck1vbml0b3IiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJfdmlld3BvcnRFbGVtZW50IiwiX3ZpZXdwb3J0U2Nyb2xsQXJlYSIsIl9oZWxwZXJDb250YWluZXIiLCJhdHRhY2hUb0RvbSIsInRhYkluZGV4IiwiX2NvbXBvc2l0aW9uVmlldyIsIkNvbXBvc2l0aW9uSGVscGVyIiwiQ2hhck1lYXN1cmUiLCJWaWV3cG9ydCIsImNvbG9yTWFuYWdlciIsIm9uV2luZG93UmVzaXplIiwiU2VsZWN0aW9uTWFuYWdlciIsIm9uTW91c2VEb3duIiwidGV4dCIsInNlbGVjdCIsImJpbmRNb3VzZSIsIlJlbmRlcmVyIiwiRG9tUmVuZGVyZXIiLCJwcmVzc2VkIiwic2VuZEJ1dHRvbiIsIm1ldGEiLCJjdHJsIiwibW9kIiwib3ZlcnJpZGVUeXBlIiwid2hpY2giLCJkZXRhaWwiLCJkZWx0YVkiLCJzaGlmdEtleSIsIm1ldGFLZXkiLCJjdHJsS2V5IiwidnQyMDBNb3VzZSIsIm5vcm1hbE1vdXNlIiwiZ2V0QnV0dG9uIiwic2VuZEV2ZW50IiwidXRmTW91c2UiLCJfdnQzMDBNb3VzZSIsImRhdGFfMSIsIl9kZWNMb2NhdG9yIiwicGFnZSIsInVyeHZ0TW91c2UiLCJzZ3JNb3VzZSIsIm1vdXNlRXZlbnRzIiwic2hvdWxkRm9yY2VTZWxlY3Rpb24iLCJjYW5jZWwiLCJtb3ZlSGFuZGxlciIsIngxME1vdXNlIiwiaGFzU2Nyb2xsYmFjayIsImdldExpbmVzU2Nyb2xsZWQiLCJzZXF1ZW5jZSIsIm9uV2hlZWwiLCJvblRvdWNoU3RhcnQiLCJvblRvdWNoTW92ZSIsInJlZnJlc2hSb3dzIiwibGlua2lmeVJvd3MiLCJzaG91bGRDb2x1bW5TZWxlY3QiLCJzY3JvbGwiLCJ1c2VSZWN5Y2xpbmciLCJ0b3BSb3ciLCJib3R0b21Sb3ciLCJ3aWxsQnVmZmVyQmVUcmltbWVkIiwiaXNGdWxsIiwicmVjeWNsZSIsImNvcHlGcm9tIiwic2Nyb2xsUmVnaW9uSGVpZ2h0Iiwic2hpZnRFbGVtZW50cyIsInVwZGF0ZVJhbmdlIiwiZGlzcCIsInN1cHByZXNzU2Nyb2xsRXZlbnQiLCJvbGRZZGlzcCIsInNjcm9sbEFtb3VudCIsIl9pbm5lcldyaXRlIiwid3JpdGVCYXRjaCIsIl9yZWZyZXNoU3RhcnQiLCJfcmVmcmVzaEVuZCIsInNlbGVjdGlvblRleHQiLCJrZXlkb3duIiwiZXZhbHVhdGVLZXlib2FyZEV2ZW50Iiwic2Nyb2xsQ291bnQiLCJfaXNUaGlyZExldmVsU2hpZnQiLCJ0aGlyZExldmVsS2V5IiwiYWx0S2V5Iiwic2V0Z0xldmVsIiwic2V0Z0NoYXJzZXQiLCJjaGFyQ29kZSIsImJlbGwiLCJfc291bmRCZWxsIiwicGxheUJlbGxTb3VuZCIsIl92aXN1YWxCZWxsIiwiX3Zpc3VhbEJlbGxUaW1lciIsIm1heFJhbmdlIiwiY3VyIiwiaXMiLCJoYW5kbGVUaXRsZSIsInJldmVyc2VJbmRleCIsImlucHV0SGFuZGxlciIsInRhYlNldCIsImZvcmNlIiwic3RvcFByb3BhZ2F0aW9uIiwibWF0Y2hDb2xvciIsInIxIiwiZzEiLCJiMSIsIm1hdGNoQ29sb3JDYWNoZSIsImxkaWZmIiwibGkiLCJtYXRjaENvbG9yRGlzdGFuY2UiLCJyMiIsImcyIiwiYjIiLCJfbm9ybWFsIiwiX2FsdCIsIl9hY3RpdmVCdWZmZXIiLCJhY3RpdmF0ZU5vcm1hbEJ1ZmZlciIsImFjdGl2ZUJ1ZmZlciIsImluYWN0aXZlQnVmZmVyIiwiYWN0aXZhdGVBbHRCdWZmZXIiLCJfbWF4TGVuZ3RoIiwiX2FycmF5IiwiX2xlbmd0aCIsIm5ld0FycmF5IiwiX2dldEN5Y2xpY0luZGV4IiwibmV3TGVuZ3RoIiwiZGVsZXRlQ291bnQiLCJpdGVtcyIsImNvdW50VG9UcmltIiwiZXhwYW5kTGlzdEJ5IiwiX2RhdGEiLCJfcHVzaCIsIl9wb3AiLCJfc3BsaWNlIiwiX2EiLCJyZW1vdmVkIiwiaW5zZXJ0Q2VsbHMiLCJkZWxldGVDZWxscyIsInJlcGxhY2VDZWxscyIsInNocmluayIsIkNFTExfU0laRSIsIl9jb21iaW5lZCIsIlVpbnQzMkFycmF5Iiwic3RyaW5nRGF0YSIsIl90ZXh0YXJlYSIsIl9pc0NvbXBvc2luZyIsIl9pc1NlbmRpbmdDb21wb3NpdGlvbiIsIl9jb21wb3NpdGlvblBvc2l0aW9uIiwidGV4dENvbnRlbnQiLCJfZmluYWxpemVDb21wb3NpdGlvbiIsIl9oYW5kbGVBbnlUZXh0YXJlYUNoYW5nZXMiLCJ3YWl0Rm9yUHJvcG9nYXRpb24iLCJfY2xlYXJUZXh0YXJlYVBvc2l0aW9uIiwiY3VycmVudENvbXBvc2l0aW9uUG9zaXRpb25fMSIsImlucHV0Iiwib2xkVmFsdWUiLCJkb250UmVjdXJzZSIsImlzQ3Vyc29ySW5WaWV3cG9ydCIsImN1cnNvclRvcCIsImN1cnNvckxlZnQiLCJjb21wb3NpdGlvblZpZXdCb3VuZHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJGQUxMQkFDS19TQ1JPTExfQkFSX1dJRFRIIiwiX3Njcm9sbEFyZWEiLCJfY2hhck1lYXN1cmUiLCJfY3VycmVudFJvd0hlaWdodCIsIl9sYXN0UmVjb3JkZWRCdWZmZXJMZW5ndGgiLCJfbGFzdFJlY29yZGVkVmlld3BvcnRIZWlnaHQiLCJfbGFzdFJlY29yZGVkQnVmZmVySGVpZ2h0IiwiX2xhc3RTY3JvbGxUb3AiLCJfd2hlZWxQYXJ0aWFsU2Nyb2xsIiwiX3JlZnJlc2hBbmltYXRpb25GcmFtZSIsIl9pZ25vcmVOZXh0U2Nyb2xsRXZlbnQiLCJvZmZzZXRXaWR0aCIsIl9vblNjcm9sbCIsImJhY2tncm91bmRDb2xvciIsIl9yZWZyZXNoIiwib2Zmc2V0SGVpZ2h0IiwibmV3QnVmZmVySGVpZ2h0IiwibmV3U2Nyb2xsVG9wIiwiX2dldFBpeGVsc1Njcm9sbGVkIiwiZGVsdGFNb2RlIiwiV2hlZWxFdmVudCIsIkRPTV9ERUxUQV9MSU5FIiwiRE9NX0RFTFRBX1BBR0UiLCJET01fREVMVEFfUElYRUwiLCJfbGFzdFRvdWNoWSIsInRvdWNoZXMiLCJwcmVwYXJlVGV4dEZvclRlcm1pbmFsIiwiYnJhY2tldFRleHRGb3JQYXN0ZSIsImNsaWVudFgiLCJjbGllbnRZIiwiY2xpcGJvYXJkRGF0YSIsInNldERhdGEiLCJkaXNwYXRjaFBhc3RlIiwiZ2V0RGF0YSIsInNob3VsZFNlbGVjdFdvcmQiLCJpc0NsaWNrSW5TZWxlY3Rpb24iLCJzZWxlY3RXb3JkQXRDdXJzb3IiLCJDaGFyc2V0c18xIiwiQ2hhcldpZHRoXzEiLCJFc2NhcGVTZXF1ZW5jZVBhcnNlcl8xIiwiR0xFVkVMIiwiKCIsIikiLCIqIiwiKyIsIi0iLCIuIiwiUmVxdWVzdFRlcm1pbmZvIiwiaG9vayIsImNvbGxlY3QiLCJmbGFnIiwicHV0IiwidW5ob29rIiwiREVDUlFTUyIsInB0IiwiYmxvY2siLCJ1bmRlcmxpbmUiLCJiYXIiLCJFc2NhcGVTZXF1ZW5jZVBhcnNlciIsIl9zdXJyb2dhdGVGaXJzdCIsInNldENzaUhhbmRsZXJGYWxsYmFjayIsInNldEVzY0hhbmRsZXJGYWxsYmFjayIsInNldEV4ZWN1dGVIYW5kbGVyRmFsbGJhY2siLCJzZXRPc2NIYW5kbGVyRmFsbGJhY2siLCJpZGVudGlmaWVyIiwic2V0UHJpbnRIYW5kbGVyIiwicHJpbnQiLCJzZXRDc2lIYW5kbGVyIiwiaW5zZXJ0Q2hhcnMiLCJjdXJzb3JVcCIsImN1cnNvckRvd24iLCJjdXJzb3JGb3J3YXJkIiwiY3Vyc29yQmFja3dhcmQiLCJjdXJzb3JOZXh0TGluZSIsImN1cnNvclByZWNlZGluZ0xpbmUiLCJjdXJzb3JDaGFyQWJzb2x1dGUiLCJjdXJzb3JQb3NpdGlvbiIsImN1cnNvckZvcndhcmRUYWIiLCJlcmFzZUluRGlzcGxheSIsImVyYXNlSW5MaW5lIiwiaW5zZXJ0TGluZXMiLCJkZWxldGVMaW5lcyIsImRlbGV0ZUNoYXJzIiwic2Nyb2xsVXAiLCJzY3JvbGxEb3duIiwiZXJhc2VDaGFycyIsImN1cnNvckJhY2t3YXJkVGFiIiwiY2hhclBvc0Fic29sdXRlIiwiaFBvc2l0aW9uUmVsYXRpdmUiLCJyZXBlYXRQcmVjZWRpbmdDaGFyYWN0ZXIiLCJzZW5kRGV2aWNlQXR0cmlidXRlcyIsImxpbmVQb3NBYnNvbHV0ZSIsInZQb3NpdGlvblJlbGF0aXZlIiwiaFZQb3NpdGlvbiIsInRhYkNsZWFyIiwic2V0TW9kZSIsInJlc2V0TW9kZSIsImNoYXJBdHRyaWJ1dGVzIiwiZGV2aWNlU3RhdHVzIiwic29mdFJlc2V0Iiwic2V0Q3Vyc29yU3R5bGUiLCJzZXRTY3JvbGxSZWdpb24iLCJzYXZlQ3Vyc29yIiwicmVzdG9yZUN1cnNvciIsInNldEV4ZWN1dGVIYW5kbGVyIiwibGluZUZlZWQiLCJjYXJyaWFnZVJldHVybiIsImJhY2tzcGFjZSIsInRhYiIsInNoaWZ0T3V0Iiwic2hpZnRJbiIsIm5leHRMaW5lIiwic2V0T3NjSGFuZGxlciIsInNldFRpdGxlIiwic2V0RXNjSGFuZGxlciIsImtleXBhZEFwcGxpY2F0aW9uTW9kZSIsImtleXBhZE51bWVyaWNNb2RlIiwic2VsZWN0RGVmYXVsdENoYXJzZXQiLCJfbG9vcF8xIiwidGhpc18xIiwic2VsZWN0Q2hhcnNldCIsIkNIQVJTRVRTIiwic2V0RXJyb3JIYW5kbGVyIiwic3RhdGUiLCJzZXREY3NIYW5kbGVyIiwiY3Vyc29yU3RhcnRYIiwiY3Vyc29yU3RhcnRZIiwiY2hXaWR0aCIsImJ1ZmZlclJvdyIsInN0cmluZ1Bvc2l0aW9uIiwiY2hNaW51c09uZSIsImNoTWludXNUd28iLCJvcmlnaW5hbFgiLCJwYXJhbSIsImNvbCIsInJvdyIsIl9lcmFzZUluQnVmZmVyTGluZSIsImNsZWFyV3JhcCIsIl9yZXNldEJ1ZmZlckxpbmUiLCJzY3JvbGxCYWNrU2l6ZSIsInNjcm9sbEJvdHRvbVJvd3NPZmZzZXQiLCJzY3JvbGxCb3R0b21BYnNvbHV0ZSIsIkRFRkFVTFRfQ0hBUlNFVCIsInNhdmVkQ29scyIsImlzQmxpbmtpbmciLCJzYXZlZEN1ckF0dHIiLCJjb2xsZWN0QW5kRmxhZyIsImxldmVsIiwiYCIsImYiLCJrIiwicSIsInUiLCJ3IiwieiIsInsiLCJ8IiwifSIsIn4iLCIjIiwiQCIsIlsiLCJcXCIsIl0iLCJeIiwiXyIsImZpbGxGYWxsYmFjayIsImxvdyIsImhpZ2giLCJUcmFuc2l0aW9uVGFibGUiLCJhZGRNYW55IiwiY29kZXMiLCJQUklOVEFCTEVTIiwiRVhFQ1VUQUJMRVMiLCJWVDUwMF9UUkFOU0lUSU9OX1RBQkxFIiwic3RhdGVzIiwiRGNzRHVtbXkiLCJUUkFOU0lUSU9OUyIsImluaXRpYWxTdGF0ZSIsImN1cnJlbnRTdGF0ZSIsIl9vc2MiLCJfcGFyYW1zIiwiX2NvbGxlY3QiLCJfcHJpbnRIYW5kbGVyRmIiLCJfZXhlY3V0ZUhhbmRsZXJGYiIsIl9jc2lIYW5kbGVyRmIiLCJfZXNjSGFuZGxlckZiIiwiX29zY0hhbmRsZXJGYiIsIl9kY3NIYW5kbGVyRmIiLCJfZXJyb3JIYW5kbGVyRmIiLCJfcHJpbnRIYW5kbGVyIiwiX2V4ZWN1dGVIYW5kbGVycyIsIl9jc2lIYW5kbGVycyIsIl9lc2NIYW5kbGVycyIsIl9vc2NIYW5kbGVycyIsIl9kY3NIYW5kbGVycyIsIl9hY3RpdmVEY3NIYW5kbGVyIiwiX2Vycm9ySGFuZGxlciIsImNsZWFyUHJpbnRIYW5kbGVyIiwiY2xlYXJFeGVjdXRlSGFuZGxlciIsImNsZWFyQ3NpSGFuZGxlciIsImNsZWFyRXNjSGFuZGxlciIsImlkZW50IiwiY2xlYXJPc2NIYW5kbGVyIiwiY2xlYXJEY3NIYW5kbGVyIiwic2V0RGNzSGFuZGxlckZhbGxiYWNrIiwiY2xlYXJFcnJvckhhbmRsZXIiLCJ0cmFuc2l0aW9uIiwiZGNzIiwib3NjIiwiZGNzSGFuZGxlciIsImlkeCIsIlRleHRSZW5kZXJMYXllcl8xIiwiU2VsZWN0aW9uUmVuZGVyTGF5ZXJfMSIsIkN1cnNvclJlbmRlckxheWVyXzEiLCJMaW5rUmVuZGVyTGF5ZXJfMSIsIlJlbmRlckRlYm91bmNlcl8xIiwiQ2hhcmFjdGVySm9pbmVyUmVnaXN0cnlfMSIsIl9pc1BhdXNlZCIsIl9uZWVkc0Z1bGxSZWZyZXNoIiwiX2NoYXJhY3RlckpvaW5lclJlZ2lzdHJ5IiwiQ2hhcmFjdGVySm9pbmVyUmVnaXN0cnkiLCJfcmVuZGVyTGF5ZXJzIiwiVGV4dFJlbmRlckxheWVyIiwiU2VsZWN0aW9uUmVuZGVyTGF5ZXIiLCJMaW5rUmVuZGVyTGF5ZXIiLCJDdXJzb3JSZW5kZXJMYXllciIsIl9kZXZpY2VQaXhlbFJhdGlvIiwiX3VwZGF0ZURpbWVuc2lvbnMiLCJfcmVuZGVyRGVib3VuY2VyIiwiX3JlbmRlclJvd3MiLCJvYnNlcnZlcl8xIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJvbkludGVyc2VjdGlvbkNoYW5nZSIsIm9ic2VydmUiLCJpbnRlcnNlY3Rpb25SYXRpbyIsIl9ydW5PcGVyYXRpb24iLCJvcGVyYXRpb24iLCJHcmlkQ2FjaGVfMSIsIkJhc2VSZW5kZXJMYXllcl8xIiwiY29udGFpbmVyIiwiY2hhcmFjdGVySm9pbmVyUmVnaXN0cnkiLCJfY2hhcmFjdGVyT3ZlcmxhcENhY2hlIiwiX3N0YXRlIiwiR3JpZENhY2hlIiwidGVybWluYWxGb250IiwiX2NoYXJhY3RlcldpZHRoIiwiX2NoYXJhY3RlckZvbnQiLCJfZm9yRWFjaENlbGwiLCJmaXJzdFJvdyIsImxhc3RSb3ciLCJqb2luZXJSZWdpc3RyeSIsImpvaW5lZFJhbmdlcyIsImdldEpvaW5lZENoYXJhY3RlcnMiLCJpc0pvaW5lZCIsImxhc3RDaGFyWCIsIl9pc092ZXJsYXBwaW5nIiwidGVtcCIsIl9kcmF3QmFja2dyb3VuZCIsInN0YXJ0WCIsInN0YXJ0WSIsInByZXZGaWxsU3R5bGUiLCJuZXh0RmlsbFN0eWxlIiwiX2RyYXdGb3JlZ3JvdW5kIiwib3ZlcmxhcHMiLCJtZWFzdXJlVGV4dCIsIkJhc2VDaGFyQXRsYXNfMSIsIkNoYXJBdGxhc0dlbmVyYXRvcl8xIiwiTFJVTWFwXzEiLCJURVhUVVJFX1dJRFRIIiwiVEVYVFVSRV9IRUlHSFQiLCJUUkFOU1BBUkVOVF9DT0xPUiIsImdldEdseXBoQ2FjaGVLZXkiLCJnbHlwaCIsIkR5bmFtaWNDaGFyQXRsYXMiLCJfY29uZmlnIiwiX2RyYXdUb0NhY2hlQ291bnQiLCJfZ2x5cGhzV2FpdGluZ09uQml0bWFwIiwiX2JpdG1hcENvbW1pdFRpbWVvdXQiLCJfYml0bWFwIiwiX2NhY2hlQ2FudmFzIiwiX2NhY2hlQ3R4IiwidG1wQ2FudmFzIiwiX3RtcEN0eCIsIl93aWR0aCIsIl9oZWlnaHQiLCJjYXBhY2l0eSIsIl9jYWNoZU1hcCIsInByZWFsbG9jIiwiX2NhbkNhY2hlIiwiZ2x5cGhLZXkiLCJjYWNoZVZhbHVlIiwiX2RyYXdGcm9tQ2FjaGUiLCJwZWVrIiwiY2FjaGVWYWx1ZV8xIiwiX2RyYXdUb0NhY2hlIiwiX3RvQ29vcmRpbmF0ZVgiLCJfdG9Db29yZGluYXRlWSIsImNhY2hlWCIsImNhY2hlWSIsImRyYXdJbWFnZSIsImluQml0bWFwIiwiX2dldENvbG9yRnJvbUFuc2lJbmRleCIsIl9nZXRCYWNrZ3JvdW5kQ29sb3IiLCJfZ2V0Rm9yZWdyb3VuZENvbG9yIiwiZm9udFN0eWxlIiwicHV0SW1hZ2VEYXRhIiwiX2FkZEdseXBoVG9CaXRtYXAiLCJfZ2VuZXJhdGVCaXRtYXAiLCJnbHlwaHNNb3ZpbmdUb0JpdG1hcCIsInRoZW4iLCJiaXRtYXAiLCJMUlVNYXAiLCJfbWFwIiwiX2hlYWQiLCJfdGFpbCIsIl9ub2RlUG9vbCIsIl91bmxpbmtOb2RlIiwiX2FwcGVuZE5vZGUiLCJ0YWlsIiwibm9kZVBvb2wiLCJwZWVrVmFsdWUiLCJOb25lQ2hhckF0bGFzIiwiU3RhdGljQ2hhckF0bGFzIiwiX2NhbnZhc0ZhY3RvcnkiLCJIVE1MQ2FudmFzRWxlbWVudCIsIl90ZXh0dXJlIiwidGV4dHVyZSIsIl9pc0NhY2hlZCIsImlzQXNjaWkiLCJpc0Jhc2ljQ29sb3IiLCJpc0RlZmF1bHRDb2xvciIsImlzRGVmYXVsdEJhY2tncm91bmQiLCJjaGFyQXRsYXNDZWxsV2lkdGgiLCJjaGFyQXRsYXNDZWxsSGVpZ2h0IiwiX2NsZWFyU3RhdGUiLCJfZGlkU3RhdGVDaGFuZ2UiLCJ2aWV3cG9ydFN0YXJ0Um93Iiwidmlld3BvcnRFbmRSb3ciLCJ2aWV3cG9ydENhcHBlZFN0YXJ0Um93Iiwidmlld3BvcnRDYXBwZWRFbmRSb3ciLCJzdGFydFJvd0VuZENvbCIsIm1pZGRsZVJvd3NDb3VudCIsIl9hcmVDb29yZGluYXRlc0VxdWFsIiwiY29vcmQxIiwiY29vcmQyIiwiaXNGb2N1c2VkIiwiX2N1cnNvclJlbmRlcmVycyIsIl9yZW5kZXJCYXJDdXJzb3IiLCJfcmVuZGVyQmxvY2tDdXJzb3IiLCJfcmVuZGVyVW5kZXJsaW5lQ3Vyc29yIiwiX2NsZWFyQ3Vyc29yIiwiX2N1cnNvckJsaW5rU3RhdGVNYW5hZ2VyIiwicmVzdW1lIiwiQ3Vyc29yQmxpbmtTdGF0ZU1hbmFnZXIiLCJfcmVuZGVyIiwicmVzdGFydEJsaW5rQW5pbWF0aW9uIiwiaXNQYXVzZWQiLCJ0cmlnZ2VyZWRCeUFuaW1hdGlvbkZyYW1lIiwiY3Vyc29yWSIsInZpZXdwb3J0UmVsYXRpdmVDdXJzb3JZIiwiX3JlbmRlckJsdXJDdXJzb3IiLCJpc0N1cnNvclZpc2libGUiLCJzdHJva2VTdHlsZSIsIl9yZW5kZXJDYWxsYmFjayIsIl9yZXN0YXJ0SW50ZXJ2YWwiLCJfYmxpbmtTdGFydFRpbWVvdXQiLCJfYmxpbmtJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJfYW5pbWF0aW9uVGltZVJlc3RhcnRlZCIsInRpbWVUb1N0YXJ0IiwidGltZSIsInNldEludGVydmFsIiwiX29uTGlua0hvdmVyIiwiX29uTGlua0xlYXZlIiwiX2NsZWFyQ3VycmVudExpbmsiLCJtaWRkbGVSb3dDb3VudCIsIl9jaGFyYWN0ZXJKb2luZXJzIiwiX25leHRDaGFyYWN0ZXJKb2luZXJJZCIsImpvaW5lciIsInJhbmdlcyIsImxpbmVTdHIiLCJyYW5nZVN0YXJ0Q29sdW1uIiwiY3VycmVudFN0cmluZ0luZGV4IiwicmFuZ2VTdGFydFN0cmluZ0luZGV4IiwicmFuZ2VBdHRyIiwiX2dldEpvaW5lZFJhbmdlcyIsImxpbmVEYXRhIiwiam9pbmVyUmFuZ2VzIiwiX21lcmdlUmFuZ2VzIiwiX3N0cmluZ1Jhbmdlc1RvQ2VsbFJhbmdlcyIsImN1cnJlbnRSYW5nZUluZGV4IiwiY3VycmVudFJhbmdlU3RhcnRlZCIsImN1cnJlbnRSYW5nZSIsImxlbmd0aF8xIiwibmV3UmFuZ2UiLCJpblJhbmdlIiwiX2xpbmtNYXRjaGVycyIsIl9uZXh0TGlua01hdGNoZXJJZCIsIl9yb3dzVG9MaW5raWZ5IiwibW91c2Vab25lTWFuYWdlciIsIl9yb3dzVGltZW91dElkIiwiX2xpbmtpZnlSb3dzIiwiVElNRV9CRUZPUkVfTElOS0lGWSIsImFic29sdXRlUm93SW5kZXhTdGFydCIsImFic29sdXRlUm93SW5kZXhFbmQiLCJvdmVyc2NhbkxpbmVMaW1pdCIsIk9WRVJTQ0FOX0NIQVJfTElNSVQiLCJfZG9MaW5raWZ5Um93IiwibWF0Y2hlciIsIm1hdGNoSW5kZXgiLCJ2YWxpZGF0aW9uQ2FsbGJhY2siLCJob3ZlclRvb2x0aXBDYWxsYmFjayIsImhvdmVyTGVhdmVDYWxsYmFjayIsInByaW9yaXR5IiwiX2FkZExpbmtNYXRjaGVyVG9MaXN0Iiwicm93SW5kZXgiLCJyZXgiLCJsYXN0SW5kZXgiLCJpc1ZhbGlkIiwiX2FkZExpbmsiLCJfY3JlYXRlTGlua0hvdmVyRXZlbnQiLCJTZWxlY3Rpb25Nb2RlbF8xIiwiQWx0Q2xpY2tIYW5kbGVyXzEiLCJOT05fQlJFQUtJTkdfU1BBQ0VfQ0hBUiIsIkFMTF9OT05fQlJFQUtJTkdfU1BBQ0VfUkVHRVgiLCJfZW5hYmxlZCIsIl9pbml0TGlzdGVuZXJzIiwiX21vZGVsIiwiU2VsZWN0aW9uTW9kZWwiLCJfYWN0aXZlU2VsZWN0aW9uTW9kZSIsIl9yZW1vdmVNb3VzZURvd25MaXN0ZW5lcnMiLCJfbW91c2VVcExpc3RlbmVyIiwiX29uTW91c2VVcCIsIl90cmltTGlzdGVuZXIiLCJfb25UcmltIiwiX29uQnVmZmVyQWN0aXZhdGUiLCJmaW5hbFNlbGVjdGlvblN0YXJ0IiwiZmluYWxTZWxlY3Rpb25FbmQiLCJsaW5lVGV4dCIsImJ1ZmZlckxpbmUiLCJpc05ld1NlbGVjdGlvbiIsIl9nZXRNb3VzZUJ1ZmZlckNvb3JkcyIsIl9hcmVDb29yZHNJblNlbGVjdGlvbiIsIl9zZWxlY3RXb3JkQXQiLCJzZWxlY3Rpb25FbmQiLCJpc1NlbGVjdEFsbEFjdGl2ZSIsInNlbGVjdGlvblN0YXJ0Iiwib25UcmltIiwiX2dldE1vdXNlRXZlbnRTY3JvbGxBbW91bnQiLCJ0ZXJtaW5hbEhlaWdodCIsIl9tb3VzZURvd25UaW1lU3RhbXAiLCJ0aW1lU3RhbXAiLCJfZHJhZ1Njcm9sbEFtb3VudCIsIl9vbkluY3JlbWVudGFsQ2xpY2siLCJfb25TaW5nbGVDbGljayIsIl9vbkRvdWJsZUNsaWNrIiwiX29uVHJpcGxlQ2xpY2siLCJfYWRkTW91c2VEb3duTGlzdGVuZXJzIiwiX2RyYWdTY3JvbGxJbnRlcnZhbFRpbWVyIiwiX2RyYWdTY3JvbGwiLCJzZWxlY3Rpb25TdGFydExlbmd0aCIsIl9zZWxlY3RMaW5lQXQiLCJwcmV2aW91c1NlbGVjdGlvbkVuZCIsIl9zZWxlY3RUb1dvcmRBdCIsInRpbWVFbGFwc2VkIiwiQWx0Q2xpY2tIYW5kbGVyIiwibW92ZSIsIl9jb252ZXJ0Vmlld3BvcnRDb2xUb0NoYXJhY3RlckluZGV4IiwiY2hhckluZGV4Iiwic2V0U2VsZWN0aW9uIiwiX2dldFdvcmRBdCIsImFsbG93V2hpdGVzcGFjZU9ubHlTZWxlY3Rpb24iLCJmb2xsb3dXcmFwcGVkTGluZXNBYm92ZSIsImZvbGxvd1dyYXBwZWRMaW5lc0JlbG93IiwiY2hhck9mZnNldCIsImxlZnRXaWRlQ2hhckNvdW50IiwicmlnaHRXaWRlQ2hhckNvdW50IiwibGVmdExvbmdDaGFyT2Zmc2V0IiwicmlnaHRMb25nQ2hhck9mZnNldCIsIl9pc0NoYXJXb3JkU2VwYXJhdG9yIiwicHJldmlvdXNCdWZmZXJMaW5lIiwicHJldmlvdXNMaW5lV29yZFBvc2l0aW9uIiwibmV4dEJ1ZmZlckxpbmUiLCJuZXh0TGluZVdvcmRQb3NpdGlvbiIsIndvcmRQb3NpdGlvbiIsImFyZVNlbGVjdGlvblZhbHVlc1JldmVyc2VkIiwid3JhcHBlZFJhbmdlIiwic3RhcnRQbHVzTGVuZ3RoIiwiX21vdXNlRXZlbnQiLCJfbGluZXMiLCJfc3RhcnRDb2wiLCJfc3RhcnRSb3ciLCJjb29yZGluYXRlcyIsImNvb3JkaW5hdGUiLCJfZW5kQ29sIiwiX2VuZFJvdyIsIl9hcnJvd1NlcXVlbmNlcyIsIl9tb3ZlSG9yaXpvbnRhbGx5T25seSIsIl9yZXNldFN0YXJ0aW5nUm93IiwiX21vdmVUb1JlcXVlc3RlZFJvdyIsIl9tb3ZlVG9SZXF1ZXN0ZWRDb2wiLCJyZXBlYXQiLCJfYnVmZmVyTGluZSIsIl93cmFwcGVkUm93c0ZvclJvdyIsIl9zZXF1ZW5jZSIsIl93cmFwcGVkUm93c0NvdW50IiwiX3ZlcnRpY2FsRGlyZWN0aW9uIiwiZGlyZWN0aW9uIiwiX2hvcml6b250YWxEaXJlY3Rpb24iLCJ3cmFwcGVkUm93cyIsImN1cnJlbnRSb3ciLCJsaW5lV3JhcHMiLCJmb3J3YXJkIiwiY3VycmVudENvbCIsImJ1ZmZlclN0ciIsInJwdCIsIl9wYXJlbnRFbGVtZW50IiwiX21lYXN1cmVFbGVtZW50IiwiZGVwdGgiLCJjbG9uZWRPYmplY3QiLCJfYXVkaW9Db250ZXh0IiwiYXVkaW9Db250ZXh0Q3RvciIsIkF1ZGlvQ29udGV4dCIsIndlYmtpdEF1ZGlvQ29udGV4dCIsImF1ZGlvQ29udGV4dCIsImJlbGxBdWRpb1NvdXJjZSIsImNyZWF0ZUJ1ZmZlclNvdXJjZSIsImRlY29kZUF1ZGlvRGF0YSIsIl9iYXNlNjRUb0FycmF5QnVmZmVyIiwiX3JlbW92ZU1pbWVUeXBlIiwiZGVzdGluYXRpb24iLCJiaW5hcnlTdHJpbmciLCJhdG9iIiwiZGF0YVVSSSIsIl9saXZlUmVnaW9uTGluZUNvdW50IiwiX2NoYXJzVG9Db25zdW1lIiwiX2FjY2Vzc2liaWxpdHlUcmVlUm9vdCIsIl9yb3dDb250YWluZXIiLCJfcm93RWxlbWVudHMiLCJfY3JlYXRlQWNjZXNzaWJpbGl0eVRyZWVOb2RlIiwiX3RvcEJvdW5kYXJ5Rm9jdXNMaXN0ZW5lciIsIl9vbkJvdW5kYXJ5Rm9jdXMiLCJfYm90dG9tQm91bmRhcnlGb2N1c0xpc3RlbmVyIiwiX3JlZnJlc2hSb3dzRGltZW5zaW9ucyIsIl9yZW5kZXJSb3dzRGVib3VuY2VyIiwiX3JlZnJlc2hSb3dzIiwiX2xpdmVSZWdpb24iLCJpbnNlcnRBZGphY2VudEVsZW1lbnQiLCJfb25SZXNpemUiLCJfb25DaGFyIiwic3BhY2VDb3VudCIsIl9vblRhYiIsImtleUNoYXIiLCJfb25LZXkiLCJfY2xlYXJMaXZlUmVnaW9uIiwiYm91bmRhcnlFbGVtZW50IiwiYmVmb3JlQm91bmRhcnlFbGVtZW50IiwiZ2V0QXR0cmlidXRlIiwicmVsYXRlZFRhcmdldCIsInRvcEJvdW5kYXJ5RWxlbWVudCIsImJvdHRvbUJvdW5kYXJ5RWxlbWVudCIsIm5ld0VsZW1lbnQiLCJjaGlsZHJlbiIsIl9yZWZyZXNoUm93RGltZW5zaW9ucyIsIk1BWF9ST1dTX1RPX1JFQUQiLCJfYW5ub3VuY2VDaGFyYWN0ZXIiLCJzZXRTaXplIiwicG9zSW5TZXQiLCJpbm5lckhUTUwiLCJEb21SZW5kZXJlclJvd0ZhY3RvcnlfMSIsIlRFUk1JTkFMX0NMQVNTX1BSRUZJWCIsIlJPV19DT05UQUlORVJfQ0xBU1MiLCJTRUxFQ1RJT05fQ0xBU1MiLCJuZXh0VGVybWluYWxJZCIsIl90ZXJtaW5hbENsYXNzIiwiX3JlZnJlc2hSb3dFbGVtZW50cyIsIl9zZWxlY3Rpb25Db250YWluZXIiLCJfcm93RmFjdG9yeSIsIkRvbVJlbmRlcmVyUm93RmFjdG9yeSIsIl90aGVtZVN0eWxlRWxlbWVudCIsIl9kaW1lbnNpb25zU3R5bGVFbGVtZW50Iiwib3ZlcmZsb3ciLCJzdHlsZXMiLCJfdGVybWluYWxTZWxlY3RvciIsIkJPTERfQ0xBU1MiLCJJVEFMSUNfQ0xBU1MiLCJDVVJTT1JfQ0xBU1MiLCJDVVJTT1JfU1RZTEVfQkxPQ0tfQ0xBU1MiLCJDVVJTT1JfU1RZTEVfQkFSX0NMQVNTIiwiQ1VSU09SX1NUWUxFX1VOREVSTElORV9DTEFTUyIsImRvY3VtZW50RnJhZ21lbnQiLCJfY3JlYXRlU2VsZWN0aW9uRWxlbWVudCIsImVuZENvbF8xIiwiY29sU3RhcnQiLCJjb2xFbmQiLCJjdXJzb3JBYnNvbHV0ZVkiLCJjdXJzb3JYIiwicm93RWxlbWVudCIsImNyZWF0ZVJvdyIsIl9zZXRDZWxsVW5kZXJsaW5lIiwidGV4dERlY29yYXRpb24iLCJpc0N1cnNvclJvdyIsImxpbmVMZW5ndGgiLCJjaGFyRWxlbWVudCIsIktFWUNPREVfS0VZX01BUFBJTkdTIiwiNDgiLCI0OSIsIjUwIiwiNTEiLCI1MiIsIjUzIiwiNTQiLCI1NSIsIjU2IiwiNTciLCIxODYiLCIxODciLCIxODgiLCIxODkiLCIxOTAiLCIxOTEiLCIxOTIiLCIyMTkiLCIyMjAiLCIyMjEiLCIyMjIiLCJhcHBsaWNhdGlvbkN1cnNvck1vZGUiLCJtb2RpZmllcnMiLCJrZXlNYXBwaW5nIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsR0FBQSxDQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFFBQUEsSUFVQSxPQU5BSSxFQUFBTCxHQUFB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RUFBQUksTUFBQXhrQixFQUFBNGpCLG9CQUFBLElBQ0F4aEIsS0FBQTJSLE9BQUFPLEtBQUEsR0FBQWxTLEtBQUFpaUIsWUFBQUQsRUFBQUssT0FBQXprQixFQUFBNGpCLG9CQUFBLElBQ0F4aEIsS0FBQTJSLE9BQUFPLEtBQUEsR0FBQWxTLEtBQUFpaUIsWUFBQUQsRUFBQU0sS0FBQTFrQixFQUFBNGpCLG9CQUFBLElBQ0F4aEIsS0FBQTJSLE9BQUFPLEtBQUEsR0FBQWxTLEtBQUFpaUIsWUFBQUQsRUFBQU8sUUFBQTNrQixFQUFBNGpCLG9CQUFBLElBQ0F4aEIsS0FBQTJSLE9BQUFPLEtBQUEsR0FBQWxTLEtBQUFpaUIsWUFBQUQsRUFBQVEsS0FBQTVrQixFQUFBNGpCLG9CQUFBLElBQ0F4aEIsS0FBQTJSLE9BQUFPLEtBQUEsR0FBQWxTLEtBQUFpaUIsWUFBQUQsRUFBQVMsTUFBQTdrQixFQUFBNGpCLG9CQUFBLElBQ0F4aEIsS0FBQTJSLE9BQUFPLEtBQUEsR0FBQWxTLEtBQUFpaUIsWUFBQUQsRUFBQVUsWUFBQTlrQixFQUFBNGpCLG9CQUFBLElBQ0F4aEIsS0FBQTJSLE9BQUFPLEtBQUEsR0FBQWxTLEtBQUFpaUIsWUFBQUQsRUFBQVcsVUFBQS9rQixFQUFBNGpCLG9CQUFBLElBQ0F4aEIsS0FBQTJSLE9BQUFPLEtBQUEsSUFBQWxTLEtBQUFpaUIsWUFBQUQsRUFBQVksWUFBQWhsQixFQUFBNGpCLG9CQUFBLEtBQ0F4aEIsS0FBQTJSLE9BQUFPLEtBQUEsSUFBQWxTLEtBQUFpaUIsWUFBQUQsRUFBQWEsYUFBQWpsQixFQUFBNGpCLG9CQUFBLEtBQ0F4aEIsS0FBQTJSLE9BQUFPLEtBQUEsSUFBQWxTLEtBQUFpaUIsWUFBQUQsRUFBQWMsV0FBQWxsQixFQUFBNGpCLG9CQUFBLEtBQ0F4aEIsS0FBQTJSLE9BQUFPLEtBQUEsSUFBQWxTLEtBQUFpaUIsWUFBQUQsRUFBQWUsY0FBQW5sQixFQUFBNGpCLG9CQUFBLEtBQ0F4aEIsS0FBQTJSLE9BQUFPLEtBQUEsSUFBQWxTLEtBQUFpaUIsWUFBQUQs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QSxJQUNBQyxJQUFNLElBQ05DLElBQUEsS0FFQTExRCxFQUFBcXpELFNBQUEsR0FDQXVDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxLQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBaEIsSUFBQSxJQUNBTyxJQUFNLElBQ05DLElBQUEsSUFDQUMsSUFBTSxJQUNOQyxJQUFBLEtBRUExMUQsRUFBQXF6RCxTQUFBLEdBQ0F1QyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsS0FBQSxJQUNBQyxJQUFBLElBQ0FSLElBQU0sSUFDTkMsSUFBQSxJQUNBQyxJQUFNLElBQ05DLElBQUEsS0FFQTExRCxFQUFBcXpELFNBQUEsR0FDQXNDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLEtBQUEsSUFDQUMsSUFBQSxJQUNBZixJQUFBLElBQ0FPLElBQU0sSUFDTkMsSUFBQSxJQUNBQyxJQUFNLElBQ05DLElBQUEsS0FFQTExRCxFQUFBcXpELFNBQUEsRUFDQXJ6RCxFQUFBcXpELFNBQUEsSUFDQXVDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxLQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBaEIsSUFBQSxJQUNBTyxJQUFVLElBQ1ZDLElBQUEsSUFDQUMsSUFBVSxJQUNWQyxJQUFBLEtBRUExMUQsRUFBQXF6RCxTQUFBLEdBQ0FzQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxLQUFBLElBQ0FDLElBQUEsSUFDQVIsSUFBTSxJQUNOQyxJQUFBLElBQ0FDLElBQU0sS0FFTnoxRCxFQUFBcXpELFNBQUEsRUFDQXJ6RCxFQUFBcXpELFNBQUEsSUFDQXVDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxLQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBaEIsSUFBQSxJQUNBTyxJQUFVLElBQ1ZDLElBQUEsSUFDQUMsSUFBVSxJQUNWQyxJQUFBLEtBRUExMUQsRUFBQXF6RCxTQUFBLE1BQ0FzQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxLQUFBLElBQ0FDLElBQUEsSUFDQUMs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Q0F4MkMsRUFBQTlJLElBQUE2TyxPQUFBTSxhQUFBLEdBRUEweUIsRUFBQXlkLFNBQUEsSUFBQXpkLEVBQUF5ZCxTQUFBLEdBQ0F4MkMsRUFBQTlJLElBQUE2TyxPQUFBTSxhQUFBMHlCLEVBQUF5ZCxRQUFBLE9BRUEsS0FBQXpkLEVBQUF5ZCxRQUNBeDJDLEVBQUE5SSxJQUFBNk8sT0FBQU0sYUFBQSxLQUVBLE1BQUEweUIsRUFBQXlkLFFBQ0F4MkMsRUFBQTlJLElBQUE2TyxPQUFBTSxhQUFBLElBRUEsTUFBQTB5QixFQUFBeWQsUUFDQXgyQyxFQUFBOUksSUFBQTZPLE9BQUFNLGFBQUEsSUFFQSxNQUFBMHlCLEVBQUF5ZCxVQUNBeDJDLEVBQUE5SSxJQUFBNk8sT0FBQU0sYUFBQSxLQXFCQSxPQUFBckcsaUNDblZBM0osT0FBQUMsZUFBQWIsRUFBQSxjQUE4Q21CLE9BQUEsSUFDOUMsSUFBQW00QixFQUFpQng1QixFQUFRLElBQ3pCRyxFQUFBRCxRQUFBczVCLEVBQUFFIiwiZmlsZSI6InRlcm1pbmFsLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA0Nyk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQ2lyY3VsYXJMaXN0XzEgPSByZXF1aXJlKFwiLi9jb21tb24vQ2lyY3VsYXJMaXN0XCIpO1xudmFyIEV2ZW50RW1pdHRlcl8xID0gcmVxdWlyZShcIi4vY29tbW9uL0V2ZW50RW1pdHRlclwiKTtcbnZhciBCdWZmZXJMaW5lXzEgPSByZXF1aXJlKFwiLi9CdWZmZXJMaW5lXCIpO1xudmFyIFR5cGVzXzEgPSByZXF1aXJlKFwiLi9yZW5kZXJlci9hdGxhcy9UeXBlc1wiKTtcbmV4cG9ydHMuREVGQVVMVF9BVFRSID0gKDAgPDwgMTgpIHwgKFR5cGVzXzEuREVGQVVMVF9DT0xPUiA8PCA5KSB8ICgyNTYgPDwgMCk7XG5leHBvcnRzLkNIQVJfREFUQV9BVFRSX0lOREVYID0gMDtcbmV4cG9ydHMuQ0hBUl9EQVRBX0NIQVJfSU5ERVggPSAxO1xuZXhwb3J0cy5DSEFSX0RBVEFfV0lEVEhfSU5ERVggPSAyO1xuZXhwb3J0cy5DSEFSX0RBVEFfQ09ERV9JTkRFWCA9IDM7XG5leHBvcnRzLk1BWF9CVUZGRVJfU0laRSA9IDQyOTQ5NjcyOTU7XG5leHBvcnRzLk5VTExfQ0VMTF9DSEFSID0gJyAnO1xuZXhwb3J0cy5OVUxMX0NFTExfV0lEVEggPSAxO1xuZXhwb3J0cy5OVUxMX0NFTExfQ09ERSA9IDMyO1xudmFyIEJ1ZmZlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQnVmZmVyKF90ZXJtaW5hbCwgX2hhc1Njcm9sbGJhY2spIHtcbiAgICAgICAgdGhpcy5fdGVybWluYWwgPSBfdGVybWluYWw7XG4gICAgICAgIHRoaXMuX2hhc1Njcm9sbGJhY2sgPSBfaGFzU2Nyb2xsYmFjaztcbiAgICAgICAgdGhpcy5tYXJrZXJzID0gW107XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICB9XG4gICAgQnVmZmVyLnByb3RvdHlwZS5zZXRCdWZmZXJMaW5lRmFjdG9yeSA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgIGlmICh0eXBlID09PSAnSnNBcnJheScpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9idWZmZXJMaW5lQ29uc3RydWN0b3IgIT09IEJ1ZmZlckxpbmVfMS5CdWZmZXJMaW5lSlNBcnJheSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2J1ZmZlckxpbmVDb25zdHJ1Y3RvciA9IEJ1ZmZlckxpbmVfMS5CdWZmZXJMaW5lSlNBcnJheTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWNyZWF0ZUxpbmVzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fYnVmZmVyTGluZUNvbnN0cnVjdG9yICE9PSBCdWZmZXJMaW5lXzEuQnVmZmVyTGluZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2J1ZmZlckxpbmVDb25zdHJ1Y3RvciA9IEJ1ZmZlckxpbmVfMS5CdWZmZXJMaW5lO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlY3JlYXRlTGluZXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgQnVmZmVyLnByb3RvdHlwZS5fcmVjcmVhdGVMaW5lcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmxpbmVzKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGluZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBvbGRMaW5lID0gdGhpcy5saW5lcy5nZXQoaSk7XG4gICAgICAgICAgICB2YXIgbmV3TGluZSA9IG5ldyB0aGlzLl9idWZmZXJMaW5lQ29uc3RydWN0b3Iob2xkTGluZS5sZW5ndGgpO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBvbGRMaW5lLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgICAgbmV3TGluZS5zZXQoaiwgb2xkTGluZS5nZXQoaikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5saW5lcy5zZXQoaSwgbmV3TGluZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJ1ZmZlci5wcm90b3R5cGUuZ2V0QmxhbmtMaW5lID0gZnVuY3Rpb24gKGF0dHIsIGlzV3JhcHBlZCkge1xuICAgICAgICB2YXIgZmlsbENoYXJEYXRhID0gW2F0dHIsIGV4cG9ydHMuTlVMTF9DRUxMX0NIQVIsIGV4cG9ydHMuTlVMTF9DRUxMX1dJRFRILCBleHBvcnRzLk5VTExfQ0VMTF9DT0RFXTtcbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzLl9idWZmZXJMaW5lQ29uc3RydWN0b3IodGhpcy5fdGVybWluYWwuY29scywgZmlsbENoYXJEYXRhLCBpc1dyYXBwZWQpO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlci5wcm90b3R5cGUsIFwiaGFzU2Nyb2xsYmFja1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hhc1Njcm9sbGJhY2sgJiYgdGhpcy5saW5lcy5tYXhMZW5ndGggPiB0aGlzLl90ZXJtaW5hbC5yb3dzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLnByb3RvdHlwZSwgXCJpc0N1cnNvckluVmlld3BvcnRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhYnNvbHV0ZVkgPSB0aGlzLnliYXNlICsgdGhpcy55O1xuICAgICAgICAgICAgdmFyIHJlbGF0aXZlWSA9IGFic29sdXRlWSAtIHRoaXMueWRpc3A7XG4gICAgICAgICAgICByZXR1cm4gKHJlbGF0aXZlWSA+PSAwICYmIHJlbGF0aXZlWSA8IHRoaXMuX3Rlcm1pbmFsLnJvd3MpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBCdWZmZXIucHJvdG90eXBlLl9nZXRDb3JyZWN0QnVmZmVyTGVuZ3RoID0gZnVuY3Rpb24gKHJvd3MpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9oYXNTY3JvbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gcm93cztcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29ycmVjdEJ1ZmZlckxlbmd0aCA9IHJvd3MgKyB0aGlzLl90ZXJtaW5hbC5vcHRpb25zLnNjcm9sbGJhY2s7XG4gICAgICAgIHJldHVybiBjb3JyZWN0QnVmZmVyTGVuZ3RoID4gZXhwb3J0cy5NQVhfQlVGRkVSX1NJWkUgPyBleHBvcnRzLk1BWF9CVUZGRVJfU0laRSA6IGNvcnJlY3RCdWZmZXJMZW5ndGg7XG4gICAgfTtcbiAgICBCdWZmZXIucHJvdG90eXBlLmZpbGxWaWV3cG9ydFJvd3MgPSBmdW5jdGlvbiAoZmlsbEF0dHIpIHtcbiAgICAgICAgaWYgKHRoaXMubGluZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBpZiAoZmlsbEF0dHIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGZpbGxBdHRyID0gZXhwb3J0cy5ERUZBVUxUX0FUVFI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaSA9IHRoaXMuX3Rlcm1pbmFsLnJvd3M7XG4gICAgICAgICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5saW5lcy5wdXNoKHRoaXMuZ2V0QmxhbmtMaW5lKGZpbGxBdHRyKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJ1ZmZlci5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2V0QnVmZmVyTGluZUZhY3RvcnkodGhpcy5fdGVybWluYWwub3B0aW9ucy5leHBlcmltZW50YWxCdWZmZXJMaW5lSW1wbCk7XG4gICAgICAgIHRoaXMueWRpc3AgPSAwO1xuICAgICAgICB0aGlzLnliYXNlID0gMDtcbiAgICAgICAgdGhpcy55ID0gMDtcbiAgICAgICAgdGhpcy54ID0gMDtcbiAgICAgICAgdGhpcy5saW5lcyA9IG5ldyBDaXJjdWxhckxpc3RfMS5DaXJjdWxhckxpc3QodGhpcy5fZ2V0Q29ycmVjdEJ1ZmZlckxlbmd0aCh0aGlzLl90ZXJtaW5hbC5yb3dzKSk7XG4gICAgICAgIHRoaXMuc2Nyb2xsVG9wID0gMDtcbiAgICAgICAgdGhpcy5zY3JvbGxCb3R0b20gPSB0aGlzLl90ZXJtaW5hbC5yb3dzIC0gMTtcbiAgICAgICAgdGhpcy5zZXR1cFRhYlN0b3BzKCk7XG4gICAgfTtcbiAgICBCdWZmZXIucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uIChuZXdDb2xzLCBuZXdSb3dzKSB7XG4gICAgICAgIHZhciBuZXdNYXhMZW5ndGggPSB0aGlzLl9nZXRDb3JyZWN0QnVmZmVyTGVuZ3RoKG5ld1Jvd3MpO1xuICAgICAgICBpZiAobmV3TWF4TGVuZ3RoID4gdGhpcy5saW5lcy5tYXhMZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMubGluZXMubWF4TGVuZ3RoID0gbmV3TWF4TGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmxpbmVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl90ZXJtaW5hbC5jb2xzIDwgbmV3Q29scykge1xuICAgICAgICAgICAgICAgIHZhciBjaCA9IFtleHBvcnRzLkRFRkFVTFRfQVRUUiwgZXhwb3J0cy5OVUxMX0NFTExfQ0hBUiwgZXhwb3J0cy5OVUxMX0NFTExfV0lEVEgsIGV4cG9ydHMuTlVMTF9DRUxMX0NPREVdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5saW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpbmVzLmdldChpKS5yZXNpemUobmV3Q29scywgY2gpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBhZGRUb1kgPSAwO1xuICAgICAgICAgICAgaWYgKHRoaXMuX3Rlcm1pbmFsLnJvd3MgPCBuZXdSb3dzKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgeSA9IHRoaXMuX3Rlcm1pbmFsLnJvd3M7IHkgPCBuZXdSb3dzOyB5KyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubGluZXMubGVuZ3RoIDwgbmV3Um93cyArIHRoaXMueWJhc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnliYXNlID4gMCAmJiB0aGlzLmxpbmVzLmxlbmd0aCA8PSB0aGlzLnliYXNlICsgdGhpcy55ICsgYWRkVG9ZICsgMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueWJhc2UtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRUb1krKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy55ZGlzcCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55ZGlzcC0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWxsQ2hhckRhdGEgPSBbZXhwb3J0cy5ERUZBVUxUX0FUVFIsIGV4cG9ydHMuTlVMTF9DRUxMX0NIQVIsIGV4cG9ydHMuTlVMTF9DRUxMX1dJRFRILCBleHBvcnRzLk5VTExfQ0VMTF9DT0RFXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpbmVzLnB1c2gobmV3IHRoaXMuX2J1ZmZlckxpbmVDb25zdHJ1Y3RvcihuZXdDb2xzLCBmaWxsQ2hhckRhdGEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHkgPSB0aGlzLl90ZXJtaW5hbC5yb3dzOyB5ID4gbmV3Um93czsgeS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmxpbmVzLmxlbmd0aCA+IG5ld1Jvd3MgKyB0aGlzLnliYXNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5saW5lcy5sZW5ndGggPiB0aGlzLnliYXNlICsgdGhpcy55ICsgMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGluZXMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnliYXNlKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy55ZGlzcCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5ld01heExlbmd0aCA8IHRoaXMubGluZXMubWF4TGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFtb3VudFRvVHJpbSA9IHRoaXMubGluZXMubGVuZ3RoIC0gbmV3TWF4TGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChhbW91bnRUb1RyaW0gPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGluZXMudHJpbVN0YXJ0KGFtb3VudFRvVHJpbSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMueWJhc2UgPSBNYXRoLm1heCh0aGlzLnliYXNlIC0gYW1vdW50VG9UcmltLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55ZGlzcCA9IE1hdGgubWF4KHRoaXMueWRpc3AgLSBhbW91bnRUb1RyaW0sIDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmxpbmVzLm1heExlbmd0aCA9IG5ld01heExlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMueCA9IE1hdGgubWluKHRoaXMueCwgbmV3Q29scyAtIDEpO1xuICAgICAgICAgICAgdGhpcy55ID0gTWF0aC5taW4odGhpcy55LCBuZXdSb3dzIC0gMSk7XG4gICAgICAgICAgICBpZiAoYWRkVG9ZKSB7XG4gICAgICAgICAgICAgICAgdGhpcy55ICs9IGFkZFRvWTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2F2ZWRZID0gTWF0aC5taW4odGhpcy5zYXZlZFksIG5ld1Jvd3MgLSAxKTtcbiAgICAgICAgICAgIHRoaXMuc2F2ZWRYID0gTWF0aC5taW4odGhpcy5zYXZlZFgsIG5ld0NvbHMgLSAxKTtcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsVG9wID0gMDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNjcm9sbEJvdHRvbSA9IG5ld1Jvd3MgLSAxO1xuICAgIH07XG4gICAgQnVmZmVyLnByb3RvdHlwZS5zdHJpbmdJbmRleFRvQnVmZmVySW5kZXggPSBmdW5jdGlvbiAobGluZUluZGV4LCBzdHJpbmdJbmRleCkge1xuICAgICAgICB3aGlsZSAoc3RyaW5nSW5kZXgpIHtcbiAgICAgICAgICAgIHZhciBsaW5lID0gdGhpcy5saW5lcy5nZXQobGluZUluZGV4KTtcbiAgICAgICAgICAgIGlmICghbGluZSkge1xuICAgICAgICAgICAgICAgIFstMSwgLTFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgc3RyaW5nSW5kZXggLT0gbGluZS5nZXQoaSlbZXhwb3J0cy5DSEFSX0RBVEFfQ0hBUl9JTkRFWF0ubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChzdHJpbmdJbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtsaW5lSW5kZXgsIGldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxpbmVJbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbbGluZUluZGV4LCAwXTtcbiAgICB9O1xuICAgIEJ1ZmZlci5wcm90b3R5cGUudHJhbnNsYXRlQnVmZmVyTGluZVRvU3RyaW5nID0gZnVuY3Rpb24gKGxpbmVJbmRleCwgdHJpbVJpZ2h0LCBzdGFydENvbCwgZW5kQ29sKSB7XG4gICAgICAgIGlmIChzdGFydENvbCA9PT0gdm9pZCAwKSB7IHN0YXJ0Q29sID0gMDsgfVxuICAgICAgICBpZiAoZW5kQ29sID09PSB2b2lkIDApIHsgZW5kQ29sID0gbnVsbDsgfVxuICAgICAgICB2YXIgbGluZVN0cmluZyA9ICcnO1xuICAgICAgICB2YXIgbGluZSA9IHRoaXMubGluZXMuZ2V0KGxpbmVJbmRleCk7XG4gICAgICAgIGlmICghbGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdGFydEluZGV4ID0gc3RhcnRDb2w7XG4gICAgICAgIGlmIChlbmRDb2wgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGVuZENvbCA9IGxpbmUubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlbmRJbmRleCA9IGVuZENvbDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgY2hhciA9IGxpbmUuZ2V0KGkpO1xuICAgICAgICAgICAgbGluZVN0cmluZyArPSBjaGFyW2V4cG9ydHMuQ0hBUl9EQVRBX0NIQVJfSU5ERVhdO1xuICAgICAgICAgICAgaWYgKGNoYXJbZXhwb3J0cy5DSEFSX0RBVEFfV0lEVEhfSU5ERVhdID09PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0Q29sID49IGkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRJbmRleC0tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZW5kQ29sID4gaSkge1xuICAgICAgICAgICAgICAgICAgICBlbmRJbmRleC0tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChjaGFyW2V4cG9ydHMuQ0hBUl9EQVRBX0NIQVJfSU5ERVhdLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0Q29sID4gaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRJbmRleCArPSBjaGFyW2V4cG9ydHMuQ0hBUl9EQVRBX0NIQVJfSU5ERVhdLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVuZENvbCA+IGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZEluZGV4ICs9IGNoYXJbZXhwb3J0cy5DSEFSX0RBVEFfQ0hBUl9JTkRFWF0ubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodHJpbVJpZ2h0KSB7XG4gICAgICAgICAgICB2YXIgcmlnaHRXaGl0ZXNwYWNlSW5kZXggPSBsaW5lU3RyaW5nLnNlYXJjaCgvXFxzKyQvKTtcbiAgICAgICAgICAgIGlmIChyaWdodFdoaXRlc3BhY2VJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICBlbmRJbmRleCA9IE1hdGgubWluKGVuZEluZGV4LCByaWdodFdoaXRlc3BhY2VJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZW5kSW5kZXggPD0gc3RhcnRJbmRleCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGluZVN0cmluZy5zdWJzdHJpbmcoc3RhcnRJbmRleCwgZW5kSW5kZXgpO1xuICAgIH07XG4gICAgQnVmZmVyLnByb3RvdHlwZS5nZXRXcmFwcGVkUmFuZ2VGb3JMaW5lID0gZnVuY3Rpb24gKHkpIHtcbiAgICAgICAgdmFyIGZpcnN0ID0geTtcbiAgICAgICAgdmFyIGxhc3QgPSB5O1xuICAgICAgICB3aGlsZSAoZmlyc3QgPiAwICYmIHRoaXMubGluZXMuZ2V0KGZpcnN0KS5pc1dyYXBwZWQpIHtcbiAgICAgICAgICAgIGZpcnN0LS07XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGxhc3QgKyAxIDwgdGhpcy5saW5lcy5sZW5ndGggJiYgdGhpcy5saW5lcy5nZXQobGFzdCArIDEpLmlzV3JhcHBlZCkge1xuICAgICAgICAgICAgbGFzdCsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IGZpcnN0OiBmaXJzdCwgbGFzdDogbGFzdCB9O1xuICAgIH07XG4gICAgQnVmZmVyLnByb3RvdHlwZS5zZXR1cFRhYlN0b3BzID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgaWYgKGkgIT09IG51bGwgJiYgaSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMudGFic1tpXSkge1xuICAgICAgICAgICAgICAgIGkgPSB0aGlzLnByZXZTdG9wKGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50YWJzID0ge307XG4gICAgICAgICAgICBpID0gMDtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKDsgaSA8IHRoaXMuX3Rlcm1pbmFsLmNvbHM7IGkgKz0gdGhpcy5fdGVybWluYWwub3B0aW9ucy50YWJTdG9wV2lkdGgpIHtcbiAgICAgICAgICAgIHRoaXMudGFic1tpXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJ1ZmZlci5wcm90b3R5cGUucHJldlN0b3AgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICBpZiAoeCA9PT0gbnVsbCB8fCB4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHggPSB0aGlzLng7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKCF0aGlzLnRhYnNbLS14XSAmJiB4ID4gMClcbiAgICAgICAgICAgIDtcbiAgICAgICAgcmV0dXJuIHggPj0gdGhpcy5fdGVybWluYWwuY29scyA/IHRoaXMuX3Rlcm1pbmFsLmNvbHMgLSAxIDogeCA8IDAgPyAwIDogeDtcbiAgICB9O1xuICAgIEJ1ZmZlci5wcm90b3R5cGUubmV4dFN0b3AgPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICBpZiAoeCA9PT0gbnVsbCB8fCB4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHggPSB0aGlzLng7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKCF0aGlzLnRhYnNbKyt4XSAmJiB4IDwgdGhpcy5fdGVybWluYWwuY29scylcbiAgICAgICAgICAgIDtcbiAgICAgICAgcmV0dXJuIHggPj0gdGhpcy5fdGVybWluYWwuY29scyA/IHRoaXMuX3Rlcm1pbmFsLmNvbHMgLSAxIDogeCA8IDAgPyAwIDogeDtcbiAgICB9O1xuICAgIEJ1ZmZlci5wcm90b3R5cGUuYWRkTWFya2VyID0gZnVuY3Rpb24gKHkpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBNYXJrZXIoeSk7XG4gICAgICAgIHRoaXMubWFya2Vycy5wdXNoKG1hcmtlcik7XG4gICAgICAgIG1hcmtlci5yZWdpc3Rlcih0aGlzLmxpbmVzLmFkZERpc3Bvc2FibGVMaXN0ZW5lcigndHJpbScsIGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgIG1hcmtlci5saW5lIC09IGFtb3VudDtcbiAgICAgICAgICAgIGlmIChtYXJrZXIubGluZSA8IDApIHtcbiAgICAgICAgICAgICAgICBtYXJrZXIuZGlzcG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICAgIG1hcmtlci5yZWdpc3RlcihtYXJrZXIuYWRkRGlzcG9zYWJsZUxpc3RlbmVyKCdkaXNwb3NlJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX3JlbW92ZU1hcmtlcihtYXJrZXIpOyB9KSk7XG4gICAgICAgIHJldHVybiBtYXJrZXI7XG4gICAgfTtcbiAgICBCdWZmZXIucHJvdG90eXBlLl9yZW1vdmVNYXJrZXIgPSBmdW5jdGlvbiAobWFya2VyKSB7XG4gICAgICAgIHRoaXMubWFya2Vycy5zcGxpY2UodGhpcy5tYXJrZXJzLmluZGV4T2YobWFya2VyKSwgMSk7XG4gICAgfTtcbiAgICBCdWZmZXIucHJvdG90eXBlLml0ZXJhdG9yID0gZnVuY3Rpb24gKHRyaW1SaWdodCwgc3RhcnRJbmRleCwgZW5kSW5kZXgsIHN0YXJ0T3ZlcnNjYW4sIGVuZE92ZXJzY2FuKSB7XG4gICAgICAgIHJldHVybiBuZXcgQnVmZmVyU3RyaW5nSXRlcmF0b3IodGhpcywgdHJpbVJpZ2h0LCBzdGFydEluZGV4LCBlbmRJbmRleCwgc3RhcnRPdmVyc2NhbiwgZW5kT3ZlcnNjYW4pO1xuICAgIH07XG4gICAgcmV0dXJuIEJ1ZmZlcjtcbn0oKSk7XG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlcjtcbnZhciBNYXJrZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNYXJrZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWFya2VyKGxpbmUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMubGluZSA9IGxpbmU7XG4gICAgICAgIF90aGlzLl9pZCA9IE1hcmtlci5fbmV4dElkKys7XG4gICAgICAgIF90aGlzLmlzRGlzcG9zZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWFya2VyLnByb3RvdHlwZSwgXCJpZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5faWQ7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE1hcmtlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNEaXNwb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNEaXNwb3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuZW1pdCgnZGlzcG9zZScpO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIE1hcmtlci5fbmV4dElkID0gMTtcbiAgICByZXR1cm4gTWFya2VyO1xufShFdmVudEVtaXR0ZXJfMS5FdmVudEVtaXR0ZXIpKTtcbmV4cG9ydHMuTWFya2VyID0gTWFya2VyO1xudmFyIEJ1ZmZlclN0cmluZ0l0ZXJhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCdWZmZXJTdHJpbmdJdGVyYXRvcihfYnVmZmVyLCBfdHJpbVJpZ2h0LCBfc3RhcnRJbmRleCwgX2VuZEluZGV4LCBfc3RhcnRPdmVyc2NhbiwgX2VuZE92ZXJzY2FuKSB7XG4gICAgICAgIGlmIChfc3RhcnRJbmRleCA9PT0gdm9pZCAwKSB7IF9zdGFydEluZGV4ID0gMDsgfVxuICAgICAgICBpZiAoX2VuZEluZGV4ID09PSB2b2lkIDApIHsgX2VuZEluZGV4ID0gX2J1ZmZlci5saW5lcy5sZW5ndGg7IH1cbiAgICAgICAgaWYgKF9zdGFydE92ZXJzY2FuID09PSB2b2lkIDApIHsgX3N0YXJ0T3ZlcnNjYW4gPSAwOyB9XG4gICAgICAgIGlmIChfZW5kT3ZlcnNjYW4gPT09IHZvaWQgMCkgeyBfZW5kT3ZlcnNjYW4gPSAwOyB9XG4gICAgICAgIHRoaXMuX2J1ZmZlciA9IF9idWZmZXI7XG4gICAgICAgIHRoaXMuX3RyaW1SaWdodCA9IF90cmltUmlnaHQ7XG4gICAgICAgIHRoaXMuX3N0YXJ0SW5kZXggPSBfc3RhcnRJbmRleDtcbiAgICAgICAgdGhpcy5fZW5kSW5kZXggPSBfZW5kSW5kZXg7XG4gICAgICAgIHRoaXMuX3N0YXJ0T3ZlcnNjYW4gPSBfc3RhcnRPdmVyc2NhbjtcbiAgICAgICAgdGhpcy5fZW5kT3ZlcnNjYW4gPSBfZW5kT3ZlcnNjYW47XG4gICAgICAgIGlmICh0aGlzLl9zdGFydEluZGV4IDwgMCkge1xuICAgICAgICAgICAgdGhpcy5fc3RhcnRJbmRleCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2VuZEluZGV4ID4gdGhpcy5fYnVmZmVyLmxpbmVzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5fZW5kSW5kZXggPSB0aGlzLl9idWZmZXIubGluZXMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2N1cnJlbnQgPSB0aGlzLl9zdGFydEluZGV4O1xuICAgIH1cbiAgICBCdWZmZXJTdHJpbmdJdGVyYXRvci5wcm90b3R5cGUuaGFzTmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2N1cnJlbnQgPCB0aGlzLl9lbmRJbmRleDtcbiAgICB9O1xuICAgIEJ1ZmZlclN0cmluZ0l0ZXJhdG9yLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcmFuZ2UgPSB0aGlzLl9idWZmZXIuZ2V0V3JhcHBlZFJhbmdlRm9yTGluZSh0aGlzLl9jdXJyZW50KTtcbiAgICAgICAgaWYgKHJhbmdlLmZpcnN0IDwgdGhpcy5fc3RhcnRJbmRleCAtIHRoaXMuX3N0YXJ0T3ZlcnNjYW4pIHtcbiAgICAgICAgICAgIHJhbmdlLmZpcnN0ID0gdGhpcy5fc3RhcnRJbmRleCAtIHRoaXMuX3N0YXJ0T3ZlcnNjYW47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJhbmdlLmxhc3QgPiB0aGlzLl9lbmRJbmRleCArIHRoaXMuX2VuZE92ZXJzY2FuKSB7XG4gICAgICAgICAgICByYW5nZS5sYXN0ID0gdGhpcy5fZW5kSW5kZXggKyB0aGlzLl9lbmRPdmVyc2NhbjtcbiAgICAgICAgfVxuICAgICAgICByYW5nZS5maXJzdCA9IE1hdGgubWF4KHJhbmdlLmZpcnN0LCAwKTtcbiAgICAgICAgcmFuZ2UubGFzdCA9IE1hdGgubWluKHJhbmdlLmxhc3QsIHRoaXMuX2J1ZmZlci5saW5lcy5sZW5ndGgpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICAgIGZvciAodmFyIGkgPSByYW5nZS5maXJzdDsgaSA8PSByYW5nZS5sYXN0OyArK2kpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSB0aGlzLl9idWZmZXIudHJhbnNsYXRlQnVmZmVyTGluZVRvU3RyaW5nKGksICh0aGlzLl90cmltUmlnaHQpID8gaSA9PT0gcmFuZ2UubGFzdCA6IGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jdXJyZW50ID0gcmFuZ2UubGFzdCArIDE7XG4gICAgICAgIHJldHVybiB7IHJhbmdlOiByYW5nZSwgY29udGVudDogcmVzdWx0IH07XG4gICAgfTtcbiAgICByZXR1cm4gQnVmZmVyU3RyaW5nSXRlcmF0b3I7XG59KCkpO1xuZXhwb3J0cy5CdWZmZXJTdHJpbmdJdGVyYXRvciA9IEJ1ZmZlclN0cmluZ0l0ZXJhdG9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QnVmZmVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ERUZBVUxUX0NPTE9SID0gMjU2O1xuZXhwb3J0cy5JTlZFUlRFRF9ERUZBVUxUX0NPTE9SID0gMjU3O1xuZXhwb3J0cy5ESU1fT1BBQ0lUWSA9IDAuNTtcbmV4cG9ydHMuQ0hBUl9BVExBU19DRUxMX1NQQUNJTkcgPSAxO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VHlwZXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIExpZmVjeWNsZV8xID0gcmVxdWlyZShcIi4vTGlmZWN5Y2xlXCIpO1xudmFyIEV2ZW50RW1pdHRlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEV2ZW50RW1pdHRlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9ldmVudHMgPSBfdGhpcy5fZXZlbnRzIHx8IHt9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gdGhpcy5fZXZlbnRzW3R5cGVdIHx8IFtdO1xuICAgICAgICB0aGlzLl9ldmVudHNbdHlwZV0ucHVzaChsaXN0ZW5lcik7XG4gICAgfTtcbiAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZERpc3Bvc2FibGVMaXN0ZW5lciA9IGZ1bmN0aW9uICh0eXBlLCBoYW5kbGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMub24odHlwZSwgaGFuZGxlcik7XG4gICAgICAgIHZhciBkaXNwb3NlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGlzcG9zZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChkaXNwb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzLm9mZih0eXBlLCBoYW5kbGVyKTtcbiAgICAgICAgICAgICAgICBkaXNwb3NlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uICh0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoIXRoaXMuX2V2ZW50c1t0eXBlXSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvYmogPSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgICAgIHZhciBpID0gb2JqLmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICAgICAgaWYgKG9ialtpXSA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICBvYmouc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICBpZiAodGhpcy5fZXZlbnRzW3R5cGVdKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2V2ZW50c1t0eXBlXSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvYmogPSB0aGlzLl9ldmVudHNbdHlwZV07XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBvYmpbaV0uYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50c1t0eXBlXSB8fCBbXTtcbiAgICB9O1xuICAgIEV2ZW50RW1pdHRlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgIH07XG4gICAgcmV0dXJuIEV2ZW50RW1pdHRlcjtcbn0oTGlmZWN5Y2xlXzEuRGlzcG9zYWJsZSkpO1xuZXhwb3J0cy5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1FdmVudEVtaXR0ZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRGlzcG9zYWJsZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGlzcG9zYWJsZSgpIHtcbiAgICAgICAgdGhpcy5fZGlzcG9zYWJsZXMgPSBbXTtcbiAgICAgICAgdGhpcy5faXNEaXNwb3NlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBEaXNwb3NhYmxlLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9pc0Rpc3Bvc2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fZGlzcG9zYWJsZXMuZm9yRWFjaChmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5kaXNwb3NlKCk7IH0pO1xuICAgICAgICB0aGlzLl9kaXNwb3NhYmxlcy5sZW5ndGggPSAwO1xuICAgIH07XG4gICAgRGlzcG9zYWJsZS5wcm90b3R5cGUucmVnaXN0ZXIgPSBmdW5jdGlvbiAoZCkge1xuICAgICAgICB0aGlzLl9kaXNwb3NhYmxlcy5wdXNoKGQpO1xuICAgIH07XG4gICAgRGlzcG9zYWJsZS5wcm90b3R5cGUudW5yZWdpc3RlciA9IGZ1bmN0aW9uIChkKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuX2Rpc3Bvc2FibGVzLmluZGV4T2YoZCk7XG4gICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuX2Rpc3Bvc2FibGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBEaXNwb3NhYmxlO1xufSgpKTtcbmV4cG9ydHMuRGlzcG9zYWJsZSA9IERpc3Bvc2FibGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1MaWZlY3ljbGUuanMubWFwIiwiXHJcbi8qKlxyXG4gKiBFeHBvc2UgYEVtaXR0ZXJgLlxyXG4gKi9cclxuXHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG4gIG1vZHVsZS5leHBvcnRzID0gRW1pdHRlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEluaXRpYWxpemUgYSBuZXcgYEVtaXR0ZXJgLlxyXG4gKlxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIEVtaXR0ZXIob2JqKSB7XHJcbiAgaWYgKG9iaikgcmV0dXJuIG1peGluKG9iaik7XHJcbn07XHJcblxyXG4vKipcclxuICogTWl4aW4gdGhlIGVtaXR0ZXIgcHJvcGVydGllcy5cclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IG9ialxyXG4gKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAqIEBhcGkgcHJpdmF0ZVxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIG1peGluKG9iaikge1xyXG4gIGZvciAodmFyIGtleSBpbiBFbWl0dGVyLnByb3RvdHlwZSkge1xyXG4gICAgb2JqW2tleV0gPSBFbWl0dGVyLnByb3RvdHlwZVtrZXldO1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59XHJcblxyXG4vKipcclxuICogTGlzdGVuIG9uIHRoZSBnaXZlbiBgZXZlbnRgIHdpdGggYGZuYC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub24gPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcbiAgKHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdIHx8IFtdKVxyXG4gICAgLnB1c2goZm4pO1xyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEFkZHMgYW4gYGV2ZW50YCBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgaW52b2tlZCBhIHNpbmdsZVxyXG4gKiB0aW1lIHRoZW4gYXV0b21hdGljYWxseSByZW1vdmVkLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICBmdW5jdGlvbiBvbigpIHtcclxuICAgIHRoaXMub2ZmKGV2ZW50LCBvbik7XHJcbiAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gIH1cclxuXHJcbiAgb24uZm4gPSBmbjtcclxuICB0aGlzLm9uKGV2ZW50LCBvbik7XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogUmVtb3ZlIHRoZSBnaXZlbiBjYWxsYmFjayBmb3IgYGV2ZW50YCBvciBhbGxcclxuICogcmVnaXN0ZXJlZCBjYWxsYmFja3MuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9mZiA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG5cclxuICAvLyBhbGxcclxuICBpZiAoMCA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICB0aGlzLl9jYWxsYmFja3MgPSB7fTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLy8gc3BlY2lmaWMgZXZlbnRcclxuICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuICBpZiAoIWNhbGxiYWNrcykgcmV0dXJuIHRoaXM7XHJcblxyXG4gIC8vIHJlbW92ZSBhbGwgaGFuZGxlcnNcclxuICBpZiAoMSA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICBkZWxldGUgdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLy8gcmVtb3ZlIHNwZWNpZmljIGhhbmRsZXJcclxuICB2YXIgY2I7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcclxuICAgIGNiID0gY2FsbGJhY2tzW2ldO1xyXG4gICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHtcclxuICAgICAgY2FsbGJhY2tzLnNwbGljZShpLCAxKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEVtaXQgYGV2ZW50YCB3aXRoIHRoZSBnaXZlbiBhcmdzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtNaXhlZH0gLi4uXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcbiAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSlcclxuICAgICwgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuXHJcbiAgaWYgKGNhbGxiYWNrcykge1xyXG4gICAgY2FsbGJhY2tzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xyXG4gICAgICBjYWxsYmFja3NbaV0uYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm4gYXJyYXkgb2YgY2FsbGJhY2tzIGZvciBgZXZlbnRgLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHJldHVybiB7QXJyYXl9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcclxuICByZXR1cm4gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSB8fCBbXTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiB0aGlzIGVtaXR0ZXIgaGFzIGBldmVudGAgaGFuZGxlcnMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLmhhc0xpc3RlbmVycyA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICByZXR1cm4gISEgdGhpcy5saXN0ZW5lcnMoZXZlbnQpLmxlbmd0aDtcclxufTtcclxuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG52YXIgaGFzQmluYXJ5ID0gcmVxdWlyZSgnaGFzLWJpbmFyeTInKTtcbnZhciBzbGljZUJ1ZmZlciA9IHJlcXVpcmUoJ2FycmF5YnVmZmVyLnNsaWNlJyk7XG52YXIgYWZ0ZXIgPSByZXF1aXJlKCdhZnRlcicpO1xudmFyIHV0ZjggPSByZXF1aXJlKCcuL3V0ZjgnKTtcblxudmFyIGJhc2U2NGVuY29kZXI7XG5pZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykge1xuICBiYXNlNjRlbmNvZGVyID0gcmVxdWlyZSgnYmFzZTY0LWFycmF5YnVmZmVyJyk7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgd2UgYXJlIHJ1bm5pbmcgYW4gYW5kcm9pZCBicm93c2VyLiBUaGF0IHJlcXVpcmVzIHVzIHRvIHVzZVxuICogQXJyYXlCdWZmZXIgd2l0aCBwb2xsaW5nIHRyYW5zcG9ydHMuLi5cbiAqXG4gKiBodHRwOi8vZ2hpbmRhLm5ldC9qcGVnLWJsb2ItYWpheC1hbmRyb2lkL1xuICovXG5cbnZhciBpc0FuZHJvaWQgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAvQW5kcm9pZC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbi8qKlxuICogQ2hlY2sgaWYgd2UgYXJlIHJ1bm5pbmcgaW4gUGhhbnRvbUpTLlxuICogVXBsb2FkaW5nIGEgQmxvYiB3aXRoIFBoYW50b21KUyBkb2VzIG5vdCB3b3JrIGNvcnJlY3RseSwgYXMgcmVwb3J0ZWQgaGVyZTpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hcml5YS9waGFudG9tanMvaXNzdWVzLzExMzk1XG4gKiBAdHlwZSBib29sZWFuXG4gKi9cbnZhciBpc1BoYW50b21KUyA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIC9QaGFudG9tSlMvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIFdoZW4gdHJ1ZSwgYXZvaWRzIHVzaW5nIEJsb2JzIHRvIGVuY29kZSBwYXlsb2Fkcy5cbiAqIEB0eXBlIGJvb2xlYW5cbiAqL1xudmFyIGRvbnRTZW5kQmxvYnMgPSBpc0FuZHJvaWQgfHwgaXNQaGFudG9tSlM7XG5cbi8qKlxuICogQ3VycmVudCBwcm90b2NvbCB2ZXJzaW9uLlxuICovXG5cbmV4cG9ydHMucHJvdG9jb2wgPSAzO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlcy5cbiAqL1xuXG52YXIgcGFja2V0cyA9IGV4cG9ydHMucGFja2V0cyA9IHtcbiAgICBvcGVuOiAgICAgMCAgICAvLyBub24td3NcbiAgLCBjbG9zZTogICAgMSAgICAvLyBub24td3NcbiAgLCBwaW5nOiAgICAgMlxuICAsIHBvbmc6ICAgICAzXG4gICwgbWVzc2FnZTogIDRcbiAgLCB1cGdyYWRlOiAgNVxuICAsIG5vb3A6ICAgICA2XG59O1xuXG52YXIgcGFja2V0c2xpc3QgPSBrZXlzKHBhY2tldHMpO1xuXG4vKipcbiAqIFByZW1hZGUgZXJyb3IgcGFja2V0LlxuICovXG5cbnZhciBlcnIgPSB7IHR5cGU6ICdlcnJvcicsIGRhdGE6ICdwYXJzZXIgZXJyb3InIH07XG5cbi8qKlxuICogQ3JlYXRlIGEgYmxvYiBhcGkgZXZlbiBmb3IgYmxvYiBidWlsZGVyIHdoZW4gdmVuZG9yIHByZWZpeGVzIGV4aXN0XG4gKi9cblxudmFyIEJsb2IgPSByZXF1aXJlKCdibG9iJyk7XG5cbi8qKlxuICogRW5jb2RlcyBhIHBhY2tldC5cbiAqXG4gKiAgICAgPHBhY2tldCB0eXBlIGlkPiBbIDxkYXRhPiBdXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgICAgNWhlbGxvIHdvcmxkXG4gKiAgICAgM1xuICogICAgIDRcbiAqXG4gKiBCaW5hcnkgaXMgZW5jb2RlZCBpbiBhbiBpZGVudGljYWwgcHJpbmNpcGxlXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5lbmNvZGVQYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgdXRmOGVuY29kZSwgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBzdXBwb3J0c0JpbmFyeSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gc3VwcG9ydHNCaW5hcnk7XG4gICAgc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdXRmOGVuY29kZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gdXRmOGVuY29kZTtcbiAgICB1dGY4ZW5jb2RlID0gbnVsbDtcbiAgfVxuXG4gIHZhciBkYXRhID0gKHBhY2tldC5kYXRhID09PSB1bmRlZmluZWQpXG4gICAgPyB1bmRlZmluZWRcbiAgICA6IHBhY2tldC5kYXRhLmJ1ZmZlciB8fCBwYWNrZXQuZGF0YTtcblxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiBkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZW5jb2RlQXJyYXlCdWZmZXIocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyAmJiBkYXRhIGluc3RhbmNlb2YgQmxvYikge1xuICAgIHJldHVybiBlbmNvZGVCbG9iKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8vIG1pZ2h0IGJlIGFuIG9iamVjdCB3aXRoIHsgYmFzZTY0OiB0cnVlLCBkYXRhOiBkYXRhQXNCYXNlNjRTdHJpbmcgfVxuICBpZiAoZGF0YSAmJiBkYXRhLmJhc2U2NCkge1xuICAgIHJldHVybiBlbmNvZGVCYXNlNjRPYmplY3QocGFja2V0LCBjYWxsYmFjayk7XG4gIH1cblxuICAvLyBTZW5kaW5nIGRhdGEgYXMgYSB1dGYtOCBzdHJpbmdcbiAgdmFyIGVuY29kZWQgPSBwYWNrZXRzW3BhY2tldC50eXBlXTtcblxuICAvLyBkYXRhIGZyYWdtZW50IGlzIG9wdGlvbmFsXG4gIGlmICh1bmRlZmluZWQgIT09IHBhY2tldC5kYXRhKSB7XG4gICAgZW5jb2RlZCArPSB1dGY4ZW5jb2RlID8gdXRmOC5lbmNvZGUoU3RyaW5nKHBhY2tldC5kYXRhKSwgeyBzdHJpY3Q6IGZhbHNlIH0pIDogU3RyaW5nKHBhY2tldC5kYXRhKTtcbiAgfVxuXG4gIHJldHVybiBjYWxsYmFjaygnJyArIGVuY29kZWQpO1xuXG59O1xuXG5mdW5jdGlvbiBlbmNvZGVCYXNlNjRPYmplY3QocGFja2V0LCBjYWxsYmFjaykge1xuICAvLyBwYWNrZXQgZGF0YSBpcyBhbiBvYmplY3QgeyBiYXNlNjQ6IHRydWUsIGRhdGE6IGRhdGFBc0Jhc2U2NFN0cmluZyB9XG4gIHZhciBtZXNzYWdlID0gJ2InICsgZXhwb3J0cy5wYWNrZXRzW3BhY2tldC50eXBlXSArIHBhY2tldC5kYXRhLmRhdGE7XG4gIHJldHVybiBjYWxsYmFjayhtZXNzYWdlKTtcbn1cblxuLyoqXG4gKiBFbmNvZGUgcGFja2V0IGhlbHBlcnMgZm9yIGJpbmFyeSB0eXBlc1xuICovXG5cbmZ1bmN0aW9uIGVuY29kZUFycmF5QnVmZmVyKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSB7XG4gIGlmICghc3VwcG9ydHNCaW5hcnkpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVCYXNlNjRQYWNrZXQocGFja2V0LCBjYWxsYmFjayk7XG4gIH1cblxuICB2YXIgZGF0YSA9IHBhY2tldC5kYXRhO1xuICB2YXIgY29udGVudEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XG4gIHZhciByZXN1bHRCdWZmZXIgPSBuZXcgVWludDhBcnJheSgxICsgZGF0YS5ieXRlTGVuZ3RoKTtcblxuICByZXN1bHRCdWZmZXJbMF0gPSBwYWNrZXRzW3BhY2tldC50eXBlXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb250ZW50QXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICByZXN1bHRCdWZmZXJbaSsxXSA9IGNvbnRlbnRBcnJheVtpXTtcbiAgfVxuXG4gIHJldHVybiBjYWxsYmFjayhyZXN1bHRCdWZmZXIuYnVmZmVyKTtcbn1cblxuZnVuY3Rpb24gZW5jb2RlQmxvYkFzQXJyYXlCdWZmZXIocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spIHtcbiAgaWYgKCFzdXBwb3J0c0JpbmFyeSkge1xuICAgIHJldHVybiBleHBvcnRzLmVuY29kZUJhc2U2NFBhY2tldChwYWNrZXQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHZhciBmciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gIGZyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgIGV4cG9ydHMuZW5jb2RlUGFja2V0KHsgdHlwZTogcGFja2V0LnR5cGUsIGRhdGE6IGZyLnJlc3VsdCB9LCBzdXBwb3J0c0JpbmFyeSwgdHJ1ZSwgY2FsbGJhY2spO1xuICB9O1xuICByZXR1cm4gZnIucmVhZEFzQXJyYXlCdWZmZXIocGFja2V0LmRhdGEpO1xufVxuXG5mdW5jdGlvbiBlbmNvZGVCbG9iKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSB7XG4gIGlmICghc3VwcG9ydHNCaW5hcnkpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVCYXNlNjRQYWNrZXQocGFja2V0LCBjYWxsYmFjayk7XG4gIH1cblxuICBpZiAoZG9udFNlbmRCbG9icykge1xuICAgIHJldHVybiBlbmNvZGVCbG9iQXNBcnJheUJ1ZmZlcihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjayk7XG4gIH1cblxuICB2YXIgbGVuZ3RoID0gbmV3IFVpbnQ4QXJyYXkoMSk7XG4gIGxlbmd0aFswXSA9IHBhY2tldHNbcGFja2V0LnR5cGVdO1xuICB2YXIgYmxvYiA9IG5ldyBCbG9iKFtsZW5ndGguYnVmZmVyLCBwYWNrZXQuZGF0YV0pO1xuXG4gIHJldHVybiBjYWxsYmFjayhibG9iKTtcbn1cblxuLyoqXG4gKiBFbmNvZGVzIGEgcGFja2V0IHdpdGggYmluYXJ5IGRhdGEgaW4gYSBiYXNlNjQgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldCwgaGFzIGB0eXBlYCBhbmQgYGRhdGFgXG4gKiBAcmV0dXJuIHtTdHJpbmd9IGJhc2U2NCBlbmNvZGVkIG1lc3NhZ2VcbiAqL1xuXG5leHBvcnRzLmVuY29kZUJhc2U2NFBhY2tldCA9IGZ1bmN0aW9uKHBhY2tldCwgY2FsbGJhY2spIHtcbiAgdmFyIG1lc3NhZ2UgPSAnYicgKyBleHBvcnRzLnBhY2tldHNbcGFja2V0LnR5cGVdO1xuICBpZiAodHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIHBhY2tldC5kYXRhIGluc3RhbmNlb2YgQmxvYikge1xuICAgIHZhciBmciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgZnIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYjY0ID0gZnIucmVzdWx0LnNwbGl0KCcsJylbMV07XG4gICAgICBjYWxsYmFjayhtZXNzYWdlICsgYjY0KTtcbiAgICB9O1xuICAgIHJldHVybiBmci5yZWFkQXNEYXRhVVJMKHBhY2tldC5kYXRhKTtcbiAgfVxuXG4gIHZhciBiNjRkYXRhO1xuICB0cnkge1xuICAgIGI2NGRhdGEgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50OEFycmF5KHBhY2tldC5kYXRhKSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBpUGhvbmUgU2FmYXJpIGRvZXNuJ3QgbGV0IHlvdSBhcHBseSB3aXRoIHR5cGVkIGFycmF5c1xuICAgIHZhciB0eXBlZCA9IG5ldyBVaW50OEFycmF5KHBhY2tldC5kYXRhKTtcbiAgICB2YXIgYmFzaWMgPSBuZXcgQXJyYXkodHlwZWQubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICBiYXNpY1tpXSA9IHR5cGVkW2ldO1xuICAgIH1cbiAgICBiNjRkYXRhID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBiYXNpYyk7XG4gIH1cbiAgbWVzc2FnZSArPSBidG9hKGI2NGRhdGEpO1xuICByZXR1cm4gY2FsbGJhY2sobWVzc2FnZSk7XG59O1xuXG4vKipcbiAqIERlY29kZXMgYSBwYWNrZXQuIENoYW5nZXMgZm9ybWF0IHRvIEJsb2IgaWYgcmVxdWVzdGVkLlxuICpcbiAqIEByZXR1cm4ge09iamVjdH0gd2l0aCBgdHlwZWAgYW5kIGBkYXRhYCAoaWYgYW55KVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5kZWNvZGVQYWNrZXQgPSBmdW5jdGlvbiAoZGF0YSwgYmluYXJ5VHlwZSwgdXRmOGRlY29kZSkge1xuICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGVycjtcbiAgfVxuICAvLyBTdHJpbmcgZGF0YVxuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKGRhdGEuY2hhckF0KDApID09PSAnYicpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmRlY29kZUJhc2U2NFBhY2tldChkYXRhLnN1YnN0cigxKSwgYmluYXJ5VHlwZSk7XG4gICAgfVxuXG4gICAgaWYgKHV0ZjhkZWNvZGUpIHtcbiAgICAgIGRhdGEgPSB0cnlEZWNvZGUoZGF0YSk7XG4gICAgICBpZiAoZGF0YSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGVycjtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIHR5cGUgPSBkYXRhLmNoYXJBdCgwKTtcblxuICAgIGlmIChOdW1iZXIodHlwZSkgIT0gdHlwZSB8fCAhcGFja2V0c2xpc3RbdHlwZV0pIHtcbiAgICAgIHJldHVybiBlcnI7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEubGVuZ3RoID4gMSkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogcGFja2V0c2xpc3RbdHlwZV0sIGRhdGE6IGRhdGEuc3Vic3RyaW5nKDEpIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IHBhY2tldHNsaXN0W3R5cGVdIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIGFzQXJyYXkgPSBuZXcgVWludDhBcnJheShkYXRhKTtcbiAgdmFyIHR5cGUgPSBhc0FycmF5WzBdO1xuICB2YXIgcmVzdCA9IHNsaWNlQnVmZmVyKGRhdGEsIDEpO1xuICBpZiAoQmxvYiAmJiBiaW5hcnlUeXBlID09PSAnYmxvYicpIHtcbiAgICByZXN0ID0gbmV3IEJsb2IoW3Jlc3RdKTtcbiAgfVxuICByZXR1cm4geyB0eXBlOiBwYWNrZXRzbGlzdFt0eXBlXSwgZGF0YTogcmVzdCB9O1xufTtcblxuZnVuY3Rpb24gdHJ5RGVjb2RlKGRhdGEpIHtcbiAgdHJ5IHtcbiAgICBkYXRhID0gdXRmOC5kZWNvZGUoZGF0YSwgeyBzdHJpY3Q6IGZhbHNlIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIERlY29kZXMgYSBwYWNrZXQgZW5jb2RlZCBpbiBhIGJhc2U2NCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYmFzZTY0IGVuY29kZWQgbWVzc2FnZVxuICogQHJldHVybiB7T2JqZWN0fSB3aXRoIGB0eXBlYCBhbmQgYGRhdGFgIChpZiBhbnkpXG4gKi9cblxuZXhwb3J0cy5kZWNvZGVCYXNlNjRQYWNrZXQgPSBmdW5jdGlvbihtc2csIGJpbmFyeVR5cGUpIHtcbiAgdmFyIHR5cGUgPSBwYWNrZXRzbGlzdFttc2cuY2hhckF0KDApXTtcbiAgaWYgKCFiYXNlNjRlbmNvZGVyKSB7XG4gICAgcmV0dXJuIHsgdHlwZTogdHlwZSwgZGF0YTogeyBiYXNlNjQ6IHRydWUsIGRhdGE6IG1zZy5zdWJzdHIoMSkgfSB9O1xuICB9XG5cbiAgdmFyIGRhdGEgPSBiYXNlNjRlbmNvZGVyLmRlY29kZShtc2cuc3Vic3RyKDEpKTtcblxuICBpZiAoYmluYXJ5VHlwZSA9PT0gJ2Jsb2InICYmIEJsb2IpIHtcbiAgICBkYXRhID0gbmV3IEJsb2IoW2RhdGFdKTtcbiAgfVxuXG4gIHJldHVybiB7IHR5cGU6IHR5cGUsIGRhdGE6IGRhdGEgfTtcbn07XG5cbi8qKlxuICogRW5jb2RlcyBtdWx0aXBsZSBtZXNzYWdlcyAocGF5bG9hZCkuXG4gKlxuICogICAgIDxsZW5ndGg+OmRhdGFcbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqICAgICAxMTpoZWxsbyB3b3JsZDI6aGlcbiAqXG4gKiBJZiBhbnkgY29udGVudHMgYXJlIGJpbmFyeSwgdGhleSB3aWxsIGJlIGVuY29kZWQgYXMgYmFzZTY0IHN0cmluZ3MuIEJhc2U2NFxuICogZW5jb2RlZCBzdHJpbmdzIGFyZSBtYXJrZWQgd2l0aCBhIGIgYmVmb3JlIHRoZSBsZW5ndGggc3BlY2lmaWVyXG4gKlxuICogQHBhcmFtIHtBcnJheX0gcGFja2V0c1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5lbmNvZGVQYXlsb2FkID0gZnVuY3Rpb24gKHBhY2tldHMsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIHN1cHBvcnRzQmluYXJ5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBzdXBwb3J0c0JpbmFyeTtcbiAgICBzdXBwb3J0c0JpbmFyeSA9IG51bGw7XG4gIH1cblxuICB2YXIgaXNCaW5hcnkgPSBoYXNCaW5hcnkocGFja2V0cyk7XG5cbiAgaWYgKHN1cHBvcnRzQmluYXJ5ICYmIGlzQmluYXJ5KSB7XG4gICAgaWYgKEJsb2IgJiYgIWRvbnRTZW5kQmxvYnMpIHtcbiAgICAgIHJldHVybiBleHBvcnRzLmVuY29kZVBheWxvYWRBc0Jsb2IocGFja2V0cywgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIHJldHVybiBleHBvcnRzLmVuY29kZVBheWxvYWRBc0FycmF5QnVmZmVyKHBhY2tldHMsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGlmICghcGFja2V0cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gY2FsbGJhY2soJzA6Jyk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRMZW5ndGhIZWFkZXIobWVzc2FnZSkge1xuICAgIHJldHVybiBtZXNzYWdlLmxlbmd0aCArICc6JyArIG1lc3NhZ2U7XG4gIH1cblxuICBmdW5jdGlvbiBlbmNvZGVPbmUocGFja2V0LCBkb25lQ2FsbGJhY2spIHtcbiAgICBleHBvcnRzLmVuY29kZVBhY2tldChwYWNrZXQsICFpc0JpbmFyeSA/IGZhbHNlIDogc3VwcG9ydHNCaW5hcnksIGZhbHNlLCBmdW5jdGlvbihtZXNzYWdlKSB7XG4gICAgICBkb25lQ2FsbGJhY2sobnVsbCwgc2V0TGVuZ3RoSGVhZGVyKG1lc3NhZ2UpKTtcbiAgICB9KTtcbiAgfVxuXG4gIG1hcChwYWNrZXRzLCBlbmNvZGVPbmUsIGZ1bmN0aW9uKGVyciwgcmVzdWx0cykge1xuICAgIHJldHVybiBjYWxsYmFjayhyZXN1bHRzLmpvaW4oJycpKTtcbiAgfSk7XG59O1xuXG4vKipcbiAqIEFzeW5jIGFycmF5IG1hcCB1c2luZyBhZnRlclxuICovXG5cbmZ1bmN0aW9uIG1hcChhcnksIGVhY2gsIGRvbmUpIHtcbiAgdmFyIHJlc3VsdCA9IG5ldyBBcnJheShhcnkubGVuZ3RoKTtcbiAgdmFyIG5leHQgPSBhZnRlcihhcnkubGVuZ3RoLCBkb25lKTtcblxuICB2YXIgZWFjaFdpdGhJbmRleCA9IGZ1bmN0aW9uKGksIGVsLCBjYikge1xuICAgIGVhY2goZWwsIGZ1bmN0aW9uKGVycm9yLCBtc2cpIHtcbiAgICAgIHJlc3VsdFtpXSA9IG1zZztcbiAgICAgIGNiKGVycm9yLCByZXN1bHQpO1xuICAgIH0pO1xuICB9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgZWFjaFdpdGhJbmRleChpLCBhcnlbaV0sIG5leHQpO1xuICB9XG59XG5cbi8qXG4gKiBEZWNvZGVzIGRhdGEgd2hlbiBhIHBheWxvYWQgaXMgbWF5YmUgZXhwZWN0ZWQuIFBvc3NpYmxlIGJpbmFyeSBjb250ZW50cyBhcmVcbiAqIGRlY29kZWQgZnJvbSB0aGVpciBiYXNlNjQgcmVwcmVzZW50YXRpb25cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZGF0YSwgY2FsbGJhY2sgbWV0aG9kXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuZGVjb2RlUGF5bG9hZCA9IGZ1bmN0aW9uIChkYXRhLCBiaW5hcnlUeXBlLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIGRhdGEgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGV4cG9ydHMuZGVjb2RlUGF5bG9hZEFzQmluYXJ5KGRhdGEsIGJpbmFyeVR5cGUsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYmluYXJ5VHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrID0gYmluYXJ5VHlwZTtcbiAgICBiaW5hcnlUeXBlID0gbnVsbDtcbiAgfVxuXG4gIHZhciBwYWNrZXQ7XG4gIGlmIChkYXRhID09PSAnJykge1xuICAgIC8vIHBhcnNlciBlcnJvciAtIGlnbm9yaW5nIHBheWxvYWRcbiAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgfVxuXG4gIHZhciBsZW5ndGggPSAnJywgbiwgbXNnO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gZGF0YS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgY2hyID0gZGF0YS5jaGFyQXQoaSk7XG5cbiAgICBpZiAoY2hyICE9PSAnOicpIHtcbiAgICAgIGxlbmd0aCArPSBjaHI7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAobGVuZ3RoID09PSAnJyB8fCAobGVuZ3RoICE9IChuID0gTnVtYmVyKGxlbmd0aCkpKSkge1xuICAgICAgLy8gcGFyc2VyIGVycm9yIC0gaWdub3JpbmcgcGF5bG9hZFxuICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gICAgfVxuXG4gICAgbXNnID0gZGF0YS5zdWJzdHIoaSArIDEsIG4pO1xuXG4gICAgaWYgKGxlbmd0aCAhPSBtc2cubGVuZ3RoKSB7XG4gICAgICAvLyBwYXJzZXIgZXJyb3IgLSBpZ25vcmluZyBwYXlsb2FkXG4gICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgICB9XG5cbiAgICBpZiAobXNnLmxlbmd0aCkge1xuICAgICAgcGFja2V0ID0gZXhwb3J0cy5kZWNvZGVQYWNrZXQobXNnLCBiaW5hcnlUeXBlLCBmYWxzZSk7XG5cbiAgICAgIGlmIChlcnIudHlwZSA9PT0gcGFja2V0LnR5cGUgJiYgZXJyLmRhdGEgPT09IHBhY2tldC5kYXRhKSB7XG4gICAgICAgIC8vIHBhcnNlciBlcnJvciBpbiBpbmRpdmlkdWFsIHBhY2tldCAtIGlnbm9yaW5nIHBheWxvYWRcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7XG4gICAgICB9XG5cbiAgICAgIHZhciByZXQgPSBjYWxsYmFjayhwYWNrZXQsIGkgKyBuLCBsKTtcbiAgICAgIGlmIChmYWxzZSA9PT0gcmV0KSByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYWR2YW5jZSBjdXJzb3JcbiAgICBpICs9IG47XG4gICAgbGVuZ3RoID0gJyc7XG4gIH1cblxuICBpZiAobGVuZ3RoICE9PSAnJykge1xuICAgIC8vIHBhcnNlciBlcnJvciAtIGlnbm9yaW5nIHBheWxvYWRcbiAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTtcbiAgfVxuXG59O1xuXG4vKipcbiAqIEVuY29kZXMgbXVsdGlwbGUgbWVzc2FnZXMgKHBheWxvYWQpIGFzIGJpbmFyeS5cbiAqXG4gKiA8MSA9IGJpbmFyeSwgMCA9IHN0cmluZz48bnVtYmVyIGZyb20gMC05PjxudW1iZXIgZnJvbSAwLTk+Wy4uLl08bnVtYmVyXG4gKiAyNTU+PGRhdGE+XG4gKlxuICogRXhhbXBsZTpcbiAqIDEgMyAyNTUgMSAyIDMsIGlmIHRoZSBiaW5hcnkgY29udGVudHMgYXJlIGludGVycHJldGVkIGFzIDggYml0IGludGVnZXJzXG4gKlxuICogQHBhcmFtIHtBcnJheX0gcGFja2V0c1xuICogQHJldHVybiB7QXJyYXlCdWZmZXJ9IGVuY29kZWQgcGF5bG9hZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZXhwb3J0cy5lbmNvZGVQYXlsb2FkQXNBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uKHBhY2tldHMsIGNhbGxiYWNrKSB7XG4gIGlmICghcGFja2V0cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gY2FsbGJhY2sobmV3IEFycmF5QnVmZmVyKDApKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuY29kZU9uZShwYWNrZXQsIGRvbmVDYWxsYmFjaykge1xuICAgIGV4cG9ydHMuZW5jb2RlUGFja2V0KHBhY2tldCwgdHJ1ZSwgdHJ1ZSwgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIGRvbmVDYWxsYmFjayhudWxsLCBkYXRhKTtcbiAgICB9KTtcbiAgfVxuXG4gIG1hcChwYWNrZXRzLCBlbmNvZGVPbmUsIGZ1bmN0aW9uKGVyciwgZW5jb2RlZFBhY2tldHMpIHtcbiAgICB2YXIgdG90YWxMZW5ndGggPSBlbmNvZGVkUGFja2V0cy5yZWR1Y2UoZnVuY3Rpb24oYWNjLCBwKSB7XG4gICAgICB2YXIgbGVuO1xuICAgICAgaWYgKHR5cGVvZiBwID09PSAnc3RyaW5nJyl7XG4gICAgICAgIGxlbiA9IHAubGVuZ3RoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGVuID0gcC5ieXRlTGVuZ3RoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYyArIGxlbi50b1N0cmluZygpLmxlbmd0aCArIGxlbiArIDI7IC8vIHN0cmluZy9iaW5hcnkgaWRlbnRpZmllciArIHNlcGFyYXRvciA9IDJcbiAgICB9LCAwKTtcblxuICAgIHZhciByZXN1bHRBcnJheSA9IG5ldyBVaW50OEFycmF5KHRvdGFsTGVuZ3RoKTtcblxuICAgIHZhciBidWZmZXJJbmRleCA9IDA7XG4gICAgZW5jb2RlZFBhY2tldHMuZm9yRWFjaChmdW5jdGlvbihwKSB7XG4gICAgICB2YXIgaXNTdHJpbmcgPSB0eXBlb2YgcCA9PT0gJ3N0cmluZyc7XG4gICAgICB2YXIgYWIgPSBwO1xuICAgICAgaWYgKGlzU3RyaW5nKSB7XG4gICAgICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkocC5sZW5ndGgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2aWV3W2ldID0gcC5jaGFyQ29kZUF0KGkpO1xuICAgICAgICB9XG4gICAgICAgIGFiID0gdmlldy5idWZmZXI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1N0cmluZykgeyAvLyBub3QgdHJ1ZSBiaW5hcnlcbiAgICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSAwO1xuICAgICAgfSBlbHNlIHsgLy8gdHJ1ZSBiaW5hcnlcbiAgICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSAxO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGVuU3RyID0gYWIuYnl0ZUxlbmd0aC50b1N0cmluZygpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5TdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSBwYXJzZUludChsZW5TdHJbaV0pO1xuICAgICAgfVxuICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSAyNTU7XG5cbiAgICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYWIpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2aWV3Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdEFycmF5W2J1ZmZlckluZGV4KytdID0gdmlld1tpXTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBjYWxsYmFjayhyZXN1bHRBcnJheS5idWZmZXIpO1xuICB9KTtcbn07XG5cbi8qKlxuICogRW5jb2RlIGFzIEJsb2JcbiAqL1xuXG5leHBvcnRzLmVuY29kZVBheWxvYWRBc0Jsb2IgPSBmdW5jdGlvbihwYWNrZXRzLCBjYWxsYmFjaykge1xuICBmdW5jdGlvbiBlbmNvZGVPbmUocGFja2V0LCBkb25lQ2FsbGJhY2spIHtcbiAgICBleHBvcnRzLmVuY29kZVBhY2tldChwYWNrZXQsIHRydWUsIHRydWUsIGZ1bmN0aW9uKGVuY29kZWQpIHtcbiAgICAgIHZhciBiaW5hcnlJZGVudGlmaWVyID0gbmV3IFVpbnQ4QXJyYXkoMSk7XG4gICAgICBiaW5hcnlJZGVudGlmaWVyWzBdID0gMTtcbiAgICAgIGlmICh0eXBlb2YgZW5jb2RlZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShlbmNvZGVkLmxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZW5jb2RlZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZpZXdbaV0gPSBlbmNvZGVkLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZW5jb2RlZCA9IHZpZXcuYnVmZmVyO1xuICAgICAgICBiaW5hcnlJZGVudGlmaWVyWzBdID0gMDtcbiAgICAgIH1cblxuICAgICAgdmFyIGxlbiA9IChlbmNvZGVkIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpXG4gICAgICAgID8gZW5jb2RlZC5ieXRlTGVuZ3RoXG4gICAgICAgIDogZW5jb2RlZC5zaXplO1xuXG4gICAgICB2YXIgbGVuU3RyID0gbGVuLnRvU3RyaW5nKCk7XG4gICAgICB2YXIgbGVuZ3RoQXJ5ID0gbmV3IFVpbnQ4QXJyYXkobGVuU3RyLmxlbmd0aCArIDEpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5TdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGVuZ3RoQXJ5W2ldID0gcGFyc2VJbnQobGVuU3RyW2ldKTtcbiAgICAgIH1cbiAgICAgIGxlbmd0aEFyeVtsZW5TdHIubGVuZ3RoXSA9IDI1NTtcblxuICAgICAgaWYgKEJsb2IpIHtcbiAgICAgICAgdmFyIGJsb2IgPSBuZXcgQmxvYihbYmluYXJ5SWRlbnRpZmllci5idWZmZXIsIGxlbmd0aEFyeS5idWZmZXIsIGVuY29kZWRdKTtcbiAgICAgICAgZG9uZUNhbGxiYWNrKG51bGwsIGJsb2IpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbWFwKHBhY2tldHMsIGVuY29kZU9uZSwgZnVuY3Rpb24oZXJyLCByZXN1bHRzKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBCbG9iKHJlc3VsdHMpKTtcbiAgfSk7XG59O1xuXG4vKlxuICogRGVjb2RlcyBkYXRhIHdoZW4gYSBwYXlsb2FkIGlzIG1heWJlIGV4cGVjdGVkLiBTdHJpbmdzIGFyZSBkZWNvZGVkIGJ5XG4gKiBpbnRlcnByZXRpbmcgZWFjaCBieXRlIGFzIGEga2V5IGNvZGUgZm9yIGVudHJpZXMgbWFya2VkIHRvIHN0YXJ0IHdpdGggMC4gU2VlXG4gKiBkZXNjcmlwdGlvbiBvZiBlbmNvZGVQYXlsb2FkQXNCaW5hcnlcbiAqXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBkYXRhLCBjYWxsYmFjayBtZXRob2RcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5kZWNvZGVQYXlsb2FkQXNCaW5hcnkgPSBmdW5jdGlvbiAoZGF0YSwgYmluYXJ5VHlwZSwgY2FsbGJhY2spIHtcbiAgaWYgKHR5cGVvZiBiaW5hcnlUeXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBiaW5hcnlUeXBlO1xuICAgIGJpbmFyeVR5cGUgPSBudWxsO1xuICB9XG5cbiAgdmFyIGJ1ZmZlclRhaWwgPSBkYXRhO1xuICB2YXIgYnVmZmVycyA9IFtdO1xuXG4gIHdoaWxlIChidWZmZXJUYWlsLmJ5dGVMZW5ndGggPiAwKSB7XG4gICAgdmFyIHRhaWxBcnJheSA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlclRhaWwpO1xuICAgIHZhciBpc1N0cmluZyA9IHRhaWxBcnJheVswXSA9PT0gMDtcbiAgICB2YXIgbXNnTGVuZ3RoID0gJyc7XG5cbiAgICBmb3IgKHZhciBpID0gMTsgOyBpKyspIHtcbiAgICAgIGlmICh0YWlsQXJyYXlbaV0gPT09IDI1NSkgYnJlYWs7XG5cbiAgICAgIC8vIDMxMCA9IGNoYXIgbGVuZ3RoIG9mIE51bWJlci5NQVhfVkFMVUVcbiAgICAgIGlmIChtc2dMZW5ndGgubGVuZ3RoID4gMzEwKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpO1xuICAgICAgfVxuXG4gICAgICBtc2dMZW5ndGggKz0gdGFpbEFycmF5W2ldO1xuICAgIH1cblxuICAgIGJ1ZmZlclRhaWwgPSBzbGljZUJ1ZmZlcihidWZmZXJUYWlsLCAyICsgbXNnTGVuZ3RoLmxlbmd0aCk7XG4gICAgbXNnTGVuZ3RoID0gcGFyc2VJbnQobXNnTGVuZ3RoKTtcblxuICAgIHZhciBtc2cgPSBzbGljZUJ1ZmZlcihidWZmZXJUYWlsLCAwLCBtc2dMZW5ndGgpO1xuICAgIGlmIChpc1N0cmluZykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbXNnID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheShtc2cpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaVBob25lIFNhZmFyaSBkb2Vzbid0IGxldCB5b3UgYXBwbHkgdG8gdHlwZWQgYXJyYXlzXG4gICAgICAgIHZhciB0eXBlZCA9IG5ldyBVaW50OEFycmF5KG1zZyk7XG4gICAgICAgIG1zZyA9ICcnO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgbXNnICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodHlwZWRbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgYnVmZmVycy5wdXNoKG1zZyk7XG4gICAgYnVmZmVyVGFpbCA9IHNsaWNlQnVmZmVyKGJ1ZmZlclRhaWwsIG1zZ0xlbmd0aCk7XG4gIH1cblxuICB2YXIgdG90YWwgPSBidWZmZXJzLmxlbmd0aDtcbiAgYnVmZmVycy5mb3JFYWNoKGZ1bmN0aW9uKGJ1ZmZlciwgaSkge1xuICAgIGNhbGxiYWNrKGV4cG9ydHMuZGVjb2RlUGFja2V0KGJ1ZmZlciwgYmluYXJ5VHlwZSwgdHJ1ZSksIGksIHRvdGFsKTtcbiAgfSk7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgVHlwZXNfMSA9IHJlcXVpcmUoXCIuL1R5cGVzXCIpO1xuZnVuY3Rpb24gZ2VuZXJhdGVDb25maWcoc2NhbGVkQ2hhcldpZHRoLCBzY2FsZWRDaGFySGVpZ2h0LCB0ZXJtaW5hbCwgY29sb3JzKSB7XG4gICAgdmFyIGNsb25lZENvbG9ycyA9IHtcbiAgICAgICAgZm9yZWdyb3VuZDogY29sb3JzLmZvcmVncm91bmQsXG4gICAgICAgIGJhY2tncm91bmQ6IGNvbG9ycy5iYWNrZ3JvdW5kLFxuICAgICAgICBjdXJzb3I6IG51bGwsXG4gICAgICAgIGN1cnNvckFjY2VudDogbnVsbCxcbiAgICAgICAgc2VsZWN0aW9uOiBudWxsLFxuICAgICAgICBhbnNpOiBjb2xvcnMuYW5zaS5zbGljZSgwLCAxNilcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHRlcm1pbmFsLm9wdGlvbnMuZXhwZXJpbWVudGFsQ2hhckF0bGFzLFxuICAgICAgICBkZXZpY2VQaXhlbFJhdGlvOiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyxcbiAgICAgICAgc2NhbGVkQ2hhcldpZHRoOiBzY2FsZWRDaGFyV2lkdGgsXG4gICAgICAgIHNjYWxlZENoYXJIZWlnaHQ6IHNjYWxlZENoYXJIZWlnaHQsXG4gICAgICAgIGZvbnRGYW1pbHk6IHRlcm1pbmFsLm9wdGlvbnMuZm9udEZhbWlseSxcbiAgICAgICAgZm9udFNpemU6IHRlcm1pbmFsLm9wdGlvbnMuZm9udFNpemUsXG4gICAgICAgIGZvbnRXZWlnaHQ6IHRlcm1pbmFsLm9wdGlvbnMuZm9udFdlaWdodCxcbiAgICAgICAgZm9udFdlaWdodEJvbGQ6IHRlcm1pbmFsLm9wdGlvbnMuZm9udFdlaWdodEJvbGQsXG4gICAgICAgIGFsbG93VHJhbnNwYXJlbmN5OiB0ZXJtaW5hbC5vcHRpb25zLmFsbG93VHJhbnNwYXJlbmN5LFxuICAgICAgICBjb2xvcnM6IGNsb25lZENvbG9yc1xuICAgIH07XG59XG5leHBvcnRzLmdlbmVyYXRlQ29uZmlnID0gZ2VuZXJhdGVDb25maWc7XG5mdW5jdGlvbiBjb25maWdFcXVhbHMoYSwgYikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYS5jb2xvcnMuYW5zaS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYS5jb2xvcnMuYW5zaVtpXS5yZ2JhICE9PSBiLmNvbG9ycy5hbnNpW2ldLnJnYmEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYS50eXBlID09PSBiLnR5cGUgJiZcbiAgICAgICAgYS5kZXZpY2VQaXhlbFJhdGlvID09PSBiLmRldmljZVBpeGVsUmF0aW8gJiZcbiAgICAgICAgYS5mb250RmFtaWx5ID09PSBiLmZvbnRGYW1pbHkgJiZcbiAgICAgICAgYS5mb250U2l6ZSA9PT0gYi5mb250U2l6ZSAmJlxuICAgICAgICBhLmZvbnRXZWlnaHQgPT09IGIuZm9udFdlaWdodCAmJlxuICAgICAgICBhLmZvbnRXZWlnaHRCb2xkID09PSBiLmZvbnRXZWlnaHRCb2xkICYmXG4gICAgICAgIGEuYWxsb3dUcmFuc3BhcmVuY3kgPT09IGIuYWxsb3dUcmFuc3BhcmVuY3kgJiZcbiAgICAgICAgYS5zY2FsZWRDaGFyV2lkdGggPT09IGIuc2NhbGVkQ2hhcldpZHRoICYmXG4gICAgICAgIGEuc2NhbGVkQ2hhckhlaWdodCA9PT0gYi5zY2FsZWRDaGFySGVpZ2h0ICYmXG4gICAgICAgIGEuY29sb3JzLmZvcmVncm91bmQgPT09IGIuY29sb3JzLmZvcmVncm91bmQgJiZcbiAgICAgICAgYS5jb2xvcnMuYmFja2dyb3VuZCA9PT0gYi5jb2xvcnMuYmFja2dyb3VuZDtcbn1cbmV4cG9ydHMuY29uZmlnRXF1YWxzID0gY29uZmlnRXF1YWxzO1xuZnVuY3Rpb24gaXMyNTZDb2xvcihjb2xvckNvZGUpIHtcbiAgICByZXR1cm4gY29sb3JDb2RlIDwgVHlwZXNfMS5ERUZBVUxUX0NPTE9SO1xufVxuZXhwb3J0cy5pczI1NkNvbG9yID0gaXMyNTZDb2xvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNoYXJBdGxhc1V0aWxzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGlzTm9kZSA9ICh0eXBlb2YgbmF2aWdhdG9yID09PSAndW5kZWZpbmVkJykgPyB0cnVlIDogZmFsc2U7XG52YXIgdXNlckFnZW50ID0gKGlzTm9kZSkgPyAnbm9kZScgOiBuYXZpZ2F0b3IudXNlckFnZW50O1xudmFyIHBsYXRmb3JtID0gKGlzTm9kZSkgPyAnbm9kZScgOiBuYXZpZ2F0b3IucGxhdGZvcm07XG5leHBvcnRzLmlzRmlyZWZveCA9ICEhfnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94Jyk7XG5leHBvcnRzLmlzU2FmYXJpID0gL14oKD8hY2hyb21lfGFuZHJvaWQpLikqc2FmYXJpL2kudGVzdCh1c2VyQWdlbnQpO1xuZXhwb3J0cy5pc01TSUUgPSAhIX51c2VyQWdlbnQuaW5kZXhPZignTVNJRScpIHx8ICEhfnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50Jyk7XG5leHBvcnRzLmlzTWFjID0gY29udGFpbnMoWydNYWNpbnRvc2gnLCAnTWFjSW50ZWwnLCAnTWFjUFBDJywgJ01hYzY4SyddLCBwbGF0Zm9ybSk7XG5leHBvcnRzLmlzSXBhZCA9IHBsYXRmb3JtID09PSAnaVBhZCc7XG5leHBvcnRzLmlzSXBob25lID0gcGxhdGZvcm0gPT09ICdpUGhvbmUnO1xuZXhwb3J0cy5pc01TV2luZG93cyA9IGNvbnRhaW5zKFsnV2luZG93cycsICdXaW4xNicsICdXaW4zMicsICdXaW5DRSddLCBwbGF0Zm9ybSk7XG5leHBvcnRzLmlzTGludXggPSBwbGF0Zm9ybS5pbmRleE9mKCdMaW51eCcpID49IDA7XG5mdW5jdGlvbiBjb250YWlucyhhcnIsIGVsKSB7XG4gICAgcmV0dXJuIGFyci5pbmRleE9mKGVsKSA+PSAwO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UGxhdGZvcm0uanMubWFwIiwiLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGVidWcnKTtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lXG4gICAgICAgICAgICAgICAmJiAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lLnN0b3JhZ2VcbiAgICAgICAgICAgICAgICAgID8gY2hyb21lLnN0b3JhZ2UubG9jYWxcbiAgICAgICAgICAgICAgICAgIDogbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuICAnIzAwMDBDQycsICcjMDAwMEZGJywgJyMwMDMzQ0MnLCAnIzAwMzNGRicsICcjMDA2NkNDJywgJyMwMDY2RkYnLCAnIzAwOTlDQycsXG4gICcjMDA5OUZGJywgJyMwMENDMDAnLCAnIzAwQ0MzMycsICcjMDBDQzY2JywgJyMwMENDOTknLCAnIzAwQ0NDQycsICcjMDBDQ0ZGJyxcbiAgJyMzMzAwQ0MnLCAnIzMzMDBGRicsICcjMzMzM0NDJywgJyMzMzMzRkYnLCAnIzMzNjZDQycsICcjMzM2NkZGJywgJyMzMzk5Q0MnLFxuICAnIzMzOTlGRicsICcjMzNDQzAwJywgJyMzM0NDMzMnLCAnIzMzQ0M2NicsICcjMzNDQzk5JywgJyMzM0NDQ0MnLCAnIzMzQ0NGRicsXG4gICcjNjYwMENDJywgJyM2NjAwRkYnLCAnIzY2MzNDQycsICcjNjYzM0ZGJywgJyM2NkNDMDAnLCAnIzY2Q0MzMycsICcjOTkwMENDJyxcbiAgJyM5OTAwRkYnLCAnIzk5MzNDQycsICcjOTkzM0ZGJywgJyM5OUNDMDAnLCAnIzk5Q0MzMycsICcjQ0MwMDAwJywgJyNDQzAwMzMnLFxuICAnI0NDMDA2NicsICcjQ0MwMDk5JywgJyNDQzAwQ0MnLCAnI0NDMDBGRicsICcjQ0MzMzAwJywgJyNDQzMzMzMnLCAnI0NDMzM2NicsXG4gICcjQ0MzMzk5JywgJyNDQzMzQ0MnLCAnI0NDMzNGRicsICcjQ0M2NjAwJywgJyNDQzY2MzMnLCAnI0NDOTkwMCcsICcjQ0M5OTMzJyxcbiAgJyNDQ0NDMDAnLCAnI0NDQ0MzMycsICcjRkYwMDAwJywgJyNGRjAwMzMnLCAnI0ZGMDA2NicsICcjRkYwMDk5JywgJyNGRjAwQ0MnLFxuICAnI0ZGMDBGRicsICcjRkYzMzAwJywgJyNGRjMzMzMnLCAnI0ZGMzM2NicsICcjRkYzMzk5JywgJyNGRjMzQ0MnLCAnI0ZGMzNGRicsXG4gICcjRkY2NjAwJywgJyNGRjY2MzMnLCAnI0ZGOTkwMCcsICcjRkY5OTMzJywgJyNGRkNDMDAnLCAnI0ZGQ0MzMydcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuICAvLyBOQjogSW4gYW4gRWxlY3Ryb24gcHJlbG9hZCBzY3JpcHQsIGRvY3VtZW50IHdpbGwgYmUgZGVmaW5lZCBidXQgbm90IGZ1bGx5XG4gIC8vIGluaXRpYWxpemVkLiBTaW5jZSB3ZSBrbm93IHdlJ3JlIGluIENocm9tZSwgd2UnbGwganVzdCBkZXRlY3QgdGhpcyBjYXNlXG4gIC8vIGV4cGxpY2l0bHlcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wcm9jZXNzICYmIHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIEludGVybmV0IEV4cGxvcmVyIGFuZCBFZGdlIGRvIG5vdCBzdXBwb3J0IGNvbG9ycy5cbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC8oZWRnZXx0cmlkZW50KVxcLyhcXGQrKS8pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gaXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzNcbiAgLy8gZG9jdW1lbnQgaXMgdW5kZWZpbmVkIGluIHJlYWN0LW5hdGl2ZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9wdWxsLzE2MzJcbiAgcmV0dXJuICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLldlYmtpdEFwcGVhcmFuY2UpIHx8XG4gICAgLy8gaXMgZmlyZWJ1Zz8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzk4MTIwLzM3Njc3M1xuICAgICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY29uc29sZSAmJiAod2luZG93LmNvbnNvbGUuZmlyZWJ1ZyB8fCAod2luZG93LmNvbnNvbGUuZXhjZXB0aW9uICYmIHdpbmRvdy5jb25zb2xlLnRhYmxlKSkpIHx8XG4gICAgLy8gaXMgZmlyZWZveCA+PSB2MzE/XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Ub29scy9XZWJfQ29uc29sZSNTdHlsaW5nX21lc3NhZ2VzXG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLykgJiYgcGFyc2VJbnQoUmVnRXhwLiQxLCAxMCkgPj0gMzEpIHx8XG4gICAgLy8gZG91YmxlIGNoZWNrIHdlYmtpdCBpbiB1c2VyQWdlbnQganVzdCBpbiBjYXNlIHdlIGFyZSBpbiBhIHdvcmtlclxuICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvYXBwbGV3ZWJraXRcXC8oXFxkKykvKSk7XG59XG5cbi8qKlxuICogTWFwICVqIHRvIGBKU09OLnN0cmluZ2lmeSgpYCwgc2luY2Ugbm8gV2ViIEluc3BlY3RvcnMgZG8gdGhhdCBieSBkZWZhdWx0LlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24odikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVyci5tZXNzYWdlO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ29sb3JpemUgbG9nIGFyZ3VtZW50cyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG4gIHZhciB1c2VDb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblxuICBhcmdzWzBdID0gKHVzZUNvbG9ycyA/ICclYycgOiAnJylcbiAgICArIHRoaXMubmFtZXNwYWNlXG4gICAgKyAodXNlQ29sb3JzID8gJyAlYycgOiAnICcpXG4gICAgKyBhcmdzWzBdXG4gICAgKyAodXNlQ29sb3JzID8gJyVjICcgOiAnICcpXG4gICAgKyAnKycgKyBleHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7XG5cbiAgaWYgKCF1c2VDb2xvcnMpIHJldHVybjtcblxuICB2YXIgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG4gIGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpXG5cbiAgLy8gdGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcbiAgLy8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuICAvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3RDID0gMDtcbiAgYXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgaWYgKCclJScgPT09IG1hdGNoKSByZXR1cm47XG4gICAgaW5kZXgrKztcbiAgICBpZiAoJyVjJyA9PT0gbWF0Y2gpIHtcbiAgICAgIC8vIHdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuICAgICAgLy8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcbiAgICAgIGxhc3RDID0gaW5kZXg7XG4gICAgfVxuICB9KTtcblxuICBhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5sb2coKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmxvZ2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gbG9nKCkge1xuICAvLyB0aGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOC85LCB3aGVyZVxuICAvLyB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgJ2FwcGx5J1xuICByZXR1cm4gJ29iamVjdCcgPT09IHR5cGVvZiBjb25zb2xlXG4gICAgJiYgY29uc29sZS5sb2dcbiAgICAmJiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChjb25zb2xlLmxvZywgY29uc29sZSwgYXJndW1lbnRzKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG4gIHRyeSB7XG4gICAgaWYgKG51bGwgPT0gbmFtZXNwYWNlcykge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZyA9IG5hbWVzcGFjZXM7XG4gICAgfVxuICB9IGNhdGNoKGUpIHt9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9hZCgpIHtcbiAgdmFyIHI7XG4gIHRyeSB7XG4gICAgciA9IGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZztcbiAgfSBjYXRjaChlKSB7fVxuXG4gIC8vIElmIGRlYnVnIGlzbid0IHNldCBpbiBMUywgYW5kIHdlJ3JlIGluIEVsZWN0cm9uLCB0cnkgdG8gbG9hZCAkREVCVUdcbiAgaWYgKCFyICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAnZW52JyBpbiBwcm9jZXNzKSB7XG4gICAgciA9IHByb2Nlc3MuZW52LkRFQlVHO1xuICB9XG5cbiAgcmV0dXJuIHI7XG59XG5cbi8qKlxuICogRW5hYmxlIG5hbWVzcGFjZXMgbGlzdGVkIGluIGBsb2NhbFN0b3JhZ2UuZGVidWdgIGluaXRpYWxseS5cbiAqL1xuXG5leHBvcnRzLmVuYWJsZShsb2FkKCkpO1xuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgfSBjYXRjaCAoZSkge31cbn1cbiIsIi8qKlxyXG4gKiBDb21waWxlcyBhIHF1ZXJ5c3RyaW5nXHJcbiAqIFJldHVybnMgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBvYmplY3RcclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9XHJcbiAqIEBhcGkgcHJpdmF0ZVxyXG4gKi9cclxuXHJcbmV4cG9ydHMuZW5jb2RlID0gZnVuY3Rpb24gKG9iaikge1xyXG4gIHZhciBzdHIgPSAnJztcclxuXHJcbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcclxuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaSkpIHtcclxuICAgICAgaWYgKHN0ci5sZW5ndGgpIHN0ciArPSAnJic7XHJcbiAgICAgIHN0ciArPSBlbmNvZGVVUklDb21wb25lbnQoaSkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQob2JqW2ldKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBzdHI7XHJcbn07XHJcblxyXG4vKipcclxuICogUGFyc2VzIGEgc2ltcGxlIHF1ZXJ5c3RyaW5nIGludG8gYW4gb2JqZWN0XHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBxc1xyXG4gKiBAYXBpIHByaXZhdGVcclxuICovXHJcblxyXG5leHBvcnRzLmRlY29kZSA9IGZ1bmN0aW9uKHFzKXtcclxuICB2YXIgcXJ5ID0ge307XHJcbiAgdmFyIHBhaXJzID0gcXMuc3BsaXQoJyYnKTtcclxuICBmb3IgKHZhciBpID0gMCwgbCA9IHBhaXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgdmFyIHBhaXIgPSBwYWlyc1tpXS5zcGxpdCgnPScpO1xyXG4gICAgcXJ5W2RlY29kZVVSSUNvbXBvbmVudChwYWlyWzBdKV0gPSBkZWNvZGVVUklDb21wb25lbnQocGFpclsxXSk7XHJcbiAgfVxyXG4gIHJldHVybiBxcnk7XHJcbn07XHJcbiIsIlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhLCBiKXtcbiAgdmFyIGZuID0gZnVuY3Rpb24oKXt9O1xuICBmbi5wcm90b3R5cGUgPSBiLnByb3RvdHlwZTtcbiAgYS5wcm90b3R5cGUgPSBuZXcgZm47XG4gIGEucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gYTtcbn07IiwiLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGVidWcnKTtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lXG4gICAgICAgICAgICAgICAmJiAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lLnN0b3JhZ2VcbiAgICAgICAgICAgICAgICAgID8gY2hyb21lLnN0b3JhZ2UubG9jYWxcbiAgICAgICAgICAgICAgICAgIDogbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuICAnIzAwMDBDQycsICcjMDAwMEZGJywgJyMwMDMzQ0MnLCAnIzAwMzNGRicsICcjMDA2NkNDJywgJyMwMDY2RkYnLCAnIzAwOTlDQycsXG4gICcjMDA5OUZGJywgJyMwMENDMDAnLCAnIzAwQ0MzMycsICcjMDBDQzY2JywgJyMwMENDOTknLCAnIzAwQ0NDQycsICcjMDBDQ0ZGJyxcbiAgJyMzMzAwQ0MnLCAnIzMzMDBGRicsICcjMzMzM0NDJywgJyMzMzMzRkYnLCAnIzMzNjZDQycsICcjMzM2NkZGJywgJyMzMzk5Q0MnLFxuICAnIzMzOTlGRicsICcjMzNDQzAwJywgJyMzM0NDMzMnLCAnIzMzQ0M2NicsICcjMzNDQzk5JywgJyMzM0NDQ0MnLCAnIzMzQ0NGRicsXG4gICcjNjYwMENDJywgJyM2NjAwRkYnLCAnIzY2MzNDQycsICcjNjYzM0ZGJywgJyM2NkNDMDAnLCAnIzY2Q0MzMycsICcjOTkwMENDJyxcbiAgJyM5OTAwRkYnLCAnIzk5MzNDQycsICcjOTkzM0ZGJywgJyM5OUNDMDAnLCAnIzk5Q0MzMycsICcjQ0MwMDAwJywgJyNDQzAwMzMnLFxuICAnI0NDMDA2NicsICcjQ0MwMDk5JywgJyNDQzAwQ0MnLCAnI0NDMDBGRicsICcjQ0MzMzAwJywgJyNDQzMzMzMnLCAnI0NDMzM2NicsXG4gICcjQ0MzMzk5JywgJyNDQzMzQ0MnLCAnI0NDMzNGRicsICcjQ0M2NjAwJywgJyNDQzY2MzMnLCAnI0NDOTkwMCcsICcjQ0M5OTMzJyxcbiAgJyNDQ0NDMDAnLCAnI0NDQ0MzMycsICcjRkYwMDAwJywgJyNGRjAwMzMnLCAnI0ZGMDA2NicsICcjRkYwMDk5JywgJyNGRjAwQ0MnLFxuICAnI0ZGMDBGRicsICcjRkYzMzAwJywgJyNGRjMzMzMnLCAnI0ZGMzM2NicsICcjRkYzMzk5JywgJyNGRjMzQ0MnLCAnI0ZGMzNGRicsXG4gICcjRkY2NjAwJywgJyNGRjY2MzMnLCAnI0ZGOTkwMCcsICcjRkY5OTMzJywgJyNGRkNDMDAnLCAnI0ZGQ0MzMydcbl07XG5cbi8qKlxuICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSxcbiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93blxuICogdG8gc3VwcG9ydCBcIiVjXCIgQ1NTIGN1c3RvbWl6YXRpb25zLlxuICpcbiAqIFRPRE86IGFkZCBhIGBsb2NhbFN0b3JhZ2VgIHZhcmlhYmxlIHRvIGV4cGxpY2l0bHkgZW5hYmxlL2Rpc2FibGUgY29sb3JzXG4gKi9cblxuZnVuY3Rpb24gdXNlQ29sb3JzKCkge1xuICAvLyBOQjogSW4gYW4gRWxlY3Ryb24gcHJlbG9hZCBzY3JpcHQsIGRvY3VtZW50IHdpbGwgYmUgZGVmaW5lZCBidXQgbm90IGZ1bGx5XG4gIC8vIGluaXRpYWxpemVkLiBTaW5jZSB3ZSBrbm93IHdlJ3JlIGluIENocm9tZSwgd2UnbGwganVzdCBkZXRlY3QgdGhpcyBjYXNlXG4gIC8vIGV4cGxpY2l0bHlcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5wcm9jZXNzICYmIHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIEludGVybmV0IEV4cGxvcmVyIGFuZCBFZGdlIGRvIG5vdCBzdXBwb3J0IGNvbG9ycy5cbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC8oZWRnZXx0cmlkZW50KVxcLyhcXGQrKS8pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gaXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzNcbiAgLy8gZG9jdW1lbnQgaXMgdW5kZWZpbmVkIGluIHJlYWN0LW5hdGl2ZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9wdWxsLzE2MzJcbiAgcmV0dXJuICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLldlYmtpdEFwcGVhcmFuY2UpIHx8XG4gICAgLy8gaXMgZmlyZWJ1Zz8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzk4MTIwLzM3Njc3M1xuICAgICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuY29uc29sZSAmJiAod2luZG93LmNvbnNvbGUuZmlyZWJ1ZyB8fCAod2luZG93LmNvbnNvbGUuZXhjZXB0aW9uICYmIHdpbmRvdy5jb25zb2xlLnRhYmxlKSkpIHx8XG4gICAgLy8gaXMgZmlyZWZveCA+PSB2MzE/XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Ub29scy9XZWJfQ29uc29sZSNTdHlsaW5nX21lc3NhZ2VzXG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLykgJiYgcGFyc2VJbnQoUmVnRXhwLiQxLCAxMCkgPj0gMzEpIHx8XG4gICAgLy8gZG91YmxlIGNoZWNrIHdlYmtpdCBpbiB1c2VyQWdlbnQganVzdCBpbiBjYXNlIHdlIGFyZSBpbiBhIHdvcmtlclxuICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvYXBwbGV3ZWJraXRcXC8oXFxkKykvKSk7XG59XG5cbi8qKlxuICogTWFwICVqIHRvIGBKU09OLnN0cmluZ2lmeSgpYCwgc2luY2Ugbm8gV2ViIEluc3BlY3RvcnMgZG8gdGhhdCBieSBkZWZhdWx0LlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24odikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVyci5tZXNzYWdlO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ29sb3JpemUgbG9nIGFyZ3VtZW50cyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG4gIHZhciB1c2VDb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblxuICBhcmdzWzBdID0gKHVzZUNvbG9ycyA/ICclYycgOiAnJylcbiAgICArIHRoaXMubmFtZXNwYWNlXG4gICAgKyAodXNlQ29sb3JzID8gJyAlYycgOiAnICcpXG4gICAgKyBhcmdzWzBdXG4gICAgKyAodXNlQ29sb3JzID8gJyVjICcgOiAnICcpXG4gICAgKyAnKycgKyBleHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7XG5cbiAgaWYgKCF1c2VDb2xvcnMpIHJldHVybjtcblxuICB2YXIgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG4gIGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpXG5cbiAgLy8gdGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcbiAgLy8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuICAvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3RDID0gMDtcbiAgYXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgaWYgKCclJScgPT09IG1hdGNoKSByZXR1cm47XG4gICAgaW5kZXgrKztcbiAgICBpZiAoJyVjJyA9PT0gbWF0Y2gpIHtcbiAgICAgIC8vIHdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuICAgICAgLy8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcbiAgICAgIGxhc3RDID0gaW5kZXg7XG4gICAgfVxuICB9KTtcblxuICBhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5sb2coKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmxvZ2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gbG9nKCkge1xuICAvLyB0aGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOC85LCB3aGVyZVxuICAvLyB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgJ2FwcGx5J1xuICByZXR1cm4gJ29iamVjdCcgPT09IHR5cGVvZiBjb25zb2xlXG4gICAgJiYgY29uc29sZS5sb2dcbiAgICAmJiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChjb25zb2xlLmxvZywgY29uc29sZSwgYXJndW1lbnRzKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG4gIHRyeSB7XG4gICAgaWYgKG51bGwgPT0gbmFtZXNwYWNlcykge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZyA9IG5hbWVzcGFjZXM7XG4gICAgfVxuICB9IGNhdGNoKGUpIHt9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9hZCgpIHtcbiAgdmFyIHI7XG4gIHRyeSB7XG4gICAgciA9IGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZztcbiAgfSBjYXRjaChlKSB7fVxuXG4gIC8vIElmIGRlYnVnIGlzbid0IHNldCBpbiBMUywgYW5kIHdlJ3JlIGluIEVsZWN0cm9uLCB0cnkgdG8gbG9hZCAkREVCVUdcbiAgaWYgKCFyICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAnZW52JyBpbiBwcm9jZXNzKSB7XG4gICAgciA9IHByb2Nlc3MuZW52LkRFQlVHO1xuICB9XG5cbiAgcmV0dXJuIHI7XG59XG5cbi8qKlxuICogRW5hYmxlIG5hbWVzcGFjZXMgbGlzdGVkIGluIGBsb2NhbFN0b3JhZ2UuZGVidWdgIGluaXRpYWxseS5cbiAqL1xuXG5leHBvcnRzLmVuYWJsZShsb2FkKCkpO1xuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgfSBjYXRjaCAoZSkge31cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gYWRkRGlzcG9zYWJsZURvbUxpc3RlbmVyKG5vZGUsIHR5cGUsIGhhbmRsZXIsIHVzZUNhcHR1cmUpIHtcbiAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlciwgdXNlQ2FwdHVyZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGlzcG9zZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZXIsIHVzZUNhcHR1cmUpO1xuICAgICAgICAgICAgbm9kZSA9IG51bGw7XG4gICAgICAgICAgICBoYW5kbGVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG59XG5leHBvcnRzLmFkZERpc3Bvc2FibGVEb21MaXN0ZW5lciA9IGFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUxpZmVjeWNsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBDMDtcbihmdW5jdGlvbiAoQzApIHtcbiAgICBDMC5OVUwgPSAnXFx4MDAnO1xuICAgIEMwLlNPSCA9ICdcXHgwMSc7XG4gICAgQzAuU1RYID0gJ1xceDAyJztcbiAgICBDMC5FVFggPSAnXFx4MDMnO1xuICAgIEMwLkVPVCA9ICdcXHgwNCc7XG4gICAgQzAuRU5RID0gJ1xceDA1JztcbiAgICBDMC5BQ0sgPSAnXFx4MDYnO1xuICAgIEMwLkJFTCA9ICdcXHgwNyc7XG4gICAgQzAuQlMgPSAnXFx4MDgnO1xuICAgIEMwLkhUID0gJ1xceDA5JztcbiAgICBDMC5MRiA9ICdcXHgwYSc7XG4gICAgQzAuVlQgPSAnXFx4MGInO1xuICAgIEMwLkZGID0gJ1xceDBjJztcbiAgICBDMC5DUiA9ICdcXHgwZCc7XG4gICAgQzAuU08gPSAnXFx4MGUnO1xuICAgIEMwLlNJID0gJ1xceDBmJztcbiAgICBDMC5ETEUgPSAnXFx4MTAnO1xuICAgIEMwLkRDMSA9ICdcXHgxMSc7XG4gICAgQzAuREMyID0gJ1xceDEyJztcbiAgICBDMC5EQzMgPSAnXFx4MTMnO1xuICAgIEMwLkRDNCA9ICdcXHgxNCc7XG4gICAgQzAuTkFLID0gJ1xceDE1JztcbiAgICBDMC5TWU4gPSAnXFx4MTYnO1xuICAgIEMwLkVUQiA9ICdcXHgxNyc7XG4gICAgQzAuQ0FOID0gJ1xceDE4JztcbiAgICBDMC5FTSA9ICdcXHgxOSc7XG4gICAgQzAuU1VCID0gJ1xceDFhJztcbiAgICBDMC5FU0MgPSAnXFx4MWInO1xuICAgIEMwLkZTID0gJ1xceDFjJztcbiAgICBDMC5HUyA9ICdcXHgxZCc7XG4gICAgQzAuUlMgPSAnXFx4MWUnO1xuICAgIEMwLlVTID0gJ1xceDFmJztcbiAgICBDMC5TUCA9ICdcXHgyMCc7XG4gICAgQzAuREVMID0gJ1xceDdmJztcbn0pKEMwID0gZXhwb3J0cy5DMCB8fCAoZXhwb3J0cy5DMCA9IHt9KSk7XG52YXIgQzE7XG4oZnVuY3Rpb24gKEMxKSB7XG4gICAgQzEuUEFEID0gJ1xceDgwJztcbiAgICBDMS5IT1AgPSAnXFx4ODEnO1xuICAgIEMxLkJQSCA9ICdcXHg4Mic7XG4gICAgQzEuTkJIID0gJ1xceDgzJztcbiAgICBDMS5JTkQgPSAnXFx4ODQnO1xuICAgIEMxLk5FTCA9ICdcXHg4NSc7XG4gICAgQzEuU1NBID0gJ1xceDg2JztcbiAgICBDMS5FU0EgPSAnXFx4ODcnO1xuICAgIEMxLkhUUyA9ICdcXHg4OCc7XG4gICAgQzEuSFRKID0gJ1xceDg5JztcbiAgICBDMS5WVFMgPSAnXFx4OGEnO1xuICAgIEMxLlBMRCA9ICdcXHg4Yic7XG4gICAgQzEuUExVID0gJ1xceDhjJztcbiAgICBDMS5SSSA9ICdcXHg4ZCc7XG4gICAgQzEuU1MyID0gJ1xceDhlJztcbiAgICBDMS5TUzMgPSAnXFx4OGYnO1xuICAgIEMxLkRDUyA9ICdcXHg5MCc7XG4gICAgQzEuUFUxID0gJ1xceDkxJztcbiAgICBDMS5QVTIgPSAnXFx4OTInO1xuICAgIEMxLlNUUyA9ICdcXHg5Myc7XG4gICAgQzEuQ0NIID0gJ1xceDk0JztcbiAgICBDMS5NVyA9ICdcXHg5NSc7XG4gICAgQzEuU1BBID0gJ1xceDk2JztcbiAgICBDMS5FUEEgPSAnXFx4OTcnO1xuICAgIEMxLlNPUyA9ICdcXHg5OCc7XG4gICAgQzEuU0dDSSA9ICdcXHg5OSc7XG4gICAgQzEuU0NJID0gJ1xceDlhJztcbiAgICBDMS5DU0kgPSAnXFx4OWInO1xuICAgIEMxLlNUID0gJ1xceDljJztcbiAgICBDMS5PU0MgPSAnXFx4OWQnO1xuICAgIEMxLlBNID0gJ1xceDllJztcbiAgICBDMS5BUEMgPSAnXFx4OWYnO1xufSkoQzEgPSBleHBvcnRzLkMxIHx8IChleHBvcnRzLkMxID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUVzY2FwZVNlcXVlbmNlcy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBUeXBlc18xID0gcmVxdWlyZShcIi4vYXRsYXMvVHlwZXNcIik7XG52YXIgQ2hhckF0bGFzQ2FjaGVfMSA9IHJlcXVpcmUoXCIuL2F0bGFzL0NoYXJBdGxhc0NhY2hlXCIpO1xudmFyIEJ1ZmZlcl8xID0gcmVxdWlyZShcIi4uL0J1ZmZlclwiKTtcbnZhciBDaGFyQXRsYXNVdGlsc18xID0gcmVxdWlyZShcIi4vYXRsYXMvQ2hhckF0bGFzVXRpbHNcIik7XG52YXIgQmFzZVJlbmRlckxheWVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCYXNlUmVuZGVyTGF5ZXIoX2NvbnRhaW5lciwgaWQsIHpJbmRleCwgX2FscGhhLCBfY29sb3JzKSB7XG4gICAgICAgIHRoaXMuX2NvbnRhaW5lciA9IF9jb250YWluZXI7XG4gICAgICAgIHRoaXMuX2FscGhhID0gX2FscGhhO1xuICAgICAgICB0aGlzLl9jb2xvcnMgPSBfY29sb3JzO1xuICAgICAgICB0aGlzLl9zY2FsZWRDaGFyV2lkdGggPSAwO1xuICAgICAgICB0aGlzLl9zY2FsZWRDaGFySGVpZ2h0ID0gMDtcbiAgICAgICAgdGhpcy5fc2NhbGVkQ2VsbFdpZHRoID0gMDtcbiAgICAgICAgdGhpcy5fc2NhbGVkQ2VsbEhlaWdodCA9IDA7XG4gICAgICAgIHRoaXMuX3NjYWxlZENoYXJMZWZ0ID0gMDtcbiAgICAgICAgdGhpcy5fc2NhbGVkQ2hhclRvcCA9IDA7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRHbHlwaElkZW50aWZpZXIgPSB7XG4gICAgICAgICAgICBjaGFyczogJycsXG4gICAgICAgICAgICBjb2RlOiAwLFxuICAgICAgICAgICAgYmc6IDAsXG4gICAgICAgICAgICBmZzogMCxcbiAgICAgICAgICAgIGJvbGQ6IGZhbHNlLFxuICAgICAgICAgICAgZGltOiBmYWxzZSxcbiAgICAgICAgICAgIGl0YWxpYzogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgIHRoaXMuX2NhbnZhcy5jbGFzc0xpc3QuYWRkKFwieHRlcm0tXCIgKyBpZCArIFwiLWxheWVyXCIpO1xuICAgICAgICB0aGlzLl9jYW52YXMuc3R5bGUuekluZGV4ID0gekluZGV4LnRvU3RyaW5nKCk7XG4gICAgICAgIHRoaXMuX2luaXRDYW52YXMoKTtcbiAgICAgICAgdGhpcy5fY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuX2NhbnZhcyk7XG4gICAgfVxuICAgIEJhc2VSZW5kZXJMYXllci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fY29udGFpbmVyLnJlbW92ZUNoaWxkKHRoaXMuX2NhbnZhcyk7XG4gICAgICAgIGlmICh0aGlzLl9jaGFyQXRsYXMpIHtcbiAgICAgICAgICAgIHRoaXMuX2NoYXJBdGxhcy5kaXNwb3NlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJhc2VSZW5kZXJMYXllci5wcm90b3R5cGUuX2luaXRDYW52YXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2N0eCA9IHRoaXMuX2NhbnZhcy5nZXRDb250ZXh0KCcyZCcsIHsgYWxwaGE6IHRoaXMuX2FscGhhIH0pO1xuICAgICAgICBpZiAoIXRoaXMuX2FscGhhKSB7XG4gICAgICAgICAgICB0aGlzLmNsZWFyQWxsKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJhc2VSZW5kZXJMYXllci5wcm90b3R5cGUub25PcHRpb25zQ2hhbmdlZCA9IGZ1bmN0aW9uICh0ZXJtaW5hbCkgeyB9O1xuICAgIEJhc2VSZW5kZXJMYXllci5wcm90b3R5cGUub25CbHVyID0gZnVuY3Rpb24gKHRlcm1pbmFsKSB7IH07XG4gICAgQmFzZVJlbmRlckxheWVyLnByb3RvdHlwZS5vbkZvY3VzID0gZnVuY3Rpb24gKHRlcm1pbmFsKSB7IH07XG4gICAgQmFzZVJlbmRlckxheWVyLnByb3RvdHlwZS5vbkN1cnNvck1vdmUgPSBmdW5jdGlvbiAodGVybWluYWwpIHsgfTtcbiAgICBCYXNlUmVuZGVyTGF5ZXIucHJvdG90eXBlLm9uR3JpZENoYW5nZWQgPSBmdW5jdGlvbiAodGVybWluYWwsIHN0YXJ0Um93LCBlbmRSb3cpIHsgfTtcbiAgICBCYXNlUmVuZGVyTGF5ZXIucHJvdG90eXBlLm9uU2VsZWN0aW9uQ2hhbmdlZCA9IGZ1bmN0aW9uICh0ZXJtaW5hbCwgc3RhcnQsIGVuZCwgY29sdW1uU2VsZWN0TW9kZSkge1xuICAgICAgICBpZiAoY29sdW1uU2VsZWN0TW9kZSA9PT0gdm9pZCAwKSB7IGNvbHVtblNlbGVjdE1vZGUgPSBmYWxzZTsgfVxuICAgIH07XG4gICAgQmFzZVJlbmRlckxheWVyLnByb3RvdHlwZS5vblRoZW1lQ2hhbmdlZCA9IGZ1bmN0aW9uICh0ZXJtaW5hbCwgY29sb3JTZXQpIHtcbiAgICAgICAgdGhpcy5fcmVmcmVzaENoYXJBdGxhcyh0ZXJtaW5hbCwgY29sb3JTZXQpO1xuICAgIH07XG4gICAgQmFzZVJlbmRlckxheWVyLnByb3RvdHlwZS5zZXRUcmFuc3BhcmVuY3kgPSBmdW5jdGlvbiAodGVybWluYWwsIGFscGhhKSB7XG4gICAgICAgIGlmIChhbHBoYSA9PT0gdGhpcy5fYWxwaGEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb2xkQ2FudmFzID0gdGhpcy5fY2FudmFzO1xuICAgICAgICB0aGlzLl9hbHBoYSA9IGFscGhhO1xuICAgICAgICB0aGlzLl9jYW52YXMgPSB0aGlzLl9jYW52YXMuY2xvbmVOb2RlKCk7XG4gICAgICAgIHRoaXMuX2luaXRDYW52YXMoKTtcbiAgICAgICAgdGhpcy5fY29udGFpbmVyLnJlcGxhY2VDaGlsZCh0aGlzLl9jYW52YXMsIG9sZENhbnZhcyk7XG4gICAgICAgIHRoaXMuX3JlZnJlc2hDaGFyQXRsYXModGVybWluYWwsIHRoaXMuX2NvbG9ycyk7XG4gICAgICAgIHRoaXMub25HcmlkQ2hhbmdlZCh0ZXJtaW5hbCwgMCwgdGVybWluYWwucm93cyAtIDEpO1xuICAgIH07XG4gICAgQmFzZVJlbmRlckxheWVyLnByb3RvdHlwZS5fcmVmcmVzaENoYXJBdGxhcyA9IGZ1bmN0aW9uICh0ZXJtaW5hbCwgY29sb3JTZXQpIHtcbiAgICAgICAgaWYgKHRoaXMuX3NjYWxlZENoYXJXaWR0aCA8PSAwICYmIHRoaXMuX3NjYWxlZENoYXJIZWlnaHQgPD0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NoYXJBdGxhcyA9IENoYXJBdGxhc0NhY2hlXzEuYWNxdWlyZUNoYXJBdGxhcyh0ZXJtaW5hbCwgY29sb3JTZXQsIHRoaXMuX3NjYWxlZENoYXJXaWR0aCwgdGhpcy5fc2NhbGVkQ2hhckhlaWdodCk7XG4gICAgICAgIHRoaXMuX2NoYXJBdGxhcy53YXJtVXAoKTtcbiAgICB9O1xuICAgIEJhc2VSZW5kZXJMYXllci5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24gKHRlcm1pbmFsLCBkaW0pIHtcbiAgICAgICAgdGhpcy5fc2NhbGVkQ2VsbFdpZHRoID0gZGltLnNjYWxlZENlbGxXaWR0aDtcbiAgICAgICAgdGhpcy5fc2NhbGVkQ2VsbEhlaWdodCA9IGRpbS5zY2FsZWRDZWxsSGVpZ2h0O1xuICAgICAgICB0aGlzLl9zY2FsZWRDaGFyV2lkdGggPSBkaW0uc2NhbGVkQ2hhcldpZHRoO1xuICAgICAgICB0aGlzLl9zY2FsZWRDaGFySGVpZ2h0ID0gZGltLnNjYWxlZENoYXJIZWlnaHQ7XG4gICAgICAgIHRoaXMuX3NjYWxlZENoYXJMZWZ0ID0gZGltLnNjYWxlZENoYXJMZWZ0O1xuICAgICAgICB0aGlzLl9zY2FsZWRDaGFyVG9wID0gZGltLnNjYWxlZENoYXJUb3A7XG4gICAgICAgIHRoaXMuX2NhbnZhcy53aWR0aCA9IGRpbS5zY2FsZWRDYW52YXNXaWR0aDtcbiAgICAgICAgdGhpcy5fY2FudmFzLmhlaWdodCA9IGRpbS5zY2FsZWRDYW52YXNIZWlnaHQ7XG4gICAgICAgIHRoaXMuX2NhbnZhcy5zdHlsZS53aWR0aCA9IGRpbS5jYW52YXNXaWR0aCArIFwicHhcIjtcbiAgICAgICAgdGhpcy5fY2FudmFzLnN0eWxlLmhlaWdodCA9IGRpbS5jYW52YXNIZWlnaHQgKyBcInB4XCI7XG4gICAgICAgIGlmICghdGhpcy5fYWxwaGEpIHtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJBbGwoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZWZyZXNoQ2hhckF0bGFzKHRlcm1pbmFsLCB0aGlzLl9jb2xvcnMpO1xuICAgIH07XG4gICAgQmFzZVJlbmRlckxheWVyLnByb3RvdHlwZS5maWxsQ2VsbHMgPSBmdW5jdGlvbiAoeCwgeSwgd2lkdGgsIGhlaWdodCkge1xuICAgICAgICB0aGlzLl9jdHguZmlsbFJlY3QoeCAqIHRoaXMuX3NjYWxlZENlbGxXaWR0aCwgeSAqIHRoaXMuX3NjYWxlZENlbGxIZWlnaHQsIHdpZHRoICogdGhpcy5fc2NhbGVkQ2VsbFdpZHRoLCBoZWlnaHQgKiB0aGlzLl9zY2FsZWRDZWxsSGVpZ2h0KTtcbiAgICB9O1xuICAgIEJhc2VSZW5kZXJMYXllci5wcm90b3R5cGUuZmlsbEJvdHRvbUxpbmVBdENlbGxzID0gZnVuY3Rpb24gKHgsIHksIHdpZHRoKSB7XG4gICAgICAgIGlmICh3aWR0aCA9PT0gdm9pZCAwKSB7IHdpZHRoID0gMTsgfVxuICAgICAgICB0aGlzLl9jdHguZmlsbFJlY3QoeCAqIHRoaXMuX3NjYWxlZENlbGxXaWR0aCwgKHkgKyAxKSAqIHRoaXMuX3NjYWxlZENlbGxIZWlnaHQgLSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyAtIDEsIHdpZHRoICogdGhpcy5fc2NhbGVkQ2VsbFdpZHRoLCB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XG4gICAgfTtcbiAgICBCYXNlUmVuZGVyTGF5ZXIucHJvdG90eXBlLmZpbGxMZWZ0TGluZUF0Q2VsbCA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgICAgIHRoaXMuX2N0eC5maWxsUmVjdCh4ICogdGhpcy5fc2NhbGVkQ2VsbFdpZHRoLCB5ICogdGhpcy5fc2NhbGVkQ2VsbEhlaWdodCwgd2luZG93LmRldmljZVBpeGVsUmF0aW8sIHRoaXMuX3NjYWxlZENlbGxIZWlnaHQpO1xuICAgIH07XG4gICAgQmFzZVJlbmRlckxheWVyLnByb3RvdHlwZS5zdHJva2VSZWN0QXRDZWxsID0gZnVuY3Rpb24gKHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgdGhpcy5fY3R4LmxpbmVXaWR0aCA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgICAgICB0aGlzLl9jdHguc3Ryb2tlUmVjdCh4ICogdGhpcy5fc2NhbGVkQ2VsbFdpZHRoICsgd2luZG93LmRldmljZVBpeGVsUmF0aW8gLyAyLCB5ICogdGhpcy5fc2NhbGVkQ2VsbEhlaWdodCArICh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyAvIDIpLCB3aWR0aCAqIHRoaXMuX3NjYWxlZENlbGxXaWR0aCAtIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvLCAoaGVpZ2h0ICogdGhpcy5fc2NhbGVkQ2VsbEhlaWdodCkgLSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XG4gICAgfTtcbiAgICBCYXNlUmVuZGVyTGF5ZXIucHJvdG90eXBlLmNsZWFyQWxsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fYWxwaGEpIHtcbiAgICAgICAgICAgIHRoaXMuX2N0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5fY2FudmFzLndpZHRoLCB0aGlzLl9jYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2N0eC5maWxsU3R5bGUgPSB0aGlzLl9jb2xvcnMuYmFja2dyb3VuZC5jc3M7XG4gICAgICAgICAgICB0aGlzLl9jdHguZmlsbFJlY3QoMCwgMCwgdGhpcy5fY2FudmFzLndpZHRoLCB0aGlzLl9jYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQmFzZVJlbmRlckxheWVyLnByb3RvdHlwZS5jbGVhckNlbGxzID0gZnVuY3Rpb24gKHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FscGhhKSB7XG4gICAgICAgICAgICB0aGlzLl9jdHguY2xlYXJSZWN0KHggKiB0aGlzLl9zY2FsZWRDZWxsV2lkdGgsIHkgKiB0aGlzLl9zY2FsZWRDZWxsSGVpZ2h0LCB3aWR0aCAqIHRoaXMuX3NjYWxlZENlbGxXaWR0aCwgaGVpZ2h0ICogdGhpcy5fc2NhbGVkQ2VsbEhlaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9jdHguZmlsbFN0eWxlID0gdGhpcy5fY29sb3JzLmJhY2tncm91bmQuY3NzO1xuICAgICAgICAgICAgdGhpcy5fY3R4LmZpbGxSZWN0KHggKiB0aGlzLl9zY2FsZWRDZWxsV2lkdGgsIHkgKiB0aGlzLl9zY2FsZWRDZWxsSGVpZ2h0LCB3aWR0aCAqIHRoaXMuX3NjYWxlZENlbGxXaWR0aCwgaGVpZ2h0ICogdGhpcy5fc2NhbGVkQ2VsbEhlaWdodCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJhc2VSZW5kZXJMYXllci5wcm90b3R5cGUuZmlsbENoYXJUcnVlQ29sb3IgPSBmdW5jdGlvbiAodGVybWluYWwsIGNoYXJEYXRhLCB4LCB5KSB7XG4gICAgICAgIHRoaXMuX2N0eC5mb250ID0gdGhpcy5fZ2V0Rm9udCh0ZXJtaW5hbCwgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5fY3R4LnRleHRCYXNlbGluZSA9ICd0b3AnO1xuICAgICAgICB0aGlzLl9jbGlwUm93KHRlcm1pbmFsLCB5KTtcbiAgICAgICAgdGhpcy5fY3R4LmZpbGxUZXh0KGNoYXJEYXRhW0J1ZmZlcl8xLkNIQVJfREFUQV9DSEFSX0lOREVYXSwgeCAqIHRoaXMuX3NjYWxlZENlbGxXaWR0aCArIHRoaXMuX3NjYWxlZENoYXJMZWZ0LCB5ICogdGhpcy5fc2NhbGVkQ2VsbEhlaWdodCArIHRoaXMuX3NjYWxlZENoYXJUb3ApO1xuICAgIH07XG4gICAgQmFzZVJlbmRlckxheWVyLnByb3RvdHlwZS5kcmF3Q2hhcnMgPSBmdW5jdGlvbiAodGVybWluYWwsIGNoYXJzLCBjb2RlLCB3aWR0aCwgeCwgeSwgZmcsIGJnLCBib2xkLCBkaW0sIGl0YWxpYykge1xuICAgICAgICB2YXIgZHJhd0luQnJpZ2h0Q29sb3IgPSB0ZXJtaW5hbC5vcHRpb25zLmRyYXdCb2xkVGV4dEluQnJpZ2h0Q29sb3JzICYmIGJvbGQgJiYgZmcgPCA4ICYmIGZnICE9PSBUeXBlc18xLklOVkVSVEVEX0RFRkFVTFRfQ09MT1I7XG4gICAgICAgIGZnICs9IGRyYXdJbkJyaWdodENvbG9yID8gOCA6IDA7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRHbHlwaElkZW50aWZpZXIuY2hhcnMgPSBjaGFycztcbiAgICAgICAgdGhpcy5fY3VycmVudEdseXBoSWRlbnRpZmllci5jb2RlID0gY29kZTtcbiAgICAgICAgdGhpcy5fY3VycmVudEdseXBoSWRlbnRpZmllci5iZyA9IGJnO1xuICAgICAgICB0aGlzLl9jdXJyZW50R2x5cGhJZGVudGlmaWVyLmZnID0gZmc7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRHbHlwaElkZW50aWZpZXIuYm9sZCA9IGJvbGQgJiYgdGVybWluYWwub3B0aW9ucy5lbmFibGVCb2xkO1xuICAgICAgICB0aGlzLl9jdXJyZW50R2x5cGhJZGVudGlmaWVyLmRpbSA9IGRpbTtcbiAgICAgICAgdGhpcy5fY3VycmVudEdseXBoSWRlbnRpZmllci5pdGFsaWMgPSBpdGFsaWM7XG4gICAgICAgIHZhciBhdGxhc0RpZERyYXcgPSB0aGlzLl9jaGFyQXRsYXMgJiYgdGhpcy5fY2hhckF0bGFzLmRyYXcodGhpcy5fY3R4LCB0aGlzLl9jdXJyZW50R2x5cGhJZGVudGlmaWVyLCB4ICogdGhpcy5fc2NhbGVkQ2VsbFdpZHRoICsgdGhpcy5fc2NhbGVkQ2hhckxlZnQsIHkgKiB0aGlzLl9zY2FsZWRDZWxsSGVpZ2h0ICsgdGhpcy5fc2NhbGVkQ2hhclRvcCk7XG4gICAgICAgIGlmICghYXRsYXNEaWREcmF3KSB7XG4gICAgICAgICAgICB0aGlzLl9kcmF3VW5jYWNoZWRDaGFycyh0ZXJtaW5hbCwgY2hhcnMsIHdpZHRoLCBmZywgeCwgeSwgYm9sZCAmJiB0ZXJtaW5hbC5vcHRpb25zLmVuYWJsZUJvbGQsIGRpbSwgaXRhbGljKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQmFzZVJlbmRlckxheWVyLnByb3RvdHlwZS5fZHJhd1VuY2FjaGVkQ2hhcnMgPSBmdW5jdGlvbiAodGVybWluYWwsIGNoYXJzLCB3aWR0aCwgZmcsIHgsIHksIGJvbGQsIGRpbSwgaXRhbGljKSB7XG4gICAgICAgIHRoaXMuX2N0eC5zYXZlKCk7XG4gICAgICAgIHRoaXMuX2N0eC5mb250ID0gdGhpcy5fZ2V0Rm9udCh0ZXJtaW5hbCwgYm9sZCwgaXRhbGljKTtcbiAgICAgICAgdGhpcy5fY3R4LnRleHRCYXNlbGluZSA9ICd0b3AnO1xuICAgICAgICBpZiAoZmcgPT09IFR5cGVzXzEuSU5WRVJURURfREVGQVVMVF9DT0xPUikge1xuICAgICAgICAgICAgdGhpcy5fY3R4LmZpbGxTdHlsZSA9IHRoaXMuX2NvbG9ycy5iYWNrZ3JvdW5kLmNzcztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChDaGFyQXRsYXNVdGlsc18xLmlzMjU2Q29sb3IoZmcpKSB7XG4gICAgICAgICAgICB0aGlzLl9jdHguZmlsbFN0eWxlID0gdGhpcy5fY29sb3JzLmFuc2lbZmddLmNzcztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2N0eC5maWxsU3R5bGUgPSB0aGlzLl9jb2xvcnMuZm9yZWdyb3VuZC5jc3M7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY2xpcFJvdyh0ZXJtaW5hbCwgeSk7XG4gICAgICAgIGlmIChkaW0pIHtcbiAgICAgICAgICAgIHRoaXMuX2N0eC5nbG9iYWxBbHBoYSA9IFR5cGVzXzEuRElNX09QQUNJVFk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY3R4LmZpbGxUZXh0KGNoYXJzLCB4ICogdGhpcy5fc2NhbGVkQ2VsbFdpZHRoICsgdGhpcy5fc2NhbGVkQ2hhckxlZnQsIHkgKiB0aGlzLl9zY2FsZWRDZWxsSGVpZ2h0ICsgdGhpcy5fc2NhbGVkQ2hhclRvcCk7XG4gICAgICAgIHRoaXMuX2N0eC5yZXN0b3JlKCk7XG4gICAgfTtcbiAgICBCYXNlUmVuZGVyTGF5ZXIucHJvdG90eXBlLl9jbGlwUm93ID0gZnVuY3Rpb24gKHRlcm1pbmFsLCB5KSB7XG4gICAgICAgIHRoaXMuX2N0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgdGhpcy5fY3R4LnJlY3QoMCwgeSAqIHRoaXMuX3NjYWxlZENlbGxIZWlnaHQsIHRlcm1pbmFsLmNvbHMgKiB0aGlzLl9zY2FsZWRDZWxsV2lkdGgsIHRoaXMuX3NjYWxlZENlbGxIZWlnaHQpO1xuICAgICAgICB0aGlzLl9jdHguY2xpcCgpO1xuICAgIH07XG4gICAgQmFzZVJlbmRlckxheWVyLnByb3RvdHlwZS5fZ2V0Rm9udCA9IGZ1bmN0aW9uICh0ZXJtaW5hbCwgaXNCb2xkLCBpc0l0YWxpYykge1xuICAgICAgICB2YXIgZm9udFdlaWdodCA9IGlzQm9sZCA/IHRlcm1pbmFsLm9wdGlvbnMuZm9udFdlaWdodEJvbGQgOiB0ZXJtaW5hbC5vcHRpb25zLmZvbnRXZWlnaHQ7XG4gICAgICAgIHZhciBmb250U3R5bGUgPSBpc0l0YWxpYyA/ICdpdGFsaWMnIDogJyc7XG4gICAgICAgIHJldHVybiBmb250U3R5bGUgKyBcIiBcIiArIGZvbnRXZWlnaHQgKyBcIiBcIiArIHRlcm1pbmFsLm9wdGlvbnMuZm9udFNpemUgKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyArIFwicHggXCIgKyB0ZXJtaW5hbC5vcHRpb25zLmZvbnRGYW1pbHk7XG4gICAgfTtcbiAgICByZXR1cm4gQmFzZVJlbmRlckxheWVyO1xufSgpKTtcbmV4cG9ydHMuQmFzZVJlbmRlckxheWVyID0gQmFzZVJlbmRlckxheWVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QmFzZVJlbmRlckxheWVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIERFRkFVTFRfRk9SRUdST1VORCA9IGZyb21IZXgoJyNmZmZmZmYnKTtcbnZhciBERUZBVUxUX0JBQ0tHUk9VTkQgPSBmcm9tSGV4KCcjMDAwMDAwJyk7XG52YXIgREVGQVVMVF9DVVJTT1IgPSBmcm9tSGV4KCcjZmZmZmZmJyk7XG52YXIgREVGQVVMVF9DVVJTT1JfQUNDRU5UID0gZnJvbUhleCgnIzAwMDAwMCcpO1xudmFyIERFRkFVTFRfU0VMRUNUSU9OID0ge1xuICAgIGNzczogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKScsXG4gICAgcmdiYTogMHhGRkZGRkY3N1xufTtcbmV4cG9ydHMuREVGQVVMVF9BTlNJX0NPTE9SUyA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNvbG9ycyA9IFtcbiAgICAgICAgZnJvbUhleCgnIzJlMzQzNicpLFxuICAgICAgICBmcm9tSGV4KCcjY2MwMDAwJyksXG4gICAgICAgIGZyb21IZXgoJyM0ZTlhMDYnKSxcbiAgICAgICAgZnJvbUhleCgnI2M0YTAwMCcpLFxuICAgICAgICBmcm9tSGV4KCcjMzQ2NWE0JyksXG4gICAgICAgIGZyb21IZXgoJyM3NTUwN2InKSxcbiAgICAgICAgZnJvbUhleCgnIzA2OTg5YScpLFxuICAgICAgICBmcm9tSGV4KCcjZDNkN2NmJyksXG4gICAgICAgIGZyb21IZXgoJyM1NTU3NTMnKSxcbiAgICAgICAgZnJvbUhleCgnI2VmMjkyOScpLFxuICAgICAgICBmcm9tSGV4KCcjOGFlMjM0JyksXG4gICAgICAgIGZyb21IZXgoJyNmY2U5NGYnKSxcbiAgICAgICAgZnJvbUhleCgnIzcyOWZjZicpLFxuICAgICAgICBmcm9tSGV4KCcjYWQ3ZmE4JyksXG4gICAgICAgIGZyb21IZXgoJyMzNGUyZTInKSxcbiAgICAgICAgZnJvbUhleCgnI2VlZWVlYycpXG4gICAgXTtcbiAgICB2YXIgdiA9IFsweDAwLCAweDVmLCAweDg3LCAweGFmLCAweGQ3LCAweGZmXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDIxNjsgaSsrKSB7XG4gICAgICAgIHZhciByID0gdlsoaSAvIDM2KSAlIDYgfCAwXTtcbiAgICAgICAgdmFyIGcgPSB2WyhpIC8gNikgJSA2IHwgMF07XG4gICAgICAgIHZhciBiID0gdltpICUgNl07XG4gICAgICAgIGNvbG9ycy5wdXNoKHtcbiAgICAgICAgICAgIGNzczogXCIjXCIgKyB0b1BhZGRlZEhleChyKSArIHRvUGFkZGVkSGV4KGcpICsgdG9QYWRkZWRIZXgoYiksXG4gICAgICAgICAgICByZ2JhOiAoKHIgPDwgMjQpIHwgKGcgPDwgMTYpIHwgKGIgPDwgOCkgfCAweEZGKSA+Pj4gMFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNDsgaSsrKSB7XG4gICAgICAgIHZhciBjID0gOCArIGkgKiAxMDtcbiAgICAgICAgdmFyIGNoID0gdG9QYWRkZWRIZXgoYyk7XG4gICAgICAgIGNvbG9ycy5wdXNoKHtcbiAgICAgICAgICAgIGNzczogXCIjXCIgKyBjaCArIGNoICsgY2gsXG4gICAgICAgICAgICByZ2JhOiAoKGMgPDwgMjQpIHwgKGMgPDwgMTYpIHwgKGMgPDwgOCkgfCAweEZGKSA+Pj4gMFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9ycztcbn0pKCk7XG5mdW5jdGlvbiBmcm9tSGV4KGNzcykge1xuICAgIHJldHVybiB7XG4gICAgICAgIGNzczogY3NzLFxuICAgICAgICByZ2JhOiBwYXJzZUludChjc3Muc2xpY2UoMSksIDE2KSA8PCA4IHwgMHhGRlxuICAgIH07XG59XG5mdW5jdGlvbiB0b1BhZGRlZEhleChjKSB7XG4gICAgdmFyIHMgPSBjLnRvU3RyaW5nKDE2KTtcbiAgICByZXR1cm4gcy5sZW5ndGggPCAyID8gJzAnICsgcyA6IHM7XG59XG52YXIgQ29sb3JNYW5hZ2VyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb2xvck1hbmFnZXIoZG9jdW1lbnQsIGFsbG93VHJhbnNwYXJlbmN5KSB7XG4gICAgICAgIHRoaXMuYWxsb3dUcmFuc3BhcmVuY3kgPSBhbGxvd1RyYW5zcGFyZW5jeTtcbiAgICAgICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgICBjYW52YXMud2lkdGggPSAxO1xuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gMTtcbiAgICAgICAgdGhpcy5fY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIHRoaXMuX2N0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnY29weSc7XG4gICAgICAgIHRoaXMuX2xpdG11c0NvbG9yID0gdGhpcy5fY3R4LmNyZWF0ZUxpbmVhckdyYWRpZW50KDAsIDAsIDEsIDEpO1xuICAgICAgICB0aGlzLmNvbG9ycyA9IHtcbiAgICAgICAgICAgIGZvcmVncm91bmQ6IERFRkFVTFRfRk9SRUdST1VORCxcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IERFRkFVTFRfQkFDS0dST1VORCxcbiAgICAgICAgICAgIGN1cnNvcjogREVGQVVMVF9DVVJTT1IsXG4gICAgICAgICAgICBjdXJzb3JBY2NlbnQ6IERFRkFVTFRfQ1VSU09SX0FDQ0VOVCxcbiAgICAgICAgICAgIHNlbGVjdGlvbjogREVGQVVMVF9TRUxFQ1RJT04sXG4gICAgICAgICAgICBhbnNpOiBleHBvcnRzLkRFRkFVTFRfQU5TSV9DT0xPUlMuc2xpY2UoKVxuICAgICAgICB9O1xuICAgIH1cbiAgICBDb2xvck1hbmFnZXIucHJvdG90eXBlLnNldFRoZW1lID0gZnVuY3Rpb24gKHRoZW1lKSB7XG4gICAgICAgIHRoaXMuY29sb3JzLmZvcmVncm91bmQgPSB0aGlzLl9wYXJzZUNvbG9yKHRoZW1lLmZvcmVncm91bmQsIERFRkFVTFRfRk9SRUdST1VORCk7XG4gICAgICAgIHRoaXMuY29sb3JzLmJhY2tncm91bmQgPSB0aGlzLl9wYXJzZUNvbG9yKHRoZW1lLmJhY2tncm91bmQsIERFRkFVTFRfQkFDS0dST1VORCk7XG4gICAgICAgIHRoaXMuY29sb3JzLmN1cnNvciA9IHRoaXMuX3BhcnNlQ29sb3IodGhlbWUuY3Vyc29yLCBERUZBVUxUX0NVUlNPUiwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuY29sb3JzLmN1cnNvckFjY2VudCA9IHRoaXMuX3BhcnNlQ29sb3IodGhlbWUuY3Vyc29yQWNjZW50LCBERUZBVUxUX0NVUlNPUl9BQ0NFTlQsIHRydWUpO1xuICAgICAgICB0aGlzLmNvbG9ycy5zZWxlY3Rpb24gPSB0aGlzLl9wYXJzZUNvbG9yKHRoZW1lLnNlbGVjdGlvbiwgREVGQVVMVF9TRUxFQ1RJT04sIHRydWUpO1xuICAgICAgICB0aGlzLmNvbG9ycy5hbnNpWzBdID0gdGhpcy5fcGFyc2VDb2xvcih0aGVtZS5ibGFjaywgZXhwb3J0cy5ERUZBVUxUX0FOU0lfQ09MT1JTWzBdKTtcbiAgICAgICAgdGhpcy5jb2xvcnMuYW5zaVsxXSA9IHRoaXMuX3BhcnNlQ29sb3IodGhlbWUucmVkLCBleHBvcnRzLkRFRkFVTFRfQU5TSV9DT0xPUlNbMV0pO1xuICAgICAgICB0aGlzLmNvbG9ycy5hbnNpWzJdID0gdGhpcy5fcGFyc2VDb2xvcih0aGVtZS5ncmVlbiwgZXhwb3J0cy5ERUZBVUxUX0FOU0lfQ09MT1JTWzJdKTtcbiAgICAgICAgdGhpcy5jb2xvcnMuYW5zaVszXSA9IHRoaXMuX3BhcnNlQ29sb3IodGhlbWUueWVsbG93LCBleHBvcnRzLkRFRkFVTFRfQU5TSV9DT0xPUlNbM10pO1xuICAgICAgICB0aGlzLmNvbG9ycy5hbnNpWzRdID0gdGhpcy5fcGFyc2VDb2xvcih0aGVtZS5ibHVlLCBleHBvcnRzLkRFRkFVTFRfQU5TSV9DT0xPUlNbNF0pO1xuICAgICAgICB0aGlzLmNvbG9ycy5hbnNpWzVdID0gdGhpcy5fcGFyc2VDb2xvcih0aGVtZS5tYWdlbnRhLCBleHBvcnRzLkRFRkFVTFRfQU5TSV9DT0xPUlNbNV0pO1xuICAgICAgICB0aGlzLmNvbG9ycy5hbnNpWzZdID0gdGhpcy5fcGFyc2VDb2xvcih0aGVtZS5jeWFuLCBleHBvcnRzLkRFRkFVTFRfQU5TSV9DT0xPUlNbNl0pO1xuICAgICAgICB0aGlzLmNvbG9ycy5hbnNpWzddID0gdGhpcy5fcGFyc2VDb2xvcih0aGVtZS53aGl0ZSwgZXhwb3J0cy5ERUZBVUxUX0FOU0lfQ09MT1JTWzddKTtcbiAgICAgICAgdGhpcy5jb2xvcnMuYW5zaVs4XSA9IHRoaXMuX3BhcnNlQ29sb3IodGhlbWUuYnJpZ2h0QmxhY2ssIGV4cG9ydHMuREVGQVVMVF9BTlNJX0NPTE9SU1s4XSk7XG4gICAgICAgIHRoaXMuY29sb3JzLmFuc2lbOV0gPSB0aGlzLl9wYXJzZUNvbG9yKHRoZW1lLmJyaWdodFJlZCwgZXhwb3J0cy5ERUZBVUxUX0FOU0lfQ09MT1JTWzldKTtcbiAgICAgICAgdGhpcy5jb2xvcnMuYW5zaVsxMF0gPSB0aGlzLl9wYXJzZUNvbG9yKHRoZW1lLmJyaWdodEdyZWVuLCBleHBvcnRzLkRFRkFVTFRfQU5TSV9DT0xPUlNbMTBdKTtcbiAgICAgICAgdGhpcy5jb2xvcnMuYW5zaVsxMV0gPSB0aGlzLl9wYXJzZUNvbG9yKHRoZW1lLmJyaWdodFllbGxvdywgZXhwb3J0cy5ERUZBVUxUX0FOU0lfQ09MT1JTWzExXSk7XG4gICAgICAgIHRoaXMuY29sb3JzLmFuc2lbMTJdID0gdGhpcy5fcGFyc2VDb2xvcih0aGVtZS5icmlnaHRCbHVlLCBleHBvcnRzLkRFRkFVTFRfQU5TSV9DT0xPUlNbMTJdKTtcbiAgICAgICAgdGhpcy5jb2xvcnMuYW5zaVsxM10gPSB0aGlzLl9wYXJzZUNvbG9yKHRoZW1lLmJyaWdodE1hZ2VudGEsIGV4cG9ydHMuREVGQVVMVF9BTlNJX0NPTE9SU1sxM10pO1xuICAgICAgICB0aGlzLmNvbG9ycy5hbnNpWzE0XSA9IHRoaXMuX3BhcnNlQ29sb3IodGhlbWUuYnJpZ2h0Q3lhbiwgZXhwb3J0cy5ERUZBVUxUX0FOU0lfQ09MT1JTWzE0XSk7XG4gICAgICAgIHRoaXMuY29sb3JzLmFuc2lbMTVdID0gdGhpcy5fcGFyc2VDb2xvcih0aGVtZS5icmlnaHRXaGl0ZSwgZXhwb3J0cy5ERUZBVUxUX0FOU0lfQ09MT1JTWzE1XSk7XG4gICAgfTtcbiAgICBDb2xvck1hbmFnZXIucHJvdG90eXBlLl9wYXJzZUNvbG9yID0gZnVuY3Rpb24gKGNzcywgZmFsbGJhY2ssIGFsbG93VHJhbnNwYXJlbmN5KSB7XG4gICAgICAgIGlmIChhbGxvd1RyYW5zcGFyZW5jeSA9PT0gdm9pZCAwKSB7IGFsbG93VHJhbnNwYXJlbmN5ID0gdGhpcy5hbGxvd1RyYW5zcGFyZW5jeTsgfVxuICAgICAgICBpZiAoIWNzcykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbGxiYWNrO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2N0eC5maWxsU3R5bGUgPSB0aGlzLl9saXRtdXNDb2xvcjtcbiAgICAgICAgdGhpcy5fY3R4LmZpbGxTdHlsZSA9IGNzcztcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9jdHguZmlsbFN0eWxlICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiQ29sb3I6IFwiICsgY3NzICsgXCIgaXMgaW52YWxpZCB1c2luZyBmYWxsYmFjayBcIiArIGZhbGxiYWNrLmNzcyk7XG4gICAgICAgICAgICByZXR1cm4gZmFsbGJhY2s7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY3R4LmZpbGxSZWN0KDAsIDAsIDEsIDEpO1xuICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2N0eC5nZXRJbWFnZURhdGEoMCwgMCwgMSwgMSkuZGF0YTtcbiAgICAgICAgaWYgKCFhbGxvd1RyYW5zcGFyZW5jeSAmJiBkYXRhWzNdICE9PSAweEZGKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJDb2xvcjogXCIgKyBjc3MgKyBcIiBpcyB1c2luZyB0cmFuc3BhcmVuY3ksIGJ1dCBhbGxvd1RyYW5zcGFyZW5jeSBpcyBmYWxzZS4gXCIgK1xuICAgICAgICAgICAgICAgIChcIlVzaW5nIGZhbGxiYWNrIFwiICsgZmFsbGJhY2suY3NzICsgXCIuXCIpKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxsYmFjaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY3NzOiBjc3MsXG4gICAgICAgICAgICByZ2JhOiAoZGF0YVswXSA8PCAyNCB8IGRhdGFbMV0gPDwgMTYgfCBkYXRhWzJdIDw8IDggfCBkYXRhWzNdKSA+Pj4gMFxuICAgICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIENvbG9yTWFuYWdlcjtcbn0oKSk7XG5leHBvcnRzLkNvbG9yTWFuYWdlciA9IENvbG9yTWFuYWdlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbG9yTWFuYWdlci5qcy5tYXAiLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiLyoqXG4gKiBIZWxwZXJzLlxuICovXG5cbnZhciBzID0gMTAwMDtcbnZhciBtID0gcyAqIDYwO1xudmFyIGggPSBtICogNjA7XG52YXIgZCA9IGggKiAyNDtcbnZhciB5ID0gZCAqIDM2NS4yNTtcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEB0aHJvd3Mge0Vycm9yfSB0aHJvdyBhbiBlcnJvciBpZiB2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIG51bWJlclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih2YWwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcbiAgaWYgKHR5cGUgPT09ICdzdHJpbmcnICYmIHZhbC5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlKHZhbCk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicgJiYgaXNOYU4odmFsKSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5sb25nID8gZm10TG9uZyh2YWwpIDogZm10U2hvcnQodmFsKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgJ3ZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgdmFsaWQgbnVtYmVyLiB2YWw9JyArXG4gICAgICBKU09OLnN0cmluZ2lmeSh2YWwpXG4gICk7XG59O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBgc3RyYCBhbmQgcmV0dXJuIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZShzdHIpIHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChzdHIubGVuZ3RoID4gMTAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBtYXRjaCA9IC9eKCg/OlxcZCspP1xcLj9cXGQrKSAqKG1pbGxpc2Vjb25kcz98bXNlY3M/fG1zfHNlY29uZHM/fHNlY3M/fHN8bWludXRlcz98bWlucz98bXxob3Vycz98aHJzP3xofGRheXM/fGR8eWVhcnM/fHlycz98eSk/JC9pLmV4ZWMoXG4gICAgc3RyXG4gICk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG4gPSBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcbiAgdmFyIHR5cGUgPSAobWF0Y2hbMl0gfHwgJ21zJykudG9Mb3dlckNhc2UoKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAneWVhcnMnOlxuICAgIGNhc2UgJ3llYXInOlxuICAgIGNhc2UgJ3lycyc6XG4gICAgY2FzZSAneXInOlxuICAgIGNhc2UgJ3knOlxuICAgICAgcmV0dXJuIG4gKiB5O1xuICAgIGNhc2UgJ2RheXMnOlxuICAgIGNhc2UgJ2RheSc6XG4gICAgY2FzZSAnZCc6XG4gICAgICByZXR1cm4gbiAqIGQ7XG4gICAgY2FzZSAnaG91cnMnOlxuICAgIGNhc2UgJ2hvdXInOlxuICAgIGNhc2UgJ2hycyc6XG4gICAgY2FzZSAnaHInOlxuICAgIGNhc2UgJ2gnOlxuICAgICAgcmV0dXJuIG4gKiBoO1xuICAgIGNhc2UgJ21pbnV0ZXMnOlxuICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgY2FzZSAnbWlucyc6XG4gICAgY2FzZSAnbWluJzpcbiAgICBjYXNlICdtJzpcbiAgICAgIHJldHVybiBuICogbTtcbiAgICBjYXNlICdzZWNvbmRzJzpcbiAgICBjYXNlICdzZWNvbmQnOlxuICAgIGNhc2UgJ3NlY3MnOlxuICAgIGNhc2UgJ3NlYyc6XG4gICAgY2FzZSAncyc6XG4gICAgICByZXR1cm4gbiAqIHM7XG4gICAgY2FzZSAnbWlsbGlzZWNvbmRzJzpcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgY2FzZSAnbXNlY3MnOlxuICAgIGNhc2UgJ21zZWMnOlxuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG59XG5cbi8qKlxuICogU2hvcnQgZm9ybWF0IGZvciBgbXNgLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBtc1xuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZm10U2hvcnQobXMpIHtcbiAgaWYgKG1zID49IGQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGQpICsgJ2QnO1xuICB9XG4gIGlmIChtcyA+PSBoKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBoKSArICdoJztcbiAgfVxuICBpZiAobXMgPj0gbSkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbSkgKyAnbSc7XG4gIH1cbiAgaWYgKG1zID49IHMpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIHMpICsgJ3MnO1xuICB9XG4gIHJldHVybiBtcyArICdtcyc7XG59XG5cbi8qKlxuICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRMb25nKG1zKSB7XG4gIHJldHVybiBwbHVyYWwobXMsIGQsICdkYXknKSB8fFxuICAgIHBsdXJhbChtcywgaCwgJ2hvdXInKSB8fFxuICAgIHBsdXJhbChtcywgbSwgJ21pbnV0ZScpIHx8XG4gICAgcGx1cmFsKG1zLCBzLCAnc2Vjb25kJykgfHxcbiAgICBtcyArICcgbXMnO1xufVxuXG4vKipcbiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLlxuICovXG5cbmZ1bmN0aW9uIHBsdXJhbChtcywgbiwgbmFtZSkge1xuICBpZiAobXMgPCBuKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChtcyA8IG4gKiAxLjUpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihtcyAvIG4pICsgJyAnICsgbmFtZTtcbiAgfVxuICByZXR1cm4gTWF0aC5jZWlsKG1zIC8gbikgKyAnICcgKyBuYW1lICsgJ3MnO1xufVxuIiwiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLXBhcnNlcicpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpO1xudmFyIGJpbmFyeSA9IHJlcXVpcmUoJy4vYmluYXJ5Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKTtcbnZhciBpc0J1ZiA9IHJlcXVpcmUoJy4vaXMtYnVmZmVyJyk7XG5cbi8qKlxuICogUHJvdG9jb2wgdmVyc2lvbi5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMucHJvdG9jb2wgPSA0O1xuXG4vKipcbiAqIFBhY2tldCB0eXBlcy5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMudHlwZXMgPSBbXG4gICdDT05ORUNUJyxcbiAgJ0RJU0NPTk5FQ1QnLFxuICAnRVZFTlQnLFxuICAnQUNLJyxcbiAgJ0VSUk9SJyxcbiAgJ0JJTkFSWV9FVkVOVCcsXG4gICdCSU5BUllfQUNLJ1xuXTtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSBgY29ubmVjdGAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkNPTk5FQ1QgPSAwO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBkaXNjb25uZWN0YC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuRElTQ09OTkVDVCA9IDE7XG5cbi8qKlxuICogUGFja2V0IHR5cGUgYGV2ZW50YC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuRVZFTlQgPSAyO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBhY2tgLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5BQ0sgPSAzO1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBlcnJvcmAuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLkVSUk9SID0gNDtcblxuLyoqXG4gKiBQYWNrZXQgdHlwZSAnYmluYXJ5IGV2ZW50J1xuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5CSU5BUllfRVZFTlQgPSA1O1xuXG4vKipcbiAqIFBhY2tldCB0eXBlIGBiaW5hcnkgYWNrYC4gRm9yIGFja3Mgd2l0aCBiaW5hcnkgYXJndW1lbnRzLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5CSU5BUllfQUNLID0gNjtcblxuLyoqXG4gKiBFbmNvZGVyIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5FbmNvZGVyID0gRW5jb2RlcjtcblxuLyoqXG4gKiBEZWNvZGVyIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5EZWNvZGVyID0gRGVjb2RlcjtcblxuLyoqXG4gKiBBIHNvY2tldC5pbyBFbmNvZGVyIGluc3RhbmNlXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBFbmNvZGVyKCkge31cblxudmFyIEVSUk9SX1BBQ0tFVCA9IGV4cG9ydHMuRVJST1IgKyAnXCJlbmNvZGUgZXJyb3JcIic7XG5cbi8qKlxuICogRW5jb2RlIGEgcGFja2V0IGFzIGEgc2luZ2xlIHN0cmluZyBpZiBub24tYmluYXJ5LCBvciBhcyBhXG4gKiBidWZmZXIgc2VxdWVuY2UsIGRlcGVuZGluZyBvbiBwYWNrZXQgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIC0gcGFja2V0IG9iamVjdFxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBmdW5jdGlvbiB0byBoYW5kbGUgZW5jb2RpbmdzIChsaWtlbHkgZW5naW5lLndyaXRlKVxuICogQHJldHVybiBDYWxscyBjYWxsYmFjayB3aXRoIEFycmF5IG9mIGVuY29kaW5nc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5FbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbihvYmosIGNhbGxiYWNrKXtcbiAgZGVidWcoJ2VuY29kaW5nIHBhY2tldCAlaicsIG9iaik7XG5cbiAgaWYgKGV4cG9ydHMuQklOQVJZX0VWRU5UID09PSBvYmoudHlwZSB8fCBleHBvcnRzLkJJTkFSWV9BQ0sgPT09IG9iai50eXBlKSB7XG4gICAgZW5jb2RlQXNCaW5hcnkob2JqLCBjYWxsYmFjayk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGVuY29kaW5nID0gZW5jb2RlQXNTdHJpbmcob2JqKTtcbiAgICBjYWxsYmFjayhbZW5jb2RpbmddKTtcbiAgfVxufTtcblxuLyoqXG4gKiBFbmNvZGUgcGFja2V0IGFzIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAcmV0dXJuIHtTdHJpbmd9IGVuY29kZWRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGVuY29kZUFzU3RyaW5nKG9iaikge1xuXG4gIC8vIGZpcnN0IGlzIHR5cGVcbiAgdmFyIHN0ciA9ICcnICsgb2JqLnR5cGU7XG5cbiAgLy8gYXR0YWNobWVudHMgaWYgd2UgaGF2ZSB0aGVtXG4gIGlmIChleHBvcnRzLkJJTkFSWV9FVkVOVCA9PT0gb2JqLnR5cGUgfHwgZXhwb3J0cy5CSU5BUllfQUNLID09PSBvYmoudHlwZSkge1xuICAgIHN0ciArPSBvYmouYXR0YWNobWVudHMgKyAnLSc7XG4gIH1cblxuICAvLyBpZiB3ZSBoYXZlIGEgbmFtZXNwYWNlIG90aGVyIHRoYW4gYC9gXG4gIC8vIHdlIGFwcGVuZCBpdCBmb2xsb3dlZCBieSBhIGNvbW1hIGAsYFxuICBpZiAob2JqLm5zcCAmJiAnLycgIT09IG9iai5uc3ApIHtcbiAgICBzdHIgKz0gb2JqLm5zcCArICcsJztcbiAgfVxuXG4gIC8vIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IHRoZSBpZFxuICBpZiAobnVsbCAhPSBvYmouaWQpIHtcbiAgICBzdHIgKz0gb2JqLmlkO1xuICB9XG5cbiAgLy8ganNvbiBkYXRhXG4gIGlmIChudWxsICE9IG9iai5kYXRhKSB7XG4gICAgdmFyIHBheWxvYWQgPSB0cnlTdHJpbmdpZnkob2JqLmRhdGEpO1xuICAgIGlmIChwYXlsb2FkICE9PSBmYWxzZSkge1xuICAgICAgc3RyICs9IHBheWxvYWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBFUlJPUl9QQUNLRVQ7XG4gICAgfVxuICB9XG5cbiAgZGVidWcoJ2VuY29kZWQgJWogYXMgJXMnLCBvYmosIHN0cik7XG4gIHJldHVybiBzdHI7XG59XG5cbmZ1bmN0aW9uIHRyeVN0cmluZ2lmeShzdHIpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoc3RyKTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBFbmNvZGUgcGFja2V0IGFzICdidWZmZXIgc2VxdWVuY2UnIGJ5IHJlbW92aW5nIGJsb2JzLCBhbmRcbiAqIGRlY29uc3RydWN0aW5nIHBhY2tldCBpbnRvIG9iamVjdCB3aXRoIHBsYWNlaG9sZGVycyBhbmRcbiAqIGEgbGlzdCBvZiBidWZmZXJzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEByZXR1cm4ge0J1ZmZlcn0gZW5jb2RlZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZW5jb2RlQXNCaW5hcnkob2JqLCBjYWxsYmFjaykge1xuXG4gIGZ1bmN0aW9uIHdyaXRlRW5jb2RpbmcoYmxvYmxlc3NEYXRhKSB7XG4gICAgdmFyIGRlY29uc3RydWN0aW9uID0gYmluYXJ5LmRlY29uc3RydWN0UGFja2V0KGJsb2JsZXNzRGF0YSk7XG4gICAgdmFyIHBhY2sgPSBlbmNvZGVBc1N0cmluZyhkZWNvbnN0cnVjdGlvbi5wYWNrZXQpO1xuICAgIHZhciBidWZmZXJzID0gZGVjb25zdHJ1Y3Rpb24uYnVmZmVycztcblxuICAgIGJ1ZmZlcnMudW5zaGlmdChwYWNrKTsgLy8gYWRkIHBhY2tldCBpbmZvIHRvIGJlZ2lubmluZyBvZiBkYXRhIGxpc3RcbiAgICBjYWxsYmFjayhidWZmZXJzKTsgLy8gd3JpdGUgYWxsIHRoZSBidWZmZXJzXG4gIH1cblxuICBiaW5hcnkucmVtb3ZlQmxvYnMob2JqLCB3cml0ZUVuY29kaW5nKTtcbn1cblxuLyoqXG4gKiBBIHNvY2tldC5pbyBEZWNvZGVyIGluc3RhbmNlXG4gKlxuICogQHJldHVybiB7T2JqZWN0fSBkZWNvZGVyXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIERlY29kZXIoKSB7XG4gIHRoaXMucmVjb25zdHJ1Y3RvciA9IG51bGw7XG59XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYCB3aXRoIERlY29kZXIuXG4gKi9cblxuRW1pdHRlcihEZWNvZGVyLnByb3RvdHlwZSk7XG5cbi8qKlxuICogRGVjb2RlcyBhbiBlbmNvZGVkIHBhY2tldCBzdHJpbmcgaW50byBwYWNrZXQgSlNPTi5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gb2JqIC0gZW5jb2RlZCBwYWNrZXRcbiAqIEByZXR1cm4ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkRlY29kZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKG9iaikge1xuICB2YXIgcGFja2V0O1xuICBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHtcbiAgICBwYWNrZXQgPSBkZWNvZGVTdHJpbmcob2JqKTtcbiAgICBpZiAoZXhwb3J0cy5CSU5BUllfRVZFTlQgPT09IHBhY2tldC50eXBlIHx8IGV4cG9ydHMuQklOQVJZX0FDSyA9PT0gcGFja2V0LnR5cGUpIHsgLy8gYmluYXJ5IHBhY2tldCdzIGpzb25cbiAgICAgIHRoaXMucmVjb25zdHJ1Y3RvciA9IG5ldyBCaW5hcnlSZWNvbnN0cnVjdG9yKHBhY2tldCk7XG5cbiAgICAgIC8vIG5vIGF0dGFjaG1lbnRzLCBsYWJlbGVkIGJpbmFyeSBidXQgbm8gYmluYXJ5IGRhdGEgdG8gZm9sbG93XG4gICAgICBpZiAodGhpcy5yZWNvbnN0cnVjdG9yLnJlY29uUGFjay5hdHRhY2htZW50cyA9PT0gMCkge1xuICAgICAgICB0aGlzLmVtaXQoJ2RlY29kZWQnLCBwYWNrZXQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7IC8vIG5vbi1iaW5hcnkgZnVsbCBwYWNrZXRcbiAgICAgIHRoaXMuZW1pdCgnZGVjb2RlZCcsIHBhY2tldCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzQnVmKG9iaikgfHwgb2JqLmJhc2U2NCkgeyAvLyByYXcgYmluYXJ5IGRhdGFcbiAgICBpZiAoIXRoaXMucmVjb25zdHJ1Y3Rvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdnb3QgYmluYXJ5IGRhdGEgd2hlbiBub3QgcmVjb25zdHJ1Y3RpbmcgYSBwYWNrZXQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFja2V0ID0gdGhpcy5yZWNvbnN0cnVjdG9yLnRha2VCaW5hcnlEYXRhKG9iaik7XG4gICAgICBpZiAocGFja2V0KSB7IC8vIHJlY2VpdmVkIGZpbmFsIGJ1ZmZlclxuICAgICAgICB0aGlzLnJlY29uc3RydWN0b3IgPSBudWxsO1xuICAgICAgICB0aGlzLmVtaXQoJ2RlY29kZWQnLCBwYWNrZXQpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gdHlwZTogJyArIG9iaik7XG4gIH1cbn07XG5cbi8qKlxuICogRGVjb2RlIGEgcGFja2V0IFN0cmluZyAoSlNPTiBkYXRhKVxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBkZWNvZGVTdHJpbmcoc3RyKSB7XG4gIHZhciBpID0gMDtcbiAgLy8gbG9vayB1cCB0eXBlXG4gIHZhciBwID0ge1xuICAgIHR5cGU6IE51bWJlcihzdHIuY2hhckF0KDApKVxuICB9O1xuXG4gIGlmIChudWxsID09IGV4cG9ydHMudHlwZXNbcC50eXBlXSkge1xuICAgIHJldHVybiBlcnJvcigndW5rbm93biBwYWNrZXQgdHlwZSAnICsgcC50eXBlKTtcbiAgfVxuXG4gIC8vIGxvb2sgdXAgYXR0YWNobWVudHMgaWYgdHlwZSBiaW5hcnlcbiAgaWYgKGV4cG9ydHMuQklOQVJZX0VWRU5UID09PSBwLnR5cGUgfHwgZXhwb3J0cy5CSU5BUllfQUNLID09PSBwLnR5cGUpIHtcbiAgICB2YXIgYnVmID0gJyc7XG4gICAgd2hpbGUgKHN0ci5jaGFyQXQoKytpKSAhPT0gJy0nKSB7XG4gICAgICBidWYgKz0gc3RyLmNoYXJBdChpKTtcbiAgICAgIGlmIChpID09IHN0ci5sZW5ndGgpIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoYnVmICE9IE51bWJlcihidWYpIHx8IHN0ci5jaGFyQXQoaSkgIT09ICctJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbGxlZ2FsIGF0dGFjaG1lbnRzJyk7XG4gICAgfVxuICAgIHAuYXR0YWNobWVudHMgPSBOdW1iZXIoYnVmKTtcbiAgfVxuXG4gIC8vIGxvb2sgdXAgbmFtZXNwYWNlIChpZiBhbnkpXG4gIGlmICgnLycgPT09IHN0ci5jaGFyQXQoaSArIDEpKSB7XG4gICAgcC5uc3AgPSAnJztcbiAgICB3aGlsZSAoKytpKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQXQoaSk7XG4gICAgICBpZiAoJywnID09PSBjKSBicmVhaztcbiAgICAgIHAubnNwICs9IGM7XG4gICAgICBpZiAoaSA9PT0gc3RyLmxlbmd0aCkgYnJlYWs7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHAubnNwID0gJy8nO1xuICB9XG5cbiAgLy8gbG9vayB1cCBpZFxuICB2YXIgbmV4dCA9IHN0ci5jaGFyQXQoaSArIDEpO1xuICBpZiAoJycgIT09IG5leHQgJiYgTnVtYmVyKG5leHQpID09IG5leHQpIHtcbiAgICBwLmlkID0gJyc7XG4gICAgd2hpbGUgKCsraSkge1xuICAgICAgdmFyIGMgPSBzdHIuY2hhckF0KGkpO1xuICAgICAgaWYgKG51bGwgPT0gYyB8fCBOdW1iZXIoYykgIT0gYykge1xuICAgICAgICAtLWk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgcC5pZCArPSBzdHIuY2hhckF0KGkpO1xuICAgICAgaWYgKGkgPT09IHN0ci5sZW5ndGgpIGJyZWFrO1xuICAgIH1cbiAgICBwLmlkID0gTnVtYmVyKHAuaWQpO1xuICB9XG5cbiAgLy8gbG9vayB1cCBqc29uIGRhdGFcbiAgaWYgKHN0ci5jaGFyQXQoKytpKSkge1xuICAgIHZhciBwYXlsb2FkID0gdHJ5UGFyc2Uoc3RyLnN1YnN0cihpKSk7XG4gICAgdmFyIGlzUGF5bG9hZFZhbGlkID0gcGF5bG9hZCAhPT0gZmFsc2UgJiYgKHAudHlwZSA9PT0gZXhwb3J0cy5FUlJPUiB8fCBpc0FycmF5KHBheWxvYWQpKTtcbiAgICBpZiAoaXNQYXlsb2FkVmFsaWQpIHtcbiAgICAgIHAuZGF0YSA9IHBheWxvYWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBlcnJvcignaW52YWxpZCBwYXlsb2FkJyk7XG4gICAgfVxuICB9XG5cbiAgZGVidWcoJ2RlY29kZWQgJXMgYXMgJWonLCBzdHIsIHApO1xuICByZXR1cm4gcDtcbn1cblxuZnVuY3Rpb24gdHJ5UGFyc2Uoc3RyKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyKTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBEZWFsbG9jYXRlcyBhIHBhcnNlcidzIHJlc291cmNlc1xuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRGVjb2Rlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5yZWNvbnN0cnVjdG9yKSB7XG4gICAgdGhpcy5yZWNvbnN0cnVjdG9yLmZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24oKTtcbiAgfVxufTtcblxuLyoqXG4gKiBBIG1hbmFnZXIgb2YgYSBiaW5hcnkgZXZlbnQncyAnYnVmZmVyIHNlcXVlbmNlJy4gU2hvdWxkXG4gKiBiZSBjb25zdHJ1Y3RlZCB3aGVuZXZlciBhIHBhY2tldCBvZiB0eXBlIEJJTkFSWV9FVkVOVCBpc1xuICogZGVjb2RlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAcmV0dXJuIHtCaW5hcnlSZWNvbnN0cnVjdG9yfSBpbml0aWFsaXplZCByZWNvbnN0cnVjdG9yXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBCaW5hcnlSZWNvbnN0cnVjdG9yKHBhY2tldCkge1xuICB0aGlzLnJlY29uUGFjayA9IHBhY2tldDtcbiAgdGhpcy5idWZmZXJzID0gW107XG59XG5cbi8qKlxuICogTWV0aG9kIHRvIGJlIGNhbGxlZCB3aGVuIGJpbmFyeSBkYXRhIHJlY2VpdmVkIGZyb20gY29ubmVjdGlvblxuICogYWZ0ZXIgYSBCSU5BUllfRVZFTlQgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7QnVmZmVyIHwgQXJyYXlCdWZmZXJ9IGJpbkRhdGEgLSB0aGUgcmF3IGJpbmFyeSBkYXRhIHJlY2VpdmVkXG4gKiBAcmV0dXJuIHtudWxsIHwgT2JqZWN0fSByZXR1cm5zIG51bGwgaWYgbW9yZSBiaW5hcnkgZGF0YSBpcyBleHBlY3RlZCBvclxuICogICBhIHJlY29uc3RydWN0ZWQgcGFja2V0IG9iamVjdCBpZiBhbGwgYnVmZmVycyBoYXZlIGJlZW4gcmVjZWl2ZWQuXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5CaW5hcnlSZWNvbnN0cnVjdG9yLnByb3RvdHlwZS50YWtlQmluYXJ5RGF0YSA9IGZ1bmN0aW9uKGJpbkRhdGEpIHtcbiAgdGhpcy5idWZmZXJzLnB1c2goYmluRGF0YSk7XG4gIGlmICh0aGlzLmJ1ZmZlcnMubGVuZ3RoID09PSB0aGlzLnJlY29uUGFjay5hdHRhY2htZW50cykgeyAvLyBkb25lIHdpdGggYnVmZmVyIGxpc3RcbiAgICB2YXIgcGFja2V0ID0gYmluYXJ5LnJlY29uc3RydWN0UGFja2V0KHRoaXMucmVjb25QYWNrLCB0aGlzLmJ1ZmZlcnMpO1xuICAgIHRoaXMuZmluaXNoZWRSZWNvbnN0cnVjdGlvbigpO1xuICAgIHJldHVybiBwYWNrZXQ7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuXG4vKipcbiAqIENsZWFucyB1cCBiaW5hcnkgcGFja2V0IHJlY29uc3RydWN0aW9uIHZhcmlhYmxlcy5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5CaW5hcnlSZWNvbnN0cnVjdG9yLnByb3RvdHlwZS5maW5pc2hlZFJlY29uc3RydWN0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucmVjb25QYWNrID0gbnVsbDtcbiAgdGhpcy5idWZmZXJzID0gW107XG59O1xuXG5mdW5jdGlvbiBlcnJvcihtc2cpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBleHBvcnRzLkVSUk9SLFxuICAgIGRhdGE6ICdwYXJzZXIgZXJyb3I6ICcgKyBtc2dcbiAgfTtcbn1cbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbi8qXG4gKiBFeHBvcnQga01heExlbmd0aCBhZnRlciB0eXBlZCBhcnJheSBzdXBwb3J0IGlzIGRldGVybWluZWQuXG4gKi9cbmV4cG9ydHMua01heExlbmd0aCA9IGtNYXhMZW5ndGgoKVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgICA/IDB4N2ZmZmZmZmZcbiAgICA6IDB4M2ZmZmZmZmZcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcbiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgICB9XG4gICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5XG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIHRoYXRcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCBhbmQgYGlzLWJ1ZmZlcmAgKGluIFNhZmFyaSA1LTcpIHRvIGRldGVjdFxuLy8gQnVmZmVyIGluc3RhbmNlcy5cbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuIiwiLy8gYnJvd3NlciBzaGltIGZvciB4bWxodHRwcmVxdWVzdCBtb2R1bGVcblxudmFyIGhhc0NPUlMgPSByZXF1aXJlKCdoYXMtY29ycycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRzKSB7XG4gIHZhciB4ZG9tYWluID0gb3B0cy54ZG9tYWluO1xuXG4gIC8vIHNjaGVtZSBtdXN0IGJlIHNhbWUgd2hlbiB1c2lnbiBYRG9tYWluUmVxdWVzdFxuICAvLyBodHRwOi8vYmxvZ3MubXNkbi5jb20vYi9pZWludGVybmFscy9hcmNoaXZlLzIwMTAvMDUvMTMveGRvbWFpbnJlcXVlc3QtcmVzdHJpY3Rpb25zLWxpbWl0YXRpb25zLWFuZC13b3JrYXJvdW5kcy5hc3B4XG4gIHZhciB4c2NoZW1lID0gb3B0cy54c2NoZW1lO1xuXG4gIC8vIFhEb21haW5SZXF1ZXN0IGhhcyBhIGZsb3cgb2Ygbm90IHNlbmRpbmcgY29va2llLCB0aGVyZWZvcmUgaXQgc2hvdWxkIGJlIGRpc2FibGVkIGFzIGEgZGVmYXVsdC5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0F1dG9tYXR0aWMvZW5naW5lLmlvLWNsaWVudC9wdWxsLzIxN1xuICB2YXIgZW5hYmxlc1hEUiA9IG9wdHMuZW5hYmxlc1hEUjtcblxuICAvLyBYTUxIdHRwUmVxdWVzdCBjYW4gYmUgZGlzYWJsZWQgb24gSUVcbiAgdHJ5IHtcbiAgICBpZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAmJiAoIXhkb21haW4gfHwgaGFzQ09SUykpIHtcbiAgICAgIHJldHVybiBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHsgfVxuXG4gIC8vIFVzZSBYRG9tYWluUmVxdWVzdCBmb3IgSUU4IGlmIGVuYWJsZXNYRFIgaXMgdHJ1ZVxuICAvLyBiZWNhdXNlIGxvYWRpbmcgYmFyIGtlZXBzIGZsYXNoaW5nIHdoZW4gdXNpbmcganNvbnAtcG9sbGluZ1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20veXVqaW9zYWthL3NvY2tlLmlvLWllOC1sb2FkaW5nLWV4YW1wbGVcbiAgdHJ5IHtcbiAgICBpZiAoJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBYRG9tYWluUmVxdWVzdCAmJiAheHNjaGVtZSAmJiBlbmFibGVzWERSKSB7XG4gICAgICByZXR1cm4gbmV3IFhEb21haW5SZXF1ZXN0KCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7IH1cblxuICBpZiAoIXhkb21haW4pIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG5ldyBzZWxmW1snQWN0aXZlJ10uY29uY2F0KCdPYmplY3QnKS5qb2luKCdYJyldKCdNaWNyb3NvZnQuWE1MSFRUUCcpO1xuICAgIH0gY2F0Y2ggKGUpIHsgfVxuICB9XG59O1xuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBwYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG52YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc3BvcnQ7XG5cbi8qKlxuICogVHJhbnNwb3J0IGFic3RyYWN0IGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gVHJhbnNwb3J0IChvcHRzKSB7XG4gIHRoaXMucGF0aCA9IG9wdHMucGF0aDtcbiAgdGhpcy5ob3N0bmFtZSA9IG9wdHMuaG9zdG5hbWU7XG4gIHRoaXMucG9ydCA9IG9wdHMucG9ydDtcbiAgdGhpcy5zZWN1cmUgPSBvcHRzLnNlY3VyZTtcbiAgdGhpcy5xdWVyeSA9IG9wdHMucXVlcnk7XG4gIHRoaXMudGltZXN0YW1wUGFyYW0gPSBvcHRzLnRpbWVzdGFtcFBhcmFtO1xuICB0aGlzLnRpbWVzdGFtcFJlcXVlc3RzID0gb3B0cy50aW1lc3RhbXBSZXF1ZXN0cztcbiAgdGhpcy5yZWFkeVN0YXRlID0gJyc7XG4gIHRoaXMuYWdlbnQgPSBvcHRzLmFnZW50IHx8IGZhbHNlO1xuICB0aGlzLnNvY2tldCA9IG9wdHMuc29ja2V0O1xuICB0aGlzLmVuYWJsZXNYRFIgPSBvcHRzLmVuYWJsZXNYRFI7XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIHRoaXMucGZ4ID0gb3B0cy5wZng7XG4gIHRoaXMua2V5ID0gb3B0cy5rZXk7XG4gIHRoaXMucGFzc3BocmFzZSA9IG9wdHMucGFzc3BocmFzZTtcbiAgdGhpcy5jZXJ0ID0gb3B0cy5jZXJ0O1xuICB0aGlzLmNhID0gb3B0cy5jYTtcbiAgdGhpcy5jaXBoZXJzID0gb3B0cy5jaXBoZXJzO1xuICB0aGlzLnJlamVjdFVuYXV0aG9yaXplZCA9IG9wdHMucmVqZWN0VW5hdXRob3JpemVkO1xuICB0aGlzLmZvcmNlTm9kZSA9IG9wdHMuZm9yY2VOb2RlO1xuXG4gIC8vIHJlc3VsdHMgb2YgUmVhY3ROYXRpdmUgZW52aXJvbm1lbnQgZGV0ZWN0aW9uXG4gIHRoaXMuaXNSZWFjdE5hdGl2ZSA9IG9wdHMuaXNSZWFjdE5hdGl2ZTtcblxuICAvLyBvdGhlciBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuICB0aGlzLmxvY2FsQWRkcmVzcyA9IG9wdHMubG9jYWxBZGRyZXNzO1xufVxuXG4vKipcbiAqIE1peCBpbiBgRW1pdHRlcmAuXG4gKi9cblxuRW1pdHRlcihUcmFuc3BvcnQucHJvdG90eXBlKTtcblxuLyoqXG4gKiBFbWl0cyBhbiBlcnJvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtUcmFuc3BvcnR9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAobXNnLCBkZXNjKSB7XG4gIHZhciBlcnIgPSBuZXcgRXJyb3IobXNnKTtcbiAgZXJyLnR5cGUgPSAnVHJhbnNwb3J0RXJyb3InO1xuICBlcnIuZGVzY3JpcHRpb24gPSBkZXNjO1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIE9wZW5zIHRoZSB0cmFuc3BvcnQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGlmICgnY2xvc2VkJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICcnID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSAnb3BlbmluZyc7XG4gICAgdGhpcy5kb09wZW4oKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDbG9zZXMgdGhlIHRyYW5zcG9ydC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ29wZW5pbmcnID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLmRvQ2xvc2UoKTtcbiAgICB0aGlzLm9uQ2xvc2UoKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZW5kcyBtdWx0aXBsZSBwYWNrZXRzLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHBhY2tldHNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblRyYW5zcG9ydC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChwYWNrZXRzKSB7XG4gIGlmICgnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgIHRoaXMud3JpdGUocGFja2V0cyk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUcmFuc3BvcnQgbm90IG9wZW4nKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBvcGVuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vbk9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuJztcbiAgdGhpcy53cml0YWJsZSA9IHRydWU7XG4gIHRoaXMuZW1pdCgnb3BlbicpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgd2l0aCBkYXRhLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHZhciBwYWNrZXQgPSBwYXJzZXIuZGVjb2RlUGFja2V0KGRhdGEsIHRoaXMuc29ja2V0LmJpbmFyeVR5cGUpO1xuICB0aGlzLm9uUGFja2V0KHBhY2tldCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aXRoIGEgZGVjb2RlZCBwYWNrZXQuXG4gKi9cblxuVHJhbnNwb3J0LnByb3RvdHlwZS5vblBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgdGhpcy5lbWl0KCdwYWNrZXQnLCBwYWNrZXQpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBjbG9zZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5UcmFuc3BvcnQucHJvdG90eXBlLm9uQ2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuICB0aGlzLmVtaXQoJ2Nsb3NlJyk7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQmFzZUNoYXJBdGxhcyA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQmFzZUNoYXJBdGxhcygpIHtcbiAgICAgICAgdGhpcy5fZGlkV2FybVVwID0gZmFsc2U7XG4gICAgfVxuICAgIEJhc2VDaGFyQXRsYXMucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgQmFzZUNoYXJBdGxhcy5wcm90b3R5cGUud2FybVVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2RpZFdhcm1VcCkge1xuICAgICAgICAgICAgdGhpcy5fZG9XYXJtVXAoKTtcbiAgICAgICAgICAgIHRoaXMuX2RpZFdhcm1VcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJhc2VDaGFyQXRsYXMucHJvdG90eXBlLl9kb1dhcm1VcCA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICBCYXNlQ2hhckF0bGFzLnByb3RvdHlwZS5iZWdpbkZyYW1lID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIHJldHVybiBCYXNlQ2hhckF0bGFzO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IEJhc2VDaGFyQXRsYXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1CYXNlQ2hhckF0bGFzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFJlbmRlckRlYm91bmNlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVuZGVyRGVib3VuY2VyKF90ZXJtaW5hbCwgX2NhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsID0gX3Rlcm1pbmFsO1xuICAgICAgICB0aGlzLl9jYWxsYmFjayA9IF9jYWxsYmFjaztcbiAgICAgICAgdGhpcy5fYW5pbWF0aW9uRnJhbWUgPSBudWxsO1xuICAgIH1cbiAgICBSZW5kZXJEZWJvdW5jZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9hbmltYXRpb25GcmFtZSkge1xuICAgICAgICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuX2FuaW1hdGlvbkZyYW1lKTtcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbkZyYW1lID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUmVuZGVyRGVib3VuY2VyLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24gKHJvd1N0YXJ0LCByb3dFbmQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcm93U3RhcnQgPSByb3dTdGFydCAhPT0gbnVsbCAmJiByb3dTdGFydCAhPT0gdW5kZWZpbmVkID8gcm93U3RhcnQgOiAwO1xuICAgICAgICByb3dFbmQgPSByb3dFbmQgIT09IG51bGwgJiYgcm93RW5kICE9PSB1bmRlZmluZWQgPyByb3dFbmQgOiB0aGlzLl90ZXJtaW5hbC5yb3dzIC0gMTtcbiAgICAgICAgdmFyIGlzUm93U3RhcnRTZXQgPSB0aGlzLl9yb3dTdGFydCAhPT0gdW5kZWZpbmVkICYmIHRoaXMuX3Jvd1N0YXJ0ICE9PSBudWxsO1xuICAgICAgICB2YXIgaXNSb3dFbmRTZXQgPSB0aGlzLl9yb3dFbmQgIT09IHVuZGVmaW5lZCAmJiB0aGlzLl9yb3dFbmQgIT09IG51bGw7XG4gICAgICAgIHRoaXMuX3Jvd1N0YXJ0ID0gaXNSb3dTdGFydFNldCA/IE1hdGgubWluKHRoaXMuX3Jvd1N0YXJ0LCByb3dTdGFydCkgOiByb3dTdGFydDtcbiAgICAgICAgdGhpcy5fcm93RW5kID0gaXNSb3dFbmRTZXQgPyBNYXRoLm1heCh0aGlzLl9yb3dFbmQsIHJvd0VuZCkgOiByb3dFbmQ7XG4gICAgICAgIGlmICh0aGlzLl9hbmltYXRpb25GcmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2FuaW1hdGlvbkZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5faW5uZXJSZWZyZXNoKCk7IH0pO1xuICAgIH07XG4gICAgUmVuZGVyRGVib3VuY2VyLnByb3RvdHlwZS5faW5uZXJSZWZyZXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9yb3dTdGFydCA9IE1hdGgubWF4KHRoaXMuX3Jvd1N0YXJ0LCAwKTtcbiAgICAgICAgdGhpcy5fcm93RW5kID0gTWF0aC5taW4odGhpcy5fcm93RW5kLCB0aGlzLl90ZXJtaW5hbC5yb3dzIC0gMSk7XG4gICAgICAgIHRoaXMuX2NhbGxiYWNrKHRoaXMuX3Jvd1N0YXJ0LCB0aGlzLl9yb3dFbmQpO1xuICAgICAgICB0aGlzLl9yb3dTdGFydCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3Jvd0VuZCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2FuaW1hdGlvbkZyYW1lID0gbnVsbDtcbiAgICB9O1xuICAgIHJldHVybiBSZW5kZXJEZWJvdW5jZXI7XG59KCkpO1xuZXhwb3J0cy5SZW5kZXJEZWJvdW5jZXIgPSBSZW5kZXJEZWJvdW5jZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZW5kZXJEZWJvdW5jZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmJsYW5rTGluZSA9ICdCbGFuayBsaW5lJztcbmV4cG9ydHMucHJvbXB0TGFiZWwgPSAnVGVybWluYWwgaW5wdXQnO1xuZXhwb3J0cy50b29NdWNoT3V0cHV0ID0gJ1RvbyBtdWNoIG91dHB1dCB0byBhbm5vdW5jZSwgbmF2aWdhdGUgdG8gcm93cyBtYW51YWxseSB0byByZWFkJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN0cmluZ3MuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgVGVybWluYWxfMSA9IHJlcXVpcmUoXCIuLi9UZXJtaW5hbFwiKTtcbnZhciBTdHJpbmdzID0gcmVxdWlyZShcIi4uL1N0cmluZ3NcIik7XG52YXIgVGVybWluYWwgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRlcm1pbmFsKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5fY29yZSA9IG5ldyBUZXJtaW5hbF8xLlRlcm1pbmFsKG9wdGlvbnMpO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVGVybWluYWwucHJvdG90eXBlLCBcImVsZW1lbnRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2NvcmUuZWxlbWVudDsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRlcm1pbmFsLnByb3RvdHlwZSwgXCJ0ZXh0YXJlYVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fY29yZS50ZXh0YXJlYTsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRlcm1pbmFsLnByb3RvdHlwZSwgXCJyb3dzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9jb3JlLnJvd3M7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUZXJtaW5hbC5wcm90b3R5cGUsIFwiY29sc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fY29yZS5jb2xzOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVGVybWluYWwucHJvdG90eXBlLCBcIm1hcmtlcnNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2NvcmUubWFya2VyczsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgVGVybWluYWwucHJvdG90eXBlLmJsdXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2NvcmUuYmx1cigpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLmZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9jb3JlLmZvY3VzKCk7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fY29yZS5vbih0eXBlLCBsaXN0ZW5lcik7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24gKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMuX2NvcmUub2ZmKHR5cGUsIGxpc3RlbmVyKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gKHR5cGUsIGRhdGEpIHtcbiAgICAgICAgdGhpcy5fY29yZS5lbWl0KHR5cGUsIGRhdGEpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLmFkZERpc3Bvc2FibGVMaXN0ZW5lciA9IGZ1bmN0aW9uICh0eXBlLCBoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb3JlLmFkZERpc3Bvc2FibGVMaXN0ZW5lcih0eXBlLCBoYW5kbGVyKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5yZXNpemUgPSBmdW5jdGlvbiAoY29sdW1ucywgcm93cykge1xuICAgICAgICB0aGlzLl9jb3JlLnJlc2l6ZShjb2x1bW5zLCByb3dzKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS53cml0ZWxuID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdGhpcy5fY29yZS53cml0ZWxuKGRhdGEpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHRoaXMuX2NvcmUub3BlbihwYXJlbnQpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLmF0dGFjaEN1c3RvbUtleUV2ZW50SGFuZGxlciA9IGZ1bmN0aW9uIChjdXN0b21LZXlFdmVudEhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5fY29yZS5hdHRhY2hDdXN0b21LZXlFdmVudEhhbmRsZXIoY3VzdG9tS2V5RXZlbnRIYW5kbGVyKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5yZWdpc3RlckxpbmtNYXRjaGVyID0gZnVuY3Rpb24gKHJlZ2V4LCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb3JlLnJlZ2lzdGVyTGlua01hdGNoZXIocmVnZXgsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLmRlcmVnaXN0ZXJMaW5rTWF0Y2hlciA9IGZ1bmN0aW9uIChtYXRjaGVySWQpIHtcbiAgICAgICAgdGhpcy5fY29yZS5kZXJlZ2lzdGVyTGlua01hdGNoZXIobWF0Y2hlcklkKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5yZWdpc3RlckNoYXJhY3RlckpvaW5lciA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb3JlLnJlZ2lzdGVyQ2hhcmFjdGVySm9pbmVyKGhhbmRsZXIpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLmRlcmVnaXN0ZXJDaGFyYWN0ZXJKb2luZXIgPSBmdW5jdGlvbiAoam9pbmVySWQpIHtcbiAgICAgICAgdGhpcy5fY29yZS5kZXJlZ2lzdGVyQ2hhcmFjdGVySm9pbmVyKGpvaW5lcklkKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5hZGRNYXJrZXIgPSBmdW5jdGlvbiAoY3Vyc29yWU9mZnNldCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29yZS5hZGRNYXJrZXIoY3Vyc29yWU9mZnNldCk7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuaGFzU2VsZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29yZS5oYXNTZWxlY3Rpb24oKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5nZXRTZWxlY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb3JlLmdldFNlbGVjdGlvbigpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLmNsZWFyU2VsZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9jb3JlLmNsZWFyU2VsZWN0aW9uKCk7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuc2VsZWN0QWxsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9jb3JlLnNlbGVjdEFsbCgpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLnNlbGVjdExpbmVzID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgdGhpcy5fY29yZS5zZWxlY3RMaW5lcyhzdGFydCwgZW5kKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9jb3JlLmRpc3Bvc2UoKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9jb3JlLmRlc3Ryb3koKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5zY3JvbGxMaW5lcyA9IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgdGhpcy5fY29yZS5zY3JvbGxMaW5lcyhhbW91bnQpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLnNjcm9sbFBhZ2VzID0gZnVuY3Rpb24gKHBhZ2VDb3VudCkge1xuICAgICAgICB0aGlzLl9jb3JlLnNjcm9sbFBhZ2VzKHBhZ2VDb3VudCk7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuc2Nyb2xsVG9Ub3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2NvcmUuc2Nyb2xsVG9Ub3AoKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5zY3JvbGxUb0JvdHRvbSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fY29yZS5zY3JvbGxUb0JvdHRvbSgpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLnNjcm9sbFRvTGluZSA9IGZ1bmN0aW9uIChsaW5lKSB7XG4gICAgICAgIHRoaXMuX2NvcmUuc2Nyb2xsVG9MaW5lKGxpbmUpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9jb3JlLmNsZWFyKCk7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB0aGlzLl9jb3JlLndyaXRlKGRhdGEpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLmdldE9wdGlvbiA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvcmUuZ2V0T3B0aW9uKGtleSk7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuc2V0T3B0aW9uID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5fY29yZS5zZXRPcHRpb24oa2V5LCB2YWx1ZSk7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgICAgIHRoaXMuX2NvcmUucmVmcmVzaChzdGFydCwgZW5kKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fY29yZS5yZXNldCgpO1xuICAgIH07XG4gICAgVGVybWluYWwuYXBwbHlBZGRvbiA9IGZ1bmN0aW9uIChhZGRvbikge1xuICAgICAgICBhZGRvbi5hcHBseShUZXJtaW5hbCk7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVGVybWluYWwsIFwic3RyaW5nc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIFN0cmluZ3M7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBUZXJtaW5hbDtcbn0oKSk7XG5leHBvcnRzLlRlcm1pbmFsID0gVGVybWluYWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1UZXJtaW5hbC5qcy5tYXAiLCIvKipcclxuICogUGFyc2VzIGFuIFVSSVxyXG4gKlxyXG4gKiBAYXV0aG9yIFN0ZXZlbiBMZXZpdGhhbiA8c3RldmVubGV2aXRoYW4uY29tPiAoTUlUIGxpY2Vuc2UpXHJcbiAqIEBhcGkgcHJpdmF0ZVxyXG4gKi9cclxuXHJcbnZhciByZSA9IC9eKD86KD8hW146QF0rOlteOkBcXC9dKkApKGh0dHB8aHR0cHN8d3N8d3NzKTpcXC9cXC8pPygoPzooKFteOkBdKikoPzo6KFteOkBdKikpPyk/QCk/KCg/OlthLWYwLTldezAsNH06KXsyLDd9W2EtZjAtOV17MCw0fXxbXjpcXC8/I10qKSg/OjooXFxkKikpPykoKChcXC8oPzpbXj8jXSg/IVtePyNcXC9dKlxcLltePyNcXC8uXSsoPzpbPyNdfCQpKSkqXFwvPyk/KFtePyNcXC9dKikpKD86XFw/KFteI10qKSk/KD86IyguKikpPykvO1xyXG5cclxudmFyIHBhcnRzID0gW1xyXG4gICAgJ3NvdXJjZScsICdwcm90b2NvbCcsICdhdXRob3JpdHknLCAndXNlckluZm8nLCAndXNlcicsICdwYXNzd29yZCcsICdob3N0JywgJ3BvcnQnLCAncmVsYXRpdmUnLCAncGF0aCcsICdkaXJlY3RvcnknLCAnZmlsZScsICdxdWVyeScsICdhbmNob3InXHJcbl07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNldXJpKHN0cikge1xyXG4gICAgdmFyIHNyYyA9IHN0cixcclxuICAgICAgICBiID0gc3RyLmluZGV4T2YoJ1snKSxcclxuICAgICAgICBlID0gc3RyLmluZGV4T2YoJ10nKTtcclxuXHJcbiAgICBpZiAoYiAhPSAtMSAmJiBlICE9IC0xKSB7XHJcbiAgICAgICAgc3RyID0gc3RyLnN1YnN0cmluZygwLCBiKSArIHN0ci5zdWJzdHJpbmcoYiwgZSkucmVwbGFjZSgvOi9nLCAnOycpICsgc3RyLnN1YnN0cmluZyhlLCBzdHIubGVuZ3RoKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgbSA9IHJlLmV4ZWMoc3RyIHx8ICcnKSxcclxuICAgICAgICB1cmkgPSB7fSxcclxuICAgICAgICBpID0gMTQ7XHJcblxyXG4gICAgd2hpbGUgKGktLSkge1xyXG4gICAgICAgIHVyaVtwYXJ0c1tpXV0gPSBtW2ldIHx8ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChiICE9IC0xICYmIGUgIT0gLTEpIHtcclxuICAgICAgICB1cmkuc291cmNlID0gc3JjO1xyXG4gICAgICAgIHVyaS5ob3N0ID0gdXJpLmhvc3Quc3Vic3RyaW5nKDEsIHVyaS5ob3N0Lmxlbmd0aCAtIDEpLnJlcGxhY2UoLzsvZywgJzonKTtcclxuICAgICAgICB1cmkuYXV0aG9yaXR5ID0gdXJpLmF1dGhvcml0eS5yZXBsYWNlKCdbJywgJycpLnJlcGxhY2UoJ10nLCAnJykucmVwbGFjZSgvOy9nLCAnOicpO1xyXG4gICAgICAgIHVyaS5pcHY2dXJpID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdXJpO1xyXG59O1xyXG4iLCJcbm1vZHVsZS5leHBvcnRzID0gaXNCdWY7XG5cbnZhciB3aXRoTmF0aXZlQnVmZmVyID0gdHlwZW9mIEJ1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgQnVmZmVyLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nO1xudmFyIHdpdGhOYXRpdmVBcnJheUJ1ZmZlciA9IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gJ2Z1bmN0aW9uJztcblxudmFyIGlzVmlldyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgPyBBcnJheUJ1ZmZlci5pc1ZpZXcob2JqKSA6IChvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgb2JqIGlzIGEgYnVmZmVyIG9yIGFuIGFycmF5YnVmZmVyLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGlzQnVmKG9iaikge1xuICByZXR1cm4gKHdpdGhOYXRpdmVCdWZmZXIgJiYgQnVmZmVyLmlzQnVmZmVyKG9iaikpIHx8XG4gICAgICAgICAgKHdpdGhOYXRpdmVBcnJheUJ1ZmZlciAmJiAob2JqIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgfHwgaXNWaWV3KG9iaikpKTtcbn1cbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIlxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBlaW8gPSByZXF1aXJlKCdlbmdpbmUuaW8tY2xpZW50Jyk7XG52YXIgU29ja2V0ID0gcmVxdWlyZSgnLi9zb2NrZXQnKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdzb2NrZXQuaW8tcGFyc2VyJyk7XG52YXIgb24gPSByZXF1aXJlKCcuL29uJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1iaW5kJyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tY2xpZW50Om1hbmFnZXInKTtcbnZhciBpbmRleE9mID0gcmVxdWlyZSgnaW5kZXhvZicpO1xudmFyIEJhY2tvZmYgPSByZXF1aXJlKCdiYWNrbzInKTtcblxuLyoqXG4gKiBJRTYrIGhhc093blByb3BlcnR5XG4gKi9cblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1hbmFnZXI7XG5cbi8qKlxuICogYE1hbmFnZXJgIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBlbmdpbmUgaW5zdGFuY2Ugb3IgZW5naW5lIHVyaS9vcHRzXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBNYW5hZ2VyICh1cmksIG9wdHMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIE1hbmFnZXIpKSByZXR1cm4gbmV3IE1hbmFnZXIodXJpLCBvcHRzKTtcbiAgaWYgKHVyaSAmJiAoJ29iamVjdCcgPT09IHR5cGVvZiB1cmkpKSB7XG4gICAgb3B0cyA9IHVyaTtcbiAgICB1cmkgPSB1bmRlZmluZWQ7XG4gIH1cbiAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgb3B0cy5wYXRoID0gb3B0cy5wYXRoIHx8ICcvc29ja2V0LmlvJztcbiAgdGhpcy5uc3BzID0ge307XG4gIHRoaXMuc3VicyA9IFtdO1xuICB0aGlzLm9wdHMgPSBvcHRzO1xuICB0aGlzLnJlY29ubmVjdGlvbihvcHRzLnJlY29ubmVjdGlvbiAhPT0gZmFsc2UpO1xuICB0aGlzLnJlY29ubmVjdGlvbkF0dGVtcHRzKG9wdHMucmVjb25uZWN0aW9uQXR0ZW1wdHMgfHwgSW5maW5pdHkpO1xuICB0aGlzLnJlY29ubmVjdGlvbkRlbGF5KG9wdHMucmVjb25uZWN0aW9uRGVsYXkgfHwgMTAwMCk7XG4gIHRoaXMucmVjb25uZWN0aW9uRGVsYXlNYXgob3B0cy5yZWNvbm5lY3Rpb25EZWxheU1heCB8fCA1MDAwKTtcbiAgdGhpcy5yYW5kb21pemF0aW9uRmFjdG9yKG9wdHMucmFuZG9taXphdGlvbkZhY3RvciB8fCAwLjUpO1xuICB0aGlzLmJhY2tvZmYgPSBuZXcgQmFja29mZih7XG4gICAgbWluOiB0aGlzLnJlY29ubmVjdGlvbkRlbGF5KCksXG4gICAgbWF4OiB0aGlzLnJlY29ubmVjdGlvbkRlbGF5TWF4KCksXG4gICAgaml0dGVyOiB0aGlzLnJhbmRvbWl6YXRpb25GYWN0b3IoKVxuICB9KTtcbiAgdGhpcy50aW1lb3V0KG51bGwgPT0gb3B0cy50aW1lb3V0ID8gMjAwMDAgOiBvcHRzLnRpbWVvdXQpO1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnY2xvc2VkJztcbiAgdGhpcy51cmkgPSB1cmk7XG4gIHRoaXMuY29ubmVjdGluZyA9IFtdO1xuICB0aGlzLmxhc3RQaW5nID0gbnVsbDtcbiAgdGhpcy5lbmNvZGluZyA9IGZhbHNlO1xuICB0aGlzLnBhY2tldEJ1ZmZlciA9IFtdO1xuICB2YXIgX3BhcnNlciA9IG9wdHMucGFyc2VyIHx8IHBhcnNlcjtcbiAgdGhpcy5lbmNvZGVyID0gbmV3IF9wYXJzZXIuRW5jb2RlcigpO1xuICB0aGlzLmRlY29kZXIgPSBuZXcgX3BhcnNlci5EZWNvZGVyKCk7XG4gIHRoaXMuYXV0b0Nvbm5lY3QgPSBvcHRzLmF1dG9Db25uZWN0ICE9PSBmYWxzZTtcbiAgaWYgKHRoaXMuYXV0b0Nvbm5lY3QpIHRoaXMub3BlbigpO1xufVxuXG4vKipcbiAqIFByb3BhZ2F0ZSBnaXZlbiBldmVudCB0byBzb2NrZXRzIGFuZCBlbWl0IG9uIGB0aGlzYFxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLmVtaXRBbGwgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW1pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICBmb3IgKHZhciBuc3AgaW4gdGhpcy5uc3BzKSB7XG4gICAgaWYgKGhhcy5jYWxsKHRoaXMubnNwcywgbnNwKSkge1xuICAgICAgdGhpcy5uc3BzW25zcF0uZW1pdC5hcHBseSh0aGlzLm5zcHNbbnNwXSwgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogVXBkYXRlIGBzb2NrZXQuaWRgIG9mIGFsbCBzb2NrZXRzXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUudXBkYXRlU29ja2V0SWRzID0gZnVuY3Rpb24gKCkge1xuICBmb3IgKHZhciBuc3AgaW4gdGhpcy5uc3BzKSB7XG4gICAgaWYgKGhhcy5jYWxsKHRoaXMubnNwcywgbnNwKSkge1xuICAgICAgdGhpcy5uc3BzW25zcF0uaWQgPSB0aGlzLmdlbmVyYXRlSWQobnNwKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogZ2VuZXJhdGUgYHNvY2tldC5pZGAgZm9yIHRoZSBnaXZlbiBgbnNwYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuc3BcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLmdlbmVyYXRlSWQgPSBmdW5jdGlvbiAobnNwKSB7XG4gIHJldHVybiAobnNwID09PSAnLycgPyAnJyA6IChuc3AgKyAnIycpKSArIHRoaXMuZW5naW5lLmlkO1xufTtcblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgLlxuICovXG5cbkVtaXR0ZXIoTWFuYWdlci5wcm90b3R5cGUpO1xuXG4vKipcbiAqIFNldHMgdGhlIGByZWNvbm5lY3Rpb25gIGNvbmZpZy5cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHRydWUvZmFsc2UgaWYgaXQgc2hvdWxkIGF1dG9tYXRpY2FsbHkgcmVjb25uZWN0XG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdGlvbiA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbjtcbiAgdGhpcy5fcmVjb25uZWN0aW9uID0gISF2O1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgcmVjb25uZWN0aW9uIGF0dGVtcHRzIGNvbmZpZy5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbWF4IHJlY29ubmVjdGlvbiBhdHRlbXB0cyBiZWZvcmUgZ2l2aW5nIHVwXG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdGlvbkF0dGVtcHRzID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uQXR0ZW1wdHM7XG4gIHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzID0gdjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIGRlbGF5IGJldHdlZW4gcmVjb25uZWN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gZGVsYXlcbiAqIEByZXR1cm4ge01hbmFnZXJ9IHNlbGYgb3IgdmFsdWVcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUucmVjb25uZWN0aW9uRGVsYXkgPSBmdW5jdGlvbiAodikge1xuICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheTtcbiAgdGhpcy5fcmVjb25uZWN0aW9uRGVsYXkgPSB2O1xuICB0aGlzLmJhY2tvZmYgJiYgdGhpcy5iYWNrb2ZmLnNldE1pbih2KTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5yYW5kb21pemF0aW9uRmFjdG9yID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fcmFuZG9taXphdGlvbkZhY3RvcjtcbiAgdGhpcy5fcmFuZG9taXphdGlvbkZhY3RvciA9IHY7XG4gIHRoaXMuYmFja29mZiAmJiB0aGlzLmJhY2tvZmYuc2V0Sml0dGVyKHYpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgbWF4aW11bSBkZWxheSBiZXR3ZWVuIHJlY29ubmVjdGlvbnMuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5XG4gKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdGlvbkRlbGF5TWF4ID0gZnVuY3Rpb24gKHYpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uRGVsYXlNYXg7XG4gIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5TWF4ID0gdjtcbiAgdGhpcy5iYWNrb2ZmICYmIHRoaXMuYmFja29mZi5zZXRNYXgodik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBjb25uZWN0aW9uIHRpbWVvdXQuIGBmYWxzZWAgdG8gZGlzYWJsZVxuICpcbiAqIEByZXR1cm4ge01hbmFnZXJ9IHNlbGYgb3IgdmFsdWVcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUudGltZW91dCA9IGZ1bmN0aW9uICh2KSB7XG4gIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3RpbWVvdXQ7XG4gIHRoaXMuX3RpbWVvdXQgPSB2O1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU3RhcnRzIHRyeWluZyB0byByZWNvbm5lY3QgaWYgcmVjb25uZWN0aW9uIGlzIGVuYWJsZWQgYW5kIHdlIGhhdmUgbm90XG4gKiBzdGFydGVkIHJlY29ubmVjdGluZyB5ZXRcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5tYXliZVJlY29ubmVjdE9uT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gT25seSB0cnkgdG8gcmVjb25uZWN0IGlmIGl0J3MgdGhlIGZpcnN0IHRpbWUgd2UncmUgY29ubmVjdGluZ1xuICBpZiAoIXRoaXMucmVjb25uZWN0aW5nICYmIHRoaXMuX3JlY29ubmVjdGlvbiAmJiB0aGlzLmJhY2tvZmYuYXR0ZW1wdHMgPT09IDApIHtcbiAgICAvLyBrZWVwcyByZWNvbm5lY3Rpb24gZnJvbSBmaXJpbmcgdHdpY2UgZm9yIHRoZSBzYW1lIHJlY29ubmVjdGlvbiBsb29wXG4gICAgdGhpcy5yZWNvbm5lY3QoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBjdXJyZW50IHRyYW5zcG9ydCBgc29ja2V0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25hbCwgY2FsbGJhY2tcbiAqIEByZXR1cm4ge01hbmFnZXJ9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub3BlbiA9XG5NYW5hZ2VyLnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKGZuLCBvcHRzKSB7XG4gIGRlYnVnKCdyZWFkeVN0YXRlICVzJywgdGhpcy5yZWFkeVN0YXRlKTtcbiAgaWYgKH50aGlzLnJlYWR5U3RhdGUuaW5kZXhPZignb3BlbicpKSByZXR1cm4gdGhpcztcblxuICBkZWJ1Zygnb3BlbmluZyAlcycsIHRoaXMudXJpKTtcbiAgdGhpcy5lbmdpbmUgPSBlaW8odGhpcy51cmksIHRoaXMub3B0cyk7XG4gIHZhciBzb2NrZXQgPSB0aGlzLmVuZ2luZTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnb3BlbmluZyc7XG4gIHRoaXMuc2tpcFJlY29ubmVjdCA9IGZhbHNlO1xuXG4gIC8vIGVtaXQgYG9wZW5gXG4gIHZhciBvcGVuU3ViID0gb24oc29ja2V0LCAnb3BlbicsIGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9ub3BlbigpO1xuICAgIGZuICYmIGZuKCk7XG4gIH0pO1xuXG4gIC8vIGVtaXQgYGNvbm5lY3RfZXJyb3JgXG4gIHZhciBlcnJvclN1YiA9IG9uKHNvY2tldCwgJ2Vycm9yJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBkZWJ1ZygnY29ubmVjdF9lcnJvcicpO1xuICAgIHNlbGYuY2xlYW51cCgpO1xuICAgIHNlbGYucmVhZHlTdGF0ZSA9ICdjbG9zZWQnO1xuICAgIHNlbGYuZW1pdEFsbCgnY29ubmVjdF9lcnJvcicsIGRhdGEpO1xuICAgIGlmIChmbikge1xuICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignQ29ubmVjdGlvbiBlcnJvcicpO1xuICAgICAgZXJyLmRhdGEgPSBkYXRhO1xuICAgICAgZm4oZXJyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT25seSBkbyB0aGlzIGlmIHRoZXJlIGlzIG5vIGZuIHRvIGhhbmRsZSB0aGUgZXJyb3JcbiAgICAgIHNlbGYubWF5YmVSZWNvbm5lY3RPbk9wZW4oKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIGVtaXQgYGNvbm5lY3RfdGltZW91dGBcbiAgaWYgKGZhbHNlICE9PSB0aGlzLl90aW1lb3V0KSB7XG4gICAgdmFyIHRpbWVvdXQgPSB0aGlzLl90aW1lb3V0O1xuICAgIGRlYnVnKCdjb25uZWN0IGF0dGVtcHQgd2lsbCB0aW1lb3V0IGFmdGVyICVkJywgdGltZW91dCk7XG5cbiAgICAvLyBzZXQgdGltZXJcbiAgICB2YXIgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGRlYnVnKCdjb25uZWN0IGF0dGVtcHQgdGltZWQgb3V0IGFmdGVyICVkJywgdGltZW91dCk7XG4gICAgICBvcGVuU3ViLmRlc3Ryb3koKTtcbiAgICAgIHNvY2tldC5jbG9zZSgpO1xuICAgICAgc29ja2V0LmVtaXQoJ2Vycm9yJywgJ3RpbWVvdXQnKTtcbiAgICAgIHNlbGYuZW1pdEFsbCgnY29ubmVjdF90aW1lb3V0JywgdGltZW91dCk7XG4gICAgfSwgdGltZW91dCk7XG5cbiAgICB0aGlzLnN1YnMucHVzaCh7XG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB0aGlzLnN1YnMucHVzaChvcGVuU3ViKTtcbiAgdGhpcy5zdWJzLnB1c2goZXJyb3JTdWIpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiB0cmFuc3BvcnQgb3Blbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdvcGVuJyk7XG5cbiAgLy8gY2xlYXIgb2xkIHN1YnNcbiAgdGhpcy5jbGVhbnVwKCk7XG5cbiAgLy8gbWFyayBhcyBvcGVuXG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuJztcbiAgdGhpcy5lbWl0KCdvcGVuJyk7XG5cbiAgLy8gYWRkIG5ldyBzdWJzXG4gIHZhciBzb2NrZXQgPSB0aGlzLmVuZ2luZTtcbiAgdGhpcy5zdWJzLnB1c2gob24oc29ja2V0LCAnZGF0YScsIGJpbmQodGhpcywgJ29uZGF0YScpKSk7XG4gIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ3BpbmcnLCBiaW5kKHRoaXMsICdvbnBpbmcnKSkpO1xuICB0aGlzLnN1YnMucHVzaChvbihzb2NrZXQsICdwb25nJywgYmluZCh0aGlzLCAnb25wb25nJykpKTtcbiAgdGhpcy5zdWJzLnB1c2gob24oc29ja2V0LCAnZXJyb3InLCBiaW5kKHRoaXMsICdvbmVycm9yJykpKTtcbiAgdGhpcy5zdWJzLnB1c2gob24oc29ja2V0LCAnY2xvc2UnLCBiaW5kKHRoaXMsICdvbmNsb3NlJykpKTtcbiAgdGhpcy5zdWJzLnB1c2gob24odGhpcy5kZWNvZGVyLCAnZGVjb2RlZCcsIGJpbmQodGhpcywgJ29uZGVjb2RlZCcpKSk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGEgcGluZy5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vbnBpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMubGFzdFBpbmcgPSBuZXcgRGF0ZSgpO1xuICB0aGlzLmVtaXRBbGwoJ3BpbmcnKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gYSBwYWNrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25wb25nID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmVtaXRBbGwoJ3BvbmcnLCBuZXcgRGF0ZSgpIC0gdGhpcy5sYXN0UGluZyk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aXRoIGRhdGEuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25kYXRhID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgdGhpcy5kZWNvZGVyLmFkZChkYXRhKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdoZW4gcGFyc2VyIGZ1bGx5IGRlY29kZXMgYSBwYWNrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25kZWNvZGVkID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICB0aGlzLmVtaXQoJ3BhY2tldCcsIHBhY2tldCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHNvY2tldCBlcnJvci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5vbmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICBkZWJ1ZygnZXJyb3InLCBlcnIpO1xuICB0aGlzLmVtaXRBbGwoJ2Vycm9yJywgZXJyKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBzb2NrZXQgZm9yIHRoZSBnaXZlbiBgbnNwYC5cbiAqXG4gKiBAcmV0dXJuIHtTb2NrZXR9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnNvY2tldCA9IGZ1bmN0aW9uIChuc3AsIG9wdHMpIHtcbiAgdmFyIHNvY2tldCA9IHRoaXMubnNwc1tuc3BdO1xuICBpZiAoIXNvY2tldCkge1xuICAgIHNvY2tldCA9IG5ldyBTb2NrZXQodGhpcywgbnNwLCBvcHRzKTtcbiAgICB0aGlzLm5zcHNbbnNwXSA9IHNvY2tldDtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgc29ja2V0Lm9uKCdjb25uZWN0aW5nJywgb25Db25uZWN0aW5nKTtcbiAgICBzb2NrZXQub24oJ2Nvbm5lY3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBzb2NrZXQuaWQgPSBzZWxmLmdlbmVyYXRlSWQobnNwKTtcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLmF1dG9Db25uZWN0KSB7XG4gICAgICAvLyBtYW51YWxseSBjYWxsIGhlcmUgc2luY2UgY29ubmVjdGluZyBldmVudCBpcyBmaXJlZCBiZWZvcmUgbGlzdGVuaW5nXG4gICAgICBvbkNvbm5lY3RpbmcoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbkNvbm5lY3RpbmcgKCkge1xuICAgIGlmICghfmluZGV4T2Yoc2VsZi5jb25uZWN0aW5nLCBzb2NrZXQpKSB7XG4gICAgICBzZWxmLmNvbm5lY3RpbmcucHVzaChzb2NrZXQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzb2NrZXQ7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGEgc29ja2V0IGNsb3NlLlxuICpcbiAqIEBwYXJhbSB7U29ja2V0fSBzb2NrZXRcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKHNvY2tldCkge1xuICB2YXIgaW5kZXggPSBpbmRleE9mKHRoaXMuY29ubmVjdGluZywgc29ja2V0KTtcbiAgaWYgKH5pbmRleCkgdGhpcy5jb25uZWN0aW5nLnNwbGljZShpbmRleCwgMSk7XG4gIGlmICh0aGlzLmNvbm5lY3RpbmcubGVuZ3RoKSByZXR1cm47XG5cbiAgdGhpcy5jbG9zZSgpO1xufTtcblxuLyoqXG4gKiBXcml0ZXMgYSBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUucGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICBkZWJ1Zygnd3JpdGluZyBwYWNrZXQgJWonLCBwYWNrZXQpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGlmIChwYWNrZXQucXVlcnkgJiYgcGFja2V0LnR5cGUgPT09IDApIHBhY2tldC5uc3AgKz0gJz8nICsgcGFja2V0LnF1ZXJ5O1xuXG4gIGlmICghc2VsZi5lbmNvZGluZykge1xuICAgIC8vIGVuY29kZSwgdGhlbiB3cml0ZSB0byBlbmdpbmUgd2l0aCByZXN1bHRcbiAgICBzZWxmLmVuY29kaW5nID0gdHJ1ZTtcbiAgICB0aGlzLmVuY29kZXIuZW5jb2RlKHBhY2tldCwgZnVuY3Rpb24gKGVuY29kZWRQYWNrZXRzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVuY29kZWRQYWNrZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHNlbGYuZW5naW5lLndyaXRlKGVuY29kZWRQYWNrZXRzW2ldLCBwYWNrZXQub3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBzZWxmLmVuY29kaW5nID0gZmFsc2U7XG4gICAgICBzZWxmLnByb2Nlc3NQYWNrZXRRdWV1ZSgpO1xuICAgIH0pO1xuICB9IGVsc2UgeyAvLyBhZGQgcGFja2V0IHRvIHRoZSBxdWV1ZVxuICAgIHNlbGYucGFja2V0QnVmZmVyLnB1c2gocGFja2V0KTtcbiAgfVxufTtcblxuLyoqXG4gKiBJZiBwYWNrZXQgYnVmZmVyIGlzIG5vbi1lbXB0eSwgYmVnaW5zIGVuY29kaW5nIHRoZVxuICogbmV4dCBwYWNrZXQgaW4gbGluZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5NYW5hZ2VyLnByb3RvdHlwZS5wcm9jZXNzUGFja2V0UXVldWUgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnBhY2tldEJ1ZmZlci5sZW5ndGggPiAwICYmICF0aGlzLmVuY29kaW5nKSB7XG4gICAgdmFyIHBhY2sgPSB0aGlzLnBhY2tldEJ1ZmZlci5zaGlmdCgpO1xuICAgIHRoaXMucGFja2V0KHBhY2spO1xuICB9XG59O1xuXG4vKipcbiAqIENsZWFuIHVwIHRyYW5zcG9ydCBzdWJzY3JpcHRpb25zIGFuZCBwYWNrZXQgYnVmZmVyLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLmNsZWFudXAgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdjbGVhbnVwJyk7XG5cbiAgdmFyIHN1YnNMZW5ndGggPSB0aGlzLnN1YnMubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN1YnNMZW5ndGg7IGkrKykge1xuICAgIHZhciBzdWIgPSB0aGlzLnN1YnMuc2hpZnQoKTtcbiAgICBzdWIuZGVzdHJveSgpO1xuICB9XG5cbiAgdGhpcy5wYWNrZXRCdWZmZXIgPSBbXTtcbiAgdGhpcy5lbmNvZGluZyA9IGZhbHNlO1xuICB0aGlzLmxhc3RQaW5nID0gbnVsbDtcblxuICB0aGlzLmRlY29kZXIuZGVzdHJveSgpO1xufTtcblxuLyoqXG4gKiBDbG9zZSB0aGUgY3VycmVudCBzb2NrZXQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUuY2xvc2UgPVxuTWFuYWdlci5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ2Rpc2Nvbm5lY3QnKTtcbiAgdGhpcy5za2lwUmVjb25uZWN0ID0gdHJ1ZTtcbiAgdGhpcy5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgLy8gYG9uY2xvc2VgIHdpbGwgbm90IGZpcmUgYmVjYXVzZVxuICAgIC8vIGFuIG9wZW4gZXZlbnQgbmV2ZXIgaGFwcGVuZWRcbiAgICB0aGlzLmNsZWFudXAoKTtcbiAgfVxuICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG4gIGlmICh0aGlzLmVuZ2luZSkgdGhpcy5lbmdpbmUuY2xvc2UoKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gZW5naW5lIGNsb3NlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLm9uY2xvc2UgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gIGRlYnVnKCdvbmNsb3NlJyk7XG5cbiAgdGhpcy5jbGVhbnVwKCk7XG4gIHRoaXMuYmFja29mZi5yZXNldCgpO1xuICB0aGlzLnJlYWR5U3RhdGUgPSAnY2xvc2VkJztcbiAgdGhpcy5lbWl0KCdjbG9zZScsIHJlYXNvbik7XG5cbiAgaWYgKHRoaXMuX3JlY29ubmVjdGlvbiAmJiAhdGhpcy5za2lwUmVjb25uZWN0KSB7XG4gICAgdGhpcy5yZWNvbm5lY3QoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBBdHRlbXB0IGEgcmVjb25uZWN0aW9uLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMucmVjb25uZWN0aW5nIHx8IHRoaXMuc2tpcFJlY29ubmVjdCkgcmV0dXJuIHRoaXM7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIGlmICh0aGlzLmJhY2tvZmYuYXR0ZW1wdHMgPj0gdGhpcy5fcmVjb25uZWN0aW9uQXR0ZW1wdHMpIHtcbiAgICBkZWJ1ZygncmVjb25uZWN0IGZhaWxlZCcpO1xuICAgIHRoaXMuYmFja29mZi5yZXNldCgpO1xuICAgIHRoaXMuZW1pdEFsbCgncmVjb25uZWN0X2ZhaWxlZCcpO1xuICAgIHRoaXMucmVjb25uZWN0aW5nID0gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGRlbGF5ID0gdGhpcy5iYWNrb2ZmLmR1cmF0aW9uKCk7XG4gICAgZGVidWcoJ3dpbGwgd2FpdCAlZG1zIGJlZm9yZSByZWNvbm5lY3QgYXR0ZW1wdCcsIGRlbGF5KTtcblxuICAgIHRoaXMucmVjb25uZWN0aW5nID0gdHJ1ZTtcbiAgICB2YXIgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLnNraXBSZWNvbm5lY3QpIHJldHVybjtcblxuICAgICAgZGVidWcoJ2F0dGVtcHRpbmcgcmVjb25uZWN0Jyk7XG4gICAgICBzZWxmLmVtaXRBbGwoJ3JlY29ubmVjdF9hdHRlbXB0Jywgc2VsZi5iYWNrb2ZmLmF0dGVtcHRzKTtcbiAgICAgIHNlbGYuZW1pdEFsbCgncmVjb25uZWN0aW5nJywgc2VsZi5iYWNrb2ZmLmF0dGVtcHRzKTtcblxuICAgICAgLy8gY2hlY2sgYWdhaW4gZm9yIHRoZSBjYXNlIHNvY2tldCBjbG9zZWQgaW4gYWJvdmUgZXZlbnRzXG4gICAgICBpZiAoc2VsZi5za2lwUmVjb25uZWN0KSByZXR1cm47XG5cbiAgICAgIHNlbGYub3BlbihmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICBkZWJ1ZygncmVjb25uZWN0IGF0dGVtcHQgZXJyb3InKTtcbiAgICAgICAgICBzZWxmLnJlY29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgICAgIHNlbGYucmVjb25uZWN0KCk7XG4gICAgICAgICAgc2VsZi5lbWl0QWxsKCdyZWNvbm5lY3RfZXJyb3InLCBlcnIuZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVidWcoJ3JlY29ubmVjdCBzdWNjZXNzJyk7XG4gICAgICAgICAgc2VsZi5vbnJlY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LCBkZWxheSk7XG5cbiAgICB0aGlzLnN1YnMucHVzaCh7XG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gc3VjY2Vzc2Z1bCByZWNvbm5lY3QuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuTWFuYWdlci5wcm90b3R5cGUub25yZWNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBhdHRlbXB0ID0gdGhpcy5iYWNrb2ZmLmF0dGVtcHRzO1xuICB0aGlzLnJlY29ubmVjdGluZyA9IGZhbHNlO1xuICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgdGhpcy51cGRhdGVTb2NrZXRJZHMoKTtcbiAgdGhpcy5lbWl0QWxsKCdyZWNvbm5lY3QnLCBhdHRlbXB0KTtcbn07XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXNcbiAqL1xuXG52YXIgWE1MSHR0cFJlcXVlc3QgPSByZXF1aXJlKCd4bWxodHRwcmVxdWVzdC1zc2wnKTtcbnZhciBYSFIgPSByZXF1aXJlKCcuL3BvbGxpbmcteGhyJyk7XG52YXIgSlNPTlAgPSByZXF1aXJlKCcuL3BvbGxpbmctanNvbnAnKTtcbnZhciB3ZWJzb2NrZXQgPSByZXF1aXJlKCcuL3dlYnNvY2tldCcpO1xuXG4vKipcbiAqIEV4cG9ydCB0cmFuc3BvcnRzLlxuICovXG5cbmV4cG9ydHMucG9sbGluZyA9IHBvbGxpbmc7XG5leHBvcnRzLndlYnNvY2tldCA9IHdlYnNvY2tldDtcblxuLyoqXG4gKiBQb2xsaW5nIHRyYW5zcG9ydCBwb2x5bW9ycGhpYyBjb25zdHJ1Y3Rvci5cbiAqIERlY2lkZXMgb24geGhyIHZzIGpzb25wIGJhc2VkIG9uIGZlYXR1cmUgZGV0ZWN0aW9uLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBvbGxpbmcgKG9wdHMpIHtcbiAgdmFyIHhocjtcbiAgdmFyIHhkID0gZmFsc2U7XG4gIHZhciB4cyA9IGZhbHNlO1xuICB2YXIganNvbnAgPSBmYWxzZSAhPT0gb3B0cy5qc29ucDtcblxuICBpZiAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBpc1NTTCA9ICdodHRwczonID09PSBsb2NhdGlvbi5wcm90b2NvbDtcbiAgICB2YXIgcG9ydCA9IGxvY2F0aW9uLnBvcnQ7XG5cbiAgICAvLyBzb21lIHVzZXIgYWdlbnRzIGhhdmUgZW1wdHkgYGxvY2F0aW9uLnBvcnRgXG4gICAgaWYgKCFwb3J0KSB7XG4gICAgICBwb3J0ID0gaXNTU0wgPyA0NDMgOiA4MDtcbiAgICB9XG5cbiAgICB4ZCA9IG9wdHMuaG9zdG5hbWUgIT09IGxvY2F0aW9uLmhvc3RuYW1lIHx8IHBvcnQgIT09IG9wdHMucG9ydDtcbiAgICB4cyA9IG9wdHMuc2VjdXJlICE9PSBpc1NTTDtcbiAgfVxuXG4gIG9wdHMueGRvbWFpbiA9IHhkO1xuICBvcHRzLnhzY2hlbWUgPSB4cztcbiAgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KG9wdHMpO1xuXG4gIGlmICgnb3BlbicgaW4geGhyICYmICFvcHRzLmZvcmNlSlNPTlApIHtcbiAgICByZXR1cm4gbmV3IFhIUihvcHRzKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWpzb25wKSB0aHJvdyBuZXcgRXJyb3IoJ0pTT05QIGRpc2FibGVkJyk7XG4gICAgcmV0dXJuIG5ldyBKU09OUChvcHRzKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBUcmFuc3BvcnQgPSByZXF1aXJlKCcuLi90cmFuc3BvcnQnKTtcbnZhciBwYXJzZXFzID0gcmVxdWlyZSgncGFyc2VxcycpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTtcbnZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29tcG9uZW50LWluaGVyaXQnKTtcbnZhciB5ZWFzdCA9IHJlcXVpcmUoJ3llYXN0Jyk7XG52YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdlbmdpbmUuaW8tY2xpZW50OnBvbGxpbmcnKTtcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBvbGxpbmc7XG5cbi8qKlxuICogSXMgWEhSMiBzdXBwb3J0ZWQ/XG4gKi9cblxudmFyIGhhc1hIUjIgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgWE1MSHR0cFJlcXVlc3QgPSByZXF1aXJlKCd4bWxodHRwcmVxdWVzdC1zc2wnKTtcbiAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCh7IHhkb21haW46IGZhbHNlIH0pO1xuICByZXR1cm4gbnVsbCAhPSB4aHIucmVzcG9uc2VUeXBlO1xufSkoKTtcblxuLyoqXG4gKiBQb2xsaW5nIGludGVyZmFjZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0c1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gUG9sbGluZyAob3B0cykge1xuICB2YXIgZm9yY2VCYXNlNjQgPSAob3B0cyAmJiBvcHRzLmZvcmNlQmFzZTY0KTtcbiAgaWYgKCFoYXNYSFIyIHx8IGZvcmNlQmFzZTY0KSB7XG4gICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IGZhbHNlO1xuICB9XG4gIFRyYW5zcG9ydC5jYWxsKHRoaXMsIG9wdHMpO1xufVxuXG4vKipcbiAqIEluaGVyaXRzIGZyb20gVHJhbnNwb3J0LlxuICovXG5cbmluaGVyaXQoUG9sbGluZywgVHJhbnNwb3J0KTtcblxuLyoqXG4gKiBUcmFuc3BvcnQgbmFtZS5cbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5uYW1lID0gJ3BvbGxpbmcnO1xuXG4vKipcbiAqIE9wZW5zIHRoZSBzb2NrZXQgKHRyaWdnZXJzIHBvbGxpbmcpLiBXZSB3cml0ZSBhIFBJTkcgbWVzc2FnZSB0byBkZXRlcm1pbmVcbiAqIHdoZW4gdGhlIHRyYW5zcG9ydCBpcyBvcGVuLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblBvbGxpbmcucHJvdG90eXBlLmRvT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5wb2xsKCk7XG59O1xuXG4vKipcbiAqIFBhdXNlcyBwb2xsaW5nLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIHVwb24gYnVmZmVycyBhcmUgZmx1c2hlZCBhbmQgdHJhbnNwb3J0IGlzIHBhdXNlZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAob25QYXVzZSkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdGhpcy5yZWFkeVN0YXRlID0gJ3BhdXNpbmcnO1xuXG4gIGZ1bmN0aW9uIHBhdXNlICgpIHtcbiAgICBkZWJ1ZygncGF1c2VkJyk7XG4gICAgc2VsZi5yZWFkeVN0YXRlID0gJ3BhdXNlZCc7XG4gICAgb25QYXVzZSgpO1xuICB9XG5cbiAgaWYgKHRoaXMucG9sbGluZyB8fCAhdGhpcy53cml0YWJsZSkge1xuICAgIHZhciB0b3RhbCA9IDA7XG5cbiAgICBpZiAodGhpcy5wb2xsaW5nKSB7XG4gICAgICBkZWJ1Zygnd2UgYXJlIGN1cnJlbnRseSBwb2xsaW5nIC0gd2FpdGluZyB0byBwYXVzZScpO1xuICAgICAgdG90YWwrKztcbiAgICAgIHRoaXMub25jZSgncG9sbENvbXBsZXRlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBkZWJ1ZygncHJlLXBhdXNlIHBvbGxpbmcgY29tcGxldGUnKTtcbiAgICAgICAgLS10b3RhbCB8fCBwYXVzZSgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLndyaXRhYmxlKSB7XG4gICAgICBkZWJ1Zygnd2UgYXJlIGN1cnJlbnRseSB3cml0aW5nIC0gd2FpdGluZyB0byBwYXVzZScpO1xuICAgICAgdG90YWwrKztcbiAgICAgIHRoaXMub25jZSgnZHJhaW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRlYnVnKCdwcmUtcGF1c2Ugd3JpdGluZyBjb21wbGV0ZScpO1xuICAgICAgICAtLXRvdGFsIHx8IHBhdXNlKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcGF1c2UoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTdGFydHMgcG9sbGluZyBjeWNsZS5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblBvbGxpbmcucHJvdG90eXBlLnBvbGwgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCdwb2xsaW5nJyk7XG4gIHRoaXMucG9sbGluZyA9IHRydWU7XG4gIHRoaXMuZG9Qb2xsKCk7XG4gIHRoaXMuZW1pdCgncG9sbCcpO1xufTtcblxuLyoqXG4gKiBPdmVybG9hZHMgb25EYXRhIHRvIGRldGVjdCBwYXlsb2Fkcy5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5vbkRhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIGRlYnVnKCdwb2xsaW5nIGdvdCBkYXRhICVzJywgZGF0YSk7XG4gIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uIChwYWNrZXQsIGluZGV4LCB0b3RhbCkge1xuICAgIC8vIGlmIGl0cyB0aGUgZmlyc3QgbWVzc2FnZSB3ZSBjb25zaWRlciB0aGUgdHJhbnNwb3J0IG9wZW5cbiAgICBpZiAoJ29wZW5pbmcnID09PSBzZWxmLnJlYWR5U3RhdGUpIHtcbiAgICAgIHNlbGYub25PcGVuKCk7XG4gICAgfVxuXG4gICAgLy8gaWYgaXRzIGEgY2xvc2UgcGFja2V0LCB3ZSBjbG9zZSB0aGUgb25nb2luZyByZXF1ZXN0c1xuICAgIGlmICgnY2xvc2UnID09PSBwYWNrZXQudHlwZSkge1xuICAgICAgc2VsZi5vbkNsb3NlKCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gb3RoZXJ3aXNlIGJ5cGFzcyBvbkRhdGEgYW5kIGhhbmRsZSB0aGUgbWVzc2FnZVxuICAgIHNlbGYub25QYWNrZXQocGFja2V0KTtcbiAgfTtcblxuICAvLyBkZWNvZGUgcGF5bG9hZFxuICBwYXJzZXIuZGVjb2RlUGF5bG9hZChkYXRhLCB0aGlzLnNvY2tldC5iaW5hcnlUeXBlLCBjYWxsYmFjayk7XG5cbiAgLy8gaWYgYW4gZXZlbnQgZGlkIG5vdCB0cmlnZ2VyIGNsb3NpbmdcbiAgaWYgKCdjbG9zZWQnICE9PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAvLyBpZiB3ZSBnb3QgZGF0YSB3ZSdyZSBub3QgcG9sbGluZ1xuICAgIHRoaXMucG9sbGluZyA9IGZhbHNlO1xuICAgIHRoaXMuZW1pdCgncG9sbENvbXBsZXRlJyk7XG5cbiAgICBpZiAoJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgIHRoaXMucG9sbCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWJ1ZygnaWdub3JpbmcgcG9sbCAtIHRyYW5zcG9ydCBzdGF0ZSBcIiVzXCInLCB0aGlzLnJlYWR5U3RhdGUpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBGb3IgcG9sbGluZywgc2VuZCBhIGNsb3NlIHBhY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5kb0Nsb3NlID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgZnVuY3Rpb24gY2xvc2UgKCkge1xuICAgIGRlYnVnKCd3cml0aW5nIGNsb3NlIHBhY2tldCcpO1xuICAgIHNlbGYud3JpdGUoW3sgdHlwZTogJ2Nsb3NlJyB9XSk7XG4gIH1cblxuICBpZiAoJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICBkZWJ1ZygndHJhbnNwb3J0IG9wZW4gLSBjbG9zaW5nJyk7XG4gICAgY2xvc2UoKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBpbiBjYXNlIHdlJ3JlIHRyeWluZyB0byBjbG9zZSB3aGlsZVxuICAgIC8vIGhhbmRzaGFraW5nIGlzIGluIHByb2dyZXNzIChHSC0xNjQpXG4gICAgZGVidWcoJ3RyYW5zcG9ydCBub3Qgb3BlbiAtIGRlZmVycmluZyBjbG9zZScpO1xuICAgIHRoaXMub25jZSgnb3BlbicsIGNsb3NlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXcml0ZXMgYSBwYWNrZXRzIHBheWxvYWQuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gZGF0YSBwYWNrZXRzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkcmFpbiBjYWxsYmFja1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUG9sbGluZy5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAocGFja2V0cykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcbiAgdmFyIGNhbGxiYWNrZm4gPSBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi53cml0YWJsZSA9IHRydWU7XG4gICAgc2VsZi5lbWl0KCdkcmFpbicpO1xuICB9O1xuXG4gIHBhcnNlci5lbmNvZGVQYXlsb2FkKHBhY2tldHMsIHRoaXMuc3VwcG9ydHNCaW5hcnksIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgc2VsZi5kb1dyaXRlKGRhdGEsIGNhbGxiYWNrZm4pO1xuICB9KTtcbn07XG5cbi8qKlxuICogR2VuZXJhdGVzIHVyaSBmb3IgY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Qb2xsaW5nLnByb3RvdHlwZS51cmkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBxdWVyeSA9IHRoaXMucXVlcnkgfHwge307XG4gIHZhciBzY2hlbWEgPSB0aGlzLnNlY3VyZSA/ICdodHRwcycgOiAnaHR0cCc7XG4gIHZhciBwb3J0ID0gJyc7XG5cbiAgLy8gY2FjaGUgYnVzdGluZyBpcyBmb3JjZWRcbiAgaWYgKGZhbHNlICE9PSB0aGlzLnRpbWVzdGFtcFJlcXVlc3RzKSB7XG4gICAgcXVlcnlbdGhpcy50aW1lc3RhbXBQYXJhbV0gPSB5ZWFzdCgpO1xuICB9XG5cbiAgaWYgKCF0aGlzLnN1cHBvcnRzQmluYXJ5ICYmICFxdWVyeS5zaWQpIHtcbiAgICBxdWVyeS5iNjQgPSAxO1xuICB9XG5cbiAgcXVlcnkgPSBwYXJzZXFzLmVuY29kZShxdWVyeSk7XG5cbiAgLy8gYXZvaWQgcG9ydCBpZiBkZWZhdWx0IGZvciBzY2hlbWFcbiAgaWYgKHRoaXMucG9ydCAmJiAoKCdodHRwcycgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5wb3J0KSAhPT0gNDQzKSB8fFxuICAgICAoJ2h0dHAnID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMucG9ydCkgIT09IDgwKSkpIHtcbiAgICBwb3J0ID0gJzonICsgdGhpcy5wb3J0O1xuICB9XG5cbiAgLy8gcHJlcGVuZCA/IHRvIHF1ZXJ5XG4gIGlmIChxdWVyeS5sZW5ndGgpIHtcbiAgICBxdWVyeSA9ICc/JyArIHF1ZXJ5O1xuICB9XG5cbiAgdmFyIGlwdjYgPSB0aGlzLmhvc3RuYW1lLmluZGV4T2YoJzonKSAhPT0gLTE7XG4gIHJldHVybiBzY2hlbWEgKyAnOi8vJyArIChpcHY2ID8gJ1snICsgdGhpcy5ob3N0bmFtZSArICddJyA6IHRoaXMuaG9zdG5hbWUpICsgcG9ydCArIHRoaXMucGF0aCArIHF1ZXJ5O1xufTtcbiIsIi8qIGdsb2JhbCBCbG9iIEZpbGUgKi9cblxuLypcbiAqIE1vZHVsZSByZXF1aXJlbWVudHMuXG4gKi9cblxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7XG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgd2l0aE5hdGl2ZUJsb2IgPSB0eXBlb2YgQmxvYiA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIHRvU3RyaW5nLmNhbGwoQmxvYikgPT09ICdbb2JqZWN0IEJsb2JDb25zdHJ1Y3Rvcl0nO1xudmFyIHdpdGhOYXRpdmVGaWxlID0gdHlwZW9mIEZpbGUgPT09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBGaWxlICE9PSAndW5kZWZpbmVkJyAmJiB0b1N0cmluZy5jYWxsKEZpbGUpID09PSAnW29iamVjdCBGaWxlQ29uc3RydWN0b3JdJztcblxuLyoqXG4gKiBNb2R1bGUgZXhwb3J0cy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc0JpbmFyeTtcblxuLyoqXG4gKiBDaGVja3MgZm9yIGJpbmFyeSBkYXRhLlxuICpcbiAqIFN1cHBvcnRzIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEJsb2IgYW5kIEZpbGUuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGFueXRoaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGhhc0JpbmFyeSAob2JqKSB7XG4gIGlmICghb2JqIHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKGhhc0JpbmFyeShvYmpbaV0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoKHR5cGVvZiBCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgQnVmZmVyLmlzQnVmZmVyICYmIEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB8fFxuICAgICh0eXBlb2YgQXJyYXlCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8XG4gICAgKHdpdGhOYXRpdmVCbG9iICYmIG9iaiBpbnN0YW5jZW9mIEJsb2IpIHx8XG4gICAgKHdpdGhOYXRpdmVGaWxlICYmIG9iaiBpbnN0YW5jZW9mIEZpbGUpXG4gICkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gc2VlOiBodHRwczovL2dpdGh1Yi5jb20vQXV0b21hdHRpYy9oYXMtYmluYXJ5L3B1bGwvNFxuICBpZiAob2JqLnRvSlNPTiAmJiB0eXBlb2Ygb2JqLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJyAmJiBhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGhhc0JpbmFyeShvYmoudG9KU09OKCksIHRydWUpO1xuICB9XG5cbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpICYmIGhhc0JpbmFyeShvYmpba2V5XSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGFscGhhYmV0ID0gJzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6LV8nLnNwbGl0KCcnKVxuICAsIGxlbmd0aCA9IDY0XG4gICwgbWFwID0ge31cbiAgLCBzZWVkID0gMFxuICAsIGkgPSAwXG4gICwgcHJldjtcblxuLyoqXG4gKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBzcGVjaWZpZWQgbnVtYmVyLlxuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBudW0gVGhlIG51bWJlciB0byBjb252ZXJ0LlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgbnVtYmVyLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gZW5jb2RlKG51bSkge1xuICB2YXIgZW5jb2RlZCA9ICcnO1xuXG4gIGRvIHtcbiAgICBlbmNvZGVkID0gYWxwaGFiZXRbbnVtICUgbGVuZ3RoXSArIGVuY29kZWQ7XG4gICAgbnVtID0gTWF0aC5mbG9vcihudW0gLyBsZW5ndGgpO1xuICB9IHdoaWxlIChudW0gPiAwKTtcblxuICByZXR1cm4gZW5jb2RlZDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGludGVnZXIgdmFsdWUgc3BlY2lmaWVkIGJ5IHRoZSBnaXZlbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgaW50ZWdlciB2YWx1ZSByZXByZXNlbnRlZCBieSB0aGUgc3RyaW5nLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gZGVjb2RlKHN0cikge1xuICB2YXIgZGVjb2RlZCA9IDA7XG5cbiAgZm9yIChpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGRlY29kZWQgPSBkZWNvZGVkICogbGVuZ3RoICsgbWFwW3N0ci5jaGFyQXQoaSldO1xuICB9XG5cbiAgcmV0dXJuIGRlY29kZWQ7XG59XG5cbi8qKlxuICogWWVhc3Q6IEEgdGlueSBncm93aW5nIGlkIGdlbmVyYXRvci5cbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBBIHVuaXF1ZSBpZC5cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHllYXN0KCkge1xuICB2YXIgbm93ID0gZW5jb2RlKCtuZXcgRGF0ZSgpKTtcblxuICBpZiAobm93ICE9PSBwcmV2KSByZXR1cm4gc2VlZCA9IDAsIHByZXYgPSBub3c7XG4gIHJldHVybiBub3cgKycuJysgZW5jb2RlKHNlZWQrKyk7XG59XG5cbi8vXG4vLyBNYXAgZWFjaCBjaGFyYWN0ZXIgdG8gaXRzIGluZGV4LlxuLy9cbmZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIG1hcFthbHBoYWJldFtpXV0gPSBpO1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBgeWVhc3RgLCBgZW5jb2RlYCBhbmQgYGRlY29kZWAgZnVuY3Rpb25zLlxuLy9cbnllYXN0LmVuY29kZSA9IGVuY29kZTtcbnllYXN0LmRlY29kZSA9IGRlY29kZTtcbm1vZHVsZS5leHBvcnRzID0geWVhc3Q7XG4iLCJcbnZhciBpbmRleE9mID0gW10uaW5kZXhPZjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcnIsIG9iail7XG4gIGlmIChpbmRleE9mKSByZXR1cm4gYXJyLmluZGV4T2Yob2JqKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoYXJyW2ldID09PSBvYmopIHJldHVybiBpO1xuICB9XG4gIHJldHVybiAtMTtcbn07IiwiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHBhcnNlciA9IHJlcXVpcmUoJ3NvY2tldC5pby1wYXJzZXInKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTtcbnZhciB0b0FycmF5ID0gcmVxdWlyZSgndG8tYXJyYXknKTtcbnZhciBvbiA9IHJlcXVpcmUoJy4vb24nKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnY29tcG9uZW50LWJpbmQnKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tldC5pby1jbGllbnQ6c29ja2V0Jyk7XG52YXIgcGFyc2VxcyA9IHJlcXVpcmUoJ3BhcnNlcXMnKTtcbnZhciBoYXNCaW4gPSByZXF1aXJlKCdoYXMtYmluYXJ5MicpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IFNvY2tldDtcblxuLyoqXG4gKiBJbnRlcm5hbCBldmVudHMgKGJsYWNrbGlzdGVkKS5cbiAqIFRoZXNlIGV2ZW50cyBjYW4ndCBiZSBlbWl0dGVkIGJ5IHRoZSB1c2VyLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbnZhciBldmVudHMgPSB7XG4gIGNvbm5lY3Q6IDEsXG4gIGNvbm5lY3RfZXJyb3I6IDEsXG4gIGNvbm5lY3RfdGltZW91dDogMSxcbiAgY29ubmVjdGluZzogMSxcbiAgZGlzY29ubmVjdDogMSxcbiAgZXJyb3I6IDEsXG4gIHJlY29ubmVjdDogMSxcbiAgcmVjb25uZWN0X2F0dGVtcHQ6IDEsXG4gIHJlY29ubmVjdF9mYWlsZWQ6IDEsXG4gIHJlY29ubmVjdF9lcnJvcjogMSxcbiAgcmVjb25uZWN0aW5nOiAxLFxuICBwaW5nOiAxLFxuICBwb25nOiAxXG59O1xuXG4vKipcbiAqIFNob3J0Y3V0IHRvIGBFbWl0dGVyI2VtaXRgLlxuICovXG5cbnZhciBlbWl0ID0gRW1pdHRlci5wcm90b3R5cGUuZW1pdDtcblxuLyoqXG4gKiBgU29ja2V0YCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFNvY2tldCAoaW8sIG5zcCwgb3B0cykge1xuICB0aGlzLmlvID0gaW87XG4gIHRoaXMubnNwID0gbnNwO1xuICB0aGlzLmpzb24gPSB0aGlzOyAvLyBjb21wYXRcbiAgdGhpcy5pZHMgPSAwO1xuICB0aGlzLmFja3MgPSB7fTtcbiAgdGhpcy5yZWNlaXZlQnVmZmVyID0gW107XG4gIHRoaXMuc2VuZEJ1ZmZlciA9IFtdO1xuICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICB0aGlzLmRpc2Nvbm5lY3RlZCA9IHRydWU7XG4gIHRoaXMuZmxhZ3MgPSB7fTtcbiAgaWYgKG9wdHMgJiYgb3B0cy5xdWVyeSkge1xuICAgIHRoaXMucXVlcnkgPSBvcHRzLnF1ZXJ5O1xuICB9XG4gIGlmICh0aGlzLmlvLmF1dG9Db25uZWN0KSB0aGlzLm9wZW4oKTtcbn1cblxuLyoqXG4gKiBNaXggaW4gYEVtaXR0ZXJgLlxuICovXG5cbkVtaXR0ZXIoU29ja2V0LnByb3RvdHlwZSk7XG5cbi8qKlxuICogU3Vic2NyaWJlIHRvIG9wZW4sIGNsb3NlIGFuZCBwYWNrZXQgZXZlbnRzXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5zdWJFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLnN1YnMpIHJldHVybjtcblxuICB2YXIgaW8gPSB0aGlzLmlvO1xuICB0aGlzLnN1YnMgPSBbXG4gICAgb24oaW8sICdvcGVuJywgYmluZCh0aGlzLCAnb25vcGVuJykpLFxuICAgIG9uKGlvLCAncGFja2V0JywgYmluZCh0aGlzLCAnb25wYWNrZXQnKSksXG4gICAgb24oaW8sICdjbG9zZScsIGJpbmQodGhpcywgJ29uY2xvc2UnKSlcbiAgXTtcbn07XG5cbi8qKlxuICogXCJPcGVuc1wiIHRoZSBzb2NrZXQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9wZW4gPVxuU29ja2V0LnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jb25uZWN0ZWQpIHJldHVybiB0aGlzO1xuXG4gIHRoaXMuc3ViRXZlbnRzKCk7XG4gIHRoaXMuaW8ub3BlbigpOyAvLyBlbnN1cmUgb3BlblxuICBpZiAoJ29wZW4nID09PSB0aGlzLmlvLnJlYWR5U3RhdGUpIHRoaXMub25vcGVuKCk7XG4gIHRoaXMuZW1pdCgnY29ubmVjdGluZycpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2VuZHMgYSBgbWVzc2FnZWAgZXZlbnQuXG4gKlxuICogQHJldHVybiB7U29ja2V0fSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cyk7XG4gIGFyZ3MudW5zaGlmdCgnbWVzc2FnZScpO1xuICB0aGlzLmVtaXQuYXBwbHkodGhpcywgYXJncyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBPdmVycmlkZSBgZW1pdGAuXG4gKiBJZiB0aGUgZXZlbnQgaXMgaW4gYGV2ZW50c2AsIGl0J3MgZW1pdHRlZCBub3JtYWxseS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgbmFtZVxuICogQHJldHVybiB7U29ja2V0fSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIChldikge1xuICBpZiAoZXZlbnRzLmhhc093blByb3BlcnR5KGV2KSkge1xuICAgIGVtaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMpO1xuICB2YXIgcGFja2V0ID0ge1xuICAgIHR5cGU6ICh0aGlzLmZsYWdzLmJpbmFyeSAhPT0gdW5kZWZpbmVkID8gdGhpcy5mbGFncy5iaW5hcnkgOiBoYXNCaW4oYXJncykpID8gcGFyc2VyLkJJTkFSWV9FVkVOVCA6IHBhcnNlci5FVkVOVCxcbiAgICBkYXRhOiBhcmdzXG4gIH07XG5cbiAgcGFja2V0Lm9wdGlvbnMgPSB7fTtcbiAgcGFja2V0Lm9wdGlvbnMuY29tcHJlc3MgPSAhdGhpcy5mbGFncyB8fCBmYWxzZSAhPT0gdGhpcy5mbGFncy5jb21wcmVzcztcblxuICAvLyBldmVudCBhY2sgY2FsbGJhY2tcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0pIHtcbiAgICBkZWJ1ZygnZW1pdHRpbmcgcGFja2V0IHdpdGggYWNrIGlkICVkJywgdGhpcy5pZHMpO1xuICAgIHRoaXMuYWNrc1t0aGlzLmlkc10gPSBhcmdzLnBvcCgpO1xuICAgIHBhY2tldC5pZCA9IHRoaXMuaWRzKys7XG4gIH1cblxuICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICB0aGlzLnBhY2tldChwYWNrZXQpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuc2VuZEJ1ZmZlci5wdXNoKHBhY2tldCk7XG4gIH1cblxuICB0aGlzLmZsYWdzID0ge307XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNlbmRzIGEgcGFja2V0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXRcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUucGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICBwYWNrZXQubnNwID0gdGhpcy5uc3A7XG4gIHRoaXMuaW8ucGFja2V0KHBhY2tldCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGVuZ2luZSBgb3BlbmAuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCd0cmFuc3BvcnQgaXMgb3BlbiAtIGNvbm5lY3RpbmcnKTtcblxuICAvLyB3cml0ZSBjb25uZWN0IHBhY2tldCBpZiBuZWNlc3NhcnlcbiAgaWYgKCcvJyAhPT0gdGhpcy5uc3ApIHtcbiAgICBpZiAodGhpcy5xdWVyeSkge1xuICAgICAgdmFyIHF1ZXJ5ID0gdHlwZW9mIHRoaXMucXVlcnkgPT09ICdvYmplY3QnID8gcGFyc2Vxcy5lbmNvZGUodGhpcy5xdWVyeSkgOiB0aGlzLnF1ZXJ5O1xuICAgICAgZGVidWcoJ3NlbmRpbmcgY29ubmVjdCBwYWNrZXQgd2l0aCBxdWVyeSAlcycsIHF1ZXJ5KTtcbiAgICAgIHRoaXMucGFja2V0KHt0eXBlOiBwYXJzZXIuQ09OTkVDVCwgcXVlcnk6IHF1ZXJ5fSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGFja2V0KHt0eXBlOiBwYXJzZXIuQ09OTkVDVH0pO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBlbmdpbmUgYGNsb3NlYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVhc29uXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uY2xvc2UgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gIGRlYnVnKCdjbG9zZSAoJXMpJywgcmVhc29uKTtcbiAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgdGhpcy5kaXNjb25uZWN0ZWQgPSB0cnVlO1xuICBkZWxldGUgdGhpcy5pZDtcbiAgdGhpcy5lbWl0KCdkaXNjb25uZWN0JywgcmVhc29uKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHdpdGggc29ja2V0IHBhY2tldC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9ucGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICB2YXIgc2FtZU5hbWVzcGFjZSA9IHBhY2tldC5uc3AgPT09IHRoaXMubnNwO1xuICB2YXIgcm9vdE5hbWVzcGFjZUVycm9yID0gcGFja2V0LnR5cGUgPT09IHBhcnNlci5FUlJPUiAmJiBwYWNrZXQubnNwID09PSAnLyc7XG5cbiAgaWYgKCFzYW1lTmFtZXNwYWNlICYmICFyb290TmFtZXNwYWNlRXJyb3IpIHJldHVybjtcblxuICBzd2l0Y2ggKHBhY2tldC50eXBlKSB7XG4gICAgY2FzZSBwYXJzZXIuQ09OTkVDVDpcbiAgICAgIHRoaXMub25jb25uZWN0KCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkVWRU5UOlxuICAgICAgdGhpcy5vbmV2ZW50KHBhY2tldCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkJJTkFSWV9FVkVOVDpcbiAgICAgIHRoaXMub25ldmVudChwYWNrZXQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5BQ0s6XG4gICAgICB0aGlzLm9uYWNrKHBhY2tldCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkJJTkFSWV9BQ0s6XG4gICAgICB0aGlzLm9uYWNrKHBhY2tldCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgcGFyc2VyLkRJU0NPTk5FQ1Q6XG4gICAgICB0aGlzLm9uZGlzY29ubmVjdCgpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHBhcnNlci5FUlJPUjpcbiAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBwYWNrZXQuZGF0YSk7XG4gICAgICBicmVhaztcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHNlcnZlciBldmVudC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uZXZlbnQgPSBmdW5jdGlvbiAocGFja2V0KSB7XG4gIHZhciBhcmdzID0gcGFja2V0LmRhdGEgfHwgW107XG4gIGRlYnVnKCdlbWl0dGluZyBldmVudCAlaicsIGFyZ3MpO1xuXG4gIGlmIChudWxsICE9IHBhY2tldC5pZCkge1xuICAgIGRlYnVnKCdhdHRhY2hpbmcgYWNrIGNhbGxiYWNrIHRvIGV2ZW50Jyk7XG4gICAgYXJncy5wdXNoKHRoaXMuYWNrKHBhY2tldC5pZCkpO1xuICB9XG5cbiAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgZW1pdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnJlY2VpdmVCdWZmZXIucHVzaChhcmdzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBQcm9kdWNlcyBhbiBhY2sgY2FsbGJhY2sgdG8gZW1pdCB3aXRoIGFuIGV2ZW50LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuYWNrID0gZnVuY3Rpb24gKGlkKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHNlbnQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAvLyBwcmV2ZW50IGRvdWJsZSBjYWxsYmFja3NcbiAgICBpZiAoc2VudCkgcmV0dXJuO1xuICAgIHNlbnQgPSB0cnVlO1xuICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMpO1xuICAgIGRlYnVnKCdzZW5kaW5nIGFjayAlaicsIGFyZ3MpO1xuXG4gICAgc2VsZi5wYWNrZXQoe1xuICAgICAgdHlwZTogaGFzQmluKGFyZ3MpID8gcGFyc2VyLkJJTkFSWV9BQ0sgOiBwYXJzZXIuQUNLLFxuICAgICAgaWQ6IGlkLFxuICAgICAgZGF0YTogYXJnc1xuICAgIH0pO1xuICB9O1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBhIHNlcnZlciBhY2tub3dsZWdlbWVudC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcGFja2V0XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uYWNrID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICB2YXIgYWNrID0gdGhpcy5hY2tzW3BhY2tldC5pZF07XG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgYWNrKSB7XG4gICAgZGVidWcoJ2NhbGxpbmcgYWNrICVzIHdpdGggJWonLCBwYWNrZXQuaWQsIHBhY2tldC5kYXRhKTtcbiAgICBhY2suYXBwbHkodGhpcywgcGFja2V0LmRhdGEpO1xuICAgIGRlbGV0ZSB0aGlzLmFja3NbcGFja2V0LmlkXTtcbiAgfSBlbHNlIHtcbiAgICBkZWJ1ZygnYmFkIGFjayAlcycsIHBhY2tldC5pZCk7XG4gIH1cbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gc2VydmVyIGNvbm5lY3QuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbmNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuY29ubmVjdGVkID0gdHJ1ZTtcbiAgdGhpcy5kaXNjb25uZWN0ZWQgPSBmYWxzZTtcbiAgdGhpcy5lbWl0KCdjb25uZWN0Jyk7XG4gIHRoaXMuZW1pdEJ1ZmZlcmVkKCk7XG59O1xuXG4vKipcbiAqIEVtaXQgYnVmZmVyZWQgZXZlbnRzIChyZWNlaXZlZCBhbmQgZW1pdHRlZCkuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5lbWl0QnVmZmVyZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpO1xuICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5yZWNlaXZlQnVmZmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgZW1pdC5hcHBseSh0aGlzLCB0aGlzLnJlY2VpdmVCdWZmZXJbaV0pO1xuICB9XG4gIHRoaXMucmVjZWl2ZUJ1ZmZlciA9IFtdO1xuXG4gIGZvciAoaSA9IDA7IGkgPCB0aGlzLnNlbmRCdWZmZXIubGVuZ3RoOyBpKyspIHtcbiAgICB0aGlzLnBhY2tldCh0aGlzLnNlbmRCdWZmZXJbaV0pO1xuICB9XG4gIHRoaXMuc2VuZEJ1ZmZlciA9IFtdO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBzZXJ2ZXIgZGlzY29ubmVjdC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ3NlcnZlciBkaXNjb25uZWN0ICglcyknLCB0aGlzLm5zcCk7XG4gIHRoaXMuZGVzdHJveSgpO1xuICB0aGlzLm9uY2xvc2UoJ2lvIHNlcnZlciBkaXNjb25uZWN0Jyk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGZvcmNlZCBjbGllbnQvc2VydmVyIHNpZGUgZGlzY29ubmVjdGlvbnMsXG4gKiB0aGlzIG1ldGhvZCBlbnN1cmVzIHRoZSBtYW5hZ2VyIHN0b3BzIHRyYWNraW5nIHVzIGFuZFxuICogdGhhdCByZWNvbm5lY3Rpb25zIGRvbid0IGdldCB0cmlnZ2VyZWQgZm9yIHRoaXMuXG4gKlxuICogQGFwaSBwcml2YXRlLlxuICovXG5cblNvY2tldC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuc3Vicykge1xuICAgIC8vIGNsZWFuIHN1YnNjcmlwdGlvbnMgdG8gYXZvaWQgcmVjb25uZWN0aW9uc1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zdWJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnN1YnNbaV0uZGVzdHJveSgpO1xuICAgIH1cbiAgICB0aGlzLnN1YnMgPSBudWxsO1xuICB9XG5cbiAgdGhpcy5pby5kZXN0cm95KHRoaXMpO1xufTtcblxuLyoqXG4gKiBEaXNjb25uZWN0cyB0aGUgc29ja2V0IG1hbnVhbGx5LlxuICpcbiAqIEByZXR1cm4ge1NvY2tldH0gc2VsZlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmNsb3NlID1cblNvY2tldC5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgZGVidWcoJ3BlcmZvcm1pbmcgZGlzY29ubmVjdCAoJXMpJywgdGhpcy5uc3ApO1xuICAgIHRoaXMucGFja2V0KHsgdHlwZTogcGFyc2VyLkRJU0NPTk5FQ1QgfSk7XG4gIH1cblxuICAvLyByZW1vdmUgc29ja2V0IGZyb20gcG9vbFxuICB0aGlzLmRlc3Ryb3koKTtcblxuICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAvLyBmaXJlIGV2ZW50c1xuICAgIHRoaXMub25jbG9zZSgnaW8gY2xpZW50IGRpc2Nvbm5lY3QnKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgY29tcHJlc3MgZmxhZy5cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGlmIGB0cnVlYCwgY29tcHJlc3NlcyB0aGUgc2VuZGluZyBkYXRhXG4gKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGZcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5jb21wcmVzcyA9IGZ1bmN0aW9uIChjb21wcmVzcykge1xuICB0aGlzLmZsYWdzLmNvbXByZXNzID0gY29tcHJlc3M7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBiaW5hcnkgZmxhZ1xuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gd2hldGhlciB0aGUgZW1pdHRlZCBkYXRhIGNvbnRhaW5zIGJpbmFyeVxuICogQHJldHVybiB7U29ja2V0fSBzZWxmXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblNvY2tldC5wcm90b3R5cGUuYmluYXJ5ID0gZnVuY3Rpb24gKGJpbmFyeSkge1xuICB0aGlzLmZsYWdzLmJpbmFyeSA9IGJpbmFyeTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuIiwiXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gb247XG5cbi8qKlxuICogSGVscGVyIGZvciBzdWJzY3JpcHRpb25zLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEV2ZW50RW1pdHRlcn0gb2JqIHdpdGggYEVtaXR0ZXJgIG1peGluIG9yIGBFdmVudEVtaXR0ZXJgXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgbmFtZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gb24gKG9iaiwgZXYsIGZuKSB7XG4gIG9iai5vbihldiwgZm4pO1xuICByZXR1cm4ge1xuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAgIG9iai5yZW1vdmVMaXN0ZW5lcihldiwgZm4pO1xuICAgIH1cbiAgfTtcbn1cbiIsIi8qKlxuICogU2xpY2UgcmVmZXJlbmNlLlxuICovXG5cbnZhciBzbGljZSA9IFtdLnNsaWNlO1xuXG4vKipcbiAqIEJpbmQgYG9iamAgdG8gYGZuYC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufFN0cmluZ30gZm4gb3Igc3RyaW5nXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmosIGZuKXtcbiAgaWYgKCdzdHJpbmcnID09IHR5cGVvZiBmbikgZm4gPSBvYmpbZm5dO1xuICBpZiAoJ2Z1bmN0aW9uJyAhPSB0eXBlb2YgZm4pIHRocm93IG5ldyBFcnJvcignYmluZCgpIHJlcXVpcmVzIGEgZnVuY3Rpb24nKTtcbiAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XG4gIHJldHVybiBmdW5jdGlvbigpe1xuICAgIHJldHVybiBmbi5hcHBseShvYmosIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICB9XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgVHlwZWRBcnJheVV0aWxzXzEgPSByZXF1aXJlKFwiLi9jb21tb24vVHlwZWRBcnJheVV0aWxzXCIpO1xuZXhwb3J0cy53Y3dpZHRoID0gKGZ1bmN0aW9uIChvcHRzKSB7XG4gICAgdmFyIENPTUJJTklOR19CTVAgPSBbXG4gICAgICAgIFsweDAzMDAsIDB4MDM2Rl0sIFsweDA0ODMsIDB4MDQ4Nl0sIFsweDA0ODgsIDB4MDQ4OV0sXG4gICAgICAgIFsweDA1OTEsIDB4MDVCRF0sIFsweDA1QkYsIDB4MDVCRl0sIFsweDA1QzEsIDB4MDVDMl0sXG4gICAgICAgIFsweDA1QzQsIDB4MDVDNV0sIFsweDA1QzcsIDB4MDVDN10sIFsweDA2MDAsIDB4MDYwM10sXG4gICAgICAgIFsweDA2MTAsIDB4MDYxNV0sIFsweDA2NEIsIDB4MDY1RV0sIFsweDA2NzAsIDB4MDY3MF0sXG4gICAgICAgIFsweDA2RDYsIDB4MDZFNF0sIFsweDA2RTcsIDB4MDZFOF0sIFsweDA2RUEsIDB4MDZFRF0sXG4gICAgICAgIFsweDA3MEYsIDB4MDcwRl0sIFsweDA3MTEsIDB4MDcxMV0sIFsweDA3MzAsIDB4MDc0QV0sXG4gICAgICAgIFsweDA3QTYsIDB4MDdCMF0sIFsweDA3RUIsIDB4MDdGM10sIFsweDA5MDEsIDB4MDkwMl0sXG4gICAgICAgIFsweDA5M0MsIDB4MDkzQ10sIFsweDA5NDEsIDB4MDk0OF0sIFsweDA5NEQsIDB4MDk0RF0sXG4gICAgICAgIFsweDA5NTEsIDB4MDk1NF0sIFsweDA5NjIsIDB4MDk2M10sIFsweDA5ODEsIDB4MDk4MV0sXG4gICAgICAgIFsweDA5QkMsIDB4MDlCQ10sIFsweDA5QzEsIDB4MDlDNF0sIFsweDA5Q0QsIDB4MDlDRF0sXG4gICAgICAgIFsweDA5RTIsIDB4MDlFM10sIFsweDBBMDEsIDB4MEEwMl0sIFsweDBBM0MsIDB4MEEzQ10sXG4gICAgICAgIFsweDBBNDEsIDB4MEE0Ml0sIFsweDBBNDcsIDB4MEE0OF0sIFsweDBBNEIsIDB4MEE0RF0sXG4gICAgICAgIFsweDBBNzAsIDB4MEE3MV0sIFsweDBBODEsIDB4MEE4Ml0sIFsweDBBQkMsIDB4MEFCQ10sXG4gICAgICAgIFsweDBBQzEsIDB4MEFDNV0sIFsweDBBQzcsIDB4MEFDOF0sIFsweDBBQ0QsIDB4MEFDRF0sXG4gICAgICAgIFsweDBBRTIsIDB4MEFFM10sIFsweDBCMDEsIDB4MEIwMV0sIFsweDBCM0MsIDB4MEIzQ10sXG4gICAgICAgIFsweDBCM0YsIDB4MEIzRl0sIFsweDBCNDEsIDB4MEI0M10sIFsweDBCNEQsIDB4MEI0RF0sXG4gICAgICAgIFsweDBCNTYsIDB4MEI1Nl0sIFsweDBCODIsIDB4MEI4Ml0sIFsweDBCQzAsIDB4MEJDMF0sXG4gICAgICAgIFsweDBCQ0QsIDB4MEJDRF0sIFsweDBDM0UsIDB4MEM0MF0sIFsweDBDNDYsIDB4MEM0OF0sXG4gICAgICAgIFsweDBDNEEsIDB4MEM0RF0sIFsweDBDNTUsIDB4MEM1Nl0sIFsweDBDQkMsIDB4MENCQ10sXG4gICAgICAgIFsweDBDQkYsIDB4MENCRl0sIFsweDBDQzYsIDB4MENDNl0sIFsweDBDQ0MsIDB4MENDRF0sXG4gICAgICAgIFsweDBDRTIsIDB4MENFM10sIFsweDBENDEsIDB4MEQ0M10sIFsweDBENEQsIDB4MEQ0RF0sXG4gICAgICAgIFsweDBEQ0EsIDB4MERDQV0sIFsweDBERDIsIDB4MERENF0sIFsweDBERDYsIDB4MERENl0sXG4gICAgICAgIFsweDBFMzEsIDB4MEUzMV0sIFsweDBFMzQsIDB4MEUzQV0sIFsweDBFNDcsIDB4MEU0RV0sXG4gICAgICAgIFsweDBFQjEsIDB4MEVCMV0sIFsweDBFQjQsIDB4MEVCOV0sIFsweDBFQkIsIDB4MEVCQ10sXG4gICAgICAgIFsweDBFQzgsIDB4MEVDRF0sIFsweDBGMTgsIDB4MEYxOV0sIFsweDBGMzUsIDB4MEYzNV0sXG4gICAgICAgIFsweDBGMzcsIDB4MEYzN10sIFsweDBGMzksIDB4MEYzOV0sIFsweDBGNzEsIDB4MEY3RV0sXG4gICAgICAgIFsweDBGODAsIDB4MEY4NF0sIFsweDBGODYsIDB4MEY4N10sIFsweDBGOTAsIDB4MEY5N10sXG4gICAgICAgIFsweDBGOTksIDB4MEZCQ10sIFsweDBGQzYsIDB4MEZDNl0sIFsweDEwMkQsIDB4MTAzMF0sXG4gICAgICAgIFsweDEwMzIsIDB4MTAzMl0sIFsweDEwMzYsIDB4MTAzN10sIFsweDEwMzksIDB4MTAzOV0sXG4gICAgICAgIFsweDEwNTgsIDB4MTA1OV0sIFsweDExNjAsIDB4MTFGRl0sIFsweDEzNUYsIDB4MTM1Rl0sXG4gICAgICAgIFsweDE3MTIsIDB4MTcxNF0sIFsweDE3MzIsIDB4MTczNF0sIFsweDE3NTIsIDB4MTc1M10sXG4gICAgICAgIFsweDE3NzIsIDB4MTc3M10sIFsweDE3QjQsIDB4MTdCNV0sIFsweDE3QjcsIDB4MTdCRF0sXG4gICAgICAgIFsweDE3QzYsIDB4MTdDNl0sIFsweDE3QzksIDB4MTdEM10sIFsweDE3REQsIDB4MTdERF0sXG4gICAgICAgIFsweDE4MEIsIDB4MTgwRF0sIFsweDE4QTksIDB4MThBOV0sIFsweDE5MjAsIDB4MTkyMl0sXG4gICAgICAgIFsweDE5MjcsIDB4MTkyOF0sIFsweDE5MzIsIDB4MTkzMl0sIFsweDE5MzksIDB4MTkzQl0sXG4gICAgICAgIFsweDFBMTcsIDB4MUExOF0sIFsweDFCMDAsIDB4MUIwM10sIFsweDFCMzQsIDB4MUIzNF0sXG4gICAgICAgIFsweDFCMzYsIDB4MUIzQV0sIFsweDFCM0MsIDB4MUIzQ10sIFsweDFCNDIsIDB4MUI0Ml0sXG4gICAgICAgIFsweDFCNkIsIDB4MUI3M10sIFsweDFEQzAsIDB4MURDQV0sIFsweDFERkUsIDB4MURGRl0sXG4gICAgICAgIFsweDIwMEIsIDB4MjAwRl0sIFsweDIwMkEsIDB4MjAyRV0sIFsweDIwNjAsIDB4MjA2M10sXG4gICAgICAgIFsweDIwNkEsIDB4MjA2Rl0sIFsweDIwRDAsIDB4MjBFRl0sIFsweDMwMkEsIDB4MzAyRl0sXG4gICAgICAgIFsweDMwOTksIDB4MzA5QV0sIFsweEE4MDYsIDB4QTgwNl0sIFsweEE4MEIsIDB4QTgwQl0sXG4gICAgICAgIFsweEE4MjUsIDB4QTgyNl0sIFsweEZCMUUsIDB4RkIxRV0sIFsweEZFMDAsIDB4RkUwRl0sXG4gICAgICAgIFsweEZFMjAsIDB4RkUyM10sIFsweEZFRkYsIDB4RkVGRl0sIFsweEZGRjksIDB4RkZGQl1cbiAgICBdO1xuICAgIHZhciBDT01CSU5JTkdfSElHSCA9IFtcbiAgICAgICAgWzB4MTBBMDEsIDB4MTBBMDNdLCBbMHgxMEEwNSwgMHgxMEEwNl0sIFsweDEwQTBDLCAweDEwQTBGXSxcbiAgICAgICAgWzB4MTBBMzgsIDB4MTBBM0FdLCBbMHgxMEEzRiwgMHgxMEEzRl0sIFsweDFEMTY3LCAweDFEMTY5XSxcbiAgICAgICAgWzB4MUQxNzMsIDB4MUQxODJdLCBbMHgxRDE4NSwgMHgxRDE4Ql0sIFsweDFEMUFBLCAweDFEMUFEXSxcbiAgICAgICAgWzB4MUQyNDIsIDB4MUQyNDRdLCBbMHhFMDAwMSwgMHhFMDAwMV0sIFsweEUwMDIwLCAweEUwMDdGXSxcbiAgICAgICAgWzB4RTAxMDAsIDB4RTAxRUZdXG4gICAgXTtcbiAgICBmdW5jdGlvbiBiaXNlYXJjaCh1Y3MsIGRhdGEpIHtcbiAgICAgICAgdmFyIG1pbiA9IDA7XG4gICAgICAgIHZhciBtYXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gICAgICAgIHZhciBtaWQ7XG4gICAgICAgIGlmICh1Y3MgPCBkYXRhWzBdWzBdIHx8IHVjcyA+IGRhdGFbbWF4XVsxXSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChtYXggPj0gbWluKSB7XG4gICAgICAgICAgICBtaWQgPSAobWluICsgbWF4KSA+PiAxO1xuICAgICAgICAgICAgaWYgKHVjcyA+IGRhdGFbbWlkXVsxXSkge1xuICAgICAgICAgICAgICAgIG1pbiA9IG1pZCArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh1Y3MgPCBkYXRhW21pZF1bMF0pIHtcbiAgICAgICAgICAgICAgICBtYXggPSBtaWQgLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmdW5jdGlvbiB3Y3dpZHRoSGlnaCh1Y3MpIHtcbiAgICAgICAgaWYgKGJpc2VhcmNoKHVjcywgQ09NQklOSU5HX0hJR0gpKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKHVjcyA+PSAweDIwMDAwICYmIHVjcyA8PSAweDJmZmZkKSB8fCAodWNzID49IDB4MzAwMDAgJiYgdWNzIDw9IDB4M2ZmZmQpKSB7XG4gICAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgdmFyIGNvbnRyb2wgPSBvcHRzLmNvbnRyb2wgfCAwO1xuICAgIHZhciB0YWJsZSA9IG5ldyBVaW50OEFycmF5KDY1NTM2KTtcbiAgICBUeXBlZEFycmF5VXRpbHNfMS5maWxsKHRhYmxlLCAxKTtcbiAgICB0YWJsZVswXSA9IG9wdHMubnVsO1xuICAgIFR5cGVkQXJyYXlVdGlsc18xLmZpbGwodGFibGUsIG9wdHMuY29udHJvbCwgMSwgMzIpO1xuICAgIFR5cGVkQXJyYXlVdGlsc18xLmZpbGwodGFibGUsIG9wdHMuY29udHJvbCwgMHg3ZiwgMHhhMCk7XG4gICAgVHlwZWRBcnJheVV0aWxzXzEuZmlsbCh0YWJsZSwgMiwgMHgxMTAwLCAweDExNjApO1xuICAgIHRhYmxlWzB4MjMyOV0gPSAyO1xuICAgIHRhYmxlWzB4MjMyYV0gPSAyO1xuICAgIFR5cGVkQXJyYXlVdGlsc18xLmZpbGwodGFibGUsIDIsIDB4MmU4MCwgMHhhNGQwKTtcbiAgICB0YWJsZVsweDMwM2ZdID0gMTtcbiAgICBUeXBlZEFycmF5VXRpbHNfMS5maWxsKHRhYmxlLCAyLCAweGFjMDAsIDB4ZDdhNCk7XG4gICAgVHlwZWRBcnJheVV0aWxzXzEuZmlsbCh0YWJsZSwgMiwgMHhmOTAwLCAweGZiMDApO1xuICAgIFR5cGVkQXJyYXlVdGlsc18xLmZpbGwodGFibGUsIDIsIDB4ZmUxMCwgMHhmZTFhKTtcbiAgICBUeXBlZEFycmF5VXRpbHNfMS5maWxsKHRhYmxlLCAyLCAweGZlMzAsIDB4ZmU3MCk7XG4gICAgVHlwZWRBcnJheVV0aWxzXzEuZmlsbCh0YWJsZSwgMiwgMHhmZjAwLCAweGZmNjEpO1xuICAgIFR5cGVkQXJyYXlVdGlsc18xLmZpbGwodGFibGUsIDIsIDB4ZmZlMCwgMHhmZmU3KTtcbiAgICBmb3IgKHZhciByID0gMDsgciA8IENPTUJJTklOR19CTVAubGVuZ3RoOyArK3IpIHtcbiAgICAgICAgVHlwZWRBcnJheVV0aWxzXzEuZmlsbCh0YWJsZSwgMCwgQ09NQklOSU5HX0JNUFtyXVswXSwgQ09NQklOSU5HX0JNUFtyXVsxXSArIDEpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKG51bSkge1xuICAgICAgICBpZiAobnVtIDwgMzIpIHtcbiAgICAgICAgICAgIHJldHVybiBjb250cm9sIHwgMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobnVtIDwgMTI3KSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobnVtIDwgNjU1MzYpIHtcbiAgICAgICAgICAgIHJldHVybiB0YWJsZVtudW1dO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3Y3dpZHRoSGlnaChudW0pO1xuICAgIH07XG59KSh7IG51bDogMCwgY29udHJvbDogMCB9KTtcbmZ1bmN0aW9uIGdldFN0cmluZ0NlbGxXaWR0aChzKSB7XG4gICAgdmFyIHJlc3VsdCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IHMubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGNvZGUgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGlmICgweEQ4MDAgPD0gY29kZSAmJiBjb2RlIDw9IDB4REJGRikge1xuICAgICAgICAgICAgaWYgKCsraSA+PSBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgZXhwb3J0cy53Y3dpZHRoKGNvZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHNlY29uZCA9IHMuY2hhckNvZGVBdChpKTtcbiAgICAgICAgICAgIGlmICgweERDMDAgPD0gc2Vjb25kICYmIHNlY29uZCA8PSAweERGRkYpIHtcbiAgICAgICAgICAgICAgICBjb2RlID0gKGNvZGUgLSAweEQ4MDApICogMHg0MDAgKyBzZWNvbmQgLSAweERDMDAgKyAweDEwMDAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IGV4cG9ydHMud2N3aWR0aChzZWNvbmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCArPSBleHBvcnRzLndjd2lkdGgoY29kZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLmdldFN0cmluZ0NlbGxXaWR0aCA9IGdldFN0cmluZ0NlbGxXaWR0aDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNoYXJXaWR0aC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBDaGFyQXRsYXNVdGlsc18xID0gcmVxdWlyZShcIi4vQ2hhckF0bGFzVXRpbHNcIik7XG52YXIgRHluYW1pY0NoYXJBdGxhc18xID0gcmVxdWlyZShcIi4vRHluYW1pY0NoYXJBdGxhc1wiKTtcbnZhciBOb25lQ2hhckF0bGFzXzEgPSByZXF1aXJlKFwiLi9Ob25lQ2hhckF0bGFzXCIpO1xudmFyIFN0YXRpY0NoYXJBdGxhc18xID0gcmVxdWlyZShcIi4vU3RhdGljQ2hhckF0bGFzXCIpO1xudmFyIGNoYXJBdGxhc0ltcGxlbWVudGF0aW9ucyA9IHtcbiAgICAnbm9uZSc6IE5vbmVDaGFyQXRsYXNfMS5kZWZhdWx0LFxuICAgICdzdGF0aWMnOiBTdGF0aWNDaGFyQXRsYXNfMS5kZWZhdWx0LFxuICAgICdkeW5hbWljJzogRHluYW1pY0NoYXJBdGxhc18xLmRlZmF1bHRcbn07XG52YXIgY2hhckF0bGFzQ2FjaGUgPSBbXTtcbmZ1bmN0aW9uIGFjcXVpcmVDaGFyQXRsYXModGVybWluYWwsIGNvbG9ycywgc2NhbGVkQ2hhcldpZHRoLCBzY2FsZWRDaGFySGVpZ2h0KSB7XG4gICAgdmFyIG5ld0NvbmZpZyA9IENoYXJBdGxhc1V0aWxzXzEuZ2VuZXJhdGVDb25maWcoc2NhbGVkQ2hhcldpZHRoLCBzY2FsZWRDaGFySGVpZ2h0LCB0ZXJtaW5hbCwgY29sb3JzKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoYXJBdGxhc0NhY2hlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGNoYXJBdGxhc0NhY2hlW2ldO1xuICAgICAgICB2YXIgb3duZWRCeUluZGV4ID0gZW50cnkub3duZWRCeS5pbmRleE9mKHRlcm1pbmFsKTtcbiAgICAgICAgaWYgKG93bmVkQnlJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICBpZiAoQ2hhckF0bGFzVXRpbHNfMS5jb25maWdFcXVhbHMoZW50cnkuY29uZmlnLCBuZXdDb25maWcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVudHJ5LmF0bGFzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVudHJ5Lm93bmVkQnkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgY2hhckF0bGFzQ2FjaGUuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZW50cnkub3duZWRCeS5zcGxpY2Uob3duZWRCeUluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hhckF0bGFzQ2FjaGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gY2hhckF0bGFzQ2FjaGVbaV07XG4gICAgICAgIGlmIChDaGFyQXRsYXNVdGlsc18xLmNvbmZpZ0VxdWFscyhlbnRyeS5jb25maWcsIG5ld0NvbmZpZykpIHtcbiAgICAgICAgICAgIGVudHJ5Lm93bmVkQnkucHVzaCh0ZXJtaW5hbCk7XG4gICAgICAgICAgICByZXR1cm4gZW50cnkuYXRsYXM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIG5ld0VudHJ5ID0ge1xuICAgICAgICBhdGxhczogbmV3IGNoYXJBdGxhc0ltcGxlbWVudGF0aW9uc1t0ZXJtaW5hbC5vcHRpb25zLmV4cGVyaW1lbnRhbENoYXJBdGxhc10oZG9jdW1lbnQsIG5ld0NvbmZpZyksXG4gICAgICAgIGNvbmZpZzogbmV3Q29uZmlnLFxuICAgICAgICBvd25lZEJ5OiBbdGVybWluYWxdXG4gICAgfTtcbiAgICBjaGFyQXRsYXNDYWNoZS5wdXNoKG5ld0VudHJ5KTtcbiAgICByZXR1cm4gbmV3RW50cnkuYXRsYXM7XG59XG5leHBvcnRzLmFjcXVpcmVDaGFyQXRsYXMgPSBhY3F1aXJlQ2hhckF0bGFzO1xuZnVuY3Rpb24gcmVtb3ZlVGVybWluYWxGcm9tQ2FjaGUodGVybWluYWwpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoYXJBdGxhc0NhY2hlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGNoYXJBdGxhc0NhY2hlW2ldLm93bmVkQnkuaW5kZXhPZih0ZXJtaW5hbCk7XG4gICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIGlmIChjaGFyQXRsYXNDYWNoZVtpXS5vd25lZEJ5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGNoYXJBdGxhc0NhY2hlLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNoYXJBdGxhc0NhY2hlW2ldLm93bmVkQnkuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5yZW1vdmVUZXJtaW5hbEZyb21DYWNoZSA9IHJlbW92ZVRlcm1pbmFsRnJvbUNhY2hlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2hhckF0bGFzQ2FjaGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgUGxhdGZvcm1fMSA9IHJlcXVpcmUoXCIuLi8uLi9jb3JlL1BsYXRmb3JtXCIpO1xudmFyIFR5cGVzXzEgPSByZXF1aXJlKFwiLi9UeXBlc1wiKTtcbmZ1bmN0aW9uIGdlbmVyYXRlU3RhdGljQ2hhckF0bGFzVGV4dHVyZShjb250ZXh0LCBjYW52YXNGYWN0b3J5LCBjb25maWcpIHtcbiAgICB2YXIgY2VsbFdpZHRoID0gY29uZmlnLnNjYWxlZENoYXJXaWR0aCArIFR5cGVzXzEuQ0hBUl9BVExBU19DRUxMX1NQQUNJTkc7XG4gICAgdmFyIGNlbGxIZWlnaHQgPSBjb25maWcuc2NhbGVkQ2hhckhlaWdodCArIFR5cGVzXzEuQ0hBUl9BVExBU19DRUxMX1NQQUNJTkc7XG4gICAgdmFyIGNhbnZhcyA9IGNhbnZhc0ZhY3RvcnkoMjU1ICogY2VsbFdpZHRoLCAoMiArIDE2ICsgMTYpICogY2VsbEhlaWdodCk7XG4gICAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcsIHsgYWxwaGE6IGNvbmZpZy5hbGxvd1RyYW5zcGFyZW5jeSB9KTtcbiAgICBjdHguZmlsbFN0eWxlID0gY29uZmlnLmNvbG9ycy5iYWNrZ3JvdW5kLmNzcztcbiAgICBjdHguZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5maWxsU3R5bGUgPSBjb25maWcuY29sb3JzLmZvcmVncm91bmQuY3NzO1xuICAgIGN0eC5mb250ID0gZ2V0Rm9udChjb25maWcuZm9udFdlaWdodCwgY29uZmlnKTtcbiAgICBjdHgudGV4dEJhc2VsaW5lID0gJ3RvcCc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7IGkrKykge1xuICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5yZWN0KGkgKiBjZWxsV2lkdGgsIDAsIGNlbGxXaWR0aCwgY2VsbEhlaWdodCk7XG4gICAgICAgIGN0eC5jbGlwKCk7XG4gICAgICAgIGN0eC5maWxsVGV4dChTdHJpbmcuZnJvbUNoYXJDb2RlKGkpLCBpICogY2VsbFdpZHRoLCAwKTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHguZm9udCA9IGdldEZvbnQoY29uZmlnLmZvbnRXZWlnaHRCb2xkLCBjb25maWcpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyBpKyspIHtcbiAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHgucmVjdChpICogY2VsbFdpZHRoLCBjZWxsSGVpZ2h0LCBjZWxsV2lkdGgsIGNlbGxIZWlnaHQpO1xuICAgICAgICBjdHguY2xpcCgpO1xuICAgICAgICBjdHguZmlsbFRleHQoU3RyaW5nLmZyb21DaGFyQ29kZShpKSwgaSAqIGNlbGxXaWR0aCwgY2VsbEhlaWdodCk7XG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxuICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgY3R4LmZvbnQgPSBnZXRGb250KGNvbmZpZy5mb250V2VpZ2h0LCBjb25maWcpO1xuICAgIGZvciAodmFyIGNvbG9ySW5kZXggPSAwOyBjb2xvckluZGV4IDwgMTY7IGNvbG9ySW5kZXgrKykge1xuICAgICAgICB2YXIgeSA9IChjb2xvckluZGV4ICsgMikgKiBjZWxsSGVpZ2h0O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgaSsrKSB7XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgY3R4LnJlY3QoaSAqIGNlbGxXaWR0aCwgeSwgY2VsbFdpZHRoLCBjZWxsSGVpZ2h0KTtcbiAgICAgICAgICAgIGN0eC5jbGlwKCk7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gY29uZmlnLmNvbG9ycy5hbnNpW2NvbG9ySW5kZXhdLmNzcztcbiAgICAgICAgICAgIGN0eC5maWxsVGV4dChTdHJpbmcuZnJvbUNoYXJDb2RlKGkpLCBpICogY2VsbFdpZHRoLCB5KTtcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY3R4LmZvbnQgPSBnZXRGb250KGNvbmZpZy5mb250V2VpZ2h0Qm9sZCwgY29uZmlnKTtcbiAgICBmb3IgKHZhciBjb2xvckluZGV4ID0gMDsgY29sb3JJbmRleCA8IDE2OyBjb2xvckluZGV4KyspIHtcbiAgICAgICAgdmFyIHkgPSAoY29sb3JJbmRleCArIDIgKyAxNikgKiBjZWxsSGVpZ2h0O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgaSsrKSB7XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgY3R4LnJlY3QoaSAqIGNlbGxXaWR0aCwgeSwgY2VsbFdpZHRoLCBjZWxsSGVpZ2h0KTtcbiAgICAgICAgICAgIGN0eC5jbGlwKCk7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gY29uZmlnLmNvbG9ycy5hbnNpW2NvbG9ySW5kZXhdLmNzcztcbiAgICAgICAgICAgIGN0eC5maWxsVGV4dChTdHJpbmcuZnJvbUNoYXJDb2RlKGkpLCBpICogY2VsbFdpZHRoLCB5KTtcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgICBpZiAoISgnY3JlYXRlSW1hZ2VCaXRtYXAnIGluIGNvbnRleHQpIHx8IFBsYXRmb3JtXzEuaXNGaXJlZm94IHx8IFBsYXRmb3JtXzEuaXNTYWZhcmkpIHtcbiAgICAgICAgcmV0dXJuIGNhbnZhcztcbiAgICB9XG4gICAgdmFyIGNoYXJBdGxhc0ltYWdlRGF0YSA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICBjbGVhckNvbG9yKGNoYXJBdGxhc0ltYWdlRGF0YSwgY29uZmlnLmNvbG9ycy5iYWNrZ3JvdW5kKTtcbiAgICByZXR1cm4gY29udGV4dC5jcmVhdGVJbWFnZUJpdG1hcChjaGFyQXRsYXNJbWFnZURhdGEpO1xufVxuZXhwb3J0cy5nZW5lcmF0ZVN0YXRpY0NoYXJBdGxhc1RleHR1cmUgPSBnZW5lcmF0ZVN0YXRpY0NoYXJBdGxhc1RleHR1cmU7XG5mdW5jdGlvbiBjbGVhckNvbG9yKGltYWdlRGF0YSwgY29sb3IpIHtcbiAgICB2YXIgaXNFbXB0eSA9IHRydWU7XG4gICAgdmFyIHIgPSBjb2xvci5yZ2JhID4+PiAyNDtcbiAgICB2YXIgZyA9IGNvbG9yLnJnYmEgPj4+IDE2ICYgMHhGRjtcbiAgICB2YXIgYiA9IGNvbG9yLnJnYmEgPj4+IDggJiAweEZGO1xuICAgIGZvciAodmFyIG9mZnNldCA9IDA7IG9mZnNldCA8IGltYWdlRGF0YS5kYXRhLmxlbmd0aDsgb2Zmc2V0ICs9IDQpIHtcbiAgICAgICAgaWYgKGltYWdlRGF0YS5kYXRhW29mZnNldF0gPT09IHIgJiZcbiAgICAgICAgICAgIGltYWdlRGF0YS5kYXRhW29mZnNldCArIDFdID09PSBnICYmXG4gICAgICAgICAgICBpbWFnZURhdGEuZGF0YVtvZmZzZXQgKyAyXSA9PT0gYikge1xuICAgICAgICAgICAgaW1hZ2VEYXRhLmRhdGFbb2Zmc2V0ICsgM10gPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaXNFbXB0eSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpc0VtcHR5O1xufVxuZXhwb3J0cy5jbGVhckNvbG9yID0gY2xlYXJDb2xvcjtcbmZ1bmN0aW9uIGdldEZvbnQoZm9udFdlaWdodCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIGZvbnRXZWlnaHQgKyBcIiBcIiArIGNvbmZpZy5mb250U2l6ZSAqIGNvbmZpZy5kZXZpY2VQaXhlbFJhdGlvICsgXCJweCBcIiArIGNvbmZpZy5mb250RmFtaWx5O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2hhckF0bGFzR2VuZXJhdG9yLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBMaWZlY3ljbGVfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vTGlmZWN5Y2xlXCIpO1xudmFyIFNjcmVlbkRwck1vbml0b3IgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTY3JlZW5EcHJNb25pdG9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNjcmVlbkRwck1vbml0b3IoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgU2NyZWVuRHByTW9uaXRvci5wcm90b3R5cGUuc2V0TGlzdGVuZXIgPSBmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuX2xpc3RlbmVyKSB7XG4gICAgICAgICAgICB0aGlzLmNsZWFyTGlzdGVuZXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9saXN0ZW5lciA9IGxpc3RlbmVyO1xuICAgICAgICB0aGlzLl9vdXRlckxpc3RlbmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuX2xpc3RlbmVyKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvLCBfdGhpcy5fY3VycmVudERldmljZVBpeGVsUmF0aW8pO1xuICAgICAgICAgICAgX3RoaXMuX3VwZGF0ZURwcigpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl91cGRhdGVEcHIoKTtcbiAgICB9O1xuICAgIFNjcmVlbkRwck1vbml0b3IucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLmNsZWFyTGlzdGVuZXIoKTtcbiAgICB9O1xuICAgIFNjcmVlbkRwck1vbml0b3IucHJvdG90eXBlLl91cGRhdGVEcHIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9yZXNvbHV0aW9uTWVkaWFNYXRjaExpc3QpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdXRpb25NZWRpYU1hdGNoTGlzdC5yZW1vdmVMaXN0ZW5lcih0aGlzLl9vdXRlckxpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgICAgICB0aGlzLl9yZXNvbHV0aW9uTWVkaWFNYXRjaExpc3QgPSB3aW5kb3cubWF0Y2hNZWRpYShcInNjcmVlbiBhbmQgKHJlc29sdXRpb246IFwiICsgd2luZG93LmRldmljZVBpeGVsUmF0aW8gKyBcImRwcHgpXCIpO1xuICAgICAgICB0aGlzLl9yZXNvbHV0aW9uTWVkaWFNYXRjaExpc3QuYWRkTGlzdGVuZXIodGhpcy5fb3V0ZXJMaXN0ZW5lcik7XG4gICAgfTtcbiAgICBTY3JlZW5EcHJNb25pdG9yLnByb3RvdHlwZS5jbGVhckxpc3RlbmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2xpc3RlbmVyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVzb2x1dGlvbk1lZGlhTWF0Y2hMaXN0LnJlbW92ZUxpc3RlbmVyKHRoaXMuX291dGVyTGlzdGVuZXIpO1xuICAgICAgICB0aGlzLl9saXN0ZW5lciA9IG51bGw7XG4gICAgICAgIHRoaXMuX291dGVyTGlzdGVuZXIgPSBudWxsO1xuICAgIH07XG4gICAgcmV0dXJuIFNjcmVlbkRwck1vbml0b3I7XG59KExpZmVjeWNsZV8xLkRpc3Bvc2FibGUpKTtcbmV4cG9ydHMuU2NyZWVuRHByTW9uaXRvciA9IFNjcmVlbkRwck1vbml0b3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TY3JlZW5EcHJNb25pdG9yLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBMaWZlY3ljbGVfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vTGlmZWN5Y2xlXCIpO1xudmFyIExpZmVjeWNsZV8yID0gcmVxdWlyZShcIi4vTGlmZWN5Y2xlXCIpO1xudmFyIEhPVkVSX0RVUkFUSU9OID0gNTAwO1xudmFyIE1vdXNlWm9uZU1hbmFnZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNb3VzZVpvbmVNYW5hZ2VyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1vdXNlWm9uZU1hbmFnZXIoX3Rlcm1pbmFsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl90ZXJtaW5hbCA9IF90ZXJtaW5hbDtcbiAgICAgICAgX3RoaXMuX3pvbmVzID0gW107XG4gICAgICAgIF90aGlzLl9hcmVab25lc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5fdG9vbHRpcFRpbWVvdXQgPSBudWxsO1xuICAgICAgICBfdGhpcy5fY3VycmVudFpvbmUgPSBudWxsO1xuICAgICAgICBfdGhpcy5fbGFzdEhvdmVyQ29vcmRzID0gW251bGwsIG51bGxdO1xuICAgICAgICBfdGhpcy5yZWdpc3RlcihMaWZlY3ljbGVfMi5hZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIoX3RoaXMuX3Rlcm1pbmFsLmVsZW1lbnQsICdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZSkgeyByZXR1cm4gX3RoaXMuX29uTW91c2VEb3duKGUpOyB9KSk7XG4gICAgICAgIF90aGlzLl9tb3VzZU1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uIChlKSB7IHJldHVybiBfdGhpcy5fb25Nb3VzZU1vdmUoZSk7IH07XG4gICAgICAgIF90aGlzLl9jbGlja0xpc3RlbmVyID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIF90aGlzLl9vbkNsaWNrKGUpOyB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE1vdXNlWm9uZU1hbmFnZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLl9kZWFjdGl2YXRlKCk7XG4gICAgfTtcbiAgICBNb3VzZVpvbmVNYW5hZ2VyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoem9uZSkge1xuICAgICAgICB0aGlzLl96b25lcy5wdXNoKHpvbmUpO1xuICAgICAgICBpZiAodGhpcy5fem9uZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmF0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNb3VzZVpvbmVNYW5hZ2VyLnByb3RvdHlwZS5jbGVhckFsbCA9IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgICAgIGlmICh0aGlzLl96b25lcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWVuZCkge1xuICAgICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICAgICAgZW5kID0gdGhpcy5fdGVybWluYWwucm93cyAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl96b25lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHpvbmUgPSB0aGlzLl96b25lc1tpXTtcbiAgICAgICAgICAgIGlmICgoem9uZS55MSA+IHN0YXJ0ICYmIHpvbmUueTEgPD0gZW5kICsgMSkgfHxcbiAgICAgICAgICAgICAgICAoem9uZS55MiA+IHN0YXJ0ICYmIHpvbmUueTIgPD0gZW5kICsgMSkgfHxcbiAgICAgICAgICAgICAgICAoem9uZS55MSA8IHN0YXJ0ICYmIHpvbmUueTIgPiBlbmQgKyAxKSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50Wm9uZSAmJiB0aGlzLl9jdXJyZW50Wm9uZSA9PT0gem9uZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50Wm9uZS5sZWF2ZUNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRab25lID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fem9uZXMuc3BsaWNlKGktLSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3pvbmVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5fZGVhY3RpdmF0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNb3VzZVpvbmVNYW5hZ2VyLnByb3RvdHlwZS5fYWN0aXZhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5fYXJlWm9uZXNBY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuX2FyZVpvbmVzQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5fbW91c2VNb3ZlTGlzdGVuZXIpO1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX2NsaWNrTGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNb3VzZVpvbmVNYW5hZ2VyLnByb3RvdHlwZS5fZGVhY3RpdmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FyZVpvbmVzQWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLl9hcmVab25lc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLl9tb3VzZU1vdmVMaXN0ZW5lcik7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fY2xpY2tMaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1vdXNlWm9uZU1hbmFnZXIucHJvdG90eXBlLl9vbk1vdXNlTW92ZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICh0aGlzLl9sYXN0SG92ZXJDb29yZHNbMF0gIT09IGUucGFnZVggfHwgdGhpcy5fbGFzdEhvdmVyQ29vcmRzWzFdICE9PSBlLnBhZ2VZKSB7XG4gICAgICAgICAgICB0aGlzLl9vbkhvdmVyKGUpO1xuICAgICAgICAgICAgdGhpcy5fbGFzdEhvdmVyQ29vcmRzID0gW2UucGFnZVgsIGUucGFnZVldO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNb3VzZVpvbmVNYW5hZ2VyLnByb3RvdHlwZS5fb25Ib3ZlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciB6b25lID0gdGhpcy5fZmluZFpvbmVFdmVudEF0KGUpO1xuICAgICAgICBpZiAoem9uZSA9PT0gdGhpcy5fY3VycmVudFpvbmUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fY3VycmVudFpvbmUpIHtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRab25lLmxlYXZlQ2FsbGJhY2soKTtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRab25lID0gbnVsbDtcbiAgICAgICAgICAgIGlmICh0aGlzLl90b29sdGlwVGltZW91dCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90b29sdGlwVGltZW91dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF6b25lKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY3VycmVudFpvbmUgPSB6b25lO1xuICAgICAgICBpZiAoem9uZS5ob3ZlckNhbGxiYWNrKSB7XG4gICAgICAgICAgICB6b25lLmhvdmVyQ2FsbGJhY2soZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdG9vbHRpcFRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLl9vblRvb2x0aXAoZSk7IH0sIEhPVkVSX0RVUkFUSU9OKTtcbiAgICB9O1xuICAgIE1vdXNlWm9uZU1hbmFnZXIucHJvdG90eXBlLl9vblRvb2x0aXAgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICB0aGlzLl90b29sdGlwVGltZW91dCA9IG51bGw7XG4gICAgICAgIHZhciB6b25lID0gdGhpcy5fZmluZFpvbmVFdmVudEF0KGUpO1xuICAgICAgICBpZiAoem9uZSAmJiB6b25lLnRvb2x0aXBDYWxsYmFjaykge1xuICAgICAgICAgICAgem9uZS50b29sdGlwQ2FsbGJhY2soZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1vdXNlWm9uZU1hbmFnZXIucHJvdG90eXBlLl9vbk1vdXNlRG93biA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICghdGhpcy5fYXJlWm9uZXNBY3RpdmUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgem9uZSA9IHRoaXMuX2ZpbmRab25lRXZlbnRBdChlKTtcbiAgICAgICAgaWYgKHpvbmUpIHtcbiAgICAgICAgICAgIGlmICh6b25lLndpbGxMaW5rQWN0aXZhdGUoZSkpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgTW91c2Vab25lTWFuYWdlci5wcm90b3R5cGUuX29uQ2xpY2sgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgem9uZSA9IHRoaXMuX2ZpbmRab25lRXZlbnRBdChlKTtcbiAgICAgICAgaWYgKHpvbmUpIHtcbiAgICAgICAgICAgIHpvbmUuY2xpY2tDYWxsYmFjayhlKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1vdXNlWm9uZU1hbmFnZXIucHJvdG90eXBlLl9maW5kWm9uZUV2ZW50QXQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgY29vcmRzID0gdGhpcy5fdGVybWluYWwubW91c2VIZWxwZXIuZ2V0Q29vcmRzKGUsIHRoaXMuX3Rlcm1pbmFsLnNjcmVlbkVsZW1lbnQsIHRoaXMuX3Rlcm1pbmFsLmNoYXJNZWFzdXJlLCB0aGlzLl90ZXJtaW5hbC5jb2xzLCB0aGlzLl90ZXJtaW5hbC5yb3dzKTtcbiAgICAgICAgaWYgKCFjb29yZHMpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHZhciB4ID0gY29vcmRzWzBdO1xuICAgICAgICB2YXIgeSA9IGNvb3Jkc1sxXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl96b25lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHpvbmUgPSB0aGlzLl96b25lc1tpXTtcbiAgICAgICAgICAgIGlmICh6b25lLnkxID09PSB6b25lLnkyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHkgPT09IHpvbmUueTEgJiYgeCA+PSB6b25lLngxICYmIHggPCB6b25lLngyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB6b25lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICgoeSA9PT0gem9uZS55MSAmJiB4ID49IHpvbmUueDEpIHx8XG4gICAgICAgICAgICAgICAgICAgICh5ID09PSB6b25lLnkyICYmIHggPCB6b25lLngyKSB8fFxuICAgICAgICAgICAgICAgICAgICAoeSA+IHpvbmUueTEgJiYgeSA8IHpvbmUueTIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB6b25lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIHJldHVybiBNb3VzZVpvbmVNYW5hZ2VyO1xufShMaWZlY3ljbGVfMS5EaXNwb3NhYmxlKSk7XG5leHBvcnRzLk1vdXNlWm9uZU1hbmFnZXIgPSBNb3VzZVpvbmVNYW5hZ2VyO1xudmFyIE1vdXNlWm9uZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTW91c2Vab25lKHgxLCB5MSwgeDIsIHkyLCBjbGlja0NhbGxiYWNrLCBob3ZlckNhbGxiYWNrLCB0b29sdGlwQ2FsbGJhY2ssIGxlYXZlQ2FsbGJhY2ssIHdpbGxMaW5rQWN0aXZhdGUpIHtcbiAgICAgICAgdGhpcy54MSA9IHgxO1xuICAgICAgICB0aGlzLnkxID0geTE7XG4gICAgICAgIHRoaXMueDIgPSB4MjtcbiAgICAgICAgdGhpcy55MiA9IHkyO1xuICAgICAgICB0aGlzLmNsaWNrQ2FsbGJhY2sgPSBjbGlja0NhbGxiYWNrO1xuICAgICAgICB0aGlzLmhvdmVyQ2FsbGJhY2sgPSBob3ZlckNhbGxiYWNrO1xuICAgICAgICB0aGlzLnRvb2x0aXBDYWxsYmFjayA9IHRvb2x0aXBDYWxsYmFjaztcbiAgICAgICAgdGhpcy5sZWF2ZUNhbGxiYWNrID0gbGVhdmVDYWxsYmFjaztcbiAgICAgICAgdGhpcy53aWxsTGlua0FjdGl2YXRlID0gd2lsbExpbmtBY3RpdmF0ZTtcbiAgICB9XG4gICAgcmV0dXJuIE1vdXNlWm9uZTtcbn0oKSk7XG5leHBvcnRzLk1vdXNlWm9uZSA9IE1vdXNlWm9uZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1vdXNlWm9uZU1hbmFnZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgTW91c2VIZWxwZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1vdXNlSGVscGVyKF9yZW5kZXJlcikge1xuICAgICAgICB0aGlzLl9yZW5kZXJlciA9IF9yZW5kZXJlcjtcbiAgICB9XG4gICAgTW91c2VIZWxwZXIucHJvdG90eXBlLnNldFJlbmRlcmVyID0gZnVuY3Rpb24gKHJlbmRlcmVyKSB7XG4gICAgICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgfTtcbiAgICBNb3VzZUhlbHBlci5nZXRDb29yZHNSZWxhdGl2ZVRvRWxlbWVudCA9IGZ1bmN0aW9uIChldmVudCwgZWxlbWVudCkge1xuICAgICAgICBpZiAoZXZlbnQucGFnZVggPT09IG51bGwgfHwgZXZlbnQucGFnZVggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9yaWdpbmFsRWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHZhciB4ID0gZXZlbnQucGFnZVg7XG4gICAgICAgIHZhciB5ID0gZXZlbnQucGFnZVk7XG4gICAgICAgIHdoaWxlIChlbGVtZW50KSB7XG4gICAgICAgICAgICB4IC09IGVsZW1lbnQub2Zmc2V0TGVmdDtcbiAgICAgICAgICAgIHkgLT0gZWxlbWVudC5vZmZzZXRUb3A7XG4gICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5vZmZzZXRQYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxlbWVudCA9IG9yaWdpbmFsRWxlbWVudDtcbiAgICAgICAgd2hpbGUgKGVsZW1lbnQgJiYgZWxlbWVudCAhPT0gZWxlbWVudC5vd25lckRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgICAgIHggKz0gZWxlbWVudC5zY3JvbGxMZWZ0O1xuICAgICAgICAgICAgeSArPSBlbGVtZW50LnNjcm9sbFRvcDtcbiAgICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFt4LCB5XTtcbiAgICB9O1xuICAgIE1vdXNlSGVscGVyLnByb3RvdHlwZS5nZXRDb29yZHMgPSBmdW5jdGlvbiAoZXZlbnQsIGVsZW1lbnQsIGNoYXJNZWFzdXJlLCBjb2xDb3VudCwgcm93Q291bnQsIGlzU2VsZWN0aW9uKSB7XG4gICAgICAgIGlmICghY2hhck1lYXN1cmUud2lkdGggfHwgIWNoYXJNZWFzdXJlLmhlaWdodCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvb3JkcyA9IE1vdXNlSGVscGVyLmdldENvb3Jkc1JlbGF0aXZlVG9FbGVtZW50KGV2ZW50LCBlbGVtZW50KTtcbiAgICAgICAgaWYgKCFjb29yZHMpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvb3Jkc1swXSA9IE1hdGguY2VpbCgoY29vcmRzWzBdICsgKGlzU2VsZWN0aW9uID8gdGhpcy5fcmVuZGVyZXIuZGltZW5zaW9ucy5hY3R1YWxDZWxsV2lkdGggLyAyIDogMCkpIC8gdGhpcy5fcmVuZGVyZXIuZGltZW5zaW9ucy5hY3R1YWxDZWxsV2lkdGgpO1xuICAgICAgICBjb29yZHNbMV0gPSBNYXRoLmNlaWwoY29vcmRzWzFdIC8gdGhpcy5fcmVuZGVyZXIuZGltZW5zaW9ucy5hY3R1YWxDZWxsSGVpZ2h0KTtcbiAgICAgICAgY29vcmRzWzBdID0gTWF0aC5taW4oTWF0aC5tYXgoY29vcmRzWzBdLCAxKSwgY29sQ291bnQgKyAoaXNTZWxlY3Rpb24gPyAxIDogMCkpO1xuICAgICAgICBjb29yZHNbMV0gPSBNYXRoLm1pbihNYXRoLm1heChjb29yZHNbMV0sIDEpLCByb3dDb3VudCk7XG4gICAgICAgIHJldHVybiBjb29yZHM7XG4gICAgfTtcbiAgICBNb3VzZUhlbHBlci5wcm90b3R5cGUuZ2V0UmF3Qnl0ZUNvb3JkcyA9IGZ1bmN0aW9uIChldmVudCwgZWxlbWVudCwgY2hhck1lYXN1cmUsIGNvbENvdW50LCByb3dDb3VudCkge1xuICAgICAgICB2YXIgY29vcmRzID0gdGhpcy5nZXRDb29yZHMoZXZlbnQsIGVsZW1lbnQsIGNoYXJNZWFzdXJlLCBjb2xDb3VudCwgcm93Q291bnQpO1xuICAgICAgICB2YXIgeCA9IGNvb3Jkc1swXTtcbiAgICAgICAgdmFyIHkgPSBjb29yZHNbMV07XG4gICAgICAgIHggKz0gMzI7XG4gICAgICAgIHkgKz0gMzI7XG4gICAgICAgIHJldHVybiB7IHg6IHgsIHk6IHkgfTtcbiAgICB9O1xuICAgIHJldHVybiBNb3VzZUhlbHBlcjtcbn0oKSk7XG5leHBvcnRzLk1vdXNlSGVscGVyID0gTW91c2VIZWxwZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Nb3VzZUhlbHBlci5qcy5tYXAiLCJcbi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgdXJsID0gcmVxdWlyZSgnLi91cmwnKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCdzb2NrZXQuaW8tcGFyc2VyJyk7XG52YXIgTWFuYWdlciA9IHJlcXVpcmUoJy4vbWFuYWdlcicpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLWNsaWVudCcpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGxvb2t1cDtcblxuLyoqXG4gKiBNYW5hZ2VycyBjYWNoZS5cbiAqL1xuXG52YXIgY2FjaGUgPSBleHBvcnRzLm1hbmFnZXJzID0ge307XG5cbi8qKlxuICogTG9va3MgdXAgYW4gZXhpc3RpbmcgYE1hbmFnZXJgIGZvciBtdWx0aXBsZXhpbmcuXG4gKiBJZiB0aGUgdXNlciBzdW1tb25zOlxuICpcbiAqICAgYGlvKCdodHRwOi8vbG9jYWxob3N0L2EnKTtgXG4gKiAgIGBpbygnaHR0cDovL2xvY2FsaG9zdC9iJyk7YFxuICpcbiAqIFdlIHJldXNlIHRoZSBleGlzdGluZyBpbnN0YW5jZSBiYXNlZCBvbiBzYW1lIHNjaGVtZS9wb3J0L2hvc3QsXG4gKiBhbmQgd2UgaW5pdGlhbGl6ZSBzb2NrZXRzIGZvciBlYWNoIG5hbWVzcGFjZS5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGxvb2t1cCAodXJpLCBvcHRzKSB7XG4gIGlmICh0eXBlb2YgdXJpID09PSAnb2JqZWN0Jykge1xuICAgIG9wdHMgPSB1cmk7XG4gICAgdXJpID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgdmFyIHBhcnNlZCA9IHVybCh1cmkpO1xuICB2YXIgc291cmNlID0gcGFyc2VkLnNvdXJjZTtcbiAgdmFyIGlkID0gcGFyc2VkLmlkO1xuICB2YXIgcGF0aCA9IHBhcnNlZC5wYXRoO1xuICB2YXIgc2FtZU5hbWVzcGFjZSA9IGNhY2hlW2lkXSAmJiBwYXRoIGluIGNhY2hlW2lkXS5uc3BzO1xuICB2YXIgbmV3Q29ubmVjdGlvbiA9IG9wdHMuZm9yY2VOZXcgfHwgb3B0c1snZm9yY2UgbmV3IGNvbm5lY3Rpb24nXSB8fFxuICAgICAgICAgICAgICAgICAgICAgIGZhbHNlID09PSBvcHRzLm11bHRpcGxleCB8fCBzYW1lTmFtZXNwYWNlO1xuXG4gIHZhciBpbztcblxuICBpZiAobmV3Q29ubmVjdGlvbikge1xuICAgIGRlYnVnKCdpZ25vcmluZyBzb2NrZXQgY2FjaGUgZm9yICVzJywgc291cmNlKTtcbiAgICBpbyA9IE1hbmFnZXIoc291cmNlLCBvcHRzKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWNhY2hlW2lkXSkge1xuICAgICAgZGVidWcoJ25ldyBpbyBpbnN0YW5jZSBmb3IgJXMnLCBzb3VyY2UpO1xuICAgICAgY2FjaGVbaWRdID0gTWFuYWdlcihzb3VyY2UsIG9wdHMpO1xuICAgIH1cbiAgICBpbyA9IGNhY2hlW2lkXTtcbiAgfVxuICBpZiAocGFyc2VkLnF1ZXJ5ICYmICFvcHRzLnF1ZXJ5KSB7XG4gICAgb3B0cy5xdWVyeSA9IHBhcnNlZC5xdWVyeTtcbiAgfVxuICByZXR1cm4gaW8uc29ja2V0KHBhcnNlZC5wYXRoLCBvcHRzKTtcbn1cblxuLyoqXG4gKiBQcm90b2NvbCB2ZXJzaW9uLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZXhwb3J0cy5wcm90b2NvbCA9IHBhcnNlci5wcm90b2NvbDtcblxuLyoqXG4gKiBgY29ubmVjdGAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVyaVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmNvbm5lY3QgPSBsb29rdXA7XG5cbi8qKlxuICogRXhwb3NlIGNvbnN0cnVjdG9ycyBmb3Igc3RhbmRhbG9uZSBidWlsZC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuTWFuYWdlciA9IHJlcXVpcmUoJy4vbWFuYWdlcicpO1xuZXhwb3J0cy5Tb2NrZXQgPSByZXF1aXJlKCcuL3NvY2tldCcpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiBwcm9wb3NlR2VvbWV0cnkodGVybSkge1xuICAgIGlmICghdGVybS5lbGVtZW50LnBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBwYXJlbnRFbGVtZW50U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0ZXJtLmVsZW1lbnQucGFyZW50RWxlbWVudCk7XG4gICAgdmFyIHBhcmVudEVsZW1lbnRIZWlnaHQgPSBwYXJzZUludChwYXJlbnRFbGVtZW50U3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnaGVpZ2h0JykpO1xuICAgIHZhciBwYXJlbnRFbGVtZW50V2lkdGggPSBNYXRoLm1heCgwLCBwYXJzZUludChwYXJlbnRFbGVtZW50U3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnd2lkdGgnKSkpO1xuICAgIHZhciBlbGVtZW50U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0ZXJtLmVsZW1lbnQpO1xuICAgIHZhciBlbGVtZW50UGFkZGluZyA9IHtcbiAgICAgICAgdG9wOiBwYXJzZUludChlbGVtZW50U3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgncGFkZGluZy10b3AnKSksXG4gICAgICAgIGJvdHRvbTogcGFyc2VJbnQoZWxlbWVudFN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctYm90dG9tJykpLFxuICAgICAgICByaWdodDogcGFyc2VJbnQoZWxlbWVudFN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctcmlnaHQnKSksXG4gICAgICAgIGxlZnQ6IHBhcnNlSW50KGVsZW1lbnRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLWxlZnQnKSlcbiAgICB9O1xuICAgIHZhciBlbGVtZW50UGFkZGluZ1ZlciA9IGVsZW1lbnRQYWRkaW5nLnRvcCArIGVsZW1lbnRQYWRkaW5nLmJvdHRvbTtcbiAgICB2YXIgZWxlbWVudFBhZGRpbmdIb3IgPSBlbGVtZW50UGFkZGluZy5yaWdodCArIGVsZW1lbnRQYWRkaW5nLmxlZnQ7XG4gICAgdmFyIGF2YWlsYWJsZUhlaWdodCA9IHBhcmVudEVsZW1lbnRIZWlnaHQgLSBlbGVtZW50UGFkZGluZ1ZlcjtcbiAgICB2YXIgYXZhaWxhYmxlV2lkdGggPSBwYXJlbnRFbGVtZW50V2lkdGggLSBlbGVtZW50UGFkZGluZ0hvciAtIHRlcm0uX2NvcmUudmlld3BvcnQuc2Nyb2xsQmFyV2lkdGg7XG4gICAgdmFyIGdlb21ldHJ5ID0ge1xuICAgICAgICBjb2xzOiBNYXRoLmZsb29yKGF2YWlsYWJsZVdpZHRoIC8gdGVybS5fY29yZS5yZW5kZXJlci5kaW1lbnNpb25zLmFjdHVhbENlbGxXaWR0aCksXG4gICAgICAgIHJvd3M6IE1hdGguZmxvb3IoYXZhaWxhYmxlSGVpZ2h0IC8gdGVybS5fY29yZS5yZW5kZXJlci5kaW1lbnNpb25zLmFjdHVhbENlbGxIZWlnaHQpXG4gICAgfTtcbiAgICByZXR1cm4gZ2VvbWV0cnk7XG59XG5leHBvcnRzLnByb3Bvc2VHZW9tZXRyeSA9IHByb3Bvc2VHZW9tZXRyeTtcbmZ1bmN0aW9uIGZpdCh0ZXJtKSB7XG4gICAgdmFyIGdlb21ldHJ5ID0gcHJvcG9zZUdlb21ldHJ5KHRlcm0pO1xuICAgIGlmIChnZW9tZXRyeSkge1xuICAgICAgICBpZiAodGVybS5yb3dzICE9PSBnZW9tZXRyeS5yb3dzIHx8IHRlcm0uY29scyAhPT0gZ2VvbWV0cnkuY29scykge1xuICAgICAgICAgICAgdGVybS5fY29yZS5yZW5kZXJlci5jbGVhcigpO1xuICAgICAgICAgICAgdGVybS5yZXNpemUoZ2VvbWV0cnkuY29scywgZ2VvbWV0cnkucm93cyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLmZpdCA9IGZpdDtcbmZ1bmN0aW9uIGFwcGx5KHRlcm1pbmFsQ29uc3RydWN0b3IpIHtcbiAgICB0ZXJtaW5hbENvbnN0cnVjdG9yLnByb3RvdHlwZS5wcm9wb3NlR2VvbWV0cnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBwcm9wb3NlR2VvbWV0cnkodGhpcyk7XG4gICAgfTtcbiAgICB0ZXJtaW5hbENvbnN0cnVjdG9yLnByb3RvdHlwZS5maXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZpdCh0aGlzKTtcbiAgICB9O1xufVxuZXhwb3J0cy5hcHBseSA9IGFwcGx5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zml0LmpzLm1hcCIsIid1c2Ugc3RyaWN0J1xyXG5pbXBvcnQgaW8gZnJvbSAnc29ja2V0LmlvLWNsaWVudCdcclxuaW1wb3J0IHtUZXJtaW5hbH0gZnJvbSAneHRlcm0nXHJcbmltcG9ydCB7Zml0fSBmcm9tICd4dGVybS9saWIvYWRkb25zL2ZpdC9maXQnXHJcbmltcG9ydCAneHRlcm0vbGliL3h0ZXJtLmNzcydcclxuaW1wb3J0ICd4dGVybS9saWIveHRlcm0nXHJcbmltcG9ydCAnLi9jbGllbnQubGVzcydcclxuXHJcbmNvbnN0IHRlcm1pbmFsX2RvbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0ZXJtaW5hbCcpXHJcbmNvbnN0IHh0ZXJtID0gbmV3IFRlcm1pbmFsKClcclxueHRlcm0ub3Blbih0ZXJtaW5hbF9kb20pXHJcbnh0ZXJtLnNldE9wdGlvbignbGluZUhlaWdodCcsIDEuNSkgLy8gc2V0IGxpbmVIZWlnaHQgc2hvdWxkIGJlaGluZCAnb3BlbidcclxuZml0KHh0ZXJtKVxyXG5cclxuLy8gY29ubmVjdCB0byBzb2NrZXRcclxuY29uc3Qgc29ja2V0ID0gaW8oKVxyXG5zb2NrZXQub24oJ2Nvbm5lY3QnLCBmdW5jdGlvbiAoKSB7XHJcbiAgLy8gdXNlIGZvciBzc2ggY29ubmVjdGVkIHNoZWxsXHJcbiAgc29ja2V0LmVtaXQoJ3N0YW5kYnknLCB4dGVybS5jb2xzLCB4dGVybS5yb3dzKVxyXG4gIHh0ZXJtLmNsZWFyKClcclxuICB4dGVybS53cml0ZWxuKCfor7fovpPlhaXnlKjmiLflkI3lkozlr4bnoIHov5vooYznmbvlvZXjgIInKVxyXG59KVxyXG5cclxuLy8gZ2V0IGFjY291bnQgYW5kIHB3IHRvIGxvZ2luXHJcbmNvbnN0IGxvZ2luQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnc3VibWl0JylbMF1cclxubG9naW5CdG4ub25jbGljayA9IGZ1bmN0aW9uICgpIHtcclxuICAvLyBsb2dpbiBidXR0b24gYmx1ciB0byBwcmV2ZW50IHJlcGVhdCBjbGlja1xyXG4gIGxvZ2luQnRuLmJsdXIoKVxyXG5cclxuICBjb25zdCBhY2NvdW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYWNjb3VudCcpWzBdLnZhbHVlXHJcbiAgY29uc3QgcHcgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdwYXNzd29yZCcpWzBdLnZhbHVlXHJcbiAgaWYgKCFhY2NvdW50IHx8ICFwdykge1xyXG4gICAgYWxlcnQoJ+ivt+i+k+WFpeeUqOaIt+WQjeWSjOWvhueggei/m+ihjOeZu+W9lScpXHJcbiAgfSBlbHNlIHtcclxuICAgIHh0ZXJtLndyaXRlbG4oJ+ivt+eojeWQju+8jOato+WcqOeZu+W9lS4uLicpXHJcbiAgICBzb2NrZXQuZW1pdCgnbG9naW4nLCBhY2NvdW50LCBwdylcclxuICB9XHJcbn1cclxuXHJcbi8vIHdyb25nIGlwIG9yIHBvcnQgc2V0XHJcbnNvY2tldC5vbignaW52YWxpZGF0ZUlQJywgZnVuY3Rpb24gKCkge1xyXG4gIHh0ZXJtLndyaXRlbG4oJ+ivt+ajgOafpUlQ5Zyw5Z2A5oiW6ICF56uv5Y+j5piv5ZCm6K6+572u5q2j56Gu44CCJylcclxufSlcclxuXHJcbi8vIHNlcnZlciBjb25uZWN0IHN1Y2Nlc3Ncclxuc29ja2V0Lm9uKCdsb2dpbicsIGZ1bmN0aW9uIChzdWNjZXNzKSB7XHJcbiAgaWYgKHN1Y2Nlc3MpIHtcclxuICAgIGNvbnNvbGUubG9nKCdsb2dpbiBzdWNjZXNzIScpXHJcbiAgICAvLyB3aGVuIGxvZ2luIHNldCBjdXJzb3IgYmxpbmsgYW5kIGZvY3VzXHJcbiAgICB4dGVybS5zZXRPcHRpb24oJ2N1cnNvckJsaW5rJywgdHJ1ZSlcclxuICAgIHh0ZXJtLmZvY3VzKClcclxuICAgIC8vIGRpc2FibGVkIGxvZ2luIGJ1dHRvblxyXG4gICAgbG9naW5CdG4uZGlzYWJsZWQgPSB0cnVlXHJcbiAgfVxyXG59KVxyXG5cclxuLy8gaGFuZGxlIHNzaCBjb25uZWN0IGV2ZW50XHJcbnNvY2tldC5vbignU1NILUVSUk9SJywgZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgeHRlcm0ud3JpdGVsbign6L+e5o6l5Ye6546w6ZSZ6K+v77yM6K+35bCd6K+V6YeN5paw55m75b2V44CCJylcclxuICB4dGVybS53cml0ZWxuKGVycm9yKVxyXG59KVxyXG5zb2NrZXQub24oJ1NTSC1FTkQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgeHRlcm0ud3JpdGVsbign6L+e5o6l5bey57uP5pat5byA44CCJylcclxufSlcclxuc29ja2V0Lm9uKCdTU0gtQ0xPU0UnLCBmdW5jdGlvbiAoaGFkRXJyb3IpIHtcclxuICB4dGVybS53cml0ZWxuKCfov57mjqXlt7Lnu4/lhbPpl63jgIInKVxyXG59KVxyXG5cclxuLy8gZ2V0IHNvY2tldCBzZXJ2ZXIgZGF0YVxyXG5zb2NrZXQub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xyXG4gIHh0ZXJtLndyaXRlKGRhdGEpXHJcbn0pXHJcblxyXG4vLyBwb3N0IHNvY2tldCBjbGllbnQgZGF0YSB0byBzZXJ2ZXJcclxueHRlcm0ub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkge1xyXG4gIHNvY2tldC5lbWl0KCdkYXRhJywgZGF0YSlcclxufSlcclxuIiwiXG4vKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHBhcnNldXJpID0gcmVxdWlyZSgncGFyc2V1cmknKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tldC5pby1jbGllbnQ6dXJsJyk7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB1cmw7XG5cbi8qKlxuICogVVJMIHBhcnNlci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge09iamVjdH0gQW4gb2JqZWN0IG1lYW50IHRvIG1pbWljIHdpbmRvdy5sb2NhdGlvbi5cbiAqICAgICAgICAgICAgICAgICBEZWZhdWx0cyB0byB3aW5kb3cubG9jYXRpb24uXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIHVybCAodXJpLCBsb2MpIHtcbiAgdmFyIG9iaiA9IHVyaTtcblxuICAvLyBkZWZhdWx0IHRvIHdpbmRvdy5sb2NhdGlvblxuICBsb2MgPSBsb2MgfHwgKHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgbG9jYXRpb24pO1xuICBpZiAobnVsbCA9PSB1cmkpIHVyaSA9IGxvYy5wcm90b2NvbCArICcvLycgKyBsb2MuaG9zdDtcblxuICAvLyByZWxhdGl2ZSBwYXRoIHN1cHBvcnRcbiAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgdXJpKSB7XG4gICAgaWYgKCcvJyA9PT0gdXJpLmNoYXJBdCgwKSkge1xuICAgICAgaWYgKCcvJyA9PT0gdXJpLmNoYXJBdCgxKSkge1xuICAgICAgICB1cmkgPSBsb2MucHJvdG9jb2wgKyB1cmk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1cmkgPSBsb2MuaG9zdCArIHVyaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIS9eKGh0dHBzP3x3c3M/KTpcXC9cXC8vLnRlc3QodXJpKSkge1xuICAgICAgZGVidWcoJ3Byb3RvY29sLWxlc3MgdXJsICVzJywgdXJpKTtcbiAgICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIGxvYykge1xuICAgICAgICB1cmkgPSBsb2MucHJvdG9jb2wgKyAnLy8nICsgdXJpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXJpID0gJ2h0dHBzOi8vJyArIHVyaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBwYXJzZVxuICAgIGRlYnVnKCdwYXJzZSAlcycsIHVyaSk7XG4gICAgb2JqID0gcGFyc2V1cmkodXJpKTtcbiAgfVxuXG4gIC8vIG1ha2Ugc3VyZSB3ZSB0cmVhdCBgbG9jYWxob3N0OjgwYCBhbmQgYGxvY2FsaG9zdGAgZXF1YWxseVxuICBpZiAoIW9iai5wb3J0KSB7XG4gICAgaWYgKC9eKGh0dHB8d3MpJC8udGVzdChvYmoucHJvdG9jb2wpKSB7XG4gICAgICBvYmoucG9ydCA9ICc4MCc7XG4gICAgfSBlbHNlIGlmICgvXihodHRwfHdzKXMkLy50ZXN0KG9iai5wcm90b2NvbCkpIHtcbiAgICAgIG9iai5wb3J0ID0gJzQ0Myc7XG4gICAgfVxuICB9XG5cbiAgb2JqLnBhdGggPSBvYmoucGF0aCB8fCAnLyc7XG5cbiAgdmFyIGlwdjYgPSBvYmouaG9zdC5pbmRleE9mKCc6JykgIT09IC0xO1xuICB2YXIgaG9zdCA9IGlwdjYgPyAnWycgKyBvYmouaG9zdCArICddJyA6IG9iai5ob3N0O1xuXG4gIC8vIGRlZmluZSB1bmlxdWUgaWRcbiAgb2JqLmlkID0gb2JqLnByb3RvY29sICsgJzovLycgKyBob3N0ICsgJzonICsgb2JqLnBvcnQ7XG4gIC8vIGRlZmluZSBocmVmXG4gIG9iai5ocmVmID0gb2JqLnByb3RvY29sICsgJzovLycgKyBob3N0ICsgKGxvYyAmJiBsb2MucG9ydCA9PT0gb2JqLnBvcnQgPyAnJyA6ICgnOicgKyBvYmoucG9ydCkpO1xuXG4gIHJldHVybiBvYmo7XG59XG4iLCJcbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gY3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1Z1snZGVmYXVsdCddID0gY3JlYXRlRGVidWc7XG5leHBvcnRzLmNvZXJjZSA9IGNvZXJjZTtcbmV4cG9ydHMuZGlzYWJsZSA9IGRpc2FibGU7XG5leHBvcnRzLmVuYWJsZSA9IGVuYWJsZTtcbmV4cG9ydHMuZW5hYmxlZCA9IGVuYWJsZWQ7XG5leHBvcnRzLmh1bWFuaXplID0gcmVxdWlyZSgnbXMnKTtcblxuLyoqXG4gKiBBY3RpdmUgYGRlYnVnYCBpbnN0YW5jZXMuXG4gKi9cbmV4cG9ydHMuaW5zdGFuY2VzID0gW107XG5cbi8qKlxuICogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcywgYW5kIG5hbWVzIHRvIHNraXAuXG4gKi9cblxuZXhwb3J0cy5uYW1lcyA9IFtdO1xuZXhwb3J0cy5za2lwcyA9IFtdO1xuXG4vKipcbiAqIE1hcCBvZiBzcGVjaWFsIFwiJW5cIiBoYW5kbGluZyBmdW5jdGlvbnMsIGZvciB0aGUgZGVidWcgXCJmb3JtYXRcIiBhcmd1bWVudC5cbiAqXG4gKiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlciBvciB1cHBlci1jYXNlIGxldHRlciwgaS5lLiBcIm5cIiBhbmQgXCJOXCIuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzID0ge307XG5cbi8qKlxuICogU2VsZWN0IGEgY29sb3IuXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzZWxlY3RDb2xvcihuYW1lc3BhY2UpIHtcbiAgdmFyIGhhc2ggPSAwLCBpO1xuXG4gIGZvciAoaSBpbiBuYW1lc3BhY2UpIHtcbiAgICBoYXNoICA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgbmFtZXNwYWNlLmNoYXJDb2RlQXQoaSk7XG4gICAgaGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcbiAgfVxuXG4gIHJldHVybiBleHBvcnRzLmNvbG9yc1tNYXRoLmFicyhoYXNoKSAlIGV4cG9ydHMuY29sb3JzLmxlbmd0aF07XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgZGVidWdnZXIgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVzcGFjZWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICogQHJldHVybiB7RnVuY3Rpb259XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZURlYnVnKG5hbWVzcGFjZSkge1xuXG4gIHZhciBwcmV2VGltZTtcblxuICBmdW5jdGlvbiBkZWJ1ZygpIHtcbiAgICAvLyBkaXNhYmxlZD9cbiAgICBpZiAoIWRlYnVnLmVuYWJsZWQpIHJldHVybjtcblxuICAgIHZhciBzZWxmID0gZGVidWc7XG5cbiAgICAvLyBzZXQgYGRpZmZgIHRpbWVzdGFtcFxuICAgIHZhciBjdXJyID0gK25ldyBEYXRlKCk7XG4gICAgdmFyIG1zID0gY3VyciAtIChwcmV2VGltZSB8fCBjdXJyKTtcbiAgICBzZWxmLmRpZmYgPSBtcztcbiAgICBzZWxmLnByZXYgPSBwcmV2VGltZTtcbiAgICBzZWxmLmN1cnIgPSBjdXJyO1xuICAgIHByZXZUaW1lID0gY3VycjtcblxuICAgIC8vIHR1cm4gdGhlIGBhcmd1bWVudHNgIGludG8gYSBwcm9wZXIgQXJyYXlcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuXG4gICAgYXJnc1swXSA9IGV4cG9ydHMuY29lcmNlKGFyZ3NbMF0pO1xuXG4gICAgaWYgKCdzdHJpbmcnICE9PSB0eXBlb2YgYXJnc1swXSkge1xuICAgICAgLy8gYW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJU9cbiAgICAgIGFyZ3MudW5zaGlmdCgnJU8nKTtcbiAgICB9XG5cbiAgICAvLyBhcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgYXJnc1swXSA9IGFyZ3NbMF0ucmVwbGFjZSgvJShbYS16QS1aJV0pL2csIGZ1bmN0aW9uKG1hdGNoLCBmb3JtYXQpIHtcbiAgICAgIC8vIGlmIHdlIGVuY291bnRlciBhbiBlc2NhcGVkICUgdGhlbiBkb24ndCBpbmNyZWFzZSB0aGUgYXJyYXkgaW5kZXhcbiAgICAgIGlmIChtYXRjaCA9PT0gJyUlJykgcmV0dXJuIG1hdGNoO1xuICAgICAgaW5kZXgrKztcbiAgICAgIHZhciBmb3JtYXR0ZXIgPSBleHBvcnRzLmZvcm1hdHRlcnNbZm9ybWF0XTtcbiAgICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZm9ybWF0dGVyKSB7XG4gICAgICAgIHZhciB2YWwgPSBhcmdzW2luZGV4XTtcbiAgICAgICAgbWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG4gICAgICAgIC8vIG5vdyB3ZSBuZWVkIHRvIHJlbW92ZSBgYXJnc1tpbmRleF1gIHNpbmNlIGl0J3MgaW5saW5lZCBpbiB0aGUgYGZvcm1hdGBcbiAgICAgICAgYXJncy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBpbmRleC0tO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuXG4gICAgLy8gYXBwbHkgZW52LXNwZWNpZmljIGZvcm1hdHRpbmcgKGNvbG9ycywgZXRjLilcbiAgICBleHBvcnRzLmZvcm1hdEFyZ3MuY2FsbChzZWxmLCBhcmdzKTtcblxuICAgIHZhciBsb2dGbiA9IGRlYnVnLmxvZyB8fCBleHBvcnRzLmxvZyB8fCBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpO1xuICAgIGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICB9XG5cbiAgZGVidWcubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuICBkZWJ1Zy5lbmFibGVkID0gZXhwb3J0cy5lbmFibGVkKG5hbWVzcGFjZSk7XG4gIGRlYnVnLnVzZUNvbG9ycyA9IGV4cG9ydHMudXNlQ29sb3JzKCk7XG4gIGRlYnVnLmNvbG9yID0gc2VsZWN0Q29sb3IobmFtZXNwYWNlKTtcbiAgZGVidWcuZGVzdHJveSA9IGRlc3Ryb3k7XG5cbiAgLy8gZW52LXNwZWNpZmljIGluaXRpYWxpemF0aW9uIGxvZ2ljIGZvciBkZWJ1ZyBpbnN0YW5jZXNcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBleHBvcnRzLmluaXQpIHtcbiAgICBleHBvcnRzLmluaXQoZGVidWcpO1xuICB9XG5cbiAgZXhwb3J0cy5pbnN0YW5jZXMucHVzaChkZWJ1Zyk7XG5cbiAgcmV0dXJuIGRlYnVnO1xufVxuXG5mdW5jdGlvbiBkZXN0cm95ICgpIHtcbiAgdmFyIGluZGV4ID0gZXhwb3J0cy5pbnN0YW5jZXMuaW5kZXhPZih0aGlzKTtcbiAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgIGV4cG9ydHMuaW5zdGFuY2VzLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2Rlc1xuICogc2VwYXJhdGVkIGJ5IGEgY29sb24gYW5kIHdpbGRjYXJkcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuICBleHBvcnRzLnNhdmUobmFtZXNwYWNlcyk7XG5cbiAgZXhwb3J0cy5uYW1lcyA9IFtdO1xuICBleHBvcnRzLnNraXBzID0gW107XG5cbiAgdmFyIGk7XG4gIHZhciBzcGxpdCA9ICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBuYW1lc3BhY2VzIDogJycpLnNwbGl0KC9bXFxzLF0rLyk7XG4gIHZhciBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKCFzcGxpdFtpXSkgY29udGludWU7IC8vIGlnbm9yZSBlbXB0eSBzdHJpbmdzXG4gICAgbmFtZXNwYWNlcyA9IHNwbGl0W2ldLnJlcGxhY2UoL1xcKi9nLCAnLio/Jyk7XG4gICAgaWYgKG5hbWVzcGFjZXNbMF0gPT09ICctJykge1xuICAgICAgZXhwb3J0cy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zdWJzdHIoMSkgKyAnJCcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwb3J0cy5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcyArICckJykpO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCBleHBvcnRzLmluc3RhbmNlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpbnN0YW5jZSA9IGV4cG9ydHMuaW5zdGFuY2VzW2ldO1xuICAgIGluc3RhbmNlLmVuYWJsZWQgPSBleHBvcnRzLmVuYWJsZWQoaW5zdGFuY2UubmFtZXNwYWNlKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgZXhwb3J0cy5lbmFibGUoJycpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZW5hYmxlZChuYW1lKSB7XG4gIGlmIChuYW1lW25hbWUubGVuZ3RoIC0gMV0gPT09ICcqJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBpLCBsZW47XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5za2lwc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMubmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5uYW1lc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIENvZXJjZSBgdmFsYC5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSB2YWxcbiAqIEByZXR1cm4ge01peGVkfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuICBpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHJldHVybiB2YWwuc3RhY2sgfHwgdmFsLm1lc3NhZ2U7XG4gIHJldHVybiB2YWw7XG59XG4iLCIvKipcbiAqIFRoaXMgaXMgdGhlIHdlYiBicm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kZWJ1ZycpO1xuZXhwb3J0cy5sb2cgPSBsb2c7XG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcbmV4cG9ydHMuc3RvcmFnZSA9ICd1bmRlZmluZWQnICE9IHR5cGVvZiBjaHJvbWVcbiAgICAgICAgICAgICAgICYmICd1bmRlZmluZWQnICE9IHR5cGVvZiBjaHJvbWUuc3RvcmFnZVxuICAgICAgICAgICAgICAgICAgPyBjaHJvbWUuc3RvcmFnZS5sb2NhbFxuICAgICAgICAgICAgICAgICAgOiBsb2NhbHN0b3JhZ2UoKTtcblxuLyoqXG4gKiBDb2xvcnMuXG4gKi9cblxuZXhwb3J0cy5jb2xvcnMgPSBbXG4gICcjMDAwMENDJywgJyMwMDAwRkYnLCAnIzAwMzNDQycsICcjMDAzM0ZGJywgJyMwMDY2Q0MnLCAnIzAwNjZGRicsICcjMDA5OUNDJyxcbiAgJyMwMDk5RkYnLCAnIzAwQ0MwMCcsICcjMDBDQzMzJywgJyMwMENDNjYnLCAnIzAwQ0M5OScsICcjMDBDQ0NDJywgJyMwMENDRkYnLFxuICAnIzMzMDBDQycsICcjMzMwMEZGJywgJyMzMzMzQ0MnLCAnIzMzMzNGRicsICcjMzM2NkNDJywgJyMzMzY2RkYnLCAnIzMzOTlDQycsXG4gICcjMzM5OUZGJywgJyMzM0NDMDAnLCAnIzMzQ0MzMycsICcjMzNDQzY2JywgJyMzM0NDOTknLCAnIzMzQ0NDQycsICcjMzNDQ0ZGJyxcbiAgJyM2NjAwQ0MnLCAnIzY2MDBGRicsICcjNjYzM0NDJywgJyM2NjMzRkYnLCAnIzY2Q0MwMCcsICcjNjZDQzMzJywgJyM5OTAwQ0MnLFxuICAnIzk5MDBGRicsICcjOTkzM0NDJywgJyM5OTMzRkYnLCAnIzk5Q0MwMCcsICcjOTlDQzMzJywgJyNDQzAwMDAnLCAnI0NDMDAzMycsXG4gICcjQ0MwMDY2JywgJyNDQzAwOTknLCAnI0NDMDBDQycsICcjQ0MwMEZGJywgJyNDQzMzMDAnLCAnI0NDMzMzMycsICcjQ0MzMzY2JyxcbiAgJyNDQzMzOTknLCAnI0NDMzNDQycsICcjQ0MzM0ZGJywgJyNDQzY2MDAnLCAnI0NDNjYzMycsICcjQ0M5OTAwJywgJyNDQzk5MzMnLFxuICAnI0NDQ0MwMCcsICcjQ0NDQzMzJywgJyNGRjAwMDAnLCAnI0ZGMDAzMycsICcjRkYwMDY2JywgJyNGRjAwOTknLCAnI0ZGMDBDQycsXG4gICcjRkYwMEZGJywgJyNGRjMzMDAnLCAnI0ZGMzMzMycsICcjRkYzMzY2JywgJyNGRjMzOTknLCAnI0ZGMzNDQycsICcjRkYzM0ZGJyxcbiAgJyNGRjY2MDAnLCAnI0ZGNjYzMycsICcjRkY5OTAwJywgJyNGRjk5MzMnLCAnI0ZGQ0MwMCcsICcjRkZDQzMzJ1xuXTtcblxuLyoqXG4gKiBDdXJyZW50bHkgb25seSBXZWJLaXQtYmFzZWQgV2ViIEluc3BlY3RvcnMsIEZpcmVmb3ggPj0gdjMxLFxuICogYW5kIHRoZSBGaXJlYnVnIGV4dGVuc2lvbiAoYW55IEZpcmVmb3ggdmVyc2lvbikgYXJlIGtub3duXG4gKiB0byBzdXBwb3J0IFwiJWNcIiBDU1MgY3VzdG9taXphdGlvbnMuXG4gKlxuICogVE9ETzogYWRkIGEgYGxvY2FsU3RvcmFnZWAgdmFyaWFibGUgdG8gZXhwbGljaXRseSBlbmFibGUvZGlzYWJsZSBjb2xvcnNcbiAqL1xuXG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG4gIC8vIE5COiBJbiBhbiBFbGVjdHJvbiBwcmVsb2FkIHNjcmlwdCwgZG9jdW1lbnQgd2lsbCBiZSBkZWZpbmVkIGJ1dCBub3QgZnVsbHlcbiAgLy8gaW5pdGlhbGl6ZWQuIFNpbmNlIHdlIGtub3cgd2UncmUgaW4gQ2hyb21lLCB3ZSdsbCBqdXN0IGRldGVjdCB0aGlzIGNhc2VcbiAgLy8gZXhwbGljaXRseVxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnByb2Nlc3MgJiYgd2luZG93LnByb2Nlc3MudHlwZSA9PT0gJ3JlbmRlcmVyJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gSW50ZXJuZXQgRXhwbG9yZXIgYW5kIEVkZ2UgZG8gbm90IHN1cHBvcnQgY29sb3JzLlxuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goLyhlZGdlfHRyaWRlbnQpXFwvKFxcZCspLykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBpcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuICAvLyBkb2N1bWVudCBpcyB1bmRlZmluZWQgaW4gcmVhY3QtbmF0aXZlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL3B1bGwvMTYzMlxuICByZXR1cm4gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZSkgfHxcbiAgICAvLyBpcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG4gICAgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS5maXJlYnVnIHx8ICh3aW5kb3cuY29uc29sZS5leGNlcHRpb24gJiYgd2luZG93LmNvbnNvbGUudGFibGUpKSkgfHxcbiAgICAvLyBpcyBmaXJlZm94ID49IHYzMT9cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1Rvb2xzL1dlYl9Db25zb2xlI1N0eWxpbmdfbWVzc2FnZXNcbiAgICAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSAmJiBwYXJzZUludChSZWdFeHAuJDEsIDEwKSA+PSAzMSkgfHxcbiAgICAvLyBkb3VibGUgY2hlY2sgd2Via2l0IGluIHVzZXJBZ2VudCBqdXN0IGluIGNhc2Ugd2UgYXJlIGluIGEgd29ya2VyXG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcLyhcXGQrKS8pKTtcbn1cblxuLyoqXG4gKiBNYXAgJWogdG8gYEpTT04uc3RyaW5naWZ5KClgLCBzaW5jZSBubyBXZWIgSW5zcGVjdG9ycyBkbyB0aGF0IGJ5IGRlZmF1bHQuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzLmogPSBmdW5jdGlvbih2KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHYpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gJ1tVbmV4cGVjdGVkSlNPTlBhcnNlRXJyb3JdOiAnICsgZXJyLm1lc3NhZ2U7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBDb2xvcml6ZSBsb2cgYXJndW1lbnRzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcbiAgdmFyIHVzZUNvbG9ycyA9IHRoaXMudXNlQ29sb3JzO1xuXG4gIGFyZ3NbMF0gPSAodXNlQ29sb3JzID8gJyVjJyA6ICcnKVxuICAgICsgdGhpcy5uYW1lc3BhY2VcbiAgICArICh1c2VDb2xvcnMgPyAnICVjJyA6ICcgJylcbiAgICArIGFyZ3NbMF1cbiAgICArICh1c2VDb2xvcnMgPyAnJWMgJyA6ICcgJylcbiAgICArICcrJyArIGV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblxuICBpZiAoIXVzZUNvbG9ycykgcmV0dXJuO1xuXG4gIHZhciBjID0gJ2NvbG9yOiAnICsgdGhpcy5jb2xvcjtcbiAgYXJncy5zcGxpY2UoMSwgMCwgYywgJ2NvbG9yOiBpbmhlcml0JylcblxuICAvLyB0aGUgZmluYWwgXCIlY1wiIGlzIHNvbWV3aGF0IHRyaWNreSwgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBvdGhlclxuICAvLyBhcmd1bWVudHMgcGFzc2VkIGVpdGhlciBiZWZvcmUgb3IgYWZ0ZXIgdGhlICVjLCBzbyB3ZSBuZWVkIHRvXG4gIC8vIGZpZ3VyZSBvdXQgdGhlIGNvcnJlY3QgaW5kZXggdG8gaW5zZXJ0IHRoZSBDU1MgaW50b1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGFzdEMgPSAwO1xuICBhcmdzWzBdLnJlcGxhY2UoLyVbYS16QS1aJV0vZywgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICBpZiAoJyUlJyA9PT0gbWF0Y2gpIHJldHVybjtcbiAgICBpbmRleCsrO1xuICAgIGlmICgnJWMnID09PSBtYXRjaCkge1xuICAgICAgLy8gd2Ugb25seSBhcmUgaW50ZXJlc3RlZCBpbiB0aGUgKmxhc3QqICVjXG4gICAgICAvLyAodGhlIHVzZXIgbWF5IGhhdmUgcHJvdmlkZWQgdGhlaXIgb3duKVxuICAgICAgbGFzdEMgPSBpbmRleDtcbiAgICB9XG4gIH0pO1xuXG4gIGFyZ3Muc3BsaWNlKGxhc3RDLCAwLCBjKTtcbn1cblxuLyoqXG4gKiBJbnZva2VzIGBjb25zb2xlLmxvZygpYCB3aGVuIGF2YWlsYWJsZS5cbiAqIE5vLW9wIHdoZW4gYGNvbnNvbGUubG9nYCBpcyBub3QgYSBcImZ1bmN0aW9uXCIuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBsb2coKSB7XG4gIC8vIHRoaXMgaGFja2VyeSBpcyByZXF1aXJlZCBmb3IgSUU4LzksIHdoZXJlXG4gIC8vIHRoZSBgY29uc29sZS5sb2dgIGZ1bmN0aW9uIGRvZXNuJ3QgaGF2ZSAnYXBwbHknXG4gIHJldHVybiAnb2JqZWN0JyA9PT0gdHlwZW9mIGNvbnNvbGVcbiAgICAmJiBjb25zb2xlLmxvZ1xuICAgICYmIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGNvbnNvbGUubG9nLCBjb25zb2xlLCBhcmd1bWVudHMpO1xufVxuXG4vKipcbiAqIFNhdmUgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzYXZlKG5hbWVzcGFjZXMpIHtcbiAgdHJ5IHtcbiAgICBpZiAobnVsbCA9PSBuYW1lc3BhY2VzKSB7XG4gICAgICBleHBvcnRzLnN0b3JhZ2UucmVtb3ZlSXRlbSgnZGVidWcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLmRlYnVnID0gbmFtZXNwYWNlcztcbiAgICB9XG4gIH0gY2F0Y2goZSkge31cbn1cblxuLyoqXG4gKiBMb2FkIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHJldHVybnMgdGhlIHByZXZpb3VzbHkgcGVyc2lzdGVkIGRlYnVnIG1vZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2FkKCkge1xuICB2YXIgcjtcbiAgdHJ5IHtcbiAgICByID0gZXhwb3J0cy5zdG9yYWdlLmRlYnVnO1xuICB9IGNhdGNoKGUpIHt9XG5cbiAgLy8gSWYgZGVidWcgaXNuJ3Qgc2V0IGluIExTLCBhbmQgd2UncmUgaW4gRWxlY3Ryb24sIHRyeSB0byBsb2FkICRERUJVR1xuICBpZiAoIXIgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICdlbnYnIGluIHByb2Nlc3MpIHtcbiAgICByID0gcHJvY2Vzcy5lbnYuREVCVUc7XG4gIH1cblxuICByZXR1cm4gcjtcbn1cblxuLyoqXG4gKiBFbmFibGUgbmFtZXNwYWNlcyBsaXN0ZWQgaW4gYGxvY2FsU3RvcmFnZS5kZWJ1Z2AgaW5pdGlhbGx5LlxuICovXG5cbmV4cG9ydHMuZW5hYmxlKGxvYWQoKSk7XG5cbi8qKlxuICogTG9jYWxzdG9yYWdlIGF0dGVtcHRzIHRvIHJldHVybiB0aGUgbG9jYWxzdG9yYWdlLlxuICpcbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugc2FmYXJpIHRocm93c1xuICogd2hlbiBhIHVzZXIgZGlzYWJsZXMgY29va2llcy9sb2NhbHN0b3JhZ2VcbiAqIGFuZCB5b3UgYXR0ZW1wdCB0byBhY2Nlc3MgaXQuXG4gKlxuICogQHJldHVybiB7TG9jYWxTdG9yYWdlfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9jYWxzdG9yYWdlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlO1xuICB9IGNhdGNoIChlKSB7fVxufVxuIiwiXG4vKipcbiAqIFRoaXMgaXMgdGhlIGNvbW1vbiBsb2dpYyBmb3IgYm90aCB0aGUgTm9kZS5qcyBhbmQgd2ViIGJyb3dzZXJcbiAqIGltcGxlbWVudGF0aW9ucyBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZURlYnVnLmRlYnVnID0gY3JlYXRlRGVidWdbJ2RlZmF1bHQnXSA9IGNyZWF0ZURlYnVnO1xuZXhwb3J0cy5jb2VyY2UgPSBjb2VyY2U7XG5leHBvcnRzLmRpc2FibGUgPSBkaXNhYmxlO1xuZXhwb3J0cy5lbmFibGUgPSBlbmFibGU7XG5leHBvcnRzLmVuYWJsZWQgPSBlbmFibGVkO1xuZXhwb3J0cy5odW1hbml6ZSA9IHJlcXVpcmUoJ21zJyk7XG5cbi8qKlxuICogQWN0aXZlIGBkZWJ1Z2AgaW5zdGFuY2VzLlxuICovXG5leHBvcnRzLmluc3RhbmNlcyA9IFtdO1xuXG4vKipcbiAqIFRoZSBjdXJyZW50bHkgYWN0aXZlIGRlYnVnIG1vZGUgbmFtZXMsIGFuZCBuYW1lcyB0byBza2lwLlxuICovXG5cbmV4cG9ydHMubmFtZXMgPSBbXTtcbmV4cG9ydHMuc2tpcHMgPSBbXTtcblxuLyoqXG4gKiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG4gKlxuICogVmFsaWQga2V5IG5hbWVzIGFyZSBhIHNpbmdsZSwgbG93ZXIgb3IgdXBwZXItY2FzZSBsZXR0ZXIsIGkuZS4gXCJuXCIgYW5kIFwiTlwiLlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycyA9IHt9O1xuXG4vKipcbiAqIFNlbGVjdCBhIGNvbG9yLlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2VsZWN0Q29sb3IobmFtZXNwYWNlKSB7XG4gIHZhciBoYXNoID0gMCwgaTtcblxuICBmb3IgKGkgaW4gbmFtZXNwYWNlKSB7XG4gICAgaGFzaCAgPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIG5hbWVzcGFjZS5jaGFyQ29kZUF0KGkpO1xuICAgIGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG4gIH1cblxuICByZXR1cm4gZXhwb3J0cy5jb2xvcnNbTWF0aC5hYnMoaGFzaCkgJSBleHBvcnRzLmNvbG9ycy5sZW5ndGhdO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIGRlYnVnZ2VyIHdpdGggdGhlIGdpdmVuIGBuYW1lc3BhY2VgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVEZWJ1ZyhuYW1lc3BhY2UpIHtcblxuICB2YXIgcHJldlRpbWU7XG5cbiAgZnVuY3Rpb24gZGVidWcoKSB7XG4gICAgLy8gZGlzYWJsZWQ/XG4gICAgaWYgKCFkZWJ1Zy5lbmFibGVkKSByZXR1cm47XG5cbiAgICB2YXIgc2VsZiA9IGRlYnVnO1xuXG4gICAgLy8gc2V0IGBkaWZmYCB0aW1lc3RhbXBcbiAgICB2YXIgY3VyciA9ICtuZXcgRGF0ZSgpO1xuICAgIHZhciBtcyA9IGN1cnIgLSAocHJldlRpbWUgfHwgY3Vycik7XG4gICAgc2VsZi5kaWZmID0gbXM7XG4gICAgc2VsZi5wcmV2ID0gcHJldlRpbWU7XG4gICAgc2VsZi5jdXJyID0gY3VycjtcbiAgICBwcmV2VGltZSA9IGN1cnI7XG5cbiAgICAvLyB0dXJuIHRoZSBgYXJndW1lbnRzYCBpbnRvIGEgcHJvcGVyIEFycmF5XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cblxuICAgIGFyZ3NbMF0gPSBleHBvcnRzLmNvZXJjZShhcmdzWzBdKTtcblxuICAgIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIGFyZ3NbMF0pIHtcbiAgICAgIC8vIGFueXRoaW5nIGVsc2UgbGV0J3MgaW5zcGVjdCB3aXRoICVPXG4gICAgICBhcmdzLnVuc2hpZnQoJyVPJyk7XG4gICAgfVxuXG4gICAgLy8gYXBwbHkgYW55IGBmb3JtYXR0ZXJzYCB0cmFuc2Zvcm1hdGlvbnNcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGFyZ3NbMF0gPSBhcmdzWzBdLnJlcGxhY2UoLyUoW2EtekEtWiVdKS9nLCBmdW5jdGlvbihtYXRjaCwgZm9ybWF0KSB7XG4gICAgICAvLyBpZiB3ZSBlbmNvdW50ZXIgYW4gZXNjYXBlZCAlIHRoZW4gZG9uJ3QgaW5jcmVhc2UgdGhlIGFycmF5IGluZGV4XG4gICAgICBpZiAobWF0Y2ggPT09ICclJScpIHJldHVybiBtYXRjaDtcbiAgICAgIGluZGV4Kys7XG4gICAgICB2YXIgZm9ybWF0dGVyID0gZXhwb3J0cy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG4gICAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGZvcm1hdHRlcikge1xuICAgICAgICB2YXIgdmFsID0gYXJnc1tpbmRleF07XG4gICAgICAgIG1hdGNoID0gZm9ybWF0dGVyLmNhbGwoc2VsZiwgdmFsKTtcblxuICAgICAgICAvLyBub3cgd2UgbmVlZCB0byByZW1vdmUgYGFyZ3NbaW5kZXhdYCBzaW5jZSBpdCdzIGlubGluZWQgaW4gdGhlIGBmb3JtYXRgXG4gICAgICAgIGFyZ3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgaW5kZXgtLTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KTtcblxuICAgIC8vIGFwcGx5IGVudi1zcGVjaWZpYyBmb3JtYXR0aW5nIChjb2xvcnMsIGV0Yy4pXG4gICAgZXhwb3J0cy5mb3JtYXRBcmdzLmNhbGwoc2VsZiwgYXJncyk7XG5cbiAgICB2YXIgbG9nRm4gPSBkZWJ1Zy5sb2cgfHwgZXhwb3J0cy5sb2cgfHwgY29uc29sZS5sb2cuYmluZChjb25zb2xlKTtcbiAgICBsb2dGbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgfVxuXG4gIGRlYnVnLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcbiAgZGVidWcuZW5hYmxlZCA9IGV4cG9ydHMuZW5hYmxlZChuYW1lc3BhY2UpO1xuICBkZWJ1Zy51c2VDb2xvcnMgPSBleHBvcnRzLnVzZUNvbG9ycygpO1xuICBkZWJ1Zy5jb2xvciA9IHNlbGVjdENvbG9yKG5hbWVzcGFjZSk7XG4gIGRlYnVnLmRlc3Ryb3kgPSBkZXN0cm95O1xuXG4gIC8vIGVudi1zcGVjaWZpYyBpbml0aWFsaXphdGlvbiBsb2dpYyBmb3IgZGVidWcgaW5zdGFuY2VzXG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZXhwb3J0cy5pbml0KSB7XG4gICAgZXhwb3J0cy5pbml0KGRlYnVnKTtcbiAgfVxuXG4gIGV4cG9ydHMuaW5zdGFuY2VzLnB1c2goZGVidWcpO1xuXG4gIHJldHVybiBkZWJ1Zztcbn1cblxuZnVuY3Rpb24gZGVzdHJveSAoKSB7XG4gIHZhciBpbmRleCA9IGV4cG9ydHMuaW5zdGFuY2VzLmluZGV4T2YodGhpcyk7XG4gIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICBleHBvcnRzLmluc3RhbmNlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEVuYWJsZXMgYSBkZWJ1ZyBtb2RlIGJ5IG5hbWVzcGFjZXMuIFRoaXMgY2FuIGluY2x1ZGUgbW9kZXNcbiAqIHNlcGFyYXRlZCBieSBhIGNvbG9uIGFuZCB3aWxkY2FyZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZW5hYmxlKG5hbWVzcGFjZXMpIHtcbiAgZXhwb3J0cy5zYXZlKG5hbWVzcGFjZXMpO1xuXG4gIGV4cG9ydHMubmFtZXMgPSBbXTtcbiAgZXhwb3J0cy5za2lwcyA9IFtdO1xuXG4gIHZhciBpO1xuICB2YXIgc3BsaXQgPSAodHlwZW9mIG5hbWVzcGFjZXMgPT09ICdzdHJpbmcnID8gbmFtZXNwYWNlcyA6ICcnKS5zcGxpdCgvW1xccyxdKy8pO1xuICB2YXIgbGVuID0gc3BsaXQubGVuZ3RoO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGlmICghc3BsaXRbaV0pIGNvbnRpbnVlOyAvLyBpZ25vcmUgZW1wdHkgc3RyaW5nc1xuICAgIG5hbWVzcGFjZXMgPSBzcGxpdFtpXS5yZXBsYWNlKC9cXCovZywgJy4qPycpO1xuICAgIGlmIChuYW1lc3BhY2VzWzBdID09PSAnLScpIHtcbiAgICAgIGV4cG9ydHMuc2tpcHMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMuc3Vic3RyKDEpICsgJyQnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMubmFtZXMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMgKyAnJCcpKTtcbiAgICB9XG4gIH1cblxuICBmb3IgKGkgPSAwOyBpIDwgZXhwb3J0cy5pbnN0YW5jZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBleHBvcnRzLmluc3RhbmNlc1tpXTtcbiAgICBpbnN0YW5jZS5lbmFibGVkID0gZXhwb3J0cy5lbmFibGVkKGluc3RhbmNlLm5hbWVzcGFjZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNhYmxlIGRlYnVnIG91dHB1dC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gIGV4cG9ydHMuZW5hYmxlKCcnKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIG1vZGUgbmFtZSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGVuYWJsZWQobmFtZSkge1xuICBpZiAobmFtZVtuYW1lLmxlbmd0aCAtIDFdID09PSAnKicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgaSwgbGVuO1xuICBmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLnNraXBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGV4cG9ydHMuc2tpcHNbaV0udGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICBmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLm5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGV4cG9ydHMubmFtZXNbaV0udGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBDb2VyY2UgYHZhbGAuXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gdmFsXG4gKiBAcmV0dXJuIHtNaXhlZH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvZXJjZSh2YWwpIHtcbiAgaWYgKHZhbCBpbnN0YW5jZW9mIEVycm9yKSByZXR1cm4gdmFsLnN0YWNrIHx8IHZhbC5tZXNzYWdlO1xuICByZXR1cm4gdmFsO1xufVxuIiwiLypnbG9iYWwgQmxvYixGaWxlKi9cblxuLyoqXG4gKiBNb2R1bGUgcmVxdWlyZW1lbnRzXG4gKi9cblxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7XG52YXIgaXNCdWYgPSByZXF1aXJlKCcuL2lzLWJ1ZmZlcicpO1xudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciB3aXRoTmF0aXZlQmxvYiA9IHR5cGVvZiBCbG9iID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcgJiYgdG9TdHJpbmcuY2FsbChCbG9iKSA9PT0gJ1tvYmplY3QgQmxvYkNvbnN0cnVjdG9yXScpO1xudmFyIHdpdGhOYXRpdmVGaWxlID0gdHlwZW9mIEZpbGUgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBGaWxlICE9PSAndW5kZWZpbmVkJyAmJiB0b1N0cmluZy5jYWxsKEZpbGUpID09PSAnW29iamVjdCBGaWxlQ29uc3RydWN0b3JdJyk7XG5cbi8qKlxuICogUmVwbGFjZXMgZXZlcnkgQnVmZmVyIHwgQXJyYXlCdWZmZXIgaW4gcGFja2V0IHdpdGggYSBudW1iZXJlZCBwbGFjZWhvbGRlci5cbiAqIEFueXRoaW5nIHdpdGggYmxvYnMgb3IgZmlsZXMgc2hvdWxkIGJlIGZlZCB0aHJvdWdoIHJlbW92ZUJsb2JzIGJlZm9yZSBjb21pbmdcbiAqIGhlcmUuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldCAtIHNvY2tldC5pbyBldmVudCBwYWNrZXRcbiAqIEByZXR1cm4ge09iamVjdH0gd2l0aCBkZWNvbnN0cnVjdGVkIHBhY2tldCBhbmQgbGlzdCBvZiBidWZmZXJzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMuZGVjb25zdHJ1Y3RQYWNrZXQgPSBmdW5jdGlvbihwYWNrZXQpIHtcbiAgdmFyIGJ1ZmZlcnMgPSBbXTtcbiAgdmFyIHBhY2tldERhdGEgPSBwYWNrZXQuZGF0YTtcbiAgdmFyIHBhY2sgPSBwYWNrZXQ7XG4gIHBhY2suZGF0YSA9IF9kZWNvbnN0cnVjdFBhY2tldChwYWNrZXREYXRhLCBidWZmZXJzKTtcbiAgcGFjay5hdHRhY2htZW50cyA9IGJ1ZmZlcnMubGVuZ3RoOyAvLyBudW1iZXIgb2YgYmluYXJ5ICdhdHRhY2htZW50cydcbiAgcmV0dXJuIHtwYWNrZXQ6IHBhY2ssIGJ1ZmZlcnM6IGJ1ZmZlcnN9O1xufTtcblxuZnVuY3Rpb24gX2RlY29uc3RydWN0UGFja2V0KGRhdGEsIGJ1ZmZlcnMpIHtcbiAgaWYgKCFkYXRhKSByZXR1cm4gZGF0YTtcblxuICBpZiAoaXNCdWYoZGF0YSkpIHtcbiAgICB2YXIgcGxhY2Vob2xkZXIgPSB7IF9wbGFjZWhvbGRlcjogdHJ1ZSwgbnVtOiBidWZmZXJzLmxlbmd0aCB9O1xuICAgIGJ1ZmZlcnMucHVzaChkYXRhKTtcbiAgICByZXR1cm4gcGxhY2Vob2xkZXI7XG4gIH0gZWxzZSBpZiAoaXNBcnJheShkYXRhKSkge1xuICAgIHZhciBuZXdEYXRhID0gbmV3IEFycmF5KGRhdGEubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5ld0RhdGFbaV0gPSBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtpXSwgYnVmZmVycyk7XG4gICAgfVxuICAgIHJldHVybiBuZXdEYXRhO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0JyAmJiAhKGRhdGEgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgIHZhciBuZXdEYXRhID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgIG5ld0RhdGFba2V5XSA9IF9kZWNvbnN0cnVjdFBhY2tldChkYXRhW2tleV0sIGJ1ZmZlcnMpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3RGF0YTtcbiAgfVxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBSZWNvbnN0cnVjdHMgYSBiaW5hcnkgcGFja2V0IGZyb20gaXRzIHBsYWNlaG9sZGVyIHBhY2tldCBhbmQgYnVmZmVyc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXQgLSBldmVudCBwYWNrZXQgd2l0aCBwbGFjZWhvbGRlcnNcbiAqIEBwYXJhbSB7QXJyYXl9IGJ1ZmZlcnMgLSBiaW5hcnkgYnVmZmVycyB0byBwdXQgaW4gcGxhY2Vob2xkZXIgcG9zaXRpb25zXG4gKiBAcmV0dXJuIHtPYmplY3R9IHJlY29uc3RydWN0ZWQgcGFja2V0XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmV4cG9ydHMucmVjb25zdHJ1Y3RQYWNrZXQgPSBmdW5jdGlvbihwYWNrZXQsIGJ1ZmZlcnMpIHtcbiAgcGFja2V0LmRhdGEgPSBfcmVjb25zdHJ1Y3RQYWNrZXQocGFja2V0LmRhdGEsIGJ1ZmZlcnMpO1xuICBwYWNrZXQuYXR0YWNobWVudHMgPSB1bmRlZmluZWQ7IC8vIG5vIGxvbmdlciB1c2VmdWxcbiAgcmV0dXJuIHBhY2tldDtcbn07XG5cbmZ1bmN0aW9uIF9yZWNvbnN0cnVjdFBhY2tldChkYXRhLCBidWZmZXJzKSB7XG4gIGlmICghZGF0YSkgcmV0dXJuIGRhdGE7XG5cbiAgaWYgKGRhdGEgJiYgZGF0YS5fcGxhY2Vob2xkZXIpIHtcbiAgICByZXR1cm4gYnVmZmVyc1tkYXRhLm51bV07IC8vIGFwcHJvcHJpYXRlIGJ1ZmZlciAoc2hvdWxkIGJlIG5hdHVyYWwgb3JkZXIgYW55d2F5KVxuICB9IGVsc2UgaWYgKGlzQXJyYXkoZGF0YSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRhdGFbaV0gPSBfcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtpXSwgYnVmZmVycyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0Jykge1xuICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICBkYXRhW2tleV0gPSBfcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtrZXldLCBidWZmZXJzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBBc3luY2hyb25vdXNseSByZW1vdmVzIEJsb2JzIG9yIEZpbGVzIGZyb20gZGF0YSB2aWFcbiAqIEZpbGVSZWFkZXIncyByZWFkQXNBcnJheUJ1ZmZlciBtZXRob2QuIFVzZWQgYmVmb3JlIGVuY29kaW5nXG4gKiBkYXRhIGFzIG1zZ3BhY2suIENhbGxzIGNhbGxiYWNrIHdpdGggdGhlIGJsb2JsZXNzIGRhdGEuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLnJlbW92ZUJsb2JzID0gZnVuY3Rpb24oZGF0YSwgY2FsbGJhY2spIHtcbiAgZnVuY3Rpb24gX3JlbW92ZUJsb2JzKG9iaiwgY3VyS2V5LCBjb250YWluaW5nT2JqZWN0KSB7XG4gICAgaWYgKCFvYmopIHJldHVybiBvYmo7XG5cbiAgICAvLyBjb252ZXJ0IGFueSBibG9iXG4gICAgaWYgKCh3aXRoTmF0aXZlQmxvYiAmJiBvYmogaW5zdGFuY2VvZiBCbG9iKSB8fFxuICAgICAgICAod2l0aE5hdGl2ZUZpbGUgJiYgb2JqIGluc3RhbmNlb2YgRmlsZSkpIHtcbiAgICAgIHBlbmRpbmdCbG9icysrO1xuXG4gICAgICAvLyBhc3luYyBmaWxlcmVhZGVyXG4gICAgICB2YXIgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICBmaWxlUmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkgeyAvLyB0aGlzLnJlc3VsdCA9PSBhcnJheWJ1ZmZlclxuICAgICAgICBpZiAoY29udGFpbmluZ09iamVjdCkge1xuICAgICAgICAgIGNvbnRhaW5pbmdPYmplY3RbY3VyS2V5XSA9IHRoaXMucmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGJsb2JsZXNzRGF0YSA9IHRoaXMucmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgbm90aGluZyBwZW5kaW5nIGl0cyBjYWxsYmFjayB0aW1lXG4gICAgICAgIGlmKCEgLS1wZW5kaW5nQmxvYnMpIHtcbiAgICAgICAgICBjYWxsYmFjayhibG9ibGVzc0RhdGEpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBmaWxlUmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKG9iaik7IC8vIGJsb2IgLT4gYXJyYXlidWZmZXJcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkob2JqKSkgeyAvLyBoYW5kbGUgYXJyYXlcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIF9yZW1vdmVCbG9icyhvYmpbaV0sIGksIG9iaik7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiAhaXNCdWYob2JqKSkgeyAvLyBhbmQgb2JqZWN0XG4gICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICAgIF9yZW1vdmVCbG9icyhvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBwZW5kaW5nQmxvYnMgPSAwO1xuICB2YXIgYmxvYmxlc3NEYXRhID0gZGF0YTtcbiAgX3JlbW92ZUJsb2JzKGJsb2JsZXNzRGF0YSk7XG4gIGlmICghcGVuZGluZ0Jsb2JzKSB7XG4gICAgY2FsbGJhY2soYmxvYmxlc3NEYXRhKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsoXG4gICAgICB1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpXG4gICAgKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCJcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9zb2NrZXQnKTtcblxuLyoqXG4gKiBFeHBvcnRzIHBhcnNlclxuICpcbiAqIEBhcGkgcHVibGljXG4gKlxuICovXG5tb2R1bGUuZXhwb3J0cy5wYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG4iLCIvKipcbiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuXG4gKi9cblxudmFyIHRyYW5zcG9ydHMgPSByZXF1aXJlKCcuL3RyYW5zcG9ydHMvaW5kZXgnKTtcbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTtcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2VuZ2luZS5pby1jbGllbnQ6c29ja2V0Jyk7XG52YXIgaW5kZXggPSByZXF1aXJlKCdpbmRleG9mJyk7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xudmFyIHBhcnNldXJpID0gcmVxdWlyZSgncGFyc2V1cmknKTtcbnZhciBwYXJzZXFzID0gcmVxdWlyZSgncGFyc2VxcycpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gU29ja2V0O1xuXG4vKipcbiAqIFNvY2tldCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IHVyaSBvciBvcHRpb25zXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBTb2NrZXQgKHVyaSwgb3B0cykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU29ja2V0KSkgcmV0dXJuIG5ldyBTb2NrZXQodXJpLCBvcHRzKTtcblxuICBvcHRzID0gb3B0cyB8fCB7fTtcblxuICBpZiAodXJpICYmICdvYmplY3QnID09PSB0eXBlb2YgdXJpKSB7XG4gICAgb3B0cyA9IHVyaTtcbiAgICB1cmkgPSBudWxsO1xuICB9XG5cbiAgaWYgKHVyaSkge1xuICAgIHVyaSA9IHBhcnNldXJpKHVyaSk7XG4gICAgb3B0cy5ob3N0bmFtZSA9IHVyaS5ob3N0O1xuICAgIG9wdHMuc2VjdXJlID0gdXJpLnByb3RvY29sID09PSAnaHR0cHMnIHx8IHVyaS5wcm90b2NvbCA9PT0gJ3dzcyc7XG4gICAgb3B0cy5wb3J0ID0gdXJpLnBvcnQ7XG4gICAgaWYgKHVyaS5xdWVyeSkgb3B0cy5xdWVyeSA9IHVyaS5xdWVyeTtcbiAgfSBlbHNlIGlmIChvcHRzLmhvc3QpIHtcbiAgICBvcHRzLmhvc3RuYW1lID0gcGFyc2V1cmkob3B0cy5ob3N0KS5ob3N0O1xuICB9XG5cbiAgdGhpcy5zZWN1cmUgPSBudWxsICE9IG9wdHMuc2VjdXJlID8gb3B0cy5zZWN1cmVcbiAgICA6ICh0eXBlb2YgbG9jYXRpb24gIT09ICd1bmRlZmluZWQnICYmICdodHRwczonID09PSBsb2NhdGlvbi5wcm90b2NvbCk7XG5cbiAgaWYgKG9wdHMuaG9zdG5hbWUgJiYgIW9wdHMucG9ydCkge1xuICAgIC8vIGlmIG5vIHBvcnQgaXMgc3BlY2lmaWVkIG1hbnVhbGx5LCB1c2UgdGhlIHByb3RvY29sIGRlZmF1bHRcbiAgICBvcHRzLnBvcnQgPSB0aGlzLnNlY3VyZSA/ICc0NDMnIDogJzgwJztcbiAgfVxuXG4gIHRoaXMuYWdlbnQgPSBvcHRzLmFnZW50IHx8IGZhbHNlO1xuICB0aGlzLmhvc3RuYW1lID0gb3B0cy5ob3N0bmFtZSB8fFxuICAgICh0eXBlb2YgbG9jYXRpb24gIT09ICd1bmRlZmluZWQnID8gbG9jYXRpb24uaG9zdG5hbWUgOiAnbG9jYWxob3N0Jyk7XG4gIHRoaXMucG9ydCA9IG9wdHMucG9ydCB8fCAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJyAmJiBsb2NhdGlvbi5wb3J0XG4gICAgICA/IGxvY2F0aW9uLnBvcnRcbiAgICAgIDogKHRoaXMuc2VjdXJlID8gNDQzIDogODApKTtcbiAgdGhpcy5xdWVyeSA9IG9wdHMucXVlcnkgfHwge307XG4gIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIHRoaXMucXVlcnkpIHRoaXMucXVlcnkgPSBwYXJzZXFzLmRlY29kZSh0aGlzLnF1ZXJ5KTtcbiAgdGhpcy51cGdyYWRlID0gZmFsc2UgIT09IG9wdHMudXBncmFkZTtcbiAgdGhpcy5wYXRoID0gKG9wdHMucGF0aCB8fCAnL2VuZ2luZS5pbycpLnJlcGxhY2UoL1xcLyQvLCAnJykgKyAnLyc7XG4gIHRoaXMuZm9yY2VKU09OUCA9ICEhb3B0cy5mb3JjZUpTT05QO1xuICB0aGlzLmpzb25wID0gZmFsc2UgIT09IG9wdHMuanNvbnA7XG4gIHRoaXMuZm9yY2VCYXNlNjQgPSAhIW9wdHMuZm9yY2VCYXNlNjQ7XG4gIHRoaXMuZW5hYmxlc1hEUiA9ICEhb3B0cy5lbmFibGVzWERSO1xuICB0aGlzLnRpbWVzdGFtcFBhcmFtID0gb3B0cy50aW1lc3RhbXBQYXJhbSB8fCAndCc7XG4gIHRoaXMudGltZXN0YW1wUmVxdWVzdHMgPSBvcHRzLnRpbWVzdGFtcFJlcXVlc3RzO1xuICB0aGlzLnRyYW5zcG9ydHMgPSBvcHRzLnRyYW5zcG9ydHMgfHwgWydwb2xsaW5nJywgJ3dlYnNvY2tldCddO1xuICB0aGlzLnRyYW5zcG9ydE9wdGlvbnMgPSBvcHRzLnRyYW5zcG9ydE9wdGlvbnMgfHwge307XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICcnO1xuICB0aGlzLndyaXRlQnVmZmVyID0gW107XG4gIHRoaXMucHJldkJ1ZmZlckxlbiA9IDA7XG4gIHRoaXMucG9saWN5UG9ydCA9IG9wdHMucG9saWN5UG9ydCB8fCA4NDM7XG4gIHRoaXMucmVtZW1iZXJVcGdyYWRlID0gb3B0cy5yZW1lbWJlclVwZ3JhZGUgfHwgZmFsc2U7XG4gIHRoaXMuYmluYXJ5VHlwZSA9IG51bGw7XG4gIHRoaXMub25seUJpbmFyeVVwZ3JhZGVzID0gb3B0cy5vbmx5QmluYXJ5VXBncmFkZXM7XG4gIHRoaXMucGVyTWVzc2FnZURlZmxhdGUgPSBmYWxzZSAhPT0gb3B0cy5wZXJNZXNzYWdlRGVmbGF0ZSA/IChvcHRzLnBlck1lc3NhZ2VEZWZsYXRlIHx8IHt9KSA6IGZhbHNlO1xuXG4gIGlmICh0cnVlID09PSB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlKSB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlID0ge307XG4gIGlmICh0aGlzLnBlck1lc3NhZ2VEZWZsYXRlICYmIG51bGwgPT0gdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZS50aHJlc2hvbGQpIHtcbiAgICB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlLnRocmVzaG9sZCA9IDEwMjQ7XG4gIH1cblxuICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgdGhpcy5wZnggPSBvcHRzLnBmeCB8fCBudWxsO1xuICB0aGlzLmtleSA9IG9wdHMua2V5IHx8IG51bGw7XG4gIHRoaXMucGFzc3BocmFzZSA9IG9wdHMucGFzc3BocmFzZSB8fCBudWxsO1xuICB0aGlzLmNlcnQgPSBvcHRzLmNlcnQgfHwgbnVsbDtcbiAgdGhpcy5jYSA9IG9wdHMuY2EgfHwgbnVsbDtcbiAgdGhpcy5jaXBoZXJzID0gb3B0cy5jaXBoZXJzIHx8IG51bGw7XG4gIHRoaXMucmVqZWN0VW5hdXRob3JpemVkID0gb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBvcHRzLnJlamVjdFVuYXV0aG9yaXplZDtcbiAgdGhpcy5mb3JjZU5vZGUgPSAhIW9wdHMuZm9yY2VOb2RlO1xuXG4gIC8vIGRldGVjdCBSZWFjdE5hdGl2ZSBlbnZpcm9ubWVudFxuICB0aGlzLmlzUmVhY3ROYXRpdmUgPSAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnc3RyaW5nJyAmJiBuYXZpZ2F0b3IucHJvZHVjdC50b0xvd2VyQ2FzZSgpID09PSAncmVhY3RuYXRpdmUnKTtcblxuICAvLyBvdGhlciBvcHRpb25zIGZvciBOb2RlLmpzIG9yIFJlYWN0TmF0aXZlIGNsaWVudFxuICBpZiAodHlwZW9mIHNlbGYgPT09ICd1bmRlZmluZWQnIHx8IHRoaXMuaXNSZWFjdE5hdGl2ZSkge1xuICAgIGlmIChvcHRzLmV4dHJhSGVhZGVycyAmJiBPYmplY3Qua2V5cyhvcHRzLmV4dHJhSGVhZGVycykubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5leHRyYUhlYWRlcnMgPSBvcHRzLmV4dHJhSGVhZGVycztcbiAgICB9XG5cbiAgICBpZiAob3B0cy5sb2NhbEFkZHJlc3MpIHtcbiAgICAgIHRoaXMubG9jYWxBZGRyZXNzID0gb3B0cy5sb2NhbEFkZHJlc3M7XG4gICAgfVxuICB9XG5cbiAgLy8gc2V0IG9uIGhhbmRzaGFrZVxuICB0aGlzLmlkID0gbnVsbDtcbiAgdGhpcy51cGdyYWRlcyA9IG51bGw7XG4gIHRoaXMucGluZ0ludGVydmFsID0gbnVsbDtcbiAgdGhpcy5waW5nVGltZW91dCA9IG51bGw7XG5cbiAgLy8gc2V0IG9uIGhlYXJ0YmVhdFxuICB0aGlzLnBpbmdJbnRlcnZhbFRpbWVyID0gbnVsbDtcbiAgdGhpcy5waW5nVGltZW91dFRpbWVyID0gbnVsbDtcblxuICB0aGlzLm9wZW4oKTtcbn1cblxuU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9IGZhbHNlO1xuXG4vKipcbiAqIE1peCBpbiBgRW1pdHRlcmAuXG4gKi9cblxuRW1pdHRlcihTb2NrZXQucHJvdG90eXBlKTtcblxuLyoqXG4gKiBQcm90b2NvbCB2ZXJzaW9uLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuU29ja2V0LnByb3RvY29sID0gcGFyc2VyLnByb3RvY29sOyAvLyB0aGlzIGlzIGFuIGludFxuXG4vKipcbiAqIEV4cG9zZSBkZXBzIGZvciBsZWdhY3kgY29tcGF0aWJpbGl0eVxuICogYW5kIHN0YW5kYWxvbmUgYnJvd3NlciBhY2Nlc3MuXG4gKi9cblxuU29ja2V0LlNvY2tldCA9IFNvY2tldDtcblNvY2tldC5UcmFuc3BvcnQgPSByZXF1aXJlKCcuL3RyYW5zcG9ydCcpO1xuU29ja2V0LnRyYW5zcG9ydHMgPSByZXF1aXJlKCcuL3RyYW5zcG9ydHMvaW5kZXgnKTtcblNvY2tldC5wYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7XG5cbi8qKlxuICogQ3JlYXRlcyB0cmFuc3BvcnQgb2YgdGhlIGdpdmVuIHR5cGUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHRyYW5zcG9ydCBuYW1lXG4gKiBAcmV0dXJuIHtUcmFuc3BvcnR9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmNyZWF0ZVRyYW5zcG9ydCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGRlYnVnKCdjcmVhdGluZyB0cmFuc3BvcnQgXCIlc1wiJywgbmFtZSk7XG4gIHZhciBxdWVyeSA9IGNsb25lKHRoaXMucXVlcnkpO1xuXG4gIC8vIGFwcGVuZCBlbmdpbmUuaW8gcHJvdG9jb2wgaWRlbnRpZmllclxuICBxdWVyeS5FSU8gPSBwYXJzZXIucHJvdG9jb2w7XG5cbiAgLy8gdHJhbnNwb3J0IG5hbWVcbiAgcXVlcnkudHJhbnNwb3J0ID0gbmFtZTtcblxuICAvLyBwZXItdHJhbnNwb3J0IG9wdGlvbnNcbiAgdmFyIG9wdGlvbnMgPSB0aGlzLnRyYW5zcG9ydE9wdGlvbnNbbmFtZV0gfHwge307XG5cbiAgLy8gc2Vzc2lvbiBpZCBpZiB3ZSBhbHJlYWR5IGhhdmUgb25lXG4gIGlmICh0aGlzLmlkKSBxdWVyeS5zaWQgPSB0aGlzLmlkO1xuXG4gIHZhciB0cmFuc3BvcnQgPSBuZXcgdHJhbnNwb3J0c1tuYW1lXSh7XG4gICAgcXVlcnk6IHF1ZXJ5LFxuICAgIHNvY2tldDogdGhpcyxcbiAgICBhZ2VudDogb3B0aW9ucy5hZ2VudCB8fCB0aGlzLmFnZW50LFxuICAgIGhvc3RuYW1lOiBvcHRpb25zLmhvc3RuYW1lIHx8IHRoaXMuaG9zdG5hbWUsXG4gICAgcG9ydDogb3B0aW9ucy5wb3J0IHx8IHRoaXMucG9ydCxcbiAgICBzZWN1cmU6IG9wdGlvbnMuc2VjdXJlIHx8IHRoaXMuc2VjdXJlLFxuICAgIHBhdGg6IG9wdGlvbnMucGF0aCB8fCB0aGlzLnBhdGgsXG4gICAgZm9yY2VKU09OUDogb3B0aW9ucy5mb3JjZUpTT05QIHx8IHRoaXMuZm9yY2VKU09OUCxcbiAgICBqc29ucDogb3B0aW9ucy5qc29ucCB8fCB0aGlzLmpzb25wLFxuICAgIGZvcmNlQmFzZTY0OiBvcHRpb25zLmZvcmNlQmFzZTY0IHx8IHRoaXMuZm9yY2VCYXNlNjQsXG4gICAgZW5hYmxlc1hEUjogb3B0aW9ucy5lbmFibGVzWERSIHx8IHRoaXMuZW5hYmxlc1hEUixcbiAgICB0aW1lc3RhbXBSZXF1ZXN0czogb3B0aW9ucy50aW1lc3RhbXBSZXF1ZXN0cyB8fCB0aGlzLnRpbWVzdGFtcFJlcXVlc3RzLFxuICAgIHRpbWVzdGFtcFBhcmFtOiBvcHRpb25zLnRpbWVzdGFtcFBhcmFtIHx8IHRoaXMudGltZXN0YW1wUGFyYW0sXG4gICAgcG9saWN5UG9ydDogb3B0aW9ucy5wb2xpY3lQb3J0IHx8IHRoaXMucG9saWN5UG9ydCxcbiAgICBwZng6IG9wdGlvbnMucGZ4IHx8IHRoaXMucGZ4LFxuICAgIGtleTogb3B0aW9ucy5rZXkgfHwgdGhpcy5rZXksXG4gICAgcGFzc3BocmFzZTogb3B0aW9ucy5wYXNzcGhyYXNlIHx8IHRoaXMucGFzc3BocmFzZSxcbiAgICBjZXJ0OiBvcHRpb25zLmNlcnQgfHwgdGhpcy5jZXJ0LFxuICAgIGNhOiBvcHRpb25zLmNhIHx8IHRoaXMuY2EsXG4gICAgY2lwaGVyczogb3B0aW9ucy5jaXBoZXJzIHx8IHRoaXMuY2lwaGVycyxcbiAgICByZWplY3RVbmF1dGhvcml6ZWQ6IG9wdGlvbnMucmVqZWN0VW5hdXRob3JpemVkIHx8IHRoaXMucmVqZWN0VW5hdXRob3JpemVkLFxuICAgIHBlck1lc3NhZ2VEZWZsYXRlOiBvcHRpb25zLnBlck1lc3NhZ2VEZWZsYXRlIHx8IHRoaXMucGVyTWVzc2FnZURlZmxhdGUsXG4gICAgZXh0cmFIZWFkZXJzOiBvcHRpb25zLmV4dHJhSGVhZGVycyB8fCB0aGlzLmV4dHJhSGVhZGVycyxcbiAgICBmb3JjZU5vZGU6IG9wdGlvbnMuZm9yY2VOb2RlIHx8IHRoaXMuZm9yY2VOb2RlLFxuICAgIGxvY2FsQWRkcmVzczogb3B0aW9ucy5sb2NhbEFkZHJlc3MgfHwgdGhpcy5sb2NhbEFkZHJlc3MsXG4gICAgcmVxdWVzdFRpbWVvdXQ6IG9wdGlvbnMucmVxdWVzdFRpbWVvdXQgfHwgdGhpcy5yZXF1ZXN0VGltZW91dCxcbiAgICBwcm90b2NvbHM6IG9wdGlvbnMucHJvdG9jb2xzIHx8IHZvaWQgKDApLFxuICAgIGlzUmVhY3ROYXRpdmU6IHRoaXMuaXNSZWFjdE5hdGl2ZVxuICB9KTtcblxuICByZXR1cm4gdHJhbnNwb3J0O1xufTtcblxuZnVuY3Rpb24gY2xvbmUgKG9iaikge1xuICB2YXIgbyA9IHt9O1xuICBmb3IgKHZhciBpIGluIG9iaikge1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgIG9baV0gPSBvYmpbaV07XG4gICAgfVxuICB9XG4gIHJldHVybiBvO1xufVxuXG4vKipcbiAqIEluaXRpYWxpemVzIHRyYW5zcG9ydCB0byB1c2UgYW5kIHN0YXJ0cyBwcm9iZS5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuU29ja2V0LnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdHJhbnNwb3J0O1xuICBpZiAodGhpcy5yZW1lbWJlclVwZ3JhZGUgJiYgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyAmJiB0aGlzLnRyYW5zcG9ydHMuaW5kZXhPZignd2Vic29ja2V0JykgIT09IC0xKSB7XG4gICAgdHJhbnNwb3J0ID0gJ3dlYnNvY2tldCc7XG4gIH0gZWxzZSBpZiAoMCA9PT0gdGhpcy50cmFuc3BvcnRzLmxlbmd0aCkge1xuICAgIC8vIEVtaXQgZXJyb3Igb24gbmV4dCB0aWNrIHNvIGl0IGNhbiBiZSBsaXN0ZW5lZCB0b1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYuZW1pdCgnZXJyb3InLCAnTm8gdHJhbnNwb3J0cyBhdmFpbGFibGUnKTtcbiAgICB9LCAwKTtcbiAgICByZXR1cm47XG4gIH0gZWxzZSB7XG4gICAgdHJhbnNwb3J0ID0gdGhpcy50cmFuc3BvcnRzWzBdO1xuICB9XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuaW5nJztcblxuICAvLyBSZXRyeSB3aXRoIHRoZSBuZXh0IHRyYW5zcG9ydCBpZiB0aGUgdHJhbnNwb3J0IGlzIGRpc2FibGVkIChqc29ucDogZmFsc2UpXG4gIHRyeSB7XG4gICAgdHJhbnNwb3J0ID0gdGhpcy5jcmVhdGVUcmFuc3BvcnQodHJhbnNwb3J0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRoaXMudHJhbnNwb3J0cy5zaGlmdCgpO1xuICAgIHRoaXMub3BlbigpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRyYW5zcG9ydC5vcGVuKCk7XG4gIHRoaXMuc2V0VHJhbnNwb3J0KHRyYW5zcG9ydCk7XG59O1xuXG4vKipcbiAqIFNldHMgdGhlIGN1cnJlbnQgdHJhbnNwb3J0LiBEaXNhYmxlcyB0aGUgZXhpc3Rpbmcgb25lIChpZiBhbnkpLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUuc2V0VHJhbnNwb3J0ID0gZnVuY3Rpb24gKHRyYW5zcG9ydCkge1xuICBkZWJ1Zygnc2V0dGluZyB0cmFuc3BvcnQgJXMnLCB0cmFuc3BvcnQubmFtZSk7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICBpZiAodGhpcy50cmFuc3BvcnQpIHtcbiAgICBkZWJ1ZygnY2xlYXJpbmcgZXhpc3RpbmcgdHJhbnNwb3J0ICVzJywgdGhpcy50cmFuc3BvcnQubmFtZSk7XG4gICAgdGhpcy50cmFuc3BvcnQucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gIH1cblxuICAvLyBzZXQgdXAgdHJhbnNwb3J0XG4gIHRoaXMudHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuXG4gIC8vIHNldCB1cCB0cmFuc3BvcnQgbGlzdGVuZXJzXG4gIHRyYW5zcG9ydFxuICAub24oJ2RyYWluJywgZnVuY3Rpb24gKCkge1xuICAgIHNlbGYub25EcmFpbigpO1xuICB9KVxuICAub24oJ3BhY2tldCcsIGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgICBzZWxmLm9uUGFja2V0KHBhY2tldCk7XG4gIH0pXG4gIC5vbignZXJyb3InLCBmdW5jdGlvbiAoZSkge1xuICAgIHNlbGYub25FcnJvcihlKTtcbiAgfSlcbiAgLm9uKCdjbG9zZScsIGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9uQ2xvc2UoJ3RyYW5zcG9ydCBjbG9zZScpO1xuICB9KTtcbn07XG5cbi8qKlxuICogUHJvYmVzIGEgdHJhbnNwb3J0LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB0cmFuc3BvcnQgbmFtZVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5wcm9iZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGRlYnVnKCdwcm9iaW5nIHRyYW5zcG9ydCBcIiVzXCInLCBuYW1lKTtcbiAgdmFyIHRyYW5zcG9ydCA9IHRoaXMuY3JlYXRlVHJhbnNwb3J0KG5hbWUsIHsgcHJvYmU6IDEgfSk7XG4gIHZhciBmYWlsZWQgPSBmYWxzZTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBvblRyYW5zcG9ydE9wZW4gKCkge1xuICAgIGlmIChzZWxmLm9ubHlCaW5hcnlVcGdyYWRlcykge1xuICAgICAgdmFyIHVwZ3JhZGVMb3Nlc0JpbmFyeSA9ICF0aGlzLnN1cHBvcnRzQmluYXJ5ICYmIHNlbGYudHJhbnNwb3J0LnN1cHBvcnRzQmluYXJ5O1xuICAgICAgZmFpbGVkID0gZmFpbGVkIHx8IHVwZ3JhZGVMb3Nlc0JpbmFyeTtcbiAgICB9XG4gICAgaWYgKGZhaWxlZCkgcmV0dXJuO1xuXG4gICAgZGVidWcoJ3Byb2JlIHRyYW5zcG9ydCBcIiVzXCIgb3BlbmVkJywgbmFtZSk7XG4gICAgdHJhbnNwb3J0LnNlbmQoW3sgdHlwZTogJ3BpbmcnLCBkYXRhOiAncHJvYmUnIH1dKTtcbiAgICB0cmFuc3BvcnQub25jZSgncGFja2V0JywgZnVuY3Rpb24gKG1zZykge1xuICAgICAgaWYgKGZhaWxlZCkgcmV0dXJuO1xuICAgICAgaWYgKCdwb25nJyA9PT0gbXNnLnR5cGUgJiYgJ3Byb2JlJyA9PT0gbXNnLmRhdGEpIHtcbiAgICAgICAgZGVidWcoJ3Byb2JlIHRyYW5zcG9ydCBcIiVzXCIgcG9uZycsIG5hbWUpO1xuICAgICAgICBzZWxmLnVwZ3JhZGluZyA9IHRydWU7XG4gICAgICAgIHNlbGYuZW1pdCgndXBncmFkaW5nJywgdHJhbnNwb3J0KTtcbiAgICAgICAgaWYgKCF0cmFuc3BvcnQpIHJldHVybjtcbiAgICAgICAgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9ICd3ZWJzb2NrZXQnID09PSB0cmFuc3BvcnQubmFtZTtcblxuICAgICAgICBkZWJ1ZygncGF1c2luZyBjdXJyZW50IHRyYW5zcG9ydCBcIiVzXCInLCBzZWxmLnRyYW5zcG9ydC5uYW1lKTtcbiAgICAgICAgc2VsZi50cmFuc3BvcnQucGF1c2UoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChmYWlsZWQpIHJldHVybjtcbiAgICAgICAgICBpZiAoJ2Nsb3NlZCcgPT09IHNlbGYucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICAgICAgICAgIGRlYnVnKCdjaGFuZ2luZyB0cmFuc3BvcnQgYW5kIHNlbmRpbmcgdXBncmFkZSBwYWNrZXQnKTtcblxuICAgICAgICAgIGNsZWFudXAoKTtcblxuICAgICAgICAgIHNlbGYuc2V0VHJhbnNwb3J0KHRyYW5zcG9ydCk7XG4gICAgICAgICAgdHJhbnNwb3J0LnNlbmQoW3sgdHlwZTogJ3VwZ3JhZGUnIH1dKTtcbiAgICAgICAgICBzZWxmLmVtaXQoJ3VwZ3JhZGUnLCB0cmFuc3BvcnQpO1xuICAgICAgICAgIHRyYW5zcG9ydCA9IG51bGw7XG4gICAgICAgICAgc2VsZi51cGdyYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICBzZWxmLmZsdXNoKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVidWcoJ3Byb2JlIHRyYW5zcG9ydCBcIiVzXCIgZmFpbGVkJywgbmFtZSk7XG4gICAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ3Byb2JlIGVycm9yJyk7XG4gICAgICAgIGVyci50cmFuc3BvcnQgPSB0cmFuc3BvcnQubmFtZTtcbiAgICAgICAgc2VsZi5lbWl0KCd1cGdyYWRlRXJyb3InLCBlcnIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZnJlZXplVHJhbnNwb3J0ICgpIHtcbiAgICBpZiAoZmFpbGVkKSByZXR1cm47XG5cbiAgICAvLyBBbnkgY2FsbGJhY2sgY2FsbGVkIGJ5IHRyYW5zcG9ydCBzaG91bGQgYmUgaWdub3JlZCBzaW5jZSBub3dcbiAgICBmYWlsZWQgPSB0cnVlO1xuXG4gICAgY2xlYW51cCgpO1xuXG4gICAgdHJhbnNwb3J0LmNsb3NlKCk7XG4gICAgdHJhbnNwb3J0ID0gbnVsbDtcbiAgfVxuXG4gIC8vIEhhbmRsZSBhbnkgZXJyb3IgdGhhdCBoYXBwZW5zIHdoaWxlIHByb2JpbmdcbiAgZnVuY3Rpb24gb25lcnJvciAoZXJyKSB7XG4gICAgdmFyIGVycm9yID0gbmV3IEVycm9yKCdwcm9iZSBlcnJvcjogJyArIGVycik7XG4gICAgZXJyb3IudHJhbnNwb3J0ID0gdHJhbnNwb3J0Lm5hbWU7XG5cbiAgICBmcmVlemVUcmFuc3BvcnQoKTtcblxuICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgXCIlc1wiIGZhaWxlZCBiZWNhdXNlIG9mIGVycm9yOiAlcycsIG5hbWUsIGVycik7XG5cbiAgICBzZWxmLmVtaXQoJ3VwZ3JhZGVFcnJvcicsIGVycm9yKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uVHJhbnNwb3J0Q2xvc2UgKCkge1xuICAgIG9uZXJyb3IoJ3RyYW5zcG9ydCBjbG9zZWQnKTtcbiAgfVxuXG4gIC8vIFdoZW4gdGhlIHNvY2tldCBpcyBjbG9zZWQgd2hpbGUgd2UncmUgcHJvYmluZ1xuICBmdW5jdGlvbiBvbmNsb3NlICgpIHtcbiAgICBvbmVycm9yKCdzb2NrZXQgY2xvc2VkJyk7XG4gIH1cblxuICAvLyBXaGVuIHRoZSBzb2NrZXQgaXMgdXBncmFkZWQgd2hpbGUgd2UncmUgcHJvYmluZ1xuICBmdW5jdGlvbiBvbnVwZ3JhZGUgKHRvKSB7XG4gICAgaWYgKHRyYW5zcG9ydCAmJiB0by5uYW1lICE9PSB0cmFuc3BvcnQubmFtZSkge1xuICAgICAgZGVidWcoJ1wiJXNcIiB3b3JrcyAtIGFib3J0aW5nIFwiJXNcIicsIHRvLm5hbWUsIHRyYW5zcG9ydC5uYW1lKTtcbiAgICAgIGZyZWV6ZVRyYW5zcG9ydCgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJlbW92ZSBhbGwgbGlzdGVuZXJzIG9uIHRoZSB0cmFuc3BvcnQgYW5kIG9uIHNlbGZcbiAgZnVuY3Rpb24gY2xlYW51cCAoKSB7XG4gICAgdHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKCdvcGVuJywgb25UcmFuc3BvcnRPcGVuKTtcbiAgICB0cmFuc3BvcnQucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgdHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uVHJhbnNwb3J0Q2xvc2UpO1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgb25jbG9zZSk7XG4gICAgc2VsZi5yZW1vdmVMaXN0ZW5lcigndXBncmFkaW5nJywgb251cGdyYWRlKTtcbiAgfVxuXG4gIHRyYW5zcG9ydC5vbmNlKCdvcGVuJywgb25UcmFuc3BvcnRPcGVuKTtcbiAgdHJhbnNwb3J0Lm9uY2UoJ2Vycm9yJywgb25lcnJvcik7XG4gIHRyYW5zcG9ydC5vbmNlKCdjbG9zZScsIG9uVHJhbnNwb3J0Q2xvc2UpO1xuXG4gIHRoaXMub25jZSgnY2xvc2UnLCBvbmNsb3NlKTtcbiAgdGhpcy5vbmNlKCd1cGdyYWRpbmcnLCBvbnVwZ3JhZGUpO1xuXG4gIHRyYW5zcG9ydC5vcGVuKCk7XG59O1xuXG4vKipcbiAqIENhbGxlZCB3aGVuIGNvbm5lY3Rpb24gaXMgZGVlbWVkIG9wZW4uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgZGVidWcoJ3NvY2tldCBvcGVuJyk7XG4gIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuJztcbiAgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9ICd3ZWJzb2NrZXQnID09PSB0aGlzLnRyYW5zcG9ydC5uYW1lO1xuICB0aGlzLmVtaXQoJ29wZW4nKTtcbiAgdGhpcy5mbHVzaCgpO1xuXG4gIC8vIHdlIGNoZWNrIGZvciBgcmVhZHlTdGF0ZWAgaW4gY2FzZSBhbiBgb3BlbmBcbiAgLy8gbGlzdGVuZXIgYWxyZWFkeSBjbG9zZWQgdGhlIHNvY2tldFxuICBpZiAoJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUgJiYgdGhpcy51cGdyYWRlICYmIHRoaXMudHJhbnNwb3J0LnBhdXNlKSB7XG4gICAgZGVidWcoJ3N0YXJ0aW5nIHVwZ3JhZGUgcHJvYmVzJyk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLnVwZ3JhZGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdGhpcy5wcm9iZSh0aGlzLnVwZ3JhZGVzW2ldKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogSGFuZGxlcyBhIHBhY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLm9uUGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCkge1xuICBpZiAoJ29wZW5pbmcnID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUgfHxcbiAgICAgICdjbG9zaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgZGVidWcoJ3NvY2tldCByZWNlaXZlOiB0eXBlIFwiJXNcIiwgZGF0YSBcIiVzXCInLCBwYWNrZXQudHlwZSwgcGFja2V0LmRhdGEpO1xuXG4gICAgdGhpcy5lbWl0KCdwYWNrZXQnLCBwYWNrZXQpO1xuXG4gICAgLy8gU29ja2V0IGlzIGxpdmUgLSBhbnkgcGFja2V0IGNvdW50c1xuICAgIHRoaXMuZW1pdCgnaGVhcnRiZWF0Jyk7XG5cbiAgICBzd2l0Y2ggKHBhY2tldC50eXBlKSB7XG4gICAgICBjYXNlICdvcGVuJzpcbiAgICAgICAgdGhpcy5vbkhhbmRzaGFrZShKU09OLnBhcnNlKHBhY2tldC5kYXRhKSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdwb25nJzpcbiAgICAgICAgdGhpcy5zZXRQaW5nKCk7XG4gICAgICAgIHRoaXMuZW1pdCgncG9uZycpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnZXJyb3InOlxuICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdzZXJ2ZXIgZXJyb3InKTtcbiAgICAgICAgZXJyLmNvZGUgPSBwYWNrZXQuZGF0YTtcbiAgICAgICAgdGhpcy5vbkVycm9yKGVycik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdtZXNzYWdlJzpcbiAgICAgICAgdGhpcy5lbWl0KCdkYXRhJywgcGFja2V0LmRhdGEpO1xuICAgICAgICB0aGlzLmVtaXQoJ21lc3NhZ2UnLCBwYWNrZXQuZGF0YSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBkZWJ1ZygncGFja2V0IHJlY2VpdmVkIHdpdGggc29ja2V0IHJlYWR5U3RhdGUgXCIlc1wiJywgdGhpcy5yZWFkeVN0YXRlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBoYW5kc2hha2UgY29tcGxldGlvbi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaGFuZHNoYWtlIG9ialxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5vbkhhbmRzaGFrZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuZW1pdCgnaGFuZHNoYWtlJywgZGF0YSk7XG4gIHRoaXMuaWQgPSBkYXRhLnNpZDtcbiAgdGhpcy50cmFuc3BvcnQucXVlcnkuc2lkID0gZGF0YS5zaWQ7XG4gIHRoaXMudXBncmFkZXMgPSB0aGlzLmZpbHRlclVwZ3JhZGVzKGRhdGEudXBncmFkZXMpO1xuICB0aGlzLnBpbmdJbnRlcnZhbCA9IGRhdGEucGluZ0ludGVydmFsO1xuICB0aGlzLnBpbmdUaW1lb3V0ID0gZGF0YS5waW5nVGltZW91dDtcbiAgdGhpcy5vbk9wZW4oKTtcbiAgLy8gSW4gY2FzZSBvcGVuIGhhbmRsZXIgY2xvc2VzIHNvY2tldFxuICBpZiAoJ2Nsb3NlZCcgPT09IHRoaXMucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICB0aGlzLnNldFBpbmcoKTtcblxuICAvLyBQcm9sb25nIGxpdmVuZXNzIG9mIHNvY2tldCBvbiBoZWFydGJlYXRcbiAgdGhpcy5yZW1vdmVMaXN0ZW5lcignaGVhcnRiZWF0JywgdGhpcy5vbkhlYXJ0YmVhdCk7XG4gIHRoaXMub24oJ2hlYXJ0YmVhdCcsIHRoaXMub25IZWFydGJlYXQpO1xufTtcblxuLyoqXG4gKiBSZXNldHMgcGluZyB0aW1lb3V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25IZWFydGJlYXQgPSBmdW5jdGlvbiAodGltZW91dCkge1xuICBjbGVhclRpbWVvdXQodGhpcy5waW5nVGltZW91dFRpbWVyKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBzZWxmLnBpbmdUaW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoJ2Nsb3NlZCcgPT09IHNlbGYucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICAgIHNlbGYub25DbG9zZSgncGluZyB0aW1lb3V0Jyk7XG4gIH0sIHRpbWVvdXQgfHwgKHNlbGYucGluZ0ludGVydmFsICsgc2VsZi5waW5nVGltZW91dCkpO1xufTtcblxuLyoqXG4gKiBQaW5ncyBzZXJ2ZXIgZXZlcnkgYHRoaXMucGluZ0ludGVydmFsYCBhbmQgZXhwZWN0cyByZXNwb25zZVxuICogd2l0aGluIGB0aGlzLnBpbmdUaW1lb3V0YCBvciBjbG9zZXMgY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLnNldFBpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgY2xlYXJUaW1lb3V0KHNlbGYucGluZ0ludGVydmFsVGltZXIpO1xuICBzZWxmLnBpbmdJbnRlcnZhbFRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgZGVidWcoJ3dyaXRpbmcgcGluZyBwYWNrZXQgLSBleHBlY3RpbmcgcG9uZyB3aXRoaW4gJXNtcycsIHNlbGYucGluZ1RpbWVvdXQpO1xuICAgIHNlbGYucGluZygpO1xuICAgIHNlbGYub25IZWFydGJlYXQoc2VsZi5waW5nVGltZW91dCk7XG4gIH0sIHNlbGYucGluZ0ludGVydmFsKTtcbn07XG5cbi8qKlxuKiBTZW5kcyBhIHBpbmcgcGFja2V0LlxuKlxuKiBAYXBpIHByaXZhdGVcbiovXG5cblNvY2tldC5wcm90b3R5cGUucGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB0aGlzLnNlbmRQYWNrZXQoJ3BpbmcnLCBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5lbWl0KCdwaW5nJyk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgb24gYGRyYWluYCBldmVudFxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25EcmFpbiA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy53cml0ZUJ1ZmZlci5zcGxpY2UoMCwgdGhpcy5wcmV2QnVmZmVyTGVuKTtcblxuICAvLyBzZXR0aW5nIHByZXZCdWZmZXJMZW4gPSAwIGlzIHZlcnkgaW1wb3J0YW50XG4gIC8vIGZvciBleGFtcGxlLCB3aGVuIHVwZ3JhZGluZywgdXBncmFkZSBwYWNrZXQgaXMgc2VudCBvdmVyLFxuICAvLyBhbmQgYSBub256ZXJvIHByZXZCdWZmZXJMZW4gY291bGQgY2F1c2UgcHJvYmxlbXMgb24gYGRyYWluYFxuICB0aGlzLnByZXZCdWZmZXJMZW4gPSAwO1xuXG4gIGlmICgwID09PSB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCkge1xuICAgIHRoaXMuZW1pdCgnZHJhaW4nKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmZsdXNoKCk7XG4gIH1cbn07XG5cbi8qKlxuICogRmx1c2ggd3JpdGUgYnVmZmVycy5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ2Nsb3NlZCcgIT09IHRoaXMucmVhZHlTdGF0ZSAmJiB0aGlzLnRyYW5zcG9ydC53cml0YWJsZSAmJlxuICAgICF0aGlzLnVwZ3JhZGluZyAmJiB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCkge1xuICAgIGRlYnVnKCdmbHVzaGluZyAlZCBwYWNrZXRzIGluIHNvY2tldCcsIHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKTtcbiAgICB0aGlzLnRyYW5zcG9ydC5zZW5kKHRoaXMud3JpdGVCdWZmZXIpO1xuICAgIC8vIGtlZXAgdHJhY2sgb2YgY3VycmVudCBsZW5ndGggb2Ygd3JpdGVCdWZmZXJcbiAgICAvLyBzcGxpY2Ugd3JpdGVCdWZmZXIgYW5kIGNhbGxiYWNrQnVmZmVyIG9uIGBkcmFpbmBcbiAgICB0aGlzLnByZXZCdWZmZXJMZW4gPSB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aDtcbiAgICB0aGlzLmVtaXQoJ2ZsdXNoJyk7XG4gIH1cbn07XG5cbi8qKlxuICogU2VuZHMgYSBtZXNzYWdlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5cbiAqIEByZXR1cm4ge1NvY2tldH0gZm9yIGNoYWluaW5nLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLndyaXRlID1cblNvY2tldC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uIChtc2csIG9wdGlvbnMsIGZuKSB7XG4gIHRoaXMuc2VuZFBhY2tldCgnbWVzc2FnZScsIG1zZywgb3B0aW9ucywgZm4pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2VuZHMgYSBwYWNrZXQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHBhY2tldCB0eXBlLlxuICogQHBhcmFtIHtTdHJpbmd9IGRhdGEuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIGZ1bmN0aW9uLlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuU29ja2V0LnByb3RvdHlwZS5zZW5kUGFja2V0ID0gZnVuY3Rpb24gKHR5cGUsIGRhdGEsIG9wdGlvbnMsIGZuKSB7XG4gIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZGF0YSkge1xuICAgIGZuID0gZGF0YTtcbiAgICBkYXRhID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBvcHRpb25zKSB7XG4gICAgZm4gPSBvcHRpb25zO1xuICAgIG9wdGlvbnMgPSBudWxsO1xuICB9XG5cbiAgaWYgKCdjbG9zaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdjbG9zZWQnID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5jb21wcmVzcyA9IGZhbHNlICE9PSBvcHRpb25zLmNvbXByZXNzO1xuXG4gIHZhciBwYWNrZXQgPSB7XG4gICAgdHlwZTogdHlwZSxcbiAgICBkYXRhOiBkYXRhLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfTtcbiAgdGhpcy5lbWl0KCdwYWNrZXRDcmVhdGUnLCBwYWNrZXQpO1xuICB0aGlzLndyaXRlQnVmZmVyLnB1c2gocGFja2V0KTtcbiAgaWYgKGZuKSB0aGlzLm9uY2UoJ2ZsdXNoJywgZm4pO1xuICB0aGlzLmZsdXNoKCk7XG59O1xuXG4vKipcbiAqIENsb3NlcyB0aGUgY29ubmVjdGlvbi5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICBpZiAoJ29wZW5pbmcnID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSAnY2xvc2luZyc7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgIHRoaXMub25jZSgnZHJhaW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnVwZ3JhZGluZykge1xuICAgICAgICAgIHdhaXRGb3JVcGdyYWRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnVwZ3JhZGluZykge1xuICAgICAgd2FpdEZvclVwZ3JhZGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2xvc2UoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjbG9zZSAoKSB7XG4gICAgc2VsZi5vbkNsb3NlKCdmb3JjZWQgY2xvc2UnKTtcbiAgICBkZWJ1Zygnc29ja2V0IGNsb3NpbmcgLSB0ZWxsaW5nIHRyYW5zcG9ydCB0byBjbG9zZScpO1xuICAgIHNlbGYudHJhbnNwb3J0LmNsb3NlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBjbGVhbnVwQW5kQ2xvc2UgKCkge1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ3VwZ3JhZGUnLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ3VwZ3JhZGVFcnJvcicsIGNsZWFudXBBbmRDbG9zZSk7XG4gICAgY2xvc2UoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdhaXRGb3JVcGdyYWRlICgpIHtcbiAgICAvLyB3YWl0IGZvciB1cGdyYWRlIHRvIGZpbmlzaCBzaW5jZSB3ZSBjYW4ndCBzZW5kIHBhY2tldHMgd2hpbGUgcGF1c2luZyBhIHRyYW5zcG9ydFxuICAgIHNlbGYub25jZSgndXBncmFkZScsIGNsZWFudXBBbmRDbG9zZSk7XG4gICAgc2VsZi5vbmNlKCd1cGdyYWRlRXJyb3InLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIHRyYW5zcG9ydCBlcnJvclxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgZGVidWcoJ3NvY2tldCBlcnJvciAlaicsIGVycik7XG4gIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBmYWxzZTtcbiAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7XG4gIHRoaXMub25DbG9zZSgndHJhbnNwb3J0IGVycm9yJywgZXJyKTtcbn07XG5cbi8qKlxuICogQ2FsbGVkIHVwb24gdHJhbnNwb3J0IGNsb3NlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblNvY2tldC5wcm90b3R5cGUub25DbG9zZSA9IGZ1bmN0aW9uIChyZWFzb24sIGRlc2MpIHtcbiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdjbG9zaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgZGVidWcoJ3NvY2tldCBjbG9zZSB3aXRoIHJlYXNvbjogXCIlc1wiJywgcmVhc29uKTtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICAvLyBjbGVhciB0aW1lcnNcbiAgICBjbGVhclRpbWVvdXQodGhpcy5waW5nSW50ZXJ2YWxUaW1lcik7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ1RpbWVvdXRUaW1lcik7XG5cbiAgICAvLyBzdG9wIGV2ZW50IGZyb20gZmlyaW5nIGFnYWluIGZvciB0cmFuc3BvcnRcbiAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoJ2Nsb3NlJyk7XG5cbiAgICAvLyBlbnN1cmUgdHJhbnNwb3J0IHdvbid0IHN0YXkgb3BlblxuICAgIHRoaXMudHJhbnNwb3J0LmNsb3NlKCk7XG5cbiAgICAvLyBpZ25vcmUgZnVydGhlciB0cmFuc3BvcnQgY29tbXVuaWNhdGlvblxuICAgIHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuXG4gICAgLy8gc2V0IHJlYWR5IHN0YXRlXG4gICAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7XG5cbiAgICAvLyBjbGVhciBzZXNzaW9uIGlkXG4gICAgdGhpcy5pZCA9IG51bGw7XG5cbiAgICAvLyBlbWl0IGNsb3NlIGV2ZW50XG4gICAgdGhpcy5lbWl0KCdjbG9zZScsIHJlYXNvbiwgZGVzYyk7XG5cbiAgICAvLyBjbGVhbiBidWZmZXJzIGFmdGVyLCBzbyB1c2VycyBjYW4gc3RpbGxcbiAgICAvLyBncmFiIHRoZSBidWZmZXJzIG9uIGBjbG9zZWAgZXZlbnRcbiAgICBzZWxmLndyaXRlQnVmZmVyID0gW107XG4gICAgc2VsZi5wcmV2QnVmZmVyTGVuID0gMDtcbiAgfVxufTtcblxuLyoqXG4gKiBGaWx0ZXJzIHVwZ3JhZGVzLCByZXR1cm5pbmcgb25seSB0aG9zZSBtYXRjaGluZyBjbGllbnQgdHJhbnNwb3J0cy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBzZXJ2ZXIgdXBncmFkZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICpcbiAqL1xuXG5Tb2NrZXQucHJvdG90eXBlLmZpbHRlclVwZ3JhZGVzID0gZnVuY3Rpb24gKHVwZ3JhZGVzKSB7XG4gIHZhciBmaWx0ZXJlZFVwZ3JhZGVzID0gW107XG4gIGZvciAodmFyIGkgPSAwLCBqID0gdXBncmFkZXMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgaWYgKH5pbmRleCh0aGlzLnRyYW5zcG9ydHMsIHVwZ3JhZGVzW2ldKSkgZmlsdGVyZWRVcGdyYWRlcy5wdXNoKHVwZ3JhZGVzW2ldKTtcbiAgfVxuICByZXR1cm4gZmlsdGVyZWRVcGdyYWRlcztcbn07XG4iLCJcbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKlxuICogTG9naWMgYm9ycm93ZWQgZnJvbSBNb2Rlcm5penI6XG4gKlxuICogICAtIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9jb3JzLmpzXG4gKi9cblxudHJ5IHtcbiAgbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnICYmXG4gICAgJ3dpdGhDcmVkZW50aWFscycgaW4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG59IGNhdGNoIChlcnIpIHtcbiAgLy8gaWYgWE1MSHR0cCBzdXBwb3J0IGlzIGRpc2FibGVkIGluIElFIHRoZW4gaXQgd2lsbCB0aHJvd1xuICAvLyB3aGVuIHRyeWluZyB0byBjcmVhdGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbn1cbiIsIi8qIGdsb2JhbCBhdHRhY2hFdmVudCAqL1xuXG4vKipcbiAqIE1vZHVsZSByZXF1aXJlbWVudHMuXG4gKi9cblxudmFyIFhNTEh0dHBSZXF1ZXN0ID0gcmVxdWlyZSgneG1saHR0cHJlcXVlc3Qtc3NsJyk7XG52YXIgUG9sbGluZyA9IHJlcXVpcmUoJy4vcG9sbGluZycpO1xudmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpO1xudmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb21wb25lbnQtaW5oZXJpdCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZW5naW5lLmlvLWNsaWVudDpwb2xsaW5nLXhocicpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gWEhSO1xubW9kdWxlLmV4cG9ydHMuUmVxdWVzdCA9IFJlcXVlc3Q7XG5cbi8qKlxuICogRW1wdHkgZnVuY3Rpb25cbiAqL1xuXG5mdW5jdGlvbiBlbXB0eSAoKSB7fVxuXG4vKipcbiAqIFhIUiBQb2xsaW5nIGNvbnN0cnVjdG9yLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFhIUiAob3B0cykge1xuICBQb2xsaW5nLmNhbGwodGhpcywgb3B0cyk7XG4gIHRoaXMucmVxdWVzdFRpbWVvdXQgPSBvcHRzLnJlcXVlc3RUaW1lb3V0O1xuICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuXG4gIGlmICh0eXBlb2YgbG9jYXRpb24gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIGlzU1NMID0gJ2h0dHBzOicgPT09IGxvY2F0aW9uLnByb3RvY29sO1xuICAgIHZhciBwb3J0ID0gbG9jYXRpb24ucG9ydDtcblxuICAgIC8vIHNvbWUgdXNlciBhZ2VudHMgaGF2ZSBlbXB0eSBgbG9jYXRpb24ucG9ydGBcbiAgICBpZiAoIXBvcnQpIHtcbiAgICAgIHBvcnQgPSBpc1NTTCA/IDQ0MyA6IDgwO1xuICAgIH1cblxuICAgIHRoaXMueGQgPSAodHlwZW9mIGxvY2F0aW9uICE9PSAndW5kZWZpbmVkJyAmJiBvcHRzLmhvc3RuYW1lICE9PSBsb2NhdGlvbi5ob3N0bmFtZSkgfHxcbiAgICAgIHBvcnQgIT09IG9wdHMucG9ydDtcbiAgICB0aGlzLnhzID0gb3B0cy5zZWN1cmUgIT09IGlzU1NMO1xuICB9XG59XG5cbi8qKlxuICogSW5oZXJpdHMgZnJvbSBQb2xsaW5nLlxuICovXG5cbmluaGVyaXQoWEhSLCBQb2xsaW5nKTtcblxuLyoqXG4gKiBYSFIgc3VwcG9ydHMgYmluYXJ5XG4gKi9cblxuWEhSLnByb3RvdHlwZS5zdXBwb3J0c0JpbmFyeSA9IHRydWU7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHJlcXVlc3QuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZFxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuWEhSLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gKG9wdHMpIHtcbiAgb3B0cyA9IG9wdHMgfHwge307XG4gIG9wdHMudXJpID0gdGhpcy51cmkoKTtcbiAgb3B0cy54ZCA9IHRoaXMueGQ7XG4gIG9wdHMueHMgPSB0aGlzLnhzO1xuICBvcHRzLmFnZW50ID0gdGhpcy5hZ2VudCB8fCBmYWxzZTtcbiAgb3B0cy5zdXBwb3J0c0JpbmFyeSA9IHRoaXMuc3VwcG9ydHNCaW5hcnk7XG4gIG9wdHMuZW5hYmxlc1hEUiA9IHRoaXMuZW5hYmxlc1hEUjtcblxuICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnRcbiAgb3B0cy5wZnggPSB0aGlzLnBmeDtcbiAgb3B0cy5rZXkgPSB0aGlzLmtleTtcbiAgb3B0cy5wYXNzcGhyYXNlID0gdGhpcy5wYXNzcGhyYXNlO1xuICBvcHRzLmNlcnQgPSB0aGlzLmNlcnQ7XG4gIG9wdHMuY2EgPSB0aGlzLmNhO1xuICBvcHRzLmNpcGhlcnMgPSB0aGlzLmNpcGhlcnM7XG4gIG9wdHMucmVqZWN0VW5hdXRob3JpemVkID0gdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQ7XG4gIG9wdHMucmVxdWVzdFRpbWVvdXQgPSB0aGlzLnJlcXVlc3RUaW1lb3V0O1xuXG4gIC8vIG90aGVyIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIG9wdHMuZXh0cmFIZWFkZXJzID0gdGhpcy5leHRyYUhlYWRlcnM7XG5cbiAgcmV0dXJuIG5ldyBSZXF1ZXN0KG9wdHMpO1xufTtcblxuLyoqXG4gKiBTZW5kcyBkYXRhLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhIHRvIHNlbmQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsZWQgdXBvbiBmbHVzaC5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblhIUi5wcm90b3R5cGUuZG9Xcml0ZSA9IGZ1bmN0aW9uIChkYXRhLCBmbikge1xuICB2YXIgaXNCaW5hcnkgPSB0eXBlb2YgZGF0YSAhPT0gJ3N0cmluZycgJiYgZGF0YSAhPT0gdW5kZWZpbmVkO1xuICB2YXIgcmVxID0gdGhpcy5yZXF1ZXN0KHsgbWV0aG9kOiAnUE9TVCcsIGRhdGE6IGRhdGEsIGlzQmluYXJ5OiBpc0JpbmFyeSB9KTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICByZXEub24oJ3N1Y2Nlc3MnLCBmbik7XG4gIHJlcS5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgc2VsZi5vbkVycm9yKCd4aHIgcG9zdCBlcnJvcicsIGVycik7XG4gIH0pO1xuICB0aGlzLnNlbmRYaHIgPSByZXE7XG59O1xuXG4vKipcbiAqIFN0YXJ0cyBhIHBvbGwgY3ljbGUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuWEhSLnByb3RvdHlwZS5kb1BvbGwgPSBmdW5jdGlvbiAoKSB7XG4gIGRlYnVnKCd4aHIgcG9sbCcpO1xuICB2YXIgcmVxID0gdGhpcy5yZXF1ZXN0KCk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgcmVxLm9uKCdkYXRhJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBzZWxmLm9uRGF0YShkYXRhKTtcbiAgfSk7XG4gIHJlcS5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgc2VsZi5vbkVycm9yKCd4aHIgcG9sbCBlcnJvcicsIGVycik7XG4gIH0pO1xuICB0aGlzLnBvbGxYaHIgPSByZXE7XG59O1xuXG4vKipcbiAqIFJlcXVlc3QgY29uc3RydWN0b3JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBSZXF1ZXN0IChvcHRzKSB7XG4gIHRoaXMubWV0aG9kID0gb3B0cy5tZXRob2QgfHwgJ0dFVCc7XG4gIHRoaXMudXJpID0gb3B0cy51cmk7XG4gIHRoaXMueGQgPSAhIW9wdHMueGQ7XG4gIHRoaXMueHMgPSAhIW9wdHMueHM7XG4gIHRoaXMuYXN5bmMgPSBmYWxzZSAhPT0gb3B0cy5hc3luYztcbiAgdGhpcy5kYXRhID0gdW5kZWZpbmVkICE9PSBvcHRzLmRhdGEgPyBvcHRzLmRhdGEgOiBudWxsO1xuICB0aGlzLmFnZW50ID0gb3B0cy5hZ2VudDtcbiAgdGhpcy5pc0JpbmFyeSA9IG9wdHMuaXNCaW5hcnk7XG4gIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBvcHRzLnN1cHBvcnRzQmluYXJ5O1xuICB0aGlzLmVuYWJsZXNYRFIgPSBvcHRzLmVuYWJsZXNYRFI7XG4gIHRoaXMucmVxdWVzdFRpbWVvdXQgPSBvcHRzLnJlcXVlc3RUaW1lb3V0O1xuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLnBmeCA9IG9wdHMucGZ4O1xuICB0aGlzLmtleSA9IG9wdHMua2V5O1xuICB0aGlzLnBhc3NwaHJhc2UgPSBvcHRzLnBhc3NwaHJhc2U7XG4gIHRoaXMuY2VydCA9IG9wdHMuY2VydDtcbiAgdGhpcy5jYSA9IG9wdHMuY2E7XG4gIHRoaXMuY2lwaGVycyA9IG9wdHMuY2lwaGVycztcbiAgdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQgPSBvcHRzLnJlamVjdFVuYXV0aG9yaXplZDtcblxuICAvLyBvdGhlciBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzO1xuXG4gIHRoaXMuY3JlYXRlKCk7XG59XG5cbi8qKlxuICogTWl4IGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKFJlcXVlc3QucHJvdG90eXBlKTtcblxuLyoqXG4gKiBDcmVhdGVzIHRoZSBYSFIgb2JqZWN0IGFuZCBzZW5kcyB0aGUgcmVxdWVzdC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBvcHRzID0geyBhZ2VudDogdGhpcy5hZ2VudCwgeGRvbWFpbjogdGhpcy54ZCwgeHNjaGVtZTogdGhpcy54cywgZW5hYmxlc1hEUjogdGhpcy5lbmFibGVzWERSIH07XG5cbiAgLy8gU1NMIG9wdGlvbnMgZm9yIE5vZGUuanMgY2xpZW50XG4gIG9wdHMucGZ4ID0gdGhpcy5wZng7XG4gIG9wdHMua2V5ID0gdGhpcy5rZXk7XG4gIG9wdHMucGFzc3BocmFzZSA9IHRoaXMucGFzc3BocmFzZTtcbiAgb3B0cy5jZXJ0ID0gdGhpcy5jZXJ0O1xuICBvcHRzLmNhID0gdGhpcy5jYTtcbiAgb3B0cy5jaXBoZXJzID0gdGhpcy5jaXBoZXJzO1xuICBvcHRzLnJlamVjdFVuYXV0aG9yaXplZCA9IHRoaXMucmVqZWN0VW5hdXRob3JpemVkO1xuXG4gIHZhciB4aHIgPSB0aGlzLnhociA9IG5ldyBYTUxIdHRwUmVxdWVzdChvcHRzKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gIHRyeSB7XG4gICAgZGVidWcoJ3hociBvcGVuICVzOiAlcycsIHRoaXMubWV0aG9kLCB0aGlzLnVyaSk7XG4gICAgeGhyLm9wZW4odGhpcy5tZXRob2QsIHRoaXMudXJpLCB0aGlzLmFzeW5jKTtcbiAgICB0cnkge1xuICAgICAgaWYgKHRoaXMuZXh0cmFIZWFkZXJzKSB7XG4gICAgICAgIHhoci5zZXREaXNhYmxlSGVhZGVyQ2hlY2sgJiYgeGhyLnNldERpc2FibGVIZWFkZXJDaGVjayh0cnVlKTtcbiAgICAgICAgZm9yICh2YXIgaSBpbiB0aGlzLmV4dHJhSGVhZGVycykge1xuICAgICAgICAgIGlmICh0aGlzLmV4dHJhSGVhZGVycy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoaSwgdGhpcy5leHRyYUhlYWRlcnNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICBpZiAoJ1BPU1QnID09PSB0aGlzLm1ldGhvZCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHRoaXMuaXNCaW5hcnkpIHtcbiAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LXR5cGUnLCAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04Jyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdBY2NlcHQnLCAnKi8qJyk7XG4gICAgfSBjYXRjaCAoZSkge31cblxuICAgIC8vIGllNiBjaGVja1xuICAgIGlmICgnd2l0aENyZWRlbnRpYWxzJyBpbiB4aHIpIHtcbiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnJlcXVlc3RUaW1lb3V0KSB7XG4gICAgICB4aHIudGltZW91dCA9IHRoaXMucmVxdWVzdFRpbWVvdXQ7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaGFzWERSKCkpIHtcbiAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYub25Mb2FkKCk7XG4gICAgICB9O1xuICAgICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYub25FcnJvcih4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gMikge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgY29udGVudFR5cGUgPSB4aHIuZ2V0UmVzcG9uc2VIZWFkZXIoJ0NvbnRlbnQtVHlwZScpO1xuICAgICAgICAgICAgaWYgKHNlbGYuc3VwcG9ydHNCaW5hcnkgJiYgY29udGVudFR5cGUgPT09ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nKSB7XG4gICAgICAgICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYXJyYXlidWZmZXInO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKDQgIT09IHhoci5yZWFkeVN0YXRlKSByZXR1cm47XG4gICAgICAgIGlmICgyMDAgPT09IHhoci5zdGF0dXMgfHwgMTIyMyA9PT0geGhyLnN0YXR1cykge1xuICAgICAgICAgIHNlbGYub25Mb2FkKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gbWFrZSBzdXJlIHRoZSBgZXJyb3JgIGV2ZW50IGhhbmRsZXIgdGhhdCdzIHVzZXItc2V0XG4gICAgICAgICAgLy8gZG9lcyBub3QgdGhyb3cgaW4gdGhlIHNhbWUgdGljayBhbmQgZ2V0cyBjYXVnaHQgaGVyZVxuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc2VsZi5vbkVycm9yKHhoci5zdGF0dXMpO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGRlYnVnKCd4aHIgZGF0YSAlcycsIHRoaXMuZGF0YSk7XG4gICAgeGhyLnNlbmQodGhpcy5kYXRhKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIE5lZWQgdG8gZGVmZXIgc2luY2UgLmNyZWF0ZSgpIGlzIGNhbGxlZCBkaXJlY3RseSBmaHJvbSB0aGUgY29uc3RydWN0b3JcbiAgICAvLyBhbmQgdGh1cyB0aGUgJ2Vycm9yJyBldmVudCBjYW4gb25seSBiZSBvbmx5IGJvdW5kICphZnRlciogdGhpcyBleGNlcHRpb25cbiAgICAvLyBvY2N1cnMuICBUaGVyZWZvcmUsIGFsc28sIHdlIGNhbm5vdCB0aHJvdyBoZXJlIGF0IGFsbC5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYub25FcnJvcihlKTtcbiAgICB9LCAwKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHRoaXMuaW5kZXggPSBSZXF1ZXN0LnJlcXVlc3RzQ291bnQrKztcbiAgICBSZXF1ZXN0LnJlcXVlc3RzW3RoaXMuaW5kZXhdID0gdGhpcztcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBzdWNjZXNzZnVsIHJlc3BvbnNlLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLm9uU3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5lbWl0KCdzdWNjZXNzJyk7XG4gIHRoaXMuY2xlYW51cCgpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgaWYgd2UgaGF2ZSBkYXRhLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHRoaXMuZW1pdCgnZGF0YScsIGRhdGEpO1xuICB0aGlzLm9uU3VjY2VzcygpO1xufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBlcnJvci5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgdGhpcy5jbGVhbnVwKHRydWUpO1xufTtcblxuLyoqXG4gKiBDbGVhbnMgdXAgaG91c2UuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuY2xlYW51cCA9IGZ1bmN0aW9uIChmcm9tRXJyb3IpIHtcbiAgaWYgKCd1bmRlZmluZWQnID09PSB0eXBlb2YgdGhpcy54aHIgfHwgbnVsbCA9PT0gdGhpcy54aHIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8geG1saHR0cHJlcXVlc3RcbiAgaWYgKHRoaXMuaGFzWERSKCkpIHtcbiAgICB0aGlzLnhoci5vbmxvYWQgPSB0aGlzLnhoci5vbmVycm9yID0gZW1wdHk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy54aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZW1wdHk7XG4gIH1cblxuICBpZiAoZnJvbUVycm9yKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMueGhyLmFib3J0KCk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgZGVsZXRlIFJlcXVlc3QucmVxdWVzdHNbdGhpcy5pbmRleF07XG4gIH1cblxuICB0aGlzLnhociA9IG51bGw7XG59O1xuXG4vKipcbiAqIENhbGxlZCB1cG9uIGxvYWQuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUub25Mb2FkID0gZnVuY3Rpb24gKCkge1xuICB2YXIgZGF0YTtcbiAgdHJ5IHtcbiAgICB2YXIgY29udGVudFR5cGU7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnRlbnRUeXBlID0gdGhpcy54aHIuZ2V0UmVzcG9uc2VIZWFkZXIoJ0NvbnRlbnQtVHlwZScpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgaWYgKGNvbnRlbnRUeXBlID09PSAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJykge1xuICAgICAgZGF0YSA9IHRoaXMueGhyLnJlc3BvbnNlIHx8IHRoaXMueGhyLnJlc3BvbnNlVGV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YSA9IHRoaXMueGhyLnJlc3BvbnNlVGV4dDtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aGlzLm9uRXJyb3IoZSk7XG4gIH1cbiAgaWYgKG51bGwgIT0gZGF0YSkge1xuICAgIHRoaXMub25EYXRhKGRhdGEpO1xuICB9XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGl0IGhhcyBYRG9tYWluUmVxdWVzdC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5oYXNYRFIgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0eXBlb2YgWERvbWFpblJlcXVlc3QgIT09ICd1bmRlZmluZWQnICYmICF0aGlzLnhzICYmIHRoaXMuZW5hYmxlc1hEUjtcbn07XG5cbi8qKlxuICogQWJvcnRzIHRoZSByZXF1ZXN0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuY2xlYW51cCgpO1xufTtcblxuLyoqXG4gKiBBYm9ydHMgcGVuZGluZyByZXF1ZXN0cyB3aGVuIHVubG9hZGluZyB0aGUgd2luZG93LiBUaGlzIGlzIG5lZWRlZCB0byBwcmV2ZW50XG4gKiBtZW1vcnkgbGVha3MgKGUuZy4gd2hlbiB1c2luZyBJRSkgYW5kIHRvIGVuc3VyZSB0aGF0IG5vIHNwdXJpb3VzIGVycm9yIGlzXG4gKiBlbWl0dGVkLlxuICovXG5cblJlcXVlc3QucmVxdWVzdHNDb3VudCA9IDA7XG5SZXF1ZXN0LnJlcXVlc3RzID0ge307XG5cbmlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gIGlmICh0eXBlb2YgYXR0YWNoRXZlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBhdHRhY2hFdmVudCgnb251bmxvYWQnLCB1bmxvYWRIYW5kbGVyKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgYWRkRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciB0ZXJtaW5hdGlvbkV2ZW50ID0gJ29ucGFnZWhpZGUnIGluIHNlbGYgPyAncGFnZWhpZGUnIDogJ3VubG9hZCc7XG4gICAgYWRkRXZlbnRMaXN0ZW5lcih0ZXJtaW5hdGlvbkV2ZW50LCB1bmxvYWRIYW5kbGVyLCBmYWxzZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdW5sb2FkSGFuZGxlciAoKSB7XG4gIGZvciAodmFyIGkgaW4gUmVxdWVzdC5yZXF1ZXN0cykge1xuICAgIGlmIChSZXF1ZXN0LnJlcXVlc3RzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICBSZXF1ZXN0LnJlcXVlc3RzW2ldLmFib3J0KCk7XG4gICAgfVxuICB9XG59XG4iLCJcbi8qKlxuICogR2V0cyB0aGUga2V5cyBmb3IgYW4gb2JqZWN0LlxuICpcbiAqIEByZXR1cm4ge0FycmF5fSBrZXlzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMgKG9iail7XG4gIHZhciBhcnIgPSBbXTtcbiAgdmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbiAgZm9yICh2YXIgaSBpbiBvYmopIHtcbiAgICBpZiAoaGFzLmNhbGwob2JqLCBpKSkge1xuICAgICAgYXJyLnB1c2goaSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnI7XG59O1xuIiwiLyoqXG4gKiBBbiBhYnN0cmFjdGlvbiBmb3Igc2xpY2luZyBhbiBhcnJheWJ1ZmZlciBldmVuIHdoZW5cbiAqIEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZSBpcyBub3Qgc3VwcG9ydGVkXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGFycmF5YnVmZmVyLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGFycmF5YnVmZmVyLmJ5dGVMZW5ndGg7XG4gIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgZW5kID0gZW5kIHx8IGJ5dGVzO1xuXG4gIGlmIChhcnJheWJ1ZmZlci5zbGljZSkgeyByZXR1cm4gYXJyYXlidWZmZXIuc2xpY2Uoc3RhcnQsIGVuZCk7IH1cblxuICBpZiAoc3RhcnQgPCAwKSB7IHN0YXJ0ICs9IGJ5dGVzOyB9XG4gIGlmIChlbmQgPCAwKSB7IGVuZCArPSBieXRlczsgfVxuICBpZiAoZW5kID4gYnl0ZXMpIHsgZW5kID0gYnl0ZXM7IH1cblxuICBpZiAoc3RhcnQgPj0gYnl0ZXMgfHwgc3RhcnQgPj0gZW5kIHx8IGJ5dGVzID09PSAwKSB7XG4gICAgcmV0dXJuIG5ldyBBcnJheUJ1ZmZlcigwKTtcbiAgfVxuXG4gIHZhciBhYnYgPSBuZXcgVWludDhBcnJheShhcnJheWJ1ZmZlcik7XG4gIHZhciByZXN1bHQgPSBuZXcgVWludDhBcnJheShlbmQgLSBzdGFydCk7XG4gIGZvciAodmFyIGkgPSBzdGFydCwgaWkgPSAwOyBpIDwgZW5kOyBpKyssIGlpKyspIHtcbiAgICByZXN1bHRbaWldID0gYWJ2W2ldO1xuICB9XG4gIHJldHVybiByZXN1bHQuYnVmZmVyO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gYWZ0ZXJcblxuZnVuY3Rpb24gYWZ0ZXIoY291bnQsIGNhbGxiYWNrLCBlcnJfY2IpIHtcbiAgICB2YXIgYmFpbCA9IGZhbHNlXG4gICAgZXJyX2NiID0gZXJyX2NiIHx8IG5vb3BcbiAgICBwcm94eS5jb3VudCA9IGNvdW50XG5cbiAgICByZXR1cm4gKGNvdW50ID09PSAwKSA/IGNhbGxiYWNrKCkgOiBwcm94eVxuXG4gICAgZnVuY3Rpb24gcHJveHkoZXJyLCByZXN1bHQpIHtcbiAgICAgICAgaWYgKHByb3h5LmNvdW50IDw9IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYWZ0ZXIgY2FsbGVkIHRvbyBtYW55IHRpbWVzJylcbiAgICAgICAgfVxuICAgICAgICAtLXByb3h5LmNvdW50XG5cbiAgICAgICAgLy8gYWZ0ZXIgZmlyc3QgZXJyb3IsIHJlc3QgYXJlIHBhc3NlZCB0byBlcnJfY2JcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgYmFpbCA9IHRydWVcbiAgICAgICAgICAgIGNhbGxiYWNrKGVycilcbiAgICAgICAgICAgIC8vIGZ1dHVyZSBlcnJvciBjYWxsYmFja3Mgd2lsbCBnbyB0byBlcnJvciBoYW5kbGVyXG4gICAgICAgICAgICBjYWxsYmFjayA9IGVycl9jYlxuICAgICAgICB9IGVsc2UgaWYgKHByb3h5LmNvdW50ID09PSAwICYmICFiYWlsKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHQpXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuIiwiLyohIGh0dHBzOi8vbXRocy5iZS91dGY4anMgdjIuMS4yIGJ5IEBtYXRoaWFzICovXG5cbnZhciBzdHJpbmdGcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xuXG4vLyBUYWtlbiBmcm9tIGh0dHBzOi8vbXRocy5iZS9wdW55Y29kZVxuZnVuY3Rpb24gdWNzMmRlY29kZShzdHJpbmcpIHtcblx0dmFyIG91dHB1dCA9IFtdO1xuXHR2YXIgY291bnRlciA9IDA7XG5cdHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuXHR2YXIgdmFsdWU7XG5cdHZhciBleHRyYTtcblx0d2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHR2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0aWYgKHZhbHVlID49IDB4RDgwMCAmJiB2YWx1ZSA8PSAweERCRkYgJiYgY291bnRlciA8IGxlbmd0aCkge1xuXHRcdFx0Ly8gaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyXG5cdFx0XHRleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRpZiAoKGV4dHJhICYgMHhGQzAwKSA9PSAweERDMDApIHsgLy8gbG93IHN1cnJvZ2F0ZVxuXHRcdFx0XHRvdXRwdXQucHVzaCgoKHZhbHVlICYgMHgzRkYpIDw8IDEwKSArIChleHRyYSAmIDB4M0ZGKSArIDB4MTAwMDApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gdW5tYXRjaGVkIHN1cnJvZ2F0ZTsgb25seSBhcHBlbmQgdGhpcyBjb2RlIHVuaXQsIGluIGNhc2UgdGhlIG5leHRcblx0XHRcdFx0Ly8gY29kZSB1bml0IGlzIHRoZSBoaWdoIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdFx0Y291bnRlci0tO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvdXRwdXQucHVzaCh2YWx1ZSk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBvdXRwdXQ7XG59XG5cbi8vIFRha2VuIGZyb20gaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlXG5mdW5jdGlvbiB1Y3MyZW5jb2RlKGFycmF5KSB7XG5cdHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cdHZhciBpbmRleCA9IC0xO1xuXHR2YXIgdmFsdWU7XG5cdHZhciBvdXRwdXQgPSAnJztcblx0d2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcblx0XHR2YWx1ZSA9IGFycmF5W2luZGV4XTtcblx0XHRpZiAodmFsdWUgPiAweEZGRkYpIHtcblx0XHRcdHZhbHVlIC09IDB4MTAwMDA7XG5cdFx0XHRvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKTtcblx0XHRcdHZhbHVlID0gMHhEQzAwIHwgdmFsdWUgJiAweDNGRjtcblx0XHR9XG5cdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSk7XG5cdH1cblx0cmV0dXJuIG91dHB1dDtcbn1cblxuZnVuY3Rpb24gY2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQsIHN0cmljdCkge1xuXHRpZiAoY29kZVBvaW50ID49IDB4RDgwMCAmJiBjb2RlUG9pbnQgPD0gMHhERkZGKSB7XG5cdFx0aWYgKHN0cmljdCkge1xuXHRcdFx0dGhyb3cgRXJyb3IoXG5cdFx0XHRcdCdMb25lIHN1cnJvZ2F0ZSBVKycgKyBjb2RlUG9pbnQudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkgK1xuXHRcdFx0XHQnIGlzIG5vdCBhIHNjYWxhciB2YWx1ZSdcblx0XHRcdCk7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRyZXR1cm4gdHJ1ZTtcbn1cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG5mdW5jdGlvbiBjcmVhdGVCeXRlKGNvZGVQb2ludCwgc2hpZnQpIHtcblx0cmV0dXJuIHN0cmluZ0Zyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+PiBzaGlmdCkgJiAweDNGKSB8IDB4ODApO1xufVxuXG5mdW5jdGlvbiBlbmNvZGVDb2RlUG9pbnQoY29kZVBvaW50LCBzdHJpY3QpIHtcblx0aWYgKChjb2RlUG9pbnQgJiAweEZGRkZGRjgwKSA9PSAwKSB7IC8vIDEtYnl0ZSBzZXF1ZW5jZVxuXHRcdHJldHVybiBzdHJpbmdGcm9tQ2hhckNvZGUoY29kZVBvaW50KTtcblx0fVxuXHR2YXIgc3ltYm9sID0gJyc7XG5cdGlmICgoY29kZVBvaW50ICYgMHhGRkZGRjgwMCkgPT0gMCkgeyAvLyAyLWJ5dGUgc2VxdWVuY2Vcblx0XHRzeW1ib2wgPSBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gNikgJiAweDFGKSB8IDB4QzApO1xuXHR9XG5cdGVsc2UgaWYgKChjb2RlUG9pbnQgJiAweEZGRkYwMDAwKSA9PSAwKSB7IC8vIDMtYnl0ZSBzZXF1ZW5jZVxuXHRcdGlmICghY2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQsIHN0cmljdCkpIHtcblx0XHRcdGNvZGVQb2ludCA9IDB4RkZGRDtcblx0XHR9XG5cdFx0c3ltYm9sID0gc3RyaW5nRnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+IDEyKSAmIDB4MEYpIHwgMHhFMCk7XG5cdFx0c3ltYm9sICs9IGNyZWF0ZUJ5dGUoY29kZVBvaW50LCA2KTtcblx0fVxuXHRlbHNlIGlmICgoY29kZVBvaW50ICYgMHhGRkUwMDAwMCkgPT0gMCkgeyAvLyA0LWJ5dGUgc2VxdWVuY2Vcblx0XHRzeW1ib2wgPSBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gMTgpICYgMHgwNykgfCAweEYwKTtcblx0XHRzeW1ib2wgKz0gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIDEyKTtcblx0XHRzeW1ib2wgKz0gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIDYpO1xuXHR9XG5cdHN5bWJvbCArPSBzdHJpbmdGcm9tQ2hhckNvZGUoKGNvZGVQb2ludCAmIDB4M0YpIHwgMHg4MCk7XG5cdHJldHVybiBzeW1ib2w7XG59XG5cbmZ1bmN0aW9uIHV0ZjhlbmNvZGUoc3RyaW5nLCBvcHRzKSB7XG5cdG9wdHMgPSBvcHRzIHx8IHt9O1xuXHR2YXIgc3RyaWN0ID0gZmFsc2UgIT09IG9wdHMuc3RyaWN0O1xuXG5cdHZhciBjb2RlUG9pbnRzID0gdWNzMmRlY29kZShzdHJpbmcpO1xuXHR2YXIgbGVuZ3RoID0gY29kZVBvaW50cy5sZW5ndGg7XG5cdHZhciBpbmRleCA9IC0xO1xuXHR2YXIgY29kZVBvaW50O1xuXHR2YXIgYnl0ZVN0cmluZyA9ICcnO1xuXHR3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuXHRcdGNvZGVQb2ludCA9IGNvZGVQb2ludHNbaW5kZXhdO1xuXHRcdGJ5dGVTdHJpbmcgKz0gZW5jb2RlQ29kZVBvaW50KGNvZGVQb2ludCwgc3RyaWN0KTtcblx0fVxuXHRyZXR1cm4gYnl0ZVN0cmluZztcbn1cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbmZ1bmN0aW9uIHJlYWRDb250aW51YXRpb25CeXRlKCkge1xuXHRpZiAoYnl0ZUluZGV4ID49IGJ5dGVDb3VudCkge1xuXHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGJ5dGUgaW5kZXgnKTtcblx0fVxuXG5cdHZhciBjb250aW51YXRpb25CeXRlID0gYnl0ZUFycmF5W2J5dGVJbmRleF0gJiAweEZGO1xuXHRieXRlSW5kZXgrKztcblxuXHRpZiAoKGNvbnRpbnVhdGlvbkJ5dGUgJiAweEMwKSA9PSAweDgwKSB7XG5cdFx0cmV0dXJuIGNvbnRpbnVhdGlvbkJ5dGUgJiAweDNGO1xuXHR9XG5cblx0Ly8gSWYgd2UgZW5kIHVwIGhlcmUsIGl04oCZcyBub3QgYSBjb250aW51YXRpb24gYnl0ZVxuXHR0aHJvdyBFcnJvcignSW52YWxpZCBjb250aW51YXRpb24gYnl0ZScpO1xufVxuXG5mdW5jdGlvbiBkZWNvZGVTeW1ib2woc3RyaWN0KSB7XG5cdHZhciBieXRlMTtcblx0dmFyIGJ5dGUyO1xuXHR2YXIgYnl0ZTM7XG5cdHZhciBieXRlNDtcblx0dmFyIGNvZGVQb2ludDtcblxuXHRpZiAoYnl0ZUluZGV4ID4gYnl0ZUNvdW50KSB7XG5cdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgYnl0ZSBpbmRleCcpO1xuXHR9XG5cblx0aWYgKGJ5dGVJbmRleCA9PSBieXRlQ291bnQpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBSZWFkIGZpcnN0IGJ5dGVcblx0Ynl0ZTEgPSBieXRlQXJyYXlbYnl0ZUluZGV4XSAmIDB4RkY7XG5cdGJ5dGVJbmRleCsrO1xuXG5cdC8vIDEtYnl0ZSBzZXF1ZW5jZSAobm8gY29udGludWF0aW9uIGJ5dGVzKVxuXHRpZiAoKGJ5dGUxICYgMHg4MCkgPT0gMCkge1xuXHRcdHJldHVybiBieXRlMTtcblx0fVxuXG5cdC8vIDItYnl0ZSBzZXF1ZW5jZVxuXHRpZiAoKGJ5dGUxICYgMHhFMCkgPT0gMHhDMCkge1xuXHRcdGJ5dGUyID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRjb2RlUG9pbnQgPSAoKGJ5dGUxICYgMHgxRikgPDwgNikgfCBieXRlMjtcblx0XHRpZiAoY29kZVBvaW50ID49IDB4ODApIHtcblx0XHRcdHJldHVybiBjb2RlUG9pbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlJyk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gMy1ieXRlIHNlcXVlbmNlIChtYXkgaW5jbHVkZSB1bnBhaXJlZCBzdXJyb2dhdGVzKVxuXHRpZiAoKGJ5dGUxICYgMHhGMCkgPT0gMHhFMCkge1xuXHRcdGJ5dGUyID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRieXRlMyA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0Y29kZVBvaW50ID0gKChieXRlMSAmIDB4MEYpIDw8IDEyKSB8IChieXRlMiA8PCA2KSB8IGJ5dGUzO1xuXHRcdGlmIChjb2RlUG9pbnQgPj0gMHgwODAwKSB7XG5cdFx0XHRyZXR1cm4gY2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQsIHN0cmljdCkgPyBjb2RlUG9pbnQgOiAweEZGRkQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlJyk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gNC1ieXRlIHNlcXVlbmNlXG5cdGlmICgoYnl0ZTEgJiAweEY4KSA9PSAweEYwKSB7XG5cdFx0Ynl0ZTIgPSByZWFkQ29udGludWF0aW9uQnl0ZSgpO1xuXHRcdGJ5dGUzID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRieXRlNCA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0Y29kZVBvaW50ID0gKChieXRlMSAmIDB4MDcpIDw8IDB4MTIpIHwgKGJ5dGUyIDw8IDB4MEMpIHxcblx0XHRcdChieXRlMyA8PCAweDA2KSB8IGJ5dGU0O1xuXHRcdGlmIChjb2RlUG9pbnQgPj0gMHgwMTAwMDAgJiYgY29kZVBvaW50IDw9IDB4MTBGRkZGKSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50O1xuXHRcdH1cblx0fVxuXG5cdHRocm93IEVycm9yKCdJbnZhbGlkIFVURi04IGRldGVjdGVkJyk7XG59XG5cbnZhciBieXRlQXJyYXk7XG52YXIgYnl0ZUNvdW50O1xudmFyIGJ5dGVJbmRleDtcbmZ1bmN0aW9uIHV0ZjhkZWNvZGUoYnl0ZVN0cmluZywgb3B0cykge1xuXHRvcHRzID0gb3B0cyB8fCB7fTtcblx0dmFyIHN0cmljdCA9IGZhbHNlICE9PSBvcHRzLnN0cmljdDtcblxuXHRieXRlQXJyYXkgPSB1Y3MyZGVjb2RlKGJ5dGVTdHJpbmcpO1xuXHRieXRlQ291bnQgPSBieXRlQXJyYXkubGVuZ3RoO1xuXHRieXRlSW5kZXggPSAwO1xuXHR2YXIgY29kZVBvaW50cyA9IFtdO1xuXHR2YXIgdG1wO1xuXHR3aGlsZSAoKHRtcCA9IGRlY29kZVN5bWJvbChzdHJpY3QpKSAhPT0gZmFsc2UpIHtcblx0XHRjb2RlUG9pbnRzLnB1c2godG1wKTtcblx0fVxuXHRyZXR1cm4gdWNzMmVuY29kZShjb2RlUG9pbnRzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdHZlcnNpb246ICcyLjEuMicsXG5cdGVuY29kZTogdXRmOGVuY29kZSxcblx0ZGVjb2RlOiB1dGY4ZGVjb2RlXG59O1xuIiwiLypcbiAqIGJhc2U2NC1hcnJheWJ1ZmZlclxuICogaHR0cHM6Ly9naXRodWIuY29tL25pa2xhc3ZoL2Jhc2U2NC1hcnJheWJ1ZmZlclxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMiBOaWtsYXMgdm9uIEhlcnR6ZW5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqL1xuKGZ1bmN0aW9uKCl7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBjaGFycyA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiO1xuXG4gIC8vIFVzZSBhIGxvb2t1cCB0YWJsZSB0byBmaW5kIHRoZSBpbmRleC5cbiAgdmFyIGxvb2t1cCA9IG5ldyBVaW50OEFycmF5KDI1Nik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICBsb29rdXBbY2hhcnMuY2hhckNvZGVBdChpKV0gPSBpO1xuICB9XG5cbiAgZXhwb3J0cy5lbmNvZGUgPSBmdW5jdGlvbihhcnJheWJ1ZmZlcikge1xuICAgIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKSxcbiAgICBpLCBsZW4gPSBieXRlcy5sZW5ndGgsIGJhc2U2NCA9IFwiXCI7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKz0zKSB7XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbYnl0ZXNbaV0gPj4gMl07XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbKChieXRlc1tpXSAmIDMpIDw8IDQpIHwgKGJ5dGVzW2kgKyAxXSA+PiA0KV07XG4gICAgICBiYXNlNjQgKz0gY2hhcnNbKChieXRlc1tpICsgMV0gJiAxNSkgPDwgMikgfCAoYnl0ZXNbaSArIDJdID4+IDYpXTtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1tieXRlc1tpICsgMl0gJiA2M107XG4gICAgfVxuXG4gICAgaWYgKChsZW4gJSAzKSA9PT0gMikge1xuICAgICAgYmFzZTY0ID0gYmFzZTY0LnN1YnN0cmluZygwLCBiYXNlNjQubGVuZ3RoIC0gMSkgKyBcIj1cIjtcbiAgICB9IGVsc2UgaWYgKGxlbiAlIDMgPT09IDEpIHtcbiAgICAgIGJhc2U2NCA9IGJhc2U2NC5zdWJzdHJpbmcoMCwgYmFzZTY0Lmxlbmd0aCAtIDIpICsgXCI9PVwiO1xuICAgIH1cblxuICAgIHJldHVybiBiYXNlNjQ7XG4gIH07XG5cbiAgZXhwb3J0cy5kZWNvZGUgPSAgZnVuY3Rpb24oYmFzZTY0KSB7XG4gICAgdmFyIGJ1ZmZlckxlbmd0aCA9IGJhc2U2NC5sZW5ndGggKiAwLjc1LFxuICAgIGxlbiA9IGJhc2U2NC5sZW5ndGgsIGksIHAgPSAwLFxuICAgIGVuY29kZWQxLCBlbmNvZGVkMiwgZW5jb2RlZDMsIGVuY29kZWQ0O1xuXG4gICAgaWYgKGJhc2U2NFtiYXNlNjQubGVuZ3RoIC0gMV0gPT09IFwiPVwiKSB7XG4gICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgIGlmIChiYXNlNjRbYmFzZTY0Lmxlbmd0aCAtIDJdID09PSBcIj1cIikge1xuICAgICAgICBidWZmZXJMZW5ndGgtLTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgYXJyYXlidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoYnVmZmVyTGVuZ3RoKSxcbiAgICBieXRlcyA9IG5ldyBVaW50OEFycmF5KGFycmF5YnVmZmVyKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrPTQpIHtcbiAgICAgIGVuY29kZWQxID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkpXTtcbiAgICAgIGVuY29kZWQyID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkrMSldO1xuICAgICAgZW5jb2RlZDMgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSsyKV07XG4gICAgICBlbmNvZGVkNCA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpKzMpXTtcblxuICAgICAgYnl0ZXNbcCsrXSA9IChlbmNvZGVkMSA8PCAyKSB8IChlbmNvZGVkMiA+PiA0KTtcbiAgICAgIGJ5dGVzW3ArK10gPSAoKGVuY29kZWQyICYgMTUpIDw8IDQpIHwgKGVuY29kZWQzID4+IDIpO1xuICAgICAgYnl0ZXNbcCsrXSA9ICgoZW5jb2RlZDMgJiAzKSA8PCA2KSB8IChlbmNvZGVkNCAmIDYzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXlidWZmZXI7XG4gIH07XG59KSgpO1xuIiwiLyoqXHJcbiAqIENyZWF0ZSBhIGJsb2IgYnVpbGRlciBldmVuIHdoZW4gdmVuZG9yIHByZWZpeGVzIGV4aXN0XHJcbiAqL1xyXG5cclxudmFyIEJsb2JCdWlsZGVyID0gdHlwZW9mIEJsb2JCdWlsZGVyICE9PSAndW5kZWZpbmVkJyA/IEJsb2JCdWlsZGVyIDpcclxuICB0eXBlb2YgV2ViS2l0QmxvYkJ1aWxkZXIgIT09ICd1bmRlZmluZWQnID8gV2ViS2l0QmxvYkJ1aWxkZXIgOlxyXG4gIHR5cGVvZiBNU0Jsb2JCdWlsZGVyICE9PSAndW5kZWZpbmVkJyA/IE1TQmxvYkJ1aWxkZXIgOlxyXG4gIHR5cGVvZiBNb3pCbG9iQnVpbGRlciAhPT0gJ3VuZGVmaW5lZCcgPyBNb3pCbG9iQnVpbGRlciA6IFxyXG4gIGZhbHNlO1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIEJsb2IgY29uc3RydWN0b3IgaXMgc3VwcG9ydGVkXHJcbiAqL1xyXG5cclxudmFyIGJsb2JTdXBwb3J0ZWQgPSAoZnVuY3Rpb24oKSB7XHJcbiAgdHJ5IHtcclxuICAgIHZhciBhID0gbmV3IEJsb2IoWydoaSddKTtcclxuICAgIHJldHVybiBhLnNpemUgPT09IDI7XHJcbiAgfSBjYXRjaChlKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59KSgpO1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIEJsb2IgY29uc3RydWN0b3Igc3VwcG9ydHMgQXJyYXlCdWZmZXJWaWV3c1xyXG4gKiBGYWlscyBpbiBTYWZhcmkgNiwgc28gd2UgbmVlZCB0byBtYXAgdG8gQXJyYXlCdWZmZXJzIHRoZXJlLlxyXG4gKi9cclxuXHJcbnZhciBibG9iU3VwcG9ydHNBcnJheUJ1ZmZlclZpZXcgPSBibG9iU3VwcG9ydGVkICYmIChmdW5jdGlvbigpIHtcclxuICB0cnkge1xyXG4gICAgdmFyIGIgPSBuZXcgQmxvYihbbmV3IFVpbnQ4QXJyYXkoWzEsMl0pXSk7XHJcbiAgICByZXR1cm4gYi5zaXplID09PSAyO1xyXG4gIH0gY2F0Y2goZSkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxufSkoKTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiBCbG9iQnVpbGRlciBpcyBzdXBwb3J0ZWRcclxuICovXHJcblxyXG52YXIgYmxvYkJ1aWxkZXJTdXBwb3J0ZWQgPSBCbG9iQnVpbGRlclxyXG4gICYmIEJsb2JCdWlsZGVyLnByb3RvdHlwZS5hcHBlbmRcclxuICAmJiBCbG9iQnVpbGRlci5wcm90b3R5cGUuZ2V0QmxvYjtcclxuXHJcbi8qKlxyXG4gKiBIZWxwZXIgZnVuY3Rpb24gdGhhdCBtYXBzIEFycmF5QnVmZmVyVmlld3MgdG8gQXJyYXlCdWZmZXJzXHJcbiAqIFVzZWQgYnkgQmxvYkJ1aWxkZXIgY29uc3RydWN0b3IgYW5kIG9sZCBicm93c2VycyB0aGF0IGRpZG4ndFxyXG4gKiBzdXBwb3J0IGl0IGluIHRoZSBCbG9iIGNvbnN0cnVjdG9yLlxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIG1hcEFycmF5QnVmZmVyVmlld3MoYXJ5KSB7XHJcbiAgcmV0dXJuIGFyeS5tYXAoZnVuY3Rpb24oY2h1bmspIHtcclxuICAgIGlmIChjaHVuay5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xyXG4gICAgICB2YXIgYnVmID0gY2h1bmsuYnVmZmVyO1xyXG5cclxuICAgICAgLy8gaWYgdGhpcyBpcyBhIHN1YmFycmF5LCBtYWtlIGEgY29weSBzbyB3ZSBvbmx5XHJcbiAgICAgIC8vIGluY2x1ZGUgdGhlIHN1YmFycmF5IHJlZ2lvbiBmcm9tIHRoZSB1bmRlcmx5aW5nIGJ1ZmZlclxyXG4gICAgICBpZiAoY2h1bmsuYnl0ZUxlbmd0aCAhPT0gYnVmLmJ5dGVMZW5ndGgpIHtcclxuICAgICAgICB2YXIgY29weSA9IG5ldyBVaW50OEFycmF5KGNodW5rLmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgIGNvcHkuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZiwgY2h1bmsuYnl0ZU9mZnNldCwgY2h1bmsuYnl0ZUxlbmd0aCkpO1xyXG4gICAgICAgIGJ1ZiA9IGNvcHkuYnVmZmVyO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gYnVmO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjaHVuaztcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gQmxvYkJ1aWxkZXJDb25zdHJ1Y3RvcihhcnksIG9wdGlvbnMpIHtcclxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuXHJcbiAgdmFyIGJiID0gbmV3IEJsb2JCdWlsZGVyKCk7XHJcbiAgbWFwQXJyYXlCdWZmZXJWaWV3cyhhcnkpLmZvckVhY2goZnVuY3Rpb24ocGFydCkge1xyXG4gICAgYmIuYXBwZW5kKHBhcnQpO1xyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gKG9wdGlvbnMudHlwZSkgPyBiYi5nZXRCbG9iKG9wdGlvbnMudHlwZSkgOiBiYi5nZXRCbG9iKCk7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBCbG9iQ29uc3RydWN0b3IoYXJ5LCBvcHRpb25zKSB7XHJcbiAgcmV0dXJuIG5ldyBCbG9iKG1hcEFycmF5QnVmZmVyVmlld3MoYXJ5KSwgb3B0aW9ucyB8fCB7fSk7XHJcbn07XHJcblxyXG5pZiAodHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgQmxvYkJ1aWxkZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBCbG9iLnByb3RvdHlwZTtcclxuICBCbG9iQ29uc3RydWN0b3IucHJvdG90eXBlID0gQmxvYi5wcm90b3R5cGU7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uKCkge1xyXG4gIGlmIChibG9iU3VwcG9ydGVkKSB7XHJcbiAgICByZXR1cm4gYmxvYlN1cHBvcnRzQXJyYXlCdWZmZXJWaWV3ID8gQmxvYiA6IEJsb2JDb25zdHJ1Y3RvcjtcclxuICB9IGVsc2UgaWYgKGJsb2JCdWlsZGVyU3VwcG9ydGVkKSB7XHJcbiAgICByZXR1cm4gQmxvYkJ1aWxkZXJDb25zdHJ1Y3RvcjtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICB9XHJcbn0pKCk7XHJcbiIsIlxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICpcbiAqIEV4cG9zZSBgZGVidWcoKWAgYXMgdGhlIG1vZHVsZS5cbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVEZWJ1Zy5kZWJ1ZyA9IGNyZWF0ZURlYnVnWydkZWZhdWx0J10gPSBjcmVhdGVEZWJ1ZztcbmV4cG9ydHMuY29lcmNlID0gY29lcmNlO1xuZXhwb3J0cy5kaXNhYmxlID0gZGlzYWJsZTtcbmV4cG9ydHMuZW5hYmxlID0gZW5hYmxlO1xuZXhwb3J0cy5lbmFibGVkID0gZW5hYmxlZDtcbmV4cG9ydHMuaHVtYW5pemUgPSByZXF1aXJlKCdtcycpO1xuXG4vKipcbiAqIEFjdGl2ZSBgZGVidWdgIGluc3RhbmNlcy5cbiAqL1xuZXhwb3J0cy5pbnN0YW5jZXMgPSBbXTtcblxuLyoqXG4gKiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cbiAqL1xuXG5leHBvcnRzLm5hbWVzID0gW107XG5leHBvcnRzLnNraXBzID0gW107XG5cbi8qKlxuICogTWFwIG9mIHNwZWNpYWwgXCIlblwiIGhhbmRsaW5nIGZ1bmN0aW9ucywgZm9yIHRoZSBkZWJ1ZyBcImZvcm1hdFwiIGFyZ3VtZW50LlxuICpcbiAqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyIG9yIHVwcGVyLWNhc2UgbGV0dGVyLCBpLmUuIFwiblwiIGFuZCBcIk5cIi5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMgPSB7fTtcblxuLyoqXG4gKiBTZWxlY3QgYSBjb2xvci5cbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNlbGVjdENvbG9yKG5hbWVzcGFjZSkge1xuICB2YXIgaGFzaCA9IDAsIGk7XG5cbiAgZm9yIChpIGluIG5hbWVzcGFjZSkge1xuICAgIGhhc2ggID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBuYW1lc3BhY2UuY2hhckNvZGVBdChpKTtcbiAgICBoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuICB9XG5cbiAgcmV0dXJuIGV4cG9ydHMuY29sb3JzW01hdGguYWJzKGhhc2gpICUgZXhwb3J0cy5jb2xvcnMubGVuZ3RoXTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlRGVidWcobmFtZXNwYWNlKSB7XG5cbiAgdmFyIHByZXZUaW1lO1xuXG4gIGZ1bmN0aW9uIGRlYnVnKCkge1xuICAgIC8vIGRpc2FibGVkP1xuICAgIGlmICghZGVidWcuZW5hYmxlZCkgcmV0dXJuO1xuXG4gICAgdmFyIHNlbGYgPSBkZWJ1ZztcblxuICAgIC8vIHNldCBgZGlmZmAgdGltZXN0YW1wXG4gICAgdmFyIGN1cnIgPSArbmV3IERhdGUoKTtcbiAgICB2YXIgbXMgPSBjdXJyIC0gKHByZXZUaW1lIHx8IGN1cnIpO1xuICAgIHNlbGYuZGlmZiA9IG1zO1xuICAgIHNlbGYucHJldiA9IHByZXZUaW1lO1xuICAgIHNlbGYuY3VyciA9IGN1cnI7XG4gICAgcHJldlRpbWUgPSBjdXJyO1xuXG4gICAgLy8gdHVybiB0aGUgYGFyZ3VtZW50c2AgaW50byBhIHByb3BlciBBcnJheVxuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcbiAgICB9XG5cbiAgICBhcmdzWzBdID0gZXhwb3J0cy5jb2VyY2UoYXJnc1swXSk7XG5cbiAgICBpZiAoJ3N0cmluZycgIT09IHR5cGVvZiBhcmdzWzBdKSB7XG4gICAgICAvLyBhbnl0aGluZyBlbHNlIGxldCdzIGluc3BlY3Qgd2l0aCAlT1xuICAgICAgYXJncy51bnNoaWZ0KCclTycpO1xuICAgIH1cblxuICAgIC8vIGFwcGx5IGFueSBgZm9ybWF0dGVyc2AgdHJhbnNmb3JtYXRpb25zXG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBhcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywgZnVuY3Rpb24obWF0Y2gsIGZvcm1hdCkge1xuICAgICAgLy8gaWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuICAgICAgaWYgKG1hdGNoID09PSAnJSUnKSByZXR1cm4gbWF0Y2g7XG4gICAgICBpbmRleCsrO1xuICAgICAgdmFyIGZvcm1hdHRlciA9IGV4cG9ydHMuZm9ybWF0dGVyc1tmb3JtYXRdO1xuICAgICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBmb3JtYXR0ZXIpIHtcbiAgICAgICAgdmFyIHZhbCA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICBtYXRjaCA9IGZvcm1hdHRlci5jYWxsKHNlbGYsIHZhbCk7XG5cbiAgICAgICAgLy8gbm93IHdlIG5lZWQgdG8gcmVtb3ZlIGBhcmdzW2luZGV4XWAgc2luY2UgaXQncyBpbmxpbmVkIGluIHRoZSBgZm9ybWF0YFxuICAgICAgICBhcmdzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIGluZGV4LS07XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG5cbiAgICAvLyBhcHBseSBlbnYtc3BlY2lmaWMgZm9ybWF0dGluZyAoY29sb3JzLCBldGMuKVxuICAgIGV4cG9ydHMuZm9ybWF0QXJncy5jYWxsKHNlbGYsIGFyZ3MpO1xuXG4gICAgdmFyIGxvZ0ZuID0gZGVidWcubG9nIHx8IGV4cG9ydHMubG9nIHx8IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSk7XG4gICAgbG9nRm4uYXBwbHkoc2VsZiwgYXJncyk7XG4gIH1cblxuICBkZWJ1Zy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG4gIGRlYnVnLmVuYWJsZWQgPSBleHBvcnRzLmVuYWJsZWQobmFtZXNwYWNlKTtcbiAgZGVidWcudXNlQ29sb3JzID0gZXhwb3J0cy51c2VDb2xvcnMoKTtcbiAgZGVidWcuY29sb3IgPSBzZWxlY3RDb2xvcihuYW1lc3BhY2UpO1xuICBkZWJ1Zy5kZXN0cm95ID0gZGVzdHJveTtcblxuICAvLyBlbnYtc3BlY2lmaWMgaW5pdGlhbGl6YXRpb24gbG9naWMgZm9yIGRlYnVnIGluc3RhbmNlc1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGV4cG9ydHMuaW5pdCkge1xuICAgIGV4cG9ydHMuaW5pdChkZWJ1Zyk7XG4gIH1cblxuICBleHBvcnRzLmluc3RhbmNlcy5wdXNoKGRlYnVnKTtcblxuICByZXR1cm4gZGVidWc7XG59XG5cbmZ1bmN0aW9uIGRlc3Ryb3kgKCkge1xuICB2YXIgaW5kZXggPSBleHBvcnRzLmluc3RhbmNlcy5pbmRleE9mKHRoaXMpO1xuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgZXhwb3J0cy5pbnN0YW5jZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBFbmFibGVzIGEgZGVidWcgbW9kZSBieSBuYW1lc3BhY2VzLiBUaGlzIGNhbiBpbmNsdWRlIG1vZGVzXG4gKiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7XG4gIGV4cG9ydHMuc2F2ZShuYW1lc3BhY2VzKTtcblxuICBleHBvcnRzLm5hbWVzID0gW107XG4gIGV4cG9ydHMuc2tpcHMgPSBbXTtcblxuICB2YXIgaTtcbiAgdmFyIHNwbGl0ID0gKHR5cGVvZiBuYW1lc3BhY2VzID09PSAnc3RyaW5nJyA/IG5hbWVzcGFjZXMgOiAnJykuc3BsaXQoL1tcXHMsXSsvKTtcbiAgdmFyIGxlbiA9IHNwbGl0Lmxlbmd0aDtcblxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoIXNwbGl0W2ldKSBjb250aW51ZTsgLy8gaWdub3JlIGVtcHR5IHN0cmluZ3NcbiAgICBuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXFwqL2csICcuKj8nKTtcbiAgICBpZiAobmFtZXNwYWNlc1swXSA9PT0gJy0nKSB7XG4gICAgICBleHBvcnRzLnNraXBzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzLnN1YnN0cigxKSArICckJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleHBvcnRzLm5hbWVzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzICsgJyQnKSk7XG4gICAgfVxuICB9XG5cbiAgZm9yIChpID0gMDsgaSA8IGV4cG9ydHMuaW5zdGFuY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGluc3RhbmNlID0gZXhwb3J0cy5pbnN0YW5jZXNbaV07XG4gICAgaW5zdGFuY2UuZW5hYmxlZCA9IGV4cG9ydHMuZW5hYmxlZChpbnN0YW5jZS5uYW1lc3BhY2UpO1xuICB9XG59XG5cbi8qKlxuICogRGlzYWJsZSBkZWJ1ZyBvdXRwdXQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBkaXNhYmxlKCkge1xuICBleHBvcnRzLmVuYWJsZSgnJyk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcbiAgaWYgKG5hbWVbbmFtZS5sZW5ndGggLSAxXSA9PT0gJyonKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIGksIGxlbjtcbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5za2lwcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLnNraXBzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgZm9yIChpID0gMCwgbGVuID0gZXhwb3J0cy5uYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChleHBvcnRzLm5hbWVzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQ29lcmNlIGB2YWxgLlxuICpcbiAqIEBwYXJhbSB7TWl4ZWR9IHZhbFxuICogQHJldHVybiB7TWl4ZWR9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBjb2VyY2UodmFsKSB7XG4gIGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikgcmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcbiAgcmV0dXJuIHZhbDtcbn1cbiIsIi8qKlxuICogTW9kdWxlIHJlcXVpcmVtZW50cy5cbiAqL1xuXG52YXIgUG9sbGluZyA9IHJlcXVpcmUoJy4vcG9sbGluZycpO1xudmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb21wb25lbnQtaW5oZXJpdCcpO1xuXG4vKipcbiAqIE1vZHVsZSBleHBvcnRzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gSlNPTlBQb2xsaW5nO1xuXG4vKipcbiAqIENhY2hlZCByZWd1bGFyIGV4cHJlc3Npb25zLlxuICovXG5cbnZhciByTmV3bGluZSA9IC9cXG4vZztcbnZhciByRXNjYXBlZE5ld2xpbmUgPSAvXFxcXG4vZztcblxuLyoqXG4gKiBHbG9iYWwgSlNPTlAgY2FsbGJhY2tzLlxuICovXG5cbnZhciBjYWxsYmFja3M7XG5cbi8qKlxuICogTm9vcC5cbiAqL1xuXG5mdW5jdGlvbiBlbXB0eSAoKSB7IH1cblxuLyoqXG4gKiBVbnRpbCBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWwgaXMgc2hpcHBlZC5cbiAqL1xuZnVuY3Rpb24gZ2xvYiAoKSB7XG4gIHJldHVybiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmXG4gICAgICA6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93XG4gICAgICA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDoge307XG59XG5cbi8qKlxuICogSlNPTlAgUG9sbGluZyBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cy5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gSlNPTlBQb2xsaW5nIChvcHRzKSB7XG4gIFBvbGxpbmcuY2FsbCh0aGlzLCBvcHRzKTtcblxuICB0aGlzLnF1ZXJ5ID0gdGhpcy5xdWVyeSB8fCB7fTtcblxuICAvLyBkZWZpbmUgZ2xvYmFsIGNhbGxiYWNrcyBhcnJheSBpZiBub3QgcHJlc2VudFxuICAvLyB3ZSBkbyB0aGlzIGhlcmUgKGxhemlseSkgdG8gYXZvaWQgdW5uZWVkZWQgZ2xvYmFsIHBvbGx1dGlvblxuICBpZiAoIWNhbGxiYWNrcykge1xuICAgIC8vIHdlIG5lZWQgdG8gY29uc2lkZXIgbXVsdGlwbGUgZW5naW5lcyBpbiB0aGUgc2FtZSBwYWdlXG4gICAgdmFyIGdsb2JhbCA9IGdsb2IoKTtcbiAgICBjYWxsYmFja3MgPSBnbG9iYWwuX19fZWlvID0gKGdsb2JhbC5fX19laW8gfHwgW10pO1xuICB9XG5cbiAgLy8gY2FsbGJhY2sgaWRlbnRpZmllclxuICB0aGlzLmluZGV4ID0gY2FsbGJhY2tzLmxlbmd0aDtcblxuICAvLyBhZGQgY2FsbGJhY2sgdG8ganNvbnAgZ2xvYmFsXG4gIHZhciBzZWxmID0gdGhpcztcbiAgY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24gKG1zZykge1xuICAgIHNlbGYub25EYXRhKG1zZyk7XG4gIH0pO1xuXG4gIC8vIGFwcGVuZCB0byBxdWVyeSBzdHJpbmdcbiAgdGhpcy5xdWVyeS5qID0gdGhpcy5pbmRleDtcblxuICAvLyBwcmV2ZW50IHNwdXJpb3VzIGVycm9ycyBmcm9tIGJlaW5nIGVtaXR0ZWQgd2hlbiB0aGUgd2luZG93IGlzIHVubG9hZGVkXG4gIGlmICh0eXBlb2YgYWRkRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLnNjcmlwdCkgc2VsZi5zY3JpcHQub25lcnJvciA9IGVtcHR5O1xuICAgIH0sIGZhbHNlKTtcbiAgfVxufVxuXG4vKipcbiAqIEluaGVyaXRzIGZyb20gUG9sbGluZy5cbiAqL1xuXG5pbmhlcml0KEpTT05QUG9sbGluZywgUG9sbGluZyk7XG5cbi8qXG4gKiBKU09OUCBvbmx5IHN1cHBvcnRzIGJpbmFyeSBhcyBiYXNlNjQgZW5jb2RlZCBzdHJpbmdzXG4gKi9cblxuSlNPTlBQb2xsaW5nLnByb3RvdHlwZS5zdXBwb3J0c0JpbmFyeSA9IGZhbHNlO1xuXG4vKipcbiAqIENsb3NlcyB0aGUgc29ja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkpTT05QUG9sbGluZy5wcm90b3R5cGUuZG9DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMuc2NyaXB0KSB7XG4gICAgdGhpcy5zY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnNjcmlwdCk7XG4gICAgdGhpcy5zY3JpcHQgPSBudWxsO1xuICB9XG5cbiAgaWYgKHRoaXMuZm9ybSkge1xuICAgIHRoaXMuZm9ybS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZm9ybSk7XG4gICAgdGhpcy5mb3JtID0gbnVsbDtcbiAgICB0aGlzLmlmcmFtZSA9IG51bGw7XG4gIH1cblxuICBQb2xsaW5nLnByb3RvdHlwZS5kb0Nsb3NlLmNhbGwodGhpcyk7XG59O1xuXG4vKipcbiAqIFN0YXJ0cyBhIHBvbGwgY3ljbGUuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuSlNPTlBQb2xsaW5nLnByb3RvdHlwZS5kb1BvbGwgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG4gIGlmICh0aGlzLnNjcmlwdCkge1xuICAgIHRoaXMuc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5zY3JpcHQpO1xuICAgIHRoaXMuc2NyaXB0ID0gbnVsbDtcbiAgfVxuXG4gIHNjcmlwdC5hc3luYyA9IHRydWU7XG4gIHNjcmlwdC5zcmMgPSB0aGlzLnVyaSgpO1xuICBzY3JpcHQub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgc2VsZi5vbkVycm9yKCdqc29ucCBwb2xsIGVycm9yJywgZSk7XG4gIH07XG5cbiAgdmFyIGluc2VydEF0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdO1xuICBpZiAoaW5zZXJ0QXQpIHtcbiAgICBpbnNlcnRBdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzY3JpcHQsIGluc2VydEF0KTtcbiAgfSBlbHNlIHtcbiAgICAoZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5ib2R5KS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICB9XG4gIHRoaXMuc2NyaXB0ID0gc2NyaXB0O1xuXG4gIHZhciBpc1VBZ2Vja28gPSAndW5kZWZpbmVkJyAhPT0gdHlwZW9mIG5hdmlnYXRvciAmJiAvZ2Vja28vaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4gIGlmIChpc1VBZ2Vja28pIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgICB9LCAxMDApO1xuICB9XG59O1xuXG4vKipcbiAqIFdyaXRlcyB3aXRoIGEgaGlkZGVuIGlmcmFtZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZGF0YSB0byBzZW5kXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsZWQgdXBvbiBmbHVzaC5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbkpTT05QUG9sbGluZy5wcm90b3R5cGUuZG9Xcml0ZSA9IGZ1bmN0aW9uIChkYXRhLCBmbikge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgaWYgKCF0aGlzLmZvcm0pIHtcbiAgICB2YXIgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTtcbiAgICB2YXIgYXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7XG4gICAgdmFyIGlkID0gdGhpcy5pZnJhbWVJZCA9ICdlaW9faWZyYW1lXycgKyB0aGlzLmluZGV4O1xuICAgIHZhciBpZnJhbWU7XG5cbiAgICBmb3JtLmNsYXNzTmFtZSA9ICdzb2NrZXRpbyc7XG4gICAgZm9ybS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgZm9ybS5zdHlsZS50b3AgPSAnLTEwMDBweCc7XG4gICAgZm9ybS5zdHlsZS5sZWZ0ID0gJy0xMDAwcHgnO1xuICAgIGZvcm0udGFyZ2V0ID0gaWQ7XG4gICAgZm9ybS5tZXRob2QgPSAnUE9TVCc7XG4gICAgZm9ybS5zZXRBdHRyaWJ1dGUoJ2FjY2VwdC1jaGFyc2V0JywgJ3V0Zi04Jyk7XG4gICAgYXJlYS5uYW1lID0gJ2QnO1xuICAgIGZvcm0uYXBwZW5kQ2hpbGQoYXJlYSk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmb3JtKTtcblxuICAgIHRoaXMuZm9ybSA9IGZvcm07XG4gICAgdGhpcy5hcmVhID0gYXJlYTtcbiAgfVxuXG4gIHRoaXMuZm9ybS5hY3Rpb24gPSB0aGlzLnVyaSgpO1xuXG4gIGZ1bmN0aW9uIGNvbXBsZXRlICgpIHtcbiAgICBpbml0SWZyYW1lKCk7XG4gICAgZm4oKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRJZnJhbWUgKCkge1xuICAgIGlmIChzZWxmLmlmcmFtZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2VsZi5mb3JtLnJlbW92ZUNoaWxkKHNlbGYuaWZyYW1lKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgc2VsZi5vbkVycm9yKCdqc29ucCBwb2xsaW5nIGlmcmFtZSByZW1vdmFsIGVycm9yJywgZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIC8vIGllNiBkeW5hbWljIGlmcmFtZXMgd2l0aCB0YXJnZXQ9XCJcIiBzdXBwb3J0ICh0aGFua3MgQ2hyaXMgTGFtYmFjaGVyKVxuICAgICAgdmFyIGh0bWwgPSAnPGlmcmFtZSBzcmM9XCJqYXZhc2NyaXB0OjBcIiBuYW1lPVwiJyArIHNlbGYuaWZyYW1lSWQgKyAnXCI+JztcbiAgICAgIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaHRtbCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gICAgICBpZnJhbWUubmFtZSA9IHNlbGYuaWZyYW1lSWQ7XG4gICAgICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6MCc7XG4gICAgfVxuXG4gICAgaWZyYW1lLmlkID0gc2VsZi5pZnJhbWVJZDtcblxuICAgIHNlbGYuZm9ybS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAgIHNlbGYuaWZyYW1lID0gaWZyYW1lO1xuICB9XG5cbiAgaW5pdElmcmFtZSgpO1xuXG4gIC8vIGVzY2FwZSBcXG4gdG8gcHJldmVudCBpdCBmcm9tIGJlaW5nIGNvbnZlcnRlZCBpbnRvIFxcclxcbiBieSBzb21lIFVBc1xuICAvLyBkb3VibGUgZXNjYXBpbmcgaXMgcmVxdWlyZWQgZm9yIGVzY2FwZWQgbmV3IGxpbmVzIGJlY2F1c2UgdW5lc2NhcGluZyBvZiBuZXcgbGluZXMgY2FuIGJlIGRvbmUgc2FmZWx5IG9uIHNlcnZlci1zaWRlXG4gIGRhdGEgPSBkYXRhLnJlcGxhY2UockVzY2FwZWROZXdsaW5lLCAnXFxcXFxcbicpO1xuICB0aGlzLmFyZWEudmFsdWUgPSBkYXRhLnJlcGxhY2Uock5ld2xpbmUsICdcXFxcbicpO1xuXG4gIHRyeSB7XG4gICAgdGhpcy5mb3JtLnN1Ym1pdCgpO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIGlmICh0aGlzLmlmcmFtZS5hdHRhY2hFdmVudCkge1xuICAgIHRoaXMuaWZyYW1lLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLmlmcmFtZS5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmlmcmFtZS5vbmxvYWQgPSBjb21wbGV0ZTtcbiAgfVxufTtcbiIsIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG52YXIgVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi4vdHJhbnNwb3J0Jyk7XG52YXIgcGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpO1xudmFyIHBhcnNlcXMgPSByZXF1aXJlKCdwYXJzZXFzJyk7XG52YXIgaW5oZXJpdCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1pbmhlcml0Jyk7XG52YXIgeWVhc3QgPSByZXF1aXJlKCd5ZWFzdCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZW5naW5lLmlvLWNsaWVudDp3ZWJzb2NrZXQnKTtcbnZhciBCcm93c2VyV2ViU29ja2V0LCBOb2RlV2ViU29ja2V0O1xuaWYgKHR5cGVvZiBzZWxmID09PSAndW5kZWZpbmVkJykge1xuICB0cnkge1xuICAgIE5vZGVXZWJTb2NrZXQgPSByZXF1aXJlKCd3cycpO1xuICB9IGNhdGNoIChlKSB7IH1cbn0gZWxzZSB7XG4gIEJyb3dzZXJXZWJTb2NrZXQgPSBzZWxmLldlYlNvY2tldCB8fCBzZWxmLk1veldlYlNvY2tldDtcbn1cblxuLyoqXG4gKiBHZXQgZWl0aGVyIHRoZSBgV2ViU29ja2V0YCBvciBgTW96V2ViU29ja2V0YCBnbG9iYWxzXG4gKiBpbiB0aGUgYnJvd3NlciBvciB0cnkgdG8gcmVzb2x2ZSBXZWJTb2NrZXQtY29tcGF0aWJsZVxuICogaW50ZXJmYWNlIGV4cG9zZWQgYnkgYHdzYCBmb3IgTm9kZS1saWtlIGVudmlyb25tZW50LlxuICovXG5cbnZhciBXZWJTb2NrZXQgPSBCcm93c2VyV2ViU29ja2V0IHx8IE5vZGVXZWJTb2NrZXQ7XG5cbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBXUztcblxuLyoqXG4gKiBXZWJTb2NrZXQgdHJhbnNwb3J0IGNvbnN0cnVjdG9yLlxuICpcbiAqIEBhcGkge09iamVjdH0gY29ubmVjdGlvbiBvcHRpb25zXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIFdTIChvcHRzKSB7XG4gIHZhciBmb3JjZUJhc2U2NCA9IChvcHRzICYmIG9wdHMuZm9yY2VCYXNlNjQpO1xuICBpZiAoZm9yY2VCYXNlNjQpIHtcbiAgICB0aGlzLnN1cHBvcnRzQmluYXJ5ID0gZmFsc2U7XG4gIH1cbiAgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSA9IG9wdHMucGVyTWVzc2FnZURlZmxhdGU7XG4gIHRoaXMudXNpbmdCcm93c2VyV2ViU29ja2V0ID0gQnJvd3NlcldlYlNvY2tldCAmJiAhb3B0cy5mb3JjZU5vZGU7XG4gIHRoaXMucHJvdG9jb2xzID0gb3B0cy5wcm90b2NvbHM7XG4gIGlmICghdGhpcy51c2luZ0Jyb3dzZXJXZWJTb2NrZXQpIHtcbiAgICBXZWJTb2NrZXQgPSBOb2RlV2ViU29ja2V0O1xuICB9XG4gIFRyYW5zcG9ydC5jYWxsKHRoaXMsIG9wdHMpO1xufVxuXG4vKipcbiAqIEluaGVyaXRzIGZyb20gVHJhbnNwb3J0LlxuICovXG5cbmluaGVyaXQoV1MsIFRyYW5zcG9ydCk7XG5cbi8qKlxuICogVHJhbnNwb3J0IG5hbWUuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5XUy5wcm90b3R5cGUubmFtZSA9ICd3ZWJzb2NrZXQnO1xuXG4vKlxuICogV2ViU29ja2V0cyBzdXBwb3J0IGJpbmFyeVxuICovXG5cbldTLnByb3RvdHlwZS5zdXBwb3J0c0JpbmFyeSA9IHRydWU7XG5cbi8qKlxuICogT3BlbnMgc29ja2V0LlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS5kb09wZW4gPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghdGhpcy5jaGVjaygpKSB7XG4gICAgLy8gbGV0IHByb2JlIHRpbWVvdXRcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgdXJpID0gdGhpcy51cmkoKTtcbiAgdmFyIHByb3RvY29scyA9IHRoaXMucHJvdG9jb2xzO1xuICB2YXIgb3B0cyA9IHtcbiAgICBhZ2VudDogdGhpcy5hZ2VudCxcbiAgICBwZXJNZXNzYWdlRGVmbGF0ZTogdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZVxuICB9O1xuXG4gIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudFxuICBvcHRzLnBmeCA9IHRoaXMucGZ4O1xuICBvcHRzLmtleSA9IHRoaXMua2V5O1xuICBvcHRzLnBhc3NwaHJhc2UgPSB0aGlzLnBhc3NwaHJhc2U7XG4gIG9wdHMuY2VydCA9IHRoaXMuY2VydDtcbiAgb3B0cy5jYSA9IHRoaXMuY2E7XG4gIG9wdHMuY2lwaGVycyA9IHRoaXMuY2lwaGVycztcbiAgb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQgPSB0aGlzLnJlamVjdFVuYXV0aG9yaXplZDtcbiAgaWYgKHRoaXMuZXh0cmFIZWFkZXJzKSB7XG4gICAgb3B0cy5oZWFkZXJzID0gdGhpcy5leHRyYUhlYWRlcnM7XG4gIH1cbiAgaWYgKHRoaXMubG9jYWxBZGRyZXNzKSB7XG4gICAgb3B0cy5sb2NhbEFkZHJlc3MgPSB0aGlzLmxvY2FsQWRkcmVzcztcbiAgfVxuXG4gIHRyeSB7XG4gICAgdGhpcy53cyA9IHRoaXMudXNpbmdCcm93c2VyV2ViU29ja2V0ICYmICF0aGlzLmlzUmVhY3ROYXRpdmUgPyAocHJvdG9jb2xzID8gbmV3IFdlYlNvY2tldCh1cmksIHByb3RvY29scykgOiBuZXcgV2ViU29ja2V0KHVyaSkpIDogbmV3IFdlYlNvY2tldCh1cmksIHByb3RvY29scywgb3B0cyk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgfVxuXG4gIGlmICh0aGlzLndzLmJpbmFyeVR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICh0aGlzLndzLnN1cHBvcnRzICYmIHRoaXMud3Muc3VwcG9ydHMuYmluYXJ5KSB7XG4gICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IHRydWU7XG4gICAgdGhpcy53cy5iaW5hcnlUeXBlID0gJ25vZGVidWZmZXInO1xuICB9IGVsc2Uge1xuICAgIHRoaXMud3MuYmluYXJ5VHlwZSA9ICdhcnJheWJ1ZmZlcic7XG4gIH1cblxuICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XG59O1xuXG4vKipcbiAqIEFkZHMgZXZlbnQgbGlzdGVuZXJzIHRvIHRoZSBzb2NrZXRcbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB0aGlzLndzLm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZWxmLm9uT3BlbigpO1xuICB9O1xuICB0aGlzLndzLm9uY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5vbkNsb3NlKCk7XG4gIH07XG4gIHRoaXMud3Mub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgc2VsZi5vbkRhdGEoZXYuZGF0YSk7XG4gIH07XG4gIHRoaXMud3Mub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgc2VsZi5vbkVycm9yKCd3ZWJzb2NrZXQgZXJyb3InLCBlKTtcbiAgfTtcbn07XG5cbi8qKlxuICogV3JpdGVzIGRhdGEgdG8gc29ja2V0LlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IG9mIHBhY2tldHMuXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAocGFja2V0cykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcblxuICAvLyBlbmNvZGVQYWNrZXQgZWZmaWNpZW50IGFzIGl0IHVzZXMgV1MgZnJhbWluZ1xuICAvLyBubyBuZWVkIGZvciBlbmNvZGVQYXlsb2FkXG4gIHZhciB0b3RhbCA9IHBhY2tldHMubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHRvdGFsOyBpIDwgbDsgaSsrKSB7XG4gICAgKGZ1bmN0aW9uIChwYWNrZXQpIHtcbiAgICAgIHBhcnNlci5lbmNvZGVQYWNrZXQocGFja2V0LCBzZWxmLnN1cHBvcnRzQmluYXJ5LCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBpZiAoIXNlbGYudXNpbmdCcm93c2VyV2ViU29ja2V0KSB7XG4gICAgICAgICAgLy8gYWx3YXlzIGNyZWF0ZSBhIG5ldyBvYmplY3QgKEdILTQzNylcbiAgICAgICAgICB2YXIgb3B0cyA9IHt9O1xuICAgICAgICAgIGlmIChwYWNrZXQub3B0aW9ucykge1xuICAgICAgICAgICAgb3B0cy5jb21wcmVzcyA9IHBhY2tldC5vcHRpb25zLmNvbXByZXNzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWxmLnBlck1lc3NhZ2VEZWZsYXRlKSB7XG4gICAgICAgICAgICB2YXIgbGVuID0gJ3N0cmluZycgPT09IHR5cGVvZiBkYXRhID8gQnVmZmVyLmJ5dGVMZW5ndGgoZGF0YSkgOiBkYXRhLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChsZW4gPCBzZWxmLnBlck1lc3NhZ2VEZWZsYXRlLnRocmVzaG9sZCkge1xuICAgICAgICAgICAgICBvcHRzLmNvbXByZXNzID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU29tZXRpbWVzIHRoZSB3ZWJzb2NrZXQgaGFzIGFscmVhZHkgYmVlbiBjbG9zZWQgYnV0IHRoZSBicm93c2VyIGRpZG4ndFxuICAgICAgICAvLyBoYXZlIGEgY2hhbmNlIG9mIGluZm9ybWluZyB1cyBhYm91dCBpdCB5ZXQsIGluIHRoYXQgY2FzZSBzZW5kIHdpbGxcbiAgICAgICAgLy8gdGhyb3cgYW4gZXJyb3JcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoc2VsZi51c2luZ0Jyb3dzZXJXZWJTb2NrZXQpIHtcbiAgICAgICAgICAgIC8vIFR5cGVFcnJvciBpcyB0aHJvd24gd2hlbiBwYXNzaW5nIHRoZSBzZWNvbmQgYXJndW1lbnQgb24gU2FmYXJpXG4gICAgICAgICAgICBzZWxmLndzLnNlbmQoZGF0YSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGYud3Muc2VuZChkYXRhLCBvcHRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBkZWJ1Zygnd2Vic29ja2V0IGNsb3NlZCBiZWZvcmUgb25jbG9zZSBldmVudCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLS10b3RhbCB8fCBkb25lKCk7XG4gICAgICB9KTtcbiAgICB9KShwYWNrZXRzW2ldKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRvbmUgKCkge1xuICAgIHNlbGYuZW1pdCgnZmx1c2gnKTtcblxuICAgIC8vIGZha2UgZHJhaW5cbiAgICAvLyBkZWZlciB0byBuZXh0IHRpY2sgdG8gYWxsb3cgU29ja2V0IHRvIGNsZWFyIHdyaXRlQnVmZmVyXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBzZWxmLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIHNlbGYuZW1pdCgnZHJhaW4nKTtcbiAgICB9LCAwKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDYWxsZWQgdXBvbiBjbG9zZVxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24gKCkge1xuICBUcmFuc3BvcnQucHJvdG90eXBlLm9uQ2xvc2UuY2FsbCh0aGlzKTtcbn07XG5cbi8qKlxuICogQ2xvc2VzIHNvY2tldC5cbiAqXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5XUy5wcm90b3R5cGUuZG9DbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHR5cGVvZiB0aGlzLndzICE9PSAndW5kZWZpbmVkJykge1xuICAgIHRoaXMud3MuY2xvc2UoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgdXJpIGZvciBjb25uZWN0aW9uLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbldTLnByb3RvdHlwZS51cmkgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBxdWVyeSA9IHRoaXMucXVlcnkgfHwge307XG4gIHZhciBzY2hlbWEgPSB0aGlzLnNlY3VyZSA/ICd3c3MnIDogJ3dzJztcbiAgdmFyIHBvcnQgPSAnJztcblxuICAvLyBhdm9pZCBwb3J0IGlmIGRlZmF1bHQgZm9yIHNjaGVtYVxuICBpZiAodGhpcy5wb3J0ICYmICgoJ3dzcycgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5wb3J0KSAhPT0gNDQzKSB8fFxuICAgICgnd3MnID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMucG9ydCkgIT09IDgwKSkpIHtcbiAgICBwb3J0ID0gJzonICsgdGhpcy5wb3J0O1xuICB9XG5cbiAgLy8gYXBwZW5kIHRpbWVzdGFtcCB0byBVUklcbiAgaWYgKHRoaXMudGltZXN0YW1wUmVxdWVzdHMpIHtcbiAgICBxdWVyeVt0aGlzLnRpbWVzdGFtcFBhcmFtXSA9IHllYXN0KCk7XG4gIH1cblxuICAvLyBjb21tdW5pY2F0ZSBiaW5hcnkgc3VwcG9ydCBjYXBhYmlsaXRpZXNcbiAgaWYgKCF0aGlzLnN1cHBvcnRzQmluYXJ5KSB7XG4gICAgcXVlcnkuYjY0ID0gMTtcbiAgfVxuXG4gIHF1ZXJ5ID0gcGFyc2Vxcy5lbmNvZGUocXVlcnkpO1xuXG4gIC8vIHByZXBlbmQgPyB0byBxdWVyeVxuICBpZiAocXVlcnkubGVuZ3RoKSB7XG4gICAgcXVlcnkgPSAnPycgKyBxdWVyeTtcbiAgfVxuXG4gIHZhciBpcHY2ID0gdGhpcy5ob3N0bmFtZS5pbmRleE9mKCc6JykgIT09IC0xO1xuICByZXR1cm4gc2NoZW1hICsgJzovLycgKyAoaXB2NiA/ICdbJyArIHRoaXMuaG9zdG5hbWUgKyAnXScgOiB0aGlzLmhvc3RuYW1lKSArIHBvcnQgKyB0aGlzLnBhdGggKyBxdWVyeTtcbn07XG5cbi8qKlxuICogRmVhdHVyZSBkZXRlY3Rpb24gZm9yIFdlYlNvY2tldC5cbiAqXG4gKiBAcmV0dXJuIHtCb29sZWFufSB3aGV0aGVyIHRoaXMgdHJhbnNwb3J0IGlzIGF2YWlsYWJsZS5cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuV1MucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gISFXZWJTb2NrZXQgJiYgISgnX19pbml0aWFsaXplJyBpbiBXZWJTb2NrZXQgJiYgdGhpcy5uYW1lID09PSBXUy5wcm90b3R5cGUubmFtZSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB0b0FycmF5XG5cbmZ1bmN0aW9uIHRvQXJyYXkobGlzdCwgaW5kZXgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXVxuXG4gICAgaW5kZXggPSBpbmRleCB8fCAwXG5cbiAgICBmb3IgKHZhciBpID0gaW5kZXggfHwgMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYXJyYXlbaSAtIGluZGV4XSA9IGxpc3RbaV1cbiAgICB9XG5cbiAgICByZXR1cm4gYXJyYXlcbn1cbiIsIlxuLyoqXG4gKiBFeHBvc2UgYEJhY2tvZmZgLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gQmFja29mZjtcblxuLyoqXG4gKiBJbml0aWFsaXplIGJhY2tvZmYgdGltZXIgd2l0aCBgb3B0c2AuXG4gKlxuICogLSBgbWluYCBpbml0aWFsIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIFsxMDBdXG4gKiAtIGBtYXhgIG1heCB0aW1lb3V0IFsxMDAwMF1cbiAqIC0gYGppdHRlcmAgWzBdXG4gKiAtIGBmYWN0b3JgIFsyXVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIEJhY2tvZmYob3B0cykge1xuICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgdGhpcy5tcyA9IG9wdHMubWluIHx8IDEwMDtcbiAgdGhpcy5tYXggPSBvcHRzLm1heCB8fCAxMDAwMDtcbiAgdGhpcy5mYWN0b3IgPSBvcHRzLmZhY3RvciB8fCAyO1xuICB0aGlzLmppdHRlciA9IG9wdHMuaml0dGVyID4gMCAmJiBvcHRzLmppdHRlciA8PSAxID8gb3B0cy5qaXR0ZXIgOiAwO1xuICB0aGlzLmF0dGVtcHRzID0gMDtcbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGJhY2tvZmYgZHVyYXRpb24uXG4gKlxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5kdXJhdGlvbiA9IGZ1bmN0aW9uKCl7XG4gIHZhciBtcyA9IHRoaXMubXMgKiBNYXRoLnBvdyh0aGlzLmZhY3RvciwgdGhpcy5hdHRlbXB0cysrKTtcbiAgaWYgKHRoaXMuaml0dGVyKSB7XG4gICAgdmFyIHJhbmQgPSAgTWF0aC5yYW5kb20oKTtcbiAgICB2YXIgZGV2aWF0aW9uID0gTWF0aC5mbG9vcihyYW5kICogdGhpcy5qaXR0ZXIgKiBtcyk7XG4gICAgbXMgPSAoTWF0aC5mbG9vcihyYW5kICogMTApICYgMSkgPT0gMCAgPyBtcyAtIGRldmlhdGlvbiA6IG1zICsgZGV2aWF0aW9uO1xuICB9XG4gIHJldHVybiBNYXRoLm1pbihtcywgdGhpcy5tYXgpIHwgMDtcbn07XG5cbi8qKlxuICogUmVzZXQgdGhlIG51bWJlciBvZiBhdHRlbXB0cy5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKXtcbiAgdGhpcy5hdHRlbXB0cyA9IDA7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgbWluaW11bSBkdXJhdGlvblxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuc2V0TWluID0gZnVuY3Rpb24obWluKXtcbiAgdGhpcy5tcyA9IG1pbjtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBtYXhpbXVtIGR1cmF0aW9uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRNYXggPSBmdW5jdGlvbihtYXgpe1xuICB0aGlzLm1heCA9IG1heDtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBqaXR0ZXJcbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnNldEppdHRlciA9IGZ1bmN0aW9uKGppdHRlcil7XG4gIHRoaXMuaml0dGVyID0gaml0dGVyO1xufTtcblxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEJ1ZmZlclNldF8xID0gcmVxdWlyZShcIi4vQnVmZmVyU2V0XCIpO1xudmFyIEJ1ZmZlcl8xID0gcmVxdWlyZShcIi4vQnVmZmVyXCIpO1xudmFyIENvbXBvc2l0aW9uSGVscGVyXzEgPSByZXF1aXJlKFwiLi9Db21wb3NpdGlvbkhlbHBlclwiKTtcbnZhciBFdmVudEVtaXR0ZXJfMSA9IHJlcXVpcmUoXCIuL2NvbW1vbi9FdmVudEVtaXR0ZXJcIik7XG52YXIgVmlld3BvcnRfMSA9IHJlcXVpcmUoXCIuL1ZpZXdwb3J0XCIpO1xudmFyIENsaXBib2FyZF8xID0gcmVxdWlyZShcIi4vdWkvQ2xpcGJvYXJkXCIpO1xudmFyIEVzY2FwZVNlcXVlbmNlc18xID0gcmVxdWlyZShcIi4vY29tbW9uL2RhdGEvRXNjYXBlU2VxdWVuY2VzXCIpO1xudmFyIElucHV0SGFuZGxlcl8xID0gcmVxdWlyZShcIi4vSW5wdXRIYW5kbGVyXCIpO1xudmFyIFJlbmRlcmVyXzEgPSByZXF1aXJlKFwiLi9yZW5kZXJlci9SZW5kZXJlclwiKTtcbnZhciBMaW5raWZpZXJfMSA9IHJlcXVpcmUoXCIuL0xpbmtpZmllclwiKTtcbnZhciBTZWxlY3Rpb25NYW5hZ2VyXzEgPSByZXF1aXJlKFwiLi9TZWxlY3Rpb25NYW5hZ2VyXCIpO1xudmFyIENoYXJNZWFzdXJlXzEgPSByZXF1aXJlKFwiLi91aS9DaGFyTWVhc3VyZVwiKTtcbnZhciBCcm93c2VyID0gcmVxdWlyZShcIi4vY29yZS9QbGF0Zm9ybVwiKTtcbnZhciBMaWZlY3ljbGVfMSA9IHJlcXVpcmUoXCIuL3VpL0xpZmVjeWNsZVwiKTtcbnZhciBTdHJpbmdzID0gcmVxdWlyZShcIi4vU3RyaW5nc1wiKTtcbnZhciBNb3VzZUhlbHBlcl8xID0gcmVxdWlyZShcIi4vdXRpbHMvTW91c2VIZWxwZXJcIik7XG52YXIgQ2xvbmVfMSA9IHJlcXVpcmUoXCIuL3V0aWxzL0Nsb25lXCIpO1xudmFyIFNvdW5kTWFuYWdlcl8xID0gcmVxdWlyZShcIi4vU291bmRNYW5hZ2VyXCIpO1xudmFyIENvbG9yTWFuYWdlcl8xID0gcmVxdWlyZShcIi4vcmVuZGVyZXIvQ29sb3JNYW5hZ2VyXCIpO1xudmFyIE1vdXNlWm9uZU1hbmFnZXJfMSA9IHJlcXVpcmUoXCIuL3VpL01vdXNlWm9uZU1hbmFnZXJcIik7XG52YXIgQWNjZXNzaWJpbGl0eU1hbmFnZXJfMSA9IHJlcXVpcmUoXCIuL0FjY2Vzc2liaWxpdHlNYW5hZ2VyXCIpO1xudmFyIFNjcmVlbkRwck1vbml0b3JfMSA9IHJlcXVpcmUoXCIuL3VpL1NjcmVlbkRwck1vbml0b3JcIik7XG52YXIgQ2hhckF0bGFzQ2FjaGVfMSA9IHJlcXVpcmUoXCIuL3JlbmRlcmVyL2F0bGFzL0NoYXJBdGxhc0NhY2hlXCIpO1xudmFyIERvbVJlbmRlcmVyXzEgPSByZXF1aXJlKFwiLi9yZW5kZXJlci9kb20vRG9tUmVuZGVyZXJcIik7XG52YXIgS2V5Ym9hcmRfMSA9IHJlcXVpcmUoXCIuL2NvcmUvaW5wdXQvS2V5Ym9hcmRcIik7XG52YXIgZG9jdW1lbnQgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpID8gd2luZG93LmRvY3VtZW50IDogbnVsbDtcbnZhciBXUklURV9CVUZGRVJfUEFVU0VfVEhSRVNIT0xEID0gNTtcbnZhciBXUklURV9CQVRDSF9TSVpFID0gMzAwO1xudmFyIENPTlNUUlVDVE9SX09OTFlfT1BUSU9OUyA9IFsnY29scycsICdyb3dzJ107XG52YXIgREVGQVVMVF9PUFRJT05TID0ge1xuICAgIGNvbHM6IDgwLFxuICAgIHJvd3M6IDI0LFxuICAgIGNvbnZlcnRFb2w6IGZhbHNlLFxuICAgIHRlcm1OYW1lOiAneHRlcm0nLFxuICAgIGN1cnNvckJsaW5rOiBmYWxzZSxcbiAgICBjdXJzb3JTdHlsZTogJ2Jsb2NrJyxcbiAgICBiZWxsU291bmQ6IFNvdW5kTWFuYWdlcl8xLkRFRkFVTFRfQkVMTF9TT1VORCxcbiAgICBiZWxsU3R5bGU6ICdub25lJyxcbiAgICBkcmF3Qm9sZFRleHRJbkJyaWdodENvbG9yczogdHJ1ZSxcbiAgICBlbmFibGVCb2xkOiB0cnVlLFxuICAgIGV4cGVyaW1lbnRhbENoYXJBdGxhczogJ3N0YXRpYycsXG4gICAgZm9udEZhbWlseTogJ2NvdXJpZXItbmV3LCBjb3VyaWVyLCBtb25vc3BhY2UnLFxuICAgIGZvbnRTaXplOiAxNSxcbiAgICBmb250V2VpZ2h0OiAnbm9ybWFsJyxcbiAgICBmb250V2VpZ2h0Qm9sZDogJ2JvbGQnLFxuICAgIGxpbmVIZWlnaHQ6IDEuMCxcbiAgICBsZXR0ZXJTcGFjaW5nOiAwLFxuICAgIHNjcm9sbGJhY2s6IDEwMDAsXG4gICAgc2NyZWVuS2V5czogZmFsc2UsXG4gICAgc2NyZWVuUmVhZGVyTW9kZTogZmFsc2UsXG4gICAgZGVidWc6IGZhbHNlLFxuICAgIG1hY09wdGlvbklzTWV0YTogZmFsc2UsXG4gICAgbWFjT3B0aW9uQ2xpY2tGb3JjZXNTZWxlY3Rpb246IGZhbHNlLFxuICAgIGNhbmNlbEV2ZW50czogZmFsc2UsXG4gICAgZGlzYWJsZVN0ZGluOiBmYWxzZSxcbiAgICB1c2VGbG93Q29udHJvbDogZmFsc2UsXG4gICAgYWxsb3dUcmFuc3BhcmVuY3k6IGZhbHNlLFxuICAgIHRhYlN0b3BXaWR0aDogOCxcbiAgICB0aGVtZTogbnVsbCxcbiAgICByaWdodENsaWNrU2VsZWN0c1dvcmQ6IEJyb3dzZXIuaXNNYWMsXG4gICAgcmVuZGVyZXJUeXBlOiAnY2FudmFzJyxcbiAgICBleHBlcmltZW50YWxCdWZmZXJMaW5lSW1wbDogJ1R5cGVkQXJyYXknXG59O1xudmFyIFRlcm1pbmFsID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVGVybWluYWwsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVGVybWluYWwob3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5icm93c2VyID0gQnJvd3NlcjtcbiAgICAgICAgX3RoaXMuX2JsYW5rTGluZSA9IG51bGw7XG4gICAgICAgIF90aGlzLm9wdGlvbnMgPSBDbG9uZV8xLmNsb25lKG9wdGlvbnMpO1xuICAgICAgICBfdGhpcy5fc2V0dXAoKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuX2N1c3RvbUtleUV2ZW50SGFuZGxlciA9IG51bGw7XG4gICAgICAgIENoYXJBdGxhc0NhY2hlXzEucmVtb3ZlVGVybWluYWxGcm9tQ2FjaGUodGhpcyk7XG4gICAgICAgIHRoaXMuaGFuZGxlciA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICAgICAgdGhpcy53cml0ZSA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudCAmJiB0aGlzLmVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZGlzcG9zZSgpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLl9zZXR1cCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgT2JqZWN0LmtleXMoREVGQVVMVF9PUFRJT05TKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zW2tleV0gPT09IG51bGwgfHwgX3RoaXMub3B0aW9uc1trZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5vcHRpb25zW2tleV0gPSBERUZBVUxUX09QVElPTlNba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3BhcmVudCA9IGRvY3VtZW50ID8gZG9jdW1lbnQuYm9keSA6IG51bGw7XG4gICAgICAgIHRoaXMuY29scyA9IHRoaXMub3B0aW9ucy5jb2xzO1xuICAgICAgICB0aGlzLnJvd3MgPSB0aGlzLm9wdGlvbnMucm93cztcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5oYW5kbGVyKSB7XG4gICAgICAgICAgICB0aGlzLm9uKCdkYXRhJywgdGhpcy5vcHRpb25zLmhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3Vyc29yU3RhdGUgPSAwO1xuICAgICAgICB0aGlzLmN1cnNvckhpZGRlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9jdXN0b21LZXlFdmVudEhhbmRsZXIgPSBudWxsO1xuICAgICAgICB0aGlzLmFwcGxpY2F0aW9uS2V5cGFkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYXBwbGljYXRpb25DdXJzb3IgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vcmlnaW5Nb2RlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaW5zZXJ0TW9kZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLndyYXBhcm91bmRNb2RlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5icmFja2V0ZWRQYXN0ZU1vZGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jaGFyc2V0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5nY2hhcnNldCA9IG51bGw7XG4gICAgICAgIHRoaXMuZ2xldmVsID0gMDtcbiAgICAgICAgdGhpcy5jaGFyc2V0cyA9IFtudWxsXTtcbiAgICAgICAgdGhpcy5jdXJBdHRyID0gQnVmZmVyXzEuREVGQVVMVF9BVFRSO1xuICAgICAgICB0aGlzLnBhcmFtcyA9IFtdO1xuICAgICAgICB0aGlzLmN1cnJlbnRQYXJhbSA9IDA7XG4gICAgICAgIHRoaXMud3JpdGVCdWZmZXIgPSBbXTtcbiAgICAgICAgdGhpcy5fd3JpdGVJblByb2dyZXNzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3hvZmZTZW50VG9DYXRjaFVwID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3VzZXJTY3JvbGxpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5faW5wdXRIYW5kbGVyID0gbmV3IElucHV0SGFuZGxlcl8xLklucHV0SGFuZGxlcih0aGlzKTtcbiAgICAgICAgdGhpcy5yZWdpc3Rlcih0aGlzLl9pbnB1dEhhbmRsZXIpO1xuICAgICAgICB0aGlzLnJlbmRlcmVyID0gdGhpcy5yZW5kZXJlciB8fCBudWxsO1xuICAgICAgICB0aGlzLnNlbGVjdGlvbk1hbmFnZXIgPSB0aGlzLnNlbGVjdGlvbk1hbmFnZXIgfHwgbnVsbDtcbiAgICAgICAgdGhpcy5saW5raWZpZXIgPSB0aGlzLmxpbmtpZmllciB8fCBuZXcgTGlua2lmaWVyXzEuTGlua2lmaWVyKHRoaXMpO1xuICAgICAgICB0aGlzLl9tb3VzZVpvbmVNYW5hZ2VyID0gdGhpcy5fbW91c2Vab25lTWFuYWdlciB8fCBudWxsO1xuICAgICAgICB0aGlzLnNvdW5kTWFuYWdlciA9IHRoaXMuc291bmRNYW5hZ2VyIHx8IG5ldyBTb3VuZE1hbmFnZXJfMS5Tb3VuZE1hbmFnZXIodGhpcyk7XG4gICAgICAgIHRoaXMuYnVmZmVycyA9IG5ldyBCdWZmZXJTZXRfMS5CdWZmZXJTZXQodGhpcyk7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGlvbk1hbmFnZXIpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uTWFuYWdlci5jbGVhclNlbGVjdGlvbigpO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25NYW5hZ2VyLmluaXRCdWZmZXJzTGlzdGVuZXJzKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUZXJtaW5hbC5wcm90b3R5cGUsIFwiYnVmZmVyXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5idWZmZXJzLmFjdGl2ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgVGVybWluYWwucHJvdG90eXBlLmVyYXNlQXR0ciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIChCdWZmZXJfMS5ERUZBVUxUX0FUVFIgJiB+MHgxZmYpIHwgKHRoaXMuY3VyQXR0ciAmIDB4MWZmKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5mb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMudGV4dGFyZWEpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dGFyZWEuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRlcm1pbmFsLnByb3RvdHlwZSwgXCJpc0ZvY3VzZWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSB0aGlzLnRleHRhcmVhICYmIGRvY3VtZW50Lmhhc0ZvY3VzKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5nZXRPcHRpb24gPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghKGtleSBpbiBERUZBVUxUX09QVElPTlMpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIG9wdGlvbiB3aXRoIGtleSBcIicgKyBrZXkgKyAnXCInKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zW2tleV07XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuc2V0T3B0aW9uID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIERFRkFVTFRfT1BUSU9OUykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gb3B0aW9uIHdpdGgga2V5IFwiJyArIGtleSArICdcIicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChDT05TVFJVQ1RPUl9PTkxZX09QVElPTlMuaW5kZXhPZihrZXkpICE9PSAtMSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIk9wdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgY2FuIG9ubHkgYmUgc2V0IGluIHRoZSBjb25zdHJ1Y3RvclwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zW2tleV0gPT09IHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ2JlbGxTdHlsZSc6XG4gICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9ICdub25lJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjdXJzb3JTdHlsZSc6XG4gICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9ICdibG9jayc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZm9udFdlaWdodCc6XG4gICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9ICdub3JtYWwnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2ZvbnRXZWlnaHRCb2xkJzpcbiAgICAgICAgICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gJ2JvbGQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2xpbmVIZWlnaHQnOlxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA8IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGtleSArIFwiIGNhbm5vdCBiZSBsZXNzIHRoYW4gMSwgdmFsdWU6IFwiICsgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAncmVuZGVyZXJUeXBlJzpcbiAgICAgICAgICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gJ2NhbnZhcyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndGFiU3RvcFdpZHRoJzpcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPCAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihrZXkgKyBcIiBjYW5ub3QgYmUgbGVzcyB0aGFuIDEsIHZhbHVlOiBcIiArIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3RoZW1lJzpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yZW5kZXJlcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRUaGVtZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzY3JvbGxiYWNrJzpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IE1hdGgubWluKHZhbHVlLCBCdWZmZXJfMS5NQVhfQlVGRkVSX1NJWkUpO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGtleSArIFwiIGNhbm5vdCBiZSBsZXNzIHRoYW4gMCwgdmFsdWU6IFwiICsgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnNba2V5XSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0J1ZmZlckxlbmd0aCA9IHRoaXMucm93cyArIHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5idWZmZXIubGluZXMubGVuZ3RoID4gbmV3QnVmZmVyTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYW1vdW50VG9UcmltID0gdGhpcy5idWZmZXIubGluZXMubGVuZ3RoIC0gbmV3QnVmZmVyTGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5lZWRzUmVmcmVzaCA9ICh0aGlzLmJ1ZmZlci55ZGlzcCAtIGFtb3VudFRvVHJpbSA8IDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5idWZmZXIubGluZXMudHJpbVN0YXJ0KGFtb3VudFRvVHJpbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlci55YmFzZSA9IE1hdGgubWF4KHRoaXMuYnVmZmVyLnliYXNlIC0gYW1vdW50VG9UcmltLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyLnlkaXNwID0gTWF0aC5tYXgodGhpcy5idWZmZXIueWRpc3AgLSBhbW91bnRUb1RyaW0sIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5lZWRzUmVmcmVzaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaCgwLCB0aGlzLnJvd3MgLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wdGlvbnNba2V5XSA9IHZhbHVlO1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSAnZm9udEZhbWlseSc6XG4gICAgICAgICAgICBjYXNlICdmb250U2l6ZSc6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmVuZGVyZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5jbGVhcigpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJNZWFzdXJlLm1lYXN1cmUodGhpcy5vcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkcmF3Qm9sZFRleHRJbkJyaWdodENvbG9ycyc6XG4gICAgICAgICAgICBjYXNlICdleHBlcmltZW50YWxDaGFyQXRsYXMnOlxuICAgICAgICAgICAgY2FzZSAnZW5hYmxlQm9sZCc6XG4gICAgICAgICAgICBjYXNlICdsZXR0ZXJTcGFjaW5nJzpcbiAgICAgICAgICAgIGNhc2UgJ2xpbmVIZWlnaHQnOlxuICAgICAgICAgICAgY2FzZSAnZm9udFdlaWdodCc6XG4gICAgICAgICAgICBjYXNlICdmb250V2VpZ2h0Qm9sZCc6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmVuZGVyZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5jbGVhcigpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLm9uUmVzaXplKHRoaXMuY29scywgdGhpcy5yb3dzKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoKDAsIHRoaXMucm93cyAtIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ3JlbmRlcmVyVHlwZSc6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmVuZGVyZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnJlZ2lzdGVyKHRoaXMucmVuZGVyZXIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX3NldHVwUmVuZGVyZXIoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLm9uQ2hhclNpemVDaGFuZ2VkKCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3RoZW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0VGhlbWUodGhpcy5fdGhlbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLm1vdXNlSGVscGVyLnNldFJlbmRlcmVyKHRoaXMucmVuZGVyZXIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2Nyb2xsYmFjayc6XG4gICAgICAgICAgICAgICAgdGhpcy5idWZmZXJzLnJlc2l6ZSh0aGlzLmNvbHMsIHRoaXMucm93cyk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudmlld3BvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3cG9ydC5zeW5jU2Nyb2xsQXJlYSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3NjcmVlblJlYWRlck1vZGUnOlxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2FjY2Vzc2liaWxpdHlNYW5hZ2VyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hY2Nlc3NpYmlsaXR5TWFuYWdlciA9IG5ldyBBY2Nlc3NpYmlsaXR5TWFuYWdlcl8xLkFjY2Vzc2liaWxpdHlNYW5hZ2VyKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fYWNjZXNzaWJpbGl0eU1hbmFnZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FjY2Vzc2liaWxpdHlNYW5hZ2VyLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FjY2Vzc2liaWxpdHlNYW5hZ2VyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3RhYlN0b3BXaWR0aCc6XG4gICAgICAgICAgICAgICAgdGhpcy5idWZmZXJzLnNldHVwVGFiU3RvcHMoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2V4cGVyaW1lbnRhbEJ1ZmZlckxpbmVJbXBsJzpcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlcnMubm9ybWFsLnNldEJ1ZmZlckxpbmVGYWN0b3J5KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlcnMuYWx0LnNldEJ1ZmZlckxpbmVGYWN0b3J5KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9ibGFua0xpbmUgPSBudWxsO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnJlbmRlcmVyKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLm9uT3B0aW9uc0NoYW5nZWQoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLl9vblRleHRBcmVhRm9jdXMgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgaWYgKHRoaXMuc2VuZEZvY3VzKSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZXIoRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1tJJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVDdXJzb3JTdHlsZShldik7XG4gICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdmb2N1cycpO1xuICAgICAgICB0aGlzLnNob3dDdXJzb3IoKTtcbiAgICAgICAgdGhpcy5lbWl0KCdmb2N1cycpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLmJsdXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHRhcmVhLmJsdXIoKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5fb25UZXh0QXJlYUJsdXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudGV4dGFyZWEudmFsdWUgPSAnJztcbiAgICAgICAgdGhpcy5yZWZyZXNoKHRoaXMuYnVmZmVyLnksIHRoaXMuYnVmZmVyLnkpO1xuICAgICAgICBpZiAodGhpcy5zZW5kRm9jdXMpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlcihFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnW08nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnZm9jdXMnKTtcbiAgICAgICAgdGhpcy5lbWl0KCdibHVyJyk7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuX2luaXRHbG9iYWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuX2JpbmRLZXlzKCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXIoTGlmZWN5Y2xlXzEuYWRkRGlzcG9zYWJsZURvbUxpc3RlbmVyKHRoaXMuZWxlbWVudCwgJ2NvcHknLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmICghX3RoaXMuaGFzU2VsZWN0aW9uKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBDbGlwYm9hcmRfMS5jb3B5SGFuZGxlcihldmVudCwgX3RoaXMsIF90aGlzLnNlbGVjdGlvbk1hbmFnZXIpO1xuICAgICAgICB9KSk7XG4gICAgICAgIHZhciBwYXN0ZUhhbmRsZXJXcmFwcGVyID0gZnVuY3Rpb24gKGV2ZW50KSB7IHJldHVybiBDbGlwYm9hcmRfMS5wYXN0ZUhhbmRsZXIoZXZlbnQsIF90aGlzKTsgfTtcbiAgICAgICAgdGhpcy5yZWdpc3RlcihMaWZlY3ljbGVfMS5hZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIodGhpcy50ZXh0YXJlYSwgJ3Bhc3RlJywgcGFzdGVIYW5kbGVyV3JhcHBlcikpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKExpZmVjeWNsZV8xLmFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcih0aGlzLmVsZW1lbnQsICdwYXN0ZScsIHBhc3RlSGFuZGxlcldyYXBwZXIpKTtcbiAgICAgICAgaWYgKEJyb3dzZXIuaXNGaXJlZm94KSB7XG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyKExpZmVjeWNsZV8xLmFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcih0aGlzLmVsZW1lbnQsICdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuYnV0dG9uID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIENsaXBib2FyZF8xLnJpZ2h0Q2xpY2tIYW5kbGVyKGV2ZW50LCBfdGhpcy50ZXh0YXJlYSwgX3RoaXMuc2VsZWN0aW9uTWFuYWdlciwgX3RoaXMub3B0aW9ucy5yaWdodENsaWNrU2VsZWN0c1dvcmQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXIoTGlmZWN5Y2xlXzEuYWRkRGlzcG9zYWJsZURvbUxpc3RlbmVyKHRoaXMuZWxlbWVudCwgJ2NvbnRleHRtZW51JywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgQ2xpcGJvYXJkXzEucmlnaHRDbGlja0hhbmRsZXIoZXZlbnQsIF90aGlzLnRleHRhcmVhLCBfdGhpcy5zZWxlY3Rpb25NYW5hZ2VyLCBfdGhpcy5vcHRpb25zLnJpZ2h0Q2xpY2tTZWxlY3RzV29yZCk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEJyb3dzZXIuaXNMaW51eCkge1xuICAgICAgICAgICAgdGhpcy5yZWdpc3RlcihMaWZlY3ljbGVfMS5hZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIodGhpcy5lbGVtZW50LCAnYXV4Y2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuYnV0dG9uID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIENsaXBib2FyZF8xLm1vdmVUZXh0QXJlYVVuZGVyTW91c2VDdXJzb3IoZXZlbnQsIF90aGlzLnRleHRhcmVhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5fYmluZEtleXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdGhpcy5yZWdpc3RlcihMaWZlY3ljbGVfMS5hZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIodGhpcy5lbGVtZW50LCAna2V5ZG93bicsIGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IHRoaXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLl9rZXlEb3duKGV2KTtcbiAgICAgICAgfSwgdHJ1ZSkpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKExpZmVjeWNsZV8xLmFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcih0aGlzLmVsZW1lbnQsICdrZXlwcmVzcycsIGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IHRoaXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLl9rZXlQcmVzcyhldik7XG4gICAgICAgIH0sIHRydWUpKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlcihMaWZlY3ljbGVfMS5hZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIodGhpcy5lbGVtZW50LCAna2V5dXAnLCBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGlmICghd2FzTW9kaWZpZXJLZXlPbmx5RXZlbnQoZXYpKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZm9jdXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbGYuX2tleVVwKGV2KTtcbiAgICAgICAgfSwgdHJ1ZSkpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKExpZmVjeWNsZV8xLmFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcih0aGlzLnRleHRhcmVhLCAna2V5ZG93bicsIGZ1bmN0aW9uIChldikgeyByZXR1cm4gX3RoaXMuX2tleURvd24oZXYpOyB9LCB0cnVlKSk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXIoTGlmZWN5Y2xlXzEuYWRkRGlzcG9zYWJsZURvbUxpc3RlbmVyKHRoaXMudGV4dGFyZWEsICdrZXlwcmVzcycsIGZ1bmN0aW9uIChldikgeyByZXR1cm4gX3RoaXMuX2tleVByZXNzKGV2KTsgfSwgdHJ1ZSkpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKExpZmVjeWNsZV8xLmFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcih0aGlzLnRleHRhcmVhLCAnY29tcG9zaXRpb25zdGFydCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLl9jb21wb3NpdGlvbkhlbHBlci5jb21wb3NpdGlvbnN0YXJ0KCk7IH0pKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlcihMaWZlY3ljbGVfMS5hZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIodGhpcy50ZXh0YXJlYSwgJ2NvbXBvc2l0aW9udXBkYXRlJywgZnVuY3Rpb24gKGUpIHsgcmV0dXJuIF90aGlzLl9jb21wb3NpdGlvbkhlbHBlci5jb21wb3NpdGlvbnVwZGF0ZShlKTsgfSkpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKExpZmVjeWNsZV8xLmFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcih0aGlzLnRleHRhcmVhLCAnY29tcG9zaXRpb25lbmQnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fY29tcG9zaXRpb25IZWxwZXIuY29tcG9zaXRpb25lbmQoKTsgfSkpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKHRoaXMuYWRkRGlzcG9zYWJsZUxpc3RlbmVyKCdyZWZyZXNoJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX2NvbXBvc2l0aW9uSGVscGVyLnVwZGF0ZUNvbXBvc2l0aW9uRWxlbWVudHMoKTsgfSkpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKHRoaXMuYWRkRGlzcG9zYWJsZUxpc3RlbmVyKCdyZWZyZXNoJywgZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIF90aGlzLl9xdWV1ZUxpbmtpZmljYXRpb24oZGF0YS5zdGFydCwgZGF0YS5lbmQpOyB9KSk7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5fcGFyZW50ID0gcGFyZW50IHx8IHRoaXMuX3BhcmVudDtcbiAgICAgICAgaWYgKCF0aGlzLl9wYXJlbnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGVybWluYWwgcmVxdWlyZXMgYSBwYXJlbnQgZWxlbWVudC4nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jb250ZXh0ID0gdGhpcy5fcGFyZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gICAgICAgIHRoaXMuX2RvY3VtZW50ID0gdGhpcy5fcGFyZW50Lm93bmVyRG9jdW1lbnQ7XG4gICAgICAgIHRoaXMuX3NjcmVlbkRwck1vbml0b3IgPSBuZXcgU2NyZWVuRHByTW9uaXRvcl8xLlNjcmVlbkRwck1vbml0b3IoKTtcbiAgICAgICAgdGhpcy5fc2NyZWVuRHByTW9uaXRvci5zZXRMaXN0ZW5lcihmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5lbWl0KCdkcHJjaGFuZ2UnLCB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7IH0pO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKHRoaXMuX3NjcmVlbkRwck1vbml0b3IpO1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSB0aGlzLl9kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5lbGVtZW50LmRpciA9ICdsdHInO1xuICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgndGVybWluYWwnKTtcbiAgICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3h0ZXJtJyk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJzAnKTtcbiAgICAgICAgdGhpcy5fcGFyZW50LmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudCk7XG4gICAgICAgIHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICAgICAgdGhpcy5fdmlld3BvcnRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuX3ZpZXdwb3J0RWxlbWVudC5jbGFzc0xpc3QuYWRkKCd4dGVybS12aWV3cG9ydCcpO1xuICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZCh0aGlzLl92aWV3cG9ydEVsZW1lbnQpO1xuICAgICAgICB0aGlzLl92aWV3cG9ydFNjcm9sbEFyZWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5fdmlld3BvcnRTY3JvbGxBcmVhLmNsYXNzTGlzdC5hZGQoJ3h0ZXJtLXNjcm9sbC1hcmVhJyk7XG4gICAgICAgIHRoaXMuX3ZpZXdwb3J0RWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLl92aWV3cG9ydFNjcm9sbEFyZWEpO1xuICAgICAgICB0aGlzLnNjcmVlbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5zY3JlZW5FbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3h0ZXJtLXNjcmVlbicpO1xuICAgICAgICB0aGlzLl9oZWxwZXJDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5faGVscGVyQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3h0ZXJtLWhlbHBlcnMnKTtcbiAgICAgICAgdGhpcy5zY3JlZW5FbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuX2hlbHBlckNvbnRhaW5lcik7XG4gICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKHRoaXMuc2NyZWVuRWxlbWVudCk7XG4gICAgICAgIHRoaXMuX21vdXNlWm9uZU1hbmFnZXIgPSBuZXcgTW91c2Vab25lTWFuYWdlcl8xLk1vdXNlWm9uZU1hbmFnZXIodGhpcyk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXIodGhpcy5fbW91c2Vab25lTWFuYWdlcik7XG4gICAgICAgIHRoaXMucmVnaXN0ZXIodGhpcy5hZGREaXNwb3NhYmxlTGlzdGVuZXIoJ3Njcm9sbCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLl9tb3VzZVpvbmVNYW5hZ2VyLmNsZWFyQWxsKCk7IH0pKTtcbiAgICAgICAgdGhpcy5saW5raWZpZXIuYXR0YWNoVG9Eb20odGhpcy5fbW91c2Vab25lTWFuYWdlcik7XG4gICAgICAgIHRoaXMudGV4dGFyZWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICAgICAgICB0aGlzLnRleHRhcmVhLmNsYXNzTGlzdC5hZGQoJ3h0ZXJtLWhlbHBlci10ZXh0YXJlYScpO1xuICAgICAgICB0aGlzLnRleHRhcmVhLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIFN0cmluZ3MucHJvbXB0TGFiZWwpO1xuICAgICAgICB0aGlzLnRleHRhcmVhLnNldEF0dHJpYnV0ZSgnYXJpYS1tdWx0aWxpbmUnLCAnZmFsc2UnKTtcbiAgICAgICAgdGhpcy50ZXh0YXJlYS5zZXRBdHRyaWJ1dGUoJ2F1dG9jb3JyZWN0JywgJ29mZicpO1xuICAgICAgICB0aGlzLnRleHRhcmVhLnNldEF0dHJpYnV0ZSgnYXV0b2NhcGl0YWxpemUnLCAnb2ZmJyk7XG4gICAgICAgIHRoaXMudGV4dGFyZWEuc2V0QXR0cmlidXRlKCdzcGVsbGNoZWNrJywgJ2ZhbHNlJyk7XG4gICAgICAgIHRoaXMudGV4dGFyZWEudGFiSW5kZXggPSAwO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKExpZmVjeWNsZV8xLmFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcih0aGlzLnRleHRhcmVhLCAnZm9jdXMnLCBmdW5jdGlvbiAoZXYpIHsgcmV0dXJuIF90aGlzLl9vblRleHRBcmVhRm9jdXMoZXYpOyB9KSk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXIoTGlmZWN5Y2xlXzEuYWRkRGlzcG9zYWJsZURvbUxpc3RlbmVyKHRoaXMudGV4dGFyZWEsICdibHVyJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX29uVGV4dEFyZWFCbHVyKCk7IH0pKTtcbiAgICAgICAgdGhpcy5faGVscGVyQ29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMudGV4dGFyZWEpO1xuICAgICAgICB0aGlzLl9jb21wb3NpdGlvblZpZXcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGhpcy5fY29tcG9zaXRpb25WaWV3LmNsYXNzTGlzdC5hZGQoJ2NvbXBvc2l0aW9uLXZpZXcnKTtcbiAgICAgICAgdGhpcy5fY29tcG9zaXRpb25IZWxwZXIgPSBuZXcgQ29tcG9zaXRpb25IZWxwZXJfMS5Db21wb3NpdGlvbkhlbHBlcih0aGlzLnRleHRhcmVhLCB0aGlzLl9jb21wb3NpdGlvblZpZXcsIHRoaXMpO1xuICAgICAgICB0aGlzLl9oZWxwZXJDb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy5fY29tcG9zaXRpb25WaWV3KTtcbiAgICAgICAgdGhpcy5jaGFyTWVhc3VyZSA9IG5ldyBDaGFyTWVhc3VyZV8xLkNoYXJNZWFzdXJlKGRvY3VtZW50LCB0aGlzLl9oZWxwZXJDb250YWluZXIpO1xuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoZnJhZ21lbnQpO1xuICAgICAgICB0aGlzLl9zZXR1cFJlbmRlcmVyKCk7XG4gICAgICAgIHRoaXMuX3RoZW1lID0gdGhpcy5vcHRpb25zLnRoZW1lO1xuICAgICAgICB0aGlzLm9wdGlvbnMudGhlbWUgPSBudWxsO1xuICAgICAgICB0aGlzLnZpZXdwb3J0ID0gbmV3IFZpZXdwb3J0XzEuVmlld3BvcnQodGhpcywgdGhpcy5fdmlld3BvcnRFbGVtZW50LCB0aGlzLl92aWV3cG9ydFNjcm9sbEFyZWEsIHRoaXMuY2hhck1lYXN1cmUpO1xuICAgICAgICB0aGlzLnZpZXdwb3J0Lm9uVGhlbWVDaGFuZ2VkKHRoaXMucmVuZGVyZXIuY29sb3JNYW5hZ2VyLmNvbG9ycyk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXIodGhpcy52aWV3cG9ydCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXIodGhpcy5hZGREaXNwb3NhYmxlTGlzdGVuZXIoJ2N1cnNvcm1vdmUnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5yZW5kZXJlci5vbkN1cnNvck1vdmUoKTsgfSkpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKHRoaXMuYWRkRGlzcG9zYWJsZUxpc3RlbmVyKCdyZXNpemUnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5yZW5kZXJlci5vblJlc2l6ZShfdGhpcy5jb2xzLCBfdGhpcy5yb3dzKTsgfSkpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKHRoaXMuYWRkRGlzcG9zYWJsZUxpc3RlbmVyKCdibHVyJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMucmVuZGVyZXIub25CbHVyKCk7IH0pKTtcbiAgICAgICAgdGhpcy5yZWdpc3Rlcih0aGlzLmFkZERpc3Bvc2FibGVMaXN0ZW5lcignZm9jdXMnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5yZW5kZXJlci5vbkZvY3VzKCk7IH0pKTtcbiAgICAgICAgdGhpcy5yZWdpc3Rlcih0aGlzLmFkZERpc3Bvc2FibGVMaXN0ZW5lcignZHByY2hhbmdlJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMucmVuZGVyZXIub25XaW5kb3dSZXNpemUod2luZG93LmRldmljZVBpeGVsUmF0aW8pOyB9KSk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXIoTGlmZWN5Y2xlXzEuYWRkRGlzcG9zYWJsZURvbUxpc3RlbmVyKHdpbmRvdywgJ3Jlc2l6ZScsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnJlbmRlcmVyLm9uV2luZG93UmVzaXplKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTsgfSkpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKHRoaXMuY2hhck1lYXN1cmUuYWRkRGlzcG9zYWJsZUxpc3RlbmVyKCdjaGFyc2l6ZWNoYW5nZWQnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5yZW5kZXJlci5vbkNoYXJTaXplQ2hhbmdlZCgpOyB9KSk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXIodGhpcy5yZW5kZXJlci5hZGREaXNwb3NhYmxlTGlzdGVuZXIoJ3Jlc2l6ZScsIGZ1bmN0aW9uIChkaW1lbnNpb25zKSB7IHJldHVybiBfdGhpcy52aWV3cG9ydC5zeW5jU2Nyb2xsQXJlYSgpOyB9KSk7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uTWFuYWdlciA9IG5ldyBTZWxlY3Rpb25NYW5hZ2VyXzEuU2VsZWN0aW9uTWFuYWdlcih0aGlzLCB0aGlzLmNoYXJNZWFzdXJlKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlcihMaWZlY3ljbGVfMS5hZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIodGhpcy5lbGVtZW50LCAnbW91c2Vkb3duJywgZnVuY3Rpb24gKGUpIHsgcmV0dXJuIF90aGlzLnNlbGVjdGlvbk1hbmFnZXIub25Nb3VzZURvd24oZSk7IH0pKTtcbiAgICAgICAgdGhpcy5yZWdpc3Rlcih0aGlzLnNlbGVjdGlvbk1hbmFnZXIuYWRkRGlzcG9zYWJsZUxpc3RlbmVyKCdyZWZyZXNoJywgZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIF90aGlzLnJlbmRlcmVyLm9uU2VsZWN0aW9uQ2hhbmdlZChkYXRhLnN0YXJ0LCBkYXRhLmVuZCwgZGF0YS5jb2x1bW5TZWxlY3RNb2RlKTsgfSkpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyKHRoaXMuc2VsZWN0aW9uTWFuYWdlci5hZGREaXNwb3NhYmxlTGlzdGVuZXIoJ25ld3NlbGVjdGlvbicsIGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgICAgICAgICBfdGhpcy50ZXh0YXJlYS52YWx1ZSA9IHRleHQ7XG4gICAgICAgICAgICBfdGhpcy50ZXh0YXJlYS5mb2N1cygpO1xuICAgICAgICAgICAgX3RoaXMudGV4dGFyZWEuc2VsZWN0KCk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5yZWdpc3Rlcih0aGlzLmFkZERpc3Bvc2FibGVMaXN0ZW5lcignc2Nyb2xsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMudmlld3BvcnQuc3luY1Njcm9sbEFyZWEoKTtcbiAgICAgICAgICAgIF90aGlzLnNlbGVjdGlvbk1hbmFnZXIucmVmcmVzaCgpO1xuICAgICAgICB9KSk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXIoTGlmZWN5Y2xlXzEuYWRkRGlzcG9zYWJsZURvbUxpc3RlbmVyKHRoaXMuX3ZpZXdwb3J0RWxlbWVudCwgJ3Njcm9sbCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnNlbGVjdGlvbk1hbmFnZXIucmVmcmVzaCgpOyB9KSk7XG4gICAgICAgIHRoaXMubW91c2VIZWxwZXIgPSBuZXcgTW91c2VIZWxwZXJfMS5Nb3VzZUhlbHBlcih0aGlzLnJlbmRlcmVyKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zY3JlZW5SZWFkZXJNb2RlKSB7XG4gICAgICAgICAgICB0aGlzLl9hY2Nlc3NpYmlsaXR5TWFuYWdlciA9IG5ldyBBY2Nlc3NpYmlsaXR5TWFuYWdlcl8xLkFjY2Vzc2liaWxpdHlNYW5hZ2VyKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2hhck1lYXN1cmUubWVhc3VyZSh0aGlzLm9wdGlvbnMpO1xuICAgICAgICB0aGlzLnJlZnJlc2goMCwgdGhpcy5yb3dzIC0gMSk7XG4gICAgICAgIHRoaXMuX2luaXRHbG9iYWwoKTtcbiAgICAgICAgdGhpcy5iaW5kTW91c2UoKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5fc2V0dXBSZW5kZXJlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLm9wdGlvbnMucmVuZGVyZXJUeXBlKSB7XG4gICAgICAgICAgICBjYXNlICdjYW52YXMnOlxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgUmVuZGVyZXJfMS5SZW5kZXJlcih0aGlzLCB0aGlzLm9wdGlvbnMudGhlbWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZG9tJzpcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyID0gbmV3IERvbVJlbmRlcmVyXzEuRG9tUmVuZGVyZXIodGhpcywgdGhpcy5vcHRpb25zLnRoZW1lKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihcIlVucmVjb2duaXplZCByZW5kZXJlclR5cGUgXFxcIlwiICsgdGhpcy5vcHRpb25zLnJlbmRlcmVyVHlwZSArIFwiXFxcIlwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlZ2lzdGVyKHRoaXMucmVuZGVyZXIpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLl9zZXRUaGVtZSA9IGZ1bmN0aW9uICh0aGVtZSkge1xuICAgICAgICB0aGlzLl90aGVtZSA9IHRoZW1lO1xuICAgICAgICB2YXIgY29sb3JzID0gdGhpcy5yZW5kZXJlci5zZXRUaGVtZSh0aGVtZSk7XG4gICAgICAgIGlmICh0aGlzLnZpZXdwb3J0KSB7XG4gICAgICAgICAgICB0aGlzLnZpZXdwb3J0Lm9uVGhlbWVDaGFuZ2VkKGNvbG9ycyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5iaW5kTW91c2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBlbCA9IHRoaXMuZWxlbWVudDtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgcHJlc3NlZCA9IDMyO1xuICAgICAgICBmdW5jdGlvbiBzZW5kQnV0dG9uKGV2KSB7XG4gICAgICAgICAgICB2YXIgYnV0dG9uO1xuICAgICAgICAgICAgdmFyIHBvcztcbiAgICAgICAgICAgIGJ1dHRvbiA9IGdldEJ1dHRvbihldik7XG4gICAgICAgICAgICBwb3MgPSBzZWxmLm1vdXNlSGVscGVyLmdldFJhd0J5dGVDb29yZHMoZXYsIHNlbGYuc2NyZWVuRWxlbWVudCwgc2VsZi5jaGFyTWVhc3VyZSwgc2VsZi5jb2xzLCBzZWxmLnJvd3MpO1xuICAgICAgICAgICAgaWYgKCFwb3MpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgc2VuZEV2ZW50KGJ1dHRvbiwgcG9zKTtcbiAgICAgICAgICAgIHN3aXRjaCAoZXYub3ZlcnJpZGVUeXBlIHx8IGV2LnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdtb3VzZWRvd24nOlxuICAgICAgICAgICAgICAgICAgICBwcmVzc2VkID0gYnV0dG9uO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdtb3VzZXVwJzpcbiAgICAgICAgICAgICAgICAgICAgcHJlc3NlZCA9IDMyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd3aGVlbCc6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIHNlbmRNb3ZlKGV2KSB7XG4gICAgICAgICAgICB2YXIgYnV0dG9uID0gcHJlc3NlZDtcbiAgICAgICAgICAgIHZhciBwb3MgPSBzZWxmLm1vdXNlSGVscGVyLmdldFJhd0J5dGVDb29yZHMoZXYsIHNlbGYuc2NyZWVuRWxlbWVudCwgc2VsZi5jaGFyTWVhc3VyZSwgc2VsZi5jb2xzLCBzZWxmLnJvd3MpO1xuICAgICAgICAgICAgaWYgKCFwb3MpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgYnV0dG9uICs9IDMyO1xuICAgICAgICAgICAgc2VuZEV2ZW50KGJ1dHRvbiwgcG9zKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBlbmNvZGUoZGF0YSwgY2gpIHtcbiAgICAgICAgICAgIGlmICghc2VsZi51dGZNb3VzZSkge1xuICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gMjU1KSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEucHVzaCgwKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2ggPiAxMjcpXG4gICAgICAgICAgICAgICAgICAgIGNoID0gMTI3O1xuICAgICAgICAgICAgICAgIGRhdGEucHVzaChjaCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoY2ggPT09IDIwNDcpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wdXNoKDApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjaCA8IDEyNykge1xuICAgICAgICAgICAgICAgICAgICBkYXRhLnB1c2goY2gpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoID4gMjA0NylcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoID0gMjA0NztcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5wdXNoKDB4QzAgfCAoY2ggPj4gNikpO1xuICAgICAgICAgICAgICAgICAgICBkYXRhLnB1c2goMHg4MCB8IChjaCAmIDB4M0YpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc2VuZEV2ZW50KGJ1dHRvbiwgcG9zKSB7XG4gICAgICAgICAgICBpZiAoc2VsZi5fdnQzMDBNb3VzZSkge1xuICAgICAgICAgICAgICAgIGJ1dHRvbiAmPSAzO1xuICAgICAgICAgICAgICAgIHBvcy54IC09IDMyO1xuICAgICAgICAgICAgICAgIHBvcy55IC09IDMyO1xuICAgICAgICAgICAgICAgIHZhciBkYXRhXzEgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnWzI0JztcbiAgICAgICAgICAgICAgICBpZiAoYnV0dG9uID09PSAwKVxuICAgICAgICAgICAgICAgICAgICBkYXRhXzEgKz0gJzEnO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbiA9PT0gMSlcbiAgICAgICAgICAgICAgICAgICAgZGF0YV8xICs9ICczJztcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChidXR0b24gPT09IDIpXG4gICAgICAgICAgICAgICAgICAgIGRhdGFfMSArPSAnNSc7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYnV0dG9uID09PSAzKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkYXRhXzEgKz0gJzAnO1xuICAgICAgICAgICAgICAgIGRhdGFfMSArPSAnflsnICsgcG9zLnggKyAnLCcgKyBwb3MueSArICddXFxyJztcbiAgICAgICAgICAgICAgICBzZWxmLmhhbmRsZXIoZGF0YV8xKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VsZi5fZGVjTG9jYXRvcikge1xuICAgICAgICAgICAgICAgIGJ1dHRvbiAmPSAzO1xuICAgICAgICAgICAgICAgIHBvcy54IC09IDMyO1xuICAgICAgICAgICAgICAgIHBvcy55IC09IDMyO1xuICAgICAgICAgICAgICAgIGlmIChidXR0b24gPT09IDApXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbiA9IDI7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYnV0dG9uID09PSAxKVxuICAgICAgICAgICAgICAgICAgICBidXR0b24gPSA0O1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ1dHRvbiA9PT0gMilcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uID0gNjtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChidXR0b24gPT09IDMpXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbiA9IDM7XG4gICAgICAgICAgICAgICAgc2VsZi5oYW5kbGVyKEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbJ1xuICAgICAgICAgICAgICAgICAgICArIGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICArICc7J1xuICAgICAgICAgICAgICAgICAgICArIChidXR0b24gPT09IDMgPyA0IDogMClcbiAgICAgICAgICAgICAgICAgICAgKyAnOydcbiAgICAgICAgICAgICAgICAgICAgKyBwb3MueVxuICAgICAgICAgICAgICAgICAgICArICc7J1xuICAgICAgICAgICAgICAgICAgICArIHBvcy54XG4gICAgICAgICAgICAgICAgICAgICsgJzsnXG4gICAgICAgICAgICAgICAgICAgICsgcG9zLnBhZ2UgfHwgMFxuICAgICAgICAgICAgICAgICAgICArICcmdycpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWxmLnVyeHZ0TW91c2UpIHtcbiAgICAgICAgICAgICAgICBwb3MueCAtPSAzMjtcbiAgICAgICAgICAgICAgICBwb3MueSAtPSAzMjtcbiAgICAgICAgICAgICAgICBwb3MueCsrO1xuICAgICAgICAgICAgICAgIHBvcy55Kys7XG4gICAgICAgICAgICAgICAgc2VsZi5oYW5kbGVyKEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbJyArIGJ1dHRvbiArICc7JyArIHBvcy54ICsgJzsnICsgcG9zLnkgKyAnTScpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWxmLnNnck1vdXNlKSB7XG4gICAgICAgICAgICAgICAgcG9zLnggLT0gMzI7XG4gICAgICAgICAgICAgICAgcG9zLnkgLT0gMzI7XG4gICAgICAgICAgICAgICAgc2VsZi5oYW5kbGVyKEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbPCdcbiAgICAgICAgICAgICAgICAgICAgKyAoKChidXR0b24gJiAzKSA9PT0gMyA/IGJ1dHRvbiAmIH4zIDogYnV0dG9uKSAtIDMyKVxuICAgICAgICAgICAgICAgICAgICArICc7J1xuICAgICAgICAgICAgICAgICAgICArIHBvcy54XG4gICAgICAgICAgICAgICAgICAgICsgJzsnXG4gICAgICAgICAgICAgICAgICAgICsgcG9zLnlcbiAgICAgICAgICAgICAgICAgICAgKyAoKGJ1dHRvbiAmIDMpID09PSAzID8gJ20nIDogJ00nKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRhdGEgPSBbXTtcbiAgICAgICAgICAgIGVuY29kZShkYXRhLCBidXR0b24pO1xuICAgICAgICAgICAgZW5jb2RlKGRhdGEsIHBvcy54KTtcbiAgICAgICAgICAgIGVuY29kZShkYXRhLCBwb3MueSk7XG4gICAgICAgICAgICBzZWxmLmhhbmRsZXIoRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1tNJyArIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBkYXRhKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0QnV0dG9uKGV2KSB7XG4gICAgICAgICAgICB2YXIgYnV0dG9uO1xuICAgICAgICAgICAgdmFyIHNoaWZ0O1xuICAgICAgICAgICAgdmFyIG1ldGE7XG4gICAgICAgICAgICB2YXIgY3RybDtcbiAgICAgICAgICAgIHZhciBtb2Q7XG4gICAgICAgICAgICBzd2l0Y2ggKGV2Lm92ZXJyaWRlVHlwZSB8fCBldi50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnbW91c2Vkb3duJzpcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uID0gZXYuYnV0dG9uICE9PSBudWxsICYmIGV2LmJ1dHRvbiAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICtldi5idXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgIDogZXYud2hpY2ggIT09IG51bGwgJiYgZXYud2hpY2ggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZXYud2hpY2ggLSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICBpZiAoQnJvd3Nlci5pc01TSUUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbiA9IGJ1dHRvbiA9PT0gMSA/IDAgOiBidXR0b24gPT09IDQgPyAxIDogYnV0dG9uO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ21vdXNldXAnOlxuICAgICAgICAgICAgICAgICAgICBidXR0b24gPSAzO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdET01Nb3VzZVNjcm9sbCc6XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbiA9IGV2LmRldGFpbCA8IDBcbiAgICAgICAgICAgICAgICAgICAgICAgID8gNjRcbiAgICAgICAgICAgICAgICAgICAgICAgIDogNjU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3doZWVsJzpcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uID0gZXYuZGVsdGFZIDwgMFxuICAgICAgICAgICAgICAgICAgICAgICAgPyA2NFxuICAgICAgICAgICAgICAgICAgICAgICAgOiA2NTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzaGlmdCA9IGV2LnNoaWZ0S2V5ID8gNCA6IDA7XG4gICAgICAgICAgICBtZXRhID0gZXYubWV0YUtleSA/IDggOiAwO1xuICAgICAgICAgICAgY3RybCA9IGV2LmN0cmxLZXkgPyAxNiA6IDA7XG4gICAgICAgICAgICBtb2QgPSBzaGlmdCB8IG1ldGEgfCBjdHJsO1xuICAgICAgICAgICAgaWYgKHNlbGYudnQyMDBNb3VzZSkge1xuICAgICAgICAgICAgICAgIG1vZCAmPSBjdHJsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIXNlbGYubm9ybWFsTW91c2UpIHtcbiAgICAgICAgICAgICAgICBtb2QgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnV0dG9uID0gKDMyICsgKG1vZCA8PCAyKSkgKyBidXR0b247XG4gICAgICAgICAgICByZXR1cm4gYnV0dG9uO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVnaXN0ZXIoTGlmZWN5Y2xlXzEuYWRkRGlzcG9zYWJsZURvbUxpc3RlbmVyKGVsLCAnbW91c2Vkb3duJywgZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgX3RoaXMuZm9jdXMoKTtcbiAgICAgICAgICAgIGlmICghX3RoaXMubW91c2VFdmVudHMgfHwgX3RoaXMuc2VsZWN0aW9uTWFuYWdlci5zaG91bGRGb3JjZVNlbGVjdGlvbihldikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZW5kQnV0dG9uKGV2KTtcbiAgICAgICAgICAgIGlmIChfdGhpcy52dDIwME1vdXNlKSB7XG4gICAgICAgICAgICAgICAgZXYub3ZlcnJpZGVUeXBlID0gJ21vdXNldXAnO1xuICAgICAgICAgICAgICAgIHNlbmRCdXR0b24oZXYpO1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5jYW5jZWwoZXYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG1vdmVIYW5kbGVyO1xuICAgICAgICAgICAgaWYgKF90aGlzLm5vcm1hbE1vdXNlKSB7XG4gICAgICAgICAgICAgICAgbW92ZUhhbmRsZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5ub3JtYWxNb3VzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNlbmRNb3ZlKGV2ZW50KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIF90aGlzLl9kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBtb3ZlSGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5ub3JtYWxNb3VzZSAmJiAhX3RoaXMueDEwTW91c2UpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VuZEJ1dHRvbihldik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtb3ZlSGFuZGxlcikge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgbW92ZUhhbmRsZXIpO1xuICAgICAgICAgICAgICAgICAgICBtb3ZlSGFuZGxlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzLl9kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgaGFuZGxlcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNhbmNlbChldik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgX3RoaXMuX2RvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBoYW5kbGVyKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5jYW5jZWwoZXYpO1xuICAgICAgICB9KSk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXIoTGlmZWN5Y2xlXzEuYWRkRGlzcG9zYWJsZURvbUxpc3RlbmVyKGVsLCAnd2hlZWwnLCBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGlmICghX3RoaXMubW91c2VFdmVudHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIV90aGlzLmJ1ZmZlci5oYXNTY3JvbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhbW91bnQgPSBfdGhpcy52aWV3cG9ydC5nZXRMaW5lc1Njcm9sbGVkKGV2KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFtb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZXF1ZW5jZSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArIChfdGhpcy5hcHBsaWNhdGlvbkN1cnNvciA/ICdPJyA6ICdbJykgKyAoZXYuZGVsdGFZIDwgMCA/ICdBJyA6ICdCJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTWF0aC5hYnMoYW1vdW50KTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhICs9IHNlcXVlbmNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmhhbmRsZXIoZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfdGhpcy54MTBNb3VzZSB8fCBfdGhpcy5fdnQzMDBNb3VzZSB8fCBfdGhpcy5fZGVjTG9jYXRvcilcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBzZW5kQnV0dG9uKGV2KTtcbiAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlcihMaWZlY3ljbGVfMS5hZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIoZWwsICd3aGVlbCcsIGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgaWYgKF90aGlzLm1vdXNlRXZlbnRzKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIF90aGlzLnZpZXdwb3J0Lm9uV2hlZWwoZXYpO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNhbmNlbChldik7XG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlcihMaWZlY3ljbGVfMS5hZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIoZWwsICd0b3VjaHN0YXJ0JywgZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMubW91c2VFdmVudHMpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgX3RoaXMudmlld3BvcnQub25Ub3VjaFN0YXJ0KGV2KTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5jYW5jZWwoZXYpO1xuICAgICAgICB9KSk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXIoTGlmZWN5Y2xlXzEuYWRkRGlzcG9zYWJsZURvbUxpc3RlbmVyKGVsLCAndG91Y2htb3ZlJywgZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMubW91c2VFdmVudHMpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgX3RoaXMudmlld3BvcnQub25Ub3VjaE1vdmUoZXYpO1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNhbmNlbChldik7XG4gICAgICAgIH0pKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgaWYgKHRoaXMucmVuZGVyZXIpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIucmVmcmVzaFJvd3Moc3RhcnQsIGVuZCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5fcXVldWVMaW5raWZpY2F0aW9uID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgaWYgKHRoaXMubGlua2lmaWVyKSB7XG4gICAgICAgICAgICB0aGlzLmxpbmtpZmllci5saW5raWZ5Um93cyhzdGFydCwgZW5kKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLnVwZGF0ZUN1cnNvclN0eWxlID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGlvbk1hbmFnZXIgJiYgdGhpcy5zZWxlY3Rpb25NYW5hZ2VyLnNob3VsZENvbHVtblNlbGVjdChldikpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdjb2x1bW4tc2VsZWN0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnY29sdW1uLXNlbGVjdCcpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuc2hvd0N1cnNvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmN1cnNvclN0YXRlKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnNvclN0YXRlID0gMTtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaCh0aGlzLmJ1ZmZlci55LCB0aGlzLmJ1ZmZlci55KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLnNjcm9sbCA9IGZ1bmN0aW9uIChpc1dyYXBwZWQpIHtcbiAgICAgICAgaWYgKGlzV3JhcHBlZCA9PT0gdm9pZCAwKSB7IGlzV3JhcHBlZCA9IGZhbHNlOyB9XG4gICAgICAgIHZhciBuZXdMaW5lO1xuICAgICAgICB2YXIgdXNlUmVjeWNsaW5nID0gdGhpcy5vcHRpb25zLmV4cGVyaW1lbnRhbEJ1ZmZlckxpbmVJbXBsICE9PSAnSnNBcnJheSc7XG4gICAgICAgIGlmICh1c2VSZWN5Y2xpbmcpIHtcbiAgICAgICAgICAgIG5ld0xpbmUgPSB0aGlzLl9ibGFua0xpbmU7XG4gICAgICAgICAgICBpZiAoIW5ld0xpbmUgfHwgbmV3TGluZS5sZW5ndGggIT09IHRoaXMuY29scyB8fCBuZXdMaW5lLmdldCgwKVtCdWZmZXJfMS5DSEFSX0RBVEFfQVRUUl9JTkRFWF0gIT09IHRoaXMuZXJhc2VBdHRyKCkpIHtcbiAgICAgICAgICAgICAgICBuZXdMaW5lID0gdGhpcy5idWZmZXIuZ2V0QmxhbmtMaW5lKHRoaXMuZXJhc2VBdHRyKCksIGlzV3JhcHBlZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fYmxhbmtMaW5lID0gbmV3TGluZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld0xpbmUuaXNXcmFwcGVkID0gaXNXcmFwcGVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbmV3TGluZSA9IHRoaXMuYnVmZmVyLmdldEJsYW5rTGluZSh0aGlzLmVyYXNlQXR0cigpLCBpc1dyYXBwZWQpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0b3BSb3cgPSB0aGlzLmJ1ZmZlci55YmFzZSArIHRoaXMuYnVmZmVyLnNjcm9sbFRvcDtcbiAgICAgICAgdmFyIGJvdHRvbVJvdyA9IHRoaXMuYnVmZmVyLnliYXNlICsgdGhpcy5idWZmZXIuc2Nyb2xsQm90dG9tO1xuICAgICAgICBpZiAodGhpcy5idWZmZXIuc2Nyb2xsVG9wID09PSAwKSB7XG4gICAgICAgICAgICB2YXIgd2lsbEJ1ZmZlckJlVHJpbW1lZCA9IHRoaXMuYnVmZmVyLmxpbmVzLmlzRnVsbDtcbiAgICAgICAgICAgIGlmIChib3R0b21Sb3cgPT09IHRoaXMuYnVmZmVyLmxpbmVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICBpZiAodXNlUmVjeWNsaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh3aWxsQnVmZmVyQmVUcmltbWVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlci5saW5lcy5yZWN5Y2xlKCkuY29weUZyb20obmV3TGluZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlci5saW5lcy5wdXNoKG5ld0xpbmUuY2xvbmUoKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyLmxpbmVzLnB1c2gobmV3TGluZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5idWZmZXIubGluZXMuc3BsaWNlKGJvdHRvbVJvdyArIDEsIDAsICh1c2VSZWN5Y2xpbmcpID8gbmV3TGluZS5jbG9uZSgpIDogbmV3TGluZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXdpbGxCdWZmZXJCZVRyaW1tZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlci55YmFzZSsrO1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fdXNlclNjcm9sbGluZykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlci55ZGlzcCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl91c2VyU2Nyb2xsaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyLnlkaXNwID0gTWF0aC5tYXgodGhpcy5idWZmZXIueWRpc3AgLSAxLCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgc2Nyb2xsUmVnaW9uSGVpZ2h0ID0gYm90dG9tUm93IC0gdG9wUm93ICsgMTtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyLmxpbmVzLnNoaWZ0RWxlbWVudHModG9wUm93ICsgMSwgc2Nyb2xsUmVnaW9uSGVpZ2h0IC0gMSwgLTEpO1xuICAgICAgICAgICAgdGhpcy5idWZmZXIubGluZXMuc2V0KGJvdHRvbVJvdywgKHVzZVJlY3ljbGluZykgPyBuZXdMaW5lLmNsb25lKCkgOiBuZXdMaW5lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX3VzZXJTY3JvbGxpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyLnlkaXNwID0gdGhpcy5idWZmZXIueWJhc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVSYW5nZSh0aGlzLmJ1ZmZlci5zY3JvbGxUb3ApO1xuICAgICAgICB0aGlzLnVwZGF0ZVJhbmdlKHRoaXMuYnVmZmVyLnNjcm9sbEJvdHRvbSk7XG4gICAgICAgIHRoaXMuZW1pdCgnc2Nyb2xsJywgdGhpcy5idWZmZXIueWRpc3ApO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLnNjcm9sbExpbmVzID0gZnVuY3Rpb24gKGRpc3AsIHN1cHByZXNzU2Nyb2xsRXZlbnQpIHtcbiAgICAgICAgaWYgKGRpc3AgPCAwKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5idWZmZXIueWRpc3AgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl91c2VyU2Nyb2xsaW5nID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkaXNwICsgdGhpcy5idWZmZXIueWRpc3AgPj0gdGhpcy5idWZmZXIueWJhc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX3VzZXJTY3JvbGxpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb2xkWWRpc3AgPSB0aGlzLmJ1ZmZlci55ZGlzcDtcbiAgICAgICAgdGhpcy5idWZmZXIueWRpc3AgPSBNYXRoLm1heChNYXRoLm1pbih0aGlzLmJ1ZmZlci55ZGlzcCArIGRpc3AsIHRoaXMuYnVmZmVyLnliYXNlKSwgMCk7XG4gICAgICAgIGlmIChvbGRZZGlzcCA9PT0gdGhpcy5idWZmZXIueWRpc3ApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXN1cHByZXNzU2Nyb2xsRXZlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnc2Nyb2xsJywgdGhpcy5idWZmZXIueWRpc3ApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVmcmVzaCgwLCB0aGlzLnJvd3MgLSAxKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5zY3JvbGxQYWdlcyA9IGZ1bmN0aW9uIChwYWdlQ291bnQpIHtcbiAgICAgICAgdGhpcy5zY3JvbGxMaW5lcyhwYWdlQ291bnQgKiAodGhpcy5yb3dzIC0gMSkpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLnNjcm9sbFRvVG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnNjcm9sbExpbmVzKC10aGlzLmJ1ZmZlci55ZGlzcCk7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuc2Nyb2xsVG9Cb3R0b20gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsTGluZXModGhpcy5idWZmZXIueWJhc2UgLSB0aGlzLmJ1ZmZlci55ZGlzcCk7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuc2Nyb2xsVG9MaW5lID0gZnVuY3Rpb24gKGxpbmUpIHtcbiAgICAgICAgdmFyIHNjcm9sbEFtb3VudCA9IGxpbmUgLSB0aGlzLmJ1ZmZlci55ZGlzcDtcbiAgICAgICAgaWYgKHNjcm9sbEFtb3VudCAhPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5zY3JvbGxMaW5lcyhzY3JvbGxBbW91bnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5faXNEaXNwb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMud3JpdGVCdWZmZXIucHVzaChkYXRhKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy51c2VGbG93Q29udHJvbCAmJiAhdGhpcy5feG9mZlNlbnRUb0NhdGNoVXAgJiYgdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGggPj0gV1JJVEVfQlVGRkVSX1BBVVNFX1RIUkVTSE9MRCkge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVyKEVzY2FwZVNlcXVlbmNlc18xLkMwLkRDMyk7XG4gICAgICAgICAgICB0aGlzLl94b2ZmU2VudFRvQ2F0Y2hVcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl93cml0ZUluUHJvZ3Jlc3MgJiYgdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLl93cml0ZUluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2lubmVyV3JpdGUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuX2lubmVyV3JpdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLl9pc0Rpc3Bvc2VkKSB7XG4gICAgICAgICAgICB0aGlzLndyaXRlQnVmZmVyID0gW107XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHdyaXRlQmF0Y2ggPSB0aGlzLndyaXRlQnVmZmVyLnNwbGljZSgwLCBXUklURV9CQVRDSF9TSVpFKTtcbiAgICAgICAgd2hpbGUgKHdyaXRlQmF0Y2gubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSB3cml0ZUJhdGNoLnNoaWZ0KCk7XG4gICAgICAgICAgICBpZiAodGhpcy5feG9mZlNlbnRUb0NhdGNoVXAgJiYgd3JpdGVCYXRjaC5sZW5ndGggPT09IDAgJiYgdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZXIoRXNjYXBlU2VxdWVuY2VzXzEuQzAuREMxKTtcbiAgICAgICAgICAgICAgICB0aGlzLl94b2ZmU2VudFRvQ2F0Y2hVcCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fcmVmcmVzaFN0YXJ0ID0gdGhpcy5idWZmZXIueTtcbiAgICAgICAgICAgIHRoaXMuX3JlZnJlc2hFbmQgPSB0aGlzLmJ1ZmZlci55O1xuICAgICAgICAgICAgdGhpcy5faW5wdXRIYW5kbGVyLnBhcnNlKGRhdGEpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVSYW5nZSh0aGlzLmJ1ZmZlci55KTtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaCh0aGlzLl9yZWZyZXNoU3RhcnQsIHRoaXMuX3JlZnJlc2hFbmQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX2lubmVyV3JpdGUoKTsgfSwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl93cml0ZUluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLndyaXRlbG4gPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB0aGlzLndyaXRlKGRhdGEgKyAnXFxyXFxuJyk7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuYXR0YWNoQ3VzdG9tS2V5RXZlbnRIYW5kbGVyID0gZnVuY3Rpb24gKGN1c3RvbUtleUV2ZW50SGFuZGxlcikge1xuICAgICAgICB0aGlzLl9jdXN0b21LZXlFdmVudEhhbmRsZXIgPSBjdXN0b21LZXlFdmVudEhhbmRsZXI7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUucmVnaXN0ZXJMaW5rTWF0Y2hlciA9IGZ1bmN0aW9uIChyZWdleCwgaGFuZGxlciwgb3B0aW9ucykge1xuICAgICAgICB2YXIgbWF0Y2hlcklkID0gdGhpcy5saW5raWZpZXIucmVnaXN0ZXJMaW5rTWF0Y2hlcihyZWdleCwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMucmVmcmVzaCgwLCB0aGlzLnJvd3MgLSAxKTtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXJJZDtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5kZXJlZ2lzdGVyTGlua01hdGNoZXIgPSBmdW5jdGlvbiAobWF0Y2hlcklkKSB7XG4gICAgICAgIGlmICh0aGlzLmxpbmtpZmllci5kZXJlZ2lzdGVyTGlua01hdGNoZXIobWF0Y2hlcklkKSkge1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoKDAsIHRoaXMucm93cyAtIDEpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUucmVnaXN0ZXJDaGFyYWN0ZXJKb2luZXIgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICB2YXIgam9pbmVySWQgPSB0aGlzLnJlbmRlcmVyLnJlZ2lzdGVyQ2hhcmFjdGVySm9pbmVyKGhhbmRsZXIpO1xuICAgICAgICB0aGlzLnJlZnJlc2goMCwgdGhpcy5yb3dzIC0gMSk7XG4gICAgICAgIHJldHVybiBqb2luZXJJZDtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5kZXJlZ2lzdGVyQ2hhcmFjdGVySm9pbmVyID0gZnVuY3Rpb24gKGpvaW5lcklkKSB7XG4gICAgICAgIGlmICh0aGlzLnJlbmRlcmVyLmRlcmVnaXN0ZXJDaGFyYWN0ZXJKb2luZXIoam9pbmVySWQpKSB7XG4gICAgICAgICAgICB0aGlzLnJlZnJlc2goMCwgdGhpcy5yb3dzIC0gMSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUZXJtaW5hbC5wcm90b3R5cGUsIFwibWFya2Vyc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyLm1hcmtlcnM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5hZGRNYXJrZXIgPSBmdW5jdGlvbiAoY3Vyc29yWU9mZnNldCkge1xuICAgICAgICBpZiAodGhpcy5idWZmZXIgIT09IHRoaXMuYnVmZmVycy5ub3JtYWwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5idWZmZXIuYWRkTWFya2VyKHRoaXMuYnVmZmVyLnliYXNlICsgdGhpcy5idWZmZXIueSArIGN1cnNvcllPZmZzZXQpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLmhhc1NlbGVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uTWFuYWdlciA/IHRoaXMuc2VsZWN0aW9uTWFuYWdlci5oYXNTZWxlY3Rpb24gOiBmYWxzZTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5nZXRTZWxlY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGlvbk1hbmFnZXIgPyB0aGlzLnNlbGVjdGlvbk1hbmFnZXIuc2VsZWN0aW9uVGV4dCA6ICcnO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLmNsZWFyU2VsZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb25NYW5hZ2VyKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGlvbk1hbmFnZXIuY2xlYXJTZWxlY3Rpb24oKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLnNlbGVjdEFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uTWFuYWdlcikge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25NYW5hZ2VyLnNlbGVjdEFsbCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuc2VsZWN0TGluZXMgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb25NYW5hZ2VyKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGlvbk1hbmFnZXIuc2VsZWN0TGluZXMoc3RhcnQsIGVuZCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5fa2V5RG93biA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAodGhpcy5fY3VzdG9tS2V5RXZlbnRIYW5kbGVyICYmIHRoaXMuX2N1c3RvbUtleUV2ZW50SGFuZGxlcihldmVudCkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9jb21wb3NpdGlvbkhlbHBlci5rZXlkb3duKGV2ZW50KSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYnVmZmVyLnliYXNlICE9PSB0aGlzLmJ1ZmZlci55ZGlzcCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsVG9Cb3R0b20oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gS2V5Ym9hcmRfMS5ldmFsdWF0ZUtleWJvYXJkRXZlbnQoZXZlbnQsIHRoaXMuYXBwbGljYXRpb25DdXJzb3IsIHRoaXMuYnJvd3Nlci5pc01hYywgdGhpcy5vcHRpb25zLm1hY09wdGlvbklzTWV0YSk7XG4gICAgICAgIHRoaXMudXBkYXRlQ3Vyc29yU3R5bGUoZXZlbnQpO1xuICAgICAgICBpZiAocmVzdWx0LnR5cGUgPT09IDMgfHwgcmVzdWx0LnR5cGUgPT09IDIpIHtcbiAgICAgICAgICAgIHZhciBzY3JvbGxDb3VudCA9IHRoaXMucm93cyAtIDE7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbExpbmVzKHJlc3VsdC50eXBlID09PSAyID8gLXNjcm9sbENvdW50IDogc2Nyb2xsQ291bnQpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FuY2VsKGV2ZW50LCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0LnR5cGUgPT09IDEpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0QWxsKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2lzVGhpcmRMZXZlbFNoaWZ0KHRoaXMuYnJvd3NlciwgZXZlbnQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0LmNhbmNlbCkge1xuICAgICAgICAgICAgdGhpcy5jYW5jZWwoZXZlbnQsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcmVzdWx0LmtleSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbWl0KCdrZXlkb3duJywgZXZlbnQpO1xuICAgICAgICB0aGlzLmVtaXQoJ2tleScsIHJlc3VsdC5rZXksIGV2ZW50KTtcbiAgICAgICAgdGhpcy5zaG93Q3Vyc29yKCk7XG4gICAgICAgIHRoaXMuaGFuZGxlcihyZXN1bHQua2V5KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FuY2VsKGV2ZW50LCB0cnVlKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5faXNUaGlyZExldmVsU2hpZnQgPSBmdW5jdGlvbiAoYnJvd3NlciwgZXYpIHtcbiAgICAgICAgdmFyIHRoaXJkTGV2ZWxLZXkgPSAoYnJvd3Nlci5pc01hYyAmJiAhdGhpcy5vcHRpb25zLm1hY09wdGlvbklzTWV0YSAmJiBldi5hbHRLZXkgJiYgIWV2LmN0cmxLZXkgJiYgIWV2Lm1ldGFLZXkpIHx8XG4gICAgICAgICAgICAoYnJvd3Nlci5pc01TV2luZG93cyAmJiBldi5hbHRLZXkgJiYgZXYuY3RybEtleSAmJiAhZXYubWV0YUtleSk7XG4gICAgICAgIGlmIChldi50eXBlID09PSAna2V5cHJlc3MnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcmRMZXZlbEtleTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcmRMZXZlbEtleSAmJiAoIWV2LmtleUNvZGUgfHwgZXYua2V5Q29kZSA+IDQ3KTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5zZXRnTGV2ZWwgPSBmdW5jdGlvbiAoZykge1xuICAgICAgICB0aGlzLmdsZXZlbCA9IGc7XG4gICAgICAgIHRoaXMuY2hhcnNldCA9IHRoaXMuY2hhcnNldHNbZ107XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuc2V0Z0NoYXJzZXQgPSBmdW5jdGlvbiAoZywgY2hhcnNldCkge1xuICAgICAgICB0aGlzLmNoYXJzZXRzW2ddID0gY2hhcnNldDtcbiAgICAgICAgaWYgKHRoaXMuZ2xldmVsID09PSBnKSB7XG4gICAgICAgICAgICB0aGlzLmNoYXJzZXQgPSBjaGFyc2V0O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuX2tleVVwID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIHRoaXMudXBkYXRlQ3Vyc29yU3R5bGUoZXYpO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLl9rZXlQcmVzcyA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBpZiAodGhpcy5fY3VzdG9tS2V5RXZlbnRIYW5kbGVyICYmIHRoaXMuX2N1c3RvbUtleUV2ZW50SGFuZGxlcihldikgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jYW5jZWwoZXYpO1xuICAgICAgICBpZiAoZXYuY2hhckNvZGUpIHtcbiAgICAgICAgICAgIGtleSA9IGV2LmNoYXJDb2RlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGV2LndoaWNoID09PSBudWxsIHx8IGV2LndoaWNoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGtleSA9IGV2LmtleUNvZGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZXYud2hpY2ggIT09IDAgJiYgZXYuY2hhckNvZGUgIT09IDApIHtcbiAgICAgICAgICAgIGtleSA9IGV2LndoaWNoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICgha2V5IHx8ICgoZXYuYWx0S2V5IHx8IGV2LmN0cmxLZXkgfHwgZXYubWV0YUtleSkgJiYgIXRoaXMuX2lzVGhpcmRMZXZlbFNoaWZ0KHRoaXMuYnJvd3NlciwgZXYpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGtleSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoa2V5KTtcbiAgICAgICAgdGhpcy5lbWl0KCdrZXlwcmVzcycsIGtleSwgZXYpO1xuICAgICAgICB0aGlzLmVtaXQoJ2tleScsIGtleSwgZXYpO1xuICAgICAgICB0aGlzLnNob3dDdXJzb3IoKTtcbiAgICAgICAgdGhpcy5oYW5kbGVyKGtleSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLmJlbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuZW1pdCgnYmVsbCcpO1xuICAgICAgICBpZiAodGhpcy5fc291bmRCZWxsKCkpIHtcbiAgICAgICAgICAgIHRoaXMuc291bmRNYW5hZ2VyLnBsYXlCZWxsU291bmQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fdmlzdWFsQmVsbCgpKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgndmlzdWFsLWJlbGwtYWN0aXZlJyk7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fdmlzdWFsQmVsbFRpbWVyKTtcbiAgICAgICAgICAgIHRoaXMuX3Zpc3VhbEJlbGxUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ3Zpc3VhbC1iZWxsLWFjdGl2ZScpO1xuICAgICAgICAgICAgfSwgMjAwKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLmxvZyA9IGZ1bmN0aW9uICh0ZXh0LCBkYXRhKSB7XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLmRlYnVnKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAoIXRoaXMuX2NvbnRleHQuY29uc29sZSB8fCAhdGhpcy5fY29udGV4dC5jb25zb2xlLmxvZylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5fY29udGV4dC5jb25zb2xlLmxvZyh0ZXh0LCBkYXRhKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uICh0ZXh0LCBkYXRhKSB7XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLmRlYnVnKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAoIXRoaXMuX2NvbnRleHQuY29uc29sZSB8fCAhdGhpcy5fY29udGV4dC5jb25zb2xlLmVycm9yKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmNvbnNvbGUuZXJyb3IodGV4dCwgZGF0YSk7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgICAgaWYgKGlzTmFOKHgpIHx8IGlzTmFOKHkpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHggPT09IHRoaXMuY29scyAmJiB5ID09PSB0aGlzLnJvd3MpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNoYXJNZWFzdXJlICYmICghdGhpcy5jaGFyTWVhc3VyZS53aWR0aCB8fCAhdGhpcy5jaGFyTWVhc3VyZS5oZWlnaHQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFyTWVhc3VyZS5tZWFzdXJlKHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHggPCAxKVxuICAgICAgICAgICAgeCA9IDE7XG4gICAgICAgIGlmICh5IDwgMSlcbiAgICAgICAgICAgIHkgPSAxO1xuICAgICAgICB0aGlzLmJ1ZmZlcnMucmVzaXplKHgsIHkpO1xuICAgICAgICB0aGlzLmNvbHMgPSB4O1xuICAgICAgICB0aGlzLnJvd3MgPSB5O1xuICAgICAgICB0aGlzLmJ1ZmZlcnMuc2V0dXBUYWJTdG9wcyh0aGlzLmNvbHMpO1xuICAgICAgICBpZiAodGhpcy5jaGFyTWVhc3VyZSkge1xuICAgICAgICAgICAgdGhpcy5jaGFyTWVhc3VyZS5tZWFzdXJlKHRoaXMub3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZWZyZXNoKDAsIHRoaXMucm93cyAtIDEpO1xuICAgICAgICB0aGlzLmVtaXQoJ3Jlc2l6ZScsIHsgY29sczogeCwgcm93czogeSB9KTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS51cGRhdGVSYW5nZSA9IGZ1bmN0aW9uICh5KSB7XG4gICAgICAgIGlmICh5IDwgdGhpcy5fcmVmcmVzaFN0YXJ0KVxuICAgICAgICAgICAgdGhpcy5fcmVmcmVzaFN0YXJ0ID0geTtcbiAgICAgICAgaWYgKHkgPiB0aGlzLl9yZWZyZXNoRW5kKVxuICAgICAgICAgICAgdGhpcy5fcmVmcmVzaEVuZCA9IHk7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUubWF4UmFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3JlZnJlc2hTdGFydCA9IDA7XG4gICAgICAgIHRoaXMuX3JlZnJlc2hFbmQgPSB0aGlzLnJvd3MgLSAxO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5idWZmZXIueWJhc2UgPT09IDAgJiYgdGhpcy5idWZmZXIueSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYnVmZmVyLmxpbmVzLnNldCgwLCB0aGlzLmJ1ZmZlci5saW5lcy5nZXQodGhpcy5idWZmZXIueWJhc2UgKyB0aGlzLmJ1ZmZlci55KSk7XG4gICAgICAgIHRoaXMuYnVmZmVyLmxpbmVzLmxlbmd0aCA9IDE7XG4gICAgICAgIHRoaXMuYnVmZmVyLnlkaXNwID0gMDtcbiAgICAgICAgdGhpcy5idWZmZXIueWJhc2UgPSAwO1xuICAgICAgICB0aGlzLmJ1ZmZlci55ID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5idWZmZXIubGluZXMucHVzaCh0aGlzLmJ1ZmZlci5nZXRCbGFua0xpbmUoQnVmZmVyXzEuREVGQVVMVF9BVFRSKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZWZyZXNoKDAsIHRoaXMucm93cyAtIDEpO1xuICAgICAgICB0aGlzLmVtaXQoJ3Njcm9sbCcsIHRoaXMuYnVmZmVyLnlkaXNwKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5jaCA9IGZ1bmN0aW9uIChjdXIpIHtcbiAgICAgICAgaWYgKGN1cikge1xuICAgICAgICAgICAgcmV0dXJuIFt0aGlzLmVyYXNlQXR0cigpLCBCdWZmZXJfMS5OVUxMX0NFTExfQ0hBUiwgQnVmZmVyXzEuTlVMTF9DRUxMX1dJRFRILCBCdWZmZXJfMS5OVUxMX0NFTExfQ09ERV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtCdWZmZXJfMS5ERUZBVUxUX0FUVFIsIEJ1ZmZlcl8xLk5VTExfQ0VMTF9DSEFSLCBCdWZmZXJfMS5OVUxMX0NFTExfV0lEVEgsIEJ1ZmZlcl8xLk5VTExfQ0VMTF9DT0RFXTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5pcyA9IGZ1bmN0aW9uICh0ZXJtKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5vcHRpb25zLnRlcm1OYW1lICsgJycpLmluZGV4T2YodGVybSkgPT09IDA7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuaGFuZGxlciA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGlzYWJsZVN0ZGluKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uTWFuYWdlciAmJiB0aGlzLnNlbGVjdGlvbk1hbmFnZXIuaGFzU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGlvbk1hbmFnZXIuY2xlYXJTZWxlY3Rpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5idWZmZXIueWJhc2UgIT09IHRoaXMuYnVmZmVyLnlkaXNwKSB7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbFRvQm90dG9tKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lbWl0KCdkYXRhJywgZGF0YSk7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuaGFuZGxlVGl0bGUgPSBmdW5jdGlvbiAodGl0bGUpIHtcbiAgICAgICAgdGhpcy5lbWl0KCd0aXRsZScsIHRpdGxlKTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5pbmRleCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5idWZmZXIueSsrO1xuICAgICAgICBpZiAodGhpcy5idWZmZXIueSA+IHRoaXMuYnVmZmVyLnNjcm9sbEJvdHRvbSkge1xuICAgICAgICAgICAgdGhpcy5idWZmZXIueS0tO1xuICAgICAgICAgICAgdGhpcy5zY3JvbGwoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5idWZmZXIueCA+PSB0aGlzLmNvbHMpIHtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyLngtLTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLnJldmVyc2VJbmRleCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuYnVmZmVyLnkgPT09IHRoaXMuYnVmZmVyLnNjcm9sbFRvcCkge1xuICAgICAgICAgICAgdmFyIHNjcm9sbFJlZ2lvbkhlaWdodCA9IHRoaXMuYnVmZmVyLnNjcm9sbEJvdHRvbSAtIHRoaXMuYnVmZmVyLnNjcm9sbFRvcDtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyLmxpbmVzLnNoaWZ0RWxlbWVudHModGhpcy5idWZmZXIueSArIHRoaXMuYnVmZmVyLnliYXNlLCBzY3JvbGxSZWdpb25IZWlnaHQsIDEpO1xuICAgICAgICAgICAgdGhpcy5idWZmZXIubGluZXMuc2V0KHRoaXMuYnVmZmVyLnkgKyB0aGlzLmJ1ZmZlci55YmFzZSwgdGhpcy5idWZmZXIuZ2V0QmxhbmtMaW5lKHRoaXMuZXJhc2VBdHRyKCkpKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUmFuZ2UodGhpcy5idWZmZXIuc2Nyb2xsVG9wKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUmFuZ2UodGhpcy5idWZmZXIuc2Nyb2xsQm90dG9tKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyLnktLTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMucm93cyA9IHRoaXMucm93cztcbiAgICAgICAgdGhpcy5vcHRpb25zLmNvbHMgPSB0aGlzLmNvbHM7XG4gICAgICAgIHZhciBjdXN0b21LZXlFdmVudEhhbmRsZXIgPSB0aGlzLl9jdXN0b21LZXlFdmVudEhhbmRsZXI7XG4gICAgICAgIHZhciBpbnB1dEhhbmRsZXIgPSB0aGlzLl9pbnB1dEhhbmRsZXI7XG4gICAgICAgIHZhciBjdXJzb3JTdGF0ZSA9IHRoaXMuY3Vyc29yU3RhdGU7XG4gICAgICAgIHRoaXMuX3NldHVwKCk7XG4gICAgICAgIHRoaXMuX2N1c3RvbUtleUV2ZW50SGFuZGxlciA9IGN1c3RvbUtleUV2ZW50SGFuZGxlcjtcbiAgICAgICAgdGhpcy5faW5wdXRIYW5kbGVyID0gaW5wdXRIYW5kbGVyO1xuICAgICAgICB0aGlzLmN1cnNvclN0YXRlID0gY3Vyc29yU3RhdGU7XG4gICAgICAgIHRoaXMucmVmcmVzaCgwLCB0aGlzLnJvd3MgLSAxKTtcbiAgICAgICAgaWYgKHRoaXMudmlld3BvcnQpIHtcbiAgICAgICAgICAgIHRoaXMudmlld3BvcnQuc3luY1Njcm9sbEFyZWEoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLnRhYlNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5idWZmZXIudGFic1t0aGlzLmJ1ZmZlci54XSA9IHRydWU7XG4gICAgfTtcbiAgICBUZXJtaW5hbC5wcm90b3R5cGUuY2FuY2VsID0gZnVuY3Rpb24gKGV2LCBmb3JjZSkge1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5jYW5jZWxFdmVudHMgJiYgIWZvcmNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5tYXRjaENvbG9yID0gZnVuY3Rpb24gKHIxLCBnMSwgYjEpIHtcbiAgICAgICAgdmFyIGhhc2ggPSAocjEgPDwgMTYpIHwgKGcxIDw8IDgpIHwgYjE7XG4gICAgICAgIGlmIChtYXRjaENvbG9yQ2FjaGVbaGFzaF0gIT09IG51bGwgJiYgbWF0Y2hDb2xvckNhY2hlW2hhc2hdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXRjaENvbG9yQ2FjaGVbaGFzaF07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxkaWZmID0gSW5maW5pdHk7XG4gICAgICAgIHZhciBsaSA9IC0xO1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHZhciBjO1xuICAgICAgICB2YXIgcjI7XG4gICAgICAgIHZhciBnMjtcbiAgICAgICAgdmFyIGIyO1xuICAgICAgICB2YXIgZGlmZjtcbiAgICAgICAgZm9yICg7IGkgPCBDb2xvck1hbmFnZXJfMS5ERUZBVUxUX0FOU0lfQ09MT1JTLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjID0gQ29sb3JNYW5hZ2VyXzEuREVGQVVMVF9BTlNJX0NPTE9SU1tpXS5yZ2JhO1xuICAgICAgICAgICAgcjIgPSBjID4+PiAyNDtcbiAgICAgICAgICAgIGcyID0gYyA+Pj4gMTYgJiAweEZGO1xuICAgICAgICAgICAgYjIgPSBjID4+PiA4ICYgMHhGRjtcbiAgICAgICAgICAgIGRpZmYgPSBtYXRjaENvbG9yRGlzdGFuY2UocjEsIGcxLCBiMSwgcjIsIGcyLCBiMik7XG4gICAgICAgICAgICBpZiAoZGlmZiA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGxpID0gaTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkaWZmIDwgbGRpZmYpIHtcbiAgICAgICAgICAgICAgICBsZGlmZiA9IGRpZmY7XG4gICAgICAgICAgICAgICAgbGkgPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXRjaENvbG9yQ2FjaGVbaGFzaF0gPSBsaTtcbiAgICB9O1xuICAgIFRlcm1pbmFsLnByb3RvdHlwZS5fdmlzdWFsQmVsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgVGVybWluYWwucHJvdG90eXBlLl9zb3VuZEJlbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuYmVsbFN0eWxlID09PSAnc291bmQnO1xuICAgIH07XG4gICAgcmV0dXJuIFRlcm1pbmFsO1xufShFdmVudEVtaXR0ZXJfMS5FdmVudEVtaXR0ZXIpKTtcbmV4cG9ydHMuVGVybWluYWwgPSBUZXJtaW5hbDtcbmZ1bmN0aW9uIHdhc01vZGlmaWVyS2V5T25seUV2ZW50KGV2KSB7XG4gICAgcmV0dXJuIGV2LmtleUNvZGUgPT09IDE2IHx8XG4gICAgICAgIGV2LmtleUNvZGUgPT09IDE3IHx8XG4gICAgICAgIGV2LmtleUNvZGUgPT09IDE4O1xufVxudmFyIG1hdGNoQ29sb3JDYWNoZSA9IHt9O1xuZnVuY3Rpb24gbWF0Y2hDb2xvckRpc3RhbmNlKHIxLCBnMSwgYjEsIHIyLCBnMiwgYjIpIHtcbiAgICByZXR1cm4gTWF0aC5wb3coMzAgKiAocjEgLSByMiksIDIpXG4gICAgICAgICsgTWF0aC5wb3coNTkgKiAoZzEgLSBnMiksIDIpXG4gICAgICAgICsgTWF0aC5wb3coMTEgKiAoYjEgLSBiMiksIDIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VGVybWluYWwuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEJ1ZmZlcl8xID0gcmVxdWlyZShcIi4vQnVmZmVyXCIpO1xudmFyIEV2ZW50RW1pdHRlcl8xID0gcmVxdWlyZShcIi4vY29tbW9uL0V2ZW50RW1pdHRlclwiKTtcbnZhciBCdWZmZXJTZXQgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhCdWZmZXJTZXQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQnVmZmVyU2V0KF90ZXJtaW5hbCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fdGVybWluYWwgPSBfdGVybWluYWw7XG4gICAgICAgIF90aGlzLl9ub3JtYWwgPSBuZXcgQnVmZmVyXzEuQnVmZmVyKF90aGlzLl90ZXJtaW5hbCwgdHJ1ZSk7XG4gICAgICAgIF90aGlzLl9ub3JtYWwuZmlsbFZpZXdwb3J0Um93cygpO1xuICAgICAgICBfdGhpcy5fYWx0ID0gbmV3IEJ1ZmZlcl8xLkJ1ZmZlcihfdGhpcy5fdGVybWluYWwsIGZhbHNlKTtcbiAgICAgICAgX3RoaXMuX2FjdGl2ZUJ1ZmZlciA9IF90aGlzLl9ub3JtYWw7XG4gICAgICAgIF90aGlzLnNldHVwVGFiU3RvcHMoKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyU2V0LnByb3RvdHlwZSwgXCJhbHRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hbHQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXJTZXQucHJvdG90eXBlLCBcImFjdGl2ZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZUJ1ZmZlcjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlclNldC5wcm90b3R5cGUsIFwibm9ybWFsXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbm9ybWFsO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBCdWZmZXJTZXQucHJvdG90eXBlLmFjdGl2YXRlTm9ybWFsQnVmZmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fYWN0aXZlQnVmZmVyID09PSB0aGlzLl9ub3JtYWwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9ub3JtYWwueCA9IHRoaXMuX2FsdC54O1xuICAgICAgICB0aGlzLl9ub3JtYWwueSA9IHRoaXMuX2FsdC55O1xuICAgICAgICB0aGlzLl9hbHQuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5fYWN0aXZlQnVmZmVyID0gdGhpcy5fbm9ybWFsO1xuICAgICAgICB0aGlzLmVtaXQoJ2FjdGl2YXRlJywge1xuICAgICAgICAgICAgYWN0aXZlQnVmZmVyOiB0aGlzLl9ub3JtYWwsXG4gICAgICAgICAgICBpbmFjdGl2ZUJ1ZmZlcjogdGhpcy5fYWx0XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQnVmZmVyU2V0LnByb3RvdHlwZS5hY3RpdmF0ZUFsdEJ1ZmZlciA9IGZ1bmN0aW9uIChmaWxsQXR0cikge1xuICAgICAgICBpZiAodGhpcy5fYWN0aXZlQnVmZmVyID09PSB0aGlzLl9hbHQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9hbHQuZmlsbFZpZXdwb3J0Um93cyhmaWxsQXR0cik7XG4gICAgICAgIHRoaXMuX2FsdC54ID0gdGhpcy5fbm9ybWFsLng7XG4gICAgICAgIHRoaXMuX2FsdC55ID0gdGhpcy5fbm9ybWFsLnk7XG4gICAgICAgIHRoaXMuX2FjdGl2ZUJ1ZmZlciA9IHRoaXMuX2FsdDtcbiAgICAgICAgdGhpcy5lbWl0KCdhY3RpdmF0ZScsIHtcbiAgICAgICAgICAgIGFjdGl2ZUJ1ZmZlcjogdGhpcy5fYWx0LFxuICAgICAgICAgICAgaW5hY3RpdmVCdWZmZXI6IHRoaXMuX25vcm1hbFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEJ1ZmZlclNldC5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24gKG5ld0NvbHMsIG5ld1Jvd3MpIHtcbiAgICAgICAgdGhpcy5fbm9ybWFsLnJlc2l6ZShuZXdDb2xzLCBuZXdSb3dzKTtcbiAgICAgICAgdGhpcy5fYWx0LnJlc2l6ZShuZXdDb2xzLCBuZXdSb3dzKTtcbiAgICB9O1xuICAgIEJ1ZmZlclNldC5wcm90b3R5cGUuc2V0dXBUYWJTdG9wcyA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHRoaXMuX25vcm1hbC5zZXR1cFRhYlN0b3BzKGkpO1xuICAgICAgICB0aGlzLl9hbHQuc2V0dXBUYWJTdG9wcyhpKTtcbiAgICB9O1xuICAgIHJldHVybiBCdWZmZXJTZXQ7XG59KEV2ZW50RW1pdHRlcl8xLkV2ZW50RW1pdHRlcikpO1xuZXhwb3J0cy5CdWZmZXJTZXQgPSBCdWZmZXJTZXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1CdWZmZXJTZXQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEV2ZW50RW1pdHRlcl8xID0gcmVxdWlyZShcIi4vRXZlbnRFbWl0dGVyXCIpO1xudmFyIENpcmN1bGFyTGlzdCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKENpcmN1bGFyTGlzdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDaXJjdWxhckxpc3QoX21heExlbmd0aCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fbWF4TGVuZ3RoID0gX21heExlbmd0aDtcbiAgICAgICAgX3RoaXMuX2FycmF5ID0gbmV3IEFycmF5KF90aGlzLl9tYXhMZW5ndGgpO1xuICAgICAgICBfdGhpcy5fc3RhcnRJbmRleCA9IDA7XG4gICAgICAgIF90aGlzLl9sZW5ndGggPSAwO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDaXJjdWxhckxpc3QucHJvdG90eXBlLCBcIm1heExlbmd0aFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21heExlbmd0aDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAobmV3TWF4TGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fbWF4TGVuZ3RoID09PSBuZXdNYXhMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbmV3QXJyYXkgPSBuZXcgQXJyYXkobmV3TWF4TGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTWF0aC5taW4obmV3TWF4TGVuZ3RoLCB0aGlzLmxlbmd0aCk7IGkrKykge1xuICAgICAgICAgICAgICAgIG5ld0FycmF5W2ldID0gdGhpcy5fYXJyYXlbdGhpcy5fZ2V0Q3ljbGljSW5kZXgoaSldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fYXJyYXkgPSBuZXdBcnJheTtcbiAgICAgICAgICAgIHRoaXMuX21heExlbmd0aCA9IG5ld01heExlbmd0aDtcbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0SW5kZXggPSAwO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ2lyY3VsYXJMaXN0LnByb3RvdHlwZSwgXCJsZW5ndGhcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sZW5ndGg7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKG5ld0xlbmd0aCkge1xuICAgICAgICAgICAgaWYgKG5ld0xlbmd0aCA+IHRoaXMuX2xlbmd0aCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSB0aGlzLl9sZW5ndGg7IGkgPCBuZXdMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hcnJheVtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9sZW5ndGggPSBuZXdMZW5ndGg7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIENpcmN1bGFyTGlzdC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcnJheVt0aGlzLl9nZXRDeWNsaWNJbmRleChpbmRleCldO1xuICAgIH07XG4gICAgQ2lyY3VsYXJMaXN0LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoaW5kZXgsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2FycmF5W3RoaXMuX2dldEN5Y2xpY0luZGV4KGluZGV4KV0gPSB2YWx1ZTtcbiAgICB9O1xuICAgIENpcmN1bGFyTGlzdC5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9hcnJheVt0aGlzLl9nZXRDeWNsaWNJbmRleCh0aGlzLl9sZW5ndGgpXSA9IHZhbHVlO1xuICAgICAgICBpZiAodGhpcy5fbGVuZ3RoID09PSB0aGlzLl9tYXhMZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0SW5kZXggPSArK3RoaXMuX3N0YXJ0SW5kZXggJSB0aGlzLl9tYXhMZW5ndGg7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3RyaW0nLCAxKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2xlbmd0aCsrO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDaXJjdWxhckxpc3QucHJvdG90eXBlLnJlY3ljbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9sZW5ndGggIT09IHRoaXMuX21heExlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW4gb25seSByZWN5Y2xlIHdoZW4gdGhlIGJ1ZmZlciBpcyBmdWxsJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RhcnRJbmRleCA9ICsrdGhpcy5fc3RhcnRJbmRleCAlIHRoaXMuX21heExlbmd0aDtcbiAgICAgICAgdGhpcy5lbWl0KCd0cmltJywgMSk7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcnJheVt0aGlzLl9nZXRDeWNsaWNJbmRleCh0aGlzLl9sZW5ndGggLSAxKV07XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ2lyY3VsYXJMaXN0LnByb3RvdHlwZSwgXCJpc0Z1bGxcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sZW5ndGggPT09IHRoaXMuX21heExlbmd0aDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgQ2lyY3VsYXJMaXN0LnByb3RvdHlwZS5wb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcnJheVt0aGlzLl9nZXRDeWNsaWNJbmRleCh0aGlzLl9sZW5ndGgtLSAtIDEpXTtcbiAgICB9O1xuICAgIENpcmN1bGFyTGlzdC5wcm90b3R5cGUuc3BsaWNlID0gZnVuY3Rpb24gKHN0YXJ0LCBkZWxldGVDb3VudCkge1xuICAgICAgICB2YXIgaXRlbXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGl0ZW1zW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWxldGVDb3VudCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgdGhpcy5fbGVuZ3RoIC0gZGVsZXRlQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2FycmF5W3RoaXMuX2dldEN5Y2xpY0luZGV4KGkpXSA9IHRoaXMuX2FycmF5W3RoaXMuX2dldEN5Y2xpY0luZGV4KGkgKyBkZWxldGVDb3VudCldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fbGVuZ3RoIC09IGRlbGV0ZUNvdW50O1xuICAgICAgICB9XG4gICAgICAgIGlmIChpdGVtcyAmJiBpdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSB0aGlzLl9sZW5ndGggLSAxOyBpID49IHN0YXJ0OyBpLS0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hcnJheVt0aGlzLl9nZXRDeWNsaWNJbmRleChpICsgaXRlbXMubGVuZ3RoKV0gPSB0aGlzLl9hcnJheVt0aGlzLl9nZXRDeWNsaWNJbmRleChpKV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYXJyYXlbdGhpcy5fZ2V0Q3ljbGljSW5kZXgoc3RhcnQgKyBpKV0gPSBpdGVtc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9sZW5ndGggKyBpdGVtcy5sZW5ndGggPiB0aGlzLl9tYXhMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB2YXIgY291bnRUb1RyaW0gPSAodGhpcy5fbGVuZ3RoICsgaXRlbXMubGVuZ3RoKSAtIHRoaXMuX21heExlbmd0aDtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGFydEluZGV4ICs9IGNvdW50VG9UcmltO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xlbmd0aCA9IHRoaXMuX21heExlbmd0aDtcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXQoJ3RyaW0nLCBjb3VudFRvVHJpbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sZW5ndGggKz0gaXRlbXMubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBDaXJjdWxhckxpc3QucHJvdG90eXBlLnRyaW1TdGFydCA9IGZ1bmN0aW9uIChjb3VudCkge1xuICAgICAgICBpZiAoY291bnQgPiB0aGlzLl9sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvdW50ID0gdGhpcy5fbGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3N0YXJ0SW5kZXggKz0gY291bnQ7XG4gICAgICAgIHRoaXMuX2xlbmd0aCAtPSBjb3VudDtcbiAgICAgICAgdGhpcy5lbWl0KCd0cmltJywgY291bnQpO1xuICAgIH07XG4gICAgQ2lyY3VsYXJMaXN0LnByb3RvdHlwZS5zaGlmdEVsZW1lbnRzID0gZnVuY3Rpb24gKHN0YXJ0LCBjb3VudCwgb2Zmc2V0KSB7XG4gICAgICAgIGlmIChjb3VudCA8PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLl9sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignc3RhcnQgYXJndW1lbnQgb3V0IG9mIHJhbmdlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXJ0ICsgb2Zmc2V0IDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc2hpZnQgZWxlbWVudHMgaW4gbGlzdCBiZXlvbmQgaW5kZXggMCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvZmZzZXQgPiAwKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gY291bnQgLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0KHN0YXJ0ICsgaSArIG9mZnNldCwgdGhpcy5nZXQoc3RhcnQgKyBpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZXhwYW5kTGlzdEJ5ID0gKHN0YXJ0ICsgY291bnQgKyBvZmZzZXQpIC0gdGhpcy5fbGVuZ3RoO1xuICAgICAgICAgICAgaWYgKGV4cGFuZExpc3RCeSA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sZW5ndGggKz0gZXhwYW5kTGlzdEJ5O1xuICAgICAgICAgICAgICAgIHdoaWxlICh0aGlzLl9sZW5ndGggPiB0aGlzLl9tYXhMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGVuZ3RoLS07XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXJ0SW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0KCd0cmltJywgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoc3RhcnQgKyBpICsgb2Zmc2V0LCB0aGlzLmdldChzdGFydCArIGkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgQ2lyY3VsYXJMaXN0LnByb3RvdHlwZS5fZ2V0Q3ljbGljSW5kZXggPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLl9zdGFydEluZGV4ICsgaW5kZXgpICUgdGhpcy5fbWF4TGVuZ3RoO1xuICAgIH07XG4gICAgcmV0dXJuIENpcmN1bGFyTGlzdDtcbn0oRXZlbnRFbWl0dGVyXzEuRXZlbnRFbWl0dGVyKSk7XG5leHBvcnRzLkNpcmN1bGFyTGlzdCA9IENpcmN1bGFyTGlzdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNpcmN1bGFyTGlzdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBCdWZmZXJfMSA9IHJlcXVpcmUoXCIuL0J1ZmZlclwiKTtcbnZhciBCdWZmZXJMaW5lSlNBcnJheSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQnVmZmVyTGluZUpTQXJyYXkoY29scywgZmlsbENoYXJEYXRhLCBpc1dyYXBwZWQpIHtcbiAgICAgICAgdGhpcy5pc1dyYXBwZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fZGF0YSA9IFtdO1xuICAgICAgICBpZiAoIWZpbGxDaGFyRGF0YSkge1xuICAgICAgICAgICAgZmlsbENoYXJEYXRhID0gWzAsIEJ1ZmZlcl8xLk5VTExfQ0VMTF9DSEFSLCBCdWZmZXJfMS5OVUxMX0NFTExfV0lEVEgsIEJ1ZmZlcl8xLk5VTExfQ0VMTF9DT0RFXTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbHM7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5fcHVzaChmaWxsQ2hhckRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1dyYXBwZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaXNXcmFwcGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxlbmd0aCA9IHRoaXMuX2RhdGEubGVuZ3RoO1xuICAgIH1cbiAgICBCdWZmZXJMaW5lSlNBcnJheS5wcm90b3R5cGUuX3BvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhLnBvcCgpO1xuICAgICAgICB0aGlzLmxlbmd0aCA9IHRoaXMuX2RhdGEubGVuZ3RoO1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9O1xuICAgIEJ1ZmZlckxpbmVKU0FycmF5LnByb3RvdHlwZS5fcHVzaCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHRoaXMuX2RhdGEucHVzaChkYXRhKTtcbiAgICAgICAgdGhpcy5sZW5ndGggPSB0aGlzLl9kYXRhLmxlbmd0aDtcbiAgICB9O1xuICAgIEJ1ZmZlckxpbmVKU0FycmF5LnByb3RvdHlwZS5fc3BsaWNlID0gZnVuY3Rpb24gKHN0YXJ0LCBkZWxldGVDb3VudCkge1xuICAgICAgICB2YXIgaXRlbXMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGl0ZW1zW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIHJlbW92ZWQgPSAoX2EgPSB0aGlzLl9kYXRhKS5zcGxpY2UuYXBwbHkoX2EsIFtzdGFydCwgZGVsZXRlQ291bnRdLmNvbmNhdChpdGVtcykpO1xuICAgICAgICB0aGlzLmxlbmd0aCA9IHRoaXMuX2RhdGEubGVuZ3RoO1xuICAgICAgICByZXR1cm4gcmVtb3ZlZDtcbiAgICB9O1xuICAgIEJ1ZmZlckxpbmVKU0FycmF5LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGFbaW5kZXhdO1xuICAgIH07XG4gICAgQnVmZmVyTGluZUpTQXJyYXkucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChpbmRleCwgZGF0YSkge1xuICAgICAgICB0aGlzLl9kYXRhW2luZGV4XSA9IGRhdGE7XG4gICAgfTtcbiAgICBCdWZmZXJMaW5lSlNBcnJheS5wcm90b3R5cGUuaW5zZXJ0Q2VsbHMgPSBmdW5jdGlvbiAocG9zLCBuLCBjaCkge1xuICAgICAgICB3aGlsZSAobi0tKSB7XG4gICAgICAgICAgICB0aGlzLl9zcGxpY2UocG9zLCAwLCBjaCk7XG4gICAgICAgICAgICB0aGlzLl9wb3AoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQnVmZmVyTGluZUpTQXJyYXkucHJvdG90eXBlLmRlbGV0ZUNlbGxzID0gZnVuY3Rpb24gKHBvcywgbiwgZmlsbENoYXJEYXRhKSB7XG4gICAgICAgIHdoaWxlIChuLS0pIHtcbiAgICAgICAgICAgIHRoaXMuX3NwbGljZShwb3MsIDEpO1xuICAgICAgICAgICAgdGhpcy5fcHVzaChmaWxsQ2hhckRhdGEpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCdWZmZXJMaW5lSlNBcnJheS5wcm90b3R5cGUucmVwbGFjZUNlbGxzID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQsIGZpbGxDaGFyRGF0YSkge1xuICAgICAgICB3aGlsZSAoc3RhcnQgPCBlbmQgJiYgc3RhcnQgPCB0aGlzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5zZXQoc3RhcnQrKywgZmlsbENoYXJEYXRhKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQnVmZmVyTGluZUpTQXJyYXkucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uIChjb2xzLCBmaWxsQ2hhckRhdGEsIHNocmluaykge1xuICAgICAgICBpZiAoc2hyaW5rID09PSB2b2lkIDApIHsgc2hyaW5rID0gZmFsc2U7IH1cbiAgICAgICAgd2hpbGUgKHRoaXMuX2RhdGEubGVuZ3RoIDwgY29scykge1xuICAgICAgICAgICAgdGhpcy5fZGF0YS5wdXNoKGZpbGxDaGFyRGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNocmluaykge1xuICAgICAgICAgICAgd2hpbGUgKHRoaXMuX2RhdGEubGVuZ3RoID4gY29scykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RhdGEucG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sZW5ndGggPSB0aGlzLl9kYXRhLmxlbmd0aDtcbiAgICB9O1xuICAgIEJ1ZmZlckxpbmVKU0FycmF5LnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gKGZpbGxDaGFyRGF0YSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0KGksIGZpbGxDaGFyRGF0YSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEJ1ZmZlckxpbmVKU0FycmF5LnByb3RvdHlwZS5jb3B5RnJvbSA9IGZ1bmN0aW9uIChsaW5lKSB7XG4gICAgICAgIHRoaXMuX2RhdGEgPSBsaW5lLl9kYXRhLnNsaWNlKDApO1xuICAgICAgICB0aGlzLmxlbmd0aCA9IGxpbmUubGVuZ3RoO1xuICAgICAgICB0aGlzLmlzV3JhcHBlZCA9IGxpbmUuaXNXcmFwcGVkO1xuICAgIH07XG4gICAgQnVmZmVyTGluZUpTQXJyYXkucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbmV3TGluZSA9IG5ldyBCdWZmZXJMaW5lSlNBcnJheSgwKTtcbiAgICAgICAgbmV3TGluZS5jb3B5RnJvbSh0aGlzKTtcbiAgICAgICAgcmV0dXJuIG5ld0xpbmU7XG4gICAgfTtcbiAgICByZXR1cm4gQnVmZmVyTGluZUpTQXJyYXk7XG59KCkpO1xuZXhwb3J0cy5CdWZmZXJMaW5lSlNBcnJheSA9IEJ1ZmZlckxpbmVKU0FycmF5O1xudmFyIENFTExfU0laRSA9IDM7XG52YXIgQnVmZmVyTGluZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQnVmZmVyTGluZShjb2xzLCBmaWxsQ2hhckRhdGEsIGlzV3JhcHBlZCkge1xuICAgICAgICBpZiAoaXNXcmFwcGVkID09PSB2b2lkIDApIHsgaXNXcmFwcGVkID0gZmFsc2U7IH1cbiAgICAgICAgdGhpcy5pc1dyYXBwZWQgPSBpc1dyYXBwZWQ7XG4gICAgICAgIHRoaXMuX2RhdGEgPSBudWxsO1xuICAgICAgICB0aGlzLl9jb21iaW5lZCA9IHt9O1xuICAgICAgICBpZiAoIWZpbGxDaGFyRGF0YSkge1xuICAgICAgICAgICAgZmlsbENoYXJEYXRhID0gWzAsIEJ1ZmZlcl8xLk5VTExfQ0VMTF9DSEFSLCBCdWZmZXJfMS5OVUxMX0NFTExfV0lEVEgsIEJ1ZmZlcl8xLk5VTExfQ0VMTF9DT0RFXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29scykge1xuICAgICAgICAgICAgdGhpcy5fZGF0YSA9IG5ldyBVaW50MzJBcnJheShjb2xzICogQ0VMTF9TSVpFKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29sczsgKytpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoaSwgZmlsbENoYXJEYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxlbmd0aCA9IGNvbHM7XG4gICAgfVxuICAgIEJ1ZmZlckxpbmUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICB2YXIgc3RyaW5nRGF0YSA9IHRoaXMuX2RhdGFbaW5kZXggKiBDRUxMX1NJWkUgKyAxXTtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHRoaXMuX2RhdGFbaW5kZXggKiBDRUxMX1NJWkUgKyAwXSxcbiAgICAgICAgICAgIChzdHJpbmdEYXRhICYgMHg4MDAwMDAwMClcbiAgICAgICAgICAgICAgICA/IHRoaXMuX2NvbWJpbmVkW2luZGV4XVxuICAgICAgICAgICAgICAgIDogKHN0cmluZ0RhdGEpID8gU3RyaW5nLmZyb21DaGFyQ29kZShzdHJpbmdEYXRhKSA6ICcnLFxuICAgICAgICAgICAgdGhpcy5fZGF0YVtpbmRleCAqIENFTExfU0laRSArIDJdLFxuICAgICAgICAgICAgKHN0cmluZ0RhdGEgJiAweDgwMDAwMDAwKVxuICAgICAgICAgICAgICAgID8gdGhpcy5fY29tYmluZWRbaW5kZXhdLmNoYXJDb2RlQXQodGhpcy5fY29tYmluZWRbaW5kZXhdLmxlbmd0aCAtIDEpXG4gICAgICAgICAgICAgICAgOiBzdHJpbmdEYXRhXG4gICAgICAgIF07XG4gICAgfTtcbiAgICBCdWZmZXJMaW5lLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAoaW5kZXgsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2RhdGFbaW5kZXggKiBDRUxMX1NJWkUgKyAwXSA9IHZhbHVlWzBdO1xuICAgICAgICBpZiAodmFsdWVbMV0ubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgdGhpcy5fY29tYmluZWRbaW5kZXhdID0gdmFsdWVbMV07XG4gICAgICAgICAgICB0aGlzLl9kYXRhW2luZGV4ICogQ0VMTF9TSVpFICsgMV0gPSBpbmRleCB8IDB4ODAwMDAwMDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9kYXRhW2luZGV4ICogQ0VMTF9TSVpFICsgMV0gPSB2YWx1ZVsxXS5jaGFyQ29kZUF0KDApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2RhdGFbaW5kZXggKiBDRUxMX1NJWkUgKyAyXSA9IHZhbHVlWzJdO1xuICAgIH07XG4gICAgQnVmZmVyTGluZS5wcm90b3R5cGUuaW5zZXJ0Q2VsbHMgPSBmdW5jdGlvbiAocG9zLCBuLCBmaWxsQ2hhckRhdGEpIHtcbiAgICAgICAgcG9zICU9IHRoaXMubGVuZ3RoO1xuICAgICAgICBpZiAobiA8IHRoaXMubGVuZ3RoIC0gcG9zKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSBwb3MgLSBuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldChwb3MgKyBuICsgaSwgdGhpcy5nZXQocG9zICsgaSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldChwb3MgKyBpLCBmaWxsQ2hhckRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IHBvczsgaSA8IHRoaXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldChpLCBmaWxsQ2hhckRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBCdWZmZXJMaW5lLnByb3RvdHlwZS5kZWxldGVDZWxscyA9IGZ1bmN0aW9uIChwb3MsIG4sIGZpbGxDaGFyRGF0YSkge1xuICAgICAgICBwb3MgJT0gdGhpcy5sZW5ndGg7XG4gICAgICAgIGlmIChuIDwgdGhpcy5sZW5ndGggLSBwb3MpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGggLSBwb3MgLSBuOyArK2kpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldChwb3MgKyBpLCB0aGlzLmdldChwb3MgKyBuICsgaSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoIC0gbjsgaSA8IHRoaXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldChpLCBmaWxsQ2hhckRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IHBvczsgaSA8IHRoaXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldChpLCBmaWxsQ2hhckRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBCdWZmZXJMaW5lLnByb3RvdHlwZS5yZXBsYWNlQ2VsbHMgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgZmlsbENoYXJEYXRhKSB7XG4gICAgICAgIHdoaWxlIChzdGFydCA8IGVuZCAmJiBzdGFydCA8IHRoaXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnNldChzdGFydCsrLCBmaWxsQ2hhckRhdGEpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBCdWZmZXJMaW5lLnByb3RvdHlwZS5yZXNpemUgPSBmdW5jdGlvbiAoY29scywgZmlsbENoYXJEYXRhLCBzaHJpbmspIHtcbiAgICAgICAgaWYgKHNocmluayA9PT0gdm9pZCAwKSB7IHNocmluayA9IGZhbHNlOyB9XG4gICAgICAgIGlmIChjb2xzID09PSB0aGlzLmxlbmd0aCB8fCAoIXNocmluayAmJiBjb2xzIDwgdGhpcy5sZW5ndGgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbHMgPiB0aGlzLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBuZXcgVWludDMyQXJyYXkoY29scyAqIENFTExfU0laRSk7XG4gICAgICAgICAgICBpZiAodGhpcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29scyAqIENFTExfU0laRSA8IHRoaXMuX2RhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc2V0KHRoaXMuX2RhdGEuc3ViYXJyYXkoMCwgY29scyAqIENFTExfU0laRSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5zZXQodGhpcy5fZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fZGF0YSA9IGRhdGE7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGg7IGkgPCBjb2xzOyArK2kpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldChpLCBmaWxsQ2hhckRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNocmluaykge1xuICAgICAgICAgICAgaWYgKGNvbHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IG5ldyBVaW50MzJBcnJheShjb2xzICogQ0VMTF9TSVpFKTtcbiAgICAgICAgICAgICAgICBkYXRhLnNldCh0aGlzLl9kYXRhLnN1YmFycmF5KDAsIGNvbHMgKiBDRUxMX1NJWkUpKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9kYXRhID0gZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RhdGEgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMubGVuZ3RoID0gY29scztcbiAgICB9O1xuICAgIEJ1ZmZlckxpbmUucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiAoZmlsbENoYXJEYXRhKSB7XG4gICAgICAgIHRoaXMuX2NvbWJpbmVkID0ge307XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdGhpcy5zZXQoaSwgZmlsbENoYXJEYXRhKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQnVmZmVyTGluZS5wcm90b3R5cGUuY29weUZyb20gPSBmdW5jdGlvbiAobGluZSkge1xuICAgICAgICBpZiAodGhpcy5sZW5ndGggIT09IGxpbmUubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLl9kYXRhID0gbmV3IFVpbnQzMkFycmF5KGxpbmUuX2RhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZGF0YS5zZXQobGluZS5fZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sZW5ndGggPSBsaW5lLmxlbmd0aDtcbiAgICAgICAgdGhpcy5fY29tYmluZWQgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgZWwgaW4gbGluZS5fY29tYmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbWJpbmVkW2VsXSA9IGxpbmUuX2NvbWJpbmVkW2VsXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzV3JhcHBlZCA9IGxpbmUuaXNXcmFwcGVkO1xuICAgIH07XG4gICAgQnVmZmVyTGluZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBuZXdMaW5lID0gbmV3IEJ1ZmZlckxpbmUoMCk7XG4gICAgICAgIG5ld0xpbmUuX2RhdGEgPSBuZXcgVWludDMyQXJyYXkodGhpcy5fZGF0YSk7XG4gICAgICAgIG5ld0xpbmUubGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGVsIGluIHRoaXMuX2NvbWJpbmVkKSB7XG4gICAgICAgICAgICBuZXdMaW5lLl9jb21iaW5lZFtlbF0gPSB0aGlzLl9jb21iaW5lZFtlbF07XG4gICAgICAgIH1cbiAgICAgICAgbmV3TGluZS5pc1dyYXBwZWQgPSB0aGlzLmlzV3JhcHBlZDtcbiAgICAgICAgcmV0dXJuIG5ld0xpbmU7XG4gICAgfTtcbiAgICByZXR1cm4gQnVmZmVyTGluZTtcbn0oKSk7XG5leHBvcnRzLkJ1ZmZlckxpbmUgPSBCdWZmZXJMaW5lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QnVmZmVyTGluZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBDb21wb3NpdGlvbkhlbHBlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29tcG9zaXRpb25IZWxwZXIoX3RleHRhcmVhLCBfY29tcG9zaXRpb25WaWV3LCBfdGVybWluYWwpIHtcbiAgICAgICAgdGhpcy5fdGV4dGFyZWEgPSBfdGV4dGFyZWE7XG4gICAgICAgIHRoaXMuX2NvbXBvc2l0aW9uVmlldyA9IF9jb21wb3NpdGlvblZpZXc7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsID0gX3Rlcm1pbmFsO1xuICAgICAgICB0aGlzLl9pc0NvbXBvc2luZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pc1NlbmRpbmdDb21wb3NpdGlvbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9jb21wb3NpdGlvblBvc2l0aW9uID0geyBzdGFydDogbnVsbCwgZW5kOiBudWxsIH07XG4gICAgfVxuICAgIENvbXBvc2l0aW9uSGVscGVyLnByb3RvdHlwZS5jb21wb3NpdGlvbnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9pc0NvbXBvc2luZyA9IHRydWU7XG4gICAgICAgIHRoaXMuX2NvbXBvc2l0aW9uUG9zaXRpb24uc3RhcnQgPSB0aGlzLl90ZXh0YXJlYS52YWx1ZS5sZW5ndGg7XG4gICAgICAgIHRoaXMuX2NvbXBvc2l0aW9uVmlldy50ZXh0Q29udGVudCA9ICcnO1xuICAgICAgICB0aGlzLl9jb21wb3NpdGlvblZpZXcuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgfTtcbiAgICBDb21wb3NpdGlvbkhlbHBlci5wcm90b3R5cGUuY29tcG9zaXRpb251cGRhdGUgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5fY29tcG9zaXRpb25WaWV3LnRleHRDb250ZW50ID0gZXYuZGF0YTtcbiAgICAgICAgdGhpcy51cGRhdGVDb21wb3NpdGlvbkVsZW1lbnRzKCk7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuX2NvbXBvc2l0aW9uUG9zaXRpb24uZW5kID0gX3RoaXMuX3RleHRhcmVhLnZhbHVlLmxlbmd0aDtcbiAgICAgICAgfSwgMCk7XG4gICAgfTtcbiAgICBDb21wb3NpdGlvbkhlbHBlci5wcm90b3R5cGUuY29tcG9zaXRpb25lbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2ZpbmFsaXplQ29tcG9zaXRpb24odHJ1ZSk7XG4gICAgfTtcbiAgICBDb21wb3NpdGlvbkhlbHBlci5wcm90b3R5cGUua2V5ZG93biA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICBpZiAodGhpcy5faXNDb21wb3NpbmcgfHwgdGhpcy5faXNTZW5kaW5nQ29tcG9zaXRpb24pIHtcbiAgICAgICAgICAgIGlmIChldi5rZXlDb2RlID09PSAyMjkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChldi5rZXlDb2RlID09PSAxNiB8fCBldi5rZXlDb2RlID09PSAxNyB8fCBldi5rZXlDb2RlID09PSAxOCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2ZpbmFsaXplQ29tcG9zaXRpb24oZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldi5rZXlDb2RlID09PSAyMjkpIHtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZUFueVRleHRhcmVhQ2hhbmdlcygpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgQ29tcG9zaXRpb25IZWxwZXIucHJvdG90eXBlLl9maW5hbGl6ZUNvbXBvc2l0aW9uID0gZnVuY3Rpb24gKHdhaXRGb3JQcm9wb2dhdGlvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLl9jb21wb3NpdGlvblZpZXcuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gICAgICAgIHRoaXMuX2lzQ29tcG9zaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2NsZWFyVGV4dGFyZWFQb3NpdGlvbigpO1xuICAgICAgICBpZiAoIXdhaXRGb3JQcm9wb2dhdGlvbikge1xuICAgICAgICAgICAgdGhpcy5faXNTZW5kaW5nQ29tcG9zaXRpb24gPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXMuX3RleHRhcmVhLnZhbHVlLnN1YnN0cmluZyh0aGlzLl9jb21wb3NpdGlvblBvc2l0aW9uLnN0YXJ0LCB0aGlzLl9jb21wb3NpdGlvblBvc2l0aW9uLmVuZCk7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5oYW5kbGVyKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50Q29tcG9zaXRpb25Qb3NpdGlvbl8xID0ge1xuICAgICAgICAgICAgICAgIHN0YXJ0OiB0aGlzLl9jb21wb3NpdGlvblBvc2l0aW9uLnN0YXJ0LFxuICAgICAgICAgICAgICAgIGVuZDogdGhpcy5fY29tcG9zaXRpb25Qb3NpdGlvbi5lbmRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLl9pc1NlbmRpbmdDb21wb3NpdGlvbiA9IHRydWU7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2lzU2VuZGluZ0NvbXBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9pc1NlbmRpbmdDb21wb3NpdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5faXNDb21wb3NpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0ID0gX3RoaXMuX3RleHRhcmVhLnZhbHVlLnN1YnN0cmluZyhjdXJyZW50Q29tcG9zaXRpb25Qb3NpdGlvbl8xLnN0YXJ0LCBjdXJyZW50Q29tcG9zaXRpb25Qb3NpdGlvbl8xLmVuZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dCA9IF90aGlzLl90ZXh0YXJlYS52YWx1ZS5zdWJzdHJpbmcoY3VycmVudENvbXBvc2l0aW9uUG9zaXRpb25fMS5zdGFydCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3Rlcm1pbmFsLmhhbmRsZXIoaW5wdXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIDApO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb21wb3NpdGlvbkhlbHBlci5wcm90b3R5cGUuX2hhbmRsZUFueVRleHRhcmVhQ2hhbmdlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy5fdGV4dGFyZWEudmFsdWU7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5faXNDb21wb3NpbmcpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV3VmFsdWUgPSBfdGhpcy5fdGV4dGFyZWEudmFsdWU7XG4gICAgICAgICAgICAgICAgdmFyIGRpZmYgPSBuZXdWYWx1ZS5yZXBsYWNlKG9sZFZhbHVlLCAnJyk7XG4gICAgICAgICAgICAgICAgaWYgKGRpZmYubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fdGVybWluYWwuaGFuZGxlcihkaWZmKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDApO1xuICAgIH07XG4gICAgQ29tcG9zaXRpb25IZWxwZXIucHJvdG90eXBlLnVwZGF0ZUNvbXBvc2l0aW9uRWxlbWVudHMgPSBmdW5jdGlvbiAoZG9udFJlY3Vyc2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCF0aGlzLl9pc0NvbXBvc2luZykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl90ZXJtaW5hbC5idWZmZXIuaXNDdXJzb3JJblZpZXdwb3J0KSB7XG4gICAgICAgICAgICB2YXIgY2VsbEhlaWdodCA9IE1hdGguY2VpbCh0aGlzLl90ZXJtaW5hbC5jaGFyTWVhc3VyZS5oZWlnaHQgKiB0aGlzLl90ZXJtaW5hbC5vcHRpb25zLmxpbmVIZWlnaHQpO1xuICAgICAgICAgICAgdmFyIGN1cnNvclRvcCA9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ICogY2VsbEhlaWdodDtcbiAgICAgICAgICAgIHZhciBjdXJzb3JMZWZ0ID0gdGhpcy5fdGVybWluYWwuYnVmZmVyLnggKiB0aGlzLl90ZXJtaW5hbC5jaGFyTWVhc3VyZS53aWR0aDtcbiAgICAgICAgICAgIHRoaXMuX2NvbXBvc2l0aW9uVmlldy5zdHlsZS5sZWZ0ID0gY3Vyc29yTGVmdCArICdweCc7XG4gICAgICAgICAgICB0aGlzLl9jb21wb3NpdGlvblZpZXcuc3R5bGUudG9wID0gY3Vyc29yVG9wICsgJ3B4JztcbiAgICAgICAgICAgIHRoaXMuX2NvbXBvc2l0aW9uVmlldy5zdHlsZS5oZWlnaHQgPSBjZWxsSGVpZ2h0ICsgJ3B4JztcbiAgICAgICAgICAgIHRoaXMuX2NvbXBvc2l0aW9uVmlldy5zdHlsZS5saW5lSGVpZ2h0ID0gY2VsbEhlaWdodCArICdweCc7XG4gICAgICAgICAgICB2YXIgY29tcG9zaXRpb25WaWV3Qm91bmRzID0gdGhpcy5fY29tcG9zaXRpb25WaWV3LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgdGhpcy5fdGV4dGFyZWEuc3R5bGUubGVmdCA9IGN1cnNvckxlZnQgKyAncHgnO1xuICAgICAgICAgICAgdGhpcy5fdGV4dGFyZWEuc3R5bGUudG9wID0gY3Vyc29yVG9wICsgJ3B4JztcbiAgICAgICAgICAgIHRoaXMuX3RleHRhcmVhLnN0eWxlLndpZHRoID0gY29tcG9zaXRpb25WaWV3Qm91bmRzLndpZHRoICsgJ3B4JztcbiAgICAgICAgICAgIHRoaXMuX3RleHRhcmVhLnN0eWxlLmhlaWdodCA9IGNvbXBvc2l0aW9uVmlld0JvdW5kcy5oZWlnaHQgKyAncHgnO1xuICAgICAgICAgICAgdGhpcy5fdGV4dGFyZWEuc3R5bGUubGluZUhlaWdodCA9IGNvbXBvc2l0aW9uVmlld0JvdW5kcy5oZWlnaHQgKyAncHgnO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZG9udFJlY3Vyc2UpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMudXBkYXRlQ29tcG9zaXRpb25FbGVtZW50cyh0cnVlKTsgfSwgMCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbXBvc2l0aW9uSGVscGVyLnByb3RvdHlwZS5fY2xlYXJUZXh0YXJlYVBvc2l0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl90ZXh0YXJlYS5zdHlsZS5sZWZ0ID0gJyc7XG4gICAgICAgIHRoaXMuX3RleHRhcmVhLnN0eWxlLnRvcCA9ICcnO1xuICAgIH07XG4gICAgcmV0dXJuIENvbXBvc2l0aW9uSGVscGVyO1xufSgpKTtcbmV4cG9ydHMuQ29tcG9zaXRpb25IZWxwZXIgPSBDb21wb3NpdGlvbkhlbHBlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbXBvc2l0aW9uSGVscGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBMaWZlY3ljbGVfMSA9IHJlcXVpcmUoXCIuL2NvbW1vbi9MaWZlY3ljbGVcIik7XG52YXIgTGlmZWN5Y2xlXzIgPSByZXF1aXJlKFwiLi91aS9MaWZlY3ljbGVcIik7XG52YXIgRkFMTEJBQ0tfU0NST0xMX0JBUl9XSURUSCA9IDE1O1xudmFyIFZpZXdwb3J0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVmlld3BvcnQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVmlld3BvcnQoX3Rlcm1pbmFsLCBfdmlld3BvcnRFbGVtZW50LCBfc2Nyb2xsQXJlYSwgX2NoYXJNZWFzdXJlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl90ZXJtaW5hbCA9IF90ZXJtaW5hbDtcbiAgICAgICAgX3RoaXMuX3ZpZXdwb3J0RWxlbWVudCA9IF92aWV3cG9ydEVsZW1lbnQ7XG4gICAgICAgIF90aGlzLl9zY3JvbGxBcmVhID0gX3Njcm9sbEFyZWE7XG4gICAgICAgIF90aGlzLl9jaGFyTWVhc3VyZSA9IF9jaGFyTWVhc3VyZTtcbiAgICAgICAgX3RoaXMuc2Nyb2xsQmFyV2lkdGggPSAwO1xuICAgICAgICBfdGhpcy5fY3VycmVudFJvd0hlaWdodCA9IDA7XG4gICAgICAgIF90aGlzLl9sYXN0UmVjb3JkZWRCdWZmZXJMZW5ndGggPSAwO1xuICAgICAgICBfdGhpcy5fbGFzdFJlY29yZGVkVmlld3BvcnRIZWlnaHQgPSAwO1xuICAgICAgICBfdGhpcy5fbGFzdFJlY29yZGVkQnVmZmVySGVpZ2h0ID0gMDtcbiAgICAgICAgX3RoaXMuX2xhc3RTY3JvbGxUb3AgPSAwO1xuICAgICAgICBfdGhpcy5fd2hlZWxQYXJ0aWFsU2Nyb2xsID0gMDtcbiAgICAgICAgX3RoaXMuX3JlZnJlc2hBbmltYXRpb25GcmFtZSA9IG51bGw7XG4gICAgICAgIF90aGlzLl9pZ25vcmVOZXh0U2Nyb2xsRXZlbnQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuc2Nyb2xsQmFyV2lkdGggPSAoX3RoaXMuX3ZpZXdwb3J0RWxlbWVudC5vZmZzZXRXaWR0aCAtIF90aGlzLl9zY3JvbGxBcmVhLm9mZnNldFdpZHRoKSB8fCBGQUxMQkFDS19TQ1JPTExfQkFSX1dJRFRIO1xuICAgICAgICBfdGhpcy5yZWdpc3RlcihMaWZlY3ljbGVfMi5hZGREaXNwb3NhYmxlRG9tTGlzdGVuZXIoX3RoaXMuX3ZpZXdwb3J0RWxlbWVudCwgJ3Njcm9sbCcsIF90aGlzLl9vblNjcm9sbC5iaW5kKF90aGlzKSkpO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnN5bmNTY3JvbGxBcmVhKCk7IH0sIDApO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFZpZXdwb3J0LnByb3RvdHlwZS5vblRoZW1lQ2hhbmdlZCA9IGZ1bmN0aW9uIChjb2xvcnMpIHtcbiAgICAgICAgdGhpcy5fdmlld3BvcnRFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNvbG9ycy5iYWNrZ3JvdW5kLmNzcztcbiAgICB9O1xuICAgIFZpZXdwb3J0LnByb3RvdHlwZS5fcmVmcmVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuX3JlZnJlc2hBbmltYXRpb25GcmFtZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fcmVmcmVzaEFuaW1hdGlvbkZyYW1lID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLl9pbm5lclJlZnJlc2goKTsgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFZpZXdwb3J0LnByb3RvdHlwZS5faW5uZXJSZWZyZXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fY2hhck1lYXN1cmUuaGVpZ2h0ID4gMCkge1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFJvd0hlaWdodCA9IHRoaXMuX3Rlcm1pbmFsLnJlbmRlcmVyLmRpbWVuc2lvbnMuc2NhbGVkQ2VsbEhlaWdodCAvIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgICAgICAgICAgdGhpcy5fbGFzdFJlY29yZGVkVmlld3BvcnRIZWlnaHQgPSB0aGlzLl92aWV3cG9ydEVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgdmFyIG5ld0J1ZmZlckhlaWdodCA9IE1hdGgucm91bmQodGhpcy5fY3VycmVudFJvd0hlaWdodCAqIHRoaXMuX2xhc3RSZWNvcmRlZEJ1ZmZlckxlbmd0aCkgKyAodGhpcy5fbGFzdFJlY29yZGVkVmlld3BvcnRIZWlnaHQgLSB0aGlzLl90ZXJtaW5hbC5yZW5kZXJlci5kaW1lbnNpb25zLmNhbnZhc0hlaWdodCk7XG4gICAgICAgICAgICBpZiAodGhpcy5fbGFzdFJlY29yZGVkQnVmZmVySGVpZ2h0ICE9PSBuZXdCdWZmZXJIZWlnaHQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sYXN0UmVjb3JkZWRCdWZmZXJIZWlnaHQgPSBuZXdCdWZmZXJIZWlnaHQ7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2Nyb2xsQXJlYS5zdHlsZS5oZWlnaHQgPSB0aGlzLl9sYXN0UmVjb3JkZWRCdWZmZXJIZWlnaHQgKyAncHgnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBzY3JvbGxUb3AgPSB0aGlzLl90ZXJtaW5hbC5idWZmZXIueWRpc3AgKiB0aGlzLl9jdXJyZW50Um93SGVpZ2h0O1xuICAgICAgICBpZiAodGhpcy5fdmlld3BvcnRFbGVtZW50LnNjcm9sbFRvcCAhPT0gc2Nyb2xsVG9wKSB7XG4gICAgICAgICAgICB0aGlzLl9pZ25vcmVOZXh0U2Nyb2xsRXZlbnQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fdmlld3BvcnRFbGVtZW50LnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZWZyZXNoQW5pbWF0aW9uRnJhbWUgPSBudWxsO1xuICAgIH07XG4gICAgVmlld3BvcnQucHJvdG90eXBlLnN5bmNTY3JvbGxBcmVhID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fbGFzdFJlY29yZGVkQnVmZmVyTGVuZ3RoICE9PSB0aGlzLl90ZXJtaW5hbC5idWZmZXIubGluZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLl9sYXN0UmVjb3JkZWRCdWZmZXJMZW5ndGggPSB0aGlzLl90ZXJtaW5hbC5idWZmZXIubGluZXMubGVuZ3RoO1xuICAgICAgICAgICAgdGhpcy5fcmVmcmVzaCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9sYXN0UmVjb3JkZWRWaWV3cG9ydEhlaWdodCAhPT0gdGhpcy5fdGVybWluYWwucmVuZGVyZXIuZGltZW5zaW9ucy5jYW52YXNIZWlnaHQpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlZnJlc2goKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbmV3U2Nyb2xsVG9wID0gdGhpcy5fdGVybWluYWwuYnVmZmVyLnlkaXNwICogdGhpcy5fY3VycmVudFJvd0hlaWdodDtcbiAgICAgICAgaWYgKHRoaXMuX2xhc3RTY3JvbGxUb3AgIT09IG5ld1Njcm9sbFRvcCkge1xuICAgICAgICAgICAgdGhpcy5fcmVmcmVzaCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9sYXN0U2Nyb2xsVG9wICE9PSB0aGlzLl92aWV3cG9ydEVsZW1lbnQuc2Nyb2xsVG9wKSB7XG4gICAgICAgICAgICB0aGlzLl9yZWZyZXNoKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3Rlcm1pbmFsLnJlbmRlcmVyLmRpbWVuc2lvbnMuc2NhbGVkQ2VsbEhlaWdodCAvIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvICE9PSB0aGlzLl9jdXJyZW50Um93SGVpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLl9yZWZyZXNoKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFZpZXdwb3J0LnByb3RvdHlwZS5fb25TY3JvbGwgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgdGhpcy5fbGFzdFNjcm9sbFRvcCA9IHRoaXMuX3ZpZXdwb3J0RWxlbWVudC5zY3JvbGxUb3A7XG4gICAgICAgIGlmICghdGhpcy5fdmlld3BvcnRFbGVtZW50Lm9mZnNldFBhcmVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9pZ25vcmVOZXh0U2Nyb2xsRXZlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX2lnbm9yZU5leHRTY3JvbGxFdmVudCA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuZXdSb3cgPSBNYXRoLnJvdW5kKHRoaXMuX2xhc3RTY3JvbGxUb3AgLyB0aGlzLl9jdXJyZW50Um93SGVpZ2h0KTtcbiAgICAgICAgdmFyIGRpZmYgPSBuZXdSb3cgLSB0aGlzLl90ZXJtaW5hbC5idWZmZXIueWRpc3A7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLnNjcm9sbExpbmVzKGRpZmYsIHRydWUpO1xuICAgIH07XG4gICAgVmlld3BvcnQucHJvdG90eXBlLm9uV2hlZWwgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgdmFyIGFtb3VudCA9IHRoaXMuX2dldFBpeGVsc1Njcm9sbGVkKGV2KTtcbiAgICAgICAgaWYgKGFtb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ZpZXdwb3J0RWxlbWVudC5zY3JvbGxUb3AgKz0gYW1vdW50O1xuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH07XG4gICAgVmlld3BvcnQucHJvdG90eXBlLl9nZXRQaXhlbHNTY3JvbGxlZCA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICBpZiAoZXYuZGVsdGFZID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYW1vdW50ID0gZXYuZGVsdGFZO1xuICAgICAgICBpZiAoZXYuZGVsdGFNb2RlID09PSBXaGVlbEV2ZW50LkRPTV9ERUxUQV9MSU5FKSB7XG4gICAgICAgICAgICBhbW91bnQgKj0gdGhpcy5fY3VycmVudFJvd0hlaWdodDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChldi5kZWx0YU1vZGUgPT09IFdoZWVsRXZlbnQuRE9NX0RFTFRBX1BBR0UpIHtcbiAgICAgICAgICAgIGFtb3VudCAqPSB0aGlzLl9jdXJyZW50Um93SGVpZ2h0ICogdGhpcy5fdGVybWluYWwucm93cztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYW1vdW50O1xuICAgIH07XG4gICAgVmlld3BvcnQucHJvdG90eXBlLmdldExpbmVzU2Nyb2xsZWQgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgaWYgKGV2LmRlbHRhWSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFtb3VudCA9IGV2LmRlbHRhWTtcbiAgICAgICAgaWYgKGV2LmRlbHRhTW9kZSA9PT0gV2hlZWxFdmVudC5ET01fREVMVEFfUElYRUwpIHtcbiAgICAgICAgICAgIGFtb3VudCAvPSB0aGlzLl9jdXJyZW50Um93SGVpZ2h0ICsgMC4wO1xuICAgICAgICAgICAgdGhpcy5fd2hlZWxQYXJ0aWFsU2Nyb2xsICs9IGFtb3VudDtcbiAgICAgICAgICAgIGFtb3VudCA9IE1hdGguZmxvb3IoTWF0aC5hYnModGhpcy5fd2hlZWxQYXJ0aWFsU2Nyb2xsKSkgKiAodGhpcy5fd2hlZWxQYXJ0aWFsU2Nyb2xsID4gMCA/IDEgOiAtMSk7XG4gICAgICAgICAgICB0aGlzLl93aGVlbFBhcnRpYWxTY3JvbGwgJT0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChldi5kZWx0YU1vZGUgPT09IFdoZWVsRXZlbnQuRE9NX0RFTFRBX1BBR0UpIHtcbiAgICAgICAgICAgIGFtb3VudCAqPSB0aGlzLl90ZXJtaW5hbC5yb3dzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbW91bnQ7XG4gICAgfTtcbiAgICBWaWV3cG9ydC5wcm90b3R5cGUub25Ub3VjaFN0YXJ0ID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIHRoaXMuX2xhc3RUb3VjaFkgPSBldi50b3VjaGVzWzBdLnBhZ2VZO1xuICAgIH07XG4gICAgVmlld3BvcnQucHJvdG90eXBlLm9uVG91Y2hNb3ZlID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIHZhciBkZWx0YVkgPSB0aGlzLl9sYXN0VG91Y2hZIC0gZXYudG91Y2hlc1swXS5wYWdlWTtcbiAgICAgICAgdGhpcy5fbGFzdFRvdWNoWSA9IGV2LnRvdWNoZXNbMF0ucGFnZVk7XG4gICAgICAgIGlmIChkZWx0YVkgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl92aWV3cG9ydEVsZW1lbnQuc2Nyb2xsVG9wICs9IGRlbHRhWTtcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICB9O1xuICAgIHJldHVybiBWaWV3cG9ydDtcbn0oTGlmZWN5Y2xlXzEuRGlzcG9zYWJsZSkpO1xuZXhwb3J0cy5WaWV3cG9ydCA9IFZpZXdwb3J0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Vmlld3BvcnQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiBwcmVwYXJlVGV4dEZvclRlcm1pbmFsKHRleHQpIHtcbiAgICByZXR1cm4gdGV4dC5yZXBsYWNlKC9cXHI/XFxuL2csICdcXHInKTtcbn1cbmV4cG9ydHMucHJlcGFyZVRleHRGb3JUZXJtaW5hbCA9IHByZXBhcmVUZXh0Rm9yVGVybWluYWw7XG5mdW5jdGlvbiBicmFja2V0VGV4dEZvclBhc3RlKHRleHQsIGJyYWNrZXRlZFBhc3RlTW9kZSkge1xuICAgIGlmIChicmFja2V0ZWRQYXN0ZU1vZGUpIHtcbiAgICAgICAgcmV0dXJuICdcXHgxYlsyMDB+JyArIHRleHQgKyAnXFx4MWJbMjAxfic7XG4gICAgfVxuICAgIHJldHVybiB0ZXh0O1xufVxuZXhwb3J0cy5icmFja2V0VGV4dEZvclBhc3RlID0gYnJhY2tldFRleHRGb3JQYXN0ZTtcbmZ1bmN0aW9uIGNvcHlIYW5kbGVyKGV2LCB0ZXJtLCBzZWxlY3Rpb25NYW5hZ2VyKSB7XG4gICAgaWYgKHRlcm0uYnJvd3Nlci5pc01TSUUpIHtcbiAgICAgICAgd2luZG93LmNsaXBib2FyZERhdGEuc2V0RGF0YSgnVGV4dCcsIHNlbGVjdGlvbk1hbmFnZXIuc2VsZWN0aW9uVGV4dCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBldi5jbGlwYm9hcmREYXRhLnNldERhdGEoJ3RleHQvcGxhaW4nLCBzZWxlY3Rpb25NYW5hZ2VyLnNlbGVjdGlvblRleHQpO1xuICAgIH1cbiAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xufVxuZXhwb3J0cy5jb3B5SGFuZGxlciA9IGNvcHlIYW5kbGVyO1xuZnVuY3Rpb24gcGFzdGVIYW5kbGVyKGV2LCB0ZXJtKSB7XG4gICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdmFyIHRleHQ7XG4gICAgdmFyIGRpc3BhdGNoUGFzdGUgPSBmdW5jdGlvbiAodGV4dCkge1xuICAgICAgICB0ZXh0ID0gcHJlcGFyZVRleHRGb3JUZXJtaW5hbCh0ZXh0KTtcbiAgICAgICAgdGV4dCA9IGJyYWNrZXRUZXh0Rm9yUGFzdGUodGV4dCwgdGVybS5icmFja2V0ZWRQYXN0ZU1vZGUpO1xuICAgICAgICB0ZXJtLmhhbmRsZXIodGV4dCk7XG4gICAgICAgIHRlcm0udGV4dGFyZWEudmFsdWUgPSAnJztcbiAgICAgICAgdGVybS5lbWl0KCdwYXN0ZScsIHRleHQpO1xuICAgICAgICB0ZXJtLmNhbmNlbChldik7XG4gICAgfTtcbiAgICBpZiAodGVybS5icm93c2VyLmlzTVNJRSkge1xuICAgICAgICBpZiAod2luZG93LmNsaXBib2FyZERhdGEpIHtcbiAgICAgICAgICAgIHRleHQgPSB3aW5kb3cuY2xpcGJvYXJkRGF0YS5nZXREYXRhKCdUZXh0Jyk7XG4gICAgICAgICAgICBkaXNwYXRjaFBhc3RlKHRleHQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoZXYuY2xpcGJvYXJkRGF0YSkge1xuICAgICAgICAgICAgdGV4dCA9IGV2LmNsaXBib2FyZERhdGEuZ2V0RGF0YSgndGV4dC9wbGFpbicpO1xuICAgICAgICAgICAgZGlzcGF0Y2hQYXN0ZSh0ZXh0KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMucGFzdGVIYW5kbGVyID0gcGFzdGVIYW5kbGVyO1xuZnVuY3Rpb24gbW92ZVRleHRBcmVhVW5kZXJNb3VzZUN1cnNvcihldiwgdGV4dGFyZWEpIHtcbiAgICB0ZXh0YXJlYS5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XG4gICAgdGV4dGFyZWEuc3R5bGUud2lkdGggPSAnMjBweCc7XG4gICAgdGV4dGFyZWEuc3R5bGUuaGVpZ2h0ID0gJzIwcHgnO1xuICAgIHRleHRhcmVhLnN0eWxlLmxlZnQgPSAoZXYuY2xpZW50WCAtIDEwKSArICdweCc7XG4gICAgdGV4dGFyZWEuc3R5bGUudG9wID0gKGV2LmNsaWVudFkgLSAxMCkgKyAncHgnO1xuICAgIHRleHRhcmVhLnN0eWxlLnpJbmRleCA9ICcxMDAwJztcbiAgICB0ZXh0YXJlYS5mb2N1cygpO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICB0ZXh0YXJlYS5zdHlsZS5wb3NpdGlvbiA9IG51bGw7XG4gICAgICAgIHRleHRhcmVhLnN0eWxlLndpZHRoID0gbnVsbDtcbiAgICAgICAgdGV4dGFyZWEuc3R5bGUuaGVpZ2h0ID0gbnVsbDtcbiAgICAgICAgdGV4dGFyZWEuc3R5bGUubGVmdCA9IG51bGw7XG4gICAgICAgIHRleHRhcmVhLnN0eWxlLnRvcCA9IG51bGw7XG4gICAgICAgIHRleHRhcmVhLnN0eWxlLnpJbmRleCA9IG51bGw7XG4gICAgfSwgMjAwKTtcbn1cbmV4cG9ydHMubW92ZVRleHRBcmVhVW5kZXJNb3VzZUN1cnNvciA9IG1vdmVUZXh0QXJlYVVuZGVyTW91c2VDdXJzb3I7XG5mdW5jdGlvbiByaWdodENsaWNrSGFuZGxlcihldiwgdGV4dGFyZWEsIHNlbGVjdGlvbk1hbmFnZXIsIHNob3VsZFNlbGVjdFdvcmQpIHtcbiAgICBtb3ZlVGV4dEFyZWFVbmRlck1vdXNlQ3Vyc29yKGV2LCB0ZXh0YXJlYSk7XG4gICAgaWYgKHNob3VsZFNlbGVjdFdvcmQgJiYgIXNlbGVjdGlvbk1hbmFnZXIuaXNDbGlja0luU2VsZWN0aW9uKGV2KSkge1xuICAgICAgICBzZWxlY3Rpb25NYW5hZ2VyLnNlbGVjdFdvcmRBdEN1cnNvcihldik7XG4gICAgfVxuICAgIHRleHRhcmVhLnZhbHVlID0gc2VsZWN0aW9uTWFuYWdlci5zZWxlY3Rpb25UZXh0O1xuICAgIHRleHRhcmVhLnNlbGVjdCgpO1xufVxuZXhwb3J0cy5yaWdodENsaWNrSGFuZGxlciA9IHJpZ2h0Q2xpY2tIYW5kbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2xpcGJvYXJkLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBFc2NhcGVTZXF1ZW5jZXNfMSA9IHJlcXVpcmUoXCIuL2NvbW1vbi9kYXRhL0VzY2FwZVNlcXVlbmNlc1wiKTtcbnZhciBDaGFyc2V0c18xID0gcmVxdWlyZShcIi4vY29yZS9kYXRhL0NoYXJzZXRzXCIpO1xudmFyIEJ1ZmZlcl8xID0gcmVxdWlyZShcIi4vQnVmZmVyXCIpO1xudmFyIENoYXJXaWR0aF8xID0gcmVxdWlyZShcIi4vQ2hhcldpZHRoXCIpO1xudmFyIEVzY2FwZVNlcXVlbmNlUGFyc2VyXzEgPSByZXF1aXJlKFwiLi9Fc2NhcGVTZXF1ZW5jZVBhcnNlclwiKTtcbnZhciBMaWZlY3ljbGVfMSA9IHJlcXVpcmUoXCIuL2NvbW1vbi9MaWZlY3ljbGVcIik7XG52YXIgR0xFVkVMID0geyAnKCc6IDAsICcpJzogMSwgJyonOiAyLCAnKyc6IDMsICctJzogMSwgJy4nOiAyIH07XG52YXIgUmVxdWVzdFRlcm1pbmZvID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZXF1ZXN0VGVybWluZm8oX3Rlcm1pbmFsKSB7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsID0gX3Rlcm1pbmFsO1xuICAgIH1cbiAgICBSZXF1ZXN0VGVybWluZm8ucHJvdG90eXBlLmhvb2sgPSBmdW5jdGlvbiAoY29sbGVjdCwgcGFyYW1zLCBmbGFnKSB7XG4gICAgICAgIHRoaXMuX2RhdGEgPSAnJztcbiAgICB9O1xuICAgIFJlcXVlc3RUZXJtaW5mby5wcm90b3R5cGUucHV0ID0gZnVuY3Rpb24gKGRhdGEsIHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgdGhpcy5fZGF0YSArPSBkYXRhLnN1YnN0cmluZyhzdGFydCwgZW5kKTtcbiAgICB9O1xuICAgIFJlcXVlc3RUZXJtaW5mby5wcm90b3R5cGUudW5ob29rID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5oYW5kbGVyKEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArIFwiUDArclwiICsgdGhpcy5fZGF0YSArIEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArIFwiXFxcXFwiKTtcbiAgICB9O1xuICAgIHJldHVybiBSZXF1ZXN0VGVybWluZm87XG59KCkpO1xudmFyIERFQ1JRU1MgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERFQ1JRU1MoX3Rlcm1pbmFsKSB7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsID0gX3Rlcm1pbmFsO1xuICAgIH1cbiAgICBERUNSUVNTLnByb3RvdHlwZS5ob29rID0gZnVuY3Rpb24gKGNvbGxlY3QsIHBhcmFtcywgZmxhZykge1xuICAgICAgICB0aGlzLl9kYXRhID0gJyc7XG4gICAgfTtcbiAgICBERUNSUVNTLnByb3RvdHlwZS5wdXQgPSBmdW5jdGlvbiAoZGF0YSwgc3RhcnQsIGVuZCkge1xuICAgICAgICB0aGlzLl9kYXRhICs9IGRhdGEuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpO1xuICAgIH07XG4gICAgREVDUlFTUy5wcm90b3R5cGUudW5ob29rID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuX2RhdGEpIHtcbiAgICAgICAgICAgIGNhc2UgJ1wicSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Rlcm1pbmFsLmhhbmRsZXIoRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgXCJQMSRyMFxcXCJxXCIgKyBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyBcIlxcXFxcIik7XG4gICAgICAgICAgICBjYXNlICdcInAnOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl90ZXJtaW5hbC5oYW5kbGVyKEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArIFwiUDEkcjYxXFxcInBcIiArIEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArIFwiXFxcXFwiKTtcbiAgICAgICAgICAgIGNhc2UgJ3InOlxuICAgICAgICAgICAgICAgIHZhciBwdCA9ICcnICsgKHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci5zY3JvbGxUb3AgKyAxKSArXG4gICAgICAgICAgICAgICAgICAgICc7JyArICh0aGlzLl90ZXJtaW5hbC5idWZmZXIuc2Nyb2xsQm90dG9tICsgMSkgKyAncic7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Rlcm1pbmFsLmhhbmRsZXIoRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgXCJQMSRyXCIgKyBwdCArIEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArIFwiXFxcXFwiKTtcbiAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl90ZXJtaW5hbC5oYW5kbGVyKEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArIFwiUDEkcjBtXCIgKyBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyBcIlxcXFxcIik7XG4gICAgICAgICAgICBjYXNlICcgcSc6XG4gICAgICAgICAgICAgICAgdmFyIFNUWUxFUyA9IHsgJ2Jsb2NrJzogMiwgJ3VuZGVybGluZSc6IDQsICdiYXInOiA2IH07XG4gICAgICAgICAgICAgICAgdmFyIHN0eWxlID0gU1RZTEVTW3RoaXMuX3Rlcm1pbmFsLmdldE9wdGlvbignY3Vyc29yU3R5bGUnKV07XG4gICAgICAgICAgICAgICAgc3R5bGUgLT0gdGhpcy5fdGVybWluYWwuZ2V0T3B0aW9uKCdjdXJzb3JCbGluaycpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl90ZXJtaW5hbC5oYW5kbGVyKEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArIFwiUDEkclwiICsgc3R5bGUgKyBcIiBxXCIgKyBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyBcIlxcXFxcIik7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmVycm9yKCdVbmtub3duIERDUyAkcSAlcycsIHRoaXMuX2RhdGEpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmhhbmRsZXIoRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgXCJQMCRyXCIgKyB0aGlzLl9kYXRhICsgRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgXCJcXFxcXCIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gREVDUlFTUztcbn0oKSk7XG52YXIgSW5wdXRIYW5kbGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoSW5wdXRIYW5kbGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIElucHV0SGFuZGxlcihfdGVybWluYWwsIF9wYXJzZXIpIHtcbiAgICAgICAgaWYgKF9wYXJzZXIgPT09IHZvaWQgMCkgeyBfcGFyc2VyID0gbmV3IEVzY2FwZVNlcXVlbmNlUGFyc2VyXzEuRXNjYXBlU2VxdWVuY2VQYXJzZXIoKTsgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fdGVybWluYWwgPSBfdGVybWluYWw7XG4gICAgICAgIF90aGlzLl9wYXJzZXIgPSBfcGFyc2VyO1xuICAgICAgICBfdGhpcy5yZWdpc3RlcihfdGhpcy5fcGFyc2VyKTtcbiAgICAgICAgX3RoaXMuX3N1cnJvZ2F0ZUZpcnN0ID0gJyc7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0Q3NpSGFuZGxlckZhbGxiYWNrKGZ1bmN0aW9uIChjb2xsZWN0LCBwYXJhbXMsIGZsYWcpIHtcbiAgICAgICAgICAgIF90aGlzLl90ZXJtaW5hbC5lcnJvcignVW5rbm93biBDU0kgY29kZTogJywgeyBjb2xsZWN0OiBjb2xsZWN0LCBwYXJhbXM6IHBhcmFtcywgZmxhZzogU3RyaW5nLmZyb21DaGFyQ29kZShmbGFnKSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0RXNjSGFuZGxlckZhbGxiYWNrKGZ1bmN0aW9uIChjb2xsZWN0LCBmbGFnKSB7XG4gICAgICAgICAgICBfdGhpcy5fdGVybWluYWwuZXJyb3IoJ1Vua25vd24gRVNDIGNvZGU6ICcsIHsgY29sbGVjdDogY29sbGVjdCwgZmxhZzogU3RyaW5nLmZyb21DaGFyQ29kZShmbGFnKSB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0RXhlY3V0ZUhhbmRsZXJGYWxsYmFjayhmdW5jdGlvbiAoY29kZSkge1xuICAgICAgICAgICAgX3RoaXMuX3Rlcm1pbmFsLmVycm9yKCdVbmtub3duIEVYRUNVVEUgY29kZTogJywgeyBjb2RlOiBjb2RlIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRPc2NIYW5kbGVyRmFsbGJhY2soZnVuY3Rpb24gKGlkZW50aWZpZXIsIGRhdGEpIHtcbiAgICAgICAgICAgIF90aGlzLl90ZXJtaW5hbC5lcnJvcignVW5rbm93biBPU0MgY29kZTogJywgeyBpZGVudGlmaWVyOiBpZGVudGlmaWVyLCBkYXRhOiBkYXRhIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRQcmludEhhbmRsZXIoZnVuY3Rpb24gKGRhdGEsIHN0YXJ0LCBlbmQpIHsgcmV0dXJuIF90aGlzLnByaW50KGRhdGEsIHN0YXJ0LCBlbmQpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRDc2lIYW5kbGVyKCdAJywgZnVuY3Rpb24gKHBhcmFtcywgY29sbGVjdCkgeyByZXR1cm4gX3RoaXMuaW5zZXJ0Q2hhcnMocGFyYW1zKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0Q3NpSGFuZGxlcignQScsIGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHsgcmV0dXJuIF90aGlzLmN1cnNvclVwKHBhcmFtcyk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldENzaUhhbmRsZXIoJ0InLCBmdW5jdGlvbiAocGFyYW1zLCBjb2xsZWN0KSB7IHJldHVybiBfdGhpcy5jdXJzb3JEb3duKHBhcmFtcyk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldENzaUhhbmRsZXIoJ0MnLCBmdW5jdGlvbiAocGFyYW1zLCBjb2xsZWN0KSB7IHJldHVybiBfdGhpcy5jdXJzb3JGb3J3YXJkKHBhcmFtcyk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldENzaUhhbmRsZXIoJ0QnLCBmdW5jdGlvbiAocGFyYW1zLCBjb2xsZWN0KSB7IHJldHVybiBfdGhpcy5jdXJzb3JCYWNrd2FyZChwYXJhbXMpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRDc2lIYW5kbGVyKCdFJywgZnVuY3Rpb24gKHBhcmFtcywgY29sbGVjdCkgeyByZXR1cm4gX3RoaXMuY3Vyc29yTmV4dExpbmUocGFyYW1zKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0Q3NpSGFuZGxlcignRicsIGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHsgcmV0dXJuIF90aGlzLmN1cnNvclByZWNlZGluZ0xpbmUocGFyYW1zKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0Q3NpSGFuZGxlcignRycsIGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHsgcmV0dXJuIF90aGlzLmN1cnNvckNoYXJBYnNvbHV0ZShwYXJhbXMpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRDc2lIYW5kbGVyKCdIJywgZnVuY3Rpb24gKHBhcmFtcywgY29sbGVjdCkgeyByZXR1cm4gX3RoaXMuY3Vyc29yUG9zaXRpb24ocGFyYW1zKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0Q3NpSGFuZGxlcignSScsIGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHsgcmV0dXJuIF90aGlzLmN1cnNvckZvcndhcmRUYWIocGFyYW1zKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0Q3NpSGFuZGxlcignSicsIGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHsgcmV0dXJuIF90aGlzLmVyYXNlSW5EaXNwbGF5KHBhcmFtcyk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldENzaUhhbmRsZXIoJ0snLCBmdW5jdGlvbiAocGFyYW1zLCBjb2xsZWN0KSB7IHJldHVybiBfdGhpcy5lcmFzZUluTGluZShwYXJhbXMpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRDc2lIYW5kbGVyKCdMJywgZnVuY3Rpb24gKHBhcmFtcywgY29sbGVjdCkgeyByZXR1cm4gX3RoaXMuaW5zZXJ0TGluZXMocGFyYW1zKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0Q3NpSGFuZGxlcignTScsIGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHsgcmV0dXJuIF90aGlzLmRlbGV0ZUxpbmVzKHBhcmFtcyk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldENzaUhhbmRsZXIoJ1AnLCBmdW5jdGlvbiAocGFyYW1zLCBjb2xsZWN0KSB7IHJldHVybiBfdGhpcy5kZWxldGVDaGFycyhwYXJhbXMpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRDc2lIYW5kbGVyKCdTJywgZnVuY3Rpb24gKHBhcmFtcywgY29sbGVjdCkgeyByZXR1cm4gX3RoaXMuc2Nyb2xsVXAocGFyYW1zKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0Q3NpSGFuZGxlcignVCcsIGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHsgcmV0dXJuIF90aGlzLnNjcm9sbERvd24ocGFyYW1zLCBjb2xsZWN0KTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0Q3NpSGFuZGxlcignWCcsIGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHsgcmV0dXJuIF90aGlzLmVyYXNlQ2hhcnMocGFyYW1zKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0Q3NpSGFuZGxlcignWicsIGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHsgcmV0dXJuIF90aGlzLmN1cnNvckJhY2t3YXJkVGFiKHBhcmFtcyk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldENzaUhhbmRsZXIoJ2AnLCBmdW5jdGlvbiAocGFyYW1zLCBjb2xsZWN0KSB7IHJldHVybiBfdGhpcy5jaGFyUG9zQWJzb2x1dGUocGFyYW1zKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0Q3NpSGFuZGxlcignYScsIGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHsgcmV0dXJuIF90aGlzLmhQb3NpdGlvblJlbGF0aXZlKHBhcmFtcyk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldENzaUhhbmRsZXIoJ2InLCBmdW5jdGlvbiAocGFyYW1zLCBjb2xsZWN0KSB7IHJldHVybiBfdGhpcy5yZXBlYXRQcmVjZWRpbmdDaGFyYWN0ZXIocGFyYW1zKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0Q3NpSGFuZGxlcignYycsIGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHsgcmV0dXJuIF90aGlzLnNlbmREZXZpY2VBdHRyaWJ1dGVzKHBhcmFtcywgY29sbGVjdCk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldENzaUhhbmRsZXIoJ2QnLCBmdW5jdGlvbiAocGFyYW1zLCBjb2xsZWN0KSB7IHJldHVybiBfdGhpcy5saW5lUG9zQWJzb2x1dGUocGFyYW1zKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0Q3NpSGFuZGxlcignZScsIGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHsgcmV0dXJuIF90aGlzLnZQb3NpdGlvblJlbGF0aXZlKHBhcmFtcyk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldENzaUhhbmRsZXIoJ2YnLCBmdW5jdGlvbiAocGFyYW1zLCBjb2xsZWN0KSB7IHJldHVybiBfdGhpcy5oVlBvc2l0aW9uKHBhcmFtcyk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldENzaUhhbmRsZXIoJ2cnLCBmdW5jdGlvbiAocGFyYW1zLCBjb2xsZWN0KSB7IHJldHVybiBfdGhpcy50YWJDbGVhcihwYXJhbXMpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRDc2lIYW5kbGVyKCdoJywgZnVuY3Rpb24gKHBhcmFtcywgY29sbGVjdCkgeyByZXR1cm4gX3RoaXMuc2V0TW9kZShwYXJhbXMsIGNvbGxlY3QpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRDc2lIYW5kbGVyKCdsJywgZnVuY3Rpb24gKHBhcmFtcywgY29sbGVjdCkgeyByZXR1cm4gX3RoaXMucmVzZXRNb2RlKHBhcmFtcywgY29sbGVjdCk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldENzaUhhbmRsZXIoJ20nLCBmdW5jdGlvbiAocGFyYW1zLCBjb2xsZWN0KSB7IHJldHVybiBfdGhpcy5jaGFyQXR0cmlidXRlcyhwYXJhbXMpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRDc2lIYW5kbGVyKCduJywgZnVuY3Rpb24gKHBhcmFtcywgY29sbGVjdCkgeyByZXR1cm4gX3RoaXMuZGV2aWNlU3RhdHVzKHBhcmFtcywgY29sbGVjdCk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldENzaUhhbmRsZXIoJ3AnLCBmdW5jdGlvbiAocGFyYW1zLCBjb2xsZWN0KSB7IHJldHVybiBfdGhpcy5zb2Z0UmVzZXQocGFyYW1zLCBjb2xsZWN0KTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0Q3NpSGFuZGxlcigncScsIGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHsgcmV0dXJuIF90aGlzLnNldEN1cnNvclN0eWxlKHBhcmFtcywgY29sbGVjdCk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldENzaUhhbmRsZXIoJ3InLCBmdW5jdGlvbiAocGFyYW1zLCBjb2xsZWN0KSB7IHJldHVybiBfdGhpcy5zZXRTY3JvbGxSZWdpb24ocGFyYW1zLCBjb2xsZWN0KTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0Q3NpSGFuZGxlcigncycsIGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHsgcmV0dXJuIF90aGlzLnNhdmVDdXJzb3IocGFyYW1zKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0Q3NpSGFuZGxlcigndScsIGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHsgcmV0dXJuIF90aGlzLnJlc3RvcmVDdXJzb3IocGFyYW1zKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0RXhlY3V0ZUhhbmRsZXIoRXNjYXBlU2VxdWVuY2VzXzEuQzAuQkVMLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5iZWxsKCk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldEV4ZWN1dGVIYW5kbGVyKEVzY2FwZVNlcXVlbmNlc18xLkMwLkxGLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5saW5lRmVlZCgpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRFeGVjdXRlSGFuZGxlcihFc2NhcGVTZXF1ZW5jZXNfMS5DMC5WVCwgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMubGluZUZlZWQoKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0RXhlY3V0ZUhhbmRsZXIoRXNjYXBlU2VxdWVuY2VzXzEuQzAuRkYsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmxpbmVGZWVkKCk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldEV4ZWN1dGVIYW5kbGVyKEVzY2FwZVNlcXVlbmNlc18xLkMwLkNSLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5jYXJyaWFnZVJldHVybigpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRFeGVjdXRlSGFuZGxlcihFc2NhcGVTZXF1ZW5jZXNfMS5DMC5CUywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuYmFja3NwYWNlKCk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldEV4ZWN1dGVIYW5kbGVyKEVzY2FwZVNlcXVlbmNlc18xLkMwLkhULCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy50YWIoKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0RXhlY3V0ZUhhbmRsZXIoRXNjYXBlU2VxdWVuY2VzXzEuQzAuU08sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnNoaWZ0T3V0KCk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldEV4ZWN1dGVIYW5kbGVyKEVzY2FwZVNlcXVlbmNlc18xLkMwLlNJLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5zaGlmdEluKCk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldEV4ZWN1dGVIYW5kbGVyKEVzY2FwZVNlcXVlbmNlc18xLkMxLklORCwgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuaW5kZXgoKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0RXhlY3V0ZUhhbmRsZXIoRXNjYXBlU2VxdWVuY2VzXzEuQzEuTkVMLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5uZXh0TGluZSgpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRFeGVjdXRlSGFuZGxlcihFc2NhcGVTZXF1ZW5jZXNfMS5DMS5IVFMsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnRhYlNldCgpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRPc2NIYW5kbGVyKDAsIGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBfdGhpcy5zZXRUaXRsZShkYXRhKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0T3NjSGFuZGxlcigyLCBmdW5jdGlvbiAoZGF0YSkgeyByZXR1cm4gX3RoaXMuc2V0VGl0bGUoZGF0YSk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldEVzY0hhbmRsZXIoJzcnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5zYXZlQ3Vyc29yKFtdKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0RXNjSGFuZGxlcignOCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnJlc3RvcmVDdXJzb3IoW10pOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRFc2NIYW5kbGVyKCdEJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuaW5kZXgoKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0RXNjSGFuZGxlcignRScsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLm5leHRMaW5lKCk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldEVzY0hhbmRsZXIoJ0gnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy50YWJTZXQoKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0RXNjSGFuZGxlcignTScsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnJldmVyc2VJbmRleCgpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRFc2NIYW5kbGVyKCc9JywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMua2V5cGFkQXBwbGljYXRpb25Nb2RlKCk7IH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldEVzY0hhbmRsZXIoJz4nLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5rZXlwYWROdW1lcmljTW9kZSgpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRFc2NIYW5kbGVyKCdjJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMucmVzZXQoKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0RXNjSGFuZGxlcignbicsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnNldGdMZXZlbCgyKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0RXNjSGFuZGxlcignbycsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnNldGdMZXZlbCgzKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0RXNjSGFuZGxlcignfCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnNldGdMZXZlbCgzKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0RXNjSGFuZGxlcignfScsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnNldGdMZXZlbCgyKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0RXNjSGFuZGxlcignficsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnNldGdMZXZlbCgxKTsgfSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0RXNjSGFuZGxlcignJUAnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5zZWxlY3REZWZhdWx0Q2hhcnNldCgpOyB9KTtcbiAgICAgICAgX3RoaXMuX3BhcnNlci5zZXRFc2NIYW5kbGVyKCclRycsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnNlbGVjdERlZmF1bHRDaGFyc2V0KCk7IH0pO1xuICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChmbGFnKSB7XG4gICAgICAgICAgICB0aGlzXzEuX3BhcnNlci5zZXRFc2NIYW5kbGVyKCcoJyArIGZsYWcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnNlbGVjdENoYXJzZXQoJygnICsgZmxhZyk7IH0pO1xuICAgICAgICAgICAgdGhpc18xLl9wYXJzZXIuc2V0RXNjSGFuZGxlcignKScgKyBmbGFnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5zZWxlY3RDaGFyc2V0KCcpJyArIGZsYWcpOyB9KTtcbiAgICAgICAgICAgIHRoaXNfMS5fcGFyc2VyLnNldEVzY0hhbmRsZXIoJyonICsgZmxhZywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2VsZWN0Q2hhcnNldCgnKicgKyBmbGFnKTsgfSk7XG4gICAgICAgICAgICB0aGlzXzEuX3BhcnNlci5zZXRFc2NIYW5kbGVyKCcrJyArIGZsYWcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnNlbGVjdENoYXJzZXQoJysnICsgZmxhZyk7IH0pO1xuICAgICAgICAgICAgdGhpc18xLl9wYXJzZXIuc2V0RXNjSGFuZGxlcignLScgKyBmbGFnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5zZWxlY3RDaGFyc2V0KCctJyArIGZsYWcpOyB9KTtcbiAgICAgICAgICAgIHRoaXNfMS5fcGFyc2VyLnNldEVzY0hhbmRsZXIoJy4nICsgZmxhZywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc2VsZWN0Q2hhcnNldCgnLicgKyBmbGFnKTsgfSk7XG4gICAgICAgICAgICB0aGlzXzEuX3BhcnNlci5zZXRFc2NIYW5kbGVyKCcvJyArIGZsYWcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnNlbGVjdENoYXJzZXQoJy8nICsgZmxhZyk7IH0pO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgdGhpc18xID0gdGhpcztcbiAgICAgICAgZm9yICh2YXIgZmxhZyBpbiBDaGFyc2V0c18xLkNIQVJTRVRTKSB7XG4gICAgICAgICAgICBfbG9vcF8xKGZsYWcpO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0RXJyb3JIYW5kbGVyKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICAgICAgX3RoaXMuX3Rlcm1pbmFsLmVycm9yKCdQYXJzaW5nIGVycm9yOiAnLCBzdGF0ZSk7XG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICAgIH0pO1xuICAgICAgICBfdGhpcy5fcGFyc2VyLnNldERjc0hhbmRsZXIoJyRxJywgbmV3IERFQ1JRU1MoX3RoaXMuX3Rlcm1pbmFsKSk7XG4gICAgICAgIF90aGlzLl9wYXJzZXIuc2V0RGNzSGFuZGxlcignK3EnLCBuZXcgUmVxdWVzdFRlcm1pbmZvKF90aGlzLl90ZXJtaW5hbCkpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsID0gbnVsbDtcbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBpZiAoIXRoaXMuX3Rlcm1pbmFsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlcjtcbiAgICAgICAgdmFyIGN1cnNvclN0YXJ0WCA9IGJ1ZmZlci54O1xuICAgICAgICB2YXIgY3Vyc29yU3RhcnRZID0gYnVmZmVyLnk7XG4gICAgICAgIGlmICh0aGlzLl90ZXJtaW5hbC5kZWJ1Zykge1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwubG9nKCdkYXRhOiAnICsgZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3N1cnJvZ2F0ZUZpcnN0KSB7XG4gICAgICAgICAgICBkYXRhID0gdGhpcy5fc3Vycm9nYXRlRmlyc3QgKyBkYXRhO1xuICAgICAgICAgICAgdGhpcy5fc3Vycm9nYXRlRmlyc3QgPSAnJztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wYXJzZXIucGFyc2UoZGF0YSk7XG4gICAgICAgIGJ1ZmZlciA9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlcjtcbiAgICAgICAgaWYgKGJ1ZmZlci54ICE9PSBjdXJzb3JTdGFydFggfHwgYnVmZmVyLnkgIT09IGN1cnNvclN0YXJ0WSkge1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuZW1pdCgnY3Vyc29ybW92ZScpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLnByaW50ID0gZnVuY3Rpb24gKGRhdGEsIHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgdmFyIGNoYXI7XG4gICAgICAgIHZhciBjb2RlO1xuICAgICAgICB2YXIgY2hXaWR0aDtcbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlcjtcbiAgICAgICAgdmFyIGNoYXJzZXQgPSB0aGlzLl90ZXJtaW5hbC5jaGFyc2V0O1xuICAgICAgICB2YXIgc2NyZWVuUmVhZGVyTW9kZSA9IHRoaXMuX3Rlcm1pbmFsLm9wdGlvbnMuc2NyZWVuUmVhZGVyTW9kZTtcbiAgICAgICAgdmFyIGNvbHMgPSB0aGlzLl90ZXJtaW5hbC5jb2xzO1xuICAgICAgICB2YXIgd3JhcGFyb3VuZE1vZGUgPSB0aGlzLl90ZXJtaW5hbC53cmFwYXJvdW5kTW9kZTtcbiAgICAgICAgdmFyIGluc2VydE1vZGUgPSB0aGlzLl90ZXJtaW5hbC5pbnNlcnRNb2RlO1xuICAgICAgICB2YXIgY3VyQXR0ciA9IHRoaXMuX3Rlcm1pbmFsLmN1ckF0dHI7XG4gICAgICAgIHZhciBidWZmZXJSb3cgPSBidWZmZXIubGluZXMuZ2V0KGJ1ZmZlci55ICsgYnVmZmVyLnliYXNlKTtcbiAgICAgICAgdGhpcy5fdGVybWluYWwudXBkYXRlUmFuZ2UoYnVmZmVyLnkpO1xuICAgICAgICBmb3IgKHZhciBzdHJpbmdQb3NpdGlvbiA9IHN0YXJ0OyBzdHJpbmdQb3NpdGlvbiA8IGVuZDsgKytzdHJpbmdQb3NpdGlvbikge1xuICAgICAgICAgICAgY2hhciA9IGRhdGEuY2hhckF0KHN0cmluZ1Bvc2l0aW9uKTtcbiAgICAgICAgICAgIGNvZGUgPSBkYXRhLmNoYXJDb2RlQXQoc3RyaW5nUG9zaXRpb24pO1xuICAgICAgICAgICAgaWYgKDB4RDgwMCA8PSBjb2RlICYmIGNvZGUgPD0gMHhEQkZGKSB7XG4gICAgICAgICAgICAgICAgaWYgKCsrc3RyaW5nUG9zaXRpb24gPj0gZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N1cnJvZ2F0ZUZpcnN0ID0gY2hhcjtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBzZWNvbmQgPSBkYXRhLmNoYXJDb2RlQXQoc3RyaW5nUG9zaXRpb24pO1xuICAgICAgICAgICAgICAgIGlmICgweERDMDAgPD0gc2Vjb25kICYmIHNlY29uZCA8PSAweERGRkYpIHtcbiAgICAgICAgICAgICAgICAgICAgY29kZSA9IChjb2RlIC0gMHhEODAwKSAqIDB4NDAwICsgc2Vjb25kIC0gMHhEQzAwICsgMHgxMDAwMDtcbiAgICAgICAgICAgICAgICAgICAgY2hhciArPSBkYXRhLmNoYXJBdChzdHJpbmdQb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdHJpbmdQb3NpdGlvbi0tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoV2lkdGggPSBDaGFyV2lkdGhfMS53Y3dpZHRoKGNvZGUpO1xuICAgICAgICAgICAgaWYgKGNoYXJzZXQpIHtcbiAgICAgICAgICAgICAgICBjaGFyID0gY2hhcnNldFtjaGFyXSB8fCBjaGFyO1xuICAgICAgICAgICAgICAgIGNvZGUgPSBjaGFyLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2NyZWVuUmVhZGVyTW9kZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmVtaXQoJ2ExMXkuY2hhcicsIGNoYXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFjaFdpZHRoICYmIGJ1ZmZlci54KSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoTWludXNPbmUgPSBidWZmZXJSb3cuZ2V0KGJ1ZmZlci54IC0gMSk7XG4gICAgICAgICAgICAgICAgaWYgKGNoTWludXNPbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjaE1pbnVzT25lW0J1ZmZlcl8xLkNIQVJfREFUQV9XSURUSF9JTkRFWF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaE1pbnVzVHdvID0gYnVmZmVyUm93LmdldChidWZmZXIueCAtIDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoTWludXNUd28pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaE1pbnVzVHdvW0J1ZmZlcl8xLkNIQVJfREFUQV9DSEFSX0lOREVYXSArPSBjaGFyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoTWludXNUd29bQnVmZmVyXzEuQ0hBUl9EQVRBX0NPREVfSU5ERVhdID0gY29kZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJSb3cuc2V0KGJ1ZmZlci54IC0gMiwgY2hNaW51c1R3byk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaE1pbnVzT25lW0J1ZmZlcl8xLkNIQVJfREFUQV9DSEFSX0lOREVYXSArPSBjaGFyO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hNaW51c09uZVtCdWZmZXJfMS5DSEFSX0RBVEFfQ09ERV9JTkRFWF0gPSBjb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyUm93LnNldChidWZmZXIueCAtIDEsIGNoTWludXNPbmUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJ1ZmZlci54ICsgY2hXaWR0aCAtIDEgPj0gY29scykge1xuICAgICAgICAgICAgICAgIGlmICh3cmFwYXJvdW5kTW9kZSkge1xuICAgICAgICAgICAgICAgICAgICBidWZmZXIueCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlci55Kys7XG4gICAgICAgICAgICAgICAgICAgIGlmIChidWZmZXIueSA+IGJ1ZmZlci5zY3JvbGxCb3R0b20pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlci55LS07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5zY3JvbGwodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXIubGluZXMuZ2V0KGJ1ZmZlci55KS5pc1dyYXBwZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlclJvdyA9IGJ1ZmZlci5saW5lcy5nZXQoYnVmZmVyLnkgKyBidWZmZXIueWJhc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoV2lkdGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGluc2VydE1vZGUpIHtcbiAgICAgICAgICAgICAgICBidWZmZXJSb3cuaW5zZXJ0Q2VsbHMoYnVmZmVyLngsIGNoV2lkdGgsIFtjdXJBdHRyLCBCdWZmZXJfMS5OVUxMX0NFTExfQ0hBUiwgQnVmZmVyXzEuTlVMTF9DRUxMX1dJRFRILCBCdWZmZXJfMS5OVUxMX0NFTExfQ09ERV0pO1xuICAgICAgICAgICAgICAgIHZhciBsYXN0Q2VsbCA9IGJ1ZmZlclJvdy5nZXQoY29scyAtIDEpO1xuICAgICAgICAgICAgICAgIGlmIChsYXN0Q2VsbFtCdWZmZXJfMS5DSEFSX0RBVEFfV0lEVEhfSU5ERVhdID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlclJvdy5zZXQoY29scyAtIDEsIFtjdXJBdHRyLCBCdWZmZXJfMS5OVUxMX0NFTExfQ0hBUiwgQnVmZmVyXzEuTlVMTF9DRUxMX1dJRFRILCBCdWZmZXJfMS5OVUxMX0NFTExfQ09ERV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ1ZmZlclJvdy5zZXQoYnVmZmVyLngrKywgW2N1ckF0dHIsIGNoYXIsIGNoV2lkdGgsIGNvZGVdKTtcbiAgICAgICAgICAgIGlmIChjaFdpZHRoID4gMCkge1xuICAgICAgICAgICAgICAgIHdoaWxlICgtLWNoV2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyUm93LnNldChidWZmZXIueCsrLCBbY3VyQXR0ciwgJycsIDAsIHVuZGVmaW5lZF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90ZXJtaW5hbC51cGRhdGVSYW5nZShidWZmZXIueSk7XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLmJlbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJlbGwoKTtcbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUubGluZUZlZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLl90ZXJtaW5hbC5idWZmZXI7XG4gICAgICAgIGlmICh0aGlzLl90ZXJtaW5hbC5vcHRpb25zLmNvbnZlcnRFb2wpIHtcbiAgICAgICAgICAgIGJ1ZmZlci54ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBidWZmZXIueSsrO1xuICAgICAgICBpZiAoYnVmZmVyLnkgPiBidWZmZXIuc2Nyb2xsQm90dG9tKSB7XG4gICAgICAgICAgICBidWZmZXIueS0tO1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuc2Nyb2xsKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJ1ZmZlci54ID49IHRoaXMuX3Rlcm1pbmFsLmNvbHMpIHtcbiAgICAgICAgICAgIGJ1ZmZlci54LS07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdGVybWluYWwuZW1pdCgnbGluZWZlZWQnKTtcbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUuY2FycmlhZ2VSZXR1cm4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci54ID0gMDtcbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUuYmFja3NwYWNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fdGVybWluYWwuYnVmZmVyLnggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIueC0tO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLnRhYiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9yaWdpbmFsWCA9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci54O1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIueCA9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci5uZXh0U3RvcCgpO1xuICAgICAgICBpZiAodGhpcy5fdGVybWluYWwub3B0aW9ucy5zY3JlZW5SZWFkZXJNb2RlKSB7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5lbWl0KCdhMTF5LnRhYicsIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci54IC0gb3JpZ2luYWxYKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5zaGlmdE91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fdGVybWluYWwuc2V0Z0xldmVsKDEpO1xuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5zaGlmdEluID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5zZXRnTGV2ZWwoMCk7XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLmluc2VydENoYXJzID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIubGluZXMuZ2V0KHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ICsgdGhpcy5fdGVybWluYWwuYnVmZmVyLnliYXNlKS5pbnNlcnRDZWxscyh0aGlzLl90ZXJtaW5hbC5idWZmZXIueCwgcGFyYW1zWzBdIHx8IDEsIFt0aGlzLl90ZXJtaW5hbC5lcmFzZUF0dHIoKSwgQnVmZmVyXzEuTlVMTF9DRUxMX0NIQVIsIEJ1ZmZlcl8xLk5VTExfQ0VMTF9XSURUSCwgQnVmZmVyXzEuTlVMTF9DRUxMX0NPREVdKTtcbiAgICAgICAgdGhpcy5fdGVybWluYWwudXBkYXRlUmFuZ2UodGhpcy5fdGVybWluYWwuYnVmZmVyLnkpO1xuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5jdXJzb3JVcCA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgdmFyIHBhcmFtID0gcGFyYW1zWzBdO1xuICAgICAgICBpZiAocGFyYW0gPCAxKSB7XG4gICAgICAgICAgICBwYXJhbSA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnkgLT0gcGFyYW07XG4gICAgICAgIGlmICh0aGlzLl90ZXJtaW5hbC5idWZmZXIueSA8IDApIHtcbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ID0gMDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5jdXJzb3JEb3duID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICB2YXIgcGFyYW0gPSBwYXJhbXNbMF07XG4gICAgICAgIGlmIChwYXJhbSA8IDEpIHtcbiAgICAgICAgICAgIHBhcmFtID0gMTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIueSArPSBwYXJhbTtcbiAgICAgICAgaWYgKHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ID49IHRoaXMuX3Rlcm1pbmFsLnJvd3MpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ID0gdGhpcy5fdGVybWluYWwucm93cyAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci54ID49IHRoaXMuX3Rlcm1pbmFsLmNvbHMpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci54LS07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUuY3Vyc29yRm9yd2FyZCA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgdmFyIHBhcmFtID0gcGFyYW1zWzBdO1xuICAgICAgICBpZiAocGFyYW0gPCAxKSB7XG4gICAgICAgICAgICBwYXJhbSA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnggKz0gcGFyYW07XG4gICAgICAgIGlmICh0aGlzLl90ZXJtaW5hbC5idWZmZXIueCA+PSB0aGlzLl90ZXJtaW5hbC5jb2xzKSB7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIueCA9IHRoaXMuX3Rlcm1pbmFsLmNvbHMgLSAxO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLmN1cnNvckJhY2t3YXJkID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICB2YXIgcGFyYW0gPSBwYXJhbXNbMF07XG4gICAgICAgIGlmIChwYXJhbSA8IDEpIHtcbiAgICAgICAgICAgIHBhcmFtID0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fdGVybWluYWwuYnVmZmVyLnggPj0gdGhpcy5fdGVybWluYWwuY29scykge1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLngtLTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIueCAtPSBwYXJhbTtcbiAgICAgICAgaWYgKHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci54IDwgMCkge1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnggPSAwO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLmN1cnNvck5leHRMaW5lID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICB2YXIgcGFyYW0gPSBwYXJhbXNbMF07XG4gICAgICAgIGlmIChwYXJhbSA8IDEpIHtcbiAgICAgICAgICAgIHBhcmFtID0gMTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIueSArPSBwYXJhbTtcbiAgICAgICAgaWYgKHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ID49IHRoaXMuX3Rlcm1pbmFsLnJvd3MpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ID0gdGhpcy5fdGVybWluYWwucm93cyAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnggPSAwO1xuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5jdXJzb3JQcmVjZWRpbmdMaW5lID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICB2YXIgcGFyYW0gPSBwYXJhbXNbMF07XG4gICAgICAgIGlmIChwYXJhbSA8IDEpIHtcbiAgICAgICAgICAgIHBhcmFtID0gMTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIueSAtPSBwYXJhbTtcbiAgICAgICAgaWYgKHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55IDwgMCkge1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci54ID0gMDtcbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUuY3Vyc29yQ2hhckFic29sdXRlID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICB2YXIgcGFyYW0gPSBwYXJhbXNbMF07XG4gICAgICAgIGlmIChwYXJhbSA8IDEpIHtcbiAgICAgICAgICAgIHBhcmFtID0gMTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIueCA9IHBhcmFtIC0gMTtcbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUuY3Vyc29yUG9zaXRpb24gPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIHZhciBjb2w7XG4gICAgICAgIHZhciByb3cgPSBwYXJhbXNbMF0gLSAxO1xuICAgICAgICBpZiAocGFyYW1zLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgICAgICBjb2wgPSBwYXJhbXNbMV0gLSAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29sID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocm93IDwgMCkge1xuICAgICAgICAgICAgcm93ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChyb3cgPj0gdGhpcy5fdGVybWluYWwucm93cykge1xuICAgICAgICAgICAgcm93ID0gdGhpcy5fdGVybWluYWwucm93cyAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbCA8IDApIHtcbiAgICAgICAgICAgIGNvbCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY29sID49IHRoaXMuX3Rlcm1pbmFsLmNvbHMpIHtcbiAgICAgICAgICAgIGNvbCA9IHRoaXMuX3Rlcm1pbmFsLmNvbHMgLSAxO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci54ID0gY29sO1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIueSA9IHJvdztcbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUuY3Vyc29yRm9yd2FyZFRhYiA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgdmFyIHBhcmFtID0gcGFyYW1zWzBdIHx8IDE7XG4gICAgICAgIHdoaWxlIChwYXJhbS0tKSB7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIueCA9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci5uZXh0U3RvcCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLl9lcmFzZUluQnVmZmVyTGluZSA9IGZ1bmN0aW9uICh5LCBzdGFydCwgZW5kLCBjbGVhcldyYXApIHtcbiAgICAgICAgaWYgKGNsZWFyV3JhcCA9PT0gdm9pZCAwKSB7IGNsZWFyV3JhcCA9IGZhbHNlOyB9XG4gICAgICAgIHZhciBsaW5lID0gdGhpcy5fdGVybWluYWwuYnVmZmVyLmxpbmVzLmdldCh0aGlzLl90ZXJtaW5hbC5idWZmZXIueWJhc2UgKyB5KTtcbiAgICAgICAgbGluZS5yZXBsYWNlQ2VsbHMoc3RhcnQsIGVuZCwgW3RoaXMuX3Rlcm1pbmFsLmVyYXNlQXR0cigpLCBCdWZmZXJfMS5OVUxMX0NFTExfQ0hBUiwgQnVmZmVyXzEuTlVMTF9DRUxMX1dJRFRILCBCdWZmZXJfMS5OVUxMX0NFTExfQ09ERV0pO1xuICAgICAgICBpZiAoY2xlYXJXcmFwKSB7XG4gICAgICAgICAgICBsaW5lLmlzV3JhcHBlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLl9yZXNldEJ1ZmZlckxpbmUgPSBmdW5jdGlvbiAoeSkge1xuICAgICAgICB0aGlzLl9lcmFzZUluQnVmZmVyTGluZSh5LCAwLCB0aGlzLl90ZXJtaW5hbC5jb2xzLCB0cnVlKTtcbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUuZXJhc2VJbkRpc3BsYXkgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIHZhciBqO1xuICAgICAgICBzd2l0Y2ggKHBhcmFtc1swXSkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGogPSB0aGlzLl90ZXJtaW5hbC5idWZmZXIueTtcbiAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC51cGRhdGVSYW5nZShqKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcmFzZUluQnVmZmVyTGluZShqKyssIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci54LCB0aGlzLl90ZXJtaW5hbC5jb2xzLCB0aGlzLl90ZXJtaW5hbC5idWZmZXIueCA9PT0gMCk7XG4gICAgICAgICAgICAgICAgZm9yICg7IGogPCB0aGlzLl90ZXJtaW5hbC5yb3dzOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVzZXRCdWZmZXJMaW5lKGopO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC51cGRhdGVSYW5nZShqKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBqID0gdGhpcy5fdGVybWluYWwuYnVmZmVyLnk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwudXBkYXRlUmFuZ2Uoaik7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJhc2VJbkJ1ZmZlckxpbmUoaiwgMCwgdGhpcy5fdGVybWluYWwuYnVmZmVyLnggKyAxLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdGVybWluYWwuYnVmZmVyLnggKyAxID49IHRoaXMuX3Rlcm1pbmFsLmNvbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLmxpbmVzLmdldChqICsgMSkuaXNXcmFwcGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdoaWxlIChqLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVzZXRCdWZmZXJMaW5lKGopO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC51cGRhdGVSYW5nZSgwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBqID0gdGhpcy5fdGVybWluYWwucm93cztcbiAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC51cGRhdGVSYW5nZShqIC0gMSk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGotLSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXNldEJ1ZmZlckxpbmUoaik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLnVwZGF0ZVJhbmdlKDApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIHZhciBzY3JvbGxCYWNrU2l6ZSA9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci5saW5lcy5sZW5ndGggLSB0aGlzLl90ZXJtaW5hbC5yb3dzO1xuICAgICAgICAgICAgICAgIGlmIChzY3JvbGxCYWNrU2l6ZSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLmxpbmVzLnRyaW1TdGFydChzY3JvbGxCYWNrU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55YmFzZSA9IE1hdGgubWF4KHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55YmFzZSAtIHNjcm9sbEJhY2tTaXplLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnlkaXNwID0gTWF0aC5tYXgodGhpcy5fdGVybWluYWwuYnVmZmVyLnlkaXNwIC0gc2Nyb2xsQmFja1NpemUsIDApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5lbWl0KCdzY3JvbGwnLCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUuZXJhc2VJbkxpbmUgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIHN3aXRjaCAocGFyYW1zWzBdKSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJhc2VJbkJ1ZmZlckxpbmUodGhpcy5fdGVybWluYWwuYnVmZmVyLnksIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci54LCB0aGlzLl90ZXJtaW5hbC5jb2xzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICB0aGlzLl9lcmFzZUluQnVmZmVyTGluZSh0aGlzLl90ZXJtaW5hbC5idWZmZXIueSwgMCwgdGhpcy5fdGVybWluYWwuYnVmZmVyLnggKyAxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICB0aGlzLl9lcmFzZUluQnVmZmVyTGluZSh0aGlzLl90ZXJtaW5hbC5idWZmZXIueSwgMCwgdGhpcy5fdGVybWluYWwuY29scyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdGVybWluYWwudXBkYXRlUmFuZ2UodGhpcy5fdGVybWluYWwuYnVmZmVyLnkpO1xuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5pbnNlcnRMaW5lcyA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgdmFyIHBhcmFtID0gcGFyYW1zWzBdO1xuICAgICAgICBpZiAocGFyYW0gPCAxKSB7XG4gICAgICAgICAgICBwYXJhbSA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlcjtcbiAgICAgICAgdmFyIHJvdyA9IGJ1ZmZlci55ICsgYnVmZmVyLnliYXNlO1xuICAgICAgICB2YXIgc2Nyb2xsQm90dG9tUm93c09mZnNldCA9IHRoaXMuX3Rlcm1pbmFsLnJvd3MgLSAxIC0gYnVmZmVyLnNjcm9sbEJvdHRvbTtcbiAgICAgICAgdmFyIHNjcm9sbEJvdHRvbUFic29sdXRlID0gdGhpcy5fdGVybWluYWwucm93cyAtIDEgKyBidWZmZXIueWJhc2UgLSBzY3JvbGxCb3R0b21Sb3dzT2Zmc2V0ICsgMTtcbiAgICAgICAgd2hpbGUgKHBhcmFtLS0pIHtcbiAgICAgICAgICAgIGJ1ZmZlci5saW5lcy5zcGxpY2Uoc2Nyb2xsQm90dG9tQWJzb2x1dGUgLSAxLCAxKTtcbiAgICAgICAgICAgIGJ1ZmZlci5saW5lcy5zcGxpY2Uocm93LCAwLCBidWZmZXIuZ2V0QmxhbmtMaW5lKHRoaXMuX3Rlcm1pbmFsLmVyYXNlQXR0cigpKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdGVybWluYWwudXBkYXRlUmFuZ2UoYnVmZmVyLnkpO1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC51cGRhdGVSYW5nZShidWZmZXIuc2Nyb2xsQm90dG9tKTtcbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUuZGVsZXRlTGluZXMgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIHZhciBwYXJhbSA9IHBhcmFtc1swXTtcbiAgICAgICAgaWYgKHBhcmFtIDwgMSkge1xuICAgICAgICAgICAgcGFyYW0gPSAxO1xuICAgICAgICB9XG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLl90ZXJtaW5hbC5idWZmZXI7XG4gICAgICAgIHZhciByb3cgPSBidWZmZXIueSArIGJ1ZmZlci55YmFzZTtcbiAgICAgICAgdmFyIGo7XG4gICAgICAgIGogPSB0aGlzLl90ZXJtaW5hbC5yb3dzIC0gMSAtIGJ1ZmZlci5zY3JvbGxCb3R0b207XG4gICAgICAgIGogPSB0aGlzLl90ZXJtaW5hbC5yb3dzIC0gMSArIGJ1ZmZlci55YmFzZSAtIGo7XG4gICAgICAgIHdoaWxlIChwYXJhbS0tKSB7XG4gICAgICAgICAgICBidWZmZXIubGluZXMuc3BsaWNlKHJvdywgMSk7XG4gICAgICAgICAgICBidWZmZXIubGluZXMuc3BsaWNlKGosIDAsIGJ1ZmZlci5nZXRCbGFua0xpbmUodGhpcy5fdGVybWluYWwuZXJhc2VBdHRyKCkpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90ZXJtaW5hbC51cGRhdGVSYW5nZShidWZmZXIueSk7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLnVwZGF0ZVJhbmdlKGJ1ZmZlci5zY3JvbGxCb3R0b20pO1xuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5kZWxldGVDaGFycyA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLmxpbmVzLmdldCh0aGlzLl90ZXJtaW5hbC5idWZmZXIueSArIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55YmFzZSkuZGVsZXRlQ2VsbHModGhpcy5fdGVybWluYWwuYnVmZmVyLngsIHBhcmFtc1swXSB8fCAxLCBbdGhpcy5fdGVybWluYWwuZXJhc2VBdHRyKCksIEJ1ZmZlcl8xLk5VTExfQ0VMTF9DSEFSLCBCdWZmZXJfMS5OVUxMX0NFTExfV0lEVEgsIEJ1ZmZlcl8xLk5VTExfQ0VMTF9DT0RFXSk7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLnVwZGF0ZVJhbmdlKHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55KTtcbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUuc2Nyb2xsVXAgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIHZhciBwYXJhbSA9IHBhcmFtc1swXSB8fCAxO1xuICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5fdGVybWluYWwuYnVmZmVyO1xuICAgICAgICB3aGlsZSAocGFyYW0tLSkge1xuICAgICAgICAgICAgYnVmZmVyLmxpbmVzLnNwbGljZShidWZmZXIueWJhc2UgKyBidWZmZXIuc2Nyb2xsVG9wLCAxKTtcbiAgICAgICAgICAgIGJ1ZmZlci5saW5lcy5zcGxpY2UoYnVmZmVyLnliYXNlICsgYnVmZmVyLnNjcm9sbEJvdHRvbSwgMCwgYnVmZmVyLmdldEJsYW5rTGluZShCdWZmZXJfMS5ERUZBVUxUX0FUVFIpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90ZXJtaW5hbC51cGRhdGVSYW5nZShidWZmZXIuc2Nyb2xsVG9wKTtcbiAgICAgICAgdGhpcy5fdGVybWluYWwudXBkYXRlUmFuZ2UoYnVmZmVyLnNjcm9sbEJvdHRvbSk7XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLnNjcm9sbERvd24gPSBmdW5jdGlvbiAocGFyYW1zLCBjb2xsZWN0KSB7XG4gICAgICAgIGlmIChwYXJhbXMubGVuZ3RoIDwgMiAmJiAhY29sbGVjdCkge1xuICAgICAgICAgICAgdmFyIHBhcmFtID0gcGFyYW1zWzBdIHx8IDE7XG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5fdGVybWluYWwuYnVmZmVyO1xuICAgICAgICAgICAgd2hpbGUgKHBhcmFtLS0pIHtcbiAgICAgICAgICAgICAgICBidWZmZXIubGluZXMuc3BsaWNlKGJ1ZmZlci55YmFzZSArIGJ1ZmZlci5zY3JvbGxCb3R0b20sIDEpO1xuICAgICAgICAgICAgICAgIGJ1ZmZlci5saW5lcy5zcGxpY2UoYnVmZmVyLnliYXNlICsgYnVmZmVyLnNjcm9sbEJvdHRvbSwgMCwgYnVmZmVyLmdldEJsYW5rTGluZShCdWZmZXJfMS5ERUZBVUxUX0FUVFIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLnVwZGF0ZVJhbmdlKGJ1ZmZlci5zY3JvbGxUb3ApO1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwudXBkYXRlUmFuZ2UoYnVmZmVyLnNjcm9sbEJvdHRvbSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUuZXJhc2VDaGFycyA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLmxpbmVzLmdldCh0aGlzLl90ZXJtaW5hbC5idWZmZXIueSArIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55YmFzZSkucmVwbGFjZUNlbGxzKHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci54LCB0aGlzLl90ZXJtaW5hbC5idWZmZXIueCArIChwYXJhbXNbMF0gfHwgMSksIFt0aGlzLl90ZXJtaW5hbC5lcmFzZUF0dHIoKSwgQnVmZmVyXzEuTlVMTF9DRUxMX0NIQVIsIEJ1ZmZlcl8xLk5VTExfQ0VMTF9XSURUSCwgQnVmZmVyXzEuTlVMTF9DRUxMX0NPREVdKTtcbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUuY3Vyc29yQmFja3dhcmRUYWIgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIHZhciBwYXJhbSA9IHBhcmFtc1swXSB8fCAxO1xuICAgICAgICB2YXIgYnVmZmVyID0gdGhpcy5fdGVybWluYWwuYnVmZmVyO1xuICAgICAgICB3aGlsZSAocGFyYW0tLSkge1xuICAgICAgICAgICAgYnVmZmVyLnggPSBidWZmZXIucHJldlN0b3AoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5jaGFyUG9zQWJzb2x1dGUgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIHZhciBwYXJhbSA9IHBhcmFtc1swXTtcbiAgICAgICAgaWYgKHBhcmFtIDwgMSkge1xuICAgICAgICAgICAgcGFyYW0gPSAxO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci54ID0gcGFyYW0gLSAxO1xuICAgICAgICBpZiAodGhpcy5fdGVybWluYWwuYnVmZmVyLnggPj0gdGhpcy5fdGVybWluYWwuY29scykge1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnggPSB0aGlzLl90ZXJtaW5hbC5jb2xzIC0gMTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5oUG9zaXRpb25SZWxhdGl2ZSA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgdmFyIHBhcmFtID0gcGFyYW1zWzBdO1xuICAgICAgICBpZiAocGFyYW0gPCAxKSB7XG4gICAgICAgICAgICBwYXJhbSA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnggKz0gcGFyYW07XG4gICAgICAgIGlmICh0aGlzLl90ZXJtaW5hbC5idWZmZXIueCA+PSB0aGlzLl90ZXJtaW5hbC5jb2xzKSB7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIueCA9IHRoaXMuX3Rlcm1pbmFsLmNvbHMgLSAxO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLnJlcGVhdFByZWNlZGluZ0NoYXJhY3RlciA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlcjtcbiAgICAgICAgdmFyIGxpbmUgPSBidWZmZXIubGluZXMuZ2V0KGJ1ZmZlci55YmFzZSArIGJ1ZmZlci55KTtcbiAgICAgICAgbGluZS5yZXBsYWNlQ2VsbHMoYnVmZmVyLngsIGJ1ZmZlci54ICsgKHBhcmFtc1swXSB8fCAxKSwgbGluZS5nZXQoYnVmZmVyLnggLSAxKSB8fCBbQnVmZmVyXzEuREVGQVVMVF9BVFRSLCBCdWZmZXJfMS5OVUxMX0NFTExfQ0hBUiwgQnVmZmVyXzEuTlVMTF9DRUxMX1dJRFRILCBCdWZmZXJfMS5OVUxMX0NFTExfQ09ERV0pO1xuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5zZW5kRGV2aWNlQXR0cmlidXRlcyA9IGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHtcbiAgICAgICAgaWYgKHBhcmFtc1swXSA+IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNvbGxlY3QpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl90ZXJtaW5hbC5pcygneHRlcm0nKSB8fCB0aGlzLl90ZXJtaW5hbC5pcygncnh2dC11bmljb2RlJykgfHwgdGhpcy5fdGVybWluYWwuaXMoJ3NjcmVlbicpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuaGFuZGxlcihFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnWz8xOzJjJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl90ZXJtaW5hbC5pcygnbGludXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmhhbmRsZXIoRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1s/NmMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb2xsZWN0ID09PSAnPicpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl90ZXJtaW5hbC5pcygneHRlcm0nKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmhhbmRsZXIoRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1s+MDsyNzY7MGMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3Rlcm1pbmFsLmlzKCdyeHZ0LXVuaWNvZGUnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmhhbmRsZXIoRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1s+ODU7OTU7MGMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuX3Rlcm1pbmFsLmlzKCdsaW51eCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuaGFuZGxlcihwYXJhbXNbMF0gKyAnYycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fdGVybWluYWwuaXMoJ3NjcmVlbicpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuaGFuZGxlcihFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnWz44Mzs0MDAwMzswYycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLmxpbmVQb3NBYnNvbHV0ZSA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgdmFyIHBhcmFtID0gcGFyYW1zWzBdO1xuICAgICAgICBpZiAocGFyYW0gPCAxKSB7XG4gICAgICAgICAgICBwYXJhbSA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnkgPSBwYXJhbSAtIDE7XG4gICAgICAgIGlmICh0aGlzLl90ZXJtaW5hbC5idWZmZXIueSA+PSB0aGlzLl90ZXJtaW5hbC5yb3dzKSB7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIueSA9IHRoaXMuX3Rlcm1pbmFsLnJvd3MgLSAxO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLnZQb3NpdGlvblJlbGF0aXZlID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICB2YXIgcGFyYW0gPSBwYXJhbXNbMF07XG4gICAgICAgIGlmIChwYXJhbSA8IDEpIHtcbiAgICAgICAgICAgIHBhcmFtID0gMTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIueSArPSBwYXJhbTtcbiAgICAgICAgaWYgKHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ID49IHRoaXMuX3Rlcm1pbmFsLnJvd3MpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ID0gdGhpcy5fdGVybWluYWwucm93cyAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci54ID49IHRoaXMuX3Rlcm1pbmFsLmNvbHMpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci54LS07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUuaFZQb3NpdGlvbiA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgaWYgKHBhcmFtc1swXSA8IDEpXG4gICAgICAgICAgICBwYXJhbXNbMF0gPSAxO1xuICAgICAgICBpZiAocGFyYW1zWzFdIDwgMSlcbiAgICAgICAgICAgIHBhcmFtc1sxXSA9IDE7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ID0gcGFyYW1zWzBdIC0gMTtcbiAgICAgICAgaWYgKHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ID49IHRoaXMuX3Rlcm1pbmFsLnJvd3MpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ID0gdGhpcy5fdGVybWluYWwucm93cyAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnggPSBwYXJhbXNbMV0gLSAxO1xuICAgICAgICBpZiAodGhpcy5fdGVybWluYWwuYnVmZmVyLnggPj0gdGhpcy5fdGVybWluYWwuY29scykge1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnggPSB0aGlzLl90ZXJtaW5hbC5jb2xzIC0gMTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS50YWJDbGVhciA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgdmFyIHBhcmFtID0gcGFyYW1zWzBdO1xuICAgICAgICBpZiAocGFyYW0gPD0gMCkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci50YWJzW3RoaXMuX3Rlcm1pbmFsLmJ1ZmZlci54XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwYXJhbSA9PT0gMykge1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnRhYnMgPSB7fTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5zZXRNb2RlID0gZnVuY3Rpb24gKHBhcmFtcywgY29sbGVjdCkge1xuICAgICAgICBpZiAocGFyYW1zLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyYW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRNb2RlKFtwYXJhbXNbaV1dKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNvbGxlY3QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGFyYW1zWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5pbnNlcnRNb2RlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyMDpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY29sbGVjdCA9PT0gJz8nKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBhcmFtc1swXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuYXBwbGljYXRpb25DdXJzb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLnNldGdDaGFyc2V0KDAsIENoYXJzZXRzXzEuREVGQVVMVF9DSEFSU0VUKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuc2V0Z0NoYXJzZXQoMSwgQ2hhcnNldHNfMS5ERUZBVUxUX0NIQVJTRVQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5zZXRnQ2hhcnNldCgyLCBDaGFyc2V0c18xLkRFRkFVTFRfQ0hBUlNFVCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLnNldGdDaGFyc2V0KDMsIENoYXJzZXRzXzEuREVGQVVMVF9DSEFSU0VUKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5zYXZlZENvbHMgPSB0aGlzLl90ZXJtaW5hbC5jb2xzO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5yZXNpemUoMTMyLCB0aGlzLl90ZXJtaW5hbC5yb3dzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5vcmlnaW5Nb2RlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC53cmFwYXJvdW5kTW9kZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTI6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNjY6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmxvZygnU2VyaWFsIHBvcnQgcmVxdWVzdGVkIGFwcGxpY2F0aW9uIGtleXBhZC4nKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuYXBwbGljYXRpb25LZXlwYWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdGVybWluYWwudmlld3BvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLnZpZXdwb3J0LnN5bmNTY3JvbGxBcmVhKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgIGNhc2UgMTAwMDpcbiAgICAgICAgICAgICAgICBjYXNlIDEwMDI6XG4gICAgICAgICAgICAgICAgY2FzZSAxMDAzOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC54MTBNb3VzZSA9IHBhcmFtc1swXSA9PT0gOTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwudnQyMDBNb3VzZSA9IHBhcmFtc1swXSA9PT0gMTAwMDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwubm9ybWFsTW91c2UgPSBwYXJhbXNbMF0gPiAxMDAwO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5tb3VzZUV2ZW50cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZW5hYmxlLW1vdXNlLWV2ZW50cycpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5zZWxlY3Rpb25NYW5hZ2VyLmRpc2FibGUoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwubG9nKCdCaW5kaW5nIHRvIG1vdXNlIGV2ZW50cy4nKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMDA0OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5zZW5kRm9jdXMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEwMDU6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLnV0Zk1vdXNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMDA2OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5zZ3JNb3VzZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTAxNTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwudXJ4dnRNb3VzZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjU6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmN1cnNvckhpZGRlbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEwNDg6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZUN1cnNvcihwYXJhbXMpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEwNDk6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZUN1cnNvcihwYXJhbXMpO1xuICAgICAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgICAgY2FzZSAxMDQ3OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXJzLmFjdGl2YXRlQWx0QnVmZmVyKHRoaXMuX3Rlcm1pbmFsLmVyYXNlQXR0cigpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwucmVmcmVzaCgwLCB0aGlzLl90ZXJtaW5hbC5yb3dzIC0gMSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl90ZXJtaW5hbC52aWV3cG9ydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwudmlld3BvcnQuc3luY1Njcm9sbEFyZWEoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5zaG93Q3Vyc29yKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjAwNDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuYnJhY2tldGVkUGFzdGVNb2RlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUucmVzZXRNb2RlID0gZnVuY3Rpb24gKHBhcmFtcywgY29sbGVjdCkge1xuICAgICAgICBpZiAocGFyYW1zLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyYW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNldE1vZGUoW3BhcmFtc1tpXV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY29sbGVjdCkge1xuICAgICAgICAgICAgc3dpdGNoIChwYXJhbXNbMF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmluc2VydE1vZGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyMDpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY29sbGVjdCA9PT0gJz8nKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBhcmFtc1swXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuYXBwbGljYXRpb25DdXJzb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdGVybWluYWwuY29scyA9PT0gMTMyICYmIHRoaXMuX3Rlcm1pbmFsLnNhdmVkQ29scykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwucmVzaXplKHRoaXMuX3Rlcm1pbmFsLnNhdmVkQ29scywgdGhpcy5fdGVybWluYWwucm93cyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3Rlcm1pbmFsLnNhdmVkQ29scztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5vcmlnaW5Nb2RlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwud3JhcGFyb3VuZE1vZGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA2NjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwubG9nKCdTd2l0Y2hpbmcgYmFjayB0byBub3JtYWwga2V5cGFkLicpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5hcHBsaWNhdGlvbktleXBhZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdGVybWluYWwudmlld3BvcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLnZpZXdwb3J0LnN5bmNTY3JvbGxBcmVhKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgIGNhc2UgMTAwMDpcbiAgICAgICAgICAgICAgICBjYXNlIDEwMDI6XG4gICAgICAgICAgICAgICAgY2FzZSAxMDAzOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC54MTBNb3VzZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC52dDIwME1vdXNlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLm5vcm1hbE1vdXNlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLm1vdXNlRXZlbnRzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnZW5hYmxlLW1vdXNlLWV2ZW50cycpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5zZWxlY3Rpb25NYW5hZ2VyLmVuYWJsZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEwMDQ6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLnNlbmRGb2N1cyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEwMDU6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLnV0Zk1vdXNlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTAwNjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuc2dyTW91c2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMDE1OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC51cnh2dE1vdXNlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjU6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmN1cnNvckhpZGRlbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTA0ODpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXN0b3JlQ3Vyc29yKHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTA0OTpcbiAgICAgICAgICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgICAgICAgIGNhc2UgMTA0NzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVycy5hY3RpdmF0ZU5vcm1hbEJ1ZmZlcigpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1zWzBdID09PSAxMDQ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3RvcmVDdXJzb3IocGFyYW1zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5yZWZyZXNoKDAsIHRoaXMuX3Rlcm1pbmFsLnJvd3MgLSAxKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3Rlcm1pbmFsLnZpZXdwb3J0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC52aWV3cG9ydC5zeW5jU2Nyb2xsQXJlYSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLnNob3dDdXJzb3IoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyMDA0OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5icmFja2V0ZWRQYXN0ZU1vZGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUuY2hhckF0dHJpYnV0ZXMgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIGlmIChwYXJhbXMubGVuZ3RoID09PSAxICYmIHBhcmFtc1swXSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuY3VyQXR0ciA9IEJ1ZmZlcl8xLkRFRkFVTFRfQVRUUjtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbCA9IHBhcmFtcy5sZW5ndGg7XG4gICAgICAgIHZhciBmbGFncyA9IHRoaXMuX3Rlcm1pbmFsLmN1ckF0dHIgPj4gMTg7XG4gICAgICAgIHZhciBmZyA9ICh0aGlzLl90ZXJtaW5hbC5jdXJBdHRyID4+IDkpICYgMHgxZmY7XG4gICAgICAgIHZhciBiZyA9IHRoaXMuX3Rlcm1pbmFsLmN1ckF0dHIgJiAweDFmZjtcbiAgICAgICAgdmFyIHA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBwID0gcGFyYW1zW2ldO1xuICAgICAgICAgICAgaWYgKHAgPj0gMzAgJiYgcCA8PSAzNykge1xuICAgICAgICAgICAgICAgIGZnID0gcCAtIDMwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocCA+PSA0MCAmJiBwIDw9IDQ3KSB7XG4gICAgICAgICAgICAgICAgYmcgPSBwIC0gNDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwID49IDkwICYmIHAgPD0gOTcpIHtcbiAgICAgICAgICAgICAgICBwICs9IDg7XG4gICAgICAgICAgICAgICAgZmcgPSBwIC0gOTA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwID49IDEwMCAmJiBwIDw9IDEwNykge1xuICAgICAgICAgICAgICAgIHAgKz0gODtcbiAgICAgICAgICAgICAgICBiZyA9IHAgLSAxMDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZmxhZ3MgPSBCdWZmZXJfMS5ERUZBVUxUX0FUVFIgPj4gMTg7XG4gICAgICAgICAgICAgICAgZmcgPSAoQnVmZmVyXzEuREVGQVVMVF9BVFRSID4+IDkpICYgMHgxZmY7XG4gICAgICAgICAgICAgICAgYmcgPSBCdWZmZXJfMS5ERUZBVUxUX0FUVFIgJiAweDFmZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHAgPT09IDEpIHtcbiAgICAgICAgICAgICAgICBmbGFncyB8PSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocCA9PT0gMykge1xuICAgICAgICAgICAgICAgIGZsYWdzIHw9IDY0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocCA9PT0gNCkge1xuICAgICAgICAgICAgICAgIGZsYWdzIHw9IDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwID09PSA1KSB7XG4gICAgICAgICAgICAgICAgZmxhZ3MgfD0gNDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHAgPT09IDcpIHtcbiAgICAgICAgICAgICAgICBmbGFncyB8PSA4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocCA9PT0gOCkge1xuICAgICAgICAgICAgICAgIGZsYWdzIHw9IDE2O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocCA9PT0gMikge1xuICAgICAgICAgICAgICAgIGZsYWdzIHw9IDMyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocCA9PT0gMjIpIHtcbiAgICAgICAgICAgICAgICBmbGFncyAmPSB+MTtcbiAgICAgICAgICAgICAgICBmbGFncyAmPSB+MzI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwID09PSAyMykge1xuICAgICAgICAgICAgICAgIGZsYWdzICY9IH42NDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHAgPT09IDI0KSB7XG4gICAgICAgICAgICAgICAgZmxhZ3MgJj0gfjI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwID09PSAyNSkge1xuICAgICAgICAgICAgICAgIGZsYWdzICY9IH40O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocCA9PT0gMjcpIHtcbiAgICAgICAgICAgICAgICBmbGFncyAmPSB+ODtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHAgPT09IDI4KSB7XG4gICAgICAgICAgICAgICAgZmxhZ3MgJj0gfjE2O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocCA9PT0gMzkpIHtcbiAgICAgICAgICAgICAgICBmZyA9IChCdWZmZXJfMS5ERUZBVUxUX0FUVFIgPj4gOSkgJiAweDFmZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHAgPT09IDQ5KSB7XG4gICAgICAgICAgICAgICAgYmcgPSBCdWZmZXJfMS5ERUZBVUxUX0FUVFIgJiAweDFmZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHAgPT09IDM4KSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmFtc1tpICsgMV0gPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgaSArPSAyO1xuICAgICAgICAgICAgICAgICAgICBmZyA9IHRoaXMuX3Rlcm1pbmFsLm1hdGNoQ29sb3IocGFyYW1zW2ldICYgMHhmZiwgcGFyYW1zW2kgKyAxXSAmIDB4ZmYsIHBhcmFtc1tpICsgMl0gJiAweGZmKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZnID09PSAtMSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGZnID0gMHgxZmY7XG4gICAgICAgICAgICAgICAgICAgIGkgKz0gMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocGFyYW1zW2kgKyAxXSA9PT0gNSkge1xuICAgICAgICAgICAgICAgICAgICBpICs9IDI7XG4gICAgICAgICAgICAgICAgICAgIHAgPSBwYXJhbXNbaV0gJiAweGZmO1xuICAgICAgICAgICAgICAgICAgICBmZyA9IHA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocCA9PT0gNDgpIHtcbiAgICAgICAgICAgICAgICBpZiAocGFyYW1zW2kgKyAxXSA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICBpICs9IDI7XG4gICAgICAgICAgICAgICAgICAgIGJnID0gdGhpcy5fdGVybWluYWwubWF0Y2hDb2xvcihwYXJhbXNbaV0gJiAweGZmLCBwYXJhbXNbaSArIDFdICYgMHhmZiwgcGFyYW1zW2kgKyAyXSAmIDB4ZmYpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYmcgPT09IC0xKVxuICAgICAgICAgICAgICAgICAgICAgICAgYmcgPSAweDFmZjtcbiAgICAgICAgICAgICAgICAgICAgaSArPSAyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChwYXJhbXNbaSArIDFdID09PSA1KSB7XG4gICAgICAgICAgICAgICAgICAgIGkgKz0gMjtcbiAgICAgICAgICAgICAgICAgICAgcCA9IHBhcmFtc1tpXSAmIDB4ZmY7XG4gICAgICAgICAgICAgICAgICAgIGJnID0gcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwID09PSAxMDApIHtcbiAgICAgICAgICAgICAgICBmZyA9IChCdWZmZXJfMS5ERUZBVUxUX0FUVFIgPj4gOSkgJiAweDFmZjtcbiAgICAgICAgICAgICAgICBiZyA9IEJ1ZmZlcl8xLkRFRkFVTFRfQVRUUiAmIDB4MWZmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuZXJyb3IoJ1Vua25vd24gU0dSIGF0dHJpYnV0ZTogJWQuJywgcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdGVybWluYWwuY3VyQXR0ciA9IChmbGFncyA8PCAxOCkgfCAoZmcgPDwgOSkgfCBiZztcbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUuZGV2aWNlU3RhdHVzID0gZnVuY3Rpb24gKHBhcmFtcywgY29sbGVjdCkge1xuICAgICAgICBpZiAoIWNvbGxlY3QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGFyYW1zWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5lbWl0KCdkYXRhJywgRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgXCJbMG5cIik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgdmFyIHkgPSB0aGlzLl90ZXJtaW5hbC5idWZmZXIueSArIDE7XG4gICAgICAgICAgICAgICAgICAgIHZhciB4ID0gdGhpcy5fdGVybWluYWwuYnVmZmVyLnggKyAxO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5lbWl0KCdkYXRhJywgRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgXCJbXCIgKyB5ICsgXCI7XCIgKyB4ICsgXCJSXCIpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb2xsZWN0ID09PSAnPycpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGFyYW1zWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ICsgMTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHggPSB0aGlzLl90ZXJtaW5hbC5idWZmZXIueCArIDE7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmVtaXQoJ2RhdGEnLCBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyBcIls/XCIgKyB5ICsgXCI7XCIgKyB4ICsgXCJSXCIpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDE1OlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI1OlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI2OlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDUzOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5zb2Z0UmVzZXQgPSBmdW5jdGlvbiAocGFyYW1zLCBjb2xsZWN0KSB7XG4gICAgICAgIGlmIChjb2xsZWN0ID09PSAnIScpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmN1cnNvckhpZGRlbiA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuaW5zZXJ0TW9kZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwub3JpZ2luTW9kZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwud3JhcGFyb3VuZE1vZGUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuYXBwbGljYXRpb25LZXlwYWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0aGlzLl90ZXJtaW5hbC52aWV3cG9ydCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLnZpZXdwb3J0LnN5bmNTY3JvbGxBcmVhKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5hcHBsaWNhdGlvbkN1cnNvciA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnNjcm9sbFRvcCA9IDA7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIuc2Nyb2xsQm90dG9tID0gdGhpcy5fdGVybWluYWwucm93cyAtIDE7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5jdXJBdHRyID0gQnVmZmVyXzEuREVGQVVMVF9BVFRSO1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnggPSB0aGlzLl90ZXJtaW5hbC5idWZmZXIueSA9IDA7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5jaGFyc2V0ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLmdsZXZlbCA9IDA7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5jaGFyc2V0cyA9IFtudWxsXTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5zZXRDdXJzb3JTdHlsZSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHtcbiAgICAgICAgaWYgKGNvbGxlY3QgPT09ICcgJykge1xuICAgICAgICAgICAgdmFyIHBhcmFtID0gcGFyYW1zWzBdIDwgMSA/IDEgOiBwYXJhbXNbMF07XG4gICAgICAgICAgICBzd2l0Y2ggKHBhcmFtKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuc2V0T3B0aW9uKCdjdXJzb3JTdHlsZScsICdibG9jaycpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5zZXRPcHRpb24oJ2N1cnNvclN0eWxlJywgJ3VuZGVybGluZScpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5zZXRPcHRpb24oJ2N1cnNvclN0eWxlJywgJ2JhcicpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpc0JsaW5raW5nID0gcGFyYW0gJSAyID09PSAxO1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuc2V0T3B0aW9uKCdjdXJzb3JCbGluaycsIGlzQmxpbmtpbmcpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLnNldFNjcm9sbFJlZ2lvbiA9IGZ1bmN0aW9uIChwYXJhbXMsIGNvbGxlY3QpIHtcbiAgICAgICAgaWYgKGNvbGxlY3QpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci5zY3JvbGxUb3AgPSAocGFyYW1zWzBdIHx8IDEpIC0gMTtcbiAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnNjcm9sbEJvdHRvbSA9IChwYXJhbXNbMV0gJiYgcGFyYW1zWzFdIDw9IHRoaXMuX3Rlcm1pbmFsLnJvd3MgPyBwYXJhbXNbMV0gOiB0aGlzLl90ZXJtaW5hbC5yb3dzKSAtIDE7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci54ID0gMDtcbiAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnkgPSAwO1xuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5zYXZlQ3Vyc29yID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIuc2F2ZWRYID0gdGhpcy5fdGVybWluYWwuYnVmZmVyLng7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci5zYXZlZFkgPSB0aGlzLl90ZXJtaW5hbC5idWZmZXIueTtcbiAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnNhdmVkQ3VyQXR0ciA9IHRoaXMuX3Rlcm1pbmFsLmN1ckF0dHI7XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLnJlc3RvcmVDdXJzb3IgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci54ID0gdGhpcy5fdGVybWluYWwuYnVmZmVyLnNhdmVkWCB8fCAwO1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIueSA9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci5zYXZlZFkgfHwgMDtcbiAgICAgICAgdGhpcy5fdGVybWluYWwuY3VyQXR0ciA9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci5zYXZlZEN1ckF0dHIgfHwgQnVmZmVyXzEuREVGQVVMVF9BVFRSO1xuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5zZXRUaXRsZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmhhbmRsZVRpdGxlKGRhdGEpO1xuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5uZXh0TGluZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fdGVybWluYWwuYnVmZmVyLnggPSAwO1xuICAgICAgICB0aGlzLmluZGV4KCk7XG4gICAgfTtcbiAgICBJbnB1dEhhbmRsZXIucHJvdG90eXBlLmtleXBhZEFwcGxpY2F0aW9uTW9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fdGVybWluYWwubG9nKCdTZXJpYWwgcG9ydCByZXF1ZXN0ZWQgYXBwbGljYXRpb24ga2V5cGFkLicpO1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5hcHBsaWNhdGlvbktleXBhZCA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLl90ZXJtaW5hbC52aWV3cG9ydCkge1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwudmlld3BvcnQuc3luY1Njcm9sbEFyZWEoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5rZXlwYWROdW1lcmljTW9kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fdGVybWluYWwubG9nKCdTd2l0Y2hpbmcgYmFjayB0byBub3JtYWwga2V5cGFkLicpO1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5hcHBsaWNhdGlvbktleXBhZCA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5fdGVybWluYWwudmlld3BvcnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLnZpZXdwb3J0LnN5bmNTY3JvbGxBcmVhKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUuc2VsZWN0RGVmYXVsdENoYXJzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLnNldGdMZXZlbCgwKTtcbiAgICAgICAgdGhpcy5fdGVybWluYWwuc2V0Z0NoYXJzZXQoMCwgQ2hhcnNldHNfMS5ERUZBVUxUX0NIQVJTRVQpO1xuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5zZWxlY3RDaGFyc2V0ID0gZnVuY3Rpb24gKGNvbGxlY3RBbmRGbGFnKSB7XG4gICAgICAgIGlmIChjb2xsZWN0QW5kRmxhZy5sZW5ndGggIT09IDIpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3REZWZhdWx0Q2hhcnNldCgpO1xuICAgICAgICBpZiAoY29sbGVjdEFuZEZsYWdbMF0gPT09ICcvJylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5fdGVybWluYWwuc2V0Z0NoYXJzZXQoR0xFVkVMW2NvbGxlY3RBbmRGbGFnWzBdXSwgQ2hhcnNldHNfMS5DSEFSU0VUU1tjb2xsZWN0QW5kRmxhZ1sxXV0gfHwgQ2hhcnNldHNfMS5ERUZBVUxUX0NIQVJTRVQpO1xuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5pbmRleCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fdGVybWluYWwuaW5kZXgoKTtcbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUudGFiU2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC50YWJTZXQoKTtcbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUucmV2ZXJzZUluZGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5yZXZlcnNlSW5kZXgoKTtcbiAgICB9O1xuICAgIElucHV0SGFuZGxlci5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3BhcnNlci5yZXNldCgpO1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5yZXNldCgpO1xuICAgIH07XG4gICAgSW5wdXRIYW5kbGVyLnByb3RvdHlwZS5zZXRnTGV2ZWwgPSBmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICAgICAgdGhpcy5fdGVybWluYWwuc2V0Z0xldmVsKGxldmVsKTtcbiAgICB9O1xuICAgIHJldHVybiBJbnB1dEhhbmRsZXI7XG59KExpZmVjeWNsZV8xLkRpc3Bvc2FibGUpKTtcbmV4cG9ydHMuSW5wdXRIYW5kbGVyID0gSW5wdXRIYW5kbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SW5wdXRIYW5kbGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5DSEFSU0VUUyA9IHt9O1xuZXhwb3J0cy5ERUZBVUxUX0NIQVJTRVQgPSBleHBvcnRzLkNIQVJTRVRTWydCJ107XG5leHBvcnRzLkNIQVJTRVRTWycwJ10gPSB7XG4gICAgJ2AnOiAnXFx1MjVjNicsXG4gICAgJ2EnOiAnXFx1MjU5MicsXG4gICAgJ2InOiAnXFx1MDAwOScsXG4gICAgJ2MnOiAnXFx1MDAwYycsXG4gICAgJ2QnOiAnXFx1MDAwZCcsXG4gICAgJ2UnOiAnXFx1MDAwYScsXG4gICAgJ2YnOiAnXFx1MDBiMCcsXG4gICAgJ2cnOiAnXFx1MDBiMScsXG4gICAgJ2gnOiAnXFx1MjQyNCcsXG4gICAgJ2knOiAnXFx1MDAwYicsXG4gICAgJ2onOiAnXFx1MjUxOCcsXG4gICAgJ2snOiAnXFx1MjUxMCcsXG4gICAgJ2wnOiAnXFx1MjUwYycsXG4gICAgJ20nOiAnXFx1MjUxNCcsXG4gICAgJ24nOiAnXFx1MjUzYycsXG4gICAgJ28nOiAnXFx1MjNiYScsXG4gICAgJ3AnOiAnXFx1MjNiYicsXG4gICAgJ3EnOiAnXFx1MjUwMCcsXG4gICAgJ3InOiAnXFx1MjNiYycsXG4gICAgJ3MnOiAnXFx1MjNiZCcsXG4gICAgJ3QnOiAnXFx1MjUxYycsXG4gICAgJ3UnOiAnXFx1MjUyNCcsXG4gICAgJ3YnOiAnXFx1MjUzNCcsXG4gICAgJ3cnOiAnXFx1MjUyYycsXG4gICAgJ3gnOiAnXFx1MjUwMicsXG4gICAgJ3knOiAnXFx1MjI2NCcsXG4gICAgJ3onOiAnXFx1MjI2NScsXG4gICAgJ3snOiAnXFx1MDNjMCcsXG4gICAgJ3wnOiAnXFx1MjI2MCcsXG4gICAgJ30nOiAnXFx1MDBhMycsXG4gICAgJ34nOiAnXFx1MDBiNydcbn07XG5leHBvcnRzLkNIQVJTRVRTWydBJ10gPSB7XG4gICAgJyMnOiAnwqMnXG59O1xuZXhwb3J0cy5DSEFSU0VUU1snQiddID0gbnVsbDtcbmV4cG9ydHMuQ0hBUlNFVFNbJzQnXSA9IHtcbiAgICAnIyc6ICfCoycsXG4gICAgJ0AnOiAnwr4nLFxuICAgICdbJzogJ2lqJyxcbiAgICAnXFxcXCc6ICfCvScsXG4gICAgJ10nOiAnfCcsXG4gICAgJ3snOiAnwqgnLFxuICAgICd8JzogJ2YnLFxuICAgICd9JzogJ8K8JyxcbiAgICAnfic6ICfCtCdcbn07XG5leHBvcnRzLkNIQVJTRVRTWydDJ10gPVxuICAgIGV4cG9ydHMuQ0hBUlNFVFNbJzUnXSA9IHtcbiAgICAgICAgJ1snOiAnw4QnLFxuICAgICAgICAnXFxcXCc6ICfDlicsXG4gICAgICAgICddJzogJ8OFJyxcbiAgICAgICAgJ14nOiAnw5wnLFxuICAgICAgICAnYCc6ICfDqScsXG4gICAgICAgICd7JzogJ8OkJyxcbiAgICAgICAgJ3wnOiAnw7YnLFxuICAgICAgICAnfSc6ICfDpScsXG4gICAgICAgICd+JzogJ8O8J1xuICAgIH07XG5leHBvcnRzLkNIQVJTRVRTWydSJ10gPSB7XG4gICAgJyMnOiAnwqMnLFxuICAgICdAJzogJ8OgJyxcbiAgICAnWyc6ICfCsCcsXG4gICAgJ1xcXFwnOiAnw6cnLFxuICAgICddJzogJ8KnJyxcbiAgICAneyc6ICfDqScsXG4gICAgJ3wnOiAnw7knLFxuICAgICd9JzogJ8OoJyxcbiAgICAnfic6ICfCqCdcbn07XG5leHBvcnRzLkNIQVJTRVRTWydRJ10gPSB7XG4gICAgJ0AnOiAnw6AnLFxuICAgICdbJzogJ8OiJyxcbiAgICAnXFxcXCc6ICfDpycsXG4gICAgJ10nOiAnw6onLFxuICAgICdeJzogJ8OuJyxcbiAgICAnYCc6ICfDtCcsXG4gICAgJ3snOiAnw6knLFxuICAgICd8JzogJ8O5JyxcbiAgICAnfSc6ICfDqCcsXG4gICAgJ34nOiAnw7snXG59O1xuZXhwb3J0cy5DSEFSU0VUU1snSyddID0ge1xuICAgICdAJzogJ8KnJyxcbiAgICAnWyc6ICfDhCcsXG4gICAgJ1xcXFwnOiAnw5YnLFxuICAgICddJzogJ8OcJyxcbiAgICAneyc6ICfDpCcsXG4gICAgJ3wnOiAnw7YnLFxuICAgICd9JzogJ8O8JyxcbiAgICAnfic6ICfDnydcbn07XG5leHBvcnRzLkNIQVJTRVRTWydZJ10gPSB7XG4gICAgJyMnOiAnwqMnLFxuICAgICdAJzogJ8KnJyxcbiAgICAnWyc6ICfCsCcsXG4gICAgJ1xcXFwnOiAnw6cnLFxuICAgICddJzogJ8OpJyxcbiAgICAnYCc6ICfDuScsXG4gICAgJ3snOiAnw6AnLFxuICAgICd8JzogJ8OyJyxcbiAgICAnfSc6ICfDqCcsXG4gICAgJ34nOiAnw6wnXG59O1xuZXhwb3J0cy5DSEFSU0VUU1snRSddID1cbiAgICBleHBvcnRzLkNIQVJTRVRTWyc2J10gPSB7XG4gICAgICAgICdAJzogJ8OEJyxcbiAgICAgICAgJ1snOiAnw4YnLFxuICAgICAgICAnXFxcXCc6ICfDmCcsXG4gICAgICAgICddJzogJ8OFJyxcbiAgICAgICAgJ14nOiAnw5wnLFxuICAgICAgICAnYCc6ICfDpCcsXG4gICAgICAgICd7JzogJ8OmJyxcbiAgICAgICAgJ3wnOiAnw7gnLFxuICAgICAgICAnfSc6ICfDpScsXG4gICAgICAgICd+JzogJ8O8J1xuICAgIH07XG5leHBvcnRzLkNIQVJTRVRTWydaJ10gPSB7XG4gICAgJyMnOiAnwqMnLFxuICAgICdAJzogJ8KnJyxcbiAgICAnWyc6ICfCoScsXG4gICAgJ1xcXFwnOiAnw5EnLFxuICAgICddJzogJ8K/JyxcbiAgICAneyc6ICfCsCcsXG4gICAgJ3wnOiAnw7EnLFxuICAgICd9JzogJ8OnJ1xufTtcbmV4cG9ydHMuQ0hBUlNFVFNbJ0gnXSA9XG4gICAgZXhwb3J0cy5DSEFSU0VUU1snNyddID0ge1xuICAgICAgICAnQCc6ICfDiScsXG4gICAgICAgICdbJzogJ8OEJyxcbiAgICAgICAgJ1xcXFwnOiAnw5YnLFxuICAgICAgICAnXSc6ICfDhScsXG4gICAgICAgICdeJzogJ8OcJyxcbiAgICAgICAgJ2AnOiAnw6knLFxuICAgICAgICAneyc6ICfDpCcsXG4gICAgICAgICd8JzogJ8O2JyxcbiAgICAgICAgJ30nOiAnw6UnLFxuICAgICAgICAnfic6ICfDvCdcbiAgICB9O1xuZXhwb3J0cy5DSEFSU0VUU1snPSddID0ge1xuICAgICcjJzogJ8O5JyxcbiAgICAnQCc6ICfDoCcsXG4gICAgJ1snOiAnw6knLFxuICAgICdcXFxcJzogJ8OnJyxcbiAgICAnXSc6ICfDqicsXG4gICAgJ14nOiAnw64nLFxuICAgICdfJzogJ8OoJyxcbiAgICAnYCc6ICfDtCcsXG4gICAgJ3snOiAnw6QnLFxuICAgICd8JzogJ8O2JyxcbiAgICAnfSc6ICfDvCcsXG4gICAgJ34nOiAnw7snXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2hhcnNldHMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiBmaWxsKGFycmF5LCB2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICAgIGlmIChhcnJheS5maWxsKSB7XG4gICAgICAgIHJldHVybiBhcnJheS5maWxsKHZhbHVlLCBzdGFydCwgZW5kKTtcbiAgICB9XG4gICAgcmV0dXJuIGZpbGxGYWxsYmFjayhhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpO1xufVxuZXhwb3J0cy5maWxsID0gZmlsbDtcbmZ1bmN0aW9uIGZpbGxGYWxsYmFjayhhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAoc3RhcnQgPT09IHZvaWQgMCkgeyBzdGFydCA9IDA7IH1cbiAgICBpZiAoZW5kID09PSB2b2lkIDApIHsgZW5kID0gYXJyYXkubGVuZ3RoOyB9XG4gICAgaWYgKHN0YXJ0ID49IGFycmF5Lmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuICAgIHN0YXJ0ID0gKGFycmF5Lmxlbmd0aCArIHN0YXJ0KSAlIGFycmF5Lmxlbmd0aDtcbiAgICBpZiAoZW5kID49IGFycmF5Lmxlbmd0aCkge1xuICAgICAgICBlbmQgPSBhcnJheS5sZW5ndGg7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBlbmQgPSAoYXJyYXkubGVuZ3RoICsgZW5kKSAlIGFycmF5Lmxlbmd0aDtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgICAgYXJyYXlbaV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xufVxuZXhwb3J0cy5maWxsRmFsbGJhY2sgPSBmaWxsRmFsbGJhY2s7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1UeXBlZEFycmF5VXRpbHMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIExpZmVjeWNsZV8xID0gcmVxdWlyZShcIi4vY29tbW9uL0xpZmVjeWNsZVwiKTtcbmZ1bmN0aW9uIHIobG93LCBoaWdoKSB7XG4gICAgdmFyIGMgPSBoaWdoIC0gbG93O1xuICAgIHZhciBhcnIgPSBuZXcgQXJyYXkoYyk7XG4gICAgd2hpbGUgKGMtLSkge1xuICAgICAgICBhcnJbY10gPSAtLWhpZ2g7XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG59XG52YXIgVHJhbnNpdGlvblRhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUcmFuc2l0aW9uVGFibGUobGVuZ3RoKSB7XG4gICAgICAgIHRoaXMudGFibGUgPSAodHlwZW9mIFVpbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgPyBuZXcgQXJyYXkobGVuZ3RoKVxuICAgICAgICAgICAgOiBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICAgIH1cbiAgICBUcmFuc2l0aW9uVGFibGUucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChjb2RlLCBzdGF0ZSwgYWN0aW9uLCBuZXh0KSB7XG4gICAgICAgIHRoaXMudGFibGVbc3RhdGUgPDwgOCB8IGNvZGVdID0gKChhY3Rpb24gfCAwKSA8PCA0KSB8ICgobmV4dCA9PT0gdW5kZWZpbmVkKSA/IHN0YXRlIDogbmV4dCk7XG4gICAgfTtcbiAgICBUcmFuc2l0aW9uVGFibGUucHJvdG90eXBlLmFkZE1hbnkgPSBmdW5jdGlvbiAoY29kZXMsIHN0YXRlLCBhY3Rpb24sIG5leHQpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5hZGQoY29kZXNbaV0sIHN0YXRlLCBhY3Rpb24sIG5leHQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gVHJhbnNpdGlvblRhYmxlO1xufSgpKTtcbmV4cG9ydHMuVHJhbnNpdGlvblRhYmxlID0gVHJhbnNpdGlvblRhYmxlO1xudmFyIFBSSU5UQUJMRVMgPSByKDB4MjAsIDB4N2YpO1xudmFyIEVYRUNVVEFCTEVTID0gcigweDAwLCAweDE4KTtcbkVYRUNVVEFCTEVTLnB1c2goMHgxOSk7XG5FWEVDVVRBQkxFUy5wdXNoLmFwcGx5KEVYRUNVVEFCTEVTLCByKDB4MWMsIDB4MjApKTtcbnZhciBERUZBVUxUX1RSQU5TSVRJT04gPSAxIDw8IDQgfCAwO1xuZXhwb3J0cy5WVDUwMF9UUkFOU0lUSU9OX1RBQkxFID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGFibGUgPSBuZXcgVHJhbnNpdGlvblRhYmxlKDQwOTUpO1xuICAgIHZhciBzdGF0ZXMgPSByKDAsIDEzICsgMSk7XG4gICAgdmFyIHN0YXRlO1xuICAgIGZvciAoc3RhdGUgaW4gc3RhdGVzKSB7XG4gICAgICAgIGZvciAodmFyIGNvZGUgPSAwOyBjb2RlIDwgMTYwOyArK2NvZGUpIHtcbiAgICAgICAgICAgIHRhYmxlLmFkZChjb2RlLCBzdGF0ZSwgMSwgMCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGFibGUuYWRkTWFueShQUklOVEFCTEVTLCAwLCAyLCAwKTtcbiAgICBmb3IgKHN0YXRlIGluIHN0YXRlcykge1xuICAgICAgICB0YWJsZS5hZGRNYW55KFsweDE4LCAweDFhLCAweDk5LCAweDlhXSwgc3RhdGUsIDMsIDApO1xuICAgICAgICB0YWJsZS5hZGRNYW55KHIoMHg4MCwgMHg5MCksIHN0YXRlLCAzLCAwKTtcbiAgICAgICAgdGFibGUuYWRkTWFueShyKDB4OTAsIDB4OTgpLCBzdGF0ZSwgMywgMCk7XG4gICAgICAgIHRhYmxlLmFkZCgweDljLCBzdGF0ZSwgMCwgMCk7XG4gICAgICAgIHRhYmxlLmFkZCgweDFiLCBzdGF0ZSwgMTEsIDEpO1xuICAgICAgICB0YWJsZS5hZGQoMHg5ZCwgc3RhdGUsIDQsIDgpO1xuICAgICAgICB0YWJsZS5hZGRNYW55KFsweDk4LCAweDllLCAweDlmXSwgc3RhdGUsIDAsIDcpO1xuICAgICAgICB0YWJsZS5hZGQoMHg5Yiwgc3RhdGUsIDExLCAzKTtcbiAgICAgICAgdGFibGUuYWRkKDB4OTAsIHN0YXRlLCAxMSwgOSk7XG4gICAgfVxuICAgIHRhYmxlLmFkZE1hbnkoRVhFQ1VUQUJMRVMsIDAsIDMsIDApO1xuICAgIHRhYmxlLmFkZE1hbnkoRVhFQ1VUQUJMRVMsIDEsIDMsIDEpO1xuICAgIHRhYmxlLmFkZCgweDdmLCAxLCAwLCAxKTtcbiAgICB0YWJsZS5hZGRNYW55KEVYRUNVVEFCTEVTLCA4LCAwLCA4KTtcbiAgICB0YWJsZS5hZGRNYW55KEVYRUNVVEFCTEVTLCAzLCAzLCAzKTtcbiAgICB0YWJsZS5hZGQoMHg3ZiwgMywgMCwgMyk7XG4gICAgdGFibGUuYWRkTWFueShFWEVDVVRBQkxFUywgNCwgMywgNCk7XG4gICAgdGFibGUuYWRkKDB4N2YsIDQsIDAsIDQpO1xuICAgIHRhYmxlLmFkZE1hbnkoRVhFQ1VUQUJMRVMsIDYsIDMsIDYpO1xuICAgIHRhYmxlLmFkZE1hbnkoRVhFQ1VUQUJMRVMsIDUsIDMsIDUpO1xuICAgIHRhYmxlLmFkZCgweDdmLCA1LCAwLCA1KTtcbiAgICB0YWJsZS5hZGRNYW55KEVYRUNVVEFCTEVTLCAyLCAzLCAyKTtcbiAgICB0YWJsZS5hZGQoMHg3ZiwgMiwgMCwgMik7XG4gICAgdGFibGUuYWRkKDB4NWQsIDEsIDQsIDgpO1xuICAgIHRhYmxlLmFkZE1hbnkoUFJJTlRBQkxFUywgOCwgNSwgOCk7XG4gICAgdGFibGUuYWRkKDB4N2YsIDgsIDUsIDgpO1xuICAgIHRhYmxlLmFkZE1hbnkoWzB4OWMsIDB4MWIsIDB4MTgsIDB4MWEsIDB4MDddLCA4LCA2LCAwKTtcbiAgICB0YWJsZS5hZGRNYW55KHIoMHgxYywgMHgyMCksIDgsIDAsIDgpO1xuICAgIHRhYmxlLmFkZE1hbnkoWzB4NTgsIDB4NWUsIDB4NWZdLCAxLCAwLCA3KTtcbiAgICB0YWJsZS5hZGRNYW55KFBSSU5UQUJMRVMsIDcsIDAsIDcpO1xuICAgIHRhYmxlLmFkZE1hbnkoRVhFQ1VUQUJMRVMsIDcsIDAsIDcpO1xuICAgIHRhYmxlLmFkZCgweDljLCA3LCAwLCAwKTtcbiAgICB0YWJsZS5hZGQoMHg1YiwgMSwgMTEsIDMpO1xuICAgIHRhYmxlLmFkZE1hbnkocigweDQwLCAweDdmKSwgMywgNywgMCk7XG4gICAgdGFibGUuYWRkTWFueShyKDB4MzAsIDB4M2EpLCAzLCA4LCA0KTtcbiAgICB0YWJsZS5hZGQoMHgzYiwgMywgOCwgNCk7XG4gICAgdGFibGUuYWRkTWFueShbMHgzYywgMHgzZCwgMHgzZSwgMHgzZl0sIDMsIDksIDQpO1xuICAgIHRhYmxlLmFkZE1hbnkocigweDMwLCAweDNhKSwgNCwgOCwgNCk7XG4gICAgdGFibGUuYWRkKDB4M2IsIDQsIDgsIDQpO1xuICAgIHRhYmxlLmFkZE1hbnkocigweDQwLCAweDdmKSwgNCwgNywgMCk7XG4gICAgdGFibGUuYWRkTWFueShbMHgzYSwgMHgzYywgMHgzZCwgMHgzZSwgMHgzZl0sIDQsIDAsIDYpO1xuICAgIHRhYmxlLmFkZE1hbnkocigweDIwLCAweDQwKSwgNiwgMCwgNik7XG4gICAgdGFibGUuYWRkKDB4N2YsIDYsIDAsIDYpO1xuICAgIHRhYmxlLmFkZE1hbnkocigweDQwLCAweDdmKSwgNiwgMCwgMCk7XG4gICAgdGFibGUuYWRkKDB4M2EsIDMsIDAsIDYpO1xuICAgIHRhYmxlLmFkZE1hbnkocigweDIwLCAweDMwKSwgMywgOSwgNSk7XG4gICAgdGFibGUuYWRkTWFueShyKDB4MjAsIDB4MzApLCA1LCA5LCA1KTtcbiAgICB0YWJsZS5hZGRNYW55KHIoMHgzMCwgMHg0MCksIDUsIDAsIDYpO1xuICAgIHRhYmxlLmFkZE1hbnkocigweDQwLCAweDdmKSwgNSwgNywgMCk7XG4gICAgdGFibGUuYWRkTWFueShyKDB4MjAsIDB4MzApLCA0LCA5LCA1KTtcbiAgICB0YWJsZS5hZGRNYW55KHIoMHgyMCwgMHgzMCksIDEsIDksIDIpO1xuICAgIHRhYmxlLmFkZE1hbnkocigweDIwLCAweDMwKSwgMiwgOSwgMik7XG4gICAgdGFibGUuYWRkTWFueShyKDB4MzAsIDB4N2YpLCAyLCAxMCwgMCk7XG4gICAgdGFibGUuYWRkTWFueShyKDB4MzAsIDB4NTApLCAxLCAxMCwgMCk7XG4gICAgdGFibGUuYWRkTWFueShyKDB4NTEsIDB4NTgpLCAxLCAxMCwgMCk7XG4gICAgdGFibGUuYWRkTWFueShbMHg1OSwgMHg1YSwgMHg1Y10sIDEsIDEwLCAwKTtcbiAgICB0YWJsZS5hZGRNYW55KHIoMHg2MCwgMHg3ZiksIDEsIDEwLCAwKTtcbiAgICB0YWJsZS5hZGQoMHg1MCwgMSwgMTEsIDkpO1xuICAgIHRhYmxlLmFkZE1hbnkoRVhFQ1VUQUJMRVMsIDksIDAsIDkpO1xuICAgIHRhYmxlLmFkZCgweDdmLCA5LCAwLCA5KTtcbiAgICB0YWJsZS5hZGRNYW55KHIoMHgxYywgMHgyMCksIDksIDAsIDkpO1xuICAgIHRhYmxlLmFkZE1hbnkocigweDIwLCAweDMwKSwgOSwgOSwgMTIpO1xuICAgIHRhYmxlLmFkZCgweDNhLCA5LCAwLCAxMSk7XG4gICAgdGFibGUuYWRkTWFueShyKDB4MzAsIDB4M2EpLCA5LCA4LCAxMCk7XG4gICAgdGFibGUuYWRkKDB4M2IsIDksIDgsIDEwKTtcbiAgICB0YWJsZS5hZGRNYW55KFsweDNjLCAweDNkLCAweDNlLCAweDNmXSwgOSwgOSwgMTApO1xuICAgIHRhYmxlLmFkZE1hbnkoRVhFQ1VUQUJMRVMsIDExLCAwLCAxMSk7XG4gICAgdGFibGUuYWRkTWFueShyKDB4MjAsIDB4ODApLCAxMSwgMCwgMTEpO1xuICAgIHRhYmxlLmFkZE1hbnkocigweDFjLCAweDIwKSwgMTEsIDAsIDExKTtcbiAgICB0YWJsZS5hZGRNYW55KEVYRUNVVEFCTEVTLCAxMCwgMCwgMTApO1xuICAgIHRhYmxlLmFkZCgweDdmLCAxMCwgMCwgMTApO1xuICAgIHRhYmxlLmFkZE1hbnkocigweDFjLCAweDIwKSwgMTAsIDAsIDEwKTtcbiAgICB0YWJsZS5hZGRNYW55KHIoMHgzMCwgMHgzYSksIDEwLCA4LCAxMCk7XG4gICAgdGFibGUuYWRkKDB4M2IsIDEwLCA4LCAxMCk7XG4gICAgdGFibGUuYWRkTWFueShbMHgzYSwgMHgzYywgMHgzZCwgMHgzZSwgMHgzZl0sIDEwLCAwLCAxMSk7XG4gICAgdGFibGUuYWRkTWFueShyKDB4MjAsIDB4MzApLCAxMCwgOSwgMTIpO1xuICAgIHRhYmxlLmFkZE1hbnkoRVhFQ1VUQUJMRVMsIDEyLCAwLCAxMik7XG4gICAgdGFibGUuYWRkKDB4N2YsIDEyLCAwLCAxMik7XG4gICAgdGFibGUuYWRkTWFueShyKDB4MWMsIDB4MjApLCAxMiwgMCwgMTIpO1xuICAgIHRhYmxlLmFkZE1hbnkocigweDIwLCAweDMwKSwgMTIsIDksIDEyKTtcbiAgICB0YWJsZS5hZGRNYW55KHIoMHgzMCwgMHg0MCksIDEyLCAwLCAxMSk7XG4gICAgdGFibGUuYWRkTWFueShyKDB4NDAsIDB4N2YpLCAxMiwgMTIsIDEzKTtcbiAgICB0YWJsZS5hZGRNYW55KHIoMHg0MCwgMHg3ZiksIDEwLCAxMiwgMTMpO1xuICAgIHRhYmxlLmFkZE1hbnkocigweDQwLCAweDdmKSwgOSwgMTIsIDEzKTtcbiAgICB0YWJsZS5hZGRNYW55KEVYRUNVVEFCTEVTLCAxMywgMTMsIDEzKTtcbiAgICB0YWJsZS5hZGRNYW55KFBSSU5UQUJMRVMsIDEzLCAxMywgMTMpO1xuICAgIHRhYmxlLmFkZCgweDdmLCAxMywgMCwgMTMpO1xuICAgIHRhYmxlLmFkZE1hbnkoWzB4MWIsIDB4OWNdLCAxMywgMTQsIDApO1xuICAgIHJldHVybiB0YWJsZTtcbn0pKCk7XG52YXIgRGNzRHVtbXkgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERjc0R1bW15KCkge1xuICAgIH1cbiAgICBEY3NEdW1teS5wcm90b3R5cGUuaG9vayA9IGZ1bmN0aW9uIChjb2xsZWN0LCBwYXJhbXMsIGZsYWcpIHsgfTtcbiAgICBEY3NEdW1teS5wcm90b3R5cGUucHV0ID0gZnVuY3Rpb24gKGRhdGEsIHN0YXJ0LCBlbmQpIHsgfTtcbiAgICBEY3NEdW1teS5wcm90b3R5cGUudW5ob29rID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIHJldHVybiBEY3NEdW1teTtcbn0oKSk7XG52YXIgRXNjYXBlU2VxdWVuY2VQYXJzZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhFc2NhcGVTZXF1ZW5jZVBhcnNlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBFc2NhcGVTZXF1ZW5jZVBhcnNlcihUUkFOU0lUSU9OUykge1xuICAgICAgICBpZiAoVFJBTlNJVElPTlMgPT09IHZvaWQgMCkgeyBUUkFOU0lUSU9OUyA9IGV4cG9ydHMuVlQ1MDBfVFJBTlNJVElPTl9UQUJMRTsgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5UUkFOU0lUSU9OUyA9IFRSQU5TSVRJT05TO1xuICAgICAgICBfdGhpcy5pbml0aWFsU3RhdGUgPSAwO1xuICAgICAgICBfdGhpcy5jdXJyZW50U3RhdGUgPSBfdGhpcy5pbml0aWFsU3RhdGU7XG4gICAgICAgIF90aGlzLl9vc2MgPSAnJztcbiAgICAgICAgX3RoaXMuX3BhcmFtcyA9IFswXTtcbiAgICAgICAgX3RoaXMuX2NvbGxlY3QgPSAnJztcbiAgICAgICAgX3RoaXMuX3ByaW50SGFuZGxlckZiID0gZnVuY3Rpb24gKGRhdGEsIHN0YXJ0LCBlbmQpIHsgfTtcbiAgICAgICAgX3RoaXMuX2V4ZWN1dGVIYW5kbGVyRmIgPSBmdW5jdGlvbiAoY29kZSkgeyB9O1xuICAgICAgICBfdGhpcy5fY3NpSGFuZGxlckZiID0gZnVuY3Rpb24gKGNvbGxlY3QsIHBhcmFtcywgZmxhZykgeyB9O1xuICAgICAgICBfdGhpcy5fZXNjSGFuZGxlckZiID0gZnVuY3Rpb24gKGNvbGxlY3QsIGZsYWcpIHsgfTtcbiAgICAgICAgX3RoaXMuX29zY0hhbmRsZXJGYiA9IGZ1bmN0aW9uIChpZGVudGlmaWVyLCBkYXRhKSB7IH07XG4gICAgICAgIF90aGlzLl9kY3NIYW5kbGVyRmIgPSBuZXcgRGNzRHVtbXkoKTtcbiAgICAgICAgX3RoaXMuX2Vycm9ySGFuZGxlckZiID0gZnVuY3Rpb24gKHN0YXRlKSB7IHJldHVybiBzdGF0ZTsgfTtcbiAgICAgICAgX3RoaXMuX3ByaW50SGFuZGxlciA9IF90aGlzLl9wcmludEhhbmRsZXJGYjtcbiAgICAgICAgX3RoaXMuX2V4ZWN1dGVIYW5kbGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIF90aGlzLl9jc2lIYW5kbGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIF90aGlzLl9lc2NIYW5kbGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIF90aGlzLl9vc2NIYW5kbGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIF90aGlzLl9kY3NIYW5kbGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIF90aGlzLl9hY3RpdmVEY3NIYW5kbGVyID0gbnVsbDtcbiAgICAgICAgX3RoaXMuX2Vycm9ySGFuZGxlciA9IF90aGlzLl9lcnJvckhhbmRsZXJGYjtcbiAgICAgICAgX3RoaXMuc2V0RXNjSGFuZGxlcignXFxcXCcsIGZ1bmN0aW9uICgpIHsgfSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgRXNjYXBlU2VxdWVuY2VQYXJzZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3ByaW50SGFuZGxlckZiID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZXhlY3V0ZUhhbmRsZXJGYiA9IG51bGw7XG4gICAgICAgIHRoaXMuX2NzaUhhbmRsZXJGYiA9IG51bGw7XG4gICAgICAgIHRoaXMuX2VzY0hhbmRsZXJGYiA9IG51bGw7XG4gICAgICAgIHRoaXMuX29zY0hhbmRsZXJGYiA9IG51bGw7XG4gICAgICAgIHRoaXMuX2Rjc0hhbmRsZXJGYiA9IG51bGw7XG4gICAgICAgIHRoaXMuX2Vycm9ySGFuZGxlckZiID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJpbnRIYW5kbGVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZXhlY3V0ZUhhbmRsZXJzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fY3NpSGFuZGxlcnMgPSBudWxsO1xuICAgICAgICB0aGlzLl9lc2NIYW5kbGVycyA9IG51bGw7XG4gICAgICAgIHRoaXMuX29zY0hhbmRsZXJzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZGNzSGFuZGxlcnMgPSBudWxsO1xuICAgICAgICB0aGlzLl9hY3RpdmVEY3NIYW5kbGVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZXJyb3JIYW5kbGVyID0gbnVsbDtcbiAgICB9O1xuICAgIEVzY2FwZVNlcXVlbmNlUGFyc2VyLnByb3RvdHlwZS5zZXRQcmludEhhbmRsZXIgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fcHJpbnRIYW5kbGVyID0gY2FsbGJhY2s7XG4gICAgfTtcbiAgICBFc2NhcGVTZXF1ZW5jZVBhcnNlci5wcm90b3R5cGUuY2xlYXJQcmludEhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3ByaW50SGFuZGxlciA9IHRoaXMuX3ByaW50SGFuZGxlckZiO1xuICAgIH07XG4gICAgRXNjYXBlU2VxdWVuY2VQYXJzZXIucHJvdG90eXBlLnNldEV4ZWN1dGVIYW5kbGVyID0gZnVuY3Rpb24gKGZsYWcsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX2V4ZWN1dGVIYW5kbGVyc1tmbGFnLmNoYXJDb2RlQXQoMCldID0gY2FsbGJhY2s7XG4gICAgfTtcbiAgICBFc2NhcGVTZXF1ZW5jZVBhcnNlci5wcm90b3R5cGUuY2xlYXJFeGVjdXRlSGFuZGxlciA9IGZ1bmN0aW9uIChmbGFnKSB7XG4gICAgICAgIGlmICh0aGlzLl9leGVjdXRlSGFuZGxlcnNbZmxhZy5jaGFyQ29kZUF0KDApXSlcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9leGVjdXRlSGFuZGxlcnNbZmxhZy5jaGFyQ29kZUF0KDApXTtcbiAgICB9O1xuICAgIEVzY2FwZVNlcXVlbmNlUGFyc2VyLnByb3RvdHlwZS5zZXRFeGVjdXRlSGFuZGxlckZhbGxiYWNrID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX2V4ZWN1dGVIYW5kbGVyRmIgPSBjYWxsYmFjaztcbiAgICB9O1xuICAgIEVzY2FwZVNlcXVlbmNlUGFyc2VyLnByb3RvdHlwZS5zZXRDc2lIYW5kbGVyID0gZnVuY3Rpb24gKGZsYWcsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX2NzaUhhbmRsZXJzW2ZsYWcuY2hhckNvZGVBdCgwKV0gPSBjYWxsYmFjaztcbiAgICB9O1xuICAgIEVzY2FwZVNlcXVlbmNlUGFyc2VyLnByb3RvdHlwZS5jbGVhckNzaUhhbmRsZXIgPSBmdW5jdGlvbiAoZmxhZykge1xuICAgICAgICBpZiAodGhpcy5fY3NpSGFuZGxlcnNbZmxhZy5jaGFyQ29kZUF0KDApXSlcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9jc2lIYW5kbGVyc1tmbGFnLmNoYXJDb2RlQXQoMCldO1xuICAgIH07XG4gICAgRXNjYXBlU2VxdWVuY2VQYXJzZXIucHJvdG90eXBlLnNldENzaUhhbmRsZXJGYWxsYmFjayA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9jc2lIYW5kbGVyRmIgPSBjYWxsYmFjaztcbiAgICB9O1xuICAgIEVzY2FwZVNlcXVlbmNlUGFyc2VyLnByb3RvdHlwZS5zZXRFc2NIYW5kbGVyID0gZnVuY3Rpb24gKGNvbGxlY3RBbmRGbGFnLCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9lc2NIYW5kbGVyc1tjb2xsZWN0QW5kRmxhZ10gPSBjYWxsYmFjaztcbiAgICB9O1xuICAgIEVzY2FwZVNlcXVlbmNlUGFyc2VyLnByb3RvdHlwZS5jbGVhckVzY0hhbmRsZXIgPSBmdW5jdGlvbiAoY29sbGVjdEFuZEZsYWcpIHtcbiAgICAgICAgaWYgKHRoaXMuX2VzY0hhbmRsZXJzW2NvbGxlY3RBbmRGbGFnXSlcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9lc2NIYW5kbGVyc1tjb2xsZWN0QW5kRmxhZ107XG4gICAgfTtcbiAgICBFc2NhcGVTZXF1ZW5jZVBhcnNlci5wcm90b3R5cGUuc2V0RXNjSGFuZGxlckZhbGxiYWNrID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX2VzY0hhbmRsZXJGYiA9IGNhbGxiYWNrO1xuICAgIH07XG4gICAgRXNjYXBlU2VxdWVuY2VQYXJzZXIucHJvdG90eXBlLnNldE9zY0hhbmRsZXIgPSBmdW5jdGlvbiAoaWRlbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX29zY0hhbmRsZXJzW2lkZW50XSA9IGNhbGxiYWNrO1xuICAgIH07XG4gICAgRXNjYXBlU2VxdWVuY2VQYXJzZXIucHJvdG90eXBlLmNsZWFyT3NjSGFuZGxlciA9IGZ1bmN0aW9uIChpZGVudCkge1xuICAgICAgICBpZiAodGhpcy5fb3NjSGFuZGxlcnNbaWRlbnRdKVxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX29zY0hhbmRsZXJzW2lkZW50XTtcbiAgICB9O1xuICAgIEVzY2FwZVNlcXVlbmNlUGFyc2VyLnByb3RvdHlwZS5zZXRPc2NIYW5kbGVyRmFsbGJhY2sgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fb3NjSGFuZGxlckZiID0gY2FsbGJhY2s7XG4gICAgfTtcbiAgICBFc2NhcGVTZXF1ZW5jZVBhcnNlci5wcm90b3R5cGUuc2V0RGNzSGFuZGxlciA9IGZ1bmN0aW9uIChjb2xsZWN0QW5kRmxhZywgaGFuZGxlcikge1xuICAgICAgICB0aGlzLl9kY3NIYW5kbGVyc1tjb2xsZWN0QW5kRmxhZ10gPSBoYW5kbGVyO1xuICAgIH07XG4gICAgRXNjYXBlU2VxdWVuY2VQYXJzZXIucHJvdG90eXBlLmNsZWFyRGNzSGFuZGxlciA9IGZ1bmN0aW9uIChjb2xsZWN0QW5kRmxhZykge1xuICAgICAgICBpZiAodGhpcy5fZGNzSGFuZGxlcnNbY29sbGVjdEFuZEZsYWddKVxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2Rjc0hhbmRsZXJzW2NvbGxlY3RBbmRGbGFnXTtcbiAgICB9O1xuICAgIEVzY2FwZVNlcXVlbmNlUGFyc2VyLnByb3RvdHlwZS5zZXREY3NIYW5kbGVyRmFsbGJhY2sgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICB0aGlzLl9kY3NIYW5kbGVyRmIgPSBoYW5kbGVyO1xuICAgIH07XG4gICAgRXNjYXBlU2VxdWVuY2VQYXJzZXIucHJvdG90eXBlLnNldEVycm9ySGFuZGxlciA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9lcnJvckhhbmRsZXIgPSBjYWxsYmFjaztcbiAgICB9O1xuICAgIEVzY2FwZVNlcXVlbmNlUGFyc2VyLnByb3RvdHlwZS5jbGVhckVycm9ySGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fZXJyb3JIYW5kbGVyID0gdGhpcy5fZXJyb3JIYW5kbGVyRmI7XG4gICAgfTtcbiAgICBFc2NhcGVTZXF1ZW5jZVBhcnNlci5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFN0YXRlID0gdGhpcy5pbml0aWFsU3RhdGU7XG4gICAgICAgIHRoaXMuX29zYyA9ICcnO1xuICAgICAgICB0aGlzLl9wYXJhbXMgPSBbMF07XG4gICAgICAgIHRoaXMuX2NvbGxlY3QgPSAnJztcbiAgICAgICAgdGhpcy5fYWN0aXZlRGNzSGFuZGxlciA9IG51bGw7XG4gICAgfTtcbiAgICBFc2NhcGVTZXF1ZW5jZVBhcnNlci5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB2YXIgY29kZSA9IDA7XG4gICAgICAgIHZhciB0cmFuc2l0aW9uID0gMDtcbiAgICAgICAgdmFyIGVycm9yID0gZmFsc2U7XG4gICAgICAgIHZhciBjdXJyZW50U3RhdGUgPSB0aGlzLmN1cnJlbnRTdGF0ZTtcbiAgICAgICAgdmFyIHByaW50ID0gLTE7XG4gICAgICAgIHZhciBkY3MgPSAtMTtcbiAgICAgICAgdmFyIG9zYyA9IHRoaXMuX29zYztcbiAgICAgICAgdmFyIGNvbGxlY3QgPSB0aGlzLl9jb2xsZWN0O1xuICAgICAgICB2YXIgcGFyYW1zID0gdGhpcy5fcGFyYW1zO1xuICAgICAgICB2YXIgdGFibGUgPSB0aGlzLlRSQU5TSVRJT05TLnRhYmxlO1xuICAgICAgICB2YXIgZGNzSGFuZGxlciA9IHRoaXMuX2FjdGl2ZURjc0hhbmRsZXI7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IG51bGw7XG4gICAgICAgIHZhciBsID0gZGF0YS5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICBjb2RlID0gZGF0YS5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRTdGF0ZSA9PT0gMCAmJiBjb2RlID4gMHgxZiAmJiBjb2RlIDwgMHg4MCkge1xuICAgICAgICAgICAgICAgIHByaW50ID0gKH5wcmludCkgPyBwcmludCA6IGk7XG4gICAgICAgICAgICAgICAgZG9cbiAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgIHdoaWxlIChpIDwgbCAmJiBkYXRhLmNoYXJDb2RlQXQoaSkgPiAweDFmICYmIGRhdGEuY2hhckNvZGVBdChpKSA8IDB4ODApO1xuICAgICAgICAgICAgICAgIGktLTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjdXJyZW50U3RhdGUgPT09IDQgJiYgKGNvZGUgPiAweDJmICYmIGNvZGUgPCAweDM5KSkge1xuICAgICAgICAgICAgICAgIHBhcmFtc1twYXJhbXMubGVuZ3RoIC0gMV0gPSBwYXJhbXNbcGFyYW1zLmxlbmd0aCAtIDFdICogMTAgKyBjb2RlIC0gNDg7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0cmFuc2l0aW9uID0gKGNvZGUgPCAweGEwKSA/ICh0YWJsZVtjdXJyZW50U3RhdGUgPDwgOCB8IGNvZGVdKSA6IERFRkFVTFRfVFJBTlNJVElPTjtcbiAgICAgICAgICAgIHN3aXRjaCAodHJhbnNpdGlvbiA+PiA0KSB7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBwcmludCA9ICh+cHJpbnQpID8gcHJpbnQgOiBpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGlmICh+cHJpbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ByaW50SGFuZGxlcihkYXRhLCBwcmludCwgaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmludCA9IC0xO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gdGhpcy5fZXhlY3V0ZUhhbmRsZXJzW2NvZGVdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9leGVjdXRlSGFuZGxlckZiKGNvZGUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIGlmICh+cHJpbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ByaW50SGFuZGxlcihkYXRhLCBwcmludCwgaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmludCA9IC0xO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKH5kY3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRjc0hhbmRsZXIucHV0KGRhdGEsIGRjcywgaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkY3MgPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2RlID4gMHg5Zikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChjdXJyZW50U3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ID0gKH5wcmludCkgPyBwcmludCA6IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3NjICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb24gfD0gODtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uIHw9IDY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb24gfD0gMTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRjcyA9ICh+ZGNzKSA/IGRjcyA6IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb24gfD0gMTM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmplY3QgPSB0aGlzLl9lcnJvckhhbmRsZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGNvZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFN0YXRlOiBjdXJyZW50U3RhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQ6IHByaW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRjczogZGNzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9zYzogb3NjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxlY3Q6IGNvbGxlY3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBwYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJvcnQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmplY3QuYWJvcnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gdGhpcy5fY3NpSGFuZGxlcnNbY29kZV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaylcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHBhcmFtcywgY29sbGVjdCk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NzaUhhbmRsZXJGYihjb2xsZWN0LCBwYXJhbXMsIGNvZGUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2RlID09PSAweDNiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zLnB1c2goMCk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtc1twYXJhbXMubGVuZ3RoIC0gMV0gPSBwYXJhbXNbcGFyYW1zLmxlbmd0aCAtIDFdICogMTAgKyBjb2RlIC0gNDg7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgY29sbGVjdCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayA9IHRoaXMuX2VzY0hhbmRsZXJzW2NvbGxlY3QgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soY29sbGVjdCwgY29kZSk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2VzY0hhbmRsZXJGYihjb2xsZWN0LCBjb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKH5wcmludCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJpbnRIYW5kbGVyKGRhdGEsIHByaW50LCBpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50ID0gLTE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgb3NjID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcyA9IFswXTtcbiAgICAgICAgICAgICAgICAgICAgY29sbGVjdCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBkY3MgPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgICAgICAgZGNzSGFuZGxlciA9IHRoaXMuX2Rjc0hhbmRsZXJzW2NvbGxlY3QgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkY3NIYW5kbGVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgZGNzSGFuZGxlciA9IHRoaXMuX2Rjc0hhbmRsZXJGYjtcbiAgICAgICAgICAgICAgICAgICAgZGNzSGFuZGxlci5ob29rKGNvbGxlY3QsIHBhcmFtcywgY29kZSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgICAgICAgIGRjcyA9ICh+ZGNzKSA/IGRjcyA6IGk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTQ6XG4gICAgICAgICAgICAgICAgICAgIGlmIChkY3NIYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAofmRjcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkY3NIYW5kbGVyLnB1dChkYXRhLCBkY3MsIGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGNzSGFuZGxlci51bmhvb2soKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRjc0hhbmRsZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2RlID09PSAweDFiKVxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbiB8PSAxO1xuICAgICAgICAgICAgICAgICAgICBvc2MgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zID0gWzBdO1xuICAgICAgICAgICAgICAgICAgICBjb2xsZWN0ID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGRjcyA9IC0xO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICh+cHJpbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ByaW50SGFuZGxlcihkYXRhLCBwcmludCwgaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcmludCA9IC0xO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG9zYyA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIG9zYyArPSBkYXRhLmNoYXJBdChpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBpZiAob3NjICYmIGNvZGUgIT09IDB4MTggJiYgY29kZSAhPT0gMHgxYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkeCA9IG9zYy5pbmRleE9mKCc7Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaWR4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29zY0hhbmRsZXJGYigtMSwgb3NjKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpZGVudGlmaWVyID0gcGFyc2VJbnQob3NjLnN1YnN0cmluZygwLCBpZHgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udGVudCA9IG9zYy5zdWJzdHJpbmcoaWR4ICsgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgPSB0aGlzLl9vc2NIYW5kbGVyc1tpZGVudGlmaWVyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGNvbnRlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3NjSGFuZGxlckZiKGlkZW50aWZpZXIsIGNvbnRlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2RlID09PSAweDFiKVxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbiB8PSAxO1xuICAgICAgICAgICAgICAgICAgICBvc2MgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zID0gWzBdO1xuICAgICAgICAgICAgICAgICAgICBjb2xsZWN0ID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGRjcyA9IC0xO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJlbnRTdGF0ZSA9IHRyYW5zaXRpb24gJiAxNTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudFN0YXRlID09PSAwICYmIH5wcmludCkge1xuICAgICAgICAgICAgdGhpcy5fcHJpbnRIYW5kbGVyKGRhdGEsIHByaW50LCBkYXRhLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY3VycmVudFN0YXRlID09PSAxMyAmJiB+ZGNzICYmIGRjc0hhbmRsZXIpIHtcbiAgICAgICAgICAgIGRjc0hhbmRsZXIucHV0KGRhdGEsIGRjcywgZGF0YS5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX29zYyA9IG9zYztcbiAgICAgICAgdGhpcy5fY29sbGVjdCA9IGNvbGxlY3Q7XG4gICAgICAgIHRoaXMuX3BhcmFtcyA9IHBhcmFtcztcbiAgICAgICAgdGhpcy5fYWN0aXZlRGNzSGFuZGxlciA9IGRjc0hhbmRsZXI7XG4gICAgICAgIHRoaXMuY3VycmVudFN0YXRlID0gY3VycmVudFN0YXRlO1xuICAgIH07XG4gICAgcmV0dXJuIEVzY2FwZVNlcXVlbmNlUGFyc2VyO1xufShMaWZlY3ljbGVfMS5EaXNwb3NhYmxlKSk7XG5leHBvcnRzLkVzY2FwZVNlcXVlbmNlUGFyc2VyID0gRXNjYXBlU2VxdWVuY2VQYXJzZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Fc2NhcGVTZXF1ZW5jZVBhcnNlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgVGV4dFJlbmRlckxheWVyXzEgPSByZXF1aXJlKFwiLi9UZXh0UmVuZGVyTGF5ZXJcIik7XG52YXIgU2VsZWN0aW9uUmVuZGVyTGF5ZXJfMSA9IHJlcXVpcmUoXCIuL1NlbGVjdGlvblJlbmRlckxheWVyXCIpO1xudmFyIEN1cnNvclJlbmRlckxheWVyXzEgPSByZXF1aXJlKFwiLi9DdXJzb3JSZW5kZXJMYXllclwiKTtcbnZhciBDb2xvck1hbmFnZXJfMSA9IHJlcXVpcmUoXCIuL0NvbG9yTWFuYWdlclwiKTtcbnZhciBMaW5rUmVuZGVyTGF5ZXJfMSA9IHJlcXVpcmUoXCIuL0xpbmtSZW5kZXJMYXllclwiKTtcbnZhciBFdmVudEVtaXR0ZXJfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vRXZlbnRFbWl0dGVyXCIpO1xudmFyIFJlbmRlckRlYm91bmNlcl8xID0gcmVxdWlyZShcIi4uL3VpL1JlbmRlckRlYm91bmNlclwiKTtcbnZhciBTY3JlZW5EcHJNb25pdG9yXzEgPSByZXF1aXJlKFwiLi4vdWkvU2NyZWVuRHByTW9uaXRvclwiKTtcbnZhciBDaGFyYWN0ZXJKb2luZXJSZWdpc3RyeV8xID0gcmVxdWlyZShcIi4uL3JlbmRlcmVyL0NoYXJhY3RlckpvaW5lclJlZ2lzdHJ5XCIpO1xudmFyIFJlbmRlcmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUmVuZGVyZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmVuZGVyZXIoX3Rlcm1pbmFsLCB0aGVtZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fdGVybWluYWwgPSBfdGVybWluYWw7XG4gICAgICAgIF90aGlzLl9pc1BhdXNlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5fbmVlZHNGdWxsUmVmcmVzaCA9IGZhbHNlO1xuICAgICAgICB2YXIgYWxsb3dUcmFuc3BhcmVuY3kgPSBfdGhpcy5fdGVybWluYWwub3B0aW9ucy5hbGxvd1RyYW5zcGFyZW5jeTtcbiAgICAgICAgX3RoaXMuY29sb3JNYW5hZ2VyID0gbmV3IENvbG9yTWFuYWdlcl8xLkNvbG9yTWFuYWdlcihkb2N1bWVudCwgYWxsb3dUcmFuc3BhcmVuY3kpO1xuICAgICAgICBfdGhpcy5fY2hhcmFjdGVySm9pbmVyUmVnaXN0cnkgPSBuZXcgQ2hhcmFjdGVySm9pbmVyUmVnaXN0cnlfMS5DaGFyYWN0ZXJKb2luZXJSZWdpc3RyeShfdGVybWluYWwpO1xuICAgICAgICBpZiAodGhlbWUpIHtcbiAgICAgICAgICAgIF90aGlzLmNvbG9yTWFuYWdlci5zZXRUaGVtZSh0aGVtZSk7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuX3JlbmRlckxheWVycyA9IFtcbiAgICAgICAgICAgIG5ldyBUZXh0UmVuZGVyTGF5ZXJfMS5UZXh0UmVuZGVyTGF5ZXIoX3RoaXMuX3Rlcm1pbmFsLnNjcmVlbkVsZW1lbnQsIDAsIF90aGlzLmNvbG9yTWFuYWdlci5jb2xvcnMsIF90aGlzLl9jaGFyYWN0ZXJKb2luZXJSZWdpc3RyeSwgYWxsb3dUcmFuc3BhcmVuY3kpLFxuICAgICAgICAgICAgbmV3IFNlbGVjdGlvblJlbmRlckxheWVyXzEuU2VsZWN0aW9uUmVuZGVyTGF5ZXIoX3RoaXMuX3Rlcm1pbmFsLnNjcmVlbkVsZW1lbnQsIDEsIF90aGlzLmNvbG9yTWFuYWdlci5jb2xvcnMpLFxuICAgICAgICAgICAgbmV3IExpbmtSZW5kZXJMYXllcl8xLkxpbmtSZW5kZXJMYXllcihfdGhpcy5fdGVybWluYWwuc2NyZWVuRWxlbWVudCwgMiwgX3RoaXMuY29sb3JNYW5hZ2VyLmNvbG9ycywgX3RoaXMuX3Rlcm1pbmFsKSxcbiAgICAgICAgICAgIG5ldyBDdXJzb3JSZW5kZXJMYXllcl8xLkN1cnNvclJlbmRlckxheWVyKF90aGlzLl90ZXJtaW5hbC5zY3JlZW5FbGVtZW50LCAzLCBfdGhpcy5jb2xvck1hbmFnZXIuY29sb3JzKVxuICAgICAgICBdO1xuICAgICAgICBfdGhpcy5kaW1lbnNpb25zID0ge1xuICAgICAgICAgICAgc2NhbGVkQ2hhcldpZHRoOiBudWxsLFxuICAgICAgICAgICAgc2NhbGVkQ2hhckhlaWdodDogbnVsbCxcbiAgICAgICAgICAgIHNjYWxlZENlbGxXaWR0aDogbnVsbCxcbiAgICAgICAgICAgIHNjYWxlZENlbGxIZWlnaHQ6IG51bGwsXG4gICAgICAgICAgICBzY2FsZWRDaGFyTGVmdDogbnVsbCxcbiAgICAgICAgICAgIHNjYWxlZENoYXJUb3A6IG51bGwsXG4gICAgICAgICAgICBzY2FsZWRDYW52YXNXaWR0aDogbnVsbCxcbiAgICAgICAgICAgIHNjYWxlZENhbnZhc0hlaWdodDogbnVsbCxcbiAgICAgICAgICAgIGNhbnZhc1dpZHRoOiBudWxsLFxuICAgICAgICAgICAgY2FudmFzSGVpZ2h0OiBudWxsLFxuICAgICAgICAgICAgYWN0dWFsQ2VsbFdpZHRoOiBudWxsLFxuICAgICAgICAgICAgYWN0dWFsQ2VsbEhlaWdodDogbnVsbFxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5fZGV2aWNlUGl4ZWxSYXRpbyA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgICAgICBfdGhpcy5fdXBkYXRlRGltZW5zaW9ucygpO1xuICAgICAgICBfdGhpcy5vbk9wdGlvbnNDaGFuZ2VkKCk7XG4gICAgICAgIF90aGlzLl9yZW5kZXJEZWJvdW5jZXIgPSBuZXcgUmVuZGVyRGVib3VuY2VyXzEuUmVuZGVyRGVib3VuY2VyKF90aGlzLl90ZXJtaW5hbCwgX3RoaXMuX3JlbmRlclJvd3MuYmluZChfdGhpcykpO1xuICAgICAgICBfdGhpcy5fc2NyZWVuRHByTW9uaXRvciA9IG5ldyBTY3JlZW5EcHJNb25pdG9yXzEuU2NyZWVuRHByTW9uaXRvcigpO1xuICAgICAgICBfdGhpcy5fc2NyZWVuRHByTW9uaXRvci5zZXRMaXN0ZW5lcihmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5vbldpbmRvd1Jlc2l6ZSh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7IH0pO1xuICAgICAgICBfdGhpcy5yZWdpc3RlcihfdGhpcy5fc2NyZWVuRHByTW9uaXRvcik7XG4gICAgICAgIGlmICgnSW50ZXJzZWN0aW9uT2JzZXJ2ZXInIGluIHdpbmRvdykge1xuICAgICAgICAgICAgdmFyIG9ic2VydmVyXzEgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIF90aGlzLm9uSW50ZXJzZWN0aW9uQ2hhbmdlKGVbMF0pOyB9LCB7IHRocmVzaG9sZDogMCB9KTtcbiAgICAgICAgICAgIG9ic2VydmVyXzEub2JzZXJ2ZShfdGhpcy5fdGVybWluYWwuZWxlbWVudCk7XG4gICAgICAgICAgICBfdGhpcy5yZWdpc3Rlcih7IGRpc3Bvc2U6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9ic2VydmVyXzEuZGlzY29ubmVjdCgpOyB9IH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUmVuZGVyZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLl9yZW5kZXJMYXllcnMuZm9yRWFjaChmdW5jdGlvbiAobCkgeyByZXR1cm4gbC5kaXNwb3NlKCk7IH0pO1xuICAgIH07XG4gICAgUmVuZGVyZXIucHJvdG90eXBlLm9uSW50ZXJzZWN0aW9uQ2hhbmdlID0gZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgIHRoaXMuX2lzUGF1c2VkID0gZW50cnkuaW50ZXJzZWN0aW9uUmF0aW8gPT09IDA7XG4gICAgICAgIGlmICghdGhpcy5faXNQYXVzZWQgJiYgdGhpcy5fbmVlZHNGdWxsUmVmcmVzaCkge1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwucmVmcmVzaCgwLCB0aGlzLl90ZXJtaW5hbC5yb3dzIC0gMSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlbmRlcmVyLnByb3RvdHlwZS5vbldpbmRvd1Jlc2l6ZSA9IGZ1bmN0aW9uIChkZXZpY2VQaXhlbFJhdGlvKSB7XG4gICAgICAgIGlmICh0aGlzLl9kZXZpY2VQaXhlbFJhdGlvICE9PSBkZXZpY2VQaXhlbFJhdGlvKSB7XG4gICAgICAgICAgICB0aGlzLl9kZXZpY2VQaXhlbFJhdGlvID0gZGV2aWNlUGl4ZWxSYXRpbztcbiAgICAgICAgICAgIHRoaXMub25SZXNpemUodGhpcy5fdGVybWluYWwuY29scywgdGhpcy5fdGVybWluYWwucm93cyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlbmRlcmVyLnByb3RvdHlwZS5zZXRUaGVtZSA9IGZ1bmN0aW9uICh0aGVtZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmNvbG9yTWFuYWdlci5zZXRUaGVtZSh0aGVtZSk7XG4gICAgICAgIHRoaXMuX3JlbmRlckxheWVycy5mb3JFYWNoKGZ1bmN0aW9uIChsKSB7XG4gICAgICAgICAgICBsLm9uVGhlbWVDaGFuZ2VkKF90aGlzLl90ZXJtaW5hbCwgX3RoaXMuY29sb3JNYW5hZ2VyLmNvbG9ycyk7XG4gICAgICAgICAgICBsLnJlc2V0KF90aGlzLl90ZXJtaW5hbCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodGhpcy5faXNQYXVzZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX25lZWRzRnVsbFJlZnJlc2ggPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwucmVmcmVzaCgwLCB0aGlzLl90ZXJtaW5hbC5yb3dzIC0gMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuY29sb3JNYW5hZ2VyLmNvbG9ycztcbiAgICB9O1xuICAgIFJlbmRlcmVyLnByb3RvdHlwZS5vblJlc2l6ZSA9IGZ1bmN0aW9uIChjb2xzLCByb3dzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuX3VwZGF0ZURpbWVuc2lvbnMoKTtcbiAgICAgICAgdGhpcy5fcmVuZGVyTGF5ZXJzLmZvckVhY2goZnVuY3Rpb24gKGwpIHsgcmV0dXJuIGwucmVzaXplKF90aGlzLl90ZXJtaW5hbCwgX3RoaXMuZGltZW5zaW9ucyk7IH0pO1xuICAgICAgICBpZiAodGhpcy5faXNQYXVzZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX25lZWRzRnVsbFJlZnJlc2ggPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwucmVmcmVzaCgwLCB0aGlzLl90ZXJtaW5hbC5yb3dzIC0gMSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdGVybWluYWwuc2NyZWVuRWxlbWVudC5zdHlsZS53aWR0aCA9IHRoaXMuZGltZW5zaW9ucy5jYW52YXNXaWR0aCArIFwicHhcIjtcbiAgICAgICAgdGhpcy5fdGVybWluYWwuc2NyZWVuRWxlbWVudC5zdHlsZS5oZWlnaHQgPSB0aGlzLmRpbWVuc2lvbnMuY2FudmFzSGVpZ2h0ICsgXCJweFwiO1xuICAgICAgICB0aGlzLmVtaXQoJ3Jlc2l6ZScsIHtcbiAgICAgICAgICAgIHdpZHRoOiB0aGlzLmRpbWVuc2lvbnMuY2FudmFzV2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IHRoaXMuZGltZW5zaW9ucy5jYW52YXNIZWlnaHRcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBSZW5kZXJlci5wcm90b3R5cGUub25DaGFyU2l6ZUNoYW5nZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMub25SZXNpemUodGhpcy5fdGVybWluYWwuY29scywgdGhpcy5fdGVybWluYWwucm93cyk7XG4gICAgfTtcbiAgICBSZW5kZXJlci5wcm90b3R5cGUub25CbHVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLl9ydW5PcGVyYXRpb24oZnVuY3Rpb24gKGwpIHsgcmV0dXJuIGwub25CbHVyKF90aGlzLl90ZXJtaW5hbCk7IH0pO1xuICAgIH07XG4gICAgUmVuZGVyZXIucHJvdG90eXBlLm9uRm9jdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuX3J1bk9wZXJhdGlvbihmdW5jdGlvbiAobCkgeyByZXR1cm4gbC5vbkZvY3VzKF90aGlzLl90ZXJtaW5hbCk7IH0pO1xuICAgIH07XG4gICAgUmVuZGVyZXIucHJvdG90eXBlLm9uU2VsZWN0aW9uQ2hhbmdlZCA9IGZ1bmN0aW9uIChzdGFydCwgZW5kLCBjb2x1bW5TZWxlY3RNb2RlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChjb2x1bW5TZWxlY3RNb2RlID09PSB2b2lkIDApIHsgY29sdW1uU2VsZWN0TW9kZSA9IGZhbHNlOyB9XG4gICAgICAgIHRoaXMuX3J1bk9wZXJhdGlvbihmdW5jdGlvbiAobCkgeyByZXR1cm4gbC5vblNlbGVjdGlvbkNoYW5nZWQoX3RoaXMuX3Rlcm1pbmFsLCBzdGFydCwgZW5kLCBjb2x1bW5TZWxlY3RNb2RlKTsgfSk7XG4gICAgfTtcbiAgICBSZW5kZXJlci5wcm90b3R5cGUub25DdXJzb3JNb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLl9ydW5PcGVyYXRpb24oZnVuY3Rpb24gKGwpIHsgcmV0dXJuIGwub25DdXJzb3JNb3ZlKF90aGlzLl90ZXJtaW5hbCk7IH0pO1xuICAgIH07XG4gICAgUmVuZGVyZXIucHJvdG90eXBlLm9uT3B0aW9uc0NoYW5nZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuY29sb3JNYW5hZ2VyLmFsbG93VHJhbnNwYXJlbmN5ID0gdGhpcy5fdGVybWluYWwub3B0aW9ucy5hbGxvd1RyYW5zcGFyZW5jeTtcbiAgICAgICAgdGhpcy5fcnVuT3BlcmF0aW9uKGZ1bmN0aW9uIChsKSB7IHJldHVybiBsLm9uT3B0aW9uc0NoYW5nZWQoX3RoaXMuX3Rlcm1pbmFsKTsgfSk7XG4gICAgfTtcbiAgICBSZW5kZXJlci5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuX3J1bk9wZXJhdGlvbihmdW5jdGlvbiAobCkgeyByZXR1cm4gbC5yZXNldChfdGhpcy5fdGVybWluYWwpOyB9KTtcbiAgICB9O1xuICAgIFJlbmRlcmVyLnByb3RvdHlwZS5fcnVuT3BlcmF0aW9uID0gZnVuY3Rpb24gKG9wZXJhdGlvbikge1xuICAgICAgICBpZiAodGhpcy5faXNQYXVzZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX25lZWRzRnVsbFJlZnJlc2ggPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyTGF5ZXJzLmZvckVhY2goZnVuY3Rpb24gKGwpIHsgcmV0dXJuIG9wZXJhdGlvbihsKTsgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlbmRlcmVyLnByb3RvdHlwZS5yZWZyZXNoUm93cyA9IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgICAgIGlmICh0aGlzLl9pc1BhdXNlZCkge1xuICAgICAgICAgICAgdGhpcy5fbmVlZHNGdWxsUmVmcmVzaCA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVuZGVyRGVib3VuY2VyLnJlZnJlc2goc3RhcnQsIGVuZCk7XG4gICAgfTtcbiAgICBSZW5kZXJlci5wcm90b3R5cGUuX3JlbmRlclJvd3MgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLl9yZW5kZXJMYXllcnMuZm9yRWFjaChmdW5jdGlvbiAobCkgeyByZXR1cm4gbC5vbkdyaWRDaGFuZ2VkKF90aGlzLl90ZXJtaW5hbCwgc3RhcnQsIGVuZCk7IH0pO1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5lbWl0KCdyZWZyZXNoJywgeyBzdGFydDogc3RhcnQsIGVuZDogZW5kIH0pO1xuICAgIH07XG4gICAgUmVuZGVyZXIucHJvdG90eXBlLl91cGRhdGVEaW1lbnNpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3Rlcm1pbmFsLmNoYXJNZWFzdXJlLndpZHRoIHx8ICF0aGlzLl90ZXJtaW5hbC5jaGFyTWVhc3VyZS5oZWlnaHQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2hhcldpZHRoID0gTWF0aC5mbG9vcih0aGlzLl90ZXJtaW5hbC5jaGFyTWVhc3VyZS53aWR0aCAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTtcbiAgICAgICAgdGhpcy5kaW1lbnNpb25zLnNjYWxlZENoYXJIZWlnaHQgPSBNYXRoLmNlaWwodGhpcy5fdGVybWluYWwuY2hhck1lYXN1cmUuaGVpZ2h0ICogd2luZG93LmRldmljZVBpeGVsUmF0aW8pO1xuICAgICAgICB0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2VsbEhlaWdodCA9IE1hdGguZmxvb3IodGhpcy5kaW1lbnNpb25zLnNjYWxlZENoYXJIZWlnaHQgKiB0aGlzLl90ZXJtaW5hbC5vcHRpb25zLmxpbmVIZWlnaHQpO1xuICAgICAgICB0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2hhclRvcCA9IHRoaXMuX3Rlcm1pbmFsLm9wdGlvbnMubGluZUhlaWdodCA9PT0gMSA/IDAgOiBNYXRoLnJvdW5kKCh0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2VsbEhlaWdodCAtIHRoaXMuZGltZW5zaW9ucy5zY2FsZWRDaGFySGVpZ2h0KSAvIDIpO1xuICAgICAgICB0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2VsbFdpZHRoID0gdGhpcy5kaW1lbnNpb25zLnNjYWxlZENoYXJXaWR0aCArIE1hdGgucm91bmQodGhpcy5fdGVybWluYWwub3B0aW9ucy5sZXR0ZXJTcGFjaW5nKTtcbiAgICAgICAgdGhpcy5kaW1lbnNpb25zLnNjYWxlZENoYXJMZWZ0ID0gTWF0aC5mbG9vcih0aGlzLl90ZXJtaW5hbC5vcHRpb25zLmxldHRlclNwYWNpbmcgLyAyKTtcbiAgICAgICAgdGhpcy5kaW1lbnNpb25zLnNjYWxlZENhbnZhc0hlaWdodCA9IHRoaXMuX3Rlcm1pbmFsLnJvd3MgKiB0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2VsbEhlaWdodDtcbiAgICAgICAgdGhpcy5kaW1lbnNpb25zLnNjYWxlZENhbnZhc1dpZHRoID0gdGhpcy5fdGVybWluYWwuY29scyAqIHRoaXMuZGltZW5zaW9ucy5zY2FsZWRDZWxsV2lkdGg7XG4gICAgICAgIHRoaXMuZGltZW5zaW9ucy5jYW52YXNIZWlnaHQgPSBNYXRoLnJvdW5kKHRoaXMuZGltZW5zaW9ucy5zY2FsZWRDYW52YXNIZWlnaHQgLyB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XG4gICAgICAgIHRoaXMuZGltZW5zaW9ucy5jYW52YXNXaWR0aCA9IE1hdGgucm91bmQodGhpcy5kaW1lbnNpb25zLnNjYWxlZENhbnZhc1dpZHRoIC8gd2luZG93LmRldmljZVBpeGVsUmF0aW8pO1xuICAgICAgICB0aGlzLmRpbWVuc2lvbnMuYWN0dWFsQ2VsbEhlaWdodCA9IHRoaXMuZGltZW5zaW9ucy5jYW52YXNIZWlnaHQgLyB0aGlzLl90ZXJtaW5hbC5yb3dzO1xuICAgICAgICB0aGlzLmRpbWVuc2lvbnMuYWN0dWFsQ2VsbFdpZHRoID0gdGhpcy5kaW1lbnNpb25zLmNhbnZhc1dpZHRoIC8gdGhpcy5fdGVybWluYWwuY29scztcbiAgICB9O1xuICAgIFJlbmRlcmVyLnByb3RvdHlwZS5yZWdpc3RlckNoYXJhY3RlckpvaW5lciA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jaGFyYWN0ZXJKb2luZXJSZWdpc3RyeS5yZWdpc3RlckNoYXJhY3RlckpvaW5lcihoYW5kbGVyKTtcbiAgICB9O1xuICAgIFJlbmRlcmVyLnByb3RvdHlwZS5kZXJlZ2lzdGVyQ2hhcmFjdGVySm9pbmVyID0gZnVuY3Rpb24gKGpvaW5lcklkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jaGFyYWN0ZXJKb2luZXJSZWdpc3RyeS5kZXJlZ2lzdGVyQ2hhcmFjdGVySm9pbmVyKGpvaW5lcklkKTtcbiAgICB9O1xuICAgIHJldHVybiBSZW5kZXJlcjtcbn0oRXZlbnRFbWl0dGVyXzEuRXZlbnRFbWl0dGVyKSk7XG5leHBvcnRzLlJlbmRlcmVyID0gUmVuZGVyZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZW5kZXJlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQnVmZmVyXzEgPSByZXF1aXJlKFwiLi4vQnVmZmVyXCIpO1xudmFyIFR5cGVzXzEgPSByZXF1aXJlKFwiLi9hdGxhcy9UeXBlc1wiKTtcbnZhciBHcmlkQ2FjaGVfMSA9IHJlcXVpcmUoXCIuL0dyaWRDYWNoZVwiKTtcbnZhciBCYXNlUmVuZGVyTGF5ZXJfMSA9IHJlcXVpcmUoXCIuL0Jhc2VSZW5kZXJMYXllclwiKTtcbnZhciBDaGFyQXRsYXNVdGlsc18xID0gcmVxdWlyZShcIi4vYXRsYXMvQ2hhckF0bGFzVXRpbHNcIik7XG52YXIgVGV4dFJlbmRlckxheWVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVGV4dFJlbmRlckxheWVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFRleHRSZW5kZXJMYXllcihjb250YWluZXIsIHpJbmRleCwgY29sb3JzLCBjaGFyYWN0ZXJKb2luZXJSZWdpc3RyeSwgYWxwaGEpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY29udGFpbmVyLCAndGV4dCcsIHpJbmRleCwgYWxwaGEsIGNvbG9ycykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX2NoYXJhY3Rlck92ZXJsYXBDYWNoZSA9IHt9O1xuICAgICAgICBfdGhpcy5fc3RhdGUgPSBuZXcgR3JpZENhY2hlXzEuR3JpZENhY2hlKCk7XG4gICAgICAgIF90aGlzLl9jaGFyYWN0ZXJKb2luZXJSZWdpc3RyeSA9IGNoYXJhY3RlckpvaW5lclJlZ2lzdHJ5O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFRleHRSZW5kZXJMYXllci5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24gKHRlcm1pbmFsLCBkaW0pIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5yZXNpemUuY2FsbCh0aGlzLCB0ZXJtaW5hbCwgZGltKTtcbiAgICAgICAgdmFyIHRlcm1pbmFsRm9udCA9IHRoaXMuX2dldEZvbnQodGVybWluYWwsIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgIGlmICh0aGlzLl9jaGFyYWN0ZXJXaWR0aCAhPT0gZGltLnNjYWxlZENoYXJXaWR0aCB8fCB0aGlzLl9jaGFyYWN0ZXJGb250ICE9PSB0ZXJtaW5hbEZvbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX2NoYXJhY3RlcldpZHRoID0gZGltLnNjYWxlZENoYXJXaWR0aDtcbiAgICAgICAgICAgIHRoaXMuX2NoYXJhY3RlckZvbnQgPSB0ZXJtaW5hbEZvbnQ7XG4gICAgICAgICAgICB0aGlzLl9jaGFyYWN0ZXJPdmVybGFwQ2FjaGUgPSB7fTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zdGF0ZS5jbGVhcigpO1xuICAgICAgICB0aGlzLl9zdGF0ZS5yZXNpemUodGVybWluYWwuY29scywgdGVybWluYWwucm93cyk7XG4gICAgfTtcbiAgICBUZXh0UmVuZGVyTGF5ZXIucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKHRlcm1pbmFsKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuY2xlYXJBbGwoKTtcbiAgICB9O1xuICAgIFRleHRSZW5kZXJMYXllci5wcm90b3R5cGUuX2ZvckVhY2hDZWxsID0gZnVuY3Rpb24gKHRlcm1pbmFsLCBmaXJzdFJvdywgbGFzdFJvdywgam9pbmVyUmVnaXN0cnksIGNhbGxiYWNrKSB7XG4gICAgICAgIGZvciAodmFyIHkgPSBmaXJzdFJvdzsgeSA8PSBsYXN0Um93OyB5KyspIHtcbiAgICAgICAgICAgIHZhciByb3cgPSB5ICsgdGVybWluYWwuYnVmZmVyLnlkaXNwO1xuICAgICAgICAgICAgdmFyIGxpbmUgPSB0ZXJtaW5hbC5idWZmZXIubGluZXMuZ2V0KHJvdyk7XG4gICAgICAgICAgICB2YXIgam9pbmVkUmFuZ2VzID0gam9pbmVyUmVnaXN0cnkgPyBqb2luZXJSZWdpc3RyeS5nZXRKb2luZWRDaGFyYWN0ZXJzKHJvdykgOiBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgdGVybWluYWwuY29sczsgeCsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNoYXJEYXRhID0gbGluZS5nZXQoeCk7XG4gICAgICAgICAgICAgICAgdmFyIGNvZGUgPSBjaGFyRGF0YVtCdWZmZXJfMS5DSEFSX0RBVEFfQ09ERV9JTkRFWF07XG4gICAgICAgICAgICAgICAgdmFyIGNoYXJzID0gY2hhckRhdGFbQnVmZmVyXzEuQ0hBUl9EQVRBX0NIQVJfSU5ERVhdO1xuICAgICAgICAgICAgICAgIHZhciBhdHRyID0gY2hhckRhdGFbQnVmZmVyXzEuQ0hBUl9EQVRBX0FUVFJfSU5ERVhdO1xuICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IGNoYXJEYXRhW0J1ZmZlcl8xLkNIQVJfREFUQV9XSURUSF9JTkRFWF07XG4gICAgICAgICAgICAgICAgdmFyIGlzSm9pbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdmFyIGxhc3RDaGFyWCA9IHg7XG4gICAgICAgICAgICAgICAgaWYgKHdpZHRoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoam9pbmVkUmFuZ2VzLmxlbmd0aCA+IDAgJiYgeCA9PT0gam9pbmVkUmFuZ2VzWzBdWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgIGlzSm9pbmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJhbmdlID0gam9pbmVkUmFuZ2VzLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJzID0gdGVybWluYWwuYnVmZmVyLnRyYW5zbGF0ZUJ1ZmZlckxpbmVUb1N0cmluZyhyb3csIHRydWUsIHJhbmdlWzBdLCByYW5nZVsxXSk7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoID0gcmFuZ2VbMV0gLSByYW5nZVswXTtcbiAgICAgICAgICAgICAgICAgICAgY29kZSA9IEluZmluaXR5O1xuICAgICAgICAgICAgICAgICAgICBsYXN0Q2hhclggPSByYW5nZVsxXSAtIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghaXNKb2luZWQgJiYgdGhpcy5faXNPdmVybGFwcGluZyhjaGFyRGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3RDaGFyWCA8IGxpbmUubGVuZ3RoIC0gMSAmJiBsaW5lLmdldChsYXN0Q2hhclggKyAxKVtCdWZmZXJfMS5DSEFSX0RBVEFfQ09ERV9JTkRFWF0gPT09IEJ1ZmZlcl8xLk5VTExfQ0VMTF9DT0RFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IDI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGZsYWdzID0gYXR0ciA+PiAxODtcbiAgICAgICAgICAgICAgICB2YXIgYmcgPSBhdHRyICYgMHgxZmY7XG4gICAgICAgICAgICAgICAgdmFyIGZnID0gKGF0dHIgPj4gOSkgJiAweDFmZjtcbiAgICAgICAgICAgICAgICBpZiAoZmxhZ3MgJiA4KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZW1wID0gYmc7XG4gICAgICAgICAgICAgICAgICAgIGJnID0gZmc7XG4gICAgICAgICAgICAgICAgICAgIGZnID0gdGVtcDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZnID09PSBUeXBlc18xLkRFRkFVTFRfQ09MT1IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZnID0gVHlwZXNfMS5JTlZFUlRFRF9ERUZBVUxUX0NPTE9SO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChiZyA9PT0gVHlwZXNfMS5ERUZBVUxUX0NPTE9SKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiZyA9IFR5cGVzXzEuSU5WRVJURURfREVGQVVMVF9DT0xPUjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYWxsYmFjayhjb2RlLCBjaGFycywgd2lkdGgsIHgsIHksIGZnLCBiZywgZmxhZ3MpO1xuICAgICAgICAgICAgICAgIHggPSBsYXN0Q2hhclg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFRleHRSZW5kZXJMYXllci5wcm90b3R5cGUuX2RyYXdCYWNrZ3JvdW5kID0gZnVuY3Rpb24gKHRlcm1pbmFsLCBmaXJzdFJvdywgbGFzdFJvdykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgY3R4ID0gdGhpcy5fY3R4O1xuICAgICAgICB2YXIgY29scyA9IHRlcm1pbmFsLmNvbHM7XG4gICAgICAgIHZhciBzdGFydFggPSAwO1xuICAgICAgICB2YXIgc3RhcnRZID0gMDtcbiAgICAgICAgdmFyIHByZXZGaWxsU3R5bGUgPSBudWxsO1xuICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICB0aGlzLl9mb3JFYWNoQ2VsbCh0ZXJtaW5hbCwgZmlyc3RSb3csIGxhc3RSb3csIG51bGwsIGZ1bmN0aW9uIChjb2RlLCBjaGFycywgd2lkdGgsIHgsIHksIGZnLCBiZywgZmxhZ3MpIHtcbiAgICAgICAgICAgIHZhciBuZXh0RmlsbFN0eWxlID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChiZyA9PT0gVHlwZXNfMS5JTlZFUlRFRF9ERUZBVUxUX0NPTE9SKSB7XG4gICAgICAgICAgICAgICAgbmV4dEZpbGxTdHlsZSA9IF90aGlzLl9jb2xvcnMuZm9yZWdyb3VuZC5jc3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChDaGFyQXRsYXNVdGlsc18xLmlzMjU2Q29sb3IoYmcpKSB7XG4gICAgICAgICAgICAgICAgbmV4dEZpbGxTdHlsZSA9IF90aGlzLl9jb2xvcnMuYW5zaVtiZ10uY3NzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHByZXZGaWxsU3R5bGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBzdGFydFggPSB4O1xuICAgICAgICAgICAgICAgIHN0YXJ0WSA9IHk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoeSAhPT0gc3RhcnRZKSB7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHByZXZGaWxsU3R5bGU7XG4gICAgICAgICAgICAgICAgX3RoaXMuZmlsbENlbGxzKHN0YXJ0WCwgc3RhcnRZLCBjb2xzIC0gc3RhcnRYLCAxKTtcbiAgICAgICAgICAgICAgICBzdGFydFggPSB4O1xuICAgICAgICAgICAgICAgIHN0YXJ0WSA9IHk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwcmV2RmlsbFN0eWxlICE9PSBuZXh0RmlsbFN0eWxlKSB7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHByZXZGaWxsU3R5bGU7XG4gICAgICAgICAgICAgICAgX3RoaXMuZmlsbENlbGxzKHN0YXJ0WCwgc3RhcnRZLCB4IC0gc3RhcnRYLCAxKTtcbiAgICAgICAgICAgICAgICBzdGFydFggPSB4O1xuICAgICAgICAgICAgICAgIHN0YXJ0WSA9IHk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmV2RmlsbFN0eWxlID0gbmV4dEZpbGxTdHlsZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChwcmV2RmlsbFN0eWxlICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gcHJldkZpbGxTdHlsZTtcbiAgICAgICAgICAgIHRoaXMuZmlsbENlbGxzKHN0YXJ0WCwgc3RhcnRZLCBjb2xzIC0gc3RhcnRYLCAxKTtcbiAgICAgICAgfVxuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH07XG4gICAgVGV4dFJlbmRlckxheWVyLnByb3RvdHlwZS5fZHJhd0ZvcmVncm91bmQgPSBmdW5jdGlvbiAodGVybWluYWwsIGZpcnN0Um93LCBsYXN0Um93KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuX2ZvckVhY2hDZWxsKHRlcm1pbmFsLCBmaXJzdFJvdywgbGFzdFJvdywgdGhpcy5fY2hhcmFjdGVySm9pbmVyUmVnaXN0cnksIGZ1bmN0aW9uIChjb2RlLCBjaGFycywgd2lkdGgsIHgsIHksIGZnLCBiZywgZmxhZ3MpIHtcbiAgICAgICAgICAgIGlmIChmbGFncyAmIDE2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZsYWdzICYgMikge1xuICAgICAgICAgICAgICAgIF90aGlzLl9jdHguc2F2ZSgpO1xuICAgICAgICAgICAgICAgIGlmIChmZyA9PT0gVHlwZXNfMS5JTlZFUlRFRF9ERUZBVUxUX0NPTE9SKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9jdHguZmlsbFN0eWxlID0gX3RoaXMuX2NvbG9ycy5iYWNrZ3JvdW5kLmNzcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoQ2hhckF0bGFzVXRpbHNfMS5pczI1NkNvbG9yKGZnKSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fY3R4LmZpbGxTdHlsZSA9IF90aGlzLl9jb2xvcnMuYW5zaVtmZ10uY3NzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2N0eC5maWxsU3R5bGUgPSBfdGhpcy5fY29sb3JzLmZvcmVncm91bmQuY3NzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfdGhpcy5maWxsQm90dG9tTGluZUF0Q2VsbHMoeCwgeSwgd2lkdGgpO1xuICAgICAgICAgICAgICAgIF90aGlzLl9jdHgucmVzdG9yZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMuZHJhd0NoYXJzKHRlcm1pbmFsLCBjaGFycywgY29kZSwgd2lkdGgsIHgsIHksIGZnLCBiZywgISEoZmxhZ3MgJiAxKSwgISEoZmxhZ3MgJiAzMiksICEhKGZsYWdzICYgNjQpKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBUZXh0UmVuZGVyTGF5ZXIucHJvdG90eXBlLm9uR3JpZENoYW5nZWQgPSBmdW5jdGlvbiAodGVybWluYWwsIGZpcnN0Um93LCBsYXN0Um93KSB7XG4gICAgICAgIGlmICh0aGlzLl9zdGF0ZS5jYWNoZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fY2hhckF0bGFzKSB7XG4gICAgICAgICAgICB0aGlzLl9jaGFyQXRsYXMuYmVnaW5GcmFtZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2xlYXJDZWxscygwLCBmaXJzdFJvdywgdGVybWluYWwuY29scywgbGFzdFJvdyAtIGZpcnN0Um93ICsgMSk7XG4gICAgICAgIHRoaXMuX2RyYXdCYWNrZ3JvdW5kKHRlcm1pbmFsLCBmaXJzdFJvdywgbGFzdFJvdyk7XG4gICAgICAgIHRoaXMuX2RyYXdGb3JlZ3JvdW5kKHRlcm1pbmFsLCBmaXJzdFJvdywgbGFzdFJvdyk7XG4gICAgfTtcbiAgICBUZXh0UmVuZGVyTGF5ZXIucHJvdG90eXBlLm9uT3B0aW9uc0NoYW5nZWQgPSBmdW5jdGlvbiAodGVybWluYWwpIHtcbiAgICAgICAgdGhpcy5zZXRUcmFuc3BhcmVuY3kodGVybWluYWwsIHRlcm1pbmFsLm9wdGlvbnMuYWxsb3dUcmFuc3BhcmVuY3kpO1xuICAgIH07XG4gICAgVGV4dFJlbmRlckxheWVyLnByb3RvdHlwZS5faXNPdmVybGFwcGluZyA9IGZ1bmN0aW9uIChjaGFyRGF0YSkge1xuICAgICAgICBpZiAoY2hhckRhdGFbQnVmZmVyXzEuQ0hBUl9EQVRBX1dJRFRIX0lOREVYXSAhPT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb2RlID0gY2hhckRhdGFbQnVmZmVyXzEuQ0hBUl9EQVRBX0NPREVfSU5ERVhdO1xuICAgICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjaGFyID0gY2hhckRhdGFbQnVmZmVyXzEuQ0hBUl9EQVRBX0NIQVJfSU5ERVhdO1xuICAgICAgICBpZiAodGhpcy5fY2hhcmFjdGVyT3ZlcmxhcENhY2hlLmhhc093blByb3BlcnR5KGNoYXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY2hhcmFjdGVyT3ZlcmxhcENhY2hlW2NoYXJdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2N0eC5zYXZlKCk7XG4gICAgICAgIHRoaXMuX2N0eC5mb250ID0gdGhpcy5fY2hhcmFjdGVyRm9udDtcbiAgICAgICAgdmFyIG92ZXJsYXBzID0gTWF0aC5mbG9vcih0aGlzLl9jdHgubWVhc3VyZVRleHQoY2hhcikud2lkdGgpID4gdGhpcy5fY2hhcmFjdGVyV2lkdGg7XG4gICAgICAgIHRoaXMuX2N0eC5yZXN0b3JlKCk7XG4gICAgICAgIHRoaXMuX2NoYXJhY3Rlck92ZXJsYXBDYWNoZVtjaGFyXSA9IG92ZXJsYXBzO1xuICAgICAgICByZXR1cm4gb3ZlcmxhcHM7XG4gICAgfTtcbiAgICByZXR1cm4gVGV4dFJlbmRlckxheWVyO1xufShCYXNlUmVuZGVyTGF5ZXJfMS5CYXNlUmVuZGVyTGF5ZXIpKTtcbmV4cG9ydHMuVGV4dFJlbmRlckxheWVyID0gVGV4dFJlbmRlckxheWVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VGV4dFJlbmRlckxheWVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEdyaWRDYWNoZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gR3JpZENhY2hlKCkge1xuICAgICAgICB0aGlzLmNhY2hlID0gW107XG4gICAgfVxuICAgIEdyaWRDYWNoZS5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jYWNoZS5sZW5ndGggPD0geCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2FjaGUucHVzaChbXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciB5ID0gdGhpcy5jYWNoZVt4XS5sZW5ndGg7IHkgPCBoZWlnaHQ7IHkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVbeF0ucHVzaChudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY2FjaGVbeF0ubGVuZ3RoID0gaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2FjaGUubGVuZ3RoID0gd2lkdGg7XG4gICAgfTtcbiAgICBHcmlkQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHRoaXMuY2FjaGUubGVuZ3RoOyB4KyspIHtcbiAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgdGhpcy5jYWNoZVt4XS5sZW5ndGg7IHkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVbeF1beV0gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gR3JpZENhY2hlO1xufSgpKTtcbmV4cG9ydHMuR3JpZENhY2hlID0gR3JpZENhY2hlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9R3JpZENhY2hlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBUeXBlc18xID0gcmVxdWlyZShcIi4vVHlwZXNcIik7XG52YXIgQmFzZUNoYXJBdGxhc18xID0gcmVxdWlyZShcIi4vQmFzZUNoYXJBdGxhc1wiKTtcbnZhciBDb2xvck1hbmFnZXJfMSA9IHJlcXVpcmUoXCIuLi9Db2xvck1hbmFnZXJcIik7XG52YXIgQ2hhckF0bGFzR2VuZXJhdG9yXzEgPSByZXF1aXJlKFwiLi9DaGFyQXRsYXNHZW5lcmF0b3JcIik7XG52YXIgTFJVTWFwXzEgPSByZXF1aXJlKFwiLi9MUlVNYXBcIik7XG52YXIgUGxhdGZvcm1fMSA9IHJlcXVpcmUoXCIuLi8uLi9jb3JlL1BsYXRmb3JtXCIpO1xudmFyIFRFWFRVUkVfV0lEVEggPSAxMDI0O1xudmFyIFRFWFRVUkVfSEVJR0hUID0gMTAyNDtcbnZhciBUUkFOU1BBUkVOVF9DT0xPUiA9IHtcbiAgICBjc3M6ICdyZ2JhKDAsIDAsIDAsIDApJyxcbiAgICByZ2JhOiAwXG59O1xudmFyIEZSQU1FX0NBQ0hFX0RSQVdfTElNSVQgPSAxMDA7XG52YXIgR0xZUEhfQklUTUFQX0NPTU1JVF9ERUxBWSA9IDEwMDtcbmZ1bmN0aW9uIGdldEdseXBoQ2FjaGVLZXkoZ2x5cGgpIHtcbiAgICByZXR1cm4gZ2x5cGguY29kZSA8PCAyMSB8IGdseXBoLmJnIDw8IDEyIHwgZ2x5cGguZmcgPDwgMyB8IChnbHlwaC5ib2xkID8gMCA6IDQpICsgKGdseXBoLmRpbSA/IDAgOiAyKSArIChnbHlwaC5pdGFsaWMgPyAwIDogMSk7XG59XG5leHBvcnRzLmdldEdseXBoQ2FjaGVLZXkgPSBnZXRHbHlwaENhY2hlS2V5O1xudmFyIER5bmFtaWNDaGFyQXRsYXMgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhEeW5hbWljQ2hhckF0bGFzLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIER5bmFtaWNDaGFyQXRsYXMoZG9jdW1lbnQsIF9jb25maWcpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX2NvbmZpZyA9IF9jb25maWc7XG4gICAgICAgIF90aGlzLl9kcmF3VG9DYWNoZUNvdW50ID0gMDtcbiAgICAgICAgX3RoaXMuX2dseXBoc1dhaXRpbmdPbkJpdG1hcCA9IFtdO1xuICAgICAgICBfdGhpcy5fYml0bWFwQ29tbWl0VGltZW91dCA9IG51bGw7XG4gICAgICAgIF90aGlzLl9iaXRtYXAgPSBudWxsO1xuICAgICAgICBfdGhpcy5fY2FjaGVDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgX3RoaXMuX2NhY2hlQ2FudmFzLndpZHRoID0gVEVYVFVSRV9XSURUSDtcbiAgICAgICAgX3RoaXMuX2NhY2hlQ2FudmFzLmhlaWdodCA9IFRFWFRVUkVfSEVJR0hUO1xuICAgICAgICBfdGhpcy5fY2FjaGVDdHggPSBfdGhpcy5fY2FjaGVDYW52YXMuZ2V0Q29udGV4dCgnMmQnLCB7IGFscGhhOiB0cnVlIH0pO1xuICAgICAgICB2YXIgdG1wQ2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgIHRtcENhbnZhcy53aWR0aCA9IF90aGlzLl9jb25maWcuc2NhbGVkQ2hhcldpZHRoO1xuICAgICAgICB0bXBDYW52YXMuaGVpZ2h0ID0gX3RoaXMuX2NvbmZpZy5zY2FsZWRDaGFySGVpZ2h0O1xuICAgICAgICBfdGhpcy5fdG1wQ3R4ID0gdG1wQ2FudmFzLmdldENvbnRleHQoJzJkJywgeyBhbHBoYTogX3RoaXMuX2NvbmZpZy5hbGxvd1RyYW5zcGFyZW5jeSB9KTtcbiAgICAgICAgX3RoaXMuX3dpZHRoID0gTWF0aC5mbG9vcihURVhUVVJFX1dJRFRIIC8gX3RoaXMuX2NvbmZpZy5zY2FsZWRDaGFyV2lkdGgpO1xuICAgICAgICBfdGhpcy5faGVpZ2h0ID0gTWF0aC5mbG9vcihURVhUVVJFX0hFSUdIVCAvIF90aGlzLl9jb25maWcuc2NhbGVkQ2hhckhlaWdodCk7XG4gICAgICAgIHZhciBjYXBhY2l0eSA9IF90aGlzLl93aWR0aCAqIF90aGlzLl9oZWlnaHQ7XG4gICAgICAgIF90aGlzLl9jYWNoZU1hcCA9IG5ldyBMUlVNYXBfMS5kZWZhdWx0KGNhcGFjaXR5KTtcbiAgICAgICAgX3RoaXMuX2NhY2hlTWFwLnByZWFsbG9jKGNhcGFjaXR5KTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBEeW5hbWljQ2hhckF0bGFzLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fYml0bWFwQ29tbWl0VGltZW91dCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLl9iaXRtYXBDb21taXRUaW1lb3V0KTtcbiAgICAgICAgICAgIHRoaXMuX2JpdG1hcENvbW1pdFRpbWVvdXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBEeW5hbWljQ2hhckF0bGFzLnByb3RvdHlwZS5iZWdpbkZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9kcmF3VG9DYWNoZUNvdW50ID0gMDtcbiAgICB9O1xuICAgIER5bmFtaWNDaGFyQXRsYXMucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbiAoY3R4LCBnbHlwaCwgeCwgeSkge1xuICAgICAgICBpZiAoZ2x5cGguY29kZSA9PT0gMzIpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fY2FuQ2FjaGUoZ2x5cGgpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGdseXBoS2V5ID0gZ2V0R2x5cGhDYWNoZUtleShnbHlwaCk7XG4gICAgICAgIHZhciBjYWNoZVZhbHVlID0gdGhpcy5fY2FjaGVNYXAuZ2V0KGdseXBoS2V5KTtcbiAgICAgICAgaWYgKGNhY2hlVmFsdWUgIT09IG51bGwgJiYgY2FjaGVWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLl9kcmF3RnJvbUNhY2hlKGN0eCwgY2FjaGVWYWx1ZSwgeCwgeSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLl9kcmF3VG9DYWNoZUNvdW50IDwgRlJBTUVfQ0FDSEVfRFJBV19MSU1JVCkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gdm9pZCAwO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NhY2hlTWFwLnNpemUgPCB0aGlzLl9jYWNoZU1hcC5jYXBhY2l0eSkge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gdGhpcy5fY2FjaGVNYXAuc2l6ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gdGhpcy5fY2FjaGVNYXAucGVlaygpLmluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNhY2hlVmFsdWVfMSA9IHRoaXMuX2RyYXdUb0NhY2hlKGdseXBoLCBpbmRleCk7XG4gICAgICAgICAgICB0aGlzLl9jYWNoZU1hcC5zZXQoZ2x5cGhLZXksIGNhY2hlVmFsdWVfMSk7XG4gICAgICAgICAgICB0aGlzLl9kcmF3RnJvbUNhY2hlKGN0eCwgY2FjaGVWYWx1ZV8xLCB4LCB5KTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIER5bmFtaWNDaGFyQXRsYXMucHJvdG90eXBlLl9jYW5DYWNoZSA9IGZ1bmN0aW9uIChnbHlwaCkge1xuICAgICAgICByZXR1cm4gZ2x5cGguY29kZSA8IDI1NjtcbiAgICB9O1xuICAgIER5bmFtaWNDaGFyQXRsYXMucHJvdG90eXBlLl90b0Nvb3JkaW5hdGVYID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIHJldHVybiAoaW5kZXggJSB0aGlzLl93aWR0aCkgKiB0aGlzLl9jb25maWcuc2NhbGVkQ2hhcldpZHRoO1xuICAgIH07XG4gICAgRHluYW1pY0NoYXJBdGxhcy5wcm90b3R5cGUuX3RvQ29vcmRpbmF0ZVkgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoaW5kZXggLyB0aGlzLl93aWR0aCkgKiB0aGlzLl9jb25maWcuc2NhbGVkQ2hhckhlaWdodDtcbiAgICB9O1xuICAgIER5bmFtaWNDaGFyQXRsYXMucHJvdG90eXBlLl9kcmF3RnJvbUNhY2hlID0gZnVuY3Rpb24gKGN0eCwgY2FjaGVWYWx1ZSwgeCwgeSkge1xuICAgICAgICBpZiAoY2FjaGVWYWx1ZS5pc0VtcHR5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNhY2hlWCA9IHRoaXMuX3RvQ29vcmRpbmF0ZVgoY2FjaGVWYWx1ZS5pbmRleCk7XG4gICAgICAgIHZhciBjYWNoZVkgPSB0aGlzLl90b0Nvb3JkaW5hdGVZKGNhY2hlVmFsdWUuaW5kZXgpO1xuICAgICAgICBjdHguZHJhd0ltYWdlKGNhY2hlVmFsdWUuaW5CaXRtYXAgPyB0aGlzLl9iaXRtYXAgOiB0aGlzLl9jYWNoZUNhbnZhcywgY2FjaGVYLCBjYWNoZVksIHRoaXMuX2NvbmZpZy5zY2FsZWRDaGFyV2lkdGgsIHRoaXMuX2NvbmZpZy5zY2FsZWRDaGFySGVpZ2h0LCB4LCB5LCB0aGlzLl9jb25maWcuc2NhbGVkQ2hhcldpZHRoLCB0aGlzLl9jb25maWcuc2NhbGVkQ2hhckhlaWdodCk7XG4gICAgfTtcbiAgICBEeW5hbWljQ2hhckF0bGFzLnByb3RvdHlwZS5fZ2V0Q29sb3JGcm9tQW5zaUluZGV4ID0gZnVuY3Rpb24gKGlkeCkge1xuICAgICAgICBpZiAoaWR4IDwgdGhpcy5fY29uZmlnLmNvbG9ycy5hbnNpLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5jb2xvcnMuYW5zaVtpZHhdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBDb2xvck1hbmFnZXJfMS5ERUZBVUxUX0FOU0lfQ09MT1JTW2lkeF07XG4gICAgfTtcbiAgICBEeW5hbWljQ2hhckF0bGFzLnByb3RvdHlwZS5fZ2V0QmFja2dyb3VuZENvbG9yID0gZnVuY3Rpb24gKGdseXBoKSB7XG4gICAgICAgIGlmICh0aGlzLl9jb25maWcuYWxsb3dUcmFuc3BhcmVuY3kpIHtcbiAgICAgICAgICAgIHJldHVybiBUUkFOU1BBUkVOVF9DT0xPUjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChnbHlwaC5iZyA9PT0gVHlwZXNfMS5JTlZFUlRFRF9ERUZBVUxUX0NPTE9SKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY29uZmlnLmNvbG9ycy5mb3JlZ3JvdW5kO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGdseXBoLmJnIDwgMjU2KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0Q29sb3JGcm9tQW5zaUluZGV4KGdseXBoLmJnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY29uZmlnLmNvbG9ycy5iYWNrZ3JvdW5kO1xuICAgIH07XG4gICAgRHluYW1pY0NoYXJBdGxhcy5wcm90b3R5cGUuX2dldEZvcmVncm91bmRDb2xvciA9IGZ1bmN0aW9uIChnbHlwaCkge1xuICAgICAgICBpZiAoZ2x5cGguZmcgPT09IFR5cGVzXzEuSU5WRVJURURfREVGQVVMVF9DT0xPUikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5jb2xvcnMuYmFja2dyb3VuZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChnbHlwaC5mZyA8IDI1Nikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldENvbG9yRnJvbUFuc2lJbmRleChnbHlwaC5mZyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5jb2xvcnMuZm9yZWdyb3VuZDtcbiAgICB9O1xuICAgIER5bmFtaWNDaGFyQXRsYXMucHJvdG90eXBlLl9kcmF3VG9DYWNoZSA9IGZ1bmN0aW9uIChnbHlwaCwgaW5kZXgpIHtcbiAgICAgICAgdGhpcy5fZHJhd1RvQ2FjaGVDb3VudCsrO1xuICAgICAgICB0aGlzLl90bXBDdHguc2F2ZSgpO1xuICAgICAgICB2YXIgYmFja2dyb3VuZENvbG9yID0gdGhpcy5fZ2V0QmFja2dyb3VuZENvbG9yKGdseXBoKTtcbiAgICAgICAgdGhpcy5fdG1wQ3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdjb3B5JztcbiAgICAgICAgdGhpcy5fdG1wQ3R4LmZpbGxTdHlsZSA9IGJhY2tncm91bmRDb2xvci5jc3M7XG4gICAgICAgIHRoaXMuX3RtcEN0eC5maWxsUmVjdCgwLCAwLCB0aGlzLl9jb25maWcuc2NhbGVkQ2hhcldpZHRoLCB0aGlzLl9jb25maWcuc2NhbGVkQ2hhckhlaWdodCk7XG4gICAgICAgIHRoaXMuX3RtcEN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnc291cmNlLW92ZXInO1xuICAgICAgICB2YXIgZm9udFdlaWdodCA9IGdseXBoLmJvbGQgPyB0aGlzLl9jb25maWcuZm9udFdlaWdodEJvbGQgOiB0aGlzLl9jb25maWcuZm9udFdlaWdodDtcbiAgICAgICAgdmFyIGZvbnRTdHlsZSA9IGdseXBoLml0YWxpYyA/ICdpdGFsaWMnIDogJyc7XG4gICAgICAgIHRoaXMuX3RtcEN0eC5mb250ID1cbiAgICAgICAgICAgIGZvbnRTdHlsZSArIFwiIFwiICsgZm9udFdlaWdodCArIFwiIFwiICsgdGhpcy5fY29uZmlnLmZvbnRTaXplICogdGhpcy5fY29uZmlnLmRldmljZVBpeGVsUmF0aW8gKyBcInB4IFwiICsgdGhpcy5fY29uZmlnLmZvbnRGYW1pbHk7XG4gICAgICAgIHRoaXMuX3RtcEN0eC50ZXh0QmFzZWxpbmUgPSAndG9wJztcbiAgICAgICAgdGhpcy5fdG1wQ3R4LmZpbGxTdHlsZSA9IHRoaXMuX2dldEZvcmVncm91bmRDb2xvcihnbHlwaCkuY3NzO1xuICAgICAgICBpZiAoZ2x5cGguZGltKSB7XG4gICAgICAgICAgICB0aGlzLl90bXBDdHguZ2xvYmFsQWxwaGEgPSBUeXBlc18xLkRJTV9PUEFDSVRZO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3RtcEN0eC5maWxsVGV4dChnbHlwaC5jaGFycywgMCwgMCk7XG4gICAgICAgIHRoaXMuX3RtcEN0eC5yZXN0b3JlKCk7XG4gICAgICAgIHZhciBpbWFnZURhdGEgPSB0aGlzLl90bXBDdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIHRoaXMuX2NvbmZpZy5zY2FsZWRDaGFyV2lkdGgsIHRoaXMuX2NvbmZpZy5zY2FsZWRDaGFySGVpZ2h0KTtcbiAgICAgICAgdmFyIGlzRW1wdHkgPSBmYWxzZTtcbiAgICAgICAgaWYgKCF0aGlzLl9jb25maWcuYWxsb3dUcmFuc3BhcmVuY3kpIHtcbiAgICAgICAgICAgIGlzRW1wdHkgPSBDaGFyQXRsYXNHZW5lcmF0b3JfMS5jbGVhckNvbG9yKGltYWdlRGF0YSwgYmFja2dyb3VuZENvbG9yKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgeCA9IHRoaXMuX3RvQ29vcmRpbmF0ZVgoaW5kZXgpO1xuICAgICAgICB2YXIgeSA9IHRoaXMuX3RvQ29vcmRpbmF0ZVkoaW5kZXgpO1xuICAgICAgICB0aGlzLl9jYWNoZUN0eC5wdXRJbWFnZURhdGEoaW1hZ2VEYXRhLCB4LCB5KTtcbiAgICAgICAgdmFyIGNhY2hlVmFsdWUgPSB7XG4gICAgICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgICAgICBpc0VtcHR5OiBpc0VtcHR5LFxuICAgICAgICAgICAgaW5CaXRtYXA6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2FkZEdseXBoVG9CaXRtYXAoY2FjaGVWYWx1ZSk7XG4gICAgICAgIHJldHVybiBjYWNoZVZhbHVlO1xuICAgIH07XG4gICAgRHluYW1pY0NoYXJBdGxhcy5wcm90b3R5cGUuX2FkZEdseXBoVG9CaXRtYXAgPSBmdW5jdGlvbiAoY2FjaGVWYWx1ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoISgnY3JlYXRlSW1hZ2VCaXRtYXAnIGluIHdpbmRvdykgfHwgUGxhdGZvcm1fMS5pc0ZpcmVmb3ggfHwgUGxhdGZvcm1fMS5pc1NhZmFyaSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2dseXBoc1dhaXRpbmdPbkJpdG1hcC5wdXNoKGNhY2hlVmFsdWUpO1xuICAgICAgICBpZiAodGhpcy5fYml0bWFwQ29tbWl0VGltZW91dCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2JpdG1hcENvbW1pdFRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fZ2VuZXJhdGVCaXRtYXAoKTsgfSwgR0xZUEhfQklUTUFQX0NPTU1JVF9ERUxBWSk7XG4gICAgfTtcbiAgICBEeW5hbWljQ2hhckF0bGFzLnByb3RvdHlwZS5fZ2VuZXJhdGVCaXRtYXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBnbHlwaHNNb3ZpbmdUb0JpdG1hcCA9IHRoaXMuX2dseXBoc1dhaXRpbmdPbkJpdG1hcDtcbiAgICAgICAgdGhpcy5fZ2x5cGhzV2FpdGluZ09uQml0bWFwID0gW107XG4gICAgICAgIHdpbmRvdy5jcmVhdGVJbWFnZUJpdG1hcCh0aGlzLl9jYWNoZUNhbnZhcykudGhlbihmdW5jdGlvbiAoYml0bWFwKSB7XG4gICAgICAgICAgICBfdGhpcy5fYml0bWFwID0gYml0bWFwO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnbHlwaHNNb3ZpbmdUb0JpdG1hcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGdseXBoc01vdmluZ1RvQml0bWFwW2ldO1xuICAgICAgICAgICAgICAgIHZhbHVlLmluQml0bWFwID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2JpdG1hcENvbW1pdFRpbWVvdXQgPSBudWxsO1xuICAgIH07XG4gICAgcmV0dXJuIER5bmFtaWNDaGFyQXRsYXM7XG59KEJhc2VDaGFyQXRsYXNfMS5kZWZhdWx0KSk7XG5leHBvcnRzLmRlZmF1bHQgPSBEeW5hbWljQ2hhckF0bGFzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RHluYW1pY0NoYXJBdGxhcy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBMUlVNYXAgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExSVU1hcChjYXBhY2l0eSkge1xuICAgICAgICB0aGlzLmNhcGFjaXR5ID0gY2FwYWNpdHk7XG4gICAgICAgIHRoaXMuX21hcCA9IHt9O1xuICAgICAgICB0aGlzLl9oZWFkID0gbnVsbDtcbiAgICAgICAgdGhpcy5fdGFpbCA9IG51bGw7XG4gICAgICAgIHRoaXMuX25vZGVQb29sID0gW107XG4gICAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuICAgIExSVU1hcC5wcm90b3R5cGUuX3VubGlua05vZGUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICB2YXIgcHJldiA9IG5vZGUucHJldjtcbiAgICAgICAgdmFyIG5leHQgPSBub2RlLm5leHQ7XG4gICAgICAgIGlmIChub2RlID09PSB0aGlzLl9oZWFkKSB7XG4gICAgICAgICAgICB0aGlzLl9oZWFkID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9kZSA9PT0gdGhpcy5fdGFpbCkge1xuICAgICAgICAgICAgdGhpcy5fdGFpbCA9IHByZXY7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZXYgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHByZXYubmV4dCA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5leHQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIG5leHQucHJldiA9IHByZXY7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExSVU1hcC5wcm90b3R5cGUuX2FwcGVuZE5vZGUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICB2YXIgdGFpbCA9IHRoaXMuX3RhaWw7XG4gICAgICAgIGlmICh0YWlsICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0YWlsLm5leHQgPSBub2RlO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUucHJldiA9IHRhaWw7XG4gICAgICAgIG5vZGUubmV4dCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3RhaWwgPSBub2RlO1xuICAgICAgICBpZiAodGhpcy5faGVhZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5faGVhZCA9IG5vZGU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExSVU1hcC5wcm90b3R5cGUucHJlYWxsb2MgPSBmdW5jdGlvbiAoY291bnQpIHtcbiAgICAgICAgdmFyIG5vZGVQb29sID0gdGhpcy5fbm9kZVBvb2w7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICAgICAgbm9kZVBvb2wucHVzaCh7XG4gICAgICAgICAgICAgICAgcHJldjogbnVsbCxcbiAgICAgICAgICAgICAgICBuZXh0OiBudWxsLFxuICAgICAgICAgICAgICAgIGtleTogbnVsbCxcbiAgICAgICAgICAgICAgICB2YWx1ZTogbnVsbFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExSVU1hcC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgbm9kZSA9IHRoaXMuX21hcFtrZXldO1xuICAgICAgICBpZiAobm9kZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLl91bmxpbmtOb2RlKG5vZGUpO1xuICAgICAgICAgICAgdGhpcy5fYXBwZW5kTm9kZShub2RlKTtcbiAgICAgICAgICAgIHJldHVybiBub2RlLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgTFJVTWFwLnByb3RvdHlwZS5wZWVrVmFsdWUgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciBub2RlID0gdGhpcy5fbWFwW2tleV07XG4gICAgICAgIGlmIChub2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgTFJVTWFwLnByb3RvdHlwZS5wZWVrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaGVhZCA9IHRoaXMuX2hlYWQ7XG4gICAgICAgIHJldHVybiBoZWFkID09PSBudWxsID8gbnVsbCA6IGhlYWQudmFsdWU7XG4gICAgfTtcbiAgICBMUlVNYXAucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIHZhciBub2RlID0gdGhpcy5fbWFwW2tleV07XG4gICAgICAgIGlmIChub2RlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5vZGUgPSB0aGlzLl9tYXBba2V5XTtcbiAgICAgICAgICAgIHRoaXMuX3VubGlua05vZGUobm9kZSk7XG4gICAgICAgICAgICBub2RlLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5zaXplID49IHRoaXMuY2FwYWNpdHkpIHtcbiAgICAgICAgICAgIG5vZGUgPSB0aGlzLl9oZWFkO1xuICAgICAgICAgICAgdGhpcy5fdW5saW5rTm9kZShub2RlKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9tYXBbbm9kZS5rZXldO1xuICAgICAgICAgICAgbm9kZS5rZXkgPSBrZXk7XG4gICAgICAgICAgICBub2RlLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLl9tYXBba2V5XSA9IG5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgbm9kZVBvb2wgPSB0aGlzLl9ub2RlUG9vbDtcbiAgICAgICAgICAgIGlmIChub2RlUG9vbC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgbm9kZSA9IG5vZGVQb29sLnBvcCgpO1xuICAgICAgICAgICAgICAgIG5vZGUua2V5ID0ga2V5O1xuICAgICAgICAgICAgICAgIG5vZGUudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG5vZGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXY6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG5leHQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fbWFwW2tleV0gPSBub2RlO1xuICAgICAgICAgICAgdGhpcy5zaXplKys7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYXBwZW5kTm9kZShub2RlKTtcbiAgICB9O1xuICAgIHJldHVybiBMUlVNYXA7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gTFJVTWFwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TFJVTWFwLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBCYXNlQ2hhckF0bGFzXzEgPSByZXF1aXJlKFwiLi9CYXNlQ2hhckF0bGFzXCIpO1xudmFyIE5vbmVDaGFyQXRsYXMgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhOb25lQ2hhckF0bGFzLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE5vbmVDaGFyQXRsYXMoZG9jdW1lbnQsIGNvbmZpZykge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICB9XG4gICAgTm9uZUNoYXJBdGxhcy5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uIChjdHgsIGdseXBoLCB4LCB5KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIHJldHVybiBOb25lQ2hhckF0bGFzO1xufShCYXNlQ2hhckF0bGFzXzEuZGVmYXVsdCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gTm9uZUNoYXJBdGxhcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5vbmVDaGFyQXRsYXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFR5cGVzXzEgPSByZXF1aXJlKFwiLi9UeXBlc1wiKTtcbnZhciBDaGFyQXRsYXNHZW5lcmF0b3JfMSA9IHJlcXVpcmUoXCIuL0NoYXJBdGxhc0dlbmVyYXRvclwiKTtcbnZhciBCYXNlQ2hhckF0bGFzXzEgPSByZXF1aXJlKFwiLi9CYXNlQ2hhckF0bGFzXCIpO1xudmFyIENoYXJBdGxhc1V0aWxzXzEgPSByZXF1aXJlKFwiLi9DaGFyQXRsYXNVdGlsc1wiKTtcbnZhciBTdGF0aWNDaGFyQXRsYXMgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdGF0aWNDaGFyQXRsYXMsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3RhdGljQ2hhckF0bGFzKF9kb2N1bWVudCwgX2NvbmZpZykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fZG9jdW1lbnQgPSBfZG9jdW1lbnQ7XG4gICAgICAgIF90aGlzLl9jb25maWcgPSBfY29uZmlnO1xuICAgICAgICBfdGhpcy5fY2FudmFzRmFjdG9yeSA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgICAgICB2YXIgY2FudmFzID0gX3RoaXMuX2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgICAgICAgY2FudmFzLndpZHRoID0gd2lkdGg7XG4gICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICAgICAgcmV0dXJuIGNhbnZhcztcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTdGF0aWNDaGFyQXRsYXMucHJvdG90eXBlLl9kb1dhcm1VcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHJlc3VsdCA9IENoYXJBdGxhc0dlbmVyYXRvcl8xLmdlbmVyYXRlU3RhdGljQ2hhckF0bGFzVGV4dHVyZSh3aW5kb3csIHRoaXMuX2NhbnZhc0ZhY3RvcnksIHRoaXMuX2NvbmZpZyk7XG4gICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5fdGV4dHVyZSA9IHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdC50aGVuKGZ1bmN0aW9uICh0ZXh0dXJlKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX3RleHR1cmUgPSB0ZXh0dXJlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN0YXRpY0NoYXJBdGxhcy5wcm90b3R5cGUuX2lzQ2FjaGVkID0gZnVuY3Rpb24gKGdseXBoLCBjb2xvckluZGV4KSB7XG4gICAgICAgIHZhciBpc0FzY2lpID0gZ2x5cGguY29kZSA8IDI1NjtcbiAgICAgICAgdmFyIGlzQmFzaWNDb2xvciA9IGdseXBoLmZnIDwgMTY7XG4gICAgICAgIHZhciBpc0RlZmF1bHRDb2xvciA9IGdseXBoLmZnID09PSBUeXBlc18xLkRFRkFVTFRfQ09MT1I7XG4gICAgICAgIHZhciBpc0RlZmF1bHRCYWNrZ3JvdW5kID0gZ2x5cGguYmcgPT09IFR5cGVzXzEuREVGQVVMVF9DT0xPUjtcbiAgICAgICAgcmV0dXJuIGlzQXNjaWkgJiYgKGlzQmFzaWNDb2xvciB8fCBpc0RlZmF1bHRDb2xvcikgJiYgaXNEZWZhdWx0QmFja2dyb3VuZCAmJiAhZ2x5cGguaXRhbGljO1xuICAgIH07XG4gICAgU3RhdGljQ2hhckF0bGFzLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24gKGN0eCwgZ2x5cGgsIHgsIHkpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RleHR1cmUgPT09IG51bGwgfHwgdGhpcy5fdGV4dHVyZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbG9ySW5kZXggPSAwO1xuICAgICAgICBpZiAoQ2hhckF0bGFzVXRpbHNfMS5pczI1NkNvbG9yKGdseXBoLmZnKSkge1xuICAgICAgICAgICAgY29sb3JJbmRleCA9IDIgKyBnbHlwaC5mZyArIChnbHlwaC5ib2xkID8gMTYgOiAwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChnbHlwaC5mZyA9PT0gVHlwZXNfMS5ERUZBVUxUX0NPTE9SKSB7XG4gICAgICAgICAgICBpZiAoZ2x5cGguYm9sZCkge1xuICAgICAgICAgICAgICAgIGNvbG9ySW5kZXggPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5faXNDYWNoZWQoZ2x5cGgsIGNvbG9ySW5kZXgpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgdmFyIGNoYXJBdGxhc0NlbGxXaWR0aCA9IHRoaXMuX2NvbmZpZy5zY2FsZWRDaGFyV2lkdGggKyBUeXBlc18xLkNIQVJfQVRMQVNfQ0VMTF9TUEFDSU5HO1xuICAgICAgICB2YXIgY2hhckF0bGFzQ2VsbEhlaWdodCA9IHRoaXMuX2NvbmZpZy5zY2FsZWRDaGFySGVpZ2h0ICsgVHlwZXNfMS5DSEFSX0FUTEFTX0NFTExfU1BBQ0lORztcbiAgICAgICAgaWYgKGdseXBoLmRpbSkge1xuICAgICAgICAgICAgY3R4Lmdsb2JhbEFscGhhID0gVHlwZXNfMS5ESU1fT1BBQ0lUWTtcbiAgICAgICAgfVxuICAgICAgICBjdHguZHJhd0ltYWdlKHRoaXMuX3RleHR1cmUsIGdseXBoLmNvZGUgKiBjaGFyQXRsYXNDZWxsV2lkdGgsIGNvbG9ySW5kZXggKiBjaGFyQXRsYXNDZWxsSGVpZ2h0LCBjaGFyQXRsYXNDZWxsV2lkdGgsIHRoaXMuX2NvbmZpZy5zY2FsZWRDaGFySGVpZ2h0LCB4LCB5LCBjaGFyQXRsYXNDZWxsV2lkdGgsIHRoaXMuX2NvbmZpZy5zY2FsZWRDaGFySGVpZ2h0KTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICByZXR1cm4gU3RhdGljQ2hhckF0bGFzO1xufShCYXNlQ2hhckF0bGFzXzEuZGVmYXVsdCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gU3RhdGljQ2hhckF0bGFzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3RhdGljQ2hhckF0bGFzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBCYXNlUmVuZGVyTGF5ZXJfMSA9IHJlcXVpcmUoXCIuL0Jhc2VSZW5kZXJMYXllclwiKTtcbnZhciBTZWxlY3Rpb25SZW5kZXJMYXllciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFNlbGVjdGlvblJlbmRlckxheWVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNlbGVjdGlvblJlbmRlckxheWVyKGNvbnRhaW5lciwgekluZGV4LCBjb2xvcnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgY29udGFpbmVyLCAnc2VsZWN0aW9uJywgekluZGV4LCB0cnVlLCBjb2xvcnMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9jbGVhclN0YXRlKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU2VsZWN0aW9uUmVuZGVyTGF5ZXIucHJvdG90eXBlLl9jbGVhclN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IHtcbiAgICAgICAgICAgIHN0YXJ0OiBudWxsLFxuICAgICAgICAgICAgZW5kOiBudWxsLFxuICAgICAgICAgICAgY29sdW1uU2VsZWN0TW9kZTogbnVsbCxcbiAgICAgICAgICAgIHlkaXNwOiBudWxsXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBTZWxlY3Rpb25SZW5kZXJMYXllci5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24gKHRlcm1pbmFsLCBkaW0pIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5yZXNpemUuY2FsbCh0aGlzLCB0ZXJtaW5hbCwgZGltKTtcbiAgICAgICAgdGhpcy5fY2xlYXJTdGF0ZSgpO1xuICAgIH07XG4gICAgU2VsZWN0aW9uUmVuZGVyTGF5ZXIucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKHRlcm1pbmFsKSB7XG4gICAgICAgIGlmICh0aGlzLl9zdGF0ZS5zdGFydCAmJiB0aGlzLl9zdGF0ZS5lbmQpIHtcbiAgICAgICAgICAgIHRoaXMuX2NsZWFyU3RhdGUoKTtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJBbGwoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2VsZWN0aW9uUmVuZGVyTGF5ZXIucHJvdG90eXBlLm9uU2VsZWN0aW9uQ2hhbmdlZCA9IGZ1bmN0aW9uICh0ZXJtaW5hbCwgc3RhcnQsIGVuZCwgY29sdW1uU2VsZWN0TW9kZSkge1xuICAgICAgICBpZiAoIXRoaXMuX2RpZFN0YXRlQ2hhbmdlKHN0YXJ0LCBlbmQsIGNvbHVtblNlbGVjdE1vZGUsIHRlcm1pbmFsLmJ1ZmZlci55ZGlzcCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNsZWFyQWxsKCk7XG4gICAgICAgIGlmICghc3RhcnQgfHwgIWVuZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciB2aWV3cG9ydFN0YXJ0Um93ID0gc3RhcnRbMV0gLSB0ZXJtaW5hbC5idWZmZXIueWRpc3A7XG4gICAgICAgIHZhciB2aWV3cG9ydEVuZFJvdyA9IGVuZFsxXSAtIHRlcm1pbmFsLmJ1ZmZlci55ZGlzcDtcbiAgICAgICAgdmFyIHZpZXdwb3J0Q2FwcGVkU3RhcnRSb3cgPSBNYXRoLm1heCh2aWV3cG9ydFN0YXJ0Um93LCAwKTtcbiAgICAgICAgdmFyIHZpZXdwb3J0Q2FwcGVkRW5kUm93ID0gTWF0aC5taW4odmlld3BvcnRFbmRSb3csIHRlcm1pbmFsLnJvd3MgLSAxKTtcbiAgICAgICAgaWYgKHZpZXdwb3J0Q2FwcGVkU3RhcnRSb3cgPj0gdGVybWluYWwucm93cyB8fCB2aWV3cG9ydENhcHBlZEVuZFJvdyA8IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jdHguZmlsbFN0eWxlID0gdGhpcy5fY29sb3JzLnNlbGVjdGlvbi5jc3M7XG4gICAgICAgIGlmIChjb2x1bW5TZWxlY3RNb2RlKSB7XG4gICAgICAgICAgICB2YXIgc3RhcnRDb2wgPSBzdGFydFswXTtcbiAgICAgICAgICAgIHZhciB3aWR0aCA9IGVuZFswXSAtIHN0YXJ0Q29sO1xuICAgICAgICAgICAgdmFyIGhlaWdodCA9IHZpZXdwb3J0Q2FwcGVkRW5kUm93IC0gdmlld3BvcnRDYXBwZWRTdGFydFJvdyArIDE7XG4gICAgICAgICAgICB0aGlzLmZpbGxDZWxscyhzdGFydENvbCwgdmlld3BvcnRDYXBwZWRTdGFydFJvdywgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgc3RhcnRDb2wgPSB2aWV3cG9ydFN0YXJ0Um93ID09PSB2aWV3cG9ydENhcHBlZFN0YXJ0Um93ID8gc3RhcnRbMF0gOiAwO1xuICAgICAgICAgICAgdmFyIHN0YXJ0Um93RW5kQ29sID0gdmlld3BvcnRDYXBwZWRTdGFydFJvdyA9PT0gdmlld3BvcnRDYXBwZWRFbmRSb3cgPyBlbmRbMF0gOiB0ZXJtaW5hbC5jb2xzO1xuICAgICAgICAgICAgdGhpcy5maWxsQ2VsbHMoc3RhcnRDb2wsIHZpZXdwb3J0Q2FwcGVkU3RhcnRSb3csIHN0YXJ0Um93RW5kQ29sIC0gc3RhcnRDb2wsIDEpO1xuICAgICAgICAgICAgdmFyIG1pZGRsZVJvd3NDb3VudCA9IE1hdGgubWF4KHZpZXdwb3J0Q2FwcGVkRW5kUm93IC0gdmlld3BvcnRDYXBwZWRTdGFydFJvdyAtIDEsIDApO1xuICAgICAgICAgICAgdGhpcy5maWxsQ2VsbHMoMCwgdmlld3BvcnRDYXBwZWRTdGFydFJvdyArIDEsIHRlcm1pbmFsLmNvbHMsIG1pZGRsZVJvd3NDb3VudCk7XG4gICAgICAgICAgICBpZiAodmlld3BvcnRDYXBwZWRTdGFydFJvdyAhPT0gdmlld3BvcnRDYXBwZWRFbmRSb3cpIHtcbiAgICAgICAgICAgICAgICB2YXIgZW5kQ29sID0gdmlld3BvcnRFbmRSb3cgPT09IHZpZXdwb3J0Q2FwcGVkRW5kUm93ID8gZW5kWzBdIDogdGVybWluYWwuY29scztcbiAgICAgICAgICAgICAgICB0aGlzLmZpbGxDZWxscygwLCB2aWV3cG9ydENhcHBlZEVuZFJvdywgZW5kQ29sLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zdGF0ZS5zdGFydCA9IFtzdGFydFswXSwgc3RhcnRbMV1dO1xuICAgICAgICB0aGlzLl9zdGF0ZS5lbmQgPSBbZW5kWzBdLCBlbmRbMV1dO1xuICAgICAgICB0aGlzLl9zdGF0ZS5jb2x1bW5TZWxlY3RNb2RlID0gY29sdW1uU2VsZWN0TW9kZTtcbiAgICAgICAgdGhpcy5fc3RhdGUueWRpc3AgPSB0ZXJtaW5hbC5idWZmZXIueWRpc3A7XG4gICAgfTtcbiAgICBTZWxlY3Rpb25SZW5kZXJMYXllci5wcm90b3R5cGUuX2RpZFN0YXRlQ2hhbmdlID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQsIGNvbHVtblNlbGVjdE1vZGUsIHlkaXNwKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5fYXJlQ29vcmRpbmF0ZXNFcXVhbChzdGFydCwgdGhpcy5fc3RhdGUuc3RhcnQpIHx8XG4gICAgICAgICAgICAhdGhpcy5fYXJlQ29vcmRpbmF0ZXNFcXVhbChlbmQsIHRoaXMuX3N0YXRlLmVuZCkgfHxcbiAgICAgICAgICAgIGNvbHVtblNlbGVjdE1vZGUgIT09IHRoaXMuX3N0YXRlLmNvbHVtblNlbGVjdE1vZGUgfHxcbiAgICAgICAgICAgIHlkaXNwICE9PSB0aGlzLl9zdGF0ZS55ZGlzcDtcbiAgICB9O1xuICAgIFNlbGVjdGlvblJlbmRlckxheWVyLnByb3RvdHlwZS5fYXJlQ29vcmRpbmF0ZXNFcXVhbCA9IGZ1bmN0aW9uIChjb29yZDEsIGNvb3JkMikge1xuICAgICAgICBpZiAoIWNvb3JkMSB8fCAhY29vcmQyKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvb3JkMVswXSA9PT0gY29vcmQyWzBdICYmIGNvb3JkMVsxXSA9PT0gY29vcmQyWzFdO1xuICAgIH07XG4gICAgcmV0dXJuIFNlbGVjdGlvblJlbmRlckxheWVyO1xufShCYXNlUmVuZGVyTGF5ZXJfMS5CYXNlUmVuZGVyTGF5ZXIpKTtcbmV4cG9ydHMuU2VsZWN0aW9uUmVuZGVyTGF5ZXIgPSBTZWxlY3Rpb25SZW5kZXJMYXllcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNlbGVjdGlvblJlbmRlckxheWVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBCdWZmZXJfMSA9IHJlcXVpcmUoXCIuLi9CdWZmZXJcIik7XG52YXIgQmFzZVJlbmRlckxheWVyXzEgPSByZXF1aXJlKFwiLi9CYXNlUmVuZGVyTGF5ZXJcIik7XG52YXIgQkxJTktfSU5URVJWQUwgPSA2MDA7XG52YXIgQ3Vyc29yUmVuZGVyTGF5ZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhDdXJzb3JSZW5kZXJMYXllciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBDdXJzb3JSZW5kZXJMYXllcihjb250YWluZXIsIHpJbmRleCwgY29sb3JzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGNvbnRhaW5lciwgJ2N1cnNvcicsIHpJbmRleCwgdHJ1ZSwgY29sb3JzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fc3RhdGUgPSB7XG4gICAgICAgICAgICB4OiBudWxsLFxuICAgICAgICAgICAgeTogbnVsbCxcbiAgICAgICAgICAgIGlzRm9jdXNlZDogbnVsbCxcbiAgICAgICAgICAgIHN0eWxlOiBudWxsLFxuICAgICAgICAgICAgd2lkdGg6IG51bGxcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuX2N1cnNvclJlbmRlcmVycyA9IHtcbiAgICAgICAgICAgICdiYXInOiBfdGhpcy5fcmVuZGVyQmFyQ3Vyc29yLmJpbmQoX3RoaXMpLFxuICAgICAgICAgICAgJ2Jsb2NrJzogX3RoaXMuX3JlbmRlckJsb2NrQ3Vyc29yLmJpbmQoX3RoaXMpLFxuICAgICAgICAgICAgJ3VuZGVybGluZSc6IF90aGlzLl9yZW5kZXJVbmRlcmxpbmVDdXJzb3IuYmluZChfdGhpcylcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBDdXJzb3JSZW5kZXJMYXllci5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24gKHRlcm1pbmFsLCBkaW0pIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5yZXNpemUuY2FsbCh0aGlzLCB0ZXJtaW5hbCwgZGltKTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSB7XG4gICAgICAgICAgICB4OiBudWxsLFxuICAgICAgICAgICAgeTogbnVsbCxcbiAgICAgICAgICAgIGlzRm9jdXNlZDogbnVsbCxcbiAgICAgICAgICAgIHN0eWxlOiBudWxsLFxuICAgICAgICAgICAgd2lkdGg6IG51bGxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIEN1cnNvclJlbmRlckxheWVyLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICh0ZXJtaW5hbCkge1xuICAgICAgICB0aGlzLl9jbGVhckN1cnNvcigpO1xuICAgICAgICBpZiAodGhpcy5fY3Vyc29yQmxpbmtTdGF0ZU1hbmFnZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2N1cnNvckJsaW5rU3RhdGVNYW5hZ2VyLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHRoaXMuX2N1cnNvckJsaW5rU3RhdGVNYW5hZ2VyID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMub25PcHRpb25zQ2hhbmdlZCh0ZXJtaW5hbCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEN1cnNvclJlbmRlckxheWVyLnByb3RvdHlwZS5vbkJsdXIgPSBmdW5jdGlvbiAodGVybWluYWwpIHtcbiAgICAgICAgaWYgKHRoaXMuX2N1cnNvckJsaW5rU3RhdGVNYW5hZ2VyKSB7XG4gICAgICAgICAgICB0aGlzLl9jdXJzb3JCbGlua1N0YXRlTWFuYWdlci5wYXVzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRlcm1pbmFsLnJlZnJlc2godGVybWluYWwuYnVmZmVyLnksIHRlcm1pbmFsLmJ1ZmZlci55KTtcbiAgICB9O1xuICAgIEN1cnNvclJlbmRlckxheWVyLnByb3RvdHlwZS5vbkZvY3VzID0gZnVuY3Rpb24gKHRlcm1pbmFsKSB7XG4gICAgICAgIGlmICh0aGlzLl9jdXJzb3JCbGlua1N0YXRlTWFuYWdlcikge1xuICAgICAgICAgICAgdGhpcy5fY3Vyc29yQmxpbmtTdGF0ZU1hbmFnZXIucmVzdW1lKHRlcm1pbmFsKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRlcm1pbmFsLnJlZnJlc2godGVybWluYWwuYnVmZmVyLnksIHRlcm1pbmFsLmJ1ZmZlci55KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ3Vyc29yUmVuZGVyTGF5ZXIucHJvdG90eXBlLm9uT3B0aW9uc0NoYW5nZWQgPSBmdW5jdGlvbiAodGVybWluYWwpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRlcm1pbmFsLm9wdGlvbnMuY3Vyc29yQmxpbmspIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fY3Vyc29yQmxpbmtTdGF0ZU1hbmFnZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JCbGlua1N0YXRlTWFuYWdlciA9IG5ldyBDdXJzb3JCbGlua1N0YXRlTWFuYWdlcih0ZXJtaW5hbCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fcmVuZGVyKHRlcm1pbmFsLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jdXJzb3JCbGlua1N0YXRlTWFuYWdlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnNvckJsaW5rU3RhdGVNYW5hZ2VyLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJzb3JCbGlua1N0YXRlTWFuYWdlciA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZXJtaW5hbC5yZWZyZXNoKHRlcm1pbmFsLmJ1ZmZlci55LCB0ZXJtaW5hbC5idWZmZXIueSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEN1cnNvclJlbmRlckxheWVyLnByb3RvdHlwZS5vbkN1cnNvck1vdmUgPSBmdW5jdGlvbiAodGVybWluYWwpIHtcbiAgICAgICAgaWYgKHRoaXMuX2N1cnNvckJsaW5rU3RhdGVNYW5hZ2VyKSB7XG4gICAgICAgICAgICB0aGlzLl9jdXJzb3JCbGlua1N0YXRlTWFuYWdlci5yZXN0YXJ0QmxpbmtBbmltYXRpb24odGVybWluYWwpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDdXJzb3JSZW5kZXJMYXllci5wcm90b3R5cGUub25HcmlkQ2hhbmdlZCA9IGZ1bmN0aW9uICh0ZXJtaW5hbCwgc3RhcnRSb3csIGVuZFJvdykge1xuICAgICAgICBpZiAoIXRoaXMuX2N1cnNvckJsaW5rU3RhdGVNYW5hZ2VyIHx8IHRoaXMuX2N1cnNvckJsaW5rU3RhdGVNYW5hZ2VyLmlzUGF1c2VkKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXIodGVybWluYWwsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2N1cnNvckJsaW5rU3RhdGVNYW5hZ2VyLnJlc3RhcnRCbGlua0FuaW1hdGlvbih0ZXJtaW5hbCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEN1cnNvclJlbmRlckxheWVyLnByb3RvdHlwZS5fcmVuZGVyID0gZnVuY3Rpb24gKHRlcm1pbmFsLCB0cmlnZ2VyZWRCeUFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICAgIGlmICghdGVybWluYWwuY3Vyc29yU3RhdGUgfHwgdGVybWluYWwuY3Vyc29ySGlkZGVuKSB7XG4gICAgICAgICAgICB0aGlzLl9jbGVhckN1cnNvcigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjdXJzb3JZID0gdGVybWluYWwuYnVmZmVyLnliYXNlICsgdGVybWluYWwuYnVmZmVyLnk7XG4gICAgICAgIHZhciB2aWV3cG9ydFJlbGF0aXZlQ3Vyc29yWSA9IGN1cnNvclkgLSB0ZXJtaW5hbC5idWZmZXIueWRpc3A7XG4gICAgICAgIGlmICh2aWV3cG9ydFJlbGF0aXZlQ3Vyc29yWSA8IDAgfHwgdmlld3BvcnRSZWxhdGl2ZUN1cnNvclkgPj0gdGVybWluYWwucm93cykge1xuICAgICAgICAgICAgdGhpcy5fY2xlYXJDdXJzb3IoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hhckRhdGEgPSB0ZXJtaW5hbC5idWZmZXIubGluZXMuZ2V0KGN1cnNvclkpLmdldCh0ZXJtaW5hbC5idWZmZXIueCk7XG4gICAgICAgIGlmICghY2hhckRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRlcm1pbmFsLmlzRm9jdXNlZCkge1xuICAgICAgICAgICAgdGhpcy5fY2xlYXJDdXJzb3IoKTtcbiAgICAgICAgICAgIHRoaXMuX2N0eC5zYXZlKCk7XG4gICAgICAgICAgICB0aGlzLl9jdHguZmlsbFN0eWxlID0gdGhpcy5fY29sb3JzLmN1cnNvci5jc3M7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJCbHVyQ3Vyc29yKHRlcm1pbmFsLCB0ZXJtaW5hbC5idWZmZXIueCwgdmlld3BvcnRSZWxhdGl2ZUN1cnNvclksIGNoYXJEYXRhKTtcbiAgICAgICAgICAgIHRoaXMuX2N0eC5yZXN0b3JlKCk7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZS54ID0gdGVybWluYWwuYnVmZmVyLng7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZS55ID0gdmlld3BvcnRSZWxhdGl2ZUN1cnNvclk7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZS5pc0ZvY3VzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlLnN0eWxlID0gdGVybWluYWwub3B0aW9ucy5jdXJzb3JTdHlsZTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlLndpZHRoID0gY2hhckRhdGFbQnVmZmVyXzEuQ0hBUl9EQVRBX1dJRFRIX0lOREVYXTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fY3Vyc29yQmxpbmtTdGF0ZU1hbmFnZXIgJiYgIXRoaXMuX2N1cnNvckJsaW5rU3RhdGVNYW5hZ2VyLmlzQ3Vyc29yVmlzaWJsZSkge1xuICAgICAgICAgICAgdGhpcy5fY2xlYXJDdXJzb3IoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fc3RhdGUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9zdGF0ZS54ID09PSB0ZXJtaW5hbC5idWZmZXIueCAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlLnkgPT09IHZpZXdwb3J0UmVsYXRpdmVDdXJzb3JZICYmXG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUuaXNGb2N1c2VkID09PSB0ZXJtaW5hbC5pc0ZvY3VzZWQgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZS5zdHlsZSA9PT0gdGVybWluYWwub3B0aW9ucy5jdXJzb3JTdHlsZSAmJlxuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlLndpZHRoID09PSBjaGFyRGF0YVtCdWZmZXJfMS5DSEFSX0RBVEFfV0lEVEhfSU5ERVhdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fY2xlYXJDdXJzb3IoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jdHguc2F2ZSgpO1xuICAgICAgICB0aGlzLl9jdXJzb3JSZW5kZXJlcnNbdGVybWluYWwub3B0aW9ucy5jdXJzb3JTdHlsZSB8fCAnYmxvY2snXSh0ZXJtaW5hbCwgdGVybWluYWwuYnVmZmVyLngsIHZpZXdwb3J0UmVsYXRpdmVDdXJzb3JZLCBjaGFyRGF0YSk7XG4gICAgICAgIHRoaXMuX2N0eC5yZXN0b3JlKCk7XG4gICAgICAgIHRoaXMuX3N0YXRlLnggPSB0ZXJtaW5hbC5idWZmZXIueDtcbiAgICAgICAgdGhpcy5fc3RhdGUueSA9IHZpZXdwb3J0UmVsYXRpdmVDdXJzb3JZO1xuICAgICAgICB0aGlzLl9zdGF0ZS5pc0ZvY3VzZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fc3RhdGUuc3R5bGUgPSB0ZXJtaW5hbC5vcHRpb25zLmN1cnNvclN0eWxlO1xuICAgICAgICB0aGlzLl9zdGF0ZS53aWR0aCA9IGNoYXJEYXRhW0J1ZmZlcl8xLkNIQVJfREFUQV9XSURUSF9JTkRFWF07XG4gICAgfTtcbiAgICBDdXJzb3JSZW5kZXJMYXllci5wcm90b3R5cGUuX2NsZWFyQ3Vyc29yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fc3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJDZWxscyh0aGlzLl9zdGF0ZS54LCB0aGlzLl9zdGF0ZS55LCB0aGlzLl9zdGF0ZS53aWR0aCwgMSk7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICB4OiBudWxsLFxuICAgICAgICAgICAgICAgIHk6IG51bGwsXG4gICAgICAgICAgICAgICAgaXNGb2N1c2VkOiBudWxsLFxuICAgICAgICAgICAgICAgIHN0eWxlOiBudWxsLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBudWxsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDdXJzb3JSZW5kZXJMYXllci5wcm90b3R5cGUuX3JlbmRlckJhckN1cnNvciA9IGZ1bmN0aW9uICh0ZXJtaW5hbCwgeCwgeSwgY2hhckRhdGEpIHtcbiAgICAgICAgdGhpcy5fY3R4LnNhdmUoKTtcbiAgICAgICAgdGhpcy5fY3R4LmZpbGxTdHlsZSA9IHRoaXMuX2NvbG9ycy5jdXJzb3IuY3NzO1xuICAgICAgICB0aGlzLmZpbGxMZWZ0TGluZUF0Q2VsbCh4LCB5KTtcbiAgICAgICAgdGhpcy5fY3R4LnJlc3RvcmUoKTtcbiAgICB9O1xuICAgIEN1cnNvclJlbmRlckxheWVyLnByb3RvdHlwZS5fcmVuZGVyQmxvY2tDdXJzb3IgPSBmdW5jdGlvbiAodGVybWluYWwsIHgsIHksIGNoYXJEYXRhKSB7XG4gICAgICAgIHRoaXMuX2N0eC5zYXZlKCk7XG4gICAgICAgIHRoaXMuX2N0eC5maWxsU3R5bGUgPSB0aGlzLl9jb2xvcnMuY3Vyc29yLmNzcztcbiAgICAgICAgdGhpcy5maWxsQ2VsbHMoeCwgeSwgY2hhckRhdGFbQnVmZmVyXzEuQ0hBUl9EQVRBX1dJRFRIX0lOREVYXSwgMSk7XG4gICAgICAgIHRoaXMuX2N0eC5maWxsU3R5bGUgPSB0aGlzLl9jb2xvcnMuY3Vyc29yQWNjZW50LmNzcztcbiAgICAgICAgdGhpcy5maWxsQ2hhclRydWVDb2xvcih0ZXJtaW5hbCwgY2hhckRhdGEsIHgsIHkpO1xuICAgICAgICB0aGlzLl9jdHgucmVzdG9yZSgpO1xuICAgIH07XG4gICAgQ3Vyc29yUmVuZGVyTGF5ZXIucHJvdG90eXBlLl9yZW5kZXJVbmRlcmxpbmVDdXJzb3IgPSBmdW5jdGlvbiAodGVybWluYWwsIHgsIHksIGNoYXJEYXRhKSB7XG4gICAgICAgIHRoaXMuX2N0eC5zYXZlKCk7XG4gICAgICAgIHRoaXMuX2N0eC5maWxsU3R5bGUgPSB0aGlzLl9jb2xvcnMuY3Vyc29yLmNzcztcbiAgICAgICAgdGhpcy5maWxsQm90dG9tTGluZUF0Q2VsbHMoeCwgeSk7XG4gICAgICAgIHRoaXMuX2N0eC5yZXN0b3JlKCk7XG4gICAgfTtcbiAgICBDdXJzb3JSZW5kZXJMYXllci5wcm90b3R5cGUuX3JlbmRlckJsdXJDdXJzb3IgPSBmdW5jdGlvbiAodGVybWluYWwsIHgsIHksIGNoYXJEYXRhKSB7XG4gICAgICAgIHRoaXMuX2N0eC5zYXZlKCk7XG4gICAgICAgIHRoaXMuX2N0eC5zdHJva2VTdHlsZSA9IHRoaXMuX2NvbG9ycy5jdXJzb3IuY3NzO1xuICAgICAgICB0aGlzLnN0cm9rZVJlY3RBdENlbGwoeCwgeSwgY2hhckRhdGFbQnVmZmVyXzEuQ0hBUl9EQVRBX1dJRFRIX0lOREVYXSwgMSk7XG4gICAgICAgIHRoaXMuX2N0eC5yZXN0b3JlKCk7XG4gICAgfTtcbiAgICByZXR1cm4gQ3Vyc29yUmVuZGVyTGF5ZXI7XG59KEJhc2VSZW5kZXJMYXllcl8xLkJhc2VSZW5kZXJMYXllcikpO1xuZXhwb3J0cy5DdXJzb3JSZW5kZXJMYXllciA9IEN1cnNvclJlbmRlckxheWVyO1xudmFyIEN1cnNvckJsaW5rU3RhdGVNYW5hZ2VyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDdXJzb3JCbGlua1N0YXRlTWFuYWdlcih0ZXJtaW5hbCwgX3JlbmRlckNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX3JlbmRlckNhbGxiYWNrID0gX3JlbmRlckNhbGxiYWNrO1xuICAgICAgICB0aGlzLmlzQ3Vyc29yVmlzaWJsZSA9IHRydWU7XG4gICAgICAgIGlmICh0ZXJtaW5hbC5pc0ZvY3VzZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc3RhcnRJbnRlcnZhbCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDdXJzb3JCbGlua1N0YXRlTWFuYWdlci5wcm90b3R5cGUsIFwiaXNQYXVzZWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICEodGhpcy5fYmxpbmtTdGFydFRpbWVvdXQgfHwgdGhpcy5fYmxpbmtJbnRlcnZhbCk7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIEN1cnNvckJsaW5rU3RhdGVNYW5hZ2VyLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fYmxpbmtJbnRlcnZhbCkge1xuICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy5fYmxpbmtJbnRlcnZhbCk7XG4gICAgICAgICAgICB0aGlzLl9ibGlua0ludGVydmFsID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fYmxpbmtTdGFydFRpbWVvdXQpIHtcbiAgICAgICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5fYmxpbmtTdGFydFRpbWVvdXQpO1xuICAgICAgICAgICAgdGhpcy5fYmxpbmtTdGFydFRpbWVvdXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9hbmltYXRpb25GcmFtZSkge1xuICAgICAgICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuX2FuaW1hdGlvbkZyYW1lKTtcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbkZyYW1lID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ3Vyc29yQmxpbmtTdGF0ZU1hbmFnZXIucHJvdG90eXBlLnJlc3RhcnRCbGlua0FuaW1hdGlvbiA9IGZ1bmN0aW9uICh0ZXJtaW5hbCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5pc1BhdXNlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2FuaW1hdGlvblRpbWVSZXN0YXJ0ZWQgPSBEYXRlLm5vdygpO1xuICAgICAgICB0aGlzLmlzQ3Vyc29yVmlzaWJsZSA9IHRydWU7XG4gICAgICAgIGlmICghdGhpcy5fYW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGlvbkZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX3JlbmRlckNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2FuaW1hdGlvbkZyYW1lID0gbnVsbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDdXJzb3JCbGlua1N0YXRlTWFuYWdlci5wcm90b3R5cGUuX3Jlc3RhcnRJbnRlcnZhbCA9IGZ1bmN0aW9uICh0aW1lVG9TdGFydCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodGltZVRvU3RhcnQgPT09IHZvaWQgMCkgeyB0aW1lVG9TdGFydCA9IEJMSU5LX0lOVEVSVkFMOyB9XG4gICAgICAgIGlmICh0aGlzLl9ibGlua0ludGVydmFsKSB7XG4gICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLl9ibGlua0ludGVydmFsKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9ibGlua1N0YXJ0VGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKF90aGlzLl9hbmltYXRpb25UaW1lUmVzdGFydGVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRpbWUgPSBCTElOS19JTlRFUlZBTCAtIChEYXRlLm5vdygpIC0gX3RoaXMuX2FuaW1hdGlvblRpbWVSZXN0YXJ0ZWQpO1xuICAgICAgICAgICAgICAgIF90aGlzLl9hbmltYXRpb25UaW1lUmVzdGFydGVkID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAodGltZSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3Jlc3RhcnRJbnRlcnZhbCh0aW1lKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLmlzQ3Vyc29yVmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgX3RoaXMuX2FuaW1hdGlvbkZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX3JlbmRlckNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2FuaW1hdGlvbkZyYW1lID0gbnVsbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgX3RoaXMuX2JsaW5rSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLl9hbmltYXRpb25UaW1lUmVzdGFydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0aW1lID0gQkxJTktfSU5URVJWQUwgLSAoRGF0ZS5ub3coKSAtIF90aGlzLl9hbmltYXRpb25UaW1lUmVzdGFydGVkKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2FuaW1hdGlvblRpbWVSZXN0YXJ0ZWQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fcmVzdGFydEludGVydmFsKHRpbWUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF90aGlzLmlzQ3Vyc29yVmlzaWJsZSA9ICFfdGhpcy5pc0N1cnNvclZpc2libGU7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2FuaW1hdGlvbkZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9yZW5kZXJDYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fYW5pbWF0aW9uRnJhbWUgPSBudWxsO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgQkxJTktfSU5URVJWQUwpO1xuICAgICAgICB9LCB0aW1lVG9TdGFydCk7XG4gICAgfTtcbiAgICBDdXJzb3JCbGlua1N0YXRlTWFuYWdlci5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaXNDdXJzb3JWaXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKHRoaXMuX2JsaW5rSW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMuX2JsaW5rSW50ZXJ2YWwpO1xuICAgICAgICAgICAgdGhpcy5fYmxpbmtJbnRlcnZhbCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2JsaW5rU3RhcnRUaW1lb3V0KSB7XG4gICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMuX2JsaW5rU3RhcnRUaW1lb3V0KTtcbiAgICAgICAgICAgIHRoaXMuX2JsaW5rU3RhcnRUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fYW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgICAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLl9hbmltYXRpb25GcmFtZSk7XG4gICAgICAgICAgICB0aGlzLl9hbmltYXRpb25GcmFtZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEN1cnNvckJsaW5rU3RhdGVNYW5hZ2VyLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbiAodGVybWluYWwpIHtcbiAgICAgICAgdGhpcy5fYW5pbWF0aW9uVGltZVJlc3RhcnRlZCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3Jlc3RhcnRJbnRlcnZhbCgpO1xuICAgICAgICB0aGlzLnJlc3RhcnRCbGlua0FuaW1hdGlvbih0ZXJtaW5hbCk7XG4gICAgfTtcbiAgICByZXR1cm4gQ3Vyc29yQmxpbmtTdGF0ZU1hbmFnZXI7XG59KCkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q3Vyc29yUmVuZGVyTGF5ZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEJhc2VSZW5kZXJMYXllcl8xID0gcmVxdWlyZShcIi4vQmFzZVJlbmRlckxheWVyXCIpO1xudmFyIFR5cGVzXzEgPSByZXF1aXJlKFwiLi9hdGxhcy9UeXBlc1wiKTtcbnZhciBDaGFyQXRsYXNVdGlsc18xID0gcmVxdWlyZShcIi4vYXRsYXMvQ2hhckF0bGFzVXRpbHNcIik7XG52YXIgTGlua1JlbmRlckxheWVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTGlua1JlbmRlckxheWVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIExpbmtSZW5kZXJMYXllcihjb250YWluZXIsIHpJbmRleCwgY29sb3JzLCB0ZXJtaW5hbCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBjb250YWluZXIsICdsaW5rJywgekluZGV4LCB0cnVlLCBjb2xvcnMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9zdGF0ZSA9IG51bGw7XG4gICAgICAgIHRlcm1pbmFsLmxpbmtpZmllci5vbihcImxpbmtob3ZlclwiLCBmdW5jdGlvbiAoZSkgeyByZXR1cm4gX3RoaXMuX29uTGlua0hvdmVyKGUpOyB9KTtcbiAgICAgICAgdGVybWluYWwubGlua2lmaWVyLm9uKFwibGlua2xlYXZlXCIsIGZ1bmN0aW9uIChlKSB7IHJldHVybiBfdGhpcy5fb25MaW5rTGVhdmUoZSk7IH0pO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIExpbmtSZW5kZXJMYXllci5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24gKHRlcm1pbmFsLCBkaW0pIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5yZXNpemUuY2FsbCh0aGlzLCB0ZXJtaW5hbCwgZGltKTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBudWxsO1xuICAgIH07XG4gICAgTGlua1JlbmRlckxheWVyLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICh0ZXJtaW5hbCkge1xuICAgICAgICB0aGlzLl9jbGVhckN1cnJlbnRMaW5rKCk7XG4gICAgfTtcbiAgICBMaW5rUmVuZGVyTGF5ZXIucHJvdG90eXBlLl9jbGVhckN1cnJlbnRMaW5rID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fc3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJDZWxscyh0aGlzLl9zdGF0ZS54MSwgdGhpcy5fc3RhdGUueTEsIHRoaXMuX3N0YXRlLmNvbHMgLSB0aGlzLl9zdGF0ZS54MSwgMSk7XG4gICAgICAgICAgICB2YXIgbWlkZGxlUm93Q291bnQgPSB0aGlzLl9zdGF0ZS55MiAtIHRoaXMuX3N0YXRlLnkxIC0gMTtcbiAgICAgICAgICAgIGlmIChtaWRkbGVSb3dDb3VudCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyQ2VsbHMoMCwgdGhpcy5fc3RhdGUueTEgKyAxLCB0aGlzLl9zdGF0ZS5jb2xzLCBtaWRkbGVSb3dDb3VudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNsZWFyQ2VsbHMoMCwgdGhpcy5fc3RhdGUueTIsIHRoaXMuX3N0YXRlLngyLCAxKTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTGlua1JlbmRlckxheWVyLnByb3RvdHlwZS5fb25MaW5rSG92ZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAoZS5mZyA9PT0gVHlwZXNfMS5JTlZFUlRFRF9ERUZBVUxUX0NPTE9SKSB7XG4gICAgICAgICAgICB0aGlzLl9jdHguZmlsbFN0eWxlID0gdGhpcy5fY29sb3JzLmJhY2tncm91bmQuY3NzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKENoYXJBdGxhc1V0aWxzXzEuaXMyNTZDb2xvcihlLmZnKSkge1xuICAgICAgICAgICAgdGhpcy5fY3R4LmZpbGxTdHlsZSA9IHRoaXMuX2NvbG9ycy5hbnNpW2UuZmddLmNzcztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2N0eC5maWxsU3R5bGUgPSB0aGlzLl9jb2xvcnMuZm9yZWdyb3VuZC5jc3M7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGUueTEgPT09IGUueTIpIHtcbiAgICAgICAgICAgIHRoaXMuZmlsbEJvdHRvbUxpbmVBdENlbGxzKGUueDEsIGUueTEsIGUueDIgLSBlLngxKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZmlsbEJvdHRvbUxpbmVBdENlbGxzKGUueDEsIGUueTEsIGUuY29scyAtIGUueDEpO1xuICAgICAgICAgICAgZm9yICh2YXIgeSA9IGUueTEgKyAxOyB5IDwgZS55MjsgeSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5maWxsQm90dG9tTGluZUF0Q2VsbHMoMCwgeSwgZS5jb2xzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZmlsbEJvdHRvbUxpbmVBdENlbGxzKDAsIGUueTIsIGUueDIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3N0YXRlID0gZTtcbiAgICB9O1xuICAgIExpbmtSZW5kZXJMYXllci5wcm90b3R5cGUuX29uTGlua0xlYXZlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdGhpcy5fY2xlYXJDdXJyZW50TGluaygpO1xuICAgIH07XG4gICAgcmV0dXJuIExpbmtSZW5kZXJMYXllcjtcbn0oQmFzZVJlbmRlckxheWVyXzEuQmFzZVJlbmRlckxheWVyKSk7XG5leHBvcnRzLkxpbmtSZW5kZXJMYXllciA9IExpbmtSZW5kZXJMYXllcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUxpbmtSZW5kZXJMYXllci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBCdWZmZXJfMSA9IHJlcXVpcmUoXCIuLi9CdWZmZXJcIik7XG52YXIgQ2hhcmFjdGVySm9pbmVyUmVnaXN0cnkgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENoYXJhY3RlckpvaW5lclJlZ2lzdHJ5KF90ZXJtaW5hbCkge1xuICAgICAgICB0aGlzLl90ZXJtaW5hbCA9IF90ZXJtaW5hbDtcbiAgICAgICAgdGhpcy5fY2hhcmFjdGVySm9pbmVycyA9IFtdO1xuICAgICAgICB0aGlzLl9uZXh0Q2hhcmFjdGVySm9pbmVySWQgPSAwO1xuICAgIH1cbiAgICBDaGFyYWN0ZXJKb2luZXJSZWdpc3RyeS5wcm90b3R5cGUucmVnaXN0ZXJDaGFyYWN0ZXJKb2luZXIgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICB2YXIgam9pbmVyID0ge1xuICAgICAgICAgICAgaWQ6IHRoaXMuX25leHRDaGFyYWN0ZXJKb2luZXJJZCsrLFxuICAgICAgICAgICAgaGFuZGxlcjogaGFuZGxlclxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9jaGFyYWN0ZXJKb2luZXJzLnB1c2goam9pbmVyKTtcbiAgICAgICAgcmV0dXJuIGpvaW5lci5pZDtcbiAgICB9O1xuICAgIENoYXJhY3RlckpvaW5lclJlZ2lzdHJ5LnByb3RvdHlwZS5kZXJlZ2lzdGVyQ2hhcmFjdGVySm9pbmVyID0gZnVuY3Rpb24gKGpvaW5lcklkKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fY2hhcmFjdGVySm9pbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NoYXJhY3RlckpvaW5lcnNbaV0uaWQgPT09IGpvaW5lcklkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hhcmFjdGVySm9pbmVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgQ2hhcmFjdGVySm9pbmVyUmVnaXN0cnkucHJvdG90eXBlLmdldEpvaW5lZENoYXJhY3RlcnMgPSBmdW5jdGlvbiAocm93KSB7XG4gICAgICAgIGlmICh0aGlzLl9jaGFyYWN0ZXJKb2luZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsaW5lID0gdGhpcy5fdGVybWluYWwuYnVmZmVyLmxpbmVzLmdldChyb3cpO1xuICAgICAgICBpZiAobGluZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmFuZ2VzID0gW107XG4gICAgICAgIHZhciBsaW5lU3RyID0gdGhpcy5fdGVybWluYWwuYnVmZmVyLnRyYW5zbGF0ZUJ1ZmZlckxpbmVUb1N0cmluZyhyb3csIHRydWUpO1xuICAgICAgICB2YXIgcmFuZ2VTdGFydENvbHVtbiA9IDA7XG4gICAgICAgIHZhciBjdXJyZW50U3RyaW5nSW5kZXggPSAwO1xuICAgICAgICB2YXIgcmFuZ2VTdGFydFN0cmluZ0luZGV4ID0gMDtcbiAgICAgICAgdmFyIHJhbmdlQXR0ciA9IGxpbmUuZ2V0KDApW0J1ZmZlcl8xLkNIQVJfREFUQV9BVFRSX0lOREVYXSA+PiA5O1xuICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHRoaXMuX3Rlcm1pbmFsLmNvbHM7IHgrKykge1xuICAgICAgICAgICAgdmFyIGNoYXJEYXRhID0gbGluZS5nZXQoeCk7XG4gICAgICAgICAgICB2YXIgY2hhcnMgPSBjaGFyRGF0YVtCdWZmZXJfMS5DSEFSX0RBVEFfQ0hBUl9JTkRFWF07XG4gICAgICAgICAgICB2YXIgd2lkdGggPSBjaGFyRGF0YVtCdWZmZXJfMS5DSEFSX0RBVEFfV0lEVEhfSU5ERVhdO1xuICAgICAgICAgICAgdmFyIGF0dHIgPSBjaGFyRGF0YVtCdWZmZXJfMS5DSEFSX0RBVEFfQVRUUl9JTkRFWF0gPj4gOTtcbiAgICAgICAgICAgIGlmICh3aWR0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGF0dHIgIT09IHJhbmdlQXR0cikge1xuICAgICAgICAgICAgICAgIGlmICh4IC0gcmFuZ2VTdGFydENvbHVtbiA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGpvaW5lZFJhbmdlcyA9IHRoaXMuX2dldEpvaW5lZFJhbmdlcyhsaW5lU3RyLCByYW5nZVN0YXJ0U3RyaW5nSW5kZXgsIGN1cnJlbnRTdHJpbmdJbmRleCwgbGluZSwgcmFuZ2VTdGFydENvbHVtbik7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgam9pbmVkUmFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZXMucHVzaChqb2luZWRSYW5nZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJhbmdlU3RhcnRDb2x1bW4gPSB4O1xuICAgICAgICAgICAgICAgIHJhbmdlU3RhcnRTdHJpbmdJbmRleCA9IGN1cnJlbnRTdHJpbmdJbmRleDtcbiAgICAgICAgICAgICAgICByYW5nZUF0dHIgPSBhdHRyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudFN0cmluZ0luZGV4ICs9IGNoYXJzLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fdGVybWluYWwuY29scyAtIHJhbmdlU3RhcnRDb2x1bW4gPiAxKSB7XG4gICAgICAgICAgICB2YXIgam9pbmVkUmFuZ2VzID0gdGhpcy5fZ2V0Sm9pbmVkUmFuZ2VzKGxpbmVTdHIsIHJhbmdlU3RhcnRTdHJpbmdJbmRleCwgY3VycmVudFN0cmluZ0luZGV4LCBsaW5lLCByYW5nZVN0YXJ0Q29sdW1uKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgam9pbmVkUmFuZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcmFuZ2VzLnB1c2goam9pbmVkUmFuZ2VzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmFuZ2VzO1xuICAgIH07XG4gICAgQ2hhcmFjdGVySm9pbmVyUmVnaXN0cnkucHJvdG90eXBlLl9nZXRKb2luZWRSYW5nZXMgPSBmdW5jdGlvbiAobGluZSwgc3RhcnRJbmRleCwgZW5kSW5kZXgsIGxpbmVEYXRhLCBzdGFydENvbCkge1xuICAgICAgICB2YXIgdGV4dCA9IGxpbmUuc3Vic3RyaW5nKHN0YXJ0SW5kZXgsIGVuZEluZGV4KTtcbiAgICAgICAgdmFyIGpvaW5lZFJhbmdlcyA9IHRoaXMuX2NoYXJhY3RlckpvaW5lcnNbMF0uaGFuZGxlcih0ZXh0KTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCB0aGlzLl9jaGFyYWN0ZXJKb2luZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgam9pbmVyUmFuZ2VzID0gdGhpcy5fY2hhcmFjdGVySm9pbmVyc1tpXS5oYW5kbGVyKHRleHQpO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBqb2luZXJSYW5nZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBDaGFyYWN0ZXJKb2luZXJSZWdpc3RyeS5fbWVyZ2VSYW5nZXMoam9pbmVkUmFuZ2VzLCBqb2luZXJSYW5nZXNbal0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3N0cmluZ1Jhbmdlc1RvQ2VsbFJhbmdlcyhqb2luZWRSYW5nZXMsIGxpbmVEYXRhLCBzdGFydENvbCk7XG4gICAgICAgIHJldHVybiBqb2luZWRSYW5nZXM7XG4gICAgfTtcbiAgICBDaGFyYWN0ZXJKb2luZXJSZWdpc3RyeS5wcm90b3R5cGUuX3N0cmluZ1Jhbmdlc1RvQ2VsbFJhbmdlcyA9IGZ1bmN0aW9uIChyYW5nZXMsIGxpbmUsIHN0YXJ0Q29sKSB7XG4gICAgICAgIHZhciBjdXJyZW50UmFuZ2VJbmRleCA9IDA7XG4gICAgICAgIHZhciBjdXJyZW50UmFuZ2VTdGFydGVkID0gZmFsc2U7XG4gICAgICAgIHZhciBjdXJyZW50U3RyaW5nSW5kZXggPSAwO1xuICAgICAgICB2YXIgY3VycmVudFJhbmdlID0gcmFuZ2VzW2N1cnJlbnRSYW5nZUluZGV4XTtcbiAgICAgICAgaWYgKCFjdXJyZW50UmFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciB4ID0gc3RhcnRDb2w7IHggPCB0aGlzLl90ZXJtaW5hbC5jb2xzOyB4KyspIHtcbiAgICAgICAgICAgIHZhciBjaGFyRGF0YSA9IGxpbmUuZ2V0KHgpO1xuICAgICAgICAgICAgdmFyIHdpZHRoID0gY2hhckRhdGFbQnVmZmVyXzEuQ0hBUl9EQVRBX1dJRFRIX0lOREVYXTtcbiAgICAgICAgICAgIHZhciBsZW5ndGhfMSA9IGNoYXJEYXRhW0J1ZmZlcl8xLkNIQVJfREFUQV9DSEFSX0lOREVYXS5sZW5ndGg7XG4gICAgICAgICAgICBpZiAod2lkdGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY3VycmVudFJhbmdlU3RhcnRlZCAmJiBjdXJyZW50UmFuZ2VbMF0gPD0gY3VycmVudFN0cmluZ0luZGV4KSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFJhbmdlWzBdID0geDtcbiAgICAgICAgICAgICAgICBjdXJyZW50UmFuZ2VTdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjdXJyZW50UmFuZ2VbMV0gPD0gY3VycmVudFN0cmluZ0luZGV4KSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFJhbmdlWzFdID0geDtcbiAgICAgICAgICAgICAgICBjdXJyZW50UmFuZ2UgPSByYW5nZXNbKytjdXJyZW50UmFuZ2VJbmRleF07XG4gICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50UmFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50UmFuZ2VbMF0gPD0gY3VycmVudFN0cmluZ0luZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSYW5nZVswXSA9IHg7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRSYW5nZVN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFJhbmdlU3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJlbnRTdHJpbmdJbmRleCArPSBsZW5ndGhfMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudFJhbmdlKSB7XG4gICAgICAgICAgICBjdXJyZW50UmFuZ2VbMV0gPSB0aGlzLl90ZXJtaW5hbC5jb2xzO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDaGFyYWN0ZXJKb2luZXJSZWdpc3RyeS5fbWVyZ2VSYW5nZXMgPSBmdW5jdGlvbiAocmFuZ2VzLCBuZXdSYW5nZSkge1xuICAgICAgICB2YXIgaW5SYW5nZSA9IGZhbHNlO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhbmdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHJhbmdlID0gcmFuZ2VzW2ldO1xuICAgICAgICAgICAgaWYgKCFpblJhbmdlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1JhbmdlWzFdIDw9IHJhbmdlWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlcy5zcGxpY2UoaSwgMCwgbmV3UmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmFuZ2VzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobmV3UmFuZ2VbMV0gPD0gcmFuZ2VbMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VbMF0gPSBNYXRoLm1pbihuZXdSYW5nZVswXSwgcmFuZ2VbMF0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmFuZ2VzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobmV3UmFuZ2VbMF0gPCByYW5nZVsxXSkge1xuICAgICAgICAgICAgICAgICAgICByYW5nZVswXSA9IE1hdGgubWluKG5ld1JhbmdlWzBdLCByYW5nZVswXSk7XG4gICAgICAgICAgICAgICAgICAgIGluUmFuZ2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChuZXdSYW5nZVsxXSA8PSByYW5nZVswXSkge1xuICAgICAgICAgICAgICAgICAgICByYW5nZXNbaSAtIDFdWzFdID0gbmV3UmFuZ2VbMV07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByYW5nZXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChuZXdSYW5nZVsxXSA8PSByYW5nZVsxXSkge1xuICAgICAgICAgICAgICAgICAgICByYW5nZXNbaSAtIDFdWzFdID0gTWF0aC5tYXgobmV3UmFuZ2VbMV0sIHJhbmdlWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgaW5SYW5nZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmFuZ2VzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByYW5nZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIGktLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5SYW5nZSkge1xuICAgICAgICAgICAgcmFuZ2VzW3Jhbmdlcy5sZW5ndGggLSAxXVsxXSA9IG5ld1JhbmdlWzFdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmFuZ2VzLnB1c2gobmV3UmFuZ2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByYW5nZXM7XG4gICAgfTtcbiAgICByZXR1cm4gQ2hhcmFjdGVySm9pbmVyUmVnaXN0cnk7XG59KCkpO1xuZXhwb3J0cy5DaGFyYWN0ZXJKb2luZXJSZWdpc3RyeSA9IENoYXJhY3RlckpvaW5lclJlZ2lzdHJ5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2hhcmFjdGVySm9pbmVyUmVnaXN0cnkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIE1vdXNlWm9uZU1hbmFnZXJfMSA9IHJlcXVpcmUoXCIuL3VpL01vdXNlWm9uZU1hbmFnZXJcIik7XG52YXIgRXZlbnRFbWl0dGVyXzEgPSByZXF1aXJlKFwiLi9jb21tb24vRXZlbnRFbWl0dGVyXCIpO1xudmFyIEJ1ZmZlcl8xID0gcmVxdWlyZShcIi4vQnVmZmVyXCIpO1xudmFyIENoYXJXaWR0aF8xID0gcmVxdWlyZShcIi4vQ2hhcldpZHRoXCIpO1xudmFyIExpbmtpZmllciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKExpbmtpZmllciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBMaW5raWZpZXIoX3Rlcm1pbmFsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl90ZXJtaW5hbCA9IF90ZXJtaW5hbDtcbiAgICAgICAgX3RoaXMuX2xpbmtNYXRjaGVycyA9IFtdO1xuICAgICAgICBfdGhpcy5fbmV4dExpbmtNYXRjaGVySWQgPSAwO1xuICAgICAgICBfdGhpcy5fcm93c1RvTGlua2lmeSA9IHtcbiAgICAgICAgICAgIHN0YXJ0OiBudWxsLFxuICAgICAgICAgICAgZW5kOiBudWxsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgTGlua2lmaWVyLnByb3RvdHlwZS5hdHRhY2hUb0RvbSA9IGZ1bmN0aW9uIChtb3VzZVpvbmVNYW5hZ2VyKSB7XG4gICAgICAgIHRoaXMuX21vdXNlWm9uZU1hbmFnZXIgPSBtb3VzZVpvbmVNYW5hZ2VyO1xuICAgIH07XG4gICAgTGlua2lmaWVyLnByb3RvdHlwZS5saW5raWZ5Um93cyA9IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICghdGhpcy5fbW91c2Vab25lTWFuYWdlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9yb3dzVG9MaW5raWZ5LnN0YXJ0ID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9yb3dzVG9MaW5raWZ5LnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgICB0aGlzLl9yb3dzVG9MaW5raWZ5LmVuZCA9IGVuZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3Jvd3NUb0xpbmtpZnkuc3RhcnQgPSBNYXRoLm1pbih0aGlzLl9yb3dzVG9MaW5raWZ5LnN0YXJ0LCBzdGFydCk7XG4gICAgICAgICAgICB0aGlzLl9yb3dzVG9MaW5raWZ5LmVuZCA9IE1hdGgubWF4KHRoaXMuX3Jvd3NUb0xpbmtpZnkuZW5kLCBlbmQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX21vdXNlWm9uZU1hbmFnZXIuY2xlYXJBbGwoc3RhcnQsIGVuZCk7XG4gICAgICAgIGlmICh0aGlzLl9yb3dzVGltZW91dElkKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fcm93c1RpbWVvdXRJZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcm93c1RpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX2xpbmtpZnlSb3dzKCk7IH0sIExpbmtpZmllci5USU1FX0JFRk9SRV9MSU5LSUZZKTtcbiAgICB9O1xuICAgIExpbmtpZmllci5wcm90b3R5cGUuX2xpbmtpZnlSb3dzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9yb3dzVGltZW91dElkID0gbnVsbDtcbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlcjtcbiAgICAgICAgdmFyIGFic29sdXRlUm93SW5kZXhTdGFydCA9IGJ1ZmZlci55ZGlzcCArIHRoaXMuX3Jvd3NUb0xpbmtpZnkuc3RhcnQ7XG4gICAgICAgIGlmIChhYnNvbHV0ZVJvd0luZGV4U3RhcnQgPj0gYnVmZmVyLmxpbmVzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhYnNvbHV0ZVJvd0luZGV4RW5kID0gYnVmZmVyLnlkaXNwICsgTWF0aC5taW4odGhpcy5fcm93c1RvTGlua2lmeS5lbmQsIHRoaXMuX3Rlcm1pbmFsLnJvd3MpICsgMTtcbiAgICAgICAgdmFyIG92ZXJzY2FuTGluZUxpbWl0ID0gTWF0aC5jZWlsKExpbmtpZmllci5PVkVSU0NBTl9DSEFSX0xJTUlUIC8gdGhpcy5fdGVybWluYWwuY29scyk7XG4gICAgICAgIHZhciBpdGVyYXRvciA9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci5pdGVyYXRvcihmYWxzZSwgYWJzb2x1dGVSb3dJbmRleFN0YXJ0LCBhYnNvbHV0ZVJvd0luZGV4RW5kLCBvdmVyc2NhbkxpbmVMaW1pdCwgb3ZlcnNjYW5MaW5lTGltaXQpO1xuICAgICAgICB3aGlsZSAoaXRlcmF0b3IuaGFzTmV4dCgpKSB7XG4gICAgICAgICAgICB2YXIgbGluZURhdGEgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX2xpbmtNYXRjaGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RvTGlua2lmeVJvdyhsaW5lRGF0YS5yYW5nZS5maXJzdCwgbGluZURhdGEuY29udGVudCwgdGhpcy5fbGlua01hdGNoZXJzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yb3dzVG9MaW5raWZ5LnN0YXJ0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcm93c1RvTGlua2lmeS5lbmQgPSBudWxsO1xuICAgIH07XG4gICAgTGlua2lmaWVyLnByb3RvdHlwZS5yZWdpc3RlckxpbmtNYXRjaGVyID0gZnVuY3Rpb24gKHJlZ2V4LCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgIGlmICghaGFuZGxlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoYW5kbGVyIG11c3QgYmUgZGVmaW5lZCcpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtYXRjaGVyID0ge1xuICAgICAgICAgICAgaWQ6IHRoaXMuX25leHRMaW5rTWF0Y2hlcklkKyssXG4gICAgICAgICAgICByZWdleDogcmVnZXgsXG4gICAgICAgICAgICBoYW5kbGVyOiBoYW5kbGVyLFxuICAgICAgICAgICAgbWF0Y2hJbmRleDogb3B0aW9ucy5tYXRjaEluZGV4LFxuICAgICAgICAgICAgdmFsaWRhdGlvbkNhbGxiYWNrOiBvcHRpb25zLnZhbGlkYXRpb25DYWxsYmFjayxcbiAgICAgICAgICAgIGhvdmVyVG9vbHRpcENhbGxiYWNrOiBvcHRpb25zLnRvb2x0aXBDYWxsYmFjayxcbiAgICAgICAgICAgIGhvdmVyTGVhdmVDYWxsYmFjazogb3B0aW9ucy5sZWF2ZUNhbGxiYWNrLFxuICAgICAgICAgICAgd2lsbExpbmtBY3RpdmF0ZTogb3B0aW9ucy53aWxsTGlua0FjdGl2YXRlLFxuICAgICAgICAgICAgcHJpb3JpdHk6IG9wdGlvbnMucHJpb3JpdHkgfHwgMFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9hZGRMaW5rTWF0Y2hlclRvTGlzdChtYXRjaGVyKTtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXIuaWQ7XG4gICAgfTtcbiAgICBMaW5raWZpZXIucHJvdG90eXBlLl9hZGRMaW5rTWF0Y2hlclRvTGlzdCA9IGZ1bmN0aW9uIChtYXRjaGVyKSB7XG4gICAgICAgIGlmICh0aGlzLl9saW5rTWF0Y2hlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9saW5rTWF0Y2hlcnMucHVzaChtYXRjaGVyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5fbGlua01hdGNoZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBpZiAobWF0Y2hlci5wcmlvcml0eSA8PSB0aGlzLl9saW5rTWF0Y2hlcnNbaV0ucHJpb3JpdHkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9saW5rTWF0Y2hlcnMuc3BsaWNlKGkgKyAxLCAwLCBtYXRjaGVyKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGlua01hdGNoZXJzLnNwbGljZSgwLCAwLCBtYXRjaGVyKTtcbiAgICB9O1xuICAgIExpbmtpZmllci5wcm90b3R5cGUuZGVyZWdpc3RlckxpbmtNYXRjaGVyID0gZnVuY3Rpb24gKG1hdGNoZXJJZCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX2xpbmtNYXRjaGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2xpbmtNYXRjaGVyc1tpXS5pZCA9PT0gbWF0Y2hlcklkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGlua01hdGNoZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBMaW5raWZpZXIucHJvdG90eXBlLl9kb0xpbmtpZnlSb3cgPSBmdW5jdGlvbiAocm93SW5kZXgsIHRleHQsIG1hdGNoZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHJleCA9IG5ldyBSZWdFeHAobWF0Y2hlci5yZWdleC5zb3VyY2UsIG1hdGNoZXIucmVnZXguZmxhZ3MgKyAnZycpO1xuICAgICAgICB2YXIgbWF0Y2g7XG4gICAgICAgIHZhciBzdHJpbmdJbmRleCA9IC0xO1xuICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB1cmkgPSBtYXRjaFt0eXBlb2YgbWF0Y2hlci5tYXRjaEluZGV4ICE9PSAnbnVtYmVyJyA/IDAgOiBtYXRjaGVyLm1hdGNoSW5kZXhdO1xuICAgICAgICAgICAgaWYgKCF1cmkpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpc18xLl90ZXJtaW5hbC5kZWJ1Zykge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh7IG1hdGNoOiBtYXRjaCwgbWF0Y2hlcjogbWF0Y2hlciB9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtYXRjaCBmb3VuZCB3aXRob3V0IGNvcnJlc3BvbmRpbmcgbWF0Y2hJbmRleCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gXCJicmVha1wiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RyaW5nSW5kZXggPSB0ZXh0LmluZGV4T2YodXJpLCBzdHJpbmdJbmRleCArIDEpO1xuICAgICAgICAgICAgcmV4Lmxhc3RJbmRleCA9IHN0cmluZ0luZGV4ICsgdXJpLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBidWZmZXJJbmRleCA9IHRoaXNfMS5fdGVybWluYWwuYnVmZmVyLnN0cmluZ0luZGV4VG9CdWZmZXJJbmRleChyb3dJbmRleCwgc3RyaW5nSW5kZXgpO1xuICAgICAgICAgICAgdmFyIGxpbmUgPSB0aGlzXzEuX3Rlcm1pbmFsLmJ1ZmZlci5saW5lcy5nZXQoYnVmZmVySW5kZXhbMF0pO1xuICAgICAgICAgICAgdmFyIGNoYXIgPSBsaW5lLmdldChidWZmZXJJbmRleFsxXSk7XG4gICAgICAgICAgICB2YXIgZmc7XG4gICAgICAgICAgICBpZiAoY2hhcikge1xuICAgICAgICAgICAgICAgIHZhciBhdHRyID0gY2hhcltCdWZmZXJfMS5DSEFSX0RBVEFfQVRUUl9JTkRFWF07XG4gICAgICAgICAgICAgICAgZmcgPSAoYXR0ciA+PiA5KSAmIDB4MWZmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGNoZXIudmFsaWRhdGlvbkNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hlci52YWxpZGF0aW9uQ2FsbGJhY2sodXJpLCBmdW5jdGlvbiAoaXNWYWxpZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX3Jvd3NUaW1lb3V0SWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2FkZExpbmsoYnVmZmVySW5kZXhbMV0sIGJ1ZmZlckluZGV4WzBdIC0gX3RoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ZGlzcCwgdXJpLCBtYXRjaGVyLCBmZyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXNfMS5fYWRkTGluayhidWZmZXJJbmRleFsxXSwgYnVmZmVySW5kZXhbMF0gLSB0aGlzXzEuX3Rlcm1pbmFsLmJ1ZmZlci55ZGlzcCwgdXJpLCBtYXRjaGVyLCBmZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHZhciB0aGlzXzEgPSB0aGlzO1xuICAgICAgICB3aGlsZSAoKG1hdGNoID0gcmV4LmV4ZWModGV4dCkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgc3RhdGVfMSA9IF9sb29wXzEoKTtcbiAgICAgICAgICAgIGlmIChzdGF0ZV8xID09PSBcImJyZWFrXCIpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIExpbmtpZmllci5wcm90b3R5cGUuX2FkZExpbmsgPSBmdW5jdGlvbiAoeCwgeSwgdXJpLCBtYXRjaGVyLCBmZykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgd2lkdGggPSBDaGFyV2lkdGhfMS5nZXRTdHJpbmdDZWxsV2lkdGgodXJpKTtcbiAgICAgICAgdmFyIHgxID0geCAlIHRoaXMuX3Rlcm1pbmFsLmNvbHM7XG4gICAgICAgIHZhciB5MSA9IHkgKyBNYXRoLmZsb29yKHggLyB0aGlzLl90ZXJtaW5hbC5jb2xzKTtcbiAgICAgICAgdmFyIHgyID0gKHgxICsgd2lkdGgpICUgdGhpcy5fdGVybWluYWwuY29scztcbiAgICAgICAgdmFyIHkyID0geTEgKyBNYXRoLmZsb29yKCh4MSArIHdpZHRoKSAvIHRoaXMuX3Rlcm1pbmFsLmNvbHMpO1xuICAgICAgICBpZiAoeDIgPT09IDApIHtcbiAgICAgICAgICAgIHgyID0gdGhpcy5fdGVybWluYWwuY29scztcbiAgICAgICAgICAgIHkyLS07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbW91c2Vab25lTWFuYWdlci5hZGQobmV3IE1vdXNlWm9uZU1hbmFnZXJfMS5Nb3VzZVpvbmUoeDEgKyAxLCB5MSArIDEsIHgyICsgMSwgeTIgKyAxLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgaWYgKG1hdGNoZXIuaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaGVyLmhhbmRsZXIoZSwgdXJpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdpbmRvdy5vcGVuKHVyaSwgJ19ibGFuaycpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgX3RoaXMuZW1pdChcImxpbmtob3ZlclwiLCBfdGhpcy5fY3JlYXRlTGlua0hvdmVyRXZlbnQoeDEsIHkxLCB4MiwgeTIsIGZnKSk7XG4gICAgICAgICAgICBfdGhpcy5fdGVybWluYWwuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCd4dGVybS1jdXJzb3ItcG9pbnRlcicpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgX3RoaXMuZW1pdChcImxpbmt0b29sdGlwXCIsIF90aGlzLl9jcmVhdGVMaW5rSG92ZXJFdmVudCh4MSwgeTEsIHgyLCB5MiwgZmcpKTtcbiAgICAgICAgICAgIGlmIChtYXRjaGVyLmhvdmVyVG9vbHRpcENhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hlci5ob3ZlclRvb2x0aXBDYWxsYmFjayhlLCB1cmkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5lbWl0KFwibGlua2xlYXZlXCIsIF90aGlzLl9jcmVhdGVMaW5rSG92ZXJFdmVudCh4MSwgeTEsIHgyLCB5MiwgZmcpKTtcbiAgICAgICAgICAgIF90aGlzLl90ZXJtaW5hbC5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ3h0ZXJtLWN1cnNvci1wb2ludGVyJyk7XG4gICAgICAgICAgICBpZiAobWF0Y2hlci5ob3ZlckxlYXZlQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBtYXRjaGVyLmhvdmVyTGVhdmVDYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgaWYgKG1hdGNoZXIud2lsbExpbmtBY3RpdmF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaGVyLndpbGxMaW5rQWN0aXZhdGUoZSwgdXJpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KSk7XG4gICAgfTtcbiAgICBMaW5raWZpZXIucHJvdG90eXBlLl9jcmVhdGVMaW5rSG92ZXJFdmVudCA9IGZ1bmN0aW9uICh4MSwgeTEsIHgyLCB5MiwgZmcpIHtcbiAgICAgICAgcmV0dXJuIHsgeDE6IHgxLCB5MTogeTEsIHgyOiB4MiwgeTI6IHkyLCBjb2xzOiB0aGlzLl90ZXJtaW5hbC5jb2xzLCBmZzogZmcgfTtcbiAgICB9O1xuICAgIExpbmtpZmllci5USU1FX0JFRk9SRV9MSU5LSUZZID0gMjAwO1xuICAgIExpbmtpZmllci5PVkVSU0NBTl9DSEFSX0xJTUlUID0gMjAwMDtcbiAgICByZXR1cm4gTGlua2lmaWVyO1xufShFdmVudEVtaXR0ZXJfMS5FdmVudEVtaXR0ZXIpKTtcbmV4cG9ydHMuTGlua2lmaWVyID0gTGlua2lmaWVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TGlua2lmaWVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBNb3VzZUhlbHBlcl8xID0gcmVxdWlyZShcIi4vdXRpbHMvTW91c2VIZWxwZXJcIik7XG52YXIgQnJvd3NlciA9IHJlcXVpcmUoXCIuL2NvcmUvUGxhdGZvcm1cIik7XG52YXIgRXZlbnRFbWl0dGVyXzEgPSByZXF1aXJlKFwiLi9jb21tb24vRXZlbnRFbWl0dGVyXCIpO1xudmFyIFNlbGVjdGlvbk1vZGVsXzEgPSByZXF1aXJlKFwiLi9TZWxlY3Rpb25Nb2RlbFwiKTtcbnZhciBCdWZmZXJfMSA9IHJlcXVpcmUoXCIuL0J1ZmZlclwiKTtcbnZhciBBbHRDbGlja0hhbmRsZXJfMSA9IHJlcXVpcmUoXCIuL2hhbmRsZXJzL0FsdENsaWNrSGFuZGxlclwiKTtcbnZhciBEUkFHX1NDUk9MTF9NQVhfVEhSRVNIT0xEID0gNTA7XG52YXIgRFJBR19TQ1JPTExfTUFYX1NQRUVEID0gMTU7XG52YXIgRFJBR19TQ1JPTExfSU5URVJWQUwgPSA1MDtcbnZhciBBTFRfQ0xJQ0tfTU9WRV9DVVJTT1JfVElNRSA9IDUwMDtcbnZhciBXT1JEX1NFUEFSQVRPUlMgPSAnICgpW117fVxcJ1wiJztcbnZhciBOT05fQlJFQUtJTkdfU1BBQ0VfQ0hBUiA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMTYwKTtcbnZhciBBTExfTk9OX0JSRUFLSU5HX1NQQUNFX1JFR0VYID0gbmV3IFJlZ0V4cChOT05fQlJFQUtJTkdfU1BBQ0VfQ0hBUiwgJ2cnKTtcbnZhciBTZWxlY3Rpb25NYW5hZ2VyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU2VsZWN0aW9uTWFuYWdlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTZWxlY3Rpb25NYW5hZ2VyKF90ZXJtaW5hbCwgX2NoYXJNZWFzdXJlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl90ZXJtaW5hbCA9IF90ZXJtaW5hbDtcbiAgICAgICAgX3RoaXMuX2NoYXJNZWFzdXJlID0gX2NoYXJNZWFzdXJlO1xuICAgICAgICBfdGhpcy5fZW5hYmxlZCA9IHRydWU7XG4gICAgICAgIF90aGlzLl9pbml0TGlzdGVuZXJzKCk7XG4gICAgICAgIF90aGlzLmVuYWJsZSgpO1xuICAgICAgICBfdGhpcy5fbW9kZWwgPSBuZXcgU2VsZWN0aW9uTW9kZWxfMS5TZWxlY3Rpb25Nb2RlbChfdGVybWluYWwpO1xuICAgICAgICBfdGhpcy5fYWN0aXZlU2VsZWN0aW9uTW9kZSA9IDA7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU2VsZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuX3JlbW92ZU1vdXNlRG93bkxpc3RlbmVycygpO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNlbGVjdGlvbk1hbmFnZXIucHJvdG90eXBlLCBcIl9idWZmZXJcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90ZXJtaW5hbC5idWZmZXJzLmFjdGl2ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgU2VsZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuX2luaXRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuX21vdXNlTW92ZUxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7IHJldHVybiBfdGhpcy5fb25Nb3VzZU1vdmUoZXZlbnQpOyB9O1xuICAgICAgICB0aGlzLl9tb3VzZVVwTGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHsgcmV0dXJuIF90aGlzLl9vbk1vdXNlVXAoZXZlbnQpOyB9O1xuICAgICAgICB0aGlzLl90cmltTGlzdGVuZXIgPSBmdW5jdGlvbiAoYW1vdW50KSB7IHJldHVybiBfdGhpcy5fb25UcmltKGFtb3VudCk7IH07XG4gICAgICAgIHRoaXMuaW5pdEJ1ZmZlcnNMaXN0ZW5lcnMoKTtcbiAgICB9O1xuICAgIFNlbGVjdGlvbk1hbmFnZXIucHJvdG90eXBlLmluaXRCdWZmZXJzTGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXIubGluZXMub24oJ3RyaW0nLCB0aGlzLl90cmltTGlzdGVuZXIpO1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5idWZmZXJzLm9uKCdhY3RpdmF0ZScsIGZ1bmN0aW9uIChlKSB7IHJldHVybiBfdGhpcy5fb25CdWZmZXJBY3RpdmF0ZShlKTsgfSk7XG4gICAgfTtcbiAgICBTZWxlY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNsZWFyU2VsZWN0aW9uKCk7XG4gICAgICAgIHRoaXMuX2VuYWJsZWQgPSBmYWxzZTtcbiAgICB9O1xuICAgIFNlbGVjdGlvbk1hbmFnZXIucHJvdG90eXBlLmVuYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fZW5hYmxlZCA9IHRydWU7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2VsZWN0aW9uTWFuYWdlci5wcm90b3R5cGUsIFwic2VsZWN0aW9uU3RhcnRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX21vZGVsLmZpbmFsU2VsZWN0aW9uU3RhcnQ7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTZWxlY3Rpb25NYW5hZ2VyLnByb3RvdHlwZSwgXCJzZWxlY3Rpb25FbmRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX21vZGVsLmZpbmFsU2VsZWN0aW9uRW5kOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2VsZWN0aW9uTWFuYWdlci5wcm90b3R5cGUsIFwiaGFzU2VsZWN0aW9uXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLl9tb2RlbC5maW5hbFNlbGVjdGlvblN0YXJ0O1xuICAgICAgICAgICAgdmFyIGVuZCA9IHRoaXMuX21vZGVsLmZpbmFsU2VsZWN0aW9uRW5kO1xuICAgICAgICAgICAgaWYgKCFzdGFydCB8fCAhZW5kKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN0YXJ0WzBdICE9PSBlbmRbMF0gfHwgc3RhcnRbMV0gIT09IGVuZFsxXTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNlbGVjdGlvbk1hbmFnZXIucHJvdG90eXBlLCBcInNlbGVjdGlvblRleHRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzdGFydCA9IHRoaXMuX21vZGVsLmZpbmFsU2VsZWN0aW9uU3RhcnQ7XG4gICAgICAgICAgICB2YXIgZW5kID0gdGhpcy5fbW9kZWwuZmluYWxTZWxlY3Rpb25FbmQ7XG4gICAgICAgICAgICBpZiAoIXN0YXJ0IHx8ICFlbmQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgICAgICBpZiAodGhpcy5fYWN0aXZlU2VsZWN0aW9uTW9kZSA9PT0gMykge1xuICAgICAgICAgICAgICAgIGlmIChzdGFydFswXSA9PT0gZW5kWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0WzFdOyBpIDw9IGVuZFsxXTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsaW5lVGV4dCA9IHRoaXMuX2J1ZmZlci50cmFuc2xhdGVCdWZmZXJMaW5lVG9TdHJpbmcoaSwgdHJ1ZSwgc3RhcnRbMF0sIGVuZFswXSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGxpbmVUZXh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRSb3dFbmRDb2wgPSBzdGFydFsxXSA9PT0gZW5kWzFdID8gZW5kWzBdIDogbnVsbDtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh0aGlzLl9idWZmZXIudHJhbnNsYXRlQnVmZmVyTGluZVRvU3RyaW5nKHN0YXJ0WzFdLCB0cnVlLCBzdGFydFswXSwgc3RhcnRSb3dFbmRDb2wpKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gc3RhcnRbMV0gKyAxOyBpIDw9IGVuZFsxXSAtIDE7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyTGluZSA9IHRoaXMuX2J1ZmZlci5saW5lcy5nZXQoaSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsaW5lVGV4dCA9IHRoaXMuX2J1ZmZlci50cmFuc2xhdGVCdWZmZXJMaW5lVG9TdHJpbmcoaSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChidWZmZXJMaW5lLmlzV3JhcHBlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGggLSAxXSArPSBsaW5lVGV4dDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGxpbmVUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc3RhcnRbMV0gIT09IGVuZFsxXSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyTGluZSA9IHRoaXMuX2J1ZmZlci5saW5lcy5nZXQoZW5kWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxpbmVUZXh0ID0gdGhpcy5fYnVmZmVyLnRyYW5zbGF0ZUJ1ZmZlckxpbmVUb1N0cmluZyhlbmRbMV0sIHRydWUsIDAsIGVuZFswXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChidWZmZXJMaW5lLmlzV3JhcHBlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGggLSAxXSArPSBsaW5lVGV4dDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGxpbmVUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBmb3JtYXR0ZWRSZXN1bHQgPSByZXN1bHQubWFwKGZ1bmN0aW9uIChsaW5lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxpbmUucmVwbGFjZShBTExfTk9OX0JSRUFLSU5HX1NQQUNFX1JFR0VYLCAnICcpO1xuICAgICAgICAgICAgfSkuam9pbihCcm93c2VyLmlzTVNXaW5kb3dzID8gJ1xcclxcbicgOiAnXFxuJyk7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0dGVkUmVzdWx0O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBTZWxlY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5jbGVhclNlbGVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fbW9kZWwuY2xlYXJTZWxlY3Rpb24oKTtcbiAgICAgICAgdGhpcy5fcmVtb3ZlTW91c2VEb3duTGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgIH07XG4gICAgU2VsZWN0aW9uTWFuYWdlci5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uIChpc05ld1NlbGVjdGlvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMuX3JlZnJlc2hBbmltYXRpb25GcmFtZSkge1xuICAgICAgICAgICAgdGhpcy5fcmVmcmVzaEFuaW1hdGlvbkZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fcmVmcmVzaCgpOyB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQnJvd3Nlci5pc0xpbnV4ICYmIGlzTmV3U2VsZWN0aW9uKSB7XG4gICAgICAgICAgICB2YXIgc2VsZWN0aW9uVGV4dCA9IHRoaXMuc2VsZWN0aW9uVGV4dDtcbiAgICAgICAgICAgIGlmIChzZWxlY3Rpb25UZXh0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdCgnbmV3c2VsZWN0aW9uJywgdGhpcy5zZWxlY3Rpb25UZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU2VsZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuX3JlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3JlZnJlc2hBbmltYXRpb25GcmFtZSA9IG51bGw7XG4gICAgICAgIHRoaXMuZW1pdCgncmVmcmVzaCcsIHtcbiAgICAgICAgICAgIHN0YXJ0OiB0aGlzLl9tb2RlbC5maW5hbFNlbGVjdGlvblN0YXJ0LFxuICAgICAgICAgICAgZW5kOiB0aGlzLl9tb2RlbC5maW5hbFNlbGVjdGlvbkVuZCxcbiAgICAgICAgICAgIGNvbHVtblNlbGVjdE1vZGU6IHRoaXMuX2FjdGl2ZVNlbGVjdGlvbk1vZGUgPT09IDNcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTZWxlY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5pc0NsaWNrSW5TZWxlY3Rpb24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIGNvb3JkcyA9IHRoaXMuX2dldE1vdXNlQnVmZmVyQ29vcmRzKGV2ZW50KTtcbiAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5fbW9kZWwuZmluYWxTZWxlY3Rpb25TdGFydDtcbiAgICAgICAgdmFyIGVuZCA9IHRoaXMuX21vZGVsLmZpbmFsU2VsZWN0aW9uRW5kO1xuICAgICAgICBpZiAoIXN0YXJ0IHx8ICFlbmQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fYXJlQ29vcmRzSW5TZWxlY3Rpb24oY29vcmRzLCBzdGFydCwgZW5kKTtcbiAgICB9O1xuICAgIFNlbGVjdGlvbk1hbmFnZXIucHJvdG90eXBlLl9hcmVDb29yZHNJblNlbGVjdGlvbiA9IGZ1bmN0aW9uIChjb29yZHMsIHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgcmV0dXJuIChjb29yZHNbMV0gPiBzdGFydFsxXSAmJiBjb29yZHNbMV0gPCBlbmRbMV0pIHx8XG4gICAgICAgICAgICAoc3RhcnRbMV0gPT09IGVuZFsxXSAmJiBjb29yZHNbMV0gPT09IHN0YXJ0WzFdICYmIGNvb3Jkc1swXSA+PSBzdGFydFswXSAmJiBjb29yZHNbMF0gPCBlbmRbMF0pIHx8XG4gICAgICAgICAgICAoc3RhcnRbMV0gPCBlbmRbMV0gJiYgY29vcmRzWzFdID09PSBlbmRbMV0gJiYgY29vcmRzWzBdIDwgZW5kWzBdKSB8fFxuICAgICAgICAgICAgKHN0YXJ0WzFdIDwgZW5kWzFdICYmIGNvb3Jkc1sxXSA9PT0gc3RhcnRbMV0gJiYgY29vcmRzWzBdID49IHN0YXJ0WzBdKTtcbiAgICB9O1xuICAgIFNlbGVjdGlvbk1hbmFnZXIucHJvdG90eXBlLnNlbGVjdFdvcmRBdEN1cnNvciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgY29vcmRzID0gdGhpcy5fZ2V0TW91c2VCdWZmZXJDb29yZHMoZXZlbnQpO1xuICAgICAgICBpZiAoY29vcmRzKSB7XG4gICAgICAgICAgICB0aGlzLl9zZWxlY3RXb3JkQXQoY29vcmRzLCBmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLl9tb2RlbC5zZWxlY3Rpb25FbmQgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoKHRydWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTZWxlY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5zZWxlY3RBbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX21vZGVsLmlzU2VsZWN0QWxsQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmVtaXQoJ3NlbGVjdGlvbicpO1xuICAgIH07XG4gICAgU2VsZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuc2VsZWN0TGluZXMgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICAgICAgICB0aGlzLl9tb2RlbC5jbGVhclNlbGVjdGlvbigpO1xuICAgICAgICBzdGFydCA9IE1hdGgubWF4KHN0YXJ0LCAwKTtcbiAgICAgICAgZW5kID0gTWF0aC5taW4oZW5kLCB0aGlzLl90ZXJtaW5hbC5idWZmZXIubGluZXMubGVuZ3RoIC0gMSk7XG4gICAgICAgIHRoaXMuX21vZGVsLnNlbGVjdGlvblN0YXJ0ID0gWzAsIHN0YXJ0XTtcbiAgICAgICAgdGhpcy5fbW9kZWwuc2VsZWN0aW9uRW5kID0gW3RoaXMuX3Rlcm1pbmFsLmNvbHMsIGVuZF07XG4gICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5lbWl0KCdzZWxlY3Rpb24nKTtcbiAgICB9O1xuICAgIFNlbGVjdGlvbk1hbmFnZXIucHJvdG90eXBlLl9vblRyaW0gPSBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgICAgIHZhciBuZWVkc1JlZnJlc2ggPSB0aGlzLl9tb2RlbC5vblRyaW0oYW1vdW50KTtcbiAgICAgICAgaWYgKG5lZWRzUmVmcmVzaCkge1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNlbGVjdGlvbk1hbmFnZXIucHJvdG90eXBlLl9nZXRNb3VzZUJ1ZmZlckNvb3JkcyA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgY29vcmRzID0gdGhpcy5fdGVybWluYWwubW91c2VIZWxwZXIuZ2V0Q29vcmRzKGV2ZW50LCB0aGlzLl90ZXJtaW5hbC5zY3JlZW5FbGVtZW50LCB0aGlzLl9jaGFyTWVhc3VyZSwgdGhpcy5fdGVybWluYWwuY29scywgdGhpcy5fdGVybWluYWwucm93cywgdHJ1ZSk7XG4gICAgICAgIGlmICghY29vcmRzKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb29yZHNbMF0tLTtcbiAgICAgICAgY29vcmRzWzFdLS07XG4gICAgICAgIGNvb3Jkc1sxXSArPSB0aGlzLl90ZXJtaW5hbC5idWZmZXIueWRpc3A7XG4gICAgICAgIHJldHVybiBjb29yZHM7XG4gICAgfTtcbiAgICBTZWxlY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5fZ2V0TW91c2VFdmVudFNjcm9sbEFtb3VudCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgb2Zmc2V0ID0gTW91c2VIZWxwZXJfMS5Nb3VzZUhlbHBlci5nZXRDb29yZHNSZWxhdGl2ZVRvRWxlbWVudChldmVudCwgdGhpcy5fdGVybWluYWwuc2NyZWVuRWxlbWVudClbMV07XG4gICAgICAgIHZhciB0ZXJtaW5hbEhlaWdodCA9IHRoaXMuX3Rlcm1pbmFsLnJvd3MgKiBNYXRoLmNlaWwodGhpcy5fY2hhck1lYXN1cmUuaGVpZ2h0ICogdGhpcy5fdGVybWluYWwub3B0aW9ucy5saW5lSGVpZ2h0KTtcbiAgICAgICAgaWYgKG9mZnNldCA+PSAwICYmIG9mZnNldCA8PSB0ZXJtaW5hbEhlaWdodCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9mZnNldCA+IHRlcm1pbmFsSGVpZ2h0KSB7XG4gICAgICAgICAgICBvZmZzZXQgLT0gdGVybWluYWxIZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgb2Zmc2V0ID0gTWF0aC5taW4oTWF0aC5tYXgob2Zmc2V0LCAtRFJBR19TQ1JPTExfTUFYX1RIUkVTSE9MRCksIERSQUdfU0NST0xMX01BWF9USFJFU0hPTEQpO1xuICAgICAgICBvZmZzZXQgLz0gRFJBR19TQ1JPTExfTUFYX1RIUkVTSE9MRDtcbiAgICAgICAgcmV0dXJuIChvZmZzZXQgLyBNYXRoLmFicyhvZmZzZXQpKSArIE1hdGgucm91bmQob2Zmc2V0ICogKERSQUdfU0NST0xMX01BWF9TUEVFRCAtIDEpKTtcbiAgICB9O1xuICAgIFNlbGVjdGlvbk1hbmFnZXIucHJvdG90eXBlLnNob3VsZEZvcmNlU2VsZWN0aW9uID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChCcm93c2VyLmlzTWFjKSB7XG4gICAgICAgICAgICByZXR1cm4gZXZlbnQuYWx0S2V5ICYmIHRoaXMuX3Rlcm1pbmFsLm9wdGlvbnMubWFjT3B0aW9uQ2xpY2tGb3JjZXNTZWxlY3Rpb247XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV2ZW50LnNoaWZ0S2V5O1xuICAgIH07XG4gICAgU2VsZWN0aW9uTWFuYWdlci5wcm90b3R5cGUub25Nb3VzZURvd24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdGhpcy5fbW91c2VEb3duVGltZVN0YW1wID0gZXZlbnQudGltZVN0YW1wO1xuICAgICAgICBpZiAoZXZlbnQuYnV0dG9uID09PSAyICYmIHRoaXMuaGFzU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50LmJ1dHRvbiAhPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fZW5hYmxlZCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnNob3VsZEZvcmNlU2VsZWN0aW9uKGV2ZW50KSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuX2RyYWdTY3JvbGxBbW91bnQgPSAwO1xuICAgICAgICBpZiAodGhpcy5fZW5hYmxlZCAmJiBldmVudC5zaGlmdEtleSkge1xuICAgICAgICAgICAgdGhpcy5fb25JbmNyZW1lbnRhbENsaWNrKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChldmVudC5kZXRhaWwgPT09IDEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9vblNpbmdsZUNsaWNrKGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGV2ZW50LmRldGFpbCA9PT0gMikge1xuICAgICAgICAgICAgICAgIHRoaXMuX29uRG91YmxlQ2xpY2soZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZXZlbnQuZGV0YWlsID09PSAzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb25UcmlwbGVDbGljayhldmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYWRkTW91c2VEb3duTGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMucmVmcmVzaCh0cnVlKTtcbiAgICB9O1xuICAgIFNlbGVjdGlvbk1hbmFnZXIucHJvdG90eXBlLl9hZGRNb3VzZURvd25MaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmVsZW1lbnQub3duZXJEb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLl9tb3VzZU1vdmVMaXN0ZW5lcik7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmVsZW1lbnQub3duZXJEb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5fbW91c2VVcExpc3RlbmVyKTtcbiAgICAgICAgdGhpcy5fZHJhZ1Njcm9sbEludGVydmFsVGltZXIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fZHJhZ1Njcm9sbCgpOyB9LCBEUkFHX1NDUk9MTF9JTlRFUlZBTCk7XG4gICAgfTtcbiAgICBTZWxlY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5fcmVtb3ZlTW91c2VEb3duTGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fdGVybWluYWwuZWxlbWVudC5vd25lckRvY3VtZW50KSB7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5lbGVtZW50Lm93bmVyRG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5fbW91c2VNb3ZlTGlzdGVuZXIpO1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuZWxlbWVudC5vd25lckRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLl9tb3VzZVVwTGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5fZHJhZ1Njcm9sbEludGVydmFsVGltZXIpO1xuICAgICAgICB0aGlzLl9kcmFnU2Nyb2xsSW50ZXJ2YWxUaW1lciA9IG51bGw7XG4gICAgfTtcbiAgICBTZWxlY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5fb25JbmNyZW1lbnRhbENsaWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLl9tb2RlbC5zZWxlY3Rpb25TdGFydCkge1xuICAgICAgICAgICAgdGhpcy5fbW9kZWwuc2VsZWN0aW9uRW5kID0gdGhpcy5fZ2V0TW91c2VCdWZmZXJDb29yZHMoZXZlbnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTZWxlY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5fb25TaW5nbGVDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB0aGlzLl9tb2RlbC5zZWxlY3Rpb25TdGFydExlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuX21vZGVsLmlzU2VsZWN0QWxsQWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2FjdGl2ZVNlbGVjdGlvbk1vZGUgPSB0aGlzLnNob3VsZENvbHVtblNlbGVjdChldmVudCkgPyAzIDogMDtcbiAgICAgICAgdGhpcy5fbW9kZWwuc2VsZWN0aW9uU3RhcnQgPSB0aGlzLl9nZXRNb3VzZUJ1ZmZlckNvb3JkcyhldmVudCk7XG4gICAgICAgIGlmICghdGhpcy5fbW9kZWwuc2VsZWN0aW9uU3RhcnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9tb2RlbC5zZWxlY3Rpb25FbmQgPSBudWxsO1xuICAgICAgICB2YXIgbGluZSA9IHRoaXMuX2J1ZmZlci5saW5lcy5nZXQodGhpcy5fbW9kZWwuc2VsZWN0aW9uU3RhcnRbMV0pO1xuICAgICAgICBpZiAoIWxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGluZS5sZW5ndGggPj0gdGhpcy5fbW9kZWwuc2VsZWN0aW9uU3RhcnRbMF0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hhciA9IGxpbmUuZ2V0KHRoaXMuX21vZGVsLnNlbGVjdGlvblN0YXJ0WzBdKTtcbiAgICAgICAgaWYgKGNoYXJbQnVmZmVyXzEuQ0hBUl9EQVRBX1dJRFRIX0lOREVYXSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5fbW9kZWwuc2VsZWN0aW9uU3RhcnRbMF0rKztcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2VsZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuX29uRG91YmxlQ2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIGNvb3JkcyA9IHRoaXMuX2dldE1vdXNlQnVmZmVyQ29vcmRzKGV2ZW50KTtcbiAgICAgICAgaWYgKGNvb3Jkcykge1xuICAgICAgICAgICAgdGhpcy5fYWN0aXZlU2VsZWN0aW9uTW9kZSA9IDE7XG4gICAgICAgICAgICB0aGlzLl9zZWxlY3RXb3JkQXQoY29vcmRzLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2VsZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuX29uVHJpcGxlQ2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIGNvb3JkcyA9IHRoaXMuX2dldE1vdXNlQnVmZmVyQ29vcmRzKGV2ZW50KTtcbiAgICAgICAgaWYgKGNvb3Jkcykge1xuICAgICAgICAgICAgdGhpcy5fYWN0aXZlU2VsZWN0aW9uTW9kZSA9IDI7XG4gICAgICAgICAgICB0aGlzLl9zZWxlY3RMaW5lQXQoY29vcmRzWzFdKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2VsZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuc2hvdWxkQ29sdW1uU2VsZWN0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBldmVudC5hbHRLZXkgJiYgIShCcm93c2VyLmlzTWFjICYmIHRoaXMuX3Rlcm1pbmFsLm9wdGlvbnMubWFjT3B0aW9uQ2xpY2tGb3JjZXNTZWxlY3Rpb24pO1xuICAgIH07XG4gICAgU2VsZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuX29uTW91c2VNb3ZlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICB2YXIgcHJldmlvdXNTZWxlY3Rpb25FbmQgPSB0aGlzLl9tb2RlbC5zZWxlY3Rpb25FbmQgPyBbdGhpcy5fbW9kZWwuc2VsZWN0aW9uRW5kWzBdLCB0aGlzLl9tb2RlbC5zZWxlY3Rpb25FbmRbMV1dIDogbnVsbDtcbiAgICAgICAgdGhpcy5fbW9kZWwuc2VsZWN0aW9uRW5kID0gdGhpcy5fZ2V0TW91c2VCdWZmZXJDb29yZHMoZXZlbnQpO1xuICAgICAgICBpZiAoIXRoaXMuX21vZGVsLnNlbGVjdGlvbkVuZCkge1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoKHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmVTZWxlY3Rpb25Nb2RlID09PSAyKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fbW9kZWwuc2VsZWN0aW9uRW5kWzFdIDwgdGhpcy5fbW9kZWwuc2VsZWN0aW9uU3RhcnRbMV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb2RlbC5zZWxlY3Rpb25FbmRbMF0gPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9kZWwuc2VsZWN0aW9uRW5kWzBdID0gdGhpcy5fdGVybWluYWwuY29scztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLl9hY3RpdmVTZWxlY3Rpb25Nb2RlID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLl9zZWxlY3RUb1dvcmRBdCh0aGlzLl9tb2RlbC5zZWxlY3Rpb25FbmQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2RyYWdTY3JvbGxBbW91bnQgPSB0aGlzLl9nZXRNb3VzZUV2ZW50U2Nyb2xsQW1vdW50KGV2ZW50KTtcbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZVNlbGVjdGlvbk1vZGUgIT09IDMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9kcmFnU2Nyb2xsQW1vdW50ID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21vZGVsLnNlbGVjdGlvbkVuZFswXSA9IHRoaXMuX3Rlcm1pbmFsLmNvbHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLl9kcmFnU2Nyb2xsQW1vdW50IDwgMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21vZGVsLnNlbGVjdGlvbkVuZFswXSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX21vZGVsLnNlbGVjdGlvbkVuZFsxXSA8IHRoaXMuX2J1ZmZlci5saW5lcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBjaGFyID0gdGhpcy5fYnVmZmVyLmxpbmVzLmdldCh0aGlzLl9tb2RlbC5zZWxlY3Rpb25FbmRbMV0pLmdldCh0aGlzLl9tb2RlbC5zZWxlY3Rpb25FbmRbMF0pO1xuICAgICAgICAgICAgaWYgKGNoYXIgJiYgY2hhcltCdWZmZXJfMS5DSEFSX0RBVEFfV0lEVEhfSU5ERVhdID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9kZWwuc2VsZWN0aW9uRW5kWzBdKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFwcmV2aW91c1NlbGVjdGlvbkVuZCB8fFxuICAgICAgICAgICAgcHJldmlvdXNTZWxlY3Rpb25FbmRbMF0gIT09IHRoaXMuX21vZGVsLnNlbGVjdGlvbkVuZFswXSB8fFxuICAgICAgICAgICAgcHJldmlvdXNTZWxlY3Rpb25FbmRbMV0gIT09IHRoaXMuX21vZGVsLnNlbGVjdGlvbkVuZFsxXSkge1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoKHRydWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTZWxlY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5fZHJhZ1Njcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2RyYWdTY3JvbGxBbW91bnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsLnNjcm9sbExpbmVzKHRoaXMuX2RyYWdTY3JvbGxBbW91bnQsIGZhbHNlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9kcmFnU2Nyb2xsQW1vdW50ID4gMCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hY3RpdmVTZWxlY3Rpb25Nb2RlICE9PSAzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21vZGVsLnNlbGVjdGlvbkVuZFswXSA9IHRoaXMuX3Rlcm1pbmFsLmNvbHM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX21vZGVsLnNlbGVjdGlvbkVuZFsxXSA9IE1hdGgubWluKHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ZGlzcCArIHRoaXMuX3Rlcm1pbmFsLnJvd3MsIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci5saW5lcy5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hY3RpdmVTZWxlY3Rpb25Nb2RlICE9PSAzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21vZGVsLnNlbGVjdGlvbkVuZFswXSA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX21vZGVsLnNlbGVjdGlvbkVuZFsxXSA9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ZGlzcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTZWxlY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5fb25Nb3VzZVVwID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciB0aW1lRWxhcHNlZCA9IGV2ZW50LnRpbWVTdGFtcCAtIHRoaXMuX21vdXNlRG93blRpbWVTdGFtcDtcbiAgICAgICAgdGhpcy5fcmVtb3ZlTW91c2VEb3duTGlzdGVuZXJzKCk7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGlvblRleHQubGVuZ3RoIDw9IDEgJiYgdGltZUVsYXBzZWQgPCBBTFRfQ0xJQ0tfTU9WRV9DVVJTT1JfVElNRSkge1xuICAgICAgICAgICAgKG5ldyBBbHRDbGlja0hhbmRsZXJfMS5BbHRDbGlja0hhbmRsZXIoZXZlbnQsIHRoaXMuX3Rlcm1pbmFsKSkubW92ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuaGFzU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5lbWl0KCdzZWxlY3Rpb24nKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2VsZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuX29uQnVmZmVyQWN0aXZhdGUgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICB0aGlzLmNsZWFyU2VsZWN0aW9uKCk7XG4gICAgICAgIGUuaW5hY3RpdmVCdWZmZXIubGluZXMub2ZmKCd0cmltJywgdGhpcy5fdHJpbUxpc3RlbmVyKTtcbiAgICAgICAgZS5hY3RpdmVCdWZmZXIubGluZXMub24oJ3RyaW0nLCB0aGlzLl90cmltTGlzdGVuZXIpO1xuICAgIH07XG4gICAgU2VsZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuX2NvbnZlcnRWaWV3cG9ydENvbFRvQ2hhcmFjdGVySW5kZXggPSBmdW5jdGlvbiAoYnVmZmVyTGluZSwgY29vcmRzKSB7XG4gICAgICAgIHZhciBjaGFySW5kZXggPSBjb29yZHNbMF07XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBjb29yZHNbMF0gPj0gaTsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgY2hhciA9IGJ1ZmZlckxpbmUuZ2V0KGkpO1xuICAgICAgICAgICAgaWYgKGNoYXJbQnVmZmVyXzEuQ0hBUl9EQVRBX1dJRFRIX0lOREVYXSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGNoYXJJbmRleC0tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hhcltCdWZmZXJfMS5DSEFSX0RBVEFfQ0hBUl9JTkRFWF0ubGVuZ3RoID4gMSAmJiBjb29yZHNbMF0gIT09IGkpIHtcbiAgICAgICAgICAgICAgICBjaGFySW5kZXggKz0gY2hhcltCdWZmZXJfMS5DSEFSX0RBVEFfQ0hBUl9JTkRFWF0ubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hhckluZGV4O1xuICAgIH07XG4gICAgU2VsZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuc2V0U2VsZWN0aW9uID0gZnVuY3Rpb24gKGNvbCwgcm93LCBsZW5ndGgpIHtcbiAgICAgICAgdGhpcy5fbW9kZWwuY2xlYXJTZWxlY3Rpb24oKTtcbiAgICAgICAgdGhpcy5fcmVtb3ZlTW91c2VEb3duTGlzdGVuZXJzKCk7XG4gICAgICAgIHRoaXMuX21vZGVsLnNlbGVjdGlvblN0YXJ0ID0gW2NvbCwgcm93XTtcbiAgICAgICAgdGhpcy5fbW9kZWwuc2VsZWN0aW9uU3RhcnRMZW5ndGggPSBsZW5ndGg7XG4gICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgIH07XG4gICAgU2VsZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuX2dldFdvcmRBdCA9IGZ1bmN0aW9uIChjb29yZHMsIGFsbG93V2hpdGVzcGFjZU9ubHlTZWxlY3Rpb24sIGZvbGxvd1dyYXBwZWRMaW5lc0Fib3ZlLCBmb2xsb3dXcmFwcGVkTGluZXNCZWxvdykge1xuICAgICAgICBpZiAoZm9sbG93V3JhcHBlZExpbmVzQWJvdmUgPT09IHZvaWQgMCkgeyBmb2xsb3dXcmFwcGVkTGluZXNBYm92ZSA9IHRydWU7IH1cbiAgICAgICAgaWYgKGZvbGxvd1dyYXBwZWRMaW5lc0JlbG93ID09PSB2b2lkIDApIHsgZm9sbG93V3JhcHBlZExpbmVzQmVsb3cgPSB0cnVlOyB9XG4gICAgICAgIGlmIChjb29yZHNbMF0gPj0gdGhpcy5fdGVybWluYWwuY29scykge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJ1ZmZlckxpbmUgPSB0aGlzLl9idWZmZXIubGluZXMuZ2V0KGNvb3Jkc1sxXSk7XG4gICAgICAgIGlmICghYnVmZmVyTGluZSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGxpbmUgPSB0aGlzLl9idWZmZXIudHJhbnNsYXRlQnVmZmVyTGluZVRvU3RyaW5nKGNvb3Jkc1sxXSwgZmFsc2UpO1xuICAgICAgICB2YXIgc3RhcnRJbmRleCA9IHRoaXMuX2NvbnZlcnRWaWV3cG9ydENvbFRvQ2hhcmFjdGVySW5kZXgoYnVmZmVyTGluZSwgY29vcmRzKTtcbiAgICAgICAgdmFyIGVuZEluZGV4ID0gc3RhcnRJbmRleDtcbiAgICAgICAgdmFyIGNoYXJPZmZzZXQgPSBjb29yZHNbMF0gLSBzdGFydEluZGV4O1xuICAgICAgICB2YXIgbGVmdFdpZGVDaGFyQ291bnQgPSAwO1xuICAgICAgICB2YXIgcmlnaHRXaWRlQ2hhckNvdW50ID0gMDtcbiAgICAgICAgdmFyIGxlZnRMb25nQ2hhck9mZnNldCA9IDA7XG4gICAgICAgIHZhciByaWdodExvbmdDaGFyT2Zmc2V0ID0gMDtcbiAgICAgICAgaWYgKGxpbmUuY2hhckF0KHN0YXJ0SW5kZXgpID09PSAnICcpIHtcbiAgICAgICAgICAgIHdoaWxlIChzdGFydEluZGV4ID4gMCAmJiBsaW5lLmNoYXJBdChzdGFydEluZGV4IC0gMSkgPT09ICcgJykge1xuICAgICAgICAgICAgICAgIHN0YXJ0SW5kZXgtLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlIChlbmRJbmRleCA8IGxpbmUubGVuZ3RoICYmIGxpbmUuY2hhckF0KGVuZEluZGV4ICsgMSkgPT09ICcgJykge1xuICAgICAgICAgICAgICAgIGVuZEluZGV4Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgc3RhcnRDb2wgPSBjb29yZHNbMF07XG4gICAgICAgICAgICB2YXIgZW5kQ29sID0gY29vcmRzWzBdO1xuICAgICAgICAgICAgaWYgKGJ1ZmZlckxpbmUuZ2V0KHN0YXJ0Q29sKVtCdWZmZXJfMS5DSEFSX0RBVEFfV0lEVEhfSU5ERVhdID09PSAwKSB7XG4gICAgICAgICAgICAgICAgbGVmdFdpZGVDaGFyQ291bnQrKztcbiAgICAgICAgICAgICAgICBzdGFydENvbC0tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJ1ZmZlckxpbmUuZ2V0KGVuZENvbClbQnVmZmVyXzEuQ0hBUl9EQVRBX1dJRFRIX0lOREVYXSA9PT0gMikge1xuICAgICAgICAgICAgICAgIHJpZ2h0V2lkZUNoYXJDb3VudCsrO1xuICAgICAgICAgICAgICAgIGVuZENvbCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJ1ZmZlckxpbmUuZ2V0KGVuZENvbClbQnVmZmVyXzEuQ0hBUl9EQVRBX0NIQVJfSU5ERVhdLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICByaWdodExvbmdDaGFyT2Zmc2V0ICs9IGJ1ZmZlckxpbmUuZ2V0KGVuZENvbClbQnVmZmVyXzEuQ0hBUl9EQVRBX0NIQVJfSU5ERVhdLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgZW5kSW5kZXggKz0gYnVmZmVyTGluZS5nZXQoZW5kQ29sKVtCdWZmZXJfMS5DSEFSX0RBVEFfQ0hBUl9JTkRFWF0ubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlIChzdGFydENvbCA+IDAgJiYgc3RhcnRJbmRleCA+IDAgJiYgIXRoaXMuX2lzQ2hhcldvcmRTZXBhcmF0b3IoYnVmZmVyTGluZS5nZXQoc3RhcnRDb2wgLSAxKSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2hhciA9IGJ1ZmZlckxpbmUuZ2V0KHN0YXJ0Q29sIC0gMSk7XG4gICAgICAgICAgICAgICAgaWYgKGNoYXJbQnVmZmVyXzEuQ0hBUl9EQVRBX1dJRFRIX0lOREVYXSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBsZWZ0V2lkZUNoYXJDb3VudCsrO1xuICAgICAgICAgICAgICAgICAgICBzdGFydENvbC0tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjaGFyW0J1ZmZlcl8xLkNIQVJfREFUQV9DSEFSX0lOREVYXS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGxlZnRMb25nQ2hhck9mZnNldCArPSBjaGFyW0J1ZmZlcl8xLkNIQVJfREFUQV9DSEFSX0lOREVYXS5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgICAgICBzdGFydEluZGV4IC09IGNoYXJbQnVmZmVyXzEuQ0hBUl9EQVRBX0NIQVJfSU5ERVhdLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0YXJ0SW5kZXgtLTtcbiAgICAgICAgICAgICAgICBzdGFydENvbC0tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKGVuZENvbCA8IGJ1ZmZlckxpbmUubGVuZ3RoICYmIGVuZEluZGV4ICsgMSA8IGxpbmUubGVuZ3RoICYmICF0aGlzLl9pc0NoYXJXb3JkU2VwYXJhdG9yKGJ1ZmZlckxpbmUuZ2V0KGVuZENvbCArIDEpKSkge1xuICAgICAgICAgICAgICAgIHZhciBjaGFyID0gYnVmZmVyTGluZS5nZXQoZW5kQ29sICsgMSk7XG4gICAgICAgICAgICAgICAgaWYgKGNoYXJbQnVmZmVyXzEuQ0hBUl9EQVRBX1dJRFRIX0lOREVYXSA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICByaWdodFdpZGVDaGFyQ291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgZW5kQ29sKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGNoYXJbQnVmZmVyXzEuQ0hBUl9EQVRBX0NIQVJfSU5ERVhdLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmlnaHRMb25nQ2hhck9mZnNldCArPSBjaGFyW0J1ZmZlcl8xLkNIQVJfREFUQV9DSEFSX0lOREVYXS5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgICAgICBlbmRJbmRleCArPSBjaGFyW0J1ZmZlcl8xLkNIQVJfREFUQV9DSEFSX0lOREVYXS5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbmRJbmRleCsrO1xuICAgICAgICAgICAgICAgIGVuZENvbCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVuZEluZGV4Kys7XG4gICAgICAgIHZhciBzdGFydCA9IHN0YXJ0SW5kZXhcbiAgICAgICAgICAgICsgY2hhck9mZnNldFxuICAgICAgICAgICAgLSBsZWZ0V2lkZUNoYXJDb3VudFxuICAgICAgICAgICAgKyBsZWZ0TG9uZ0NoYXJPZmZzZXQ7XG4gICAgICAgIHZhciBsZW5ndGggPSBNYXRoLm1pbih0aGlzLl90ZXJtaW5hbC5jb2xzLCBlbmRJbmRleFxuICAgICAgICAgICAgLSBzdGFydEluZGV4XG4gICAgICAgICAgICArIGxlZnRXaWRlQ2hhckNvdW50XG4gICAgICAgICAgICArIHJpZ2h0V2lkZUNoYXJDb3VudFxuICAgICAgICAgICAgLSBsZWZ0TG9uZ0NoYXJPZmZzZXRcbiAgICAgICAgICAgIC0gcmlnaHRMb25nQ2hhck9mZnNldCk7XG4gICAgICAgIGlmICghYWxsb3dXaGl0ZXNwYWNlT25seVNlbGVjdGlvbiAmJiBsaW5lLnNsaWNlKHN0YXJ0SW5kZXgsIGVuZEluZGV4KS50cmltKCkgPT09ICcnKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9sbG93V3JhcHBlZExpbmVzQWJvdmUpIHtcbiAgICAgICAgICAgIGlmIChzdGFydCA9PT0gMCAmJiBidWZmZXJMaW5lLmdldCgwKVtCdWZmZXJfMS5DSEFSX0RBVEFfQ09ERV9JTkRFWF0gIT09IDMyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHByZXZpb3VzQnVmZmVyTGluZSA9IHRoaXMuX2J1ZmZlci5saW5lcy5nZXQoY29vcmRzWzFdIC0gMSk7XG4gICAgICAgICAgICAgICAgaWYgKHByZXZpb3VzQnVmZmVyTGluZSAmJiBidWZmZXJMaW5lLmlzV3JhcHBlZCAmJiBwcmV2aW91c0J1ZmZlckxpbmUuZ2V0KHRoaXMuX3Rlcm1pbmFsLmNvbHMgLSAxKVtCdWZmZXJfMS5DSEFSX0RBVEFfQ09ERV9JTkRFWF0gIT09IDMyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmV2aW91c0xpbmVXb3JkUG9zaXRpb24gPSB0aGlzLl9nZXRXb3JkQXQoW3RoaXMuX3Rlcm1pbmFsLmNvbHMgLSAxLCBjb29yZHNbMV0gLSAxXSwgZmFsc2UsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZpb3VzTGluZVdvcmRQb3NpdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMuX3Rlcm1pbmFsLmNvbHMgLSBwcmV2aW91c0xpbmVXb3JkUG9zaXRpb24uc3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydCAtPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZW5ndGggKz0gb2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChmb2xsb3dXcmFwcGVkTGluZXNCZWxvdykge1xuICAgICAgICAgICAgaWYgKHN0YXJ0ICsgbGVuZ3RoID09PSB0aGlzLl90ZXJtaW5hbC5jb2xzICYmIGJ1ZmZlckxpbmUuZ2V0KHRoaXMuX3Rlcm1pbmFsLmNvbHMgLSAxKVtCdWZmZXJfMS5DSEFSX0RBVEFfQ09ERV9JTkRFWF0gIT09IDMyKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5leHRCdWZmZXJMaW5lID0gdGhpcy5fYnVmZmVyLmxpbmVzLmdldChjb29yZHNbMV0gKyAxKTtcbiAgICAgICAgICAgICAgICBpZiAobmV4dEJ1ZmZlckxpbmUgJiYgbmV4dEJ1ZmZlckxpbmUuaXNXcmFwcGVkICYmIG5leHRCdWZmZXJMaW5lLmdldCgwKVtCdWZmZXJfMS5DSEFSX0RBVEFfQ09ERV9JTkRFWF0gIT09IDMyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXh0TGluZVdvcmRQb3NpdGlvbiA9IHRoaXMuX2dldFdvcmRBdChbMCwgY29vcmRzWzFdICsgMV0sIGZhbHNlLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0TGluZVdvcmRQb3NpdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGVuZ3RoICs9IG5leHRMaW5lV29yZFBvc2l0aW9uLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGxlbmd0aDogbGVuZ3RoIH07XG4gICAgfTtcbiAgICBTZWxlY3Rpb25NYW5hZ2VyLnByb3RvdHlwZS5fc2VsZWN0V29yZEF0ID0gZnVuY3Rpb24gKGNvb3JkcywgYWxsb3dXaGl0ZXNwYWNlT25seVNlbGVjdGlvbikge1xuICAgICAgICB2YXIgd29yZFBvc2l0aW9uID0gdGhpcy5fZ2V0V29yZEF0KGNvb3JkcywgYWxsb3dXaGl0ZXNwYWNlT25seVNlbGVjdGlvbik7XG4gICAgICAgIGlmICh3b3JkUG9zaXRpb24pIHtcbiAgICAgICAgICAgIHdoaWxlICh3b3JkUG9zaXRpb24uc3RhcnQgPCAwKSB7XG4gICAgICAgICAgICAgICAgd29yZFBvc2l0aW9uLnN0YXJ0ICs9IHRoaXMuX3Rlcm1pbmFsLmNvbHM7XG4gICAgICAgICAgICAgICAgY29vcmRzWzFdLS07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9tb2RlbC5zZWxlY3Rpb25TdGFydCA9IFt3b3JkUG9zaXRpb24uc3RhcnQsIGNvb3Jkc1sxXV07XG4gICAgICAgICAgICB0aGlzLl9tb2RlbC5zZWxlY3Rpb25TdGFydExlbmd0aCA9IHdvcmRQb3NpdGlvbi5sZW5ndGg7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFNlbGVjdGlvbk1hbmFnZXIucHJvdG90eXBlLl9zZWxlY3RUb1dvcmRBdCA9IGZ1bmN0aW9uIChjb29yZHMpIHtcbiAgICAgICAgdmFyIHdvcmRQb3NpdGlvbiA9IHRoaXMuX2dldFdvcmRBdChjb29yZHMsIHRydWUpO1xuICAgICAgICBpZiAod29yZFBvc2l0aW9uKSB7XG4gICAgICAgICAgICB2YXIgZW5kUm93ID0gY29vcmRzWzFdO1xuICAgICAgICAgICAgd2hpbGUgKHdvcmRQb3NpdGlvbi5zdGFydCA8IDApIHtcbiAgICAgICAgICAgICAgICB3b3JkUG9zaXRpb24uc3RhcnQgKz0gdGhpcy5fdGVybWluYWwuY29scztcbiAgICAgICAgICAgICAgICBlbmRSb3ctLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5fbW9kZWwuYXJlU2VsZWN0aW9uVmFsdWVzUmV2ZXJzZWQoKSkge1xuICAgICAgICAgICAgICAgIHdoaWxlICh3b3JkUG9zaXRpb24uc3RhcnQgKyB3b3JkUG9zaXRpb24ubGVuZ3RoID4gdGhpcy5fdGVybWluYWwuY29scykge1xuICAgICAgICAgICAgICAgICAgICB3b3JkUG9zaXRpb24ubGVuZ3RoIC09IHRoaXMuX3Rlcm1pbmFsLmNvbHM7XG4gICAgICAgICAgICAgICAgICAgIGVuZFJvdysrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX21vZGVsLnNlbGVjdGlvbkVuZCA9IFt0aGlzLl9tb2RlbC5hcmVTZWxlY3Rpb25WYWx1ZXNSZXZlcnNlZCgpID8gd29yZFBvc2l0aW9uLnN0YXJ0IDogd29yZFBvc2l0aW9uLnN0YXJ0ICsgd29yZFBvc2l0aW9uLmxlbmd0aCwgZW5kUm93XTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU2VsZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuX2lzQ2hhcldvcmRTZXBhcmF0b3IgPSBmdW5jdGlvbiAoY2hhckRhdGEpIHtcbiAgICAgICAgaWYgKGNoYXJEYXRhW0J1ZmZlcl8xLkNIQVJfREFUQV9XSURUSF9JTkRFWF0gPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gV09SRF9TRVBBUkFUT1JTLmluZGV4T2YoY2hhckRhdGFbQnVmZmVyXzEuQ0hBUl9EQVRBX0NIQVJfSU5ERVhdKSA+PSAwO1xuICAgIH07XG4gICAgU2VsZWN0aW9uTWFuYWdlci5wcm90b3R5cGUuX3NlbGVjdExpbmVBdCA9IGZ1bmN0aW9uIChsaW5lKSB7XG4gICAgICAgIHZhciB3cmFwcGVkUmFuZ2UgPSB0aGlzLl9idWZmZXIuZ2V0V3JhcHBlZFJhbmdlRm9yTGluZShsaW5lKTtcbiAgICAgICAgdGhpcy5fbW9kZWwuc2VsZWN0aW9uU3RhcnQgPSBbMCwgd3JhcHBlZFJhbmdlLmZpcnN0XTtcbiAgICAgICAgdGhpcy5fbW9kZWwuc2VsZWN0aW9uRW5kID0gW3RoaXMuX3Rlcm1pbmFsLmNvbHMsIHdyYXBwZWRSYW5nZS5sYXN0XTtcbiAgICAgICAgdGhpcy5fbW9kZWwuc2VsZWN0aW9uU3RhcnRMZW5ndGggPSAwO1xuICAgIH07XG4gICAgcmV0dXJuIFNlbGVjdGlvbk1hbmFnZXI7XG59KEV2ZW50RW1pdHRlcl8xLkV2ZW50RW1pdHRlcikpO1xuZXhwb3J0cy5TZWxlY3Rpb25NYW5hZ2VyID0gU2VsZWN0aW9uTWFuYWdlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNlbGVjdGlvbk1hbmFnZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgU2VsZWN0aW9uTW9kZWwgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNlbGVjdGlvbk1vZGVsKF90ZXJtaW5hbCkge1xuICAgICAgICB0aGlzLl90ZXJtaW5hbCA9IF90ZXJtaW5hbDtcbiAgICAgICAgdGhpcy5jbGVhclNlbGVjdGlvbigpO1xuICAgIH1cbiAgICBTZWxlY3Rpb25Nb2RlbC5wcm90b3R5cGUuY2xlYXJTZWxlY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0aW9uU3RhcnQgPSBudWxsO1xuICAgICAgICB0aGlzLnNlbGVjdGlvbkVuZCA9IG51bGw7XG4gICAgICAgIHRoaXMuaXNTZWxlY3RBbGxBY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25TdGFydExlbmd0aCA9IDA7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2VsZWN0aW9uTW9kZWwucHJvdG90eXBlLCBcImZpbmFsU2VsZWN0aW9uU3RhcnRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzU2VsZWN0QWxsQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFswLCAwXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5zZWxlY3Rpb25FbmQgfHwgIXRoaXMuc2VsZWN0aW9uU3RhcnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3Rpb25TdGFydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFyZVNlbGVjdGlvblZhbHVlc1JldmVyc2VkKCkgPyB0aGlzLnNlbGVjdGlvbkVuZCA6IHRoaXMuc2VsZWN0aW9uU3RhcnQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTZWxlY3Rpb25Nb2RlbC5wcm90b3R5cGUsIFwiZmluYWxTZWxlY3Rpb25FbmRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzU2VsZWN0QWxsQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFt0aGlzLl90ZXJtaW5hbC5jb2xzLCB0aGlzLl90ZXJtaW5hbC5idWZmZXIueWJhc2UgKyB0aGlzLl90ZXJtaW5hbC5yb3dzIC0gMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuc2VsZWN0aW9uU3RhcnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5zZWxlY3Rpb25FbmQgfHwgdGhpcy5hcmVTZWxlY3Rpb25WYWx1ZXNSZXZlcnNlZCgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0UGx1c0xlbmd0aCA9IHRoaXMuc2VsZWN0aW9uU3RhcnRbMF0gKyB0aGlzLnNlbGVjdGlvblN0YXJ0TGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChzdGFydFBsdXNMZW5ndGggPiB0aGlzLl90ZXJtaW5hbC5jb2xzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbc3RhcnRQbHVzTGVuZ3RoICUgdGhpcy5fdGVybWluYWwuY29scywgdGhpcy5zZWxlY3Rpb25TdGFydFsxXSArIE1hdGguZmxvb3Ioc3RhcnRQbHVzTGVuZ3RoIC8gdGhpcy5fdGVybWluYWwuY29scyldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gW3N0YXJ0UGx1c0xlbmd0aCwgdGhpcy5zZWxlY3Rpb25TdGFydFsxXV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb25TdGFydExlbmd0aCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGlvbkVuZFsxXSA9PT0gdGhpcy5zZWxlY3Rpb25TdGFydFsxXSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW01hdGgubWF4KHRoaXMuc2VsZWN0aW9uU3RhcnRbMF0gKyB0aGlzLnNlbGVjdGlvblN0YXJ0TGVuZ3RoLCB0aGlzLnNlbGVjdGlvbkVuZFswXSksIHRoaXMuc2VsZWN0aW9uRW5kWzFdXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3Rpb25FbmQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIFNlbGVjdGlvbk1vZGVsLnByb3RvdHlwZS5hcmVTZWxlY3Rpb25WYWx1ZXNSZXZlcnNlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5zZWxlY3Rpb25TdGFydDtcbiAgICAgICAgdmFyIGVuZCA9IHRoaXMuc2VsZWN0aW9uRW5kO1xuICAgICAgICBpZiAoIXN0YXJ0IHx8ICFlbmQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhcnRbMV0gPiBlbmRbMV0gfHwgKHN0YXJ0WzFdID09PSBlbmRbMV0gJiYgc3RhcnRbMF0gPiBlbmRbMF0pO1xuICAgIH07XG4gICAgU2VsZWN0aW9uTW9kZWwucHJvdG90eXBlLm9uVHJpbSA9IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uU3RhcnQpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uU3RhcnRbMV0gLT0gYW1vdW50O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGlvbkVuZCkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25FbmRbMV0gLT0gYW1vdW50O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGlvbkVuZCAmJiB0aGlzLnNlbGVjdGlvbkVuZFsxXSA8IDApIHtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGlvblN0YXJ0ICYmIHRoaXMuc2VsZWN0aW9uU3RhcnRbMV0gPCAwKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGlvblN0YXJ0WzFdID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICByZXR1cm4gU2VsZWN0aW9uTW9kZWw7XG59KCkpO1xuZXhwb3J0cy5TZWxlY3Rpb25Nb2RlbCA9IFNlbGVjdGlvbk1vZGVsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U2VsZWN0aW9uTW9kZWwuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgRXNjYXBlU2VxdWVuY2VzXzEgPSByZXF1aXJlKFwiLi4vY29tbW9uL2RhdGEvRXNjYXBlU2VxdWVuY2VzXCIpO1xudmFyIEFsdENsaWNrSGFuZGxlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQWx0Q2xpY2tIYW5kbGVyKF9tb3VzZUV2ZW50LCBfdGVybWluYWwpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLl9tb3VzZUV2ZW50ID0gX21vdXNlRXZlbnQ7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsID0gX3Rlcm1pbmFsO1xuICAgICAgICB0aGlzLl9saW5lcyA9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci5saW5lcztcbiAgICAgICAgdGhpcy5fc3RhcnRDb2wgPSB0aGlzLl90ZXJtaW5hbC5idWZmZXIueDtcbiAgICAgICAgdGhpcy5fc3RhcnRSb3cgPSB0aGlzLl90ZXJtaW5hbC5idWZmZXIueTtcbiAgICAgICAgdmFyIGNvb3JkaW5hdGVzID0gdGhpcy5fdGVybWluYWwubW91c2VIZWxwZXIuZ2V0Q29vcmRzKHRoaXMuX21vdXNlRXZlbnQsIHRoaXMuX3Rlcm1pbmFsLmVsZW1lbnQsIHRoaXMuX3Rlcm1pbmFsLmNoYXJNZWFzdXJlLCB0aGlzLl90ZXJtaW5hbC5jb2xzLCB0aGlzLl90ZXJtaW5hbC5yb3dzLCBmYWxzZSk7XG4gICAgICAgIGlmIChjb29yZGluYXRlcykge1xuICAgICAgICAgICAgX2EgPSBjb29yZGluYXRlcy5tYXAoZnVuY3Rpb24gKGNvb3JkaW5hdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29vcmRpbmF0ZSAtIDE7XG4gICAgICAgICAgICB9KSwgdGhpcy5fZW5kQ29sID0gX2FbMF0sIHRoaXMuX2VuZFJvdyA9IF9hWzFdO1xuICAgICAgICB9XG4gICAgfVxuICAgIEFsdENsaWNrSGFuZGxlci5wcm90b3R5cGUubW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX21vdXNlRXZlbnQuYWx0S2V5ICYmIHRoaXMuX2VuZENvbCAhPT0gdW5kZWZpbmVkICYmIHRoaXMuX2VuZFJvdyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbC5oYW5kbGVyKHRoaXMuX2Fycm93U2VxdWVuY2VzKCkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBbHRDbGlja0hhbmRsZXIucHJvdG90eXBlLl9hcnJvd1NlcXVlbmNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl90ZXJtaW5hbC5idWZmZXIuaGFzU2Nyb2xsYmFjaykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc2V0U3RhcnRpbmdSb3coKSArIHRoaXMuX21vdmVUb1JlcXVlc3RlZFJvdygpICsgdGhpcy5fbW92ZVRvUmVxdWVzdGVkQ29sKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX21vdmVIb3Jpem9udGFsbHlPbmx5KCk7XG4gICAgfTtcbiAgICBBbHRDbGlja0hhbmRsZXIucHJvdG90eXBlLl9yZXNldFN0YXJ0aW5nUm93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fbW92ZVRvUmVxdWVzdGVkUm93KCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcGVhdCh0aGlzLl9idWZmZXJMaW5lKHRoaXMuX3N0YXJ0Q29sLCB0aGlzLl9zdGFydFJvdywgdGhpcy5fc3RhcnRDb2wsIHRoaXMuX3N0YXJ0Um93IC0gdGhpcy5fd3JhcHBlZFJvd3NGb3JSb3codGhpcy5fc3RhcnRSb3cpLCBmYWxzZSkubGVuZ3RoLCB0aGlzLl9zZXF1ZW5jZShcIkRcIikpO1xuICAgIH07XG4gICAgQWx0Q2xpY2tIYW5kbGVyLnByb3RvdHlwZS5fbW92ZVRvUmVxdWVzdGVkUm93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3RhcnRSb3cgPSB0aGlzLl9zdGFydFJvdyAtIHRoaXMuX3dyYXBwZWRSb3dzRm9yUm93KHRoaXMuX3N0YXJ0Um93KTtcbiAgICAgICAgdmFyIGVuZFJvdyA9IHRoaXMuX2VuZFJvdyAtIHRoaXMuX3dyYXBwZWRSb3dzRm9yUm93KHRoaXMuX2VuZFJvdyk7XG4gICAgICAgIHZhciByb3dzVG9Nb3ZlID0gTWF0aC5hYnMoc3RhcnRSb3cgLSBlbmRSb3cpIC0gdGhpcy5fd3JhcHBlZFJvd3NDb3VudCgpO1xuICAgICAgICByZXR1cm4gcmVwZWF0KHJvd3NUb01vdmUsIHRoaXMuX3NlcXVlbmNlKHRoaXMuX3ZlcnRpY2FsRGlyZWN0aW9uKCkpKTtcbiAgICB9O1xuICAgIEFsdENsaWNrSGFuZGxlci5wcm90b3R5cGUuX21vdmVUb1JlcXVlc3RlZENvbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHN0YXJ0Um93O1xuICAgICAgICBpZiAodGhpcy5fbW92ZVRvUmVxdWVzdGVkUm93KCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc3RhcnRSb3cgPSB0aGlzLl9lbmRSb3cgLSB0aGlzLl93cmFwcGVkUm93c0ZvclJvdyh0aGlzLl9lbmRSb3cpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3RhcnRSb3cgPSB0aGlzLl9zdGFydFJvdztcbiAgICAgICAgfVxuICAgICAgICB2YXIgZW5kUm93ID0gdGhpcy5fZW5kUm93O1xuICAgICAgICB2YXIgZGlyZWN0aW9uID0gdGhpcy5faG9yaXpvbnRhbERpcmVjdGlvbigpO1xuICAgICAgICByZXR1cm4gcmVwZWF0KHRoaXMuX2J1ZmZlckxpbmUodGhpcy5fc3RhcnRDb2wsIHN0YXJ0Um93LCB0aGlzLl9lbmRDb2wsIGVuZFJvdywgZGlyZWN0aW9uID09PSBcIkNcIikubGVuZ3RoLCB0aGlzLl9zZXF1ZW5jZShkaXJlY3Rpb24pKTtcbiAgICB9O1xuICAgIEFsdENsaWNrSGFuZGxlci5wcm90b3R5cGUuX21vdmVIb3Jpem9udGFsbHlPbmx5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGlyZWN0aW9uID0gdGhpcy5faG9yaXpvbnRhbERpcmVjdGlvbigpO1xuICAgICAgICByZXR1cm4gcmVwZWF0KE1hdGguYWJzKHRoaXMuX3N0YXJ0Q29sIC0gdGhpcy5fZW5kQ29sKSwgdGhpcy5fc2VxdWVuY2UoZGlyZWN0aW9uKSk7XG4gICAgfTtcbiAgICBBbHRDbGlja0hhbmRsZXIucHJvdG90eXBlLl93cmFwcGVkUm93c0NvdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd3JhcHBlZFJvd3MgPSAwO1xuICAgICAgICB2YXIgc3RhcnRSb3cgPSB0aGlzLl9zdGFydFJvdyAtIHRoaXMuX3dyYXBwZWRSb3dzRm9yUm93KHRoaXMuX3N0YXJ0Um93KTtcbiAgICAgICAgdmFyIGVuZFJvdyA9IHRoaXMuX2VuZFJvdyAtIHRoaXMuX3dyYXBwZWRSb3dzRm9yUm93KHRoaXMuX2VuZFJvdyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTWF0aC5hYnMoc3RhcnRSb3cgLSBlbmRSb3cpOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSB0aGlzLl92ZXJ0aWNhbERpcmVjdGlvbigpID09PSBcIkFcIiA/IC0xIDogMTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9saW5lcy5nZXQoc3RhcnRSb3cgKyAoZGlyZWN0aW9uICogaSkpLmlzV3JhcHBlZCkge1xuICAgICAgICAgICAgICAgIHdyYXBwZWRSb3dzKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyYXBwZWRSb3dzO1xuICAgIH07XG4gICAgQWx0Q2xpY2tIYW5kbGVyLnByb3RvdHlwZS5fd3JhcHBlZFJvd3NGb3JSb3cgPSBmdW5jdGlvbiAoY3VycmVudFJvdykge1xuICAgICAgICB2YXIgcm93Q291bnQgPSAwO1xuICAgICAgICB2YXIgbGluZVdyYXBzID0gdGhpcy5fbGluZXMuZ2V0KGN1cnJlbnRSb3cpLmlzV3JhcHBlZDtcbiAgICAgICAgd2hpbGUgKGxpbmVXcmFwcyAmJiBjdXJyZW50Um93ID49IDAgJiYgY3VycmVudFJvdyA8IHRoaXMuX3Rlcm1pbmFsLnJvd3MpIHtcbiAgICAgICAgICAgIHJvd0NvdW50Kys7XG4gICAgICAgICAgICBjdXJyZW50Um93LS07XG4gICAgICAgICAgICBsaW5lV3JhcHMgPSB0aGlzLl9saW5lcy5nZXQoY3VycmVudFJvdykuaXNXcmFwcGVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByb3dDb3VudDtcbiAgICB9O1xuICAgIEFsdENsaWNrSGFuZGxlci5wcm90b3R5cGUuX2hvcml6b250YWxEaXJlY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzdGFydFJvdztcbiAgICAgICAgaWYgKHRoaXMuX21vdmVUb1JlcXVlc3RlZFJvdygpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHN0YXJ0Um93ID0gdGhpcy5fZW5kUm93IC0gdGhpcy5fd3JhcHBlZFJvd3NGb3JSb3codGhpcy5fZW5kUm93KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN0YXJ0Um93ID0gdGhpcy5fc3RhcnRSb3c7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCh0aGlzLl9zdGFydENvbCA8IHRoaXMuX2VuZENvbCAmJlxuICAgICAgICAgICAgc3RhcnRSb3cgPD0gdGhpcy5fZW5kUm93KSB8fFxuICAgICAgICAgICAgKHRoaXMuX3N0YXJ0Q29sID49IHRoaXMuX2VuZENvbCAmJlxuICAgICAgICAgICAgICAgIHN0YXJ0Um93IDwgdGhpcy5fZW5kUm93KSkge1xuICAgICAgICAgICAgcmV0dXJuIFwiQ1wiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIkRcIjtcbiAgICB9O1xuICAgIEFsdENsaWNrSGFuZGxlci5wcm90b3R5cGUuX3ZlcnRpY2FsRGlyZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fc3RhcnRSb3cgPiB0aGlzLl9lbmRSb3cpIHtcbiAgICAgICAgICAgIHJldHVybiBcIkFcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJCXCI7XG4gICAgfTtcbiAgICBBbHRDbGlja0hhbmRsZXIucHJvdG90eXBlLl9idWZmZXJMaW5lID0gZnVuY3Rpb24gKHN0YXJ0Q29sLCBzdGFydFJvdywgZW5kQ29sLCBlbmRSb3csIGZvcndhcmQpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRDb2wgPSBzdGFydENvbDtcbiAgICAgICAgdmFyIGN1cnJlbnRSb3cgPSBzdGFydFJvdztcbiAgICAgICAgdmFyIGJ1ZmZlclN0ciA9ICcnO1xuICAgICAgICB3aGlsZSAoY3VycmVudENvbCAhPT0gZW5kQ29sIHx8IGN1cnJlbnRSb3cgIT09IGVuZFJvdykge1xuICAgICAgICAgICAgY3VycmVudENvbCArPSBmb3J3YXJkID8gMSA6IC0xO1xuICAgICAgICAgICAgaWYgKGZvcndhcmQgJiYgY3VycmVudENvbCA+IHRoaXMuX3Rlcm1pbmFsLmNvbHMgLSAxKSB7XG4gICAgICAgICAgICAgICAgYnVmZmVyU3RyICs9IHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci50cmFuc2xhdGVCdWZmZXJMaW5lVG9TdHJpbmcoY3VycmVudFJvdywgZmFsc2UsIHN0YXJ0Q29sLCBjdXJyZW50Q29sKTtcbiAgICAgICAgICAgICAgICBjdXJyZW50Q29sID0gMDtcbiAgICAgICAgICAgICAgICBzdGFydENvbCA9IDA7XG4gICAgICAgICAgICAgICAgY3VycmVudFJvdysrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIWZvcndhcmQgJiYgY3VycmVudENvbCA8IDApIHtcbiAgICAgICAgICAgICAgICBidWZmZXJTdHIgKz0gdGhpcy5fdGVybWluYWwuYnVmZmVyLnRyYW5zbGF0ZUJ1ZmZlckxpbmVUb1N0cmluZyhjdXJyZW50Um93LCBmYWxzZSwgMCwgc3RhcnRDb2wgKyAxKTtcbiAgICAgICAgICAgICAgICBjdXJyZW50Q29sID0gdGhpcy5fdGVybWluYWwuY29scyAtIDE7XG4gICAgICAgICAgICAgICAgc3RhcnRDb2wgPSBjdXJyZW50Q29sO1xuICAgICAgICAgICAgICAgIGN1cnJlbnRSb3ctLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYnVmZmVyU3RyICsgdGhpcy5fdGVybWluYWwuYnVmZmVyLnRyYW5zbGF0ZUJ1ZmZlckxpbmVUb1N0cmluZyhjdXJyZW50Um93LCBmYWxzZSwgc3RhcnRDb2wsIGN1cnJlbnRDb2wpO1xuICAgIH07XG4gICAgQWx0Q2xpY2tIYW5kbGVyLnByb3RvdHlwZS5fc2VxdWVuY2UgPSBmdW5jdGlvbiAoZGlyZWN0aW9uKSB7XG4gICAgICAgIHZhciBtb2QgPSB0aGlzLl90ZXJtaW5hbC5hcHBsaWNhdGlvbkN1cnNvciA/ICdPJyA6ICdbJztcbiAgICAgICAgcmV0dXJuIEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArIG1vZCArIGRpcmVjdGlvbjtcbiAgICB9O1xuICAgIHJldHVybiBBbHRDbGlja0hhbmRsZXI7XG59KCkpO1xuZXhwb3J0cy5BbHRDbGlja0hhbmRsZXIgPSBBbHRDbGlja0hhbmRsZXI7XG5mdW5jdGlvbiByZXBlYXQoY291bnQsIHN0cikge1xuICAgIGNvdW50ID0gTWF0aC5mbG9vcihjb3VudCk7XG4gICAgdmFyIHJwdCA9ICcnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICBycHQgKz0gc3RyO1xuICAgIH1cbiAgICByZXR1cm4gcnB0O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWx0Q2xpY2tIYW5kbGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBFdmVudEVtaXR0ZXJfMSA9IHJlcXVpcmUoXCIuLi9jb21tb24vRXZlbnRFbWl0dGVyXCIpO1xudmFyIENoYXJNZWFzdXJlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQ2hhck1lYXN1cmUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ2hhck1lYXN1cmUoZG9jdW1lbnQsIHBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX2RvY3VtZW50ID0gZG9jdW1lbnQ7XG4gICAgICAgIF90aGlzLl9wYXJlbnRFbGVtZW50ID0gcGFyZW50RWxlbWVudDtcbiAgICAgICAgX3RoaXMuX21lYXN1cmVFbGVtZW50ID0gX3RoaXMuX2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgX3RoaXMuX21lYXN1cmVFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3h0ZXJtLWNoYXItbWVhc3VyZS1lbGVtZW50Jyk7XG4gICAgICAgIF90aGlzLl9tZWFzdXJlRWxlbWVudC50ZXh0Q29udGVudCA9ICdXJztcbiAgICAgICAgX3RoaXMuX21lYXN1cmVFbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgICAgICBfdGhpcy5fcGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZChfdGhpcy5fbWVhc3VyZUVsZW1lbnQpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDaGFyTWVhc3VyZS5wcm90b3R5cGUsIFwid2lkdGhcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93aWR0aDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENoYXJNZWFzdXJlLnByb3RvdHlwZSwgXCJoZWlnaHRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9oZWlnaHQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIENoYXJNZWFzdXJlLnByb3RvdHlwZS5tZWFzdXJlID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5fbWVhc3VyZUVsZW1lbnQuc3R5bGUuZm9udEZhbWlseSA9IG9wdGlvbnMuZm9udEZhbWlseTtcbiAgICAgICAgdGhpcy5fbWVhc3VyZUVsZW1lbnQuc3R5bGUuZm9udFNpemUgPSBvcHRpb25zLmZvbnRTaXplICsgXCJweFwiO1xuICAgICAgICB2YXIgZ2VvbWV0cnkgPSB0aGlzLl9tZWFzdXJlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgaWYgKGdlb21ldHJ5LndpZHRoID09PSAwIHx8IGdlb21ldHJ5LmhlaWdodCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl93aWR0aCAhPT0gZ2VvbWV0cnkud2lkdGggfHwgdGhpcy5faGVpZ2h0ICE9PSBnZW9tZXRyeS5oZWlnaHQpIHtcbiAgICAgICAgICAgIHRoaXMuX3dpZHRoID0gZ2VvbWV0cnkud2lkdGg7XG4gICAgICAgICAgICB0aGlzLl9oZWlnaHQgPSBNYXRoLmNlaWwoZ2VvbWV0cnkuaGVpZ2h0KTtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnY2hhcnNpemVjaGFuZ2VkJyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBDaGFyTWVhc3VyZTtcbn0oRXZlbnRFbWl0dGVyXzEuRXZlbnRFbWl0dGVyKSk7XG5leHBvcnRzLkNoYXJNZWFzdXJlID0gQ2hhck1lYXN1cmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DaGFyTWVhc3VyZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY2xvbmUgPSBmdW5jdGlvbiAodmFsLCBkZXB0aCkge1xuICAgIGlmIChkZXB0aCA9PT0gdm9pZCAwKSB7IGRlcHRoID0gNTsgfVxuICAgIGlmICh0eXBlb2YgdmFsICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgIH1cbiAgICBpZiAodmFsID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgY2xvbmVkT2JqZWN0ID0gQXJyYXkuaXNBcnJheSh2YWwpID8gW10gOiB7fTtcbiAgICBmb3IgKHZhciBrZXkgaW4gdmFsKSB7XG4gICAgICAgIGNsb25lZE9iamVjdFtrZXldID0gZGVwdGggPD0gMSA/IHZhbFtrZXldIDogZXhwb3J0cy5jbG9uZSh2YWxba2V5XSwgZGVwdGggLSAxKTtcbiAgICB9XG4gICAgcmV0dXJuIGNsb25lZE9iamVjdDtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DbG9uZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuREVGQVVMVF9CRUxMX1NPVU5EID0gJ2RhdGE6YXVkaW8vd2F2O2Jhc2U2NCxVa2xHUmlnQkFBQlhRVlpGWm0xMElCQUFBQUFCQUFFQVJLd0FBSWhZQVFBQ0FCQUFaR0YwWVFRQkFBRHBBRmdDd0FNbEJab0cvd2RtQ2NvS1JBeXBEUThQYlJEQkVRUVRPeFJ0RlljV2xCZVBHSVVaWGhvaUc4OGJjQno3SEhJZHpoMFdIbE1lWng1MUhta2VVeDRXSHM4ZGFoMEFIWHdjM2hzOUc0c2F4Um55R0JJWUdCY1FGdjhVNFJQQUVvWVJRQkFDRDcwTld3d0hDNmdKT3dqV0Jsb0Y3Z09CQWhBQmtmOGIvcXY4Ui92ZStYZjRJZmU3OVcvMEpmUFo4Wi93ZGU5TjdpanRFK3dVNnh2cU0rbGI2SDdudytZWDVtcmx4dVF6NU16amUrTWE0OWZpb2VLRDRuWGlZZUp5NHBIaXRPTDA0ai9qbitNTjVJUGtGT1dzNVUzbURlZk01NS9vZ09sMzZtN3JkT3lFN2FidXl1OEQ4VW55ai9QZzlELzJxZmNiK1luNi92dUsvUWovbEFBbEFnPT0nO1xudmFyIFNvdW5kTWFuYWdlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU291bmRNYW5hZ2VyKF90ZXJtaW5hbCkge1xuICAgICAgICB0aGlzLl90ZXJtaW5hbCA9IF90ZXJtaW5hbDtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNvdW5kTWFuYWdlciwgXCJhdWRpb0NvbnRleHRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghU291bmRNYW5hZ2VyLl9hdWRpb0NvbnRleHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXVkaW9Db250ZXh0Q3RvciA9IHdpbmRvdy5BdWRpb0NvbnRleHQgfHwgd2luZG93LndlYmtpdEF1ZGlvQ29udGV4dDtcbiAgICAgICAgICAgICAgICBpZiAoIWF1ZGlvQ29udGV4dEN0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdXZWIgQXVkaW8gQVBJIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBicm93c2VyLiBDb25zaWRlciB1cGdyYWRpbmcgdG8gdGhlIGxhdGVzdCB2ZXJzaW9uJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBTb3VuZE1hbmFnZXIuX2F1ZGlvQ29udGV4dCA9IG5ldyBhdWRpb0NvbnRleHRDdG9yKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gU291bmRNYW5hZ2VyLl9hdWRpb0NvbnRleHQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIFNvdW5kTWFuYWdlci5wcm90b3R5cGUucGxheUJlbGxTb3VuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGN0eCA9IFNvdW5kTWFuYWdlci5hdWRpb0NvbnRleHQ7XG4gICAgICAgIGlmICghY3R4KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJlbGxBdWRpb1NvdXJjZSA9IGN0eC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcbiAgICAgICAgY3R4LmRlY29kZUF1ZGlvRGF0YSh0aGlzLl9iYXNlNjRUb0FycmF5QnVmZmVyKHRoaXMuX3JlbW92ZU1pbWVUeXBlKHRoaXMuX3Rlcm1pbmFsLm9wdGlvbnMuYmVsbFNvdW5kKSksIGZ1bmN0aW9uIChidWZmZXIpIHtcbiAgICAgICAgICAgIGJlbGxBdWRpb1NvdXJjZS5idWZmZXIgPSBidWZmZXI7XG4gICAgICAgICAgICBiZWxsQXVkaW9Tb3VyY2UuY29ubmVjdChjdHguZGVzdGluYXRpb24pO1xuICAgICAgICAgICAgYmVsbEF1ZGlvU291cmNlLnN0YXJ0KDApO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFNvdW5kTWFuYWdlci5wcm90b3R5cGUuX2Jhc2U2NFRvQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiAoYmFzZTY0KSB7XG4gICAgICAgIHZhciBiaW5hcnlTdHJpbmcgPSB3aW5kb3cuYXRvYihiYXNlNjQpO1xuICAgICAgICB2YXIgbGVuID0gYmluYXJ5U3RyaW5nLmxlbmd0aDtcbiAgICAgICAgdmFyIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkobGVuKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgYnl0ZXNbaV0gPSBiaW5hcnlTdHJpbmcuY2hhckNvZGVBdChpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYnl0ZXMuYnVmZmVyO1xuICAgIH07XG4gICAgU291bmRNYW5hZ2VyLnByb3RvdHlwZS5fcmVtb3ZlTWltZVR5cGUgPSBmdW5jdGlvbiAoZGF0YVVSSSkge1xuICAgICAgICB2YXIgc3BsaXRVcmkgPSBkYXRhVVJJLnNwbGl0KCcsJyk7XG4gICAgICAgIHJldHVybiBzcGxpdFVyaVsxXTtcbiAgICB9O1xuICAgIHJldHVybiBTb3VuZE1hbmFnZXI7XG59KCkpO1xuZXhwb3J0cy5Tb3VuZE1hbmFnZXIgPSBTb3VuZE1hbmFnZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Tb3VuZE1hbmFnZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFN0cmluZ3MgPSByZXF1aXJlKFwiLi9TdHJpbmdzXCIpO1xudmFyIFBsYXRmb3JtXzEgPSByZXF1aXJlKFwiLi9jb3JlL1BsYXRmb3JtXCIpO1xudmFyIFJlbmRlckRlYm91bmNlcl8xID0gcmVxdWlyZShcIi4vdWkvUmVuZGVyRGVib3VuY2VyXCIpO1xudmFyIExpZmVjeWNsZV8xID0gcmVxdWlyZShcIi4vdWkvTGlmZWN5Y2xlXCIpO1xudmFyIExpZmVjeWNsZV8yID0gcmVxdWlyZShcIi4vY29tbW9uL0xpZmVjeWNsZVwiKTtcbnZhciBNQVhfUk9XU19UT19SRUFEID0gMjA7XG52YXIgQWNjZXNzaWJpbGl0eU1hbmFnZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBY2Nlc3NpYmlsaXR5TWFuYWdlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBY2Nlc3NpYmlsaXR5TWFuYWdlcihfdGVybWluYWwpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX3Rlcm1pbmFsID0gX3Rlcm1pbmFsO1xuICAgICAgICBfdGhpcy5fbGl2ZVJlZ2lvbkxpbmVDb3VudCA9IDA7XG4gICAgICAgIF90aGlzLl9jaGFyc1RvQ29uc3VtZSA9IFtdO1xuICAgICAgICBfdGhpcy5fYWNjZXNzaWJpbGl0eVRyZWVSb290ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIF90aGlzLl9hY2Nlc3NpYmlsaXR5VHJlZVJvb3QuY2xhc3NMaXN0LmFkZCgneHRlcm0tYWNjZXNzaWJpbGl0eScpO1xuICAgICAgICBfdGhpcy5fcm93Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIF90aGlzLl9yb3dDb250YWluZXIuY2xhc3NMaXN0LmFkZCgneHRlcm0tYWNjZXNzaWJpbGl0eS10cmVlJyk7XG4gICAgICAgIF90aGlzLl9yb3dFbGVtZW50cyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IF90aGlzLl90ZXJtaW5hbC5yb3dzOyBpKyspIHtcbiAgICAgICAgICAgIF90aGlzLl9yb3dFbGVtZW50c1tpXSA9IF90aGlzLl9jcmVhdGVBY2Nlc3NpYmlsaXR5VHJlZU5vZGUoKTtcbiAgICAgICAgICAgIF90aGlzLl9yb3dDb250YWluZXIuYXBwZW5kQ2hpbGQoX3RoaXMuX3Jvd0VsZW1lbnRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5fdG9wQm91bmRhcnlGb2N1c0xpc3RlbmVyID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIF90aGlzLl9vbkJvdW5kYXJ5Rm9jdXMoZSwgMCk7IH07XG4gICAgICAgIF90aGlzLl9ib3R0b21Cb3VuZGFyeUZvY3VzTGlzdGVuZXIgPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gX3RoaXMuX29uQm91bmRhcnlGb2N1cyhlLCAxKTsgfTtcbiAgICAgICAgX3RoaXMuX3Jvd0VsZW1lbnRzWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgX3RoaXMuX3RvcEJvdW5kYXJ5Rm9jdXNMaXN0ZW5lcik7XG4gICAgICAgIF90aGlzLl9yb3dFbGVtZW50c1tfdGhpcy5fcm93RWxlbWVudHMubGVuZ3RoIC0gMV0uYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBfdGhpcy5fYm90dG9tQm91bmRhcnlGb2N1c0xpc3RlbmVyKTtcbiAgICAgICAgX3RoaXMuX3JlZnJlc2hSb3dzRGltZW5zaW9ucygpO1xuICAgICAgICBfdGhpcy5fYWNjZXNzaWJpbGl0eVRyZWVSb290LmFwcGVuZENoaWxkKF90aGlzLl9yb3dDb250YWluZXIpO1xuICAgICAgICBfdGhpcy5fcmVuZGVyUm93c0RlYm91bmNlciA9IG5ldyBSZW5kZXJEZWJvdW5jZXJfMS5SZW5kZXJEZWJvdW5jZXIoX3RoaXMuX3Rlcm1pbmFsLCBfdGhpcy5fcmVuZGVyUm93cy5iaW5kKF90aGlzKSk7XG4gICAgICAgIF90aGlzLl9yZWZyZXNoUm93cygpO1xuICAgICAgICBfdGhpcy5fbGl2ZVJlZ2lvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBfdGhpcy5fbGl2ZVJlZ2lvbi5jbGFzc0xpc3QuYWRkKCdsaXZlLXJlZ2lvbicpO1xuICAgICAgICBfdGhpcy5fbGl2ZVJlZ2lvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGl2ZScsICdhc3NlcnRpdmUnKTtcbiAgICAgICAgX3RoaXMuX2FjY2Vzc2liaWxpdHlUcmVlUm9vdC5hcHBlbmRDaGlsZChfdGhpcy5fbGl2ZVJlZ2lvbik7XG4gICAgICAgIF90aGlzLl90ZXJtaW5hbC5lbGVtZW50Lmluc2VydEFkamFjZW50RWxlbWVudCgnYWZ0ZXJiZWdpbicsIF90aGlzLl9hY2Nlc3NpYmlsaXR5VHJlZVJvb3QpO1xuICAgICAgICBfdGhpcy5yZWdpc3RlcihfdGhpcy5fcmVuZGVyUm93c0RlYm91bmNlcik7XG4gICAgICAgIF90aGlzLnJlZ2lzdGVyKF90aGlzLl90ZXJtaW5hbC5hZGREaXNwb3NhYmxlTGlzdGVuZXIoJ3Jlc2l6ZScsIGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBfdGhpcy5fb25SZXNpemUoZGF0YS5yb3dzKTsgfSkpO1xuICAgICAgICBfdGhpcy5yZWdpc3RlcihfdGhpcy5fdGVybWluYWwuYWRkRGlzcG9zYWJsZUxpc3RlbmVyKCdyZWZyZXNoJywgZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIF90aGlzLl9yZWZyZXNoUm93cyhkYXRhLnN0YXJ0LCBkYXRhLmVuZCk7IH0pKTtcbiAgICAgICAgX3RoaXMucmVnaXN0ZXIoX3RoaXMuX3Rlcm1pbmFsLmFkZERpc3Bvc2FibGVMaXN0ZW5lcignc2Nyb2xsJywgZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIF90aGlzLl9yZWZyZXNoUm93cygpOyB9KSk7XG4gICAgICAgIF90aGlzLnJlZ2lzdGVyKF90aGlzLl90ZXJtaW5hbC5hZGREaXNwb3NhYmxlTGlzdGVuZXIoJ2ExMXkuY2hhcicsIGZ1bmN0aW9uIChjaGFyKSB7IHJldHVybiBfdGhpcy5fb25DaGFyKGNoYXIpOyB9KSk7XG4gICAgICAgIF90aGlzLnJlZ2lzdGVyKF90aGlzLl90ZXJtaW5hbC5hZGREaXNwb3NhYmxlTGlzdGVuZXIoJ2xpbmVmZWVkJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX29uQ2hhcignXFxuJyk7IH0pKTtcbiAgICAgICAgX3RoaXMucmVnaXN0ZXIoX3RoaXMuX3Rlcm1pbmFsLmFkZERpc3Bvc2FibGVMaXN0ZW5lcignYTExeS50YWInLCBmdW5jdGlvbiAoc3BhY2VDb3VudCkgeyByZXR1cm4gX3RoaXMuX29uVGFiKHNwYWNlQ291bnQpOyB9KSk7XG4gICAgICAgIF90aGlzLnJlZ2lzdGVyKF90aGlzLl90ZXJtaW5hbC5hZGREaXNwb3NhYmxlTGlzdGVuZXIoJ2tleScsIGZ1bmN0aW9uIChrZXlDaGFyKSB7IHJldHVybiBfdGhpcy5fb25LZXkoa2V5Q2hhcik7IH0pKTtcbiAgICAgICAgX3RoaXMucmVnaXN0ZXIoX3RoaXMuX3Rlcm1pbmFsLmFkZERpc3Bvc2FibGVMaXN0ZW5lcignYmx1cicsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLl9jbGVhckxpdmVSZWdpb24oKTsgfSkpO1xuICAgICAgICBfdGhpcy5yZWdpc3RlcihfdGhpcy5fdGVybWluYWwuYWRkRGlzcG9zYWJsZUxpc3RlbmVyKCdkcHJjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fcmVmcmVzaFJvd3NEaW1lbnNpb25zKCk7IH0pKTtcbiAgICAgICAgX3RoaXMucmVnaXN0ZXIoX3RoaXMuX3Rlcm1pbmFsLnJlbmRlcmVyLmFkZERpc3Bvc2FibGVMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX3JlZnJlc2hSb3dzRGltZW5zaW9ucygpOyB9KSk7XG4gICAgICAgIF90aGlzLnJlZ2lzdGVyKExpZmVjeWNsZV8xLmFkZERpc3Bvc2FibGVEb21MaXN0ZW5lcih3aW5kb3csICdyZXNpemUnLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fcmVmcmVzaFJvd3NEaW1lbnNpb25zKCk7IH0pKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBY2Nlc3NpYmlsaXR5TWFuYWdlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLmVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5fYWNjZXNzaWJpbGl0eVRyZWVSb290KTtcbiAgICAgICAgdGhpcy5fcm93RWxlbWVudHMubGVuZ3RoID0gMDtcbiAgICB9O1xuICAgIEFjY2Vzc2liaWxpdHlNYW5hZ2VyLnByb3RvdHlwZS5fb25Cb3VuZGFyeUZvY3VzID0gZnVuY3Rpb24gKGUsIHBvc2l0aW9uKSB7XG4gICAgICAgIHZhciBib3VuZGFyeUVsZW1lbnQgPSBlLnRhcmdldDtcbiAgICAgICAgdmFyIGJlZm9yZUJvdW5kYXJ5RWxlbWVudCA9IHRoaXMuX3Jvd0VsZW1lbnRzW3Bvc2l0aW9uID09PSAwID8gMSA6IHRoaXMuX3Jvd0VsZW1lbnRzLmxlbmd0aCAtIDJdO1xuICAgICAgICB2YXIgcG9zSW5TZXQgPSBib3VuZGFyeUVsZW1lbnQuZ2V0QXR0cmlidXRlKCdhcmlhLXBvc2luc2V0Jyk7XG4gICAgICAgIHZhciBsYXN0Um93UG9zID0gcG9zaXRpb24gPT09IDAgPyAnMScgOiBcIlwiICsgdGhpcy5fdGVybWluYWwuYnVmZmVyLmxpbmVzLmxlbmd0aDtcbiAgICAgICAgaWYgKHBvc0luU2V0ID09PSBsYXN0Um93UG9zKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGUucmVsYXRlZFRhcmdldCAhPT0gYmVmb3JlQm91bmRhcnlFbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRvcEJvdW5kYXJ5RWxlbWVudDtcbiAgICAgICAgdmFyIGJvdHRvbUJvdW5kYXJ5RWxlbWVudDtcbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKSB7XG4gICAgICAgICAgICB0b3BCb3VuZGFyeUVsZW1lbnQgPSBib3VuZGFyeUVsZW1lbnQ7XG4gICAgICAgICAgICBib3R0b21Cb3VuZGFyeUVsZW1lbnQgPSB0aGlzLl9yb3dFbGVtZW50cy5wb3AoKTtcbiAgICAgICAgICAgIHRoaXMuX3Jvd0NvbnRhaW5lci5yZW1vdmVDaGlsZChib3R0b21Cb3VuZGFyeUVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdG9wQm91bmRhcnlFbGVtZW50ID0gdGhpcy5fcm93RWxlbWVudHMuc2hpZnQoKTtcbiAgICAgICAgICAgIGJvdHRvbUJvdW5kYXJ5RWxlbWVudCA9IGJvdW5kYXJ5RWxlbWVudDtcbiAgICAgICAgICAgIHRoaXMuX3Jvd0NvbnRhaW5lci5yZW1vdmVDaGlsZCh0b3BCb3VuZGFyeUVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHRvcEJvdW5kYXJ5RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1cycsIHRoaXMuX3RvcEJvdW5kYXJ5Rm9jdXNMaXN0ZW5lcik7XG4gICAgICAgIGJvdHRvbUJvdW5kYXJ5RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1cycsIHRoaXMuX2JvdHRvbUJvdW5kYXJ5Rm9jdXNMaXN0ZW5lcik7XG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gMCkge1xuICAgICAgICAgICAgdmFyIG5ld0VsZW1lbnQgPSB0aGlzLl9jcmVhdGVBY2Nlc3NpYmlsaXR5VHJlZU5vZGUoKTtcbiAgICAgICAgICAgIHRoaXMuX3Jvd0VsZW1lbnRzLnVuc2hpZnQobmV3RWxlbWVudCk7XG4gICAgICAgICAgICB0aGlzLl9yb3dDb250YWluZXIuaW5zZXJ0QWRqYWNlbnRFbGVtZW50KCdhZnRlcmJlZ2luJywgbmV3RWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgbmV3RWxlbWVudCA9IHRoaXMuX2NyZWF0ZUFjY2Vzc2liaWxpdHlUcmVlTm9kZSgpO1xuICAgICAgICAgICAgdGhpcy5fcm93RWxlbWVudHMucHVzaChuZXdFbGVtZW50KTtcbiAgICAgICAgICAgIHRoaXMuX3Jvd0NvbnRhaW5lci5hcHBlbmRDaGlsZChuZXdFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yb3dFbGVtZW50c1swXS5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIHRoaXMuX3RvcEJvdW5kYXJ5Rm9jdXNMaXN0ZW5lcik7XG4gICAgICAgIHRoaXMuX3Jvd0VsZW1lbnRzW3RoaXMuX3Jvd0VsZW1lbnRzLmxlbmd0aCAtIDFdLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgdGhpcy5fYm90dG9tQm91bmRhcnlGb2N1c0xpc3RlbmVyKTtcbiAgICAgICAgdGhpcy5fdGVybWluYWwuc2Nyb2xsTGluZXMocG9zaXRpb24gPT09IDAgPyAtMSA6IDEpO1xuICAgICAgICB0aGlzLl9yb3dFbGVtZW50c1twb3NpdGlvbiA9PT0gMCA/IDEgOiB0aGlzLl9yb3dFbGVtZW50cy5sZW5ndGggLSAyXS5mb2N1cygpO1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgfTtcbiAgICBBY2Nlc3NpYmlsaXR5TWFuYWdlci5wcm90b3R5cGUuX29uUmVzaXplID0gZnVuY3Rpb24gKHJvd3MpIHtcbiAgICAgICAgdGhpcy5fcm93RWxlbWVudHNbdGhpcy5fcm93RWxlbWVudHMubGVuZ3RoIC0gMV0ucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzLl9ib3R0b21Cb3VuZGFyeUZvY3VzTGlzdGVuZXIpO1xuICAgICAgICBmb3IgKHZhciBpID0gdGhpcy5fcm93Q29udGFpbmVyLmNoaWxkcmVuLmxlbmd0aDsgaSA8IHRoaXMuX3Rlcm1pbmFsLnJvd3M7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5fcm93RWxlbWVudHNbaV0gPSB0aGlzLl9jcmVhdGVBY2Nlc3NpYmlsaXR5VHJlZU5vZGUoKTtcbiAgICAgICAgICAgIHRoaXMuX3Jvd0NvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLl9yb3dFbGVtZW50c1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKHRoaXMuX3Jvd0VsZW1lbnRzLmxlbmd0aCA+IHJvd3MpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jvd0NvbnRhaW5lci5yZW1vdmVDaGlsZCh0aGlzLl9yb3dFbGVtZW50cy5wb3AoKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcm93RWxlbWVudHNbdGhpcy5fcm93RWxlbWVudHMubGVuZ3RoIC0gMV0uYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzLl9ib3R0b21Cb3VuZGFyeUZvY3VzTGlzdGVuZXIpO1xuICAgICAgICB0aGlzLl9yZWZyZXNoUm93c0RpbWVuc2lvbnMoKTtcbiAgICB9O1xuICAgIEFjY2Vzc2liaWxpdHlNYW5hZ2VyLnByb3RvdHlwZS5fY3JlYXRlQWNjZXNzaWJpbGl0eVRyZWVOb2RlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgncm9sZScsICdsaXN0aXRlbScpO1xuICAgICAgICBlbGVtZW50LnRhYkluZGV4ID0gLTE7XG4gICAgICAgIHRoaXMuX3JlZnJlc2hSb3dEaW1lbnNpb25zKGVsZW1lbnQpO1xuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9O1xuICAgIEFjY2Vzc2liaWxpdHlNYW5hZ2VyLnByb3RvdHlwZS5fb25UYWIgPSBmdW5jdGlvbiAoc3BhY2VDb3VudCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNwYWNlQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5fb25DaGFyKCcgJyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFjY2Vzc2liaWxpdHlNYW5hZ2VyLnByb3RvdHlwZS5fb25DaGFyID0gZnVuY3Rpb24gKGNoYXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuX2xpdmVSZWdpb25MaW5lQ291bnQgPCBNQVhfUk9XU19UT19SRUFEICsgMSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NoYXJzVG9Db25zdW1lLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgc2hpZnRlZENoYXIgPSB0aGlzLl9jaGFyc1RvQ29uc3VtZS5zaGlmdCgpO1xuICAgICAgICAgICAgICAgIGlmIChzaGlmdGVkQ2hhciAhPT0gY2hhcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hbm5vdW5jZUNoYXJhY3RlcihjaGFyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9hbm5vdW5jZUNoYXJhY3RlcihjaGFyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjaGFyID09PSAnXFxuJykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xpdmVSZWdpb25MaW5lQ291bnQrKztcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbGl2ZVJlZ2lvbkxpbmVDb3VudCA9PT0gTUFYX1JPV1NfVE9fUkVBRCArIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGl2ZVJlZ2lvbi50ZXh0Q29udGVudCArPSBTdHJpbmdzLnRvb011Y2hPdXRwdXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKFBsYXRmb3JtXzEuaXNNYWMpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbGl2ZVJlZ2lvbi50ZXh0Q29udGVudCAmJiB0aGlzLl9saXZlUmVnaW9uLnRleHRDb250ZW50Lmxlbmd0aCA+IDAgJiYgIXRoaXMuX2xpdmVSZWdpb24ucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9hY2Nlc3NpYmlsaXR5VHJlZVJvb3QuYXBwZW5kQ2hpbGQoX3RoaXMuX2xpdmVSZWdpb24pO1xuICAgICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFjY2Vzc2liaWxpdHlNYW5hZ2VyLnByb3RvdHlwZS5fY2xlYXJMaXZlUmVnaW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9saXZlUmVnaW9uLnRleHRDb250ZW50ID0gJyc7XG4gICAgICAgIHRoaXMuX2xpdmVSZWdpb25MaW5lQ291bnQgPSAwO1xuICAgICAgICBpZiAoUGxhdGZvcm1fMS5pc01hYykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2xpdmVSZWdpb24ucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2FjY2Vzc2liaWxpdHlUcmVlUm9vdC5yZW1vdmVDaGlsZCh0aGlzLl9saXZlUmVnaW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgQWNjZXNzaWJpbGl0eU1hbmFnZXIucHJvdG90eXBlLl9vbktleSA9IGZ1bmN0aW9uIChrZXlDaGFyKSB7XG4gICAgICAgIHRoaXMuX2NsZWFyTGl2ZVJlZ2lvbigpO1xuICAgICAgICB0aGlzLl9jaGFyc1RvQ29uc3VtZS5wdXNoKGtleUNoYXIpO1xuICAgIH07XG4gICAgQWNjZXNzaWJpbGl0eU1hbmFnZXIucHJvdG90eXBlLl9yZWZyZXNoUm93cyA9IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgICAgIHRoaXMuX3JlbmRlclJvd3NEZWJvdW5jZXIucmVmcmVzaChzdGFydCwgZW5kKTtcbiAgICB9O1xuICAgIEFjY2Vzc2liaWxpdHlNYW5hZ2VyLnByb3RvdHlwZS5fcmVuZGVyUm93cyA9IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLl90ZXJtaW5hbC5idWZmZXI7XG4gICAgICAgIHZhciBzZXRTaXplID0gYnVmZmVyLmxpbmVzLmxlbmd0aC50b1N0cmluZygpO1xuICAgICAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPD0gZW5kOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBsaW5lRGF0YSA9IGJ1ZmZlci50cmFuc2xhdGVCdWZmZXJMaW5lVG9TdHJpbmcoYnVmZmVyLnlkaXNwICsgaSwgdHJ1ZSk7XG4gICAgICAgICAgICB2YXIgcG9zSW5TZXQgPSAoYnVmZmVyLnlkaXNwICsgaSArIDEpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMuX3Jvd0VsZW1lbnRzW2ldO1xuICAgICAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IGxpbmVEYXRhLmxlbmd0aCA9PT0gMCA/IFN0cmluZ3MuYmxhbmtMaW5lIDogbGluZURhdGE7XG4gICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1wb3NpbnNldCcsIHBvc0luU2V0KTtcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLXNldHNpemUnLCBzZXRTaXplKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQWNjZXNzaWJpbGl0eU1hbmFnZXIucHJvdG90eXBlLl9yZWZyZXNoUm93c0RpbWVuc2lvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5fdGVybWluYWwucmVuZGVyZXIuZGltZW5zaW9ucy5hY3R1YWxDZWxsSGVpZ2h0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3Jvd0VsZW1lbnRzLmxlbmd0aCAhPT0gdGhpcy5fdGVybWluYWwucm93cykge1xuICAgICAgICAgICAgdGhpcy5fb25SZXNpemUodGhpcy5fdGVybWluYWwucm93cyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl90ZXJtaW5hbC5yb3dzOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuX3JlZnJlc2hSb3dEaW1lbnNpb25zKHRoaXMuX3Jvd0VsZW1lbnRzW2ldKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQWNjZXNzaWJpbGl0eU1hbmFnZXIucHJvdG90eXBlLl9yZWZyZXNoUm93RGltZW5zaW9ucyA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gdGhpcy5fdGVybWluYWwucmVuZGVyZXIuZGltZW5zaW9ucy5hY3R1YWxDZWxsSGVpZ2h0ICsgXCJweFwiO1xuICAgIH07XG4gICAgQWNjZXNzaWJpbGl0eU1hbmFnZXIucHJvdG90eXBlLl9hbm5vdW5jZUNoYXJhY3RlciA9IGZ1bmN0aW9uIChjaGFyKSB7XG4gICAgICAgIGlmIChjaGFyID09PSAnICcpIHtcbiAgICAgICAgICAgIHRoaXMuX2xpdmVSZWdpb24uaW5uZXJIVE1MICs9ICcmbmJzcDsnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fbGl2ZVJlZ2lvbi50ZXh0Q29udGVudCArPSBjaGFyO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQWNjZXNzaWJpbGl0eU1hbmFnZXI7XG59KExpZmVjeWNsZV8yLkRpc3Bvc2FibGUpKTtcbmV4cG9ydHMuQWNjZXNzaWJpbGl0eU1hbmFnZXIgPSBBY2Nlc3NpYmlsaXR5TWFuYWdlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFjY2Vzc2liaWxpdHlNYW5hZ2VyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBFdmVudEVtaXR0ZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21tb24vRXZlbnRFbWl0dGVyXCIpO1xudmFyIENvbG9yTWFuYWdlcl8xID0gcmVxdWlyZShcIi4uL0NvbG9yTWFuYWdlclwiKTtcbnZhciBSZW5kZXJEZWJvdW5jZXJfMSA9IHJlcXVpcmUoXCIuLi8uLi91aS9SZW5kZXJEZWJvdW5jZXJcIik7XG52YXIgRG9tUmVuZGVyZXJSb3dGYWN0b3J5XzEgPSByZXF1aXJlKFwiLi9Eb21SZW5kZXJlclJvd0ZhY3RvcnlcIik7XG52YXIgVHlwZXNfMSA9IHJlcXVpcmUoXCIuLi9hdGxhcy9UeXBlc1wiKTtcbnZhciBURVJNSU5BTF9DTEFTU19QUkVGSVggPSAneHRlcm0tZG9tLXJlbmRlcmVyLW93bmVyLSc7XG52YXIgUk9XX0NPTlRBSU5FUl9DTEFTUyA9ICd4dGVybS1yb3dzJztcbnZhciBGR19DTEFTU19QUkVGSVggPSAneHRlcm0tZmctJztcbnZhciBCR19DTEFTU19QUkVGSVggPSAneHRlcm0tYmctJztcbnZhciBGT0NVU19DTEFTUyA9ICd4dGVybS1mb2N1cyc7XG52YXIgU0VMRUNUSU9OX0NMQVNTID0gJ3h0ZXJtLXNlbGVjdGlvbic7XG52YXIgbmV4dFRlcm1pbmFsSWQgPSAxO1xudmFyIERvbVJlbmRlcmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRG9tUmVuZGVyZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRG9tUmVuZGVyZXIoX3Rlcm1pbmFsLCB0aGVtZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fdGVybWluYWwgPSBfdGVybWluYWw7XG4gICAgICAgIF90aGlzLl90ZXJtaW5hbENsYXNzID0gbmV4dFRlcm1pbmFsSWQrKztcbiAgICAgICAgX3RoaXMuX3Jvd0VsZW1lbnRzID0gW107XG4gICAgICAgIHZhciBhbGxvd1RyYW5zcGFyZW5jeSA9IF90aGlzLl90ZXJtaW5hbC5vcHRpb25zLmFsbG93VHJhbnNwYXJlbmN5O1xuICAgICAgICBfdGhpcy5jb2xvck1hbmFnZXIgPSBuZXcgQ29sb3JNYW5hZ2VyXzEuQ29sb3JNYW5hZ2VyKGRvY3VtZW50LCBhbGxvd1RyYW5zcGFyZW5jeSk7XG4gICAgICAgIF90aGlzLnNldFRoZW1lKHRoZW1lKTtcbiAgICAgICAgX3RoaXMuX3Jvd0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBfdGhpcy5fcm93Q29udGFpbmVyLmNsYXNzTGlzdC5hZGQoUk9XX0NPTlRBSU5FUl9DTEFTUyk7XG4gICAgICAgIF90aGlzLl9yb3dDb250YWluZXIuc3R5bGUubGluZUhlaWdodCA9ICdub3JtYWwnO1xuICAgICAgICBfdGhpcy5fcm93Q29udGFpbmVyLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgICAgICBfdGhpcy5fcmVmcmVzaFJvd0VsZW1lbnRzKF90aGlzLl90ZXJtaW5hbC5jb2xzLCBfdGhpcy5fdGVybWluYWwucm93cyk7XG4gICAgICAgIF90aGlzLl9zZWxlY3Rpb25Db250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgX3RoaXMuX3NlbGVjdGlvbkNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFNFTEVDVElPTl9DTEFTUyk7XG4gICAgICAgIF90aGlzLl9zZWxlY3Rpb25Db250YWluZXIuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgICAgIF90aGlzLmRpbWVuc2lvbnMgPSB7XG4gICAgICAgICAgICBzY2FsZWRDaGFyV2lkdGg6IG51bGwsXG4gICAgICAgICAgICBzY2FsZWRDaGFySGVpZ2h0OiBudWxsLFxuICAgICAgICAgICAgc2NhbGVkQ2VsbFdpZHRoOiBudWxsLFxuICAgICAgICAgICAgc2NhbGVkQ2VsbEhlaWdodDogbnVsbCxcbiAgICAgICAgICAgIHNjYWxlZENoYXJMZWZ0OiBudWxsLFxuICAgICAgICAgICAgc2NhbGVkQ2hhclRvcDogbnVsbCxcbiAgICAgICAgICAgIHNjYWxlZENhbnZhc1dpZHRoOiBudWxsLFxuICAgICAgICAgICAgc2NhbGVkQ2FudmFzSGVpZ2h0OiBudWxsLFxuICAgICAgICAgICAgY2FudmFzV2lkdGg6IG51bGwsXG4gICAgICAgICAgICBjYW52YXNIZWlnaHQ6IG51bGwsXG4gICAgICAgICAgICBhY3R1YWxDZWxsV2lkdGg6IG51bGwsXG4gICAgICAgICAgICBhY3R1YWxDZWxsSGVpZ2h0OiBudWxsXG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl91cGRhdGVEaW1lbnNpb25zKCk7XG4gICAgICAgIF90aGlzLl9yZW5kZXJEZWJvdW5jZXIgPSBuZXcgUmVuZGVyRGVib3VuY2VyXzEuUmVuZGVyRGVib3VuY2VyKF90aGlzLl90ZXJtaW5hbCwgX3RoaXMuX3JlbmRlclJvd3MuYmluZChfdGhpcykpO1xuICAgICAgICBfdGhpcy5fcm93RmFjdG9yeSA9IG5ldyBEb21SZW5kZXJlclJvd0ZhY3RvcnlfMS5Eb21SZW5kZXJlclJvd0ZhY3RvcnkoZG9jdW1lbnQpO1xuICAgICAgICBfdGhpcy5fdGVybWluYWwuZWxlbWVudC5jbGFzc0xpc3QuYWRkKFRFUk1JTkFMX0NMQVNTX1BSRUZJWCArIF90aGlzLl90ZXJtaW5hbENsYXNzKTtcbiAgICAgICAgX3RoaXMuX3Rlcm1pbmFsLnNjcmVlbkVsZW1lbnQuYXBwZW5kQ2hpbGQoX3RoaXMuX3Jvd0NvbnRhaW5lcik7XG4gICAgICAgIF90aGlzLl90ZXJtaW5hbC5zY3JlZW5FbGVtZW50LmFwcGVuZENoaWxkKF90aGlzLl9zZWxlY3Rpb25Db250YWluZXIpO1xuICAgICAgICBfdGhpcy5fdGVybWluYWwubGlua2lmaWVyLm9uKFwibGlua2hvdmVyXCIsIGZ1bmN0aW9uIChlKSB7IHJldHVybiBfdGhpcy5fb25MaW5rSG92ZXIoZSk7IH0pO1xuICAgICAgICBfdGhpcy5fdGVybWluYWwubGlua2lmaWVyLm9uKFwibGlua2xlYXZlXCIsIGZ1bmN0aW9uIChlKSB7IHJldHVybiBfdGhpcy5fb25MaW5rTGVhdmUoZSk7IH0pO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIERvbVJlbmRlcmVyLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoVEVSTUlOQUxfQ0xBU1NfUFJFRklYICsgdGhpcy5fdGVybWluYWxDbGFzcyk7XG4gICAgICAgIHRoaXMuX3Rlcm1pbmFsLnNjcmVlbkVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5fcm93Q29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5fdGVybWluYWwuc2NyZWVuRWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLl9zZWxlY3Rpb25Db250YWluZXIpO1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5zY3JlZW5FbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMuX3RoZW1lU3R5bGVFbGVtZW50KTtcbiAgICAgICAgdGhpcy5fdGVybWluYWwuc2NyZWVuRWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLl9kaW1lbnNpb25zU3R5bGVFbGVtZW50KTtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBEb21SZW5kZXJlci5wcm90b3R5cGUuX3VwZGF0ZURpbWVuc2lvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuZGltZW5zaW9ucy5zY2FsZWRDaGFyV2lkdGggPSBNYXRoLmZsb29yKHRoaXMuX3Rlcm1pbmFsLmNoYXJNZWFzdXJlLndpZHRoICogd2luZG93LmRldmljZVBpeGVsUmF0aW8pO1xuICAgICAgICB0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2hhckhlaWdodCA9IE1hdGguY2VpbCh0aGlzLl90ZXJtaW5hbC5jaGFyTWVhc3VyZS5oZWlnaHQgKiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XG4gICAgICAgIHRoaXMuZGltZW5zaW9ucy5zY2FsZWRDZWxsV2lkdGggPSB0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2hhcldpZHRoICsgTWF0aC5yb3VuZCh0aGlzLl90ZXJtaW5hbC5vcHRpb25zLmxldHRlclNwYWNpbmcpO1xuICAgICAgICB0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2VsbEhlaWdodCA9IE1hdGguZmxvb3IodGhpcy5kaW1lbnNpb25zLnNjYWxlZENoYXJIZWlnaHQgKiB0aGlzLl90ZXJtaW5hbC5vcHRpb25zLmxpbmVIZWlnaHQpO1xuICAgICAgICB0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2hhckxlZnQgPSAwO1xuICAgICAgICB0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2hhclRvcCA9IDA7XG4gICAgICAgIHRoaXMuZGltZW5zaW9ucy5zY2FsZWRDYW52YXNXaWR0aCA9IHRoaXMuZGltZW5zaW9ucy5zY2FsZWRDZWxsV2lkdGggKiB0aGlzLl90ZXJtaW5hbC5jb2xzO1xuICAgICAgICB0aGlzLmRpbWVuc2lvbnMuc2NhbGVkQ2FudmFzSGVpZ2h0ID0gdGhpcy5kaW1lbnNpb25zLnNjYWxlZENlbGxIZWlnaHQgKiB0aGlzLl90ZXJtaW5hbC5yb3dzO1xuICAgICAgICB0aGlzLmRpbWVuc2lvbnMuY2FudmFzV2lkdGggPSBNYXRoLnJvdW5kKHRoaXMuZGltZW5zaW9ucy5zY2FsZWRDYW52YXNXaWR0aCAvIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTtcbiAgICAgICAgdGhpcy5kaW1lbnNpb25zLmNhbnZhc0hlaWdodCA9IE1hdGgucm91bmQodGhpcy5kaW1lbnNpb25zLnNjYWxlZENhbnZhc0hlaWdodCAvIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTtcbiAgICAgICAgdGhpcy5kaW1lbnNpb25zLmFjdHVhbENlbGxXaWR0aCA9IHRoaXMuZGltZW5zaW9ucy5jYW52YXNXaWR0aCAvIHRoaXMuX3Rlcm1pbmFsLmNvbHM7XG4gICAgICAgIHRoaXMuZGltZW5zaW9ucy5hY3R1YWxDZWxsSGVpZ2h0ID0gdGhpcy5kaW1lbnNpb25zLmNhbnZhc0hlaWdodCAvIHRoaXMuX3Rlcm1pbmFsLnJvd3M7XG4gICAgICAgIHRoaXMuX3Jvd0VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUud2lkdGggPSBfdGhpcy5kaW1lbnNpb25zLmNhbnZhc1dpZHRoICsgXCJweFwiO1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5oZWlnaHQgPSBfdGhpcy5kaW1lbnNpb25zLmFjdHVhbENlbGxIZWlnaHQgKyBcInB4XCI7XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLmxpbmVIZWlnaHQgPSBfdGhpcy5kaW1lbnNpb25zLmFjdHVhbENlbGxIZWlnaHQgKyBcInB4XCI7XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXRoaXMuX2RpbWVuc2lvbnNTdHlsZUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX2RpbWVuc2lvbnNTdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuc2NyZWVuRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLl9kaW1lbnNpb25zU3R5bGVFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3R5bGVzID0gdGhpcy5fdGVybWluYWxTZWxlY3RvciArIFwiIC5cIiArIFJPV19DT05UQUlORVJfQ0xBU1MgKyBcIiBzcGFuIHtcIiArXG4gICAgICAgICAgICBcIiBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XCIgK1xuICAgICAgICAgICAgXCIgaGVpZ2h0OiAxMDAlO1wiICtcbiAgICAgICAgICAgIFwiIHZlcnRpY2FsLWFsaWduOiB0b3A7XCIgK1xuICAgICAgICAgICAgKFwiIHdpZHRoOiBcIiArIHRoaXMuZGltZW5zaW9ucy5hY3R1YWxDZWxsV2lkdGggKyBcInB4XCIpICtcbiAgICAgICAgICAgIFwifVwiO1xuICAgICAgICB0aGlzLl9kaW1lbnNpb25zU3R5bGVFbGVtZW50LmlubmVySFRNTCA9IHN0eWxlcztcbiAgICAgICAgdGhpcy5fc2VsZWN0aW9uQ29udGFpbmVyLnN0eWxlLmhlaWdodCA9IHRoaXMuX3Rlcm1pbmFsLl92aWV3cG9ydEVsZW1lbnQuc3R5bGUuaGVpZ2h0O1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5zY3JlZW5FbGVtZW50LnN0eWxlLndpZHRoID0gdGhpcy5kaW1lbnNpb25zLmNhbnZhc1dpZHRoICsgXCJweFwiO1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5zY3JlZW5FbGVtZW50LnN0eWxlLmhlaWdodCA9IHRoaXMuZGltZW5zaW9ucy5jYW52YXNIZWlnaHQgKyBcInB4XCI7XG4gICAgfTtcbiAgICBEb21SZW5kZXJlci5wcm90b3R5cGUuc2V0VGhlbWUgPSBmdW5jdGlvbiAodGhlbWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoZW1lKSB7XG4gICAgICAgICAgICB0aGlzLmNvbG9yTWFuYWdlci5zZXRUaGVtZSh0aGVtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl90aGVtZVN0eWxlRWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5fdGhlbWVTdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgICAgICAgdGhpcy5fdGVybWluYWwuc2NyZWVuRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLl90aGVtZVN0eWxlRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0eWxlcyA9IHRoaXMuX3Rlcm1pbmFsU2VsZWN0b3IgKyBcIiAuXCIgKyBST1dfQ09OVEFJTkVSX0NMQVNTICsgXCIge1wiICtcbiAgICAgICAgICAgIChcIiBjb2xvcjogXCIgKyB0aGlzLmNvbG9yTWFuYWdlci5jb2xvcnMuZm9yZWdyb3VuZC5jc3MgKyBcIjtcIikgK1xuICAgICAgICAgICAgKFwiIGJhY2tncm91bmQtY29sb3I6IFwiICsgdGhpcy5jb2xvck1hbmFnZXIuY29sb3JzLmJhY2tncm91bmQuY3NzICsgXCI7XCIpICtcbiAgICAgICAgICAgIChcIiBmb250LWZhbWlseTogXCIgKyB0aGlzLl90ZXJtaW5hbC5nZXRPcHRpb24oJ2ZvbnRGYW1pbHknKSArIFwiO1wiKSArXG4gICAgICAgICAgICAoXCIgZm9udC1zaXplOiBcIiArIHRoaXMuX3Rlcm1pbmFsLmdldE9wdGlvbignZm9udFNpemUnKSArIFwicHg7XCIpICtcbiAgICAgICAgICAgIFwifVwiO1xuICAgICAgICBzdHlsZXMgKz1cbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsU2VsZWN0b3IgKyBcIiBzcGFuOm5vdCguXCIgKyBEb21SZW5kZXJlclJvd0ZhY3RvcnlfMS5CT0xEX0NMQVNTICsgXCIpIHtcIiArXG4gICAgICAgICAgICAgICAgKFwiIGZvbnQtd2VpZ2h0OiBcIiArIHRoaXMuX3Rlcm1pbmFsLm9wdGlvbnMuZm9udFdlaWdodCArIFwiO1wiKSArXG4gICAgICAgICAgICAgICAgXCJ9XCIgK1xuICAgICAgICAgICAgICAgICh0aGlzLl90ZXJtaW5hbFNlbGVjdG9yICsgXCIgc3Bhbi5cIiArIERvbVJlbmRlcmVyUm93RmFjdG9yeV8xLkJPTERfQ0xBU1MgKyBcIiB7XCIpICtcbiAgICAgICAgICAgICAgICAoXCIgZm9udC13ZWlnaHQ6IFwiICsgdGhpcy5fdGVybWluYWwub3B0aW9ucy5mb250V2VpZ2h0Qm9sZCArIFwiO1wiKSArXG4gICAgICAgICAgICAgICAgXCJ9XCIgK1xuICAgICAgICAgICAgICAgICh0aGlzLl90ZXJtaW5hbFNlbGVjdG9yICsgXCIgc3Bhbi5cIiArIERvbVJlbmRlcmVyUm93RmFjdG9yeV8xLklUQUxJQ19DTEFTUyArIFwiIHtcIikgK1xuICAgICAgICAgICAgICAgIFwiIGZvbnQtc3R5bGU6IGl0YWxpYztcIiArXG4gICAgICAgICAgICAgICAgXCJ9XCI7XG4gICAgICAgIHN0eWxlcyArPVxuICAgICAgICAgICAgdGhpcy5fdGVybWluYWxTZWxlY3RvciArIFwiIC5cIiArIFJPV19DT05UQUlORVJfQ0xBU1MgKyBcIjpub3QoLlwiICsgRk9DVVNfQ0xBU1MgKyBcIikgLlwiICsgRG9tUmVuZGVyZXJSb3dGYWN0b3J5XzEuQ1VSU09SX0NMQVNTICsgXCIge1wiICtcbiAgICAgICAgICAgICAgICAoXCIgb3V0bGluZTogMXB4IHNvbGlkIFwiICsgdGhpcy5jb2xvck1hbmFnZXIuY29sb3JzLmN1cnNvci5jc3MgKyBcIjtcIikgK1xuICAgICAgICAgICAgICAgIFwiIG91dGxpbmUtb2Zmc2V0OiAtMXB4O1wiICtcbiAgICAgICAgICAgICAgICBcIn1cIiArXG4gICAgICAgICAgICAgICAgKHRoaXMuX3Rlcm1pbmFsU2VsZWN0b3IgKyBcIiAuXCIgKyBST1dfQ09OVEFJTkVSX0NMQVNTICsgXCIuXCIgKyBGT0NVU19DTEFTUyArIFwiIC5cIiArIERvbVJlbmRlcmVyUm93RmFjdG9yeV8xLkNVUlNPUl9DTEFTUyArIFwiLlwiICsgRG9tUmVuZGVyZXJSb3dGYWN0b3J5XzEuQ1VSU09SX1NUWUxFX0JMT0NLX0NMQVNTICsgXCIge1wiKSArXG4gICAgICAgICAgICAgICAgKFwiIGJhY2tncm91bmQtY29sb3I6IFwiICsgdGhpcy5jb2xvck1hbmFnZXIuY29sb3JzLmN1cnNvci5jc3MgKyBcIjtcIikgK1xuICAgICAgICAgICAgICAgIChcIiBjb2xvcjogXCIgKyB0aGlzLmNvbG9yTWFuYWdlci5jb2xvcnMuY3Vyc29yQWNjZW50LmNzcyArIFwiO1wiKSArXG4gICAgICAgICAgICAgICAgXCJ9XCIgK1xuICAgICAgICAgICAgICAgICh0aGlzLl90ZXJtaW5hbFNlbGVjdG9yICsgXCIgLlwiICsgUk9XX0NPTlRBSU5FUl9DTEFTUyArIFwiLlwiICsgRk9DVVNfQ0xBU1MgKyBcIiAuXCIgKyBEb21SZW5kZXJlclJvd0ZhY3RvcnlfMS5DVVJTT1JfQ0xBU1MgKyBcIi5cIiArIERvbVJlbmRlcmVyUm93RmFjdG9yeV8xLkNVUlNPUl9TVFlMRV9CQVJfQ0xBU1MgKyBcIiB7XCIpICtcbiAgICAgICAgICAgICAgICAoXCIgYm94LXNoYWRvdzogMXB4IDAgMCBcIiArIHRoaXMuY29sb3JNYW5hZ2VyLmNvbG9ycy5jdXJzb3IuY3NzICsgXCIgaW5zZXQ7XCIpICtcbiAgICAgICAgICAgICAgICBcIn1cIiArXG4gICAgICAgICAgICAgICAgKHRoaXMuX3Rlcm1pbmFsU2VsZWN0b3IgKyBcIiAuXCIgKyBST1dfQ09OVEFJTkVSX0NMQVNTICsgXCIuXCIgKyBGT0NVU19DTEFTUyArIFwiIC5cIiArIERvbVJlbmRlcmVyUm93RmFjdG9yeV8xLkNVUlNPUl9DTEFTUyArIFwiLlwiICsgRG9tUmVuZGVyZXJSb3dGYWN0b3J5XzEuQ1VSU09SX1NUWUxFX1VOREVSTElORV9DTEFTUyArIFwiIHtcIikgK1xuICAgICAgICAgICAgICAgIChcIiBib3gtc2hhZG93OiAwIC0xcHggMCBcIiArIHRoaXMuY29sb3JNYW5hZ2VyLmNvbG9ycy5jdXJzb3IuY3NzICsgXCIgaW5zZXQ7XCIpICtcbiAgICAgICAgICAgICAgICBcIn1cIjtcbiAgICAgICAgc3R5bGVzICs9XG4gICAgICAgICAgICB0aGlzLl90ZXJtaW5hbFNlbGVjdG9yICsgXCIgLlwiICsgU0VMRUNUSU9OX0NMQVNTICsgXCIge1wiICtcbiAgICAgICAgICAgICAgICBcIiBwb3NpdGlvbjogYWJzb2x1dGU7XCIgK1xuICAgICAgICAgICAgICAgIFwiIHRvcDogMDtcIiArXG4gICAgICAgICAgICAgICAgXCIgbGVmdDogMDtcIiArXG4gICAgICAgICAgICAgICAgXCIgei1pbmRleDogMTtcIiArXG4gICAgICAgICAgICAgICAgXCIgcG9pbnRlci1ldmVudHM6IG5vbmU7XCIgK1xuICAgICAgICAgICAgICAgIFwifVwiICtcbiAgICAgICAgICAgICAgICAodGhpcy5fdGVybWluYWxTZWxlY3RvciArIFwiIC5cIiArIFNFTEVDVElPTl9DTEFTUyArIFwiIGRpdiB7XCIpICtcbiAgICAgICAgICAgICAgICBcIiBwb3NpdGlvbjogYWJzb2x1dGU7XCIgK1xuICAgICAgICAgICAgICAgIChcIiBiYWNrZ3JvdW5kLWNvbG9yOiBcIiArIHRoaXMuY29sb3JNYW5hZ2VyLmNvbG9ycy5zZWxlY3Rpb24uY3NzICsgXCI7XCIpICtcbiAgICAgICAgICAgICAgICBcIn1cIjtcbiAgICAgICAgdGhpcy5jb2xvck1hbmFnZXIuY29sb3JzLmFuc2kuZm9yRWFjaChmdW5jdGlvbiAoYywgaSkge1xuICAgICAgICAgICAgc3R5bGVzICs9XG4gICAgICAgICAgICAgICAgX3RoaXMuX3Rlcm1pbmFsU2VsZWN0b3IgKyBcIiAuXCIgKyBGR19DTEFTU19QUkVGSVggKyBpICsgXCIgeyBjb2xvcjogXCIgKyBjLmNzcyArIFwiOyB9XCIgK1xuICAgICAgICAgICAgICAgICAgICAoX3RoaXMuX3Rlcm1pbmFsU2VsZWN0b3IgKyBcIiAuXCIgKyBCR19DTEFTU19QUkVGSVggKyBpICsgXCIgeyBiYWNrZ3JvdW5kLWNvbG9yOiBcIiArIGMuY3NzICsgXCI7IH1cIik7XG4gICAgICAgIH0pO1xuICAgICAgICBzdHlsZXMgKz1cbiAgICAgICAgICAgIHRoaXMuX3Rlcm1pbmFsU2VsZWN0b3IgKyBcIiAuXCIgKyBGR19DTEFTU19QUkVGSVggKyBUeXBlc18xLklOVkVSVEVEX0RFRkFVTFRfQ09MT1IgKyBcIiB7IGNvbG9yOiBcIiArIHRoaXMuY29sb3JNYW5hZ2VyLmNvbG9ycy5iYWNrZ3JvdW5kLmNzcyArIFwiOyB9XCIgK1xuICAgICAgICAgICAgICAgICh0aGlzLl90ZXJtaW5hbFNlbGVjdG9yICsgXCIgLlwiICsgQkdfQ0xBU1NfUFJFRklYICsgVHlwZXNfMS5JTlZFUlRFRF9ERUZBVUxUX0NPTE9SICsgXCIgeyBiYWNrZ3JvdW5kLWNvbG9yOiBcIiArIHRoaXMuY29sb3JNYW5hZ2VyLmNvbG9ycy5mb3JlZ3JvdW5kLmNzcyArIFwiOyB9XCIpO1xuICAgICAgICB0aGlzLl90aGVtZVN0eWxlRWxlbWVudC5pbm5lckhUTUwgPSBzdHlsZXM7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbG9yTWFuYWdlci5jb2xvcnM7XG4gICAgfTtcbiAgICBEb21SZW5kZXJlci5wcm90b3R5cGUub25XaW5kb3dSZXNpemUgPSBmdW5jdGlvbiAoZGV2aWNlUGl4ZWxSYXRpbykge1xuICAgICAgICB0aGlzLl91cGRhdGVEaW1lbnNpb25zKCk7XG4gICAgfTtcbiAgICBEb21SZW5kZXJlci5wcm90b3R5cGUuX3JlZnJlc2hSb3dFbGVtZW50cyA9IGZ1bmN0aW9uIChjb2xzLCByb3dzKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSB0aGlzLl9yb3dFbGVtZW50cy5sZW5ndGg7IGkgPD0gcm93czsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICB0aGlzLl9yb3dDb250YWluZXIuYXBwZW5kQ2hpbGQocm93KTtcbiAgICAgICAgICAgIHRoaXMuX3Jvd0VsZW1lbnRzLnB1c2gocm93KTtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAodGhpcy5fcm93RWxlbWVudHMubGVuZ3RoID4gcm93cykge1xuICAgICAgICAgICAgdGhpcy5fcm93Q29udGFpbmVyLnJlbW92ZUNoaWxkKHRoaXMuX3Jvd0VsZW1lbnRzLnBvcCgpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRG9tUmVuZGVyZXIucHJvdG90eXBlLm9uUmVzaXplID0gZnVuY3Rpb24gKGNvbHMsIHJvd3MpIHtcbiAgICAgICAgdGhpcy5fcmVmcmVzaFJvd0VsZW1lbnRzKGNvbHMsIHJvd3MpO1xuICAgICAgICB0aGlzLl91cGRhdGVEaW1lbnNpb25zKCk7XG4gICAgfTtcbiAgICBEb21SZW5kZXJlci5wcm90b3R5cGUub25DaGFyU2l6ZUNoYW5nZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZURpbWVuc2lvbnMoKTtcbiAgICB9O1xuICAgIERvbVJlbmRlcmVyLnByb3RvdHlwZS5vbkJsdXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3Jvd0NvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKEZPQ1VTX0NMQVNTKTtcbiAgICB9O1xuICAgIERvbVJlbmRlcmVyLnByb3RvdHlwZS5vbkZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9yb3dDb250YWluZXIuY2xhc3NMaXN0LmFkZChGT0NVU19DTEFTUyk7XG4gICAgfTtcbiAgICBEb21SZW5kZXJlci5wcm90b3R5cGUub25TZWxlY3Rpb25DaGFuZ2VkID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQsIGNvbHVtblNlbGVjdE1vZGUpIHtcbiAgICAgICAgd2hpbGUgKHRoaXMuX3NlbGVjdGlvbkNvbnRhaW5lci5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuX3NlbGVjdGlvbkNvbnRhaW5lci5yZW1vdmVDaGlsZCh0aGlzLl9zZWxlY3Rpb25Db250YWluZXIuY2hpbGRyZW5bMF0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc3RhcnQgfHwgIWVuZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciB2aWV3cG9ydFN0YXJ0Um93ID0gc3RhcnRbMV0gLSB0aGlzLl90ZXJtaW5hbC5idWZmZXIueWRpc3A7XG4gICAgICAgIHZhciB2aWV3cG9ydEVuZFJvdyA9IGVuZFsxXSAtIHRoaXMuX3Rlcm1pbmFsLmJ1ZmZlci55ZGlzcDtcbiAgICAgICAgdmFyIHZpZXdwb3J0Q2FwcGVkU3RhcnRSb3cgPSBNYXRoLm1heCh2aWV3cG9ydFN0YXJ0Um93LCAwKTtcbiAgICAgICAgdmFyIHZpZXdwb3J0Q2FwcGVkRW5kUm93ID0gTWF0aC5taW4odmlld3BvcnRFbmRSb3csIHRoaXMuX3Rlcm1pbmFsLnJvd3MgLSAxKTtcbiAgICAgICAgaWYgKHZpZXdwb3J0Q2FwcGVkU3RhcnRSb3cgPj0gdGhpcy5fdGVybWluYWwucm93cyB8fCB2aWV3cG9ydENhcHBlZEVuZFJvdyA8IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZG9jdW1lbnRGcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICAgICAgaWYgKGNvbHVtblNlbGVjdE1vZGUpIHtcbiAgICAgICAgICAgIGRvY3VtZW50RnJhZ21lbnQuYXBwZW5kQ2hpbGQodGhpcy5fY3JlYXRlU2VsZWN0aW9uRWxlbWVudCh2aWV3cG9ydENhcHBlZFN0YXJ0Um93LCBzdGFydFswXSwgZW5kWzBdLCB2aWV3cG9ydENhcHBlZEVuZFJvdyAtIHZpZXdwb3J0Q2FwcGVkU3RhcnRSb3cgKyAxKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgc3RhcnRDb2wgPSB2aWV3cG9ydFN0YXJ0Um93ID09PSB2aWV3cG9ydENhcHBlZFN0YXJ0Um93ID8gc3RhcnRbMF0gOiAwO1xuICAgICAgICAgICAgdmFyIGVuZENvbCA9IHZpZXdwb3J0Q2FwcGVkU3RhcnRSb3cgPT09IHZpZXdwb3J0Q2FwcGVkRW5kUm93ID8gZW5kWzBdIDogdGhpcy5fdGVybWluYWwuY29scztcbiAgICAgICAgICAgIGRvY3VtZW50RnJhZ21lbnQuYXBwZW5kQ2hpbGQodGhpcy5fY3JlYXRlU2VsZWN0aW9uRWxlbWVudCh2aWV3cG9ydENhcHBlZFN0YXJ0Um93LCBzdGFydENvbCwgZW5kQ29sKSk7XG4gICAgICAgICAgICB2YXIgbWlkZGxlUm93c0NvdW50ID0gdmlld3BvcnRDYXBwZWRFbmRSb3cgLSB2aWV3cG9ydENhcHBlZFN0YXJ0Um93IC0gMTtcbiAgICAgICAgICAgIGRvY3VtZW50RnJhZ21lbnQuYXBwZW5kQ2hpbGQodGhpcy5fY3JlYXRlU2VsZWN0aW9uRWxlbWVudCh2aWV3cG9ydENhcHBlZFN0YXJ0Um93ICsgMSwgMCwgdGhpcy5fdGVybWluYWwuY29scywgbWlkZGxlUm93c0NvdW50KSk7XG4gICAgICAgICAgICBpZiAodmlld3BvcnRDYXBwZWRTdGFydFJvdyAhPT0gdmlld3BvcnRDYXBwZWRFbmRSb3cpIHtcbiAgICAgICAgICAgICAgICB2YXIgZW5kQ29sXzEgPSB2aWV3cG9ydEVuZFJvdyA9PT0gdmlld3BvcnRDYXBwZWRFbmRSb3cgPyBlbmRbMF0gOiB0aGlzLl90ZXJtaW5hbC5jb2xzO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50RnJhZ21lbnQuYXBwZW5kQ2hpbGQodGhpcy5fY3JlYXRlU2VsZWN0aW9uRWxlbWVudCh2aWV3cG9ydENhcHBlZEVuZFJvdywgMCwgZW5kQ29sXzEpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zZWxlY3Rpb25Db250YWluZXIuYXBwZW5kQ2hpbGQoZG9jdW1lbnRGcmFnbWVudCk7XG4gICAgfTtcbiAgICBEb21SZW5kZXJlci5wcm90b3R5cGUuX2NyZWF0ZVNlbGVjdGlvbkVsZW1lbnQgPSBmdW5jdGlvbiAocm93LCBjb2xTdGFydCwgY29sRW5kLCByb3dDb3VudCkge1xuICAgICAgICBpZiAocm93Q291bnQgPT09IHZvaWQgMCkgeyByb3dDb3VudCA9IDE7IH1cbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5oZWlnaHQgPSByb3dDb3VudCAqIHRoaXMuZGltZW5zaW9ucy5hY3R1YWxDZWxsSGVpZ2h0ICsgXCJweFwiO1xuICAgICAgICBlbGVtZW50LnN0eWxlLnRvcCA9IHJvdyAqIHRoaXMuZGltZW5zaW9ucy5hY3R1YWxDZWxsSGVpZ2h0ICsgXCJweFwiO1xuICAgICAgICBlbGVtZW50LnN0eWxlLmxlZnQgPSBjb2xTdGFydCAqIHRoaXMuZGltZW5zaW9ucy5hY3R1YWxDZWxsV2lkdGggKyBcInB4XCI7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUud2lkdGggPSB0aGlzLmRpbWVuc2lvbnMuYWN0dWFsQ2VsbFdpZHRoICogKGNvbEVuZCAtIGNvbFN0YXJ0KSArIFwicHhcIjtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfTtcbiAgICBEb21SZW5kZXJlci5wcm90b3R5cGUub25DdXJzb3JNb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgIH07XG4gICAgRG9tUmVuZGVyZXIucHJvdG90eXBlLm9uT3B0aW9uc0NoYW5nZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZURpbWVuc2lvbnMoKTtcbiAgICAgICAgdGhpcy5zZXRUaGVtZSh1bmRlZmluZWQpO1xuICAgICAgICB0aGlzLl90ZXJtaW5hbC5yZWZyZXNoKDAsIHRoaXMuX3Rlcm1pbmFsLnJvd3MgLSAxKTtcbiAgICB9O1xuICAgIERvbVJlbmRlcmVyLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fcm93RWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS5pbm5lckhUTUwgPSAnJzsgfSk7XG4gICAgfTtcbiAgICBEb21SZW5kZXJlci5wcm90b3R5cGUucmVmcmVzaFJvd3MgPSBmdW5jdGlvbiAoc3RhcnQsIGVuZCkge1xuICAgICAgICB0aGlzLl9yZW5kZXJEZWJvdW5jZXIucmVmcmVzaChzdGFydCwgZW5kKTtcbiAgICB9O1xuICAgIERvbVJlbmRlcmVyLnByb3RvdHlwZS5fcmVuZGVyUm93cyA9IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gICAgICAgIHZhciB0ZXJtaW5hbCA9IHRoaXMuX3Rlcm1pbmFsO1xuICAgICAgICB2YXIgY3Vyc29yQWJzb2x1dGVZID0gdGVybWluYWwuYnVmZmVyLnliYXNlICsgdGVybWluYWwuYnVmZmVyLnk7XG4gICAgICAgIHZhciBjdXJzb3JYID0gdGhpcy5fdGVybWluYWwuYnVmZmVyLng7XG4gICAgICAgIGZvciAodmFyIHkgPSBzdGFydDsgeSA8PSBlbmQ7IHkrKykge1xuICAgICAgICAgICAgdmFyIHJvd0VsZW1lbnQgPSB0aGlzLl9yb3dFbGVtZW50c1t5XTtcbiAgICAgICAgICAgIHJvd0VsZW1lbnQuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgICAgICB2YXIgcm93ID0geSArIHRlcm1pbmFsLmJ1ZmZlci55ZGlzcDtcbiAgICAgICAgICAgIHZhciBsaW5lRGF0YSA9IHRlcm1pbmFsLmJ1ZmZlci5saW5lcy5nZXQocm93KTtcbiAgICAgICAgICAgIHZhciBjdXJzb3JTdHlsZSA9IHRlcm1pbmFsLm9wdGlvbnMuY3Vyc29yU3R5bGU7XG4gICAgICAgICAgICByb3dFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuX3Jvd0ZhY3RvcnkuY3JlYXRlUm93KGxpbmVEYXRhLCByb3cgPT09IGN1cnNvckFic29sdXRlWSwgY3Vyc29yU3R5bGUsIGN1cnNvclgsIHRoaXMuZGltZW5zaW9ucy5hY3R1YWxDZWxsV2lkdGgsIHRlcm1pbmFsLmNvbHMpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90ZXJtaW5hbC5lbWl0KCdyZWZyZXNoJywgeyBzdGFydDogc3RhcnQsIGVuZDogZW5kIH0pO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERvbVJlbmRlcmVyLnByb3RvdHlwZSwgXCJfdGVybWluYWxTZWxlY3RvclwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiLlwiICsgVEVSTUlOQUxfQ0xBU1NfUFJFRklYICsgdGhpcy5fdGVybWluYWxDbGFzcztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgRG9tUmVuZGVyZXIucHJvdG90eXBlLnJlZ2lzdGVyQ2hhcmFjdGVySm9pbmVyID0gZnVuY3Rpb24gKGhhbmRsZXIpIHsgcmV0dXJuIC0xOyB9O1xuICAgIERvbVJlbmRlcmVyLnByb3RvdHlwZS5kZXJlZ2lzdGVyQ2hhcmFjdGVySm9pbmVyID0gZnVuY3Rpb24gKGpvaW5lcklkKSB7IHJldHVybiBmYWxzZTsgfTtcbiAgICBEb21SZW5kZXJlci5wcm90b3R5cGUuX29uTGlua0hvdmVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdGhpcy5fc2V0Q2VsbFVuZGVybGluZShlLngxLCBlLngyLCBlLnkxLCBlLnkyLCBlLmNvbHMsIHRydWUpO1xuICAgIH07XG4gICAgRG9tUmVuZGVyZXIucHJvdG90eXBlLl9vbkxpbmtMZWF2ZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHRoaXMuX3NldENlbGxVbmRlcmxpbmUoZS54MSwgZS54MiwgZS55MSwgZS55MiwgZS5jb2xzLCBmYWxzZSk7XG4gICAgfTtcbiAgICBEb21SZW5kZXJlci5wcm90b3R5cGUuX3NldENlbGxVbmRlcmxpbmUgPSBmdW5jdGlvbiAoeCwgeDIsIHksIHkyLCBjb2xzLCBlbmFibGVkKSB7XG4gICAgICAgIHdoaWxlICh4ICE9PSB4MiB8fCB5ICE9PSB5Mikge1xuICAgICAgICAgICAgdmFyIHJvdyA9IHRoaXMuX3Jvd0VsZW1lbnRzW3ldO1xuICAgICAgICAgICAgaWYgKCFyb3cpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc3BhbiA9IHJvdy5jaGlsZHJlblt4XTtcbiAgICAgICAgICAgIHNwYW4uc3R5bGUudGV4dERlY29yYXRpb24gPSBlbmFibGVkID8gJ3VuZGVybGluZScgOiAnbm9uZSc7XG4gICAgICAgICAgICB4ID0gKHggKyAxKSAlIGNvbHM7XG4gICAgICAgICAgICBpZiAoeCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHkrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIERvbVJlbmRlcmVyO1xufShFdmVudEVtaXR0ZXJfMS5FdmVudEVtaXR0ZXIpKTtcbmV4cG9ydHMuRG9tUmVuZGVyZXIgPSBEb21SZW5kZXJlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURvbVJlbmRlcmVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEJ1ZmZlcl8xID0gcmVxdWlyZShcIi4uLy4uL0J1ZmZlclwiKTtcbnZhciBUeXBlc18xID0gcmVxdWlyZShcIi4uL2F0bGFzL1R5cGVzXCIpO1xuZXhwb3J0cy5CT0xEX0NMQVNTID0gJ3h0ZXJtLWJvbGQnO1xuZXhwb3J0cy5JVEFMSUNfQ0xBU1MgPSAneHRlcm0taXRhbGljJztcbmV4cG9ydHMuQ1VSU09SX0NMQVNTID0gJ3h0ZXJtLWN1cnNvcic7XG5leHBvcnRzLkNVUlNPUl9TVFlMRV9CTE9DS19DTEFTUyA9ICd4dGVybS1jdXJzb3ItYmxvY2snO1xuZXhwb3J0cy5DVVJTT1JfU1RZTEVfQkFSX0NMQVNTID0gJ3h0ZXJtLWN1cnNvci1iYXInO1xuZXhwb3J0cy5DVVJTT1JfU1RZTEVfVU5ERVJMSU5FX0NMQVNTID0gJ3h0ZXJtLWN1cnNvci11bmRlcmxpbmUnO1xudmFyIERvbVJlbmRlcmVyUm93RmFjdG9yeSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRG9tUmVuZGVyZXJSb3dGYWN0b3J5KF9kb2N1bWVudCkge1xuICAgICAgICB0aGlzLl9kb2N1bWVudCA9IF9kb2N1bWVudDtcbiAgICB9XG4gICAgRG9tUmVuZGVyZXJSb3dGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGVSb3cgPSBmdW5jdGlvbiAobGluZURhdGEsIGlzQ3Vyc29yUm93LCBjdXJzb3JTdHlsZSwgY3Vyc29yWCwgY2VsbFdpZHRoLCBjb2xzKSB7XG4gICAgICAgIHZhciBmcmFnbWVudCA9IHRoaXMuX2RvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICAgICAgdmFyIGxpbmVMZW5ndGggPSAwO1xuICAgICAgICBmb3IgKHZhciB4ID0gTWF0aC5taW4obGluZURhdGEubGVuZ3RoLCBjb2xzKSAtIDE7IHggPj0gMDsgeC0tKSB7XG4gICAgICAgICAgICB2YXIgY2hhckRhdGEgPSBsaW5lRGF0YS5nZXQoeCk7XG4gICAgICAgICAgICB2YXIgY29kZSA9IGNoYXJEYXRhW0J1ZmZlcl8xLkNIQVJfREFUQV9DT0RFX0lOREVYXTtcbiAgICAgICAgICAgIGlmIChjb2RlICE9PSBCdWZmZXJfMS5OVUxMX0NFTExfQ09ERSB8fCAoaXNDdXJzb3JSb3cgJiYgeCA9PT0gY3Vyc29yWCkpIHtcbiAgICAgICAgICAgICAgICBsaW5lTGVuZ3RoID0geCArIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBsaW5lTGVuZ3RoOyB4KyspIHtcbiAgICAgICAgICAgIHZhciBjaGFyRGF0YSA9IGxpbmVEYXRhLmdldCh4KTtcbiAgICAgICAgICAgIHZhciBjaGFyID0gY2hhckRhdGFbQnVmZmVyXzEuQ0hBUl9EQVRBX0NIQVJfSU5ERVhdO1xuICAgICAgICAgICAgdmFyIGF0dHIgPSBjaGFyRGF0YVtCdWZmZXJfMS5DSEFSX0RBVEFfQVRUUl9JTkRFWF07XG4gICAgICAgICAgICB2YXIgd2lkdGggPSBjaGFyRGF0YVtCdWZmZXJfMS5DSEFSX0RBVEFfV0lEVEhfSU5ERVhdO1xuICAgICAgICAgICAgaWYgKHdpZHRoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY2hhckVsZW1lbnQgPSB0aGlzLl9kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICBpZiAod2lkdGggPiAxKSB7XG4gICAgICAgICAgICAgICAgY2hhckVsZW1lbnQuc3R5bGUud2lkdGggPSBjZWxsV2lkdGggKiB3aWR0aCArIFwicHhcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBmbGFncyA9IGF0dHIgPj4gMTg7XG4gICAgICAgICAgICB2YXIgYmcgPSBhdHRyICYgMHgxZmY7XG4gICAgICAgICAgICB2YXIgZmcgPSAoYXR0ciA+PiA5KSAmIDB4MWZmO1xuICAgICAgICAgICAgaWYgKGlzQ3Vyc29yUm93ICYmIHggPT09IGN1cnNvclgpIHtcbiAgICAgICAgICAgICAgICBjaGFyRWxlbWVudC5jbGFzc0xpc3QuYWRkKGV4cG9ydHMuQ1VSU09SX0NMQVNTKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGN1cnNvclN0eWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2Jhcic6XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFyRWxlbWVudC5jbGFzc0xpc3QuYWRkKGV4cG9ydHMuQ1VSU09SX1NUWUxFX0JBUl9DTEFTUyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAndW5kZXJsaW5lJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoZXhwb3J0cy5DVVJTT1JfU1RZTEVfVU5ERVJMSU5FX0NMQVNTKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhckVsZW1lbnQuY2xhc3NMaXN0LmFkZChleHBvcnRzLkNVUlNPUl9TVFlMRV9CTE9DS19DTEFTUyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZmxhZ3MgJiA4KSB7XG4gICAgICAgICAgICAgICAgdmFyIHRlbXAgPSBiZztcbiAgICAgICAgICAgICAgICBiZyA9IGZnO1xuICAgICAgICAgICAgICAgIGZnID0gdGVtcDtcbiAgICAgICAgICAgICAgICBpZiAoZmcgPT09IFR5cGVzXzEuREVGQVVMVF9DT0xPUikge1xuICAgICAgICAgICAgICAgICAgICBmZyA9IFR5cGVzXzEuSU5WRVJURURfREVGQVVMVF9DT0xPUjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGJnID09PSBUeXBlc18xLkRFRkFVTFRfQ09MT1IpIHtcbiAgICAgICAgICAgICAgICAgICAgYmcgPSBUeXBlc18xLklOVkVSVEVEX0RFRkFVTFRfQ09MT1I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZsYWdzICYgMSkge1xuICAgICAgICAgICAgICAgIGlmIChmZyA8IDgpIHtcbiAgICAgICAgICAgICAgICAgICAgZmcgKz0gODtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2hhckVsZW1lbnQuY2xhc3NMaXN0LmFkZChleHBvcnRzLkJPTERfQ0xBU1MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZsYWdzICYgNjQpIHtcbiAgICAgICAgICAgICAgICBjaGFyRWxlbWVudC5jbGFzc0xpc3QuYWRkKGV4cG9ydHMuSVRBTElDX0NMQVNTKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoYXJFbGVtZW50LnRleHRDb250ZW50ID0gY2hhcjtcbiAgICAgICAgICAgIGlmIChmZyAhPT0gVHlwZXNfMS5ERUZBVUxUX0NPTE9SKSB7XG4gICAgICAgICAgICAgICAgY2hhckVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInh0ZXJtLWZnLVwiICsgZmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJnICE9PSBUeXBlc18xLkRFRkFVTFRfQ09MT1IpIHtcbiAgICAgICAgICAgICAgICBjaGFyRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwieHRlcm0tYmctXCIgKyBiZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChjaGFyRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZyYWdtZW50O1xuICAgIH07XG4gICAgcmV0dXJuIERvbVJlbmRlcmVyUm93RmFjdG9yeTtcbn0oKSk7XG5leHBvcnRzLkRvbVJlbmRlcmVyUm93RmFjdG9yeSA9IERvbVJlbmRlcmVyUm93RmFjdG9yeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURvbVJlbmRlcmVyUm93RmFjdG9yeS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBFc2NhcGVTZXF1ZW5jZXNfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21tb24vZGF0YS9Fc2NhcGVTZXF1ZW5jZXNcIik7XG52YXIgS0VZQ09ERV9LRVlfTUFQUElOR1MgPSB7XG4gICAgNDg6IFsnMCcsICcpJ10sXG4gICAgNDk6IFsnMScsICchJ10sXG4gICAgNTA6IFsnMicsICdAJ10sXG4gICAgNTE6IFsnMycsICcjJ10sXG4gICAgNTI6IFsnNCcsICckJ10sXG4gICAgNTM6IFsnNScsICclJ10sXG4gICAgNTQ6IFsnNicsICdeJ10sXG4gICAgNTU6IFsnNycsICcmJ10sXG4gICAgNTY6IFsnOCcsICcqJ10sXG4gICAgNTc6IFsnOScsICcoJ10sXG4gICAgMTg2OiBbJzsnLCAnOiddLFxuICAgIDE4NzogWyc9JywgJysnXSxcbiAgICAxODg6IFsnLCcsICc8J10sXG4gICAgMTg5OiBbJy0nLCAnXyddLFxuICAgIDE5MDogWycuJywgJz4nXSxcbiAgICAxOTE6IFsnLycsICc/J10sXG4gICAgMTkyOiBbJ2AnLCAnfiddLFxuICAgIDIxOTogWydbJywgJ3snXSxcbiAgICAyMjA6IFsnXFxcXCcsICd8J10sXG4gICAgMjIxOiBbJ10nLCAnfSddLFxuICAgIDIyMjogWydcXCcnLCAnXCInXVxufTtcbmZ1bmN0aW9uIGV2YWx1YXRlS2V5Ym9hcmRFdmVudChldiwgYXBwbGljYXRpb25DdXJzb3JNb2RlLCBpc01hYywgbWFjT3B0aW9uSXNNZXRhKSB7XG4gICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgdHlwZTogMCxcbiAgICAgICAgY2FuY2VsOiBmYWxzZSxcbiAgICAgICAga2V5OiB1bmRlZmluZWRcbiAgICB9O1xuICAgIHZhciBtb2RpZmllcnMgPSAoZXYuc2hpZnRLZXkgPyAxIDogMCkgfCAoZXYuYWx0S2V5ID8gMiA6IDApIHwgKGV2LmN0cmxLZXkgPyA0IDogMCkgfCAoZXYubWV0YUtleSA/IDggOiAwKTtcbiAgICBzd2l0Y2ggKGV2LmtleUNvZGUpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgaWYgKGV2LmtleSA9PT0gJ1VJS2V5SW5wdXRVcEFycm93Jykge1xuICAgICAgICAgICAgICAgIGlmIChhcHBsaWNhdGlvbkN1cnNvck1vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdPQSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1tBJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChldi5rZXkgPT09ICdVSUtleUlucHV0TGVmdEFycm93Jykge1xuICAgICAgICAgICAgICAgIGlmIChhcHBsaWNhdGlvbkN1cnNvck1vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdPRCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1tEJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChldi5rZXkgPT09ICdVSUtleUlucHV0UmlnaHRBcnJvdycpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXBwbGljYXRpb25DdXJzb3JNb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnT0MnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbQyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZXYua2V5ID09PSAnVUlLZXlJbnB1dERvd25BcnJvdycpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXBwbGljYXRpb25DdXJzb3JNb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnT0InO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbQic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgIGlmIChldi5zaGlmdEtleSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5CUztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGV2LmFsdEtleSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5ERUw7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuREVMO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIGlmIChldi5zaGlmdEtleSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnW1onO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkhUO1xuICAgICAgICAgICAgcmVzdWx0LmNhbmNlbCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5DUjtcbiAgICAgICAgICAgIHJlc3VsdC5jYW5jZWwgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjc6XG4gICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDO1xuICAgICAgICAgICAgcmVzdWx0LmNhbmNlbCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzNzpcbiAgICAgICAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1sxOycgKyAobW9kaWZpZXJzICsgMSkgKyAnRCc7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5rZXkgPT09IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbMTszRCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IGlzTWFjID8gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ2InIDogRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1sxOzVEJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhcHBsaWNhdGlvbkN1cnNvck1vZGUpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ09EJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnW0QnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbMTsnICsgKG1vZGlmaWVycyArIDEpICsgJ0MnO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQua2V5ID09PSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnWzE7M0MnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBpc01hYyA/IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdmJyA6IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbMTs1Qyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYXBwbGljYXRpb25DdXJzb3JNb2RlKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdPQyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1tDJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM4OlxuICAgICAgICAgICAgaWYgKG1vZGlmaWVycykge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnWzE7JyArIChtb2RpZmllcnMgKyAxKSArICdBJztcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmtleSA9PT0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1sxOzNBJykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1sxOzVBJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhcHBsaWNhdGlvbkN1cnNvck1vZGUpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ09BJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnW0EnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbMTsnICsgKG1vZGlmaWVycyArIDEpICsgJ0InO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQua2V5ID09PSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnWzE7M0InKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnWzE7NUInO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGFwcGxpY2F0aW9uQ3Vyc29yTW9kZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnT0InO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbQic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICAgIGlmICghZXYuc2hpZnRLZXkgJiYgIWV2LmN0cmxLZXkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1syfic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA0NjpcbiAgICAgICAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1szOycgKyAobW9kaWZpZXJzICsgMSkgKyAnfic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1szfic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzNjpcbiAgICAgICAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1sxOycgKyAobW9kaWZpZXJzICsgMSkgKyAnSCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhcHBsaWNhdGlvbkN1cnNvck1vZGUpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ09IJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnW0gnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzU6XG4gICAgICAgICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbMTsnICsgKG1vZGlmaWVycyArIDEpICsgJ0YnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYXBwbGljYXRpb25DdXJzb3JNb2RlKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdPRic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1tGJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDMzOlxuICAgICAgICAgICAgaWYgKGV2LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnR5cGUgPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbNX4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzQ6XG4gICAgICAgICAgICBpZiAoZXYuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQudHlwZSA9IDM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gRXNjYXBlU2VxdWVuY2VzXzEuQzAuRVNDICsgJ1s2fic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMTI6XG4gICAgICAgICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbMTsnICsgKG1vZGlmaWVycyArIDEpICsgJ1AnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdPUCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMTM6XG4gICAgICAgICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbMTsnICsgKG1vZGlmaWVycyArIDEpICsgJ1EnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdPUSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMTQ6XG4gICAgICAgICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbMTsnICsgKG1vZGlmaWVycyArIDEpICsgJ1InO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdPUic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbMTsnICsgKG1vZGlmaWVycyArIDEpICsgJ1MnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdPUyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMTY6XG4gICAgICAgICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbMTU7JyArIChtb2RpZmllcnMgKyAxKSArICd+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnWzE1fic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMTc6XG4gICAgICAgICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbMTc7JyArIChtb2RpZmllcnMgKyAxKSArICd+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnWzE3fic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMTg6XG4gICAgICAgICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbMTg7JyArIChtb2RpZmllcnMgKyAxKSArICd+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnWzE4fic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMTk6XG4gICAgICAgICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbMTk7JyArIChtb2RpZmllcnMgKyAxKSArICd+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnWzE5fic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMjA6XG4gICAgICAgICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbMjA7JyArIChtb2RpZmllcnMgKyAxKSArICd+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnWzIwfic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMjE6XG4gICAgICAgICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbMjE7JyArIChtb2RpZmllcnMgKyAxKSArICd+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnWzIxfic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMjI6XG4gICAgICAgICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbMjM7JyArIChtb2RpZmllcnMgKyAxKSArICd+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnWzIzfic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxMjM6XG4gICAgICAgICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IEVzY2FwZVNlcXVlbmNlc18xLkMwLkVTQyArICdbMjQ7JyArIChtb2RpZmllcnMgKyAxKSArICd+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyAnWzI0fic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGlmIChldi5jdHJsS2V5ICYmICFldi5zaGlmdEtleSAmJiAhZXYuYWx0S2V5ICYmICFldi5tZXRhS2V5KSB7XG4gICAgICAgICAgICAgICAgaWYgKGV2LmtleUNvZGUgPj0gNjUgJiYgZXYua2V5Q29kZSA8PSA5MCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gU3RyaW5nLmZyb21DaGFyQ29kZShldi5rZXlDb2RlIC0gNjQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChldi5rZXlDb2RlID09PSAzMikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQua2V5ID0gU3RyaW5nLmZyb21DaGFyQ29kZSgwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZXYua2V5Q29kZSA+PSA1MSAmJiBldi5rZXlDb2RlIDw9IDU1KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGV2LmtleUNvZGUgLSA1MSArIDI3KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZXYua2V5Q29kZSA9PT0gNTYpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmtleSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMTI3KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZXYua2V5Q29kZSA9PT0gMjE5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDI3KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZXYua2V5Q29kZSA9PT0gMjIwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDI4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZXYua2V5Q29kZSA9PT0gMjIxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDI5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICgoIWlzTWFjIHx8IG1hY09wdGlvbklzTWV0YSkgJiYgZXYuYWx0S2V5ICYmICFldi5tZXRhS2V5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleU1hcHBpbmcgPSBLRVlDT0RFX0tFWV9NQVBQSU5HU1tldi5rZXlDb2RlXTtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0ga2V5TWFwcGluZyAmJiBrZXlNYXBwaW5nWyFldi5zaGlmdEtleSA/IDAgOiAxXTtcbiAgICAgICAgICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyBrZXk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGV2LmtleUNvZGUgPj0gNjUgJiYgZXYua2V5Q29kZSA8PSA5MCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIga2V5Q29kZSA9IGV2LmN0cmxLZXkgPyBldi5rZXlDb2RlIC0gNjQgOiBldi5rZXlDb2RlICsgMzI7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5rZXkgPSBFc2NhcGVTZXF1ZW5jZXNfMS5DMC5FU0MgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGtleUNvZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzTWFjICYmICFldi5hbHRLZXkgJiYgIWV2LmN0cmxLZXkgJiYgZXYubWV0YUtleSkge1xuICAgICAgICAgICAgICAgIGlmIChldi5rZXlDb2RlID09PSA2NSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQudHlwZSA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLmV2YWx1YXRlS2V5Ym9hcmRFdmVudCA9IGV2YWx1YXRlS2V5Ym9hcmRFdmVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUtleWJvYXJkLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIFRlcm1pbmFsXzEgPSByZXF1aXJlKFwiLi9wdWJsaWMvVGVybWluYWxcIik7XG5tb2R1bGUuZXhwb3J0cyA9IFRlcm1pbmFsXzEuVGVybWluYWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD14dGVybS5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9